void sub_1C5604000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  std::__shared_weak_count *v22;

  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MediaSessionStateMachine::handleMediaSessionInitialized(uint64_t a1, uint64_t a2, int a3)
{
}

void MediaSessionStateMachine::handleMediaSessionTerminated(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v16, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v16, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleMediaSessionTerminated", 28);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" isTransactionPending=", 22);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" actionQueueSize=", 17);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(void))(**(void **)(a1 + 152) + 216))(*(void *)(a1 + 152));
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v16);
  }
  if (*(unsigned char *)(a1 + 137) == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::warn((uint64_t)&v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Session terminated notification received while uninitialized ", 61);
  }
  else
  {
    *(unsigned char *)(a1 + 137) = 3;
    std::string::basic_string[abi:ne180100]<0>(&v16, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)&v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Session terminated ", 19);
  }
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(void))(**(void **)a2 + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v16);
  }
  if (*(unsigned char *)(a1 + 184) && !ims::AccessNetwork::isWifi((ims::AccessNetwork *)(a1 + 192))) {
    MediaSessionStateMachine::reportAPSession((MediaSessionStateMachine *)a1, 0);
  }
  v16 = 0;
  v17 = 0;
  RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v16);
  v8 = *(std::__shared_weak_count **)(a1 + 40);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      v10 = v9;
      uint64_t v11 = *(void *)(a1 + 32);
      if (v11)
      {
        v12 = v16;
        v13 = v17;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v11 + 8))(v11, &v12, a3);
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  *(unsigned char *)(a1 + 138) = 0;
  (*(void (**)(void))(**(void **)(a1 + 152) + 200))(*(void *)(a1 + 152));
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_1C56044C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, std::__shared_weak_count *a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MediaSessionStateMachine::handleMediaSessionTerminated(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void MediaSessionStateMachine::handleMediaSessionConfigured(MediaSessionStateMachine *a1, uint64_t a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v44, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(&v41, "");
  uint64_t v6 = ims::debug((uint64_t)v44, (uint64_t)&v41);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleMediaSessionConfigured", 28);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" isTransactionPending=", 22);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" actionQueueSize=", 17);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(void))(**((void **)a1 + 19) + 216))(*((void *)a1 + 19));
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v43 < 0) {
    operator delete(v41);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  int v7 = *((unsigned __int8 *)a1 + 137);
  if (v7 == 3)
  {
    std::string::basic_string[abi:ne180100]<0>(v44, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(&v41, "");
    uint64_t v14 = ims::debug((uint64_t)v44, (uint64_t)&v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Session initialized ", 20);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(void))(**(void **)a2 + 176))();
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v43 < 0) {
      operator delete(v41);
    }
    if (v45 < 0) {
      operator delete(v44[0]);
    }
    if (*((unsigned char *)a1 + 301))
    {
      if (*((unsigned char *)a1 + 302))
      {
        int v15 = (*(uint64_t (**)(MediaSessionStateMachine *))(*(void *)a1 + 144))(a1);
        if (!a3 && v15 == 2) {
          goto LABEL_77;
        }
      }
    }
    v41 = 0;
    v42 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)a1, &v41);
    uint64_t v16 = *((void *)a1 + 7);
    LoggableString::LoggableString((LoggableString *)v44, "rtp.statemachine.handleMediaSessionInitialized");
    v17 = v41;
    char v18 = v42;
    v36[0] = (uint64_t)v41;
    v36[1] = (uint64_t)v42;
    if (v42)
    {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      v19 = v42;
    }
    else
    {
      v19 = 0;
    }
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 1174405120;
    v33[2] = ___ZN24MediaSessionStateMachine28handleMediaSessionConfiguredENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke_79;
    v33[3] = &__block_descriptor_tmp_82_3;
    v33[4] = a1;
    v33[5] = v17;
    v34 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v35 = a3;
    RTPManager::performBlock(v16, (uint64_t)v44, v36, (uint64_t)v33);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (v45 < 0) {
      operator delete(v44[0]);
    }
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
  }
  else if (v7 == 5)
  {
    std::string::basic_string[abi:ne180100]<0>(v44, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(&v41, "");
    uint64_t v8 = ims::debug((uint64_t)v44, (uint64_t)&v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Session configured ", 19);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(void))(**(void **)a2 + 176))();
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v43 < 0) {
      operator delete(v41);
    }
    if (v45 < 0) {
      operator delete(v44[0]);
    }
    if (!*((unsigned char *)a1 + 301)
      || !*((unsigned char *)a1 + 302)
      || (int v9 = (*(uint64_t (**)(MediaSessionStateMachine *))(*(void *)a1 + 144))(a1), a3)
      || v9 != 2
      || *((unsigned char *)a1 + 308))
    {
      v41 = 0;
      v42 = 0;
      RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)a1, &v41);
      uint64_t v10 = *((void *)a1 + 7);
      LoggableString::LoggableString((LoggableString *)v44, "rtp.statemachine.handleMediaSessionConfigured");
      uint64_t v11 = v41;
      v12 = v42;
      v40[0] = (uint64_t)v41;
      v40[1] = (uint64_t)v42;
      if (v42)
      {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        v13 = v42;
      }
      else
      {
        v13 = 0;
      }
      v37[0] = MEMORY[0x1E4F143A8];
      v37[1] = 1174405120;
      v37[2] = ___ZN24MediaSessionStateMachine28handleMediaSessionConfiguredENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke;
      v37[3] = &__block_descriptor_tmp_77_0;
      v37[4] = a1;
      v37[5] = v11;
      v38 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v39 = a3;
      RTPManager::performBlock(v10, (uint64_t)v44, v40, (uint64_t)v37);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (v45 < 0) {
        operator delete(v44[0]);
      }
      v20 = v38;
      if (!v38) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
LABEL_78:
    BOOL v28 = 1;
    goto LABEL_74;
  }
  std::string::basic_string[abi:ne180100]<0>(v44, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(&v41, "");
  uint64_t v21 = ims::debug((uint64_t)v44, (uint64_t)&v41);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Session configured ", 19);
  *(unsigned char *)(v21 + 17) = 0;
  (*(void (**)(void))(**(void **)a2 + 176))();
  std::ostream::operator<<();
  *(unsigned char *)(v21 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v21 + 17) = 0;
  if (v43 < 0) {
    operator delete(v41);
  }
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  if (*((unsigned char *)a1 + 301) && *((unsigned char *)a1 + 302))
  {
    int v22 = (*(uint64_t (**)(MediaSessionStateMachine *))(*(void *)a1 + 144))(a1);
    BOOL v23 = a3 == 0;
    if (a3 || v22 != 2) {
      goto LABEL_59;
    }
    if (*((unsigned char *)a1 + 308))
    {
      BOOL v23 = 1;
      goto LABEL_59;
    }
LABEL_77:
    *((unsigned char *)a1 + 137) = 5;
    goto LABEL_78;
  }
  BOOL v23 = a3 == 0;
LABEL_59:
  v41 = 0;
  v42 = 0;
  RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)a1, &v41);
  uint64_t v24 = *((void *)a1 + 7);
  LoggableString::LoggableString((LoggableString *)v44, "rtp.statemachine.handleMediaSessionConfigured");
  v25 = v41;
  v26 = v42;
  v32[0] = (uint64_t)v41;
  v32[1] = (uint64_t)v42;
  if (v42)
  {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    v27 = v42;
  }
  else
  {
    v27 = 0;
  }
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 1174405120;
  v29[2] = ___ZN24MediaSessionStateMachine28handleMediaSessionConfiguredENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke_83;
  v29[3] = &__block_descriptor_tmp_86_4;
  v29[4] = a1;
  v29[5] = v25;
  v30 = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v31 = a3;
  RTPManager::performBlock(v24, (uint64_t)v44, v32, (uint64_t)v29);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if ((v45 & 0x80000000) == 0)
  {
    if (!v23) {
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  operator delete(v44[0]);
  if (v23) {
LABEL_68:
  }
    *((unsigned char *)a1 + 137) = 5;
LABEL_69:
  v20 = v30;
  if (v30) {
LABEL_70:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
LABEL_71:
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  BOOL v28 = a3 == 0;
LABEL_74:
  MediaSessionStateMachine::transactionComplete(a1, v28);
}

void sub_1C5604DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (*(char *)(v36 - 49) < 0) {
    operator delete(*(void **)(v36 - 72));
  }
  v38 = *(std::__shared_weak_count **)(v36 - 88);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN24MediaSessionStateMachine28handleMediaSessionConfiguredENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
        uint64_t v12 = *(void *)(a1 + 40);
        v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 16))(v5, &v12, *(unsigned int *)(a1 + 56));
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C5604FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void ___ZN24MediaSessionStateMachine28handleMediaSessionConfiguredENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke_79(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void (****)(void, uint64_t *, void))(v2 + 32);
      if (v5)
      {
        uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
        uint64_t v12 = *(void *)(a1 + 40);
        v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (**v5)(v5, &v12, *(unsigned int *)(a1 + 56));
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C56051CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void ___ZN24MediaSessionStateMachine28handleMediaSessionConfiguredENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke_83(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
        uint64_t v12 = *(void *)(a1 + 40);
        v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 16))(v5, &v12, *(unsigned int *)(a1 + 56));
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C56053A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MediaSessionStateMachine::handleMediaSessionConfigured(uint64_t a1, uint64_t a2, int a3)
{
}

void MediaSessionStateMachine::handleMediaSessionActivated(uint64_t a1, uint64_t a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v86, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(&v83, "");
  uint64_t v6 = ims::debug((uint64_t)&v86, (uint64_t)&v83);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleMediaSessionActivated", 27);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" isTransactionPending=", 22);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" actionQueueSize=", 17);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(void))(**(void **)(a1 + 152) + 216))(*(void *)(a1 + 152));
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v85 < 0) {
    operator delete(v83);
  }
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v86.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(a1 + 139) = 0;
  if (a3 != 2)
  {
    int v9 = (*(uint64_t (**)(void))(**(void **)a2 + 96))();
    unsigned int v10 = v9;
    unsigned int v82 = v9;
    uint64_t v11 = *(void *)(a1 + 168);
    int v12 = *(_DWORD *)(v11 + 408);
    int v13 = *(_DWORD *)(v11 + 412);
    LODWORD(v14) = *(unsigned __int16 *)(v11 + 420);
    if (*(unsigned __int16 *)(v11 + 422) <= v14) {
      uint64_t v15 = *(unsigned __int16 *)(v11 + 420);
    }
    else {
      uint64_t v15 = *(unsigned __int16 *)(v11 + 422);
    }
    if (v9 == 4)
    {
      uint64_t v14 = 0;
      goto LABEL_55;
    }
    uint64_t v16 = (_OWORD *)(v11 + 424);
    if (v9 >= 2)
    {
      if (*(char *)(v11 + 447) < 0)
      {
        std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v11 + 424), *(void *)(v11 + 432));
      }
      else
      {
        *(_OWORD *)&v86.__r_.__value_.__l.__data_ = *v16;
        v86.__r_.__value_.__r.__words[2] = *(void *)(v11 + 440);
      }
      std::string::size_type size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v86.__r_.__value_.__l.__size_;
      }
      if (size == 3)
      {
        char v18 = (std::string *)v86.__r_.__value_.__r.__words[0];
        if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v18 = &v86;
        }
        int data_low = LOWORD(v18->__r_.__value_.__l.__data_);
        int v20 = v18->__r_.__value_.__s.__data_[2];
        BOOL v22 = data_low == 21586 && v20 == 80;
        if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_33;
        }
      }
      else
      {
        BOOL v22 = 0;
        if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_33:
          if (v22) {
            uint64_t v14 = v14;
          }
          else {
            uint64_t v14 = 0;
          }
          if (v22) {
            uint64_t v15 = 0;
          }
          else {
            uint64_t v15 = v15;
          }
          goto LABEL_55;
        }
      }
      operator delete(v86.__r_.__value_.__l.__data_);
      goto LABEL_33;
    }
    if (*(char *)(v11 + 447) < 0)
    {
      std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v11 + 424), *(void *)(v11 + 432));
    }
    else
    {
      *(_OWORD *)&v86.__r_.__value_.__l.__data_ = *v16;
      v86.__r_.__value_.__r.__words[2] = *(void *)(v11 + 440);
    }
    std::string::size_type v23 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v23 = v86.__r_.__value_.__l.__size_;
    }
    if (v23 == 4)
    {
      uint64_t v24 = (std::string *)v86.__r_.__value_.__r.__words[0];
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v24 = &v86;
      }
      BOOL v25 = LODWORD(v24->__r_.__value_.__l.__data_) == 1346589778;
      if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_49;
      }
    }
    else
    {
      BOOL v25 = 0;
      if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_49:
        if (v25) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = v14;
        }
        if (v25) {
          uint64_t v15 = v15;
        }
        else {
          uint64_t v15 = 0;
        }
LABEL_55:
        if (*(unsigned char *)(a1 + 301)
          && *(unsigned char *)(a1 + 302)
          && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 144))(a1) == 2
          && !a3
          && !*(unsigned char *)(a1 + 308))
        {
          std::string::basic_string[abi:ne180100]<0>(&v86, "rtp.statemachine");
          std::string::basic_string[abi:ne180100]<0>(&v83, "");
          uint64_t v26 = ims::debug((uint64_t)&v86, (uint64_t)&v83);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"Autostart complete for session ", 31);
          *(unsigned char *)(v26 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v26 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v26 + 17) = 0;
          if (v85 < 0) {
            operator delete(v83);
          }
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v86.__r_.__value_.__l.__data_);
          }
          v27 = (unsigned char *)(a1 + 136);
          int v28 = *(unsigned __int8 *)(a1 + 136);
          *(unsigned char *)(a1 + 308) = 1;
          if (v28 != 1)
          {
            if (v10 - 1 <= 1)
            {
LABEL_103:
              if (v10 == 1)
              {
                v42 = *(_DWORD **)(a1 + 168);
                if (*(unsigned char *)(a1 + 140))
                {
                  (*(void (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v42 + 200))(v42, v14, v15);
                  v42 = *(_DWORD **)(a1 + 168);
                }
                if (v12 != v13)
                {
                  (*(void (**)(_DWORD *, BOOL, void))(*(void *)v42 + 216))(v42, v12 != 0, (unsigned __int16)v12);
                  v42 = *(_DWORD **)(a1 + 168);
                }
                if (v42[104]) {
                  (*(void (**)(_DWORD *, uint64_t, void))(*(void *)v42 + 208))(v42, 1, (unsigned __int16)v42[104]);
                }
              }
              else if (*(_DWORD *)(a1 + 144) == 1)
              {
                if (*(unsigned char *)(a1 + 140)) {
                  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 200))(*(void *)(a1 + 168), v14, v15);
                }
                if (v12 != v13) {
                  (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 216))(*(void *)(a1 + 168), 1, (unsigned __int16)v13);
                }
              }
              if ((*(_DWORD *)(a1 + 144) - 3) > 1) {
                goto LABEL_161;
              }
              std::string::basic_string[abi:ne180100]<0>(&v86, "rtp.statemachine");
              std::string::basic_string[abi:ne180100]<0>(&v83, "");
              uint64_t v53 = ims::debug((uint64_t)&v86, (uint64_t)&v83);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v53 + 8), (uint64_t)"Session active ", 15);
              *(unsigned char *)(v53 + 17) = 0;
              (*(void (**)(void))(**(void **)a2 + 176))();
              std::ostream::operator<<();
              *(unsigned char *)(v53 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v53 + 17) = 0;
              if (v85 < 0) {
                operator delete(v83);
              }
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v86.__r_.__value_.__l.__data_);
              }
              v83 = 0;
              v84 = 0;
              RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v83);
              uint64_t v54 = *(void *)(a1 + 56);
              LoggableString::LoggableString((LoggableString *)&v86, "rtp.statemachine.handleMediaSessionReActivated");
              v55 = v83;
              v56 = v84;
              v75[0] = (uint64_t)v83;
              v75[1] = (uint64_t)v84;
              if (v84)
              {
                atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
                v57 = v84;
              }
              else
              {
                v57 = 0;
              }
              v72[0] = MEMORY[0x1E4F143A8];
              v72[1] = 1174405120;
              v72[2] = ___ZN24MediaSessionStateMachine27handleMediaSessionActivatedENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke_99;
              v72[3] = &__block_descriptor_tmp_102_1;
              v72[4] = a1;
              v72[5] = v55;
              v73 = v57;
              if (v57) {
                atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v74 = 0;
              RTPManager::performBlock(v54, (uint64_t)&v86, v75, (uint64_t)v72);
              if (v56) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v56);
              }
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v86.__r_.__value_.__l.__data_);
              }
              v58 = v73;
              if (!v73) {
                goto LABEL_159;
              }
              goto LABEL_158;
            }
            goto LABEL_110;
          }
        }
        else
        {
          v27 = (unsigned char *)(a1 + 136);
          if (*(unsigned char *)(a1 + 136) != 1)
          {
            if (v10 - 1 < 2)
            {
              if (a3)
              {
                std::string::basic_string[abi:ne180100]<0>(&v86, "rtp.statemachine");
                std::string::basic_string[abi:ne180100]<0>(&v83, "");
                uint64_t v30 = ims::warn((uint64_t)&v86, (uint64_t)&v83);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"Unable to change direction for session ", 39);
                *(unsigned char *)(v30 + 17) = 0;
                (*(void (**)(void))(**(void **)a2 + 176))();
                std::ostream::operator<<();
                *(unsigned char *)(v30 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v30 + 17) = 0;
                if (v85 < 0) {
                  operator delete(v83);
                }
                if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v86.__r_.__value_.__l.__data_);
                }
                v83 = 0;
                v84 = 0;
                RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v83);
                uint64_t v31 = *(void *)(a1 + 56);
                LoggableString::LoggableString((LoggableString *)&v86, "rtp.statemachine.handleMediaSessionActivatedFailure");
                v32 = v83;
                v33 = v84;
                v71[0] = (uint64_t)v83;
                v71[1] = (uint64_t)v84;
                if (v84)
                {
                  atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
                  v34 = v84;
                }
                else
                {
                  v34 = 0;
                }
                v68[0] = MEMORY[0x1E4F143A8];
                v68[1] = 1174405120;
                v68[2] = ___ZN24MediaSessionStateMachine27handleMediaSessionActivatedENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke_105;
                v68[3] = &__block_descriptor_tmp_108_2;
                v68[4] = a1;
                v68[5] = v32;
                v69 = v34;
                if (v34) {
                  atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                int v70 = a3;
                RTPManager::performBlock(v31, (uint64_t)&v86, v71, (uint64_t)v68);
                if (v33) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
                }
                if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v86.__r_.__value_.__l.__data_);
                }
                v58 = v69;
                if (!v69) {
                  goto LABEL_159;
                }
                goto LABEL_158;
              }
              goto LABEL_103;
            }
            if (a3)
            {
              std::string::basic_string[abi:ne180100]<0>(&v86, "rtp.statemachine");
              std::string::basic_string[abi:ne180100]<0>(&v83, "");
              uint64_t v35 = ims::warn((uint64_t)&v86, (uint64_t)&v83);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"Unable to change direction for session ", 39);
              *(unsigned char *)(v35 + 17) = 0;
              (*(void (**)(void))(**(void **)a2 + 176))();
              std::ostream::operator<<();
              *(unsigned char *)(v35 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v35 + 17) = 0;
              if (v85 < 0) {
                operator delete(v83);
              }
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v86.__r_.__value_.__l.__data_);
              }
              v83 = 0;
              v84 = 0;
              RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v83);
              uint64_t v36 = *(void *)(a1 + 56);
              LoggableString::LoggableString((LoggableString *)&v86, "rtp.statemachine.handleMediaSessionDeactivated");
              v37 = v83;
              v38 = v84;
              v67[0] = (uint64_t)v83;
              v67[1] = (uint64_t)v84;
              if (v84)
              {
                atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
                int v39 = v84;
              }
              else
              {
                int v39 = 0;
              }
              v64[0] = MEMORY[0x1E4F143A8];
              v64[1] = 1174405120;
              v64[2] = ___ZN24MediaSessionStateMachine27handleMediaSessionActivatedENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke_109;
              v64[3] = &__block_descriptor_tmp_112_0;
              v64[4] = a1;
              v64[5] = v37;
              v65 = v39;
              if (v39) {
                atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              int v66 = a3;
              RTPManager::performBlock(v36, (uint64_t)&v86, v67, (uint64_t)v64);
              if (v38) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v38);
              }
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v86.__r_.__value_.__l.__data_);
              }
              v58 = v65;
              if (!v65) {
                goto LABEL_159;
              }
              goto LABEL_158;
            }
LABEL_110:
            int v43 = *(_DWORD *)(a1 + 144);
            if ((v43 - 1) > 1)
            {
LABEL_161:
              std::string::basic_string[abi:ne180100]<0>(&v86, "rtp.statemachine");
              std::string::basic_string[abi:ne180100]<0>(&v83, "");
              uint64_t v59 = ims::debug((uint64_t)&v86, (uint64_t)&v83);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v59 + 8), (uint64_t)"Session direction changed to ", 29);
              *(unsigned char *)(v59 + 17) = 0;
              ims::toString<MediaDirection>(&v82, &v80);
              LoggableString::LoggableString(&v81, &v80);
              (*(void (**)(uint64_t, std::string *))(*(void *)v59 + 40))(v59, &v81);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v59 + 64))(v59, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v59 + 17) = 0;
              if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v81.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v80.__r_.__value_.__l.__data_);
              }
              if (v85 < 0) {
                operator delete(v83);
              }
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v86.__r_.__value_.__l.__data_);
              }
              unsigned int v10 = v82;
LABEL_170:
              *(_DWORD *)(a1 + 144) = v10;
              BOOL v8 = a3 == 0;
              uint64_t v7 = (MediaSessionStateMachine *)a1;
              goto LABEL_171;
            }
            if (v43 == 1 && *(unsigned char *)(a1 + 140)) {
              (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 200))(*(void *)(a1 + 168), v14, v15);
            }
            if (v12 != v13) {
              (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 216))(*(void *)(a1 + 168), 1, (unsigned __int16)v13);
            }
            std::string::basic_string[abi:ne180100]<0>(&v86, "rtp.statemachine");
            std::string::basic_string[abi:ne180100]<0>(&v83, "");
            uint64_t v44 = ims::debug((uint64_t)&v86, (uint64_t)&v83);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"Session inactive ", 17);
            *(unsigned char *)(v44 + 17) = 0;
            (*(void (**)(void))(**(void **)a2 + 176))();
            std::ostream::operator<<();
            *(unsigned char *)(v44 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v44 + 17) = 0;
            if (v85 < 0) {
              operator delete(v83);
            }
            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v86.__r_.__value_.__l.__data_);
            }
            v83 = 0;
            v84 = 0;
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v83);
            uint64_t v45 = *(void *)(a1 + 56);
            LoggableString::LoggableString((LoggableString *)&v86, "rtp.statemachine.handleMediaSessionDeactivated");
            v46 = v83;
            v47 = v84;
            v63[0] = (uint64_t)v83;
            v63[1] = (uint64_t)v84;
            if (v84)
            {
              atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
              v48 = v84;
            }
            else
            {
              v48 = 0;
            }
            v60[0] = MEMORY[0x1E4F143A8];
            v60[1] = 1174405120;
            v60[2] = ___ZN24MediaSessionStateMachine27handleMediaSessionActivatedENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke_114;
            v60[3] = &__block_descriptor_tmp_117_2;
            v60[4] = a1;
            v60[5] = v46;
            v61 = v48;
            if (v48) {
              atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v62 = 0;
            RTPManager::performBlock(v45, (uint64_t)&v86, v63, (uint64_t)v60);
            if (v47) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v47);
            }
            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v86.__r_.__value_.__l.__data_);
            }
            v58 = v61;
            if (!v61)
            {
LABEL_159:
              if (v84) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v84);
              }
              goto LABEL_161;
            }
LABEL_158:
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
            goto LABEL_159;
          }
          if (a3)
          {
            std::string::basic_string[abi:ne180100]<0>(&v86, "rtp.statemachine");
            std::string::basic_string[abi:ne180100]<0>(&v83, "");
            uint64_t v29 = ims::warn((uint64_t)&v86, (uint64_t)&v83);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"Session ", 8);
            *(unsigned char *)(v29 + 17) = 0;
            (*(void (**)(void))(**(void **)a2 + 176))();
            std::ostream::operator<<();
            *(unsigned char *)(v29 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)" failed to start.", 17);
            *(unsigned char *)(v29 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v29 + 17) = 0;
            if (v85 < 0) {
              operator delete(v83);
            }
            if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v86.__r_.__value_.__l.__data_);
            }
            goto LABEL_125;
          }
        }
        unsigned char *v27 = 2;
        std::string::basic_string[abi:ne180100]<0>(&v86, "rtp.statemachine");
        std::string::basic_string[abi:ne180100]<0>(&v83, "");
        uint64_t v40 = ims::debug((uint64_t)&v86, (uint64_t)&v83);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"Session started ", 16);
        *(unsigned char *)(v40 + 17) = 0;
        (*(void (**)(void))(**(void **)a2 + 176))();
        std::ostream::operator<<();
        *(unsigned char *)(v40 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)" with direction ", 16);
        *(unsigned char *)(v40 + 17) = 0;
        ims::toString<MediaDirection>(&v82, &v80);
        LoggableString::LoggableString(&v81, &v80);
        (*(void (**)(uint64_t, std::string *))(*(void *)v40 + 40))(v40, &v81);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v40 + 17) = 0;
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v81.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v80.__r_.__value_.__l.__data_);
        }
        if (v85 < 0) {
          operator delete(v83);
        }
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v86.__r_.__value_.__l.__data_);
        }
        if (v10 == 1)
        {
          if (*(unsigned char *)(a1 + 140)) {
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 200))(*(void *)(a1 + 168), v14, v15);
          }
          if (v12) {
            (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 216))(*(void *)(a1 + 168), 1, (unsigned __int16)v12);
          }
          v41 = *(_DWORD **)(a1 + 168);
          if (v41[104]) {
            (*(void (**)(_DWORD *, uint64_t, void))(*(void *)v41 + 208))(v41, 1, (unsigned __int16)v41[104]);
          }
        }
        else
        {
          if (*(unsigned char *)(a1 + 140)) {
            (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 168) + 200))(*(void *)(a1 + 168), v14, v15);
          }
          (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 168) + 216))(*(void *)(a1 + 168), 1, (unsigned __int16)v13);
        }
LABEL_125:
        v83 = 0;
        v84 = 0;
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v83);
        uint64_t v49 = *(void *)(a1 + 56);
        LoggableString::LoggableString((LoggableString *)&v86, "rtp.statemachine.handleMediaSessionActivated");
        v50 = v83;
        v51 = v84;
        v79[0] = (uint64_t)v83;
        v79[1] = (uint64_t)v84;
        if (v84)
        {
          atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
          v52 = v84;
        }
        else
        {
          v52 = 0;
        }
        v76[0] = MEMORY[0x1E4F143A8];
        v76[1] = 1174405120;
        v76[2] = ___ZN24MediaSessionStateMachine27handleMediaSessionActivatedENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke;
        v76[3] = &__block_descriptor_tmp_96_3;
        v76[4] = a1;
        v76[5] = v50;
        v77 = v52;
        if (v52) {
          atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v78 = a3;
        RTPManager::performBlock(v49, (uint64_t)&v86, v79, (uint64_t)v76);
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
        if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v86.__r_.__value_.__l.__data_);
        }
        if (v77) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v77);
        }
        if (v84) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v84);
        }
        goto LABEL_170;
      }
    }
    operator delete(v86.__r_.__value_.__l.__data_);
    goto LABEL_49;
  }
  uint64_t v7 = (MediaSessionStateMachine *)a1;
  BOOL v8 = 1;
LABEL_171:
  MediaSessionStateMachine::transactionComplete(v7, v8);
}

void sub_1C5606744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,std::__shared_weak_count *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  if (a45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a45);
  }
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (*(char *)(v56 - 89) < 0) {
    operator delete(*(void **)(v56 - 112));
  }
  v58 = *(std::__shared_weak_count **)(v56 - 128);
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN24MediaSessionStateMachine27handleMediaSessionActivatedENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
        uint64_t v12 = *(void *)(a1 + 40);
        int v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 24))(v5, &v12, *(unsigned int *)(a1 + 56));
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C5606A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void ___ZN24MediaSessionStateMachine27handleMediaSessionActivatedENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke_99(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
        uint64_t v12 = *(void *)(a1 + 40);
        int v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 24))(v5, &v12, *(unsigned int *)(a1 + 56));
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C5606BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void ___ZN24MediaSessionStateMachine27handleMediaSessionActivatedENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke_105(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
        uint64_t v12 = *(void *)(a1 + 40);
        int v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 24))(v5, &v12, *(unsigned int *)(a1 + 56));
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C5606DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void ___ZN24MediaSessionStateMachine27handleMediaSessionActivatedENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke_109(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
        uint64_t v12 = *(void *)(a1 + 40);
        int v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 32))(v5, &v12, *(unsigned int *)(a1 + 56));
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C5606FA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void ___ZN24MediaSessionStateMachine27handleMediaSessionActivatedENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke_114(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
        uint64_t v12 = *(void *)(a1 + 40);
        int v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 32))(v5, &v12, *(unsigned int *)(a1 + 56));
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C560717C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MediaSessionStateMachine::handleMediaSessionActivated(uint64_t a1, uint64_t a2, int a3)
{
}

void MediaSessionStateMachine::handleMediaSessionDeactivated(uint64_t a1, uint64_t a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v6 = ims::debug((uint64_t)v20, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleMediaSessionDeactivated", 29);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" isTransactionPending=", 22);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" actionQueueSize=", 17);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(void))(**(void **)(a1 + 152) + 216))(*(void *)(a1 + 152));
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v19 < 0) {
    operator delete(__p);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (a3 == 2) {
    goto LABEL_29;
  }
  if (*(unsigned char *)(a1 + 136) != 2)
  {
LABEL_27:
    if (a3)
    {
      int v7 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 152) + 208))(*(void *)(a1 + 152), 1);
      goto LABEL_30;
    }
LABEL_29:
    int v7 = 1;
    goto LABEL_30;
  }
  int v7 = 1;
  *(unsigned char *)(a1 + 136) = 1;
  if (a3 || *(_DWORD *)(a1 + 144) != 4)
  {
    if (*(void *)a2)
    {
      std::string::basic_string[abi:ne180100]<0>(v20, "rtp.statemachine");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v8 = ims::debug((uint64_t)v20, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Session deactivated notification received for [sessionId=", 57);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(void))(**(void **)a2 + 176))();
      std::ostream::operator<<();
      *(unsigned char *)(v8 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (v19 < 0) {
        operator delete(__p);
      }
      if (v21 < 0) {
        operator delete(v20[0]);
      }
    }
    __p = 0;
    char v18 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &__p);
    uint64_t v9 = *(void *)(a1 + 56);
    LoggableString::LoggableString((LoggableString *)v20, "rtp.statemachine.handleMediaSessionDeactivated");
    unsigned int v10 = __p;
    char v11 = v18;
    v16[0] = (uint64_t)__p;
    v16[1] = (uint64_t)v18;
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v18;
    }
    else
    {
      uint64_t v12 = 0;
    }
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 1174405120;
    v13[2] = ___ZN24MediaSessionStateMachine29handleMediaSessionDeactivatedENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke;
    v13[3] = &__block_descriptor_tmp_122_0;
    v13[4] = a1;
    v13[5] = v10;
    uint64_t v14 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v15 = a3;
    RTPManager::performBlock(v9, (uint64_t)v20, v16, (uint64_t)v13);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    goto LABEL_27;
  }
LABEL_30:
  MediaSessionStateMachine::transactionComplete((MediaSessionStateMachine *)a1, v7);
}

void sub_1C5607610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 33) < 0) {
    operator delete(*(void **)(v24 - 56));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN24MediaSessionStateMachine29handleMediaSessionDeactivatedENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
        uint64_t v12 = *(void *)(a1 + 40);
        int v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 32))(v5, &v12, *(unsigned int *)(a1 + 56));
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C5607810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MediaSessionStateMachine::handleMediaSessionDeactivated(uint64_t a1, uint64_t a2, int a3)
{
}

void MediaSessionStateMachine::handleMediaSessionMediaError(uint64_t a1, uint64_t a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v22, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v6 = ims::debug((uint64_t)v22, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleMediaSessionMediaError", 28);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" isTransactionPending=", 22);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" actionQueueSize=", 17);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(void))(**(void **)(a1 + 152) + 216))(*(void *)(a1 + 152));
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v21 < 0) {
    operator delete(__p);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (*(void *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v7 = ims::debug((uint64_t)v22, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Clearing action queue [sessionId=", 33);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(void))(**(void **)a2 + 176))();
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v21 < 0) {
      operator delete(__p);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
  }
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 152) + 208))(*(void *)(a1 + 152), 1)
    && *(void *)(a1 + 56)
    && *(void *)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v8 = ims::debug((uint64_t)v22, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Terminate action being cleared from queue, release assertion.", 61);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v21 < 0) {
      operator delete(__p);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    char v9 = *(RTPManager **)(a1 + 56);
    unint64_t v10 = (*(uint64_t (**)(void))(**(void **)a2 + 176))();
    RTPManager::releaseTerminationAssertion(v9, v10);
  }
  *(unsigned char *)(a1 + 138) = 0;
  (*(void (**)(void))(**(void **)(a1 + 152) + 200))(*(void *)(a1 + 152));
  if (*(void *)(a1 + 56))
  {
    __p = 0;
    int v20 = 0;
    RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &__p);
    uint64_t v11 = *(void *)(a1 + 56);
    LoggableString::LoggableString((LoggableString *)v22, "rtp.statemachine.handleMediaSessionMediaError");
    uint64_t v12 = __p;
    int v13 = v20;
    v18[0] = (uint64_t)__p;
    v18[1] = (uint64_t)v20;
    if (v20)
    {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = v20;
    }
    else
    {
      uint64_t v14 = 0;
    }
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 1174405120;
    v15[2] = ___ZN24MediaSessionStateMachine28handleMediaSessionMediaErrorENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke;
    v15[3] = &__block_descriptor_tmp_127_1;
    v15[4] = a1;
    v15[5] = v12;
    uint64_t v16 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v17 = a3;
    RTPManager::performBlock(v11, (uint64_t)v22, v18, (uint64_t)v15);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
}

void sub_1C5607D84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 33) < 0) {
    operator delete(*(void **)(v24 - 56));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN24MediaSessionStateMachine28handleMediaSessionMediaErrorENSt3__110shared_ptrI21MediaSessionInterfaceEE8RTPErrno_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v3 = *(std::__shared_weak_count **)(v2 + 40);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(v2 + 32);
      if (v5)
      {
        uint64_t v6 = *(std::__shared_weak_count **)(a1 + 48);
        uint64_t v12 = *(void *)(a1 + 40);
        int v13 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *, void))(*(void *)v5 + 40))(v5, &v12, *(unsigned int *)(a1 + 56));
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Delegate is gone [sessionId=", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v4) {
    goto LABEL_14;
  }
}

void sub_1C5607F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MediaSessionStateMachine::handleMediaSessionMediaError(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t MediaSessionStateMachine::isAudioReady(MediaSessionStateMachine *this)
{
  uint64_t v1 = *((void *)this + 21);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 120))();
  }
  else {
    return 1;
  }
}

uint64_t non-virtual thunk to'MediaSessionStateMachine::isAudioReady(MediaSessionStateMachine *this)
{
  uint64_t v1 = *((void *)this + 18);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 120))();
  }
  else {
    return 1;
  }
}

BOOL MediaSessionStateMachine::transactionPending(MediaSessionStateMachine *this)
{
  std::string::basic_string[abi:ne180100]<0>(v8, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"transactionPending", 18);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"  [sessionId=", 13);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (*((unsigned char *)this + 301)
    && *((unsigned char *)this + 302)
    && (*(unsigned int (**)(MediaSessionStateMachine *))(*(void *)this + 144))(this) == 2
    && !*((unsigned char *)this + 308))
  {
    return MediaSessionStateMachine::startConditionsMet(this);
  }
  uint64_t v3 = *((void *)this + 21);
  return v3
      && ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 120))(v3) & 1) == 0
      && (uint64_t v4 = *((void *)this + 19)) != 0
      && (*(uint64_t (**)(uint64_t))(*(void *)v4 + 216))(v4)
      || *((unsigned char *)this + 138) != 0;
}

void sub_1C5608244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL non-virtual thunk to'MediaSessionStateMachine::transactionPending(MediaSessionStateMachine *this)
{
  return MediaSessionStateMachine::transactionPending((MediaSessionStateMachine *)((char *)this - 24));
}

BOOL MediaSessionStateMachine::active(MediaSessionStateMachine *this)
{
  BOOL started = MediaSessionStateMachine::startConditionsMet(this);
  std::string::basic_string[abi:ne180100]<0>(v8, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"active", 6);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(MediaSessionStateMachine *))(*(void *)this + 184))(this);
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" stateActive=", 13);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" _autoStarted=", 14);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" autostartConditionsMet=", 24);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (*((unsigned char *)this + 301)
    && *((unsigned char *)this + 302)
    && (*(unsigned int (**)(MediaSessionStateMachine *))(*(void *)this + 144))(this) == 2)
  {
    return *((unsigned char *)this + 308) || started;
  }
  else
  {
    uint64_t v5 = *((void *)this + 21);
    return v5 && !(*(unsigned int (**)(uint64_t))(*(void *)v5 + 120))(v5) || *((unsigned char *)this + 136) == 2;
  }
}

void sub_1C56084F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL non-virtual thunk to'MediaSessionStateMachine::active(MediaSessionStateMachine *this)
{
  return MediaSessionStateMachine::active((MediaSessionStateMachine *)((char *)this - 24));
}

uint64_t MediaSessionStateMachine::paused(MediaSessionStateMachine *this)
{
  if (*((unsigned char *)this + 301)
    && *((unsigned char *)this + 302)
    && (*(unsigned int (**)(MediaSessionStateMachine *))(*(void *)this + 144))(this) == 2
    && !*((unsigned char *)this + 308)
    && !MediaSessionStateMachine::startConditionsMet(this))
  {
    return 0;
  }
  uint64_t v2 = *((void *)this + 21);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 88);
  return v3();
}

uint64_t non-virtual thunk to'MediaSessionStateMachine::paused(MediaSessionStateMachine *this)
{
  return MediaSessionStateMachine::paused((MediaSessionStateMachine *)((char *)this - 24));
}

uint64_t MediaSessionStateMachine::startSendingDTMF@<X0>(MediaSessionStateMachine *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v11, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v11, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"startSendingDTMF", 16);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"  [sessionId=", 13);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (*((unsigned char *)this + 301)
    && *((unsigned char *)this + 302)
    && (uint64_t result = (*(uint64_t (**)(MediaSessionStateMachine *))(*(void *)this + 144))(this),
        result == 2)
    && !*((unsigned char *)this + 308))
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    int v8 = 0x40000000;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 21) + 120))(*((void *)this + 21));
    if (result) {
      return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 21) + 128))(*((void *)this + 21), a2);
    }
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    int v8 = 1073741834;
  }
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

void sub_1C5608848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'MediaSessionStateMachine::startSendingDTMF@<X0>(MediaSessionStateMachine *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MediaSessionStateMachine::startSendingDTMF((MediaSessionStateMachine *)((char *)this - 24), a2, a3);
}

uint64_t MediaSessionStateMachine::stopSendingDTMF@<X0>(MediaSessionStateMachine *this@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v9, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v9, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"stopSendingDTMF", 15);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"  [sessionId=", 13);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (*((unsigned char *)this + 301)
    && *((unsigned char *)this + 302)
    && (uint64_t result = (*(uint64_t (**)(MediaSessionStateMachine *))(*(void *)this + 144))(this),
        result == 2)
    && !*((unsigned char *)this + 308))
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    int v6 = 0x40000000;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 21) + 120))(*((void *)this + 21));
    if (result) {
      return (*(uint64_t (**)(void))(**((void **)this + 21) + 136))(*((void *)this + 21));
    }
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    int v6 = 1073741834;
  }
  *(_DWORD *)(a2 + 16) = v6;
  return result;
}

void sub_1C5608AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'MediaSessionStateMachine::stopSendingDTMF@<X0>(MediaSessionStateMachine *this@<X0>, uint64_t a2@<X8>)
{
  return MediaSessionStateMachine::stopSendingDTMF((MediaSessionStateMachine *)((char *)this - 24), a2);
}

uint64_t MediaSessionStateMachine::sendDTMFDigits@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v11, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v11, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"MediaSessionStateMachine::", 26);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"sendDTMFDigits", 14);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"  [sessionId=", 13);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  if (*(unsigned char *)(a1 + 301)
    && *(unsigned char *)(a1 + 302)
    && (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1), result == 2)
    && !*(unsigned char *)(a1 + 308))
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    int v8 = 0x40000000;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 120))(*(void *)(a1 + 168));
    if (result) {
      return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 168) + 144))(*(void *)(a1 + 168), a2);
    }
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    int v8 = 1073741834;
  }
  *(_DWORD *)(a3 + 16) = v8;
  return result;
}

void sub_1C5608D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'MediaSessionStateMachine::sendDTMFDigits@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return MediaSessionStateMachine::sendDTMFDigits(a1 - 24, a2, a3);
}

std::string *MediaSessionStateMachine::reportHandover(std::string *this, const std::string *a2)
{
  uint64_t v4 = (ims::AccessNetwork *)&this[8];
  std::string::operator=(this + 8, a2);
  uint64_t result = std::string::operator=(this + 9, a2 + 1);
  std::string::value_type v6 = a2[2].__r_.__value_.__s.__data_[16];
  *(_OWORD *)&this[10].__r_.__value_.__l.__data_ = *(_OWORD *)&a2[2].__r_.__value_.__l.__data_;
  this[10].__r_.__value_.__s.__data_[16] = v6;
  if (this[7].__r_.__value_.__s.__data_[16])
  {
    BOOL isWifi = ims::AccessNetwork::isWifi(v4);
    MediaSessionStateMachine::reportAPSession((MediaSessionStateMachine *)this, !isWifi);
    uint64_t result = (std::string *)this[7].__r_.__value_.__l.__data_;
    if (result)
    {
      int v8 = *(uint64_t (**)(void))(result->__r_.__value_.__r.__words[0] + 192);
      return (std::string *)v8();
    }
  }
  return result;
}

std::string *non-virtual thunk to'MediaSessionStateMachine::reportHandover(std::string *this, const std::string *a2)
{
  return MediaSessionStateMachine::reportHandover(this - 1, a2);
}

uint64_t MediaSessionStateMachine::canChangeMediaStack(MediaSessionStateMachine *this)
{
  if (*((unsigned char *)this + 184)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 21);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 184))();
  }
  else {
    return 1;
  }
}

uint64_t non-virtual thunk to'MediaSessionStateMachine::canChangeMediaStack(MediaSessionStateMachine *this)
{
  if (*((unsigned char *)this + 160)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 18);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 184))();
  }
  else {
    return 1;
  }
}

void MediaSessionStateMachine::processDataFromSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 301))
  {
    char v11 = 0;
    char v12 = 0;
    RTPSharedPointerBase::getShared<MediaSessionStateMachine>(&v11, a1);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 1174405120;
    v7[2] = ___ZN24MediaSessionStateMachine21processDataFromSocketEPKhmRKNSt3__110shared_ptrI9IpAddressEE_block_invoke;
    v7[3] = &__block_descriptor_tmp_138_1;
    v7[4] = a1;
    v7[5] = a3;
    uint64_t v5 = v12;
    v7[6] = v11;
    int v8 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ims::performBlock((IMSClientManager *)v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"processDataFromSocket", 21);
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" received unexpected data with ", 31);
    *(unsigned char *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" bytes", 6);
    *(unsigned char *)(v6 + 17) = 0;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v11);
    }
  }
}

void sub_1C5609060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 17) < 0) {
    operator delete(*(void **)(v22 - 40));
  }
  _Unwind_Resume(exception_object);
}

void RTPSharedPointerBase::getShared<MediaSessionStateMachine>(void **p_lpsrc, uint64_t a2)
{
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (void *)(a2 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v6;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void ___ZN24MediaSessionStateMachine21processDataFromSocketEPKhmRKNSt3__110shared_ptrI9IpAddressEE_block_invoke(void *a1)
{
  if (a1[5])
  {
    uint64_t v2 = a1[4];
    if (!*(unsigned char *)(v2 + 310))
    {
      *(unsigned char *)(v2 + 310) = 1;
      uint64_t v3 = *(RTPManager **)(v2 + 56);
      if (v3)
      {
        uint64_t v7 = 0;
        int v8 = 0;
        RTPManager::sdpSessionForSession(v3, *(void *)(v2 + 48), &v7);
        if (v7)
        {
          uint64_t v4 = a1[6];
          uint64_t v5 = v8;
          v6[0] = v7;
          v6[1] = (uint64_t)v8;
          if (v8) {
            atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          MediaSessionStateMachine::autoStart(v4, v6, 0);
          if (v5) {
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
      }
    }
  }
}

void sub_1C56091F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_48c52_ZTSNSt3__110shared_ptrI24MediaSessionStateMachineEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_48c52_ZTSNSt3__110shared_ptrI24MediaSessionStateMachineEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void non-virtual thunk to'MediaSessionStateMachine::processDataFromSocket(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void MediaSessionStateMachine::processDataFromNw(MediaSessionStateMachine *this, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v11, "rtp.stateMachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v11, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"processDataFromNw", 17);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"  [sessionId=", 13);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" len=", 5);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v11);
  }
  if (*((unsigned char *)this + 301))
  {
    char v11 = 0;
    char v12 = 0;
    RTPSharedPointerBase::getShared<MediaSessionStateMachine>(&v11, (uint64_t)this);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 1174405120;
    v7[2] = ___ZN24MediaSessionStateMachine17processDataFromNwEm_block_invoke;
    v7[3] = &__block_descriptor_tmp_144_1;
    v7[4] = this;
    v7[5] = a2;
    uint64_t v5 = v12;
    v7[6] = v11;
    int v8 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ims::performBlock((IMSClientManager *)v7);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v11, "rtp.statemachine");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"processDataFromNw", 17);
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" received unexpected data with ", 31);
    *(unsigned char *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" bytes", 6);
    *(unsigned char *)(v6 + 17) = 0;
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v11);
    }
  }
}

void sub_1C56094D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 33) < 0) {
    operator delete(*(void **)(v22 - 56));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN24MediaSessionStateMachine17processDataFromNwEm_block_invoke(void *a1)
{
  if (a1[5])
  {
    uint64_t v2 = a1[4];
    if (!*(unsigned char *)(v2 + 310))
    {
      *(unsigned char *)(v2 + 310) = 1;
      uint64_t v3 = *(RTPManager **)(v2 + 56);
      if (v3)
      {
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        RTPManager::sdpSessionForSession(v3, *(void *)(v2 + 48), &v15);
        if (v15)
        {
          uint64_t v4 = *(std::__shared_weak_count **)(v15 + 1936);
          if (v4)
          {
            uint64_t v5 = *(void *)(v15 + 1928);
            atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            uint64_t v6 = std::__shared_weak_count::lock(v4);
            std::__shared_weak_count::__release_weak(v4);
            if (v6)
            {
              if (v5) {
                *(unsigned char *)(v5 + 462) = 1;
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v6);
            }
          }
          std::string::basic_string[abi:ne180100]<0>(v13, "rtp.statemachine");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v7 = ims::debug((uint64_t)v13, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"processDataFromNw_block_invoke", 30);
          *(unsigned char *)(v7 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Autostart", 9);
          *(unsigned char *)(v7 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v7 + 17) = 0;
          if (v12 < 0) {
            operator delete(__p[0]);
          }
          if (v14 < 0) {
            operator delete(v13[0]);
          }
          uint64_t v8 = a1[6];
          char v9 = v16;
          v10[0] = v15;
          v10[1] = (uint64_t)v16;
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          MediaSessionStateMachine::autoStart(v8, v10, 0);
          if (v9) {
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
      }
    }
  }
}

void sub_1C56096E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  BOOL v25 = *(std::__shared_weak_count **)(v23 - 40);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MediaSessionStateMachine::processDataFromNw(MediaSessionStateMachine *this, uint64_t a2)
{
}

void MediaSessionStateMachine::setTrafficDetected(MediaSessionStateMachine *this, char a2)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"setTrafficDetected", 18);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  *((unsigned char *)this + 310) = a2;
}

void sub_1C5609828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL MediaSessionStateMachine::isAutostartConfigurable(MediaSessionStateMachine *this)
{
  return !*((unsigned char *)this + 301)
      || !*((unsigned char *)this + 302)
      || (*(unsigned int (**)(MediaSessionStateMachine *))(*(void *)this + 144))(this) != 2
      || *((unsigned char *)this + 309) != 0;
}

void MediaSessionStateMachine::setPort(MediaSessionStateMachine *this, __int16 a2)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"setPort", 7);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  *((_WORD *)this + 152) = a2;
}

void sub_1C56099AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MediaSessionStateMachine::setPort(MediaSessionStateMachine *this, __int16 a2)
{
}

void MediaSessionStateMachine::setNwPort(MediaSessionStateMachine *this, __int16 a2)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "rtp.statemachine");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"setNwPort", 9);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  *((_WORD *)this + 152) = a2;
}

void sub_1C5609AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MediaSessionStateMachine::setNwPort(MediaSessionStateMachine *this, __int16 a2)
{
}

uint64_t MediaSessionStateMachine::direction(MediaSessionStateMachine *this)
{
  if (*((unsigned char *)this + 301)
    && *((unsigned char *)this + 302)
    && (*(unsigned int (**)(MediaSessionStateMachine *))(*(void *)this + 144))(this) == 2
    && !*((unsigned char *)this + 308)
    && !MediaSessionStateMachine::startConditionsMet(this))
  {
    uint64_t v2 = (char *)this + 312;
  }
  else
  {
    uint64_t v2 = (char *)this + 144;
  }
  return *(unsigned int *)v2;
}

uint64_t non-virtual thunk to'MediaSessionStateMachine::direction(MediaSessionStateMachine *this)
{
  return MediaSessionStateMachine::direction((MediaSessionStateMachine *)((char *)this - 24));
}

uint64_t MediaSessionStateMachine::mediaType(MediaSessionStateMachine *this)
{
  uint64_t v1 = *((void *)this + 21);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 104))();
  }
  else {
    return 2;
  }
}

uint64_t non-virtual thunk to'MediaSessionStateMachine::mediaType(MediaSessionStateMachine *this)
{
  uint64_t v1 = *((void *)this + 18);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 104))();
  }
  else {
    return 2;
  }
}

uint64_t MediaSessionStateMachine::mediaSupportEnabled(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 168);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 112))();
  }
  else {
    return a2 == 2;
  }
}

uint64_t non-virtual thunk to'MediaSessionStateMachine::mediaSupportEnabled(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 144);
  if (v2) {
    return (*(uint64_t (**)(void))(*(void *)v2 + 112))();
  }
  else {
    return a2 == 2;
  }
}

uint64_t MediaSessionStateMachine::sessionId(MediaSessionStateMachine *this)
{
  return *((void *)this + 6);
}

uint64_t non-virtual thunk to'MediaSessionStateMachine::sessionId(MediaSessionStateMachine *this)
{
  return *((void *)this + 3);
}

void std::__shared_ptr_emplace<MediaSessionStateMachine::create(std::shared_ptr<MediaSessionDriver>,ImsPrefs const&,BOOL)::StateMachineWrapper,std::allocator<MediaSessionStateMachine::create(std::shared_ptr<MediaSessionDriver>,ImsPrefs const&,BOOL)::StateMachineWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E4AF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MediaSessionStateMachine::create(std::shared_ptr<MediaSessionDriver>,ImsPrefs const&,BOOL)::StateMachineWrapper,std::allocator<MediaSessionStateMachine::create(std::shared_ptr<MediaSessionDriver>,ImsPrefs const&,BOOL)::StateMachineWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E4AF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<MediaSessionStateMachine::create(std::shared_ptr<MediaSessionDriver>,ImsPrefs const&,BOOL)::StateMachineWrapper,std::allocator<MediaSessionStateMachine::create(std::shared_ptr<MediaSessionDriver>,ImsPrefs const&,BOOL)::StateMachineWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void MediaSessionStateMachine::create(std::shared_ptr<MediaSessionDriver>,ImsPrefs const&,BOOL)::StateMachineWrapper::~StateMachineWrapper(MediaSessionStateMachine *a1)
{
  MediaSessionStateMachine::~MediaSessionStateMachine(a1);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'MediaSessionStateMachine::create(std::shared_ptr<MediaSessionDriver>,ImsPrefs const&,BOOL)::StateMachineWrapper::~StateMachineWrapper(uint64_t a1)
{
}

{
  uint64_t vars8;

  MediaSessionStateMachine::~MediaSessionStateMachine((MediaSessionStateMachine *)(a1 - 24));
  JUMPOUT(0x1C878E320);
}

{
  MediaSessionStateMachine::~MediaSessionStateMachine((MediaSessionStateMachine *)(a1 - 120));
}

{
  uint64_t vars8;

  MediaSessionStateMachine::~MediaSessionStateMachine((MediaSessionStateMachine *)(a1 - 120));
  JUMPOUT(0x1C878E320);
}

{
  MediaSessionStateMachine::~MediaSessionStateMachine((MediaSessionStateMachine *)(a1 - 128));
}

{
  uint64_t vars8;

  MediaSessionStateMachine::~MediaSessionStateMachine((MediaSessionStateMachine *)(a1 - 128));
  JUMPOUT(0x1C878E320);
}

void *std::dynamic_pointer_cast[abi:ne180100]<MediaSessionDelegate,RTPSharedPointerBase>@<X0>(void **a1@<X0>, void **a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t result = *a1;
  if (result
  {
    uint64_t v5 = v2[1];
    *a2 = result;
    a2[1] = v5;
  }
  else
  {
    uint64_t v2 = a2;
  }
  *uint64_t v2 = 0;
  v2[1] = 0;
  return result;
}

uint64_t RTCPSDesItem::RTCPSDesItem(uint64_t a1, int a2, std::string *__str)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)a1 = a2;
  int v4 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (v4 < 0) {
    LOBYTE(v4) = __str->__r_.__value_.__s.__data_[8];
  }
  *(unsigned char *)(a1 + 4) = v4;
  std::string::operator=((std::string *)(a1 + 8), __str);
  return a1;
}

void sub_1C5609EF4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void RTCPSDesInfo::packetize(RTCPSDesInfo *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  LODWORD(__x.__first_) = bswap32(*(_DWORD *)this);
  v4.__i_ = 0;
  std::vector<unsigned int>::insert((std::vector<unsigned int> *)a2, v4, (std::vector<unsigned int>::value_type *)&__x);
  __p = 0;
  __dst = 0;
  uint64_t v40 = 0;
  uint64_t v5 = *((void *)this + 1);
  uint64_t v6 = *((void *)this + 2);
  if (v5 == v6)
  {
    char v18 = 0;
    char v19 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    char v8 = (long long *)(v5 + 8);
    do
    {
      memset(&__x, 0, 32);
      uint64_t v10 = (uint64_t)v8 - 8;
      int v9 = *((_DWORD *)v8 - 2);
      BYTE4(__x.__first_) = *((unsigned char *)v8 - 4);
      LODWORD(__x.__first_) = v9;
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__x.__begin_, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v11 = *v8;
        __x.__end_cap_.__value_ = (unsigned int *)*((void *)v8 + 2);
        *(_OWORD *)&__x.__begin_ = v11;
      }
      uint64_t v36 = 0;
      char first = (char)__x.__first_;
      char v13 = (char *)operator new(1uLL);
      char *v13 = first;
      uint64_t v35 = v13;
      v37 = v13 + 1;
      char v14 = (char *)operator new(2uLL);
      v14[1] = BYTE4(__x.__first_);
      *char v14 = first;
      uint64_t v15 = v14 + 2;
      uint64_t v35 = v14;
      uint64_t v36 = v14 + 2;
      v37 = v14 + 2;
      operator delete(v13);
      if (SHIBYTE(__x.__end_cap_.__value_) >= 0) {
        p_begin = (char *)&__x.__begin_;
      }
      else {
        p_begin = (char *)__x.__begin_;
      }
      if (SHIBYTE(__x.__end_cap_.__value_) >= 0) {
        uint64_t value_high = HIBYTE(__x.__end_cap_.__value_);
      }
      else {
        uint64_t value_high = (uint64_t)__x.__end_;
      }
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>(&v35, v15, p_begin, &p_begin[value_high], value_high);
      if (v7) {
        operator delete(v7);
      }
      uint64_t v7 = v35;
      std::vector<unsigned char>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned char *>,std::__wrap_iter<unsigned char *>>((uint64_t)&__p, (char *)__dst, v35, v36, v36 - v35);
      if (SHIBYTE(__x.__end_cap_.__value_) < 0) {
        operator delete(__x.__begin_);
      }
      v8 += 2;
    }
    while (v10 + 32 != v6);
    char v19 = (unsigned int *)__p;
    char v18 = __dst;
  }
  unint64_t v20 = v18 - (unsigned char *)v19;
  unint64_t v21 = v20 >> 2;
  if ((v20 & 3) != 0) {
    uint64_t v22 = (v21 + 1);
  }
  else {
    uint64_t v22 = v21;
  }
  if (v22)
  {
    uint64_t v23 = *(unsigned int **)(a2 + 8);
    uint64_t v24 = *(void *)(a2 + 16);
    if (v22 <= (v24 - (uint64_t)v23) >> 2)
    {
      size_t v30 = v22;
      memmove(*(void **)(a2 + 8), v19, v30 * 4);
      *(void *)(a2 + 8) = &v23[v30];
    }
    else
    {
      uint64_t v25 = ((uint64_t)v23 - *(void *)a2) >> 2;
      if ((unint64_t)(v22 + v25) >> 62) {
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v26 = v24 - *(void *)a2;
      uint64_t v27 = v26 >> 1;
      if (v26 >> 1 <= (unint64_t)(v22 + v25)) {
        uint64_t v27 = v22 + v25;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v28 = v27;
      }
      __x.__end_cap_.__value_ = (std::allocator<unsigned int> *)(a2 + 16);
      if (v28) {
        uint64_t v29 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>(a2 + 16, v28);
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v31 = &v29[v25];
      __x.__first_ = v29;
      __x.__begin_ = v31;
      __x.__end_cap_.__value_ = &v29[v28];
      uint64_t v32 = 4 * v22;
      v33 = &v31[v22];
      do
      {
        unsigned int v34 = *v19++;
        *v31++ = v34;
        v32 -= 4;
      }
      while (v32);
      __x.__end_ = v33;
      std::vector<unsigned int>::__swap_out_circular_buffer((std::vector<unsigned int> *)a2, &__x, v23);
      if (__x.__end_ != __x.__begin_) {
        __x.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__x.__end_
      }
                                                                + (((char *)__x.__begin_ - (char *)__x.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
      if (__x.__first_) {
        operator delete(__x.__first_);
      }
    }
  }
  if (v7) {
    operator delete(v7);
  }
  if (__p)
  {
    __dst = __p;
    operator delete(__p);
  }
}

void sub_1C560A25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (v22) {
    operator delete(v22);
  }
  if (a12) {
    operator delete(a12);
  }
  uint64_t v24 = *(void **)v21;
  if (*(void *)v21)
  {
    *(void *)(v21 + 8) = v24;
    operator delete(v24);
  }
  _Unwind_Resume(exception_object);
}

char *RTCPSDesInfo::addSDesItem(uint64_t a1, int *a2)
{
  uint64_t v3 = (int64x2_t *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if (v4 >= *(void *)(a1 + 24))
  {
    uint64_t result = std::vector<RTCPSDesItem>::__push_back_slow_path<RTCPSDesItem const&>(v3, a2);
  }
  else
  {
    std::vector<RTCPSDesItem>::__construct_one_at_end[abi:ne180100]<RTCPSDesItem const&>((uint64_t)v3, a2);
    uint64_t result = (char *)(v4 + 32);
  }
  *(void *)(a1 + 16) = result;
  return result;
}

ImsOutStream *RTCPSDesInfo::toStream(RTCPSDesInfo *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" Sender SSRC: ", 14);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = *((void *)this + 2);
  if (v4 != v5)
  {
    uint64_t v6 = (long long *)(v4 + 8);
    do
    {
      memset(v10, 0, 32);
      uint64_t v7 = (uint64_t)v6 - 8;
      LODWORD(v10[0]) = *((_DWORD *)v6 - 2);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v10[1], *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v8 = *v6;
        v10[3] = *((void **)v6 + 2);
        *(_OWORD *)&v10[1] = v8;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" Type: ", 7);
      *((unsigned char *)a2 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(__p, off_1E65122D0[SLODWORD(v10[0])]);
      (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 32))(a2, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" Length: ", 9);
      *((unsigned char *)a2 + 17) = 0;
      std::ostream::operator<<();
      *((unsigned char *)a2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" Description: ", 14);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 32))(a2, &v10[1]);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (SHIBYTE(v10[3]) < 0) {
        operator delete(v10[1]);
      }
      v6 += 2;
    }
    while (v7 + 32 != v5);
  }
  return a2;
}

void sub_1C560A568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<RTCPSDesItem>::__construct_one_at_end[abi:ne180100]<RTCPSDesItem const&>(uint64_t a1, int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *a2;
  *(unsigned char *)(v3 + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)uint64_t v3 = v4;
  uint64_t v5 = (std::string *)(v3 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 2);
    *(void *)(v3 + 24) = *((void *)a2 + 3);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(void *)(a1 + 8) = v3 + 32;
}

void sub_1C560A608(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<RTCPSDesItem>::__push_back_slow_path<RTCPSDesItem const&>(int64x2_t *a1, int *a2)
{
  uint64_t v3 = a1->i64[0];
  uint64_t v4 = (a1->i64[1] - a1->i64[0]) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<RTCPSDesItem>::__throw_length_error[abi:ne180100]();
  }
  uint64_t i64 = (uint64_t)a1[1].i64;
  uint64_t v8 = a1[1].i64[0] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v28 = a1 + 1;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPSDesItem>>(i64, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = &v10[32 * v4];
  uint64_t v25 = v10;
  v26.i64[0] = (uint64_t)v11;
  v26.i64[1] = (uint64_t)v11;
  uint64_t v27 = &v10[32 * v9];
  int v12 = *a2;
  v11[4] = *((unsigned char *)a2 + 4);
  *(_DWORD *)long long v11 = v12;
  char v13 = (std::string *)(v11 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
    uint64_t v15 = (char *)v26.i64[1];
    long long v11 = (char *)v26.i64[0];
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 2);
    *((void *)v11 + 3) = *((void *)a2 + 3);
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    uint64_t v15 = v11;
  }
  uint64_t v17 = a1->i64[0];
  unint64_t v16 = a1->u64[1];
  if (v16 == a1->i64[0])
  {
    int64x2_t v21 = vdupq_n_s64(v16);
  }
  else
  {
    do
    {
      int v18 = *(_DWORD *)(v16 - 32);
      v16 -= 32;
      char v19 = *(unsigned char *)(v16 + 4);
      *((_DWORD *)v11 - 8) = v18;
      v11 -= 32;
      v11[4] = v19;
      long long v20 = *(_OWORD *)(v16 + 8);
      *((void *)v11 + 3) = *(void *)(v16 + 24);
      *(_OWORD *)(v11 + 8) = v20;
      *(void *)(v16 + 16) = 0;
      *(void *)(v16 + 24) = 0;
      *(void *)(v16 + 8) = 0;
    }
    while (v16 != v17);
    int64x2_t v21 = *a1;
  }
  uint64_t v22 = v15 + 32;
  a1->i64[0] = (uint64_t)v11;
  a1->i64[1] = (uint64_t)(v15 + 32);
  int64x2_t v26 = v21;
  uint64_t v23 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v27;
  uint64_t v27 = v23;
  uint64_t v25 = (char *)v21.i64[0];
  std::__split_buffer<CapSuppServicesInfo::CallForward::Rule>::~__split_buffer((uint64_t)&v25);
  return v22;
}

void sub_1C560A768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<CapSuppServicesInfo::CallForward::Rule>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *SipBody::fillContentTypeHeader(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  return std::string::operator=((std::string *)(a2 + 104), v3);
}

void SipBody::encodeToString()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C560A8D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)va);
  _Unwind_Resume(a1);
}

uint64_t SipBody::encodeContentOnlyToString(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

uint64_t _GLOBAL__sub_I_SipBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&SipBody::kGenericContentType, "application/octet-stream");
  v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &SipBody::kGenericContentType, &dword_1C51D1000);
}

BOOL ims::IsimFiles::isValid(ims::IsimFiles *this)
{
  if (*((char *)this + 23) < 0)
  {
    if (!*((void *)this + 1)) {
      return 0;
    }
  }
  else if (!*((unsigned char *)this + 23))
  {
    return 0;
  }
  if (*((void *)this + 3) != *((void *)this + 4))
  {
    if (*((char *)this + 71) < 0)
    {
      if (*((void *)this + 7)) {
        return *((void *)this + 12) != *((void *)this + 13);
      }
    }
    else if (*((unsigned char *)this + 71))
    {
      return *((void *)this + 12) != *((void *)this + 13);
    }
  }
  return 0;
}

const void **ims::IsimFiles::Serialize@<X0>(ims::IsimFiles *this@<X0>, void *a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (*((char *)this + 23) < 0)
  {
    if (!*((void *)this + 1)) {
      goto LABEL_7;
    }
    v33.__r_.__value_.__r.__words[0] = 0;
    unint64_t v5 = *(const char **)this;
  }
  else
  {
    if (!*((unsigned char *)this + 23)) {
      goto LABEL_7;
    }
    v33.__r_.__value_.__r.__words[0] = 0;
    unint64_t v5 = (const char *)this;
  }
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(v4, v5, 0x600u);
  CFDictionarySetValue(theDict, @"kRegKeyInfoTypePrivateID", v33.__r_.__value_.__l.__data_);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v33.__r_.__value_.__l.__data_);
LABEL_7:
  uint64_t v6 = *((void *)this + 3);
  uint64_t v7 = *((void *)this + 4);
  if (v6 != v7)
  {
    CFMutableArrayRef theArray = 0;
    Mutable = CFArrayCreateMutable(v4, 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3), MEMORY[0x1E4F1D510]);
    CFMutableArrayRef theArray = Mutable;
    unint64_t v9 = (long long *)*((void *)this + 3);
    uint64_t v10 = (long long *)*((void *)this + 4);
    if (v9 != v10)
    {
      CFIndex v11 = 0;
      do
      {
        memset(&v33, 0, sizeof(v33));
        if (*((char *)v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v9, *((void *)v9 + 1));
        }
        else
        {
          long long v12 = *v9;
          v33.__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
          *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v12;
        }
        CFStringRef v32 = 0;
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v13 = &v33;
        }
        else {
          char v13 = (std::string *)v33.__r_.__value_.__r.__words[0];
        }
        CFStringRef v32 = CFStringCreateWithCString(v4, (const char *)v13, 0x600u);
        CFArrayInsertValueAtIndex(theArray, v11, v32);
        ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v32);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        unint64_t v9 = (long long *)((char *)v9 + 24);
        ++v11;
      }
      while (v9 != v10);
      Mutable = theArray;
    }
    CFDictionarySetValue(theDict, @"kRegKeyInfoTypePublicID", Mutable);
    ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::~SharedRef((const void **)&theArray);
  }
  long long v14 = (char *)this + 48;
  if (*((char *)this + 71) < 0)
  {
    if (!*((void *)this + 7)) {
      goto LABEL_27;
    }
    v33.__r_.__value_.__r.__words[0] = 0;
    long long v14 = *(const char **)v14;
  }
  else
  {
    if (!*((unsigned char *)this + 71)) {
      goto LABEL_27;
    }
    v33.__r_.__value_.__r.__words[0] = 0;
  }
  v33.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithCString(v4, v14, 0x600u);
  CFDictionarySetValue(theDict, @"kRegKeyInfoTypeDomain", v33.__r_.__value_.__l.__data_);
  ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v33.__r_.__value_.__l.__data_);
LABEL_27:
  uint64_t v15 = *((void *)this + 9);
  uint64_t v16 = *((void *)this + 10);
  if (v15 != v16)
  {
    CFMutableArrayRef theArray = 0;
    uint64_t v17 = CFArrayCreateMutable(v4, 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3), MEMORY[0x1E4F1D510]);
    CFMutableArrayRef theArray = v17;
    int v18 = (long long *)*((void *)this + 9);
    char v19 = (long long *)*((void *)this + 10);
    if (v18 != v19)
    {
      CFIndex v20 = 0;
      do
      {
        memset(&v33, 0, sizeof(v33));
        if (*((char *)v18 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v18, *((void *)v18 + 1));
        }
        else
        {
          long long v21 = *v18;
          v33.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
          *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v21;
        }
        CFStringRef v32 = 0;
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v22 = &v33;
        }
        else {
          uint64_t v22 = (std::string *)v33.__r_.__value_.__r.__words[0];
        }
        CFStringRef v32 = CFStringCreateWithCString(v4, (const char *)v22, 0x600u);
        CFArrayInsertValueAtIndex(theArray, v20, v32);
        ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v32);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        int v18 = (long long *)((char *)v18 + 24);
        ++v20;
      }
      while (v18 != v19);
      uint64_t v17 = theArray;
    }
    CFDictionarySetValue(theDict, @"kRegKeyInfoTypeSim", v17);
    ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::~SharedRef((const void **)&theArray);
  }
  uint64_t v23 = *((void *)this + 12);
  uint64_t v24 = *((void *)this + 13);
  if (v23 != v24)
  {
    uint64_t v25 = CFArrayCreateMutable(v4, 0xAAAAAAAAAAAAAAABLL * ((v24 - v23) >> 3), MEMORY[0x1E4F1D510]);
    CFMutableArrayRef theArray = v25;
    int64x2_t v26 = (long long *)*((void *)this + 12);
    uint64_t v27 = (long long *)*((void *)this + 13);
    if (v26 != v27)
    {
      CFIndex v28 = 0;
      do
      {
        memset(&v33, 0, sizeof(v33));
        if (*((char *)v26 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)v26, *((void *)v26 + 1));
        }
        else
        {
          long long v29 = *v26;
          v33.__r_.__value_.__r.__words[2] = *((void *)v26 + 2);
          *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v29;
        }
        CFStringRef v32 = 0;
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v30 = &v33;
        }
        else {
          size_t v30 = (std::string *)v33.__r_.__value_.__r.__words[0];
        }
        CFStringRef v32 = CFStringCreateWithCString(v4, (const char *)v30, 0x600u);
        CFArrayInsertValueAtIndex(theArray, v28, v32);
        ctu::SharedRef<__CFString const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFString const>::~SharedRef((const void **)&v32);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v33.__r_.__value_.__l.__data_);
        }
        int64x2_t v26 = (long long *)((char *)v26 + 24);
        ++v28;
      }
      while (v26 != v27);
      uint64_t v25 = theArray;
    }
    CFDictionarySetValue(theDict, @"kRegKeyInfoTypePco", v25);
    ctu::SharedRef<__CFArray,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray>::~SharedRef((const void **)&theArray);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(a2, (CFTypeRef *)&theDict);
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&theDict);
}

void sub_1C560ADD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, const void *a18, const void *a19)
{
}

CFIndex ims::IsimFiles::Deserialize(CFIndex this, CFDictionaryRef theDict)
{
  v58[2] = *MEMORY[0x1E4F143B8];
  if (theDict)
  {
    uint64_t v2 = this;
    CFArrayRef theArray = 0;
    value = 0;
    if (CFDictionaryGetValueIfPresent(theDict, @"kRegKeyInfoTypePrivateID", (const void **)&value) && value)
    {
      memset(&__v, 0, 24);
      ctu::cf::assign();
      std::__split_buffer<std::string>::pointer first = __v.__first_;
      v58[0] = __v.__begin_;
      *(void *)((char *)v58 + 7) = *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__begin_ + 7);
      char end_high = HIBYTE(__v.__end_);
      if (*(char *)(v2 + 23) < 0) {
        operator delete(*(void **)v2);
      }
      uint64_t v5 = v58[0];
      *(void *)uint64_t v2 = first;
      *(void *)(v2 + 8) = v5;
      *(void *)(v2 + 15) = *(void *)((char *)v58 + 7);
      *(unsigned char *)(v2 + 23) = end_high;
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"kRegKeyInfoTypePublicID", (const void **)&theArray)
      && theArray
      && CFArrayGetCount(theArray) >= 1)
    {
      CFIndex v6 = 0;
      uint64_t v7 = (void *)(v2 + 24);
      do
      {
        value = (void *)CFArrayGetValueAtIndex(theArray, v6);
        if (value)
        {
          memset(&__v, 0, 24);
          ctu::cf::assign();
          std::__split_buffer<std::string>::pointer v8 = __v.__first_;
          v58[0] = __v.__begin_;
          *(void *)((char *)v58 + 7) = *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__begin_ + 7);
          char v9 = HIBYTE(__v.__end_);
          unint64_t v10 = *(void *)(v2 + 32);
          unint64_t v11 = *(void *)(v2 + 40);
          if (v10 >= v11)
          {
            unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *v7) >> 3);
            unint64_t v15 = v14 + 1;
            if (v14 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *v7) >> 3);
            if (2 * v16 > v15) {
              unint64_t v15 = 2 * v16;
            }
            if (v16 >= 0x555555555555555) {
              unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v17 = v15;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v2 + 40);
            if (v17) {
              int v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v2 + 40, v17);
            }
            else {
              int v18 = 0;
            }
            char v19 = v18 + v14;
            __v.__first_ = v18;
            __v.__begin_ = v19;
            __v.__end_cap_.__value_ = &v18[v17];
            std::string::size_type v20 = v58[0];
            v19->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
            v19->__r_.__value_.__l.__size_ = v20;
            *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v58 + 7);
            *((unsigned char *)&v19->__r_.__value_.__s + 23) = v9;
            __v.__end_ = v19 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v2 + 24), &__v);
            unint64_t v13 = *(void *)(v2 + 32);
            std::__split_buffer<std::string>::~__split_buffer(&__v);
          }
          else
          {
            uint64_t v12 = v58[0];
            *(void *)unint64_t v10 = __v.__first_;
            *(void *)(v10 + 8) = v12;
            *(void *)(v10 + 15) = *(void *)((char *)v58 + 7);
            *(unsigned char *)(v10 + 23) = v9;
            unint64_t v13 = v10 + 24;
            *(void *)(v2 + 32) = v10 + 24;
          }
          *(void *)(v2 + 32) = v13;
        }
        ++v6;
      }
      while (CFArrayGetCount(theArray) > v6);
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"kRegKeyInfoTypeDomain", (const void **)&value) && value)
    {
      memset(&__v, 0, 24);
      ctu::cf::assign();
      std::__split_buffer<std::string>::pointer v21 = __v.__first_;
      v58[0] = __v.__begin_;
      *(void *)((char *)v58 + 7) = *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__begin_ + 7);
      char v22 = HIBYTE(__v.__end_);
      if (*(char *)(v2 + 71) < 0) {
        operator delete(*(void **)(v2 + 48));
      }
      uint64_t v23 = v58[0];
      *(void *)(v2 + 48) = v21;
      *(void *)(v2 + 56) = v23;
      *(void *)(v2 + 63) = *(void *)((char *)v58 + 7);
      *(unsigned char *)(v2 + 71) = v22;
    }
    if (CFDictionaryGetValueIfPresent(theDict, @"kRegKeyInfoTypeSim", (const void **)&theArray)
      && theArray
      && CFArrayGetCount(theArray) >= 1)
    {
      CFIndex v24 = 0;
      uint64_t v25 = (void *)(v2 + 72);
      do
      {
        value = (void *)CFArrayGetValueAtIndex(theArray, v24);
        if (value)
        {
          memset(&__v, 0, 24);
          ctu::cf::assign();
          std::__split_buffer<std::string>::pointer v26 = __v.__first_;
          v58[0] = __v.__begin_;
          *(void *)((char *)v58 + 7) = *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__begin_ + 7);
          char v27 = HIBYTE(__v.__end_);
          unint64_t v28 = *(void *)(v2 + 80);
          unint64_t v29 = *(void *)(v2 + 88);
          if (v28 >= v29)
          {
            unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *v25) >> 3);
            unint64_t v33 = v32 + 1;
            if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::string>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *v25) >> 3);
            if (2 * v34 > v33) {
              unint64_t v33 = 2 * v34;
            }
            if (v34 >= 0x555555555555555) {
              unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v35 = v33;
            }
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v2 + 88);
            if (v35) {
              uint64_t v36 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v2 + 88, v35);
            }
            else {
              uint64_t v36 = 0;
            }
            v37 = v36 + v32;
            __v.__first_ = v36;
            __v.__begin_ = v37;
            __v.__end_cap_.__value_ = &v36[v35];
            std::string::size_type v38 = v58[0];
            v37->__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
            v37->__r_.__value_.__l.__size_ = v38;
            *(std::string::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v58 + 7);
            *((unsigned char *)&v37->__r_.__value_.__s + 23) = v27;
            __v.__end_ = v37 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v2 + 72), &__v);
            unint64_t v31 = *(void *)(v2 + 80);
            std::__split_buffer<std::string>::~__split_buffer(&__v);
          }
          else
          {
            uint64_t v30 = v58[0];
            *(void *)unint64_t v28 = __v.__first_;
            *(void *)(v28 + 8) = v30;
            *(void *)(v28 + 15) = *(void *)((char *)v58 + 7);
            *(unsigned char *)(v28 + 23) = v27;
            unint64_t v31 = v28 + 24;
            *(void *)(v2 + 80) = v28 + 24;
          }
          *(void *)(v2 + 80) = v31;
        }
        ++v24;
      }
      while (CFArrayGetCount(theArray) > v24);
    }
    this = CFDictionaryGetValueIfPresent(theDict, @"kRegKeyInfoTypePco", (const void **)&theArray);
    if (this)
    {
      this = (CFIndex)theArray;
      if (theArray)
      {
        this = CFArrayGetCount(theArray);
        if (this >= 1)
        {
          CFIndex v39 = 0;
          uint64_t v40 = (void *)(v2 + 96);
          do
          {
            value = (void *)CFArrayGetValueAtIndex(theArray, v39);
            if (value)
            {
              memset(&__v, 0, 24);
              ctu::cf::assign();
              std::__split_buffer<std::string>::pointer v41 = __v.__first_;
              v58[0] = __v.__begin_;
              *(void *)((char *)v58 + 7) = *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__begin_ + 7);
              char v42 = HIBYTE(__v.__end_);
              unint64_t v43 = *(void *)(v2 + 104);
              unint64_t v44 = *(void *)(v2 + 112);
              if (v43 >= v44)
              {
                unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *v40) >> 3);
                unint64_t v48 = v47 + 1;
                if (v47 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<std::string>::__throw_length_error[abi:ne180100]();
                }
                unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44 - *v40) >> 3);
                if (2 * v49 > v48) {
                  unint64_t v48 = 2 * v49;
                }
                if (v49 >= 0x555555555555555) {
                  unint64_t v50 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v50 = v48;
                }
                __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v2 + 112);
                if (v50) {
                  v51 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v2 + 112, v50);
                }
                else {
                  v51 = 0;
                }
                v52 = v51 + v47;
                __v.__first_ = v51;
                __v.__begin_ = v52;
                __v.__end_cap_.__value_ = &v51[v50];
                std::string::size_type v53 = v58[0];
                v52->__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
                v52->__r_.__value_.__l.__size_ = v53;
                *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v58 + 7);
                *((unsigned char *)&v52->__r_.__value_.__s + 23) = v42;
                __v.__end_ = v52 + 1;
                std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v2 + 96), &__v);
                unint64_t v46 = *(void *)(v2 + 104);
                std::__split_buffer<std::string>::~__split_buffer(&__v);
              }
              else
              {
                uint64_t v45 = v58[0];
                *(void *)unint64_t v43 = __v.__first_;
                *(void *)(v43 + 8) = v45;
                *(void *)(v43 + 15) = *(void *)((char *)v58 + 7);
                *(unsigned char *)(v43 + 23) = v42;
                unint64_t v46 = v43 + 24;
                *(void *)(v2 + 104) = v43 + 24;
              }
              *(void *)(v2 + 104) = v46;
            }
            this = CFArrayGetCount(theArray);
            ++v39;
          }
          while (this > v39);
        }
      }
    }
  }
  return this;
}

void sub_1C560B468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *ims::aka::asString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if (a1) {
    uint64_t v2 = "XCAP";
  }
  else {
    uint64_t v2 = "SIP";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E6512338[a1]);
}

void *ims::aka::asString@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E6512318[a1]);
}

BOOL ims::aka::Request::isValid@<W0>(ims::aka::Request *this@<X0>, BOOL a2@<W8>)
{
  unsigned int v2 = *((unsigned __int8 *)this + 1);
  if (v2 < 2) {
    goto LABEL_4;
  }
  if (v2 == 2)
  {
    if (*((void *)this + 7) != *((void *)this + 8)
      && *((void *)this + 1) != *((void *)this + 2)
      && *((void *)this + 10) != *((void *)this + 11))
    {
      uint64_t v3 = (char *)this + 104;
      CFAllocatorRef v4 = (char *)this + 112;
      return *(void *)v3 != *(void *)v4;
    }
    return 0;
  }
  if (v2 == 3)
  {
LABEL_4:
    if (*((void *)this + 1) != *((void *)this + 2))
    {
      uint64_t v3 = (char *)this + 32;
      CFAllocatorRef v4 = (char *)this + 40;
      return *(void *)v3 != *(void *)v4;
    }
    return 0;
  }
  return a2;
}

const void **ims::aka::Request::Serialize@<X0>(const UInt8 **this@<X0>, void *a2@<X8>)
{
  uint64_t result = (const void **)ims::aka::Request::isValid((ims::aka::Request *)this, (BOOL)a2);
  if ((result & 1) == 0)
  {
    *a2 = 0;
    return result;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v17 = CFNumberCreate(v5, kCFNumberSInt8Type, this);
  CFDictionarySetValue(theDict, @"kRegKeyAuthRequestContext", v17);
  CFNumberRef v16 = CFNumberCreate(v5, kCFNumberSInt8Type, (char *)this + 1);
  CFDictionarySetValue(theDict, @"kRegKeyAuthRequestMode", v16);
  unsigned int v6 = *((unsigned __int8 *)this + 1);
  if (v6 < 2) {
    goto LABEL_5;
  }
  if (v6 == 2)
  {
    value = CFDataCreate(v5, this[7], this[8] - this[7]);
    CFDictionarySetValue(theDict, @"kIMSRegKeyAuthRequestNafId", value);
    CFDataRef v9 = CFDataCreate(v5, this[1], this[2] - this[1]);
    CFNumberRef v10 = (const __CFNumber *)value;
    value = v9;
    CFNumberRef v19 = v10;
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)&v19);
    CFDictionarySetValue(theDict, @"kRegKeyAuthRequestRand", value);
    CFDataRef v11 = CFDataCreate(v5, this[10], this[11] - this[10]);
    CFNumberRef v12 = (const __CFNumber *)value;
    value = v11;
    CFNumberRef v19 = v12;
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)&v19);
    CFDictionarySetValue(theDict, @"kIMSRegKeyAuthRequestGbaBTid", value);
    CFDataRef v13 = CFDataCreate(v5, this[13], this[14] - this[13]);
    CFNumberRef v14 = (const __CFNumber *)value;
    value = v13;
    CFNumberRef v19 = v14;
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)&v19);
    CFDictionarySetValue(theDict, @"kIMSRegKeyAuthRequestGbaKeyLifetime", value);
    goto LABEL_8;
  }
  if (v6 == 3)
  {
LABEL_5:
    value = CFDataCreate(v5, this[1], this[2] - this[1]);
    CFDictionarySetValue(theDict, @"kRegKeyAuthRequestRand", value);
    CFDataRef v7 = CFDataCreate(v5, this[4], this[5] - this[4]);
    CFNumberRef v8 = (const __CFNumber *)value;
    value = v7;
    CFNumberRef v19 = v8;
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)&v19);
    CFDictionarySetValue(theDict, @"kRegKeyAuthRequestToken", value);
LABEL_8:
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)&value);
  }
  CFNumberRef v19 = CFNumberCreate(v5, kCFNumberIntType, this + 16);
  CFDictionarySetValue(theDict, @"kRegKeyAuthTransactionId", v19);
  ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(a2, (CFTypeRef *)&theDict);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v19);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v16);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v17);
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&theDict);
}

void sub_1C560B81C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFAllocatorRef v5 = va_arg(va2, const void *);
  va_copy(va3, va2);
  CFDataRef v7 = va_arg(va3, const void *);
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)va);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va1);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va2);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)va3);
  _Unwind_Resume(a1);
}

BOOL ims::aka::Request::Deserialize(ims::aka::Request *this, CFDictionaryRef theDict)
{
  if (!theDict) {
    return theDict != 0;
  }
  Value = (unsigned __int8 *)CFDictionaryGetValue(theDict, @"kRegKeyAuthRequestContext");
  if (Value)
  {
    LOBYTE(v36) = 0;
    ctu::cf::assign((ctu::cf *)&v36, Value, v5);
    *(unsigned char *)this = v36;
  }
  unsigned int v6 = (unsigned __int8 *)CFDictionaryGetValue(theDict, @"kRegKeyAuthRequestMode");
  if (v6)
  {
    LOBYTE(v36) = 0;
    ctu::cf::assign((ctu::cf *)&v36, v6, v7);
    unsigned int v8 = v36;
    *((unsigned char *)this + 1) = v36;
  }
  else
  {
    unsigned int v8 = *((unsigned __int8 *)this + 1);
  }
  if (v8 < 2) {
    goto LABEL_39;
  }
  if (v8 == 2)
  {
    if (CFDictionaryGetValue(theDict, @"kIMSRegKeyAuthRequestNafId"))
    {
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      ctu::cf::assign();
      long long v15 = v36;
      uint64_t v16 = v37;
      CFNumberRef v17 = (void *)*((void *)this + 7);
      if (v17)
      {
        *((void *)this + 8) = v17;
        long long v32 = v15;
        operator delete(v17);
        long long v15 = v32;
        *((void *)this + 7) = 0;
        *((void *)this + 8) = 0;
        *((void *)this + 9) = 0;
      }
      *(_OWORD *)((char *)this + 56) = v15;
      *((void *)this + 9) = v16;
    }
    if (CFDictionaryGetValue(theDict, @"kRegKeyAuthRequestRand"))
    {
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      ctu::cf::assign();
      long long v18 = v36;
      uint64_t v19 = v37;
      std::string::size_type v20 = (void *)*((void *)this + 1);
      if (v20)
      {
        *((void *)this + 2) = v20;
        long long v33 = v18;
        operator delete(v20);
        long long v18 = v33;
        *((void *)this + 1) = 0;
        *((void *)this + 2) = 0;
        *((void *)this + 3) = 0;
      }
      *(_OWORD *)((char *)this + 8) = v18;
      *((void *)this + 3) = v19;
    }
    if (CFDictionaryGetValue(theDict, @"kIMSRegKeyAuthRequestGbaBTid"))
    {
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      ctu::cf::assign();
      long long v21 = v36;
      uint64_t v22 = v37;
      uint64_t v23 = (void *)*((void *)this + 10);
      if (v23)
      {
        *((void *)this + 11) = v23;
        long long v34 = v21;
        operator delete(v23);
        long long v21 = v34;
        *((void *)this + 10) = 0;
        *((void *)this + 11) = 0;
        *((void *)this + 12) = 0;
      }
      *((_OWORD *)this + 5) = v21;
      *((void *)this + 12) = v22;
    }
    if (CFDictionaryGetValue(theDict, @"kIMSRegKeyAuthRequestGbaKeyLifetime"))
    {
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      ctu::cf::assign();
      long long v24 = v36;
      uint64_t v25 = v37;
      std::__split_buffer<std::string>::pointer v26 = (void *)*((void *)this + 13);
      if (v26)
      {
        *((void *)this + 14) = v26;
        long long v35 = v24;
        operator delete(v26);
        long long v24 = v35;
        *((void *)this + 13) = 0;
        *((void *)this + 14) = 0;
        *((void *)this + 15) = 0;
      }
      *(_OWORD *)((char *)this + 104) = v24;
      *((void *)this + 15) = v25;
    }
    goto LABEL_34;
  }
  if (v8 == 3)
  {
LABEL_39:
    if (CFDictionaryGetValue(theDict, @"kRegKeyAuthRequestRand"))
    {
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      ctu::cf::assign();
      long long v9 = v36;
      uint64_t v10 = v37;
      CFDataRef v11 = (void *)*((void *)this + 1);
      if (v11)
      {
        *((void *)this + 2) = v11;
        long long v30 = v9;
        operator delete(v11);
        long long v9 = v30;
        *((void *)this + 1) = 0;
        *((void *)this + 2) = 0;
        *((void *)this + 3) = 0;
      }
      *(_OWORD *)((char *)this + 8) = v9;
      *((void *)this + 3) = v10;
    }
    if (CFDictionaryGetValue(theDict, @"kRegKeyAuthRequestToken"))
    {
      long long v36 = 0uLL;
      uint64_t v37 = 0;
      ctu::cf::assign();
      long long v12 = v36;
      uint64_t v13 = v37;
      CFNumberRef v14 = (void *)*((void *)this + 4);
      if (v14)
      {
        *((void *)this + 5) = v14;
        long long v31 = v12;
        operator delete(v14);
        long long v12 = v31;
        *((void *)this + 4) = 0;
        *((void *)this + 5) = 0;
        *((void *)this + 6) = 0;
      }
      *((_OWORD *)this + 2) = v12;
      *((void *)this + 6) = v13;
    }
  }
LABEL_34:
  char v27 = (unsigned int *)CFDictionaryGetValue(theDict, @"kRegKeyAuthTransactionId");
  if (v27)
  {
    LODWORD(v36) = 0;
    ctu::cf::assign((ctu::cf *)&v36, v27, v28);
    *((_DWORD *)this + 32) = v36;
  }
  return theDict != 0;
}

void sub_1C560BBB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p)
  {
    *CFDataRef v11 = __p;
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ims::aka::AuthSuccess::isValid@<W0>(void *a1@<X0>, unsigned char *a2@<X1>, BOOL a3@<W8>)
{
  switch(*a2)
  {
    case 0:
    case 3:
      if (*a1 != a1[1] && a1[3] != a1[4])
      {
        uint64_t v3 = a1 + 7;
        a1 += 6;
        goto LABEL_8;
      }
      a3 = 0;
      break;
    case 1:
      uint64_t v3 = a1 + 1;
      goto LABEL_8;
    case 2:
      uint64_t v3 = a1 + 10;
      a1 += 9;
LABEL_8:
      a3 = *a1 != *v3;
      break;
    default:
      return a3;
  }
  return a3;
}

const void **ims::aka::AuthSuccess::Serialize@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (const void **)ims::aka::AuthSuccess::isValid((void *)a1, a2, (BOOL)a3);
  if (result)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDataRef v18 = 0;
    uint64_t v19 = Mutable;
    switch(*a2)
    {
      case 0:
      case 3:
        CFDataRef v9 = CFDataCreate(v7, *(const UInt8 **)(a1 + 24), *(void *)(a1 + 32) - *(void *)(a1 + 24));
        CFDataRef v10 = v18;
        CFDataRef v18 = v9;
        CFDataRef v20 = v10;
        ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)&v20);
        CFDictionarySetValue(v19, @"kRegKeyAuthResultInteg", v18);
        CFDataRef v11 = CFDataCreate(v7, *(const UInt8 **)(a1 + 48), *(void *)(a1 + 56) - *(void *)(a1 + 48));
        CFDataRef v12 = v18;
        CFDataRef v18 = v11;
        CFDataRef v20 = v12;
        ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)&v20);
        CFDictionarySetValue(v19, @"kRegKeyAuthResultCipher", v18);
        goto LABEL_4;
      case 1:
LABEL_4:
        CFDataRef v13 = CFDataCreate(v7, *(const UInt8 **)a1, *(void *)(a1 + 8) - *(void *)a1);
        CFDataRef v14 = v18;
        CFDataRef v18 = v13;
        CFDataRef v20 = v14;
        ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)&v20);
        long long v15 = @"kRegKeyAuthResultResp";
        goto LABEL_7;
      case 2:
        CFDataRef v16 = CFDataCreate(v7, *(const UInt8 **)(a1 + 72), *(void *)(a1 + 80) - *(void *)(a1 + 72));
        CFDataRef v17 = v18;
        CFDataRef v18 = v16;
        CFDataRef v20 = v17;
        ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)&v20);
        long long v15 = @"kIMSRegKeyAuthResultExtNaf";
LABEL_7:
        CFDictionarySetValue(v19, v15, v18);
        break;
      default:
        break;
    }
    ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(a3, (CFTypeRef *)&v19);
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)&v18);
    return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&v19);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_1C560BDFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)va);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)va1);
  _Unwind_Resume(a1);
}

BOOL ims::aka::AuthSuccess::Deserialize(uint64_t a1, unsigned char *a2, CFDictionaryRef theDict)
{
  if (theDict)
  {
    switch(*a2)
    {
      case 0:
      case 3:
        if (CFDictionaryGetValue(theDict, @"kRegKeyAuthResultCipher"))
        {
          ctu::cf::assign();
          long long v5 = 0uLL;
          unsigned int v6 = *(void **)(a1 + 48);
          if (v6)
          {
            *(void *)(a1 + 56) = v6;
            operator delete(v6);
            long long v5 = 0uLL;
            *(void *)(a1 + 48) = 0;
            *(void *)(a1 + 56) = 0;
            *(void *)(a1 + 64) = 0;
          }
          *(_OWORD *)(a1 + 48) = v5;
          *(void *)(a1 + 64) = 0;
        }
        if (CFDictionaryGetValue(theDict, @"kRegKeyAuthResultInteg"))
        {
          ctu::cf::assign();
          long long v7 = 0uLL;
          unsigned int v8 = *(void **)(a1 + 24);
          if (v8)
          {
            *(void *)(a1 + 32) = v8;
            operator delete(v8);
            long long v7 = 0uLL;
            *(void *)(a1 + 24) = 0;
            *(void *)(a1 + 32) = 0;
            *(void *)(a1 + 40) = 0;
          }
          *(_OWORD *)(a1 + 24) = v7;
          *(void *)(a1 + 40) = 0;
        }
        goto LABEL_11;
      case 1:
LABEL_11:
        if (CFDictionaryGetValue(theDict, @"kRegKeyAuthResultResp"))
        {
          ctu::cf::assign();
          long long v9 = 0uLL;
          CFDataRef v10 = *(void **)a1;
          if (*(void *)a1)
          {
            *(void *)(a1 + 8) = v10;
            operator delete(v10);
            long long v9 = 0uLL;
            *(void *)a1 = 0;
            *(void *)(a1 + 8) = 0;
            *(void *)(a1 + 16) = 0;
          }
          *(_OWORD *)a1 = v9;
          *(void *)(a1 + 16) = 0;
        }
        break;
      case 2:
        if (CFDictionaryGetValue(theDict, @"kIMSRegKeyAuthResultExtNaf"))
        {
          ctu::cf::assign();
          long long v11 = 0uLL;
          CFDataRef v12 = *(void **)(a1 + 72);
          if (v12)
          {
            *(void *)(a1 + 80) = v12;
            operator delete(v12);
            long long v11 = 0uLL;
            *(void *)(a1 + 72) = 0;
            *(void *)(a1 + 80) = 0;
            *(void *)(a1 + 88) = 0;
          }
          *(_OWORD *)(a1 + 72) = v11;
          *(void *)(a1 + 88) = 0;
        }
        break;
      default:
        return theDict != 0;
    }
  }
  return theDict != 0;
}

void sub_1C560C024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p)
  {
    *long long v11 = __p;
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL ims::aka::AuthSyncFailure::isValid(ims::aka::AuthSyncFailure *this)
{
  return *(void *)this != *((void *)this + 1);
}

const void **ims::aka::AuthSyncFailure::Serialize@<X0>(const void **this@<X0>, void *a2@<X8>)
{
  if (*this == this[1])
  {
    *a2 = 0;
  }
  else
  {
    uint64_t v3 = (uint64_t)this;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDataRef v5 = CFDataCreate(v4, *(const UInt8 **)v3, *(void *)(v3 + 8) - *(void *)v3);
    CFDictionarySetValue(theDict, @"kRegKeyAuthResultAuts", v5);
    ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(a2, (CFTypeRef *)&theDict);
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)&v5);
    return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&theDict);
  }
  return this;
}

void sub_1C560C124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

BOOL ims::aka::AuthSyncFailure::Deserialize(ims::aka::AuthSyncFailure *this, CFDictionaryRef theDict)
{
  if (theDict && CFDictionaryGetValue(theDict, @"kRegKeyAuthResultAuts"))
  {
    ctu::cf::assign();
    long long v4 = 0uLL;
    CFDataRef v5 = *(void **)this;
    if (*(void *)this)
    {
      *((void *)this + 1) = v5;
      operator delete(v5);
      long long v4 = 0uLL;
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      *((void *)this + 2) = 0;
    }
    *(_OWORD *)this = v4;
    *((void *)this + 2) = 0;
  }
  return theDict != 0;
}

void sub_1C560C1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **ims::aka::Response::Serialize@<X0>(ims::aka::Response *this@<X0>, void *a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v11 = CFNumberCreate(v4, kCFNumberSInt8Type, (char *)this + 8);
  CFDictionarySetValue(theDict, @"kRegKeyAuthRequestContext", v11);
  CFNumberRef v10 = CFNumberCreate(v4, kCFNumberSInt8Type, (char *)this + 9);
  CFDictionarySetValue(theDict, @"kRegKeyAuthRequestMode", v10);
  CFNumberRef v9 = CFNumberCreate(v4, kCFNumberIntType, (char *)this + 12);
  CFDictionarySetValue(theDict, @"kRegKeyAuthResult", v9);
  CFNumberRef v8 = CFNumberCreate(v4, kCFNumberIntType, (char *)this + 140);
  CFDictionarySetValue(theDict, @"kRegKeyAuthTransactionId", v8);
  int v5 = *((_DWORD *)this + 3);
  if (v5 == 1)
  {
    value = 0;
    ims::aka::AuthSuccess::Serialize((uint64_t)this + 16, (unsigned char *)this + 9, &value);
    if (value) {
      CFDictionarySetValue(theDict, @"kRegKeyAuthResultSuccess", value);
    }
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    value = 0;
    ims::aka::AuthSyncFailure::Serialize((const void **)this + 14, &value);
    if (value) {
      CFDictionarySetValue(theDict, @"kRegKeyAuthResultSFailure", value);
    }
LABEL_7:
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&value);
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(a2, (CFTypeRef *)&theDict);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v8);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v9);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v10);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v11);
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&theDict);
}

void sub_1C560C3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, const void *a11, const void *a12, const void *a13, const void *a14)
{
}

uint64_t ims::aka::Response::Deserialize(ims::aka::Response *this, CFDictionaryRef theDict)
{
  if (!theDict) {
    return 0;
  }
  *((_DWORD *)this + 3) = 0;
  Value = (unsigned __int8 *)CFDictionaryGetValue(theDict, @"kRegKeyAuthRequestContext");
  if (Value)
  {
    char v14 = 0;
    ctu::cf::assign((ctu::cf *)&v14, Value, v5);
    *((unsigned char *)this + 8) = v14;
  }
  unsigned int v6 = (unsigned __int8 *)CFDictionaryGetValue(theDict, @"kRegKeyAuthRequestMode");
  if (v6)
  {
    char v15 = 0;
    ctu::cf::assign((ctu::cf *)&v15, v6, v7);
    *((unsigned char *)this + 9) = v15;
  }
  uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, @"kRegKeyAuthResult");
  if (result)
  {
    int v17 = 0;
    ctu::cf::assign((ctu::cf *)&v17, (int *)result, v9);
    *((_DWORD *)this + 3) = v17;
    uint64_t result = (uint64_t)CFDictionaryGetValue(theDict, @"kRegKeyAuthTransactionId");
    if (result)
    {
      int v16 = 0;
      ctu::cf::assign((ctu::cf *)&v16, (unsigned int *)result, v10);
      *((_DWORD *)this + 35) = v16;
      int v11 = *((_DWORD *)this + 3);
      if (v11 == 2)
      {
        CFDictionaryRef v13 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"kRegKeyAuthResultSFailure");
        return ims::aka::AuthSyncFailure::Deserialize((ims::aka::Response *)((char *)this + 112), v13);
      }
      else if (v11 == 1)
      {
        CFDictionaryRef v12 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"kRegKeyAuthResultSuccess");
        return ims::aka::AuthSuccess::Deserialize((uint64_t)this + 16, (unsigned char *)this + 9, v12);
      }
      else
      {
        CFDictionaryGetValue(theDict, @"kRegKeyAuthResultFailure");
        return 1;
      }
    }
  }
  return result;
}

const void **ims::AuthChallengeResponse::Serialize@<X0>(ims::AuthChallengeResponse *this@<X0>, void *a2@<X8>)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFNumberRef v8 = CFNumberCreate(v4, kCFNumberIntType, this);
  CFDictionarySetValue(theDict, @"kRegKeyAuthType", v8);
  if (*(_DWORD *)this == 1)
  {
    uint64_t v5 = *((void *)this + 1);
    if (v5)
    {
      value = 0;
      (*(void (**)(void **__return_ptr))(*(void *)v5 + 16))(&value);
      if (value) {
        CFDictionarySetValue(theDict, @"kRegKeyAuthResult", value);
      }
      ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&value);
    }
  }
  ctu::cf::CFSharedRef<__CFDictionary const>::CFSharedRef<__CFDictionary,void>(a2, (CFTypeRef *)&theDict);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)&v8);
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&theDict);
}

void sub_1C560C6A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, const void *);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)va);
  ctu::SharedRef<__CFNumber const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFNumber const>::~SharedRef((const void **)va1);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)va2);
  _Unwind_Resume(a1);
}

int *ims::AuthChallengeResponse::Deserialize(ims::AuthChallengeResponse *this, CFDictionaryRef theDict)
{
  if (!theDict) {
    return 0;
  }
  *(_DWORD *)this = 0;
  uint64_t result = (int *)CFDictionaryGetValue(theDict, @"kRegKeyAuthType");
  if (result)
  {
    int v6 = 0;
    ctu::cf::assign((ctu::cf *)&v6, result, v4);
    int v5 = v6;
    *(_DWORD *)this = v6;
    if (v5 == 2) {
      operator new();
    }
    uint64_t result = 0;
    if (v5 == 1) {
      operator new();
    }
  }
  return result;
}

const void **ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(const void **a1)
{
  unsigned int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void ims::httpDigest::Response::~Response(ims::httpDigest::Response *this)
{
  *(void *)this = &unk_1F20E4EE8;
  unsigned int v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20E4EE8;
  unsigned int v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
  JUMPOUT(0x1C878E320);
}

void ims::httpDigest::Response::Serialize(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ims::httpDigest::Response::Deserialize(ims::httpDigest::Response *this, const __CFDictionary *a2)
{
  return 0;
}

void RTCPSDesPacket::packetize(RTCPSDesPacket *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *((void *)this + 4);
  if (v4 == v5)
  {
    v8.__i_ = 0;
    int v6 = 0;
    LODWORD(v9) = 0;
    uint64_t v7 = *((void *)this + 3);
  }
  else
  {
    int v6 = 0;
    do
    {
      *(void *)std::__split_buffer<unsigned int> __x = 0;
      __x[0] = *(_DWORD *)v4;
      memset(v14, 0, sizeof(v14));
      std::vector<RTCPSDesItem>::__init_with_size[abi:ne180100]<RTCPSDesItem*,RTCPSDesItem*>(v14, *(void *)(v4 + 8), *(void *)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 5);
      RTCPSDesInfo::packetize((RTCPSDesInfo *)__x, (uint64_t)&v11);
      if (v6) {
        operator delete(v6);
      }
      int v6 = v11;
      std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>((std::vector<unsigned int> *)a2, *(void *)(a2 + 8), (char *)v11, v12, (v12 - (char *)v11) >> 2);
      int v11 = (void **)v14;
      std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100](&v11);
      v4 += 32;
    }
    while (v4 != v5);
    uint64_t v4 = *((void *)this + 3);
    uint64_t v7 = *((void *)this + 4);
    v8.__i_ = *(std::__wrap_iter<const unsigned int *>::iterator_type *)a2;
    uint64_t v9 = (*(void *)(a2 + 8) - *(void *)a2) >> 2;
  }
  unsigned int v10 = (v7 - v4) >> 5;
  *((unsigned char *)this + 12) = 0;
  *((unsigned char *)this + 13) = v10;
  *((_DWORD *)this + 4) = 202;
  *((_WORD *)this + 10) = v9;
  __x[0] = bswap32(v9) & 0xFFFF0000 | 0xCA00 | v10 & 0x1F | 0x80;
  std::vector<unsigned int>::insert((std::vector<unsigned int> *)a2, v8, __x);
  if (v6) {
    operator delete(v6);
  }
}

void sub_1C560CB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11) {
    operator delete(v11);
  }
  CFDictionaryRef v13 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RTCPSDesPacket::addSDesInfo(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 3;
  unint64_t v4 = a1[4];
  if (v4 >= a1[5])
  {
    uint64_t result = std::vector<RTCPSDesInfo>::__push_back_slow_path<RTCPSDesInfo const&>(v3, a2);
  }
  else
  {
    std::vector<RTCPSDesInfo>::__construct_one_at_end[abi:ne180100]<RTCPSDesInfo const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 32;
  }
  a1[4] = result;
  return result;
}

ImsOutStream *RTCPSDesPacket::toStream(RTCPSDesPacket *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"RTCP SDes Packet - ", 19);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v4 = *((void *)this + 3);
  for (uint64_t i = *((void *)this + 4); v4 != i; v4 += 32)
  {
    uint64_t v7 = 0;
    LODWORD(v7) = *(_DWORD *)v4;
    memset(v8, 0, sizeof(v8));
    std::vector<RTCPSDesItem>::__init_with_size[abi:ne180100]<RTCPSDesItem*,RTCPSDesItem*>(v8, *(void *)(v4 + 8), *(void *)(v4 + 16), (uint64_t)(*(void *)(v4 + 16) - *(void *)(v4 + 8)) >> 5);
    RTCPSDesInfo::toStream((RTCPSDesInfo *)&v7, a2);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t v9 = (void **)v8;
    std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
  return a2;
}

void sub_1C560CCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void RTCPSDesPacket::~RTCPSDesPacket(RTCPSDesPacket *this)
{
  *(void *)this = &unk_1F20E4F30;
  uint64_t v1 = (void **)((char *)this + 24);
  std::vector<RTCPSDesInfo>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_1F20E4F30;
  unsigned int v2 = (void **)((char *)this + 24);
  std::vector<RTCPSDesInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x1C878E320](this, 0x10A1C4017A5BAB5);
}

void *std::vector<RTCPSDesInfo>::__construct_one_at_end[abi:ne180100]<RTCPSDesInfo const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_DWORD *)uint64_t v3 = *(_DWORD *)a2;
  *(void *)(v3 + 16) = 0;
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 8) = 0;
  uint64_t result = std::vector<RTCPSDesItem>::__init_with_size[abi:ne180100]<RTCPSDesItem*,RTCPSDesItem*>((void *)(v3 + 8), *(void *)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 5);
  *(void *)(a1 + 8) = v3 + 32;
  return result;
}

void sub_1C560CE20(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<RTCPSDesInfo>::__push_back_slow_path<RTCPSDesInfo const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<RTCPSDesItem>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPSDesItem>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  char v15 = v11;
  int v16 = &v10[32 * v9];
  *(_DWORD *)int v11 = *(_DWORD *)a2;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 1) = 0;
  std::vector<RTCPSDesItem>::__init_with_size[abi:ne180100]<RTCPSDesItem*,RTCPSDesItem*>((void *)v11 + 1, *(void *)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 5);
  v15 += 32;
  std::vector<RTCPSDesInfo>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<RTCPSDesInfo>::~__split_buffer(v14);
  return v12;
}

void sub_1C560CF14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<RTCPSDesInfo>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<RTCPSDesInfo>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      *(void *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void **std::__split_buffer<RTCPSDesInfo>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<RTCPSDesInfo>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    uint64_t v4 = (void **)(i - 24);
    std::vector<RTCPSDesItem>::__destroy_vector::operator()[abi:ne180100](&v4);
  }
}

void XcapServerInfo::XcapServerInfo(uint64_t a1, uint64_t a2, XcapConfig *a3, uint64_t a4, long long *a5)
{
  *(void *)a1 = &unk_1F20E4F78;
  *(void *)(a1 + 8) = a4;
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v8 = *a5;
    *(void *)(a1 + 32) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 16) = v8;
  }
  *(void *)(a1 + 40) = a2;
  XcapConfig::XcapConfig((XcapConfig *)(a1 + 48), a3);
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = a1 + 448;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  operator new();
}

void sub_1C560D130(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;
  MEMORY[0x1C878E320](v5, 0x10B3C4067250E12);
  if (*(char *)(v1 + 487) < 0) {
    operator delete(*(void **)(v1 + 464));
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1 + 440, *(void **)(v1 + 448));
  if (*(char *)(v1 + 439) < 0) {
    operator delete(*(void **)(v1 + 416));
  }
  XcapConfig::~XcapConfig(v3);
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void XcapServerInfo::~XcapServerInfo(XcapServerInfo *this)
{
  *(void *)this = &unk_1F20E4F78;
  uint64_t v2 = *((void *)this + 62);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 63);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 61);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*((char *)this + 487) < 0) {
    operator delete(*((void **)this + 58));
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 440, *((void **)this + 56));
  if (*((char *)this + 439) < 0) {
    operator delete(*((void **)this + 52));
  }
  XcapConfig::~XcapConfig((void **)this + 6);
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

uint64_t XcapServerInfo::initialize(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 488) + 16))();
}

uint64_t XcapServerInfo::sendGetRequest(uint64_t a1, std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 416), a2);
  *(_DWORD *)(a1 + 408) = 0;
  uint64_t v4 = (void **)(a1 + 464);
  if (*(char *)(a1 + 487) < 0) {
    operator delete(*v4);
  }
  char *v4 = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 144))(a1);
  *(_OWORD *)uint64_t v12 = 0u;
  long long v13 = 0u;
  memset(v11, 0, sizeof(v11));
  int v5 = *(_DWORD *)(a1 + 408);
  std::map<std::string,std::string,HttpMessage::ciLess,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100](v10, a1 + 440);
  long long __p = 0uLL;
  uint64_t v9 = 0;
  HttpRequest::HttpRequest((uint64_t)v11, (long long *)(a1 + 376), v5, (long long *)a2, (uint64_t)v10, &__p);
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v10, (void *)v10[1]);
  uint64_t v6 = (*(uint64_t (**)(void, _OWORD *))(**(void **)(a1 + 488) + 24))(*(void *)(a1 + 488), v11);
  *(void *)&v11[0] = &unk_1F20B7938;
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[1]);
  }
  HttpMessage::~HttpMessage((void **)v11);
  return v6;
}

void sub_1C560D448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18)
{
}

uint64_t XcapServerInfo::sendPutRequest(uint64_t a1, const std::string *a2, const std::string *a3)
{
  int v5 = (long long *)(a1 + 416);
  std::string::operator=((std::string *)(a1 + 416), a2);
  *(_DWORD *)(a1 + 408) = 1;
  std::string::operator=((std::string *)(a1 + 464), a3);
  (*(void (**)(uint64_t))(*(void *)a1 + 144))(a1);
  *(_OWORD *)long long __p = 0u;
  long long v12 = 0u;
  memset(v10, 0, sizeof(v10));
  int v6 = *(_DWORD *)(a1 + 408);
  std::map<std::string,std::string,HttpMessage::ciLess,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100](v9, a1 + 440);
  HttpRequest::HttpRequest((uint64_t)v10, (long long *)(a1 + 376), v6, v5, (uint64_t)v9, (long long *)(a1 + 464));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v9, (void *)v9[1]);
  uint64_t v7 = (*(uint64_t (**)(void, _OWORD *))(**(void **)(a1 + 488) + 24))(*(void *)(a1 + 488), v10);
  *(void *)&v10[0] = &unk_1F20B7938;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  HttpMessage::~HttpMessage((void **)v10);
  return v7;
}

void sub_1C560D5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  HttpRequest::~HttpRequest((void **)va);
  _Unwind_Resume(a1);
}

uint64_t XcapServerInfo::resendRequest(XcapServerInfo *this)
{
  int v1 = *((_DWORD *)this + 102);
  uint64_t v2 = *((void *)this + 61);
  uint64_t v3 = (long long *)((char *)this + 376);
  uint64_t v4 = (long long *)((char *)this + 416);
  int v5 = (char *)this + 440;
  if (v1 == 1)
  {
    std::map<std::string,std::string,HttpMessage::ciLess,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100](v14, (uint64_t)v5);
    HttpRequest::HttpRequest((uint64_t)v15, v3, 1, v4, (uint64_t)v14, (long long *)this + 29);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 24))(v2, v15);
    v15[0] = &unk_1F20B7938;
    if (v17 < 0) {
      operator delete(__p);
    }
    HttpMessage::~HttpMessage(v15);
    long long v8 = (void *)v14[1];
    uint64_t v9 = v14;
  }
  else
  {
    std::map<std::string,std::string,HttpMessage::ciLess,std::allocator<std::pair<std::string const,std::string>>>::map[abi:ne180100](v13, (uint64_t)v5);
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    HttpRequest::HttpRequest((uint64_t)v15, v3, v1, v4, (uint64_t)v13, &v11);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 24))(v2, v15);
    v15[0] = &unk_1F20B7938;
    if (v17 < 0) {
      operator delete(__p);
    }
    HttpMessage::~HttpMessage(v15);
    if (SHIBYTE(v12) < 0) {
      operator delete((void *)v11);
    }
    long long v8 = (void *)v13[1];
    uint64_t v9 = v13;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v9, v8);
  return v7;
}

void sub_1C560D78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

void XcapServerInfo::_saveCookie(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    uint64_t v4 = (uint64_t **)(a1 + 440);
    std::string::basic_string[abi:ne180100]<0>(__p, "Cookie");
    long long v8 = __p;
    int v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,HttpMessage::ciLess,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4, (uint64_t)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v8);
    std::string::operator=((std::string *)((char *)v5 + 56), (const std::string *)a2);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C560D880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *XcapServerInfo::getConnectionServiceType@<X0>(XcapServerInfo *this@<X0>, void *a2@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a2, off_1E6512358[*((int *)this + 12)]);
}

void XcapServerInfo::_constructHostSuffix(XcapServerInfo *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (const std::string *)((char *)this + 80);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*((char *)this + 103) < 0)
  {
    int v5 = (char *)*((void *)this + 10);
    int64_t v4 = *((void *)this + 11);
  }
  else
  {
    int64_t v4 = *((unsigned __int8 *)this + 103);
    int v5 = (char *)this + 80;
  }
  if (v4 >= 1)
  {
    int v6 = &v5[v4];
    char v7 = v5;
    do
    {
      long long v8 = (char *)memchr(v7, 64, v4);
      if (!v8) {
        break;
      }
      if (*v8 == 64)
      {
        if (v8 != v6 && v8 - v5 != -1)
        {
          memset(&__str, 0, sizeof(__str));
          std::string::basic_string(&__str, v3, v8 - v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v38);
          uint64_t v9 = XcapServerInfo::k3gppDomain;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          int64_t v11 = strlen(XcapServerInfo::k3gppDomain);
          if (v11)
          {
            int64_t v12 = v11;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int64_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            }
            else {
              int64_t size = __str.__r_.__value_.__l.__size_;
            }
            if (size >= v11)
            {
              char v14 = (char *)p_str + size;
              int v15 = *XcapServerInfo::k3gppDomain;
              int64_t v16 = size;
              char v17 = p_str;
              do
              {
                int64_t v18 = v16 - v12;
                if (v18 == -1) {
                  break;
                }
                uint64_t v19 = (char *)memchr(v17, v15, v18 + 1);
                if (!v19) {
                  break;
                }
                CFDataRef v20 = v19;
                if (!memcmp(v19, v9, v12))
                {
                  if (v20 == v14 || v20 - (char *)p_str == -1) {
                    break;
                  }
                  goto LABEL_29;
                }
                char v17 = (std::string *)(v20 + 1);
                int64_t v16 = v14 - (v20 + 1);
              }
              while (v16 >= v12);
            }
            std::string::append(a2, (const std::string::value_type *)p_str, size);
          }
          else
          {
LABEL_29:
            size_t v21 = strlen((const char *)XcapServerInfo::kImsPrefix);
            if (!std::string::compare(&__str, 0, v21, (const std::string::value_type *)XcapServerInfo::kImsPrefix))
            {
              size_t v22 = strlen((const char *)XcapServerInfo::kImsPrefix);
              std::string::basic_string(&v38, &__str, v22, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v40);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string __str = v38;
            }
            uint64_t v23 = XcapServerInfo::k3gppDomain;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v24 = &__str;
            }
            else {
              long long v24 = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            int64_t v25 = strlen(XcapServerInfo::k3gppDomain);
            if (v25)
            {
              int64_t v26 = v25;
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int64_t v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              }
              else {
                int64_t v27 = __str.__r_.__value_.__l.__size_;
              }
              CFNumberRef v28 = (char *)v24 + v27;
              if (v27 >= v25)
              {
                int v34 = *XcapServerInfo::k3gppDomain;
                long long v35 = v24;
                do
                {
                  int64_t v36 = v27 - v26;
                  if (v36 == -1) {
                    break;
                  }
                  uint64_t v37 = (char *)memchr(v35, v34, v36 + 1);
                  if (!v37) {
                    break;
                  }
                  unint64_t v29 = v37;
                  if (!memcmp(v37, v23, v26)) {
                    goto LABEL_42;
                  }
                  long long v35 = (std::string *)(v29 + 1);
                  int64_t v27 = v28 - (v29 + 1);
                }
                while (v27 >= v26);
              }
              unint64_t v29 = v28;
LABEL_42:
              if (v29 == v28) {
                std::string::size_type v30 = -1;
              }
              else {
                std::string::size_type v30 = v29 - (char *)v24;
              }
            }
            else
            {
              std::string::size_type v30 = 0;
            }
            std::string::basic_string(&v38, &__str, 0, v30, (std::allocator<char> *)&v40);
            if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v31 = &v38;
            }
            else {
              long long v31 = (std::string *)v38.__r_.__value_.__r.__words[0];
            }
            if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v32 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v32 = v38.__r_.__value_.__l.__size_;
            }
            std::string::append(a2, (const std::string::value_type *)v31, v32);
            if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v38.__r_.__value_.__l.__data_);
            }
            std::string::append(a2, "pub.", 4uLL);
            size_t v33 = strlen(XcapServerInfo::k3gppDomain);
            std::string::append(a2, XcapServerInfo::k3gppDomain, v33);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        return;
      }
      char v7 = v8 + 1;
      int64_t v4 = v6 - (unsigned char *)v7;
    }
    while (v6 - (unsigned char *)v7 >= 1);
  }
}

void sub_1C560DBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipAlertInfo::SipAlertInfo(uint64_t a1, const std::string *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = &unk_1F20B37B0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 56) = 256;
  std::string::operator=((std::string *)a1, a2);
  return a1;
}

void sub_1C560DCB4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v2;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(void **)(v1 + 40));
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

std::string *SipAlertInfo::SipAlertInfo(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B37B0;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)&a1[1].__r_.__value_.__l.__size_, *(void ***)(a2 + 32), (void **)(a2 + 40));
  a1[2].__r_.__value_.__s.__data_[9] = 1;
  a1[2].__r_.__value_.__s.__data_[8] = *(unsigned char *)(a2 + 56);
  std::string::operator=(a1, (const std::string *)a2);
  return a1;
}

void sub_1C560DD74(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = v3;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2, *(void **)(v1 + 40));
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void SipAlertInfoHeader::addAlertInfo()
{
}

void sub_1C560DE10(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B2C406DDFD988);
  _Unwind_Resume(a1);
}

void SipVectorHeader<SipAlertInfo *>::addItem(void *a1, void *a2)
{
  unint64_t v6 = a1[10];
  uint64_t v4 = (uint64_t)(a1 + 10);
  unint64_t v5 = v6;
  char v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = (void **)(v4 - 16);
    uint64_t v10 = *(void *)(v4 - 16);
    uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<SipAlertInfo *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      int v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v4, v14);
    }
    else {
      int v15 = 0;
    }
    int64_t v16 = &v15[8 * v11];
    char v17 = &v15[8 * v14];
    *(void *)int64_t v16 = *a2;
    long long v8 = v16 + 8;
    uint64_t v19 = (char *)a1[8];
    int64_t v18 = (char *)a1[9];
    if (v18 != v19)
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      int64_t v18 = (char *)*v9;
    }
    a1[8] = v16;
    a1[9] = v8;
    a1[10] = v17;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    *char v7 = *a2;
    long long v8 = v7 + 1;
  }
  a1[9] = v8;
}

void SipAlertInfoHeader::~SipAlertInfoHeader(SipAlertInfoHeader *this)
{
  SipPointerVectorHeader<SipAlertInfo>::~SipPointerVectorHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipAlertInfoHeader::clone(SipAlertInfoHeader *this)
{
}

void sub_1C560E180(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40888A45CFLL);
  _Unwind_Resume(a1);
}

uint64_t SipVectorHeader<SipAlertInfo *>::encodeValue(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[8];
  if (a1[9] != v2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      if (v6)
      {
        char v7 = *(void **)(a2 + 8);
        char v9 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v9, 1);
        *(unsigned char *)(a2 + 17) = 0;
        uint64_t v2 = a1[8];
      }
      (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 112))(a1, v2 + v5, a2);
      ++v6;
      uint64_t v2 = a1[8];
      v5 += 8;
    }
    while (v6 < (a1[9] - v2) >> 3);
  }
  return 1;
}

BOOL SipVectorHeader<SipAlertInfo *>::setValueFromString(void *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v4 = (*(uint64_t (**)(void *, uint64_t, uint64_t, void **, uint64_t))(*a1 + 128))(a1, a2, v4, __p, 44);
    if (v4 == -1) {
      break;
    }
    uint64_t v6 = 0;
    if (((*(uint64_t (**)(void *, void **, uint64_t *))(*a1 + 120))(a1, __p, &v6) & 1) == 0) {
      break;
    }
    SipVectorHeader<SipAlertInfo *>::addItem(a1, &v6);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return v4 == -1;
}

void sub_1C560E39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipVectorHeader<SipAlertInfo *>::allowsDuplicates()
{
  return 1;
}

uint64_t SipVectorHeader<SipAlertInfo *>::allowsMerging()
{
  return 1;
}

BOOL SipPointerVectorHeader<SipAlertInfo>::mergeHeader(int a1, void *lpsrc)
{
  if (v2 && v2[9] != v2[8]) {
    operator new();
  }
  return v2 != 0;
}

void sub_1C560E4B0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B2C406DDFD988);
  _Unwind_Resume(a1);
}

ImsOutStream *SipPointerVectorHeader<SipAlertInfo>::itemToStream(uint64_t a1, void *a2, ImsOutStream *a3)
{
  uint64_t v4 = *a2;
  (*(void (**)(ImsOutStream *, void))(*(void *)a3 + 32))(a3, *a2);
  return SipParameterMap::toStream((SipParameterMap *)(v4 + 24), a3, 0, 0, 0, 0);
}

void SipPointerVectorHeader<SipAlertInfo>::itemFromString()
{
}

unint64_t SipVectorHeader<SipAlertInfo *>::nextToken(int a1, std::string *__str, std::string::size_type __pos, std::string *this, unsigned __int8 a5)
{
  return ims::nextTokenQ(__str, __pos, this, a5);
}

BOOL SipVectorHeader<SipAlertInfo *>::mergeHeader(void *a1, void *lpsrc)
{
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = (void *)v3[8];
    uint64_t v6 = (void *)v3[9];
    while (v5 != v6)
      SipVectorHeader<SipAlertInfo *>::addItem(a1, v5++);
  }
  return v4 != 0;
}

void SipVectorHeader<SipAlertInfo *>::~SipVectorHeader(SipHeader *this)
{
  *(void *)this = &unk_1F20E5190;
  uint64_t v2 = (void *)*((void *)this + 8);
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

void std::vector<SipAlertInfo *>::__throw_length_error[abi:ne180100]()
{
}

void SipPointerVectorHeader<SipAlertInfo>::~SipPointerVectorHeader(SipHeader *this)
{
  *(void *)this = &unk_1F20E50F8;
  uint64_t v4 = (char *)this + 64;
  uint64_t v2 = (void *)*((void *)this + 8);
  uint64_t v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = v2[v5];
      if (v6)
      {
        *(void *)(v6 + 24) = &unk_1F20B37B0;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v6 + 32, *(void **)(v6 + 40));
        if (*(char *)(v6 + 23) < 0) {
          operator delete(*(void **)v6);
        }
        MEMORY[0x1C878E320](v6, 0x10B2C406DDFD988);
        uint64_t v2 = (void *)*((void *)this + 8);
        uint64_t v3 = (void *)*((void *)this + 9);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  *(void *)this = &unk_1F20E5190;
  if (v2)
  {
    *((void *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

uint64_t _GLOBAL__sub_I_SipAlertInfoHeader_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(kCallWaitingUrn, "<urn:alert:service:call-waiting>");
  v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, kCallWaitingUrn, &dword_1C51D1000);
}

void SipHop::SipHop(SipHop *this, const SipHop *a2)
{
  *(void *)this = &unk_1F20B3760;
  SipHost::SipHost((uint64_t)this + 8, (uint64_t)a2 + 8);
  *((void *)this + 8) = &unk_1F20B37B0;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)this + 9, *((void ***)a2 + 9), (void **)a2 + 10);
  *((unsigned char *)this + 97) = 1;
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
}

void sub_1C560E9AC(_Unwind_Exception *a1)
{
  SipHost::~SipHost(v1);
  _Unwind_Resume(a1);
}

BOOL SipHop::supportsCompression(SipHop *this)
{
  uint64_t v2 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 72, (void **)"comp");
  if ((void **)((char *)this + 80) == v2) {
    uint64_t v3 = &ims::kEmptyString;
  }
  else {
    uint64_t v3 = (long long *)(v2 + 7);
  }
  uint64_t v4 = *((unsigned __int8 *)v3 + 23);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *((unsigned __int8 *)v3 + 23);
  }
  else {
    uint64_t v5 = *((void *)v3 + 1);
  }
  if (v5 != 7) {
    return 0;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)v3, "sigcomp", *((void *)v3 + 1)) == 0;
  }
  if (!*((unsigned char *)v3 + 23)) {
    return 1;
  }
  uint64_t v6 = v4 - 1;
  char v7 = "sigcomp";
  do
  {
    int v9 = *(unsigned __int8 *)v3;
    uint64_t v3 = (long long *)((char *)v3 + 1);
    int v8 = v9;
    int v11 = *(unsigned __int8 *)v7++;
    int v10 = v11;
    BOOL v13 = v6-- != 0;
    BOOL result = v8 == v10;
  }
  while (v8 == v10 && v13);
  return result;
}

void SipHop::setSupportsCompression(uint64_t **this, int a2)
{
  if (a2)
  {
    uint64_t v5 = "comp";
    uint64_t v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(this + 9, (void **)"comp", (uint64_t)&std::piecewise_construct, (long long **)&v5);
    std::string::operator=((std::string *)(v3 + 7), (const std::string *)"sigcomp");
  }
  else
  {
    uint64_t v4 = (char *)(this + 8);
    SipParameterMap::clearParameter((uint64_t)v4, (void **)"comp");
  }
}

void SipHop::setHostPort(SipHop *this, unsigned __int16 a2)
{
  uint64_t v6 = 0;
  long long v5 = 0u;
  memset(v4, 0, sizeof(v4));
  SipHost::SipHost((uint64_t)v4, (uint64_t)this + 8);
  LOWORD(v5) = a2;
  if (*((void *)&v5 + 1)) {
    (*(void (**)(void, void))(**((void **)&v5 + 1) + 64))(*((void *)&v5 + 1), a2);
  }
  (*(void (**)(SipHop *, _OWORD *))(*(void *)this + 32))(this, v4);
  SipHost::~SipHost((SipHost *)v4);
}

void sub_1C560EBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SipRouteSet::SipRouteSet(SipRouteSet *this, const SipRouteSet *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F20E5228;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  uint64_t v2 = (const SipUri **)*((void *)a2 + 1);
  if (*((const SipUri ***)a2 + 2) != v2) {
    SipRouteSet::addHop(this, *v2, 0, 0, **((const SipParameterMap ***)a2 + 4));
  }
}

void sub_1C560EC58(_Unwind_Exception *exception_object)
{
  uint64_t v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  long long v5 = *v2;
  if (*v2)
  {
    v1[2] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void SipRouteSet::addHop(SipRouteSet *this, const SipUri *a2, BOOL a3, BOOL a4, const SipParameterMap *a5)
{
}

void sub_1C560F0B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

SipRouteSet *SipRouteSet::operator=(SipRouteSet *a1, const SipUri ***a2)
{
  SipRouteSet::clear(a1);
  uint64_t v4 = a2[1];
  if (a2[2] != v4) {
    SipRouteSet::addHop(a1, *v4, 0, 0, *a2[4]);
  }
  return a1;
}

void *SipRouteSet::clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[2];
  if (v2 != this[1])
  {
    unint64_t v3 = 0;
    uint64_t v2 = this[1];
    do
    {
      uint64_t v4 = *(void *)(v2 + 8 * v3);
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      this = *(void **)(v1[4] + 8 * v3);
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
      ++v3;
      uint64_t v2 = v1[1];
    }
    while (v3 < (v1[2] - v2) >> 3);
  }
  v1[2] = v2;
  v1[5] = v1[4];
  return this;
}

void SipRouteSet::~SipRouteSet(SipRouteSet *this)
{
  *(void *)this = &unk_1F20E5228;
  SipRouteSet::clear(this);
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  SipRouteSet::~SipRouteSet(this);
  JUMPOUT(0x1C878E320);
}

char *std::vector<SipParameterMap *>::insert(uint64_t a1, char *__src, char *a3)
{
  unint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    BOOL v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      std::vector<SipUri *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    long long __p = v19;
    int64_t v27 = v20;
    CFNumberRef v28 = v20;
    unint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        long long __p = v23;
        int64_t v27 = v20;
        unint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        int64_t v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    CFNumberRef v28 = v20 + 8;
    uint64_t v4 = std::vector<SipParameterMap *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    int v9 = __src + 8;
    int v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1C560F4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

SipRouteSet *SipRouteSet::addHops(SipRouteSet *this, const SipRouteSet *a2, char a3, BOOL a4, BOOL a5)
{
  long long v5 = (const SipUri **)*((void *)a2 + 1);
  uint64_t v6 = (const SipUri **)*((void *)a2 + 2);
  if (a3)
  {
    unint64_t v7 = (char *)v6 - (char *)v5;
    if ((int)(v7 >> 3) >= 1) {
      SipRouteSet::addHop(this, *(const SipUri **)(*((void *)a2 + 1) + 8 * ((v7 >> 3) - 1)), a4, a5, *(const SipParameterMap **)(*((void *)a2 + 4) + 8 * ((v7 >> 3) - 1)));
    }
  }
  else if (v6 != v5)
  {
    SipRouteSet::addHop(this, *v5, a4, a5, **((const SipParameterMap ***)a2 + 4));
  }
  return this;
}

void SipRouteSet::allHops(uint64_t a1, char **a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (*(void *)(a1 + 16) != v3)
    {
      unint64_t v5 = 0;
      uint64_t v6 = a2 + 2;
      unint64_t v7 = a2[1];
      do
      {
        if ((unint64_t)v7 >= *v6)
        {
          uint64_t v8 = (v7 - *a2) >> 3;
          if ((unint64_t)(v8 + 1) >> 61) {
            std::vector<SipUri *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v9 = *v6 - (void)*a2;
          uint64_t v10 = v9 >> 2;
          if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
            uint64_t v10 = v8 + 1;
          }
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)v6, v11);
          }
          else {
            uint64_t v12 = 0;
          }
          BOOL v13 = &v12[8 * v8];
          *(void *)BOOL v13 = *(void *)(v3 + 8 * v5);
          unint64_t v7 = v13 + 8;
          uint64_t v15 = *a2;
          unint64_t v14 = a2[1];
          if (v14 != *a2)
          {
            do
            {
              uint64_t v16 = *((void *)v14 - 1);
              v14 -= 8;
              *((void *)v13 - 1) = v16;
              v13 -= 8;
            }
            while (v14 != v15);
            unint64_t v14 = *a2;
          }
          *a2 = v13;
          a2[1] = v7;
          a2[2] = &v12[8 * v11];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)unint64_t v7 = *(void *)(v3 + 8 * v5);
          v7 += 8;
        }
        a2[1] = v7;
        ++v5;
        uint64_t v3 = *(void *)(a1 + 8);
      }
      while (v5 < (*(void *)(a1 + 16) - v3) >> 3);
    }
  }
}

void SipRouteSet::allParams(uint64_t a1, char **a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    if (*(void *)(a1 + 40) != v3)
    {
      unint64_t v5 = 0;
      uint64_t v6 = a2 + 2;
      unint64_t v7 = a2[1];
      do
      {
        if ((unint64_t)v7 >= *v6)
        {
          uint64_t v8 = (v7 - *a2) >> 3;
          if ((unint64_t)(v8 + 1) >> 61) {
            std::vector<SipUri *>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v9 = *v6 - (void)*a2;
          uint64_t v10 = v9 >> 2;
          if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
            uint64_t v10 = v8 + 1;
          }
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)v6, v11);
          }
          else {
            uint64_t v12 = 0;
          }
          BOOL v13 = &v12[8 * v8];
          *(void *)BOOL v13 = *(void *)(v3 + 8 * v5);
          unint64_t v7 = v13 + 8;
          uint64_t v15 = *a2;
          unint64_t v14 = a2[1];
          if (v14 != *a2)
          {
            do
            {
              uint64_t v16 = *((void *)v14 - 1);
              v14 -= 8;
              *((void *)v13 - 1) = v16;
              v13 -= 8;
            }
            while (v14 != v15);
            unint64_t v14 = *a2;
          }
          *a2 = v13;
          a2[1] = v7;
          a2[2] = &v12[8 * v11];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *(void *)unint64_t v7 = *(void *)(v3 + 8 * v5);
          v7 += 8;
        }
        a2[1] = v7;
        ++v5;
        uint64_t v3 = *(void *)(a1 + 32);
      }
      while (v5 < (*(void *)(a1 + 40) - v3) >> 3);
    }
  }
}

ImsOutStream *SipRouteSet::toStream(SipRouteSet *this, ImsOutStream *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (*((void *)this + 2) != v3)
  {
    unint64_t v5 = 0;
    do
    {
      if (v5)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)", ", 2);
        *((unsigned char *)a2 + 17) = 0;
        uint64_t v3 = *((void *)this + 1);
      }
      SipUri::toStream(*(void *)(v3 + 8 * v5), (uint64_t)a2, 2 * (*(void *)(*(void *)(*((void *)this + 4) + 8 * v5) + 24) == 0));
      uint64_t v6 = *(void *)(*((void *)this + 4) + 8 * v5);
      (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v6 + 16))(v6, a2);
      ++v5;
      uint64_t v3 = *((void *)this + 1);
    }
    while (v5 < (*((void *)this + 2) - v3) >> 3);
  }
  return a2;
}

BOOL SipRouteSet::fromString(SipRouteSet *a1, std::string *a2)
{
  SipRouteSet::clear(a1);
  memset(&__str, 0, sizeof(__str));
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  SipUri::SipUri((SipUri *)v15);
  v14[1] = 0;
  v14[2] = (void *)256;
  BOOL v13 = v14;
  v14[0] = 0;
  uint64_t v12 = &unk_1F20B37B0;
  unint64_t v4 = ims::nextTokenQ(a2, 0, &__str, 0x2Cu);
  if (v4 != -1)
  {
    std::string::size_type UriHeaderParameterMarker = SipUriHeader::findUriHeaderParameterMarker(&__str);
    if (UriHeaderParameterMarker == -1)
    {
      if (SipUri::fromString((uint64_t)v15, &__str))
      {
        v9.__r_.__value_.__r.__words[2] = 0;
        uint64_t v10 = 0;
        v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B37B0;
        v9.__r_.__value_.__l.__size_ = (std::string::size_type)&v9.__r_.__value_.__r.__words[2];
        __int16 v11 = 256;
        SipRouteSet::addHop(a1, (const SipUri *)v15, 0, 0, (const SipParameterMap *)&v9);
      }
    }
    else
    {
      std::string::basic_string(&v9, &__str, 0, UriHeaderParameterMarker, (std::allocator<char> *)v18);
      char v6 = SipUri::fromString((uint64_t)v15, &v9);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      if (v6)
      {
        std::string::basic_string(&v9, &__str, UriHeaderParameterMarker + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v18);
        char v7 = SipParameterMap::fromString((uint64_t)&v12, &v9, 0, 0);
        if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v9.__r_.__value_.__l.__data_);
        }
        if (v7) {
          SipRouteSet::addHop(a1, (const SipUri *)v15, 0, 0, (const SipParameterMap *)&v12);
        }
      }
    }
  }
  uint64_t v12 = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14[0]);
  SipUri::~SipUri((SipUri *)v15);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v4 == -1;
}

void sub_1C560FB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v21, a13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a10, a18);
  SipUri::~SipUri((SipUri *)&a21);
  if (*(char *)(v22 - 97) < 0) {
    operator delete(*(void **)(v22 - 120));
  }
  _Unwind_Resume(a1);
}

uint64_t SipRouteSet::containsUri(SipRouteSet *this, const SipUri *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (*((void *)this + 2) == v2) {
    return 0;
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t result = SipUri::equals(*(SipUri **)(v2 + 8 * v5), a2, 1);
    if (result) {
      break;
    }
    ++v5;
    uint64_t v2 = *((void *)this + 1);
  }
  while (v5 < (*((void *)this + 2) - v2) >> 3);
  return result;
}

void std::vector<SipUri *>::__throw_length_error[abi:ne180100]()
{
}

char *std::vector<SipParameterMap *>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(char **)(a2 + 8);
  char v6 = (char *)*a1;
  char v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    char v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    char v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  BOOL v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t ImsInternetDateTime::toString@<X0>(ImsInternetDateTime *this@<X0>, void *a2@<X8>)
{
  int v3 = *((_DWORD *)this + 18);
  int v4 = *((_DWORD *)this + 2);
  uint64_t v25 = 0;
  long long v23 = 0u;
  memset(v24, 0, sizeof(v24));
  *(_OWORD *)long long __p = 0u;
  long long v22 = 0u;
  memset(v20, 0, sizeof(v20));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
  char v26 = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, &v26);
  unint64_t v5 = (void *)std::ostream::operator<<();
  char v26 = 45;
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v26, 1);
  *(void *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 2;
  char v7 = (void *)std::ostream::operator<<();
  char v26 = 45;
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v26, 1);
  *(void *)((char *)v8 + *(void *)(*v8 - 24) + 24) = 2;
  std::ostream::operator<<();
  char v26 = 84;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v26, 1);
  *(void *)((char *)&v20[1] + *(void *)(*(void *)&v20[0] - 24) + 8) = 2;
  uint64_t v9 = (void *)std::ostream::operator<<();
  char v26 = 58;
  uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v26, 1);
  *(void *)((char *)v10 + *(void *)(*v10 - 24) + 24) = 2;
  uint64_t v11 = (void *)std::ostream::operator<<();
  char v26 = 58;
  int64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v26, 1);
  *(void *)((char *)v12 + *(void *)(*v12 - 24) + 24) = 2;
  std::ostream::operator<<();
  if ((v4 + 999) >= 0x7CF)
  {
    char v26 = 46;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v26, 1);
    unsigned int v13 = v4 / 1000;
    unsigned int v14 = 100;
    do
    {
      std::ostream::operator<<();
      if (v14 < 0xA) {
        break;
      }
      v13 %= v14;
      v14 /= 0xAu;
    }
    while (v13);
  }
  if (v3)
  {
    if (v3 >= 0) {
      char v15 = 43;
    }
    else {
      char v15 = 45;
    }
    char v26 = v15;
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v26, 1);
    *(void *)((char *)v16 + *(void *)(*v16 - 24) + 24) = 2;
    uint64_t v17 = (void *)std::ostream::operator<<();
    char v26 = 58;
    unint64_t v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)&v26, 1);
    *(void *)((char *)v18 + *(void *)(*v18 - 24) + 24) = 2;
    std::ostream::operator<<();
  }
  else
  {
    char v26 = 90;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)&v26, 1);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v20 + 8, a2);
  *(void *)&v20[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v20 + *(void *)(*(void *)&v20[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v20[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v24);
}

void sub_1C5610120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  a9 = *MEMORY[0x1E4FBA418];
  *(uint64_t *)((char *)&a9 + *(void *)(a9 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  a10 = MEMORY[0x1E4FBA470] + 16;
  if (a23 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C878E270](&a26);
  _Unwind_Resume(a1);
}

void ImsInternetDateTime::fromString(std::string *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  std::string::size_type v6 = std::string::find(this, 84, 0);
  if (v6 == -1)
  {
    std::string::size_type v6 = std::string::find(this, 116, 0);
    if (v6 == -1) {
      goto LABEL_6;
    }
  }
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (v6 == size - 1)
  {
LABEL_6:
    long long v65 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v64.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v64.__r_.__value_.__r.__words[2]) = 1073741835;
    uint64_t v8 = (const std::string *)ImsResult::operator<<<char [19]>((uint64_t)&v64, "DateTime missing T");
    ImsResult::ImsResult((ImsResult *)a3, v8);
    ImsResult::~ImsResult((ImsResult *)&v64);
    return;
  }
  memset(&v63, 0, sizeof(v63));
  std::string::basic_string(&v63, this, 0, v6, (std::allocator<char> *)&v64);
  memset(&__str, 0, sizeof(__str));
  std::string::basic_string(&__str, this, v6 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v64);
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  ims::tokenize(&v63, &v59, 0x2Du);
  uint64_t v9 = (const char *)v59;
  if (v60 - v59 != 72)
  {
    long long v65 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v64.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v64.__r_.__value_.__r.__words[2]) = 1073741835;
    uint64_t v20 = ImsResult::operator<<<char [28]>((uint64_t)&v64, "not enough tokens in date: ");
    uint64_t v21 = (const std::string *)ImsResult::operator<<<std::string>(v20, (uint64_t)&v63);
    ImsResult::ImsResult((ImsResult *)a3, v21);
LABEL_48:
    ImsResult::~ImsResult((ImsResult *)&v64);
    goto LABEL_49;
  }
  if (*(char *)(v59 + 23) < 0) {
    uint64_t v9 = *(const char **)v59;
  }
  *(_DWORD *)(a2 + 36) = strtoul(v9, 0, 10) - 1900;
  uint64_t v10 = (const char *)(v59 + 24);
  if (*(char *)(v59 + 47) < 0) {
    uint64_t v10 = *(const char **)v10;
  }
  *(_DWORD *)(a2 + 32) = strtoul(v10, 0, 10) - 1;
  uint64_t v11 = (const char *)(v59 + 48);
  if (*(char *)(v59 + 71) < 0) {
    uint64_t v11 = *(const char **)v11;
  }
  *(_DWORD *)(a2 + 28) = strtoul(v11, 0, 10);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v12 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v12 = __str.__r_.__value_.__l.__size_;
  }
  if (!v12) {
    goto LABEL_47;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  unsigned int v14 = memchr(p_str, 90, v12);
  if (v14 && (std::string::size_type v15 = v14 - (unsigned char *)p_str, v14 - (unsigned char *)p_str != -1)
    || (v16 = memchr(p_str, 122, v12)) != 0 && (std::string::size_type v15 = v16 - (unsigned char *)p_str, v16 - (unsigned char *)p_str != -1))
  {
    std::string::basic_string(&v64, &__str, 0, v15, (std::allocator<char> *)&v58);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    int v17 = 0;
    std::string __str = v64;
    goto LABEL_28;
  }
  if (((char v26 = memchr(p_str, 43, v12)) == 0 || (v27 = v26 - (unsigned char *)p_str, v26 - (unsigned char *)p_str == -1))
    && ((CFNumberRef v28 = memchr(p_str, 45, v12)) == 0 || (v27 = v28 - (unsigned char *)p_str, v28 - (unsigned char *)p_str == -1))
    || v27 == v12 - 1)
  {
LABEL_47:
    long long v65 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v64.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v64.__r_.__value_.__r.__words[2]) = 1073741835;
    uint64_t v29 = ImsResult::operator<<<char [25]>((uint64_t)&v64, "missing time zone sign: ");
    uint64_t v30 = (const std::string *)ImsResult::operator<<<std::string>(v29, (uint64_t)&__str);
    ImsResult::ImsResult((ImsResult *)a3, v30);
    goto LABEL_48;
  }
  int v38 = p_str->__r_.__value_.__s.__data_[v27];
  memset(&v58, 0, sizeof(v58));
  std::string::basic_string(&v58, &__str, v27 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v57);
  uint64_t v39 = v59;
  for (uint64_t i = v60; i != v39; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  uint64_t v60 = v39;
  ims::tokenize(&v58, &v59, 0x3Au);
  std::__split_buffer<std::string>::pointer v41 = (const char *)v59;
  uint64_t v42 = v60 - v59;
  if (v60 - v59 == 48)
  {
    if (*(char *)(v59 + 23) < 0) {
      std::__split_buffer<std::string>::pointer v41 = *(const char **)v59;
    }
    int v43 = strtol(v41, 0, 10);
    unint64_t v44 = (const char *)(v59 + 24);
    if (*(char *)(v59 + 47) < 0) {
      unint64_t v44 = *(const char **)v44;
    }
    int v45 = strtol(v44, 0, 10);
    std::string::basic_string(&v64, &__str, 0, v27, (std::allocator<char> *)&v57);
    if (v38 == 43) {
      int v17 = 60 * (v45 + 60 * v43);
    }
    else {
      int v17 = -60 * (v45 + 60 * v43);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = v64;
  }
  else
  {
    long long v65 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v64.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v64.__r_.__value_.__r.__words[2]) = 1073741835;
    uint64_t v51 = ImsResult::operator<<<char [26]>((uint64_t)&v64, "invalid time zone offset ");
    uint64_t v52 = ImsResult::operator<<<std::string>(v51, (uint64_t)&v58);
    uint64_t v53 = ImsResult::operator<<<char [3]>(v52);
    unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((v60 - v59) >> 3);
    uint64_t v54 = ImsResult::operator<<<unsigned long>(v53);
    v55 = (const std::string *)ImsResult::operator<<<char [8]>(v54, " parts)");
    ImsResult::ImsResult((ImsResult *)a3, v55);
    ImsResult::~ImsResult((ImsResult *)&v64);
    int v17 = 0;
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  if (v42 != 48) {
    goto LABEL_49;
  }
LABEL_28:
  uint64_t v18 = v59;
  for (uint64_t j = v60; j != v18; j -= 24)
  {
    if (*(char *)(j - 1) < 0) {
      operator delete(*(void **)(j - 24));
    }
  }
  uint64_t v60 = v18;
  ims::tokenize(&__str, &v59, 0x3Au);
  long long v22 = (const char *)v59;
  if (v60 - v59 != 72)
  {
    long long v65 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v64.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v64.__r_.__value_.__r.__words[2]) = 1073741835;
    uint64_t v24 = ImsResult::operator<<<char [28]>((uint64_t)&v64, "not enough tokens in time: ");
    uint64_t v25 = (const std::string *)ImsResult::operator<<<std::string>(v24, (uint64_t)&__str);
    ImsResult::ImsResult((ImsResult *)a3, v25);
    goto LABEL_48;
  }
  if (*(char *)(v59 + 23) < 0) {
    long long v22 = *(const char **)v59;
  }
  *(_DWORD *)(a2 + 24) = strtoul(v22, 0, 10);
  long long v23 = (const char *)(v59 + 24);
  if (*(char *)(v59 + 47) < 0) {
    long long v23 = *(const char **)v23;
  }
  *(_DWORD *)(a2 + 20) = strtoul(v23, 0, 10);
  memset(&v64, 0, sizeof(v64));
  if (*(char *)(v59 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(v59 + 48), *(void *)(v59 + 56));
  }
  else {
    std::string v64 = *(std::string *)(v59 + 48);
  }
  char v31 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  std::string::size_type v32 = v64.__r_.__value_.__r.__words[0];
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v33 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v33 = v64.__r_.__value_.__l.__size_;
  }
  if (!v33)
  {
    int v36 = 0;
    goto LABEL_104;
  }
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v34 = &v64;
  }
  else {
    int v34 = (std::string *)v64.__r_.__value_.__r.__words[0];
  }
  long long v35 = memchr(v34, 46, v33);
  int v36 = 0;
  if (!v35) {
    goto LABEL_104;
  }
  std::string::size_type v37 = v35 - (unsigned char *)v34;
  if (v37 == -1) {
    goto LABEL_104;
  }
  if (v37 == v33 - 1)
  {
    int v36 = 0;
    goto LABEL_101;
  }
  memset(&v58, 0, sizeof(v58));
  std::string::basic_string(&v58, &v64, v37 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v57);
  std::string::size_type v46 = 0;
  int v36 = 0;
  std::string::size_type v47 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
  {
    unint64_t v48 = &v58;
  }
  else
  {
    std::string::size_type v47 = v58.__r_.__value_.__l.__size_;
    unint64_t v48 = (std::string *)v58.__r_.__value_.__r.__words[0];
  }
  while (1)
  {
    if (v46 >= v47)
    {
      int v50 = 0;
      goto LABEL_91;
    }
    if (v48->__r_.__value_.__s.__data_[v46] < 0) {
      break;
    }
    uint64_t v49 = v48->__r_.__value_.__s.__data_[v46];
    if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v49 + 60) & 0x400) == 0) {
      break;
    }
    int v50 = v49 - 48;
LABEL_91:
    int v36 = v50 + 10 * v36;
    if (++v46 == 3) {
      goto LABEL_99;
    }
  }
  int v36 = 0;
LABEL_99:
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
LABEL_101:
  std::string::basic_string(&v58, &v64, 0, v37, (std::allocator<char> *)&v57);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  std::string v64 = v58;
  char v31 = HIBYTE(v58.__r_.__value_.__r.__words[2]);
  std::string::size_type v32 = v58.__r_.__value_.__r.__words[0];
LABEL_104:
  if (v31 >= 0) {
    uint64_t v56 = &v64;
  }
  else {
    uint64_t v56 = (std::string *)v32;
  }
  *(_DWORD *)(a2 + 16) = strtoul((const char *)v56, 0, 10);
  *(_DWORD *)(a2 + 72) = v17;
  *(void *)a2 = timegm((tm *const)(a2 + 16));
  *(_DWORD *)(a2 + 8) = 1000 * v36;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
LABEL_49:
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v64);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
}

void sub_1C5610ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  a32 = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a32);
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [3]>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    operator new();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" (", 2);
  *(unsigned char *)(v2 + 17) = 0;
  return a1;
}

void sub_1C5610C04(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t bambi::XmlTreeItem::XmlTreeItem(uint64_t a1, long long *a2, long long *a3)
{
  *(void *)a1 = &unk_1F20E5258;
  *(void *)(a1 + 8) = 0;
  unint64_t v5 = (std::__split_buffer<std::pair<std::string, std::string>>::pointer *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v6;
  }
  if (a3)
  {
    char v7 = *(std::pair<std::string, std::string> **)(a1 + 16);
    if ((unint64_t)v7 >= *(void *)(a1 + 24))
    {
      std::__split_buffer<std::pair<std::string, std::string>>::pointer v8 = std::vector<bambi::XmlTreeNs>::__push_back_slow_path<bambi::XmlTreeNs const&>(v5, a3);
    }
    else
    {
      std::construct_at[abi:ne180100]<bambi::XmlTreeNs,bambi::XmlTreeNs const&,bambi::XmlTreeNs*>(*(std::string **)(a1 + 16), a3);
      std::__split_buffer<std::pair<std::string, std::string>>::pointer v8 = v7 + 1;
      *(void *)(a1 + 16) = v7 + 1;
    }
    *(void *)(a1 + 16) = v8;
  }
  return a1;
}

void sub_1C5610CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void bambi::XmlTreeItem::~XmlTreeItem(void **this)
{
  *this = &unk_1F20E5258;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  uint64_t v2 = this + 1;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void bambi::XmlTreeItem::makeNode(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_1C5610E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  size_t v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

double bambi::XmlTreeItem::encode@<D0>(bambi::XmlTreeItem *this@<X0>, int a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  *__xmlIndentTreeOutput() = a3;
  char v7 = xmlNewDoc((const xmlChar *)"1.0");
  (*(void (**)(std::string *__return_ptr, bambi::XmlTreeItem *))(*(void *)this + 16))(&v28, this);
  xmlDocSetRootElement(v7, *(xmlNodePtr *)v28.__r_.__value_.__l.__data_);
  if (v28.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v28.__r_.__value_.__l.__size_);
  }
  mem = 0;
  int size = 0;
  xmlDocDumpFormatMemory(v7, &mem, &size, 1);
  if (mem && size) {
    std::string::__assign_external(a4, (const std::string::value_type *)mem, size);
  }
  xmlFreeDoc(v7);
  ((void (*)(xmlChar *))*MEMORY[0x1E4FBA9D0])(mem);
  if (a2)
  {
    char v9 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
    uint64_t v10 = v9 >= 0 ? HIBYTE(a4->__r_.__value_.__r.__words[2]) : a4->__r_.__value_.__l.__size_;
    uint64_t v11 = v9 >= 0 ? a4 : (std::string *)a4->__r_.__value_.__r.__words[0];
    if (v10 >= 13)
    {
      size_t v12 = (char *)v11 + v10;
      uint64_t v13 = v10;
      unsigned int v14 = v11;
      do
      {
        std::string::size_type v15 = (char *)memchr(v14, 60, v13 - 12);
        if (!v15) {
          break;
        }
        if (*(void *)v15 == 0x6576206C6D783F3CLL && *(void *)(v15 + 5) == 0x6E6F697372657620)
        {
          if (v15 != v12 && v15 - (char *)v11 != -1)
          {
            int v17 = v11;
            do
            {
              if (v10 == 1) {
                break;
              }
              uint64_t v18 = (char *)memchr(v17, 63, v10 - 1);
              if (!v18) {
                break;
              }
              if (*(_WORD *)v18 == 15935) {
                goto LABEL_30;
              }
              int v17 = (std::string *)(v18 + 1);
              uint64_t v10 = v12 - (char *)v17;
            }
            while (v12 - (char *)v17 > 1);
            uint64_t v18 = v12;
LABEL_30:
            if (v18 == v12) {
              std::string::size_type v19 = -1;
            }
            else {
              std::string::size_type v19 = v18 - (char *)v11;
            }
            std::string::basic_string(&v28, a4, v19, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
            if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0) {
              operator delete(a4->__r_.__value_.__l.__data_);
            }
            *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
            unint64_t v20 = v28.__r_.__value_.__r.__words[2];
            a4->__r_.__value_.__r.__words[2] = v28.__r_.__value_.__r.__words[2];
            int64_t v21 = HIBYTE(v20);
            if ((v21 & 0x80u) == 0) {
              int64_t v22 = v21;
            }
            else {
              int64_t v22 = a4->__r_.__value_.__l.__size_;
            }
            if ((v21 & 0x80u) == 0) {
              long long v23 = a4;
            }
            else {
              long long v23 = (std::string *)a4->__r_.__value_.__r.__words[0];
            }
            uint64_t v24 = (char *)v23 + v22;
            if (v22 >= 1)
            {
              uint64_t v25 = v23;
              do
              {
                char v26 = (char *)memchr(v25, 60, v22);
                if (!v26) {
                  break;
                }
                if (*v26 == 60) {
                  goto LABEL_47;
                }
                uint64_t v25 = (std::string *)(v26 + 1);
                int64_t v22 = v24 - (char *)v25;
              }
              while (v24 - (char *)v25 > 0);
            }
            char v26 = v24;
LABEL_47:
            if (v26 == v24) {
              std::string::size_type v27 = -1;
            }
            else {
              std::string::size_type v27 = v26 - (char *)v23;
            }
            std::string::basic_string(&v28, a4, v27, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
            if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0) {
              operator delete(a4->__r_.__value_.__l.__data_);
            }
            double result = *(double *)&v28.__r_.__value_.__l.__data_;
            *a4 = v28;
          }
          return result;
        }
        unsigned int v14 = (std::string *)(v15 + 1);
        uint64_t v13 = v12 - (char *)v14;
      }
      while (v12 - (char *)v14 >= 13);
    }
  }
  return result;
}

void sub_1C5611164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(exception_object);
}

void bambi::XmlTreeItem::setName(uint64_t a1, xmlNode ***a2, uint64_t a3)
{
  int v3 = **a2;
  if (*(char *)(a3 + 23) >= 0) {
    int v4 = (const xmlChar *)a3;
  }
  else {
    int v4 = *(const xmlChar **)a3;
  }
  xmlNodeSetName(v3, v4);
}

void bambi::XmlTreeItem::setNs(uint64_t a1, xmlNodePtr **a2, uint64_t *a3)
{
}

void bambi::setNsForNode(uint64_t a1, uint64_t a2, xmlNodePtr node)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    long long v6 = 0;
    p_next = 0;
    do
    {
      if (*(char *)(v5 + 47) < 0)
      {
        if (*(void *)(v5 + 32)) {
          std::__split_buffer<std::pair<std::string, std::string>>::pointer v8 = *(const xmlChar **)(v5 + 24);
        }
        else {
          std::__split_buffer<std::pair<std::string, std::string>>::pointer v8 = 0;
        }
      }
      else if (*(unsigned char *)(v5 + 47))
      {
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v8 = (const xmlChar *)(v5 + 24);
      }
      else
      {
        std::__split_buffer<std::pair<std::string, std::string>>::pointer v8 = 0;
      }
      if (*(char *)(v5 + 23) < 0)
      {
        if (*(void *)(v5 + 8)) {
          char v9 = *(const xmlChar **)v5;
        }
        else {
          char v9 = 0;
        }
      }
      else if (*(unsigned char *)(v5 + 23))
      {
        char v9 = (const xmlChar *)v5;
      }
      else
      {
        char v9 = 0;
      }
      xmlNsPtr v10 = xmlNewNs(node, v9, v8);
      uint64_t v11 = v10;
      if (p_next)
      {
        void *p_next = v10;
        uint64_t v11 = v6;
      }
      v5 += 48;
      long long v6 = v11;
      p_next = &v10->next;
    }
    while (v5 != a2);
    if (v11)
    {
      xmlSetNs(node, v11);
    }
  }
}

xmlAttrPtr bambi::XmlTreeItem::setProperty(uint64_t a1, xmlNode ***a2, uint64_t a3, uint64_t a4)
{
  int v4 = **a2;
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v5 = (const xmlChar *)a3;
  }
  else {
    uint64_t v5 = *(const xmlChar **)a3;
  }
  if (*(char *)(a4 + 23) >= 0) {
    long long v6 = (const xmlChar *)a4;
  }
  else {
    long long v6 = *(const xmlChar **)a4;
  }
  return xmlNewProp(v4, v5, v6);
}

xmlNodePtr bambi::XmlTreeItem::addChild(uint64_t a1, xmlNodePtr **a2, xmlNodePtr **a3)
{
  if (*a3) {
    return xmlAddChild(**a2, **a3);
  }
  return result;
}

void bambi::XmlTreeItem::addChild(uint64_t a1, uint64_t *a2, uint64_t a3, long long *a4)
{
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v10 = 0;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v11 = 0;
  uint64_t v12 = 0;
  if (a4) {
    std::__split_buffer<std::pair<std::string, std::string>>::pointer v11 = std::vector<bambi::XmlTreeNs>::__push_back_slow_path<bambi::XmlTreeNs const&>(&v10, a4);
  }
  char v7 = (std::__shared_weak_count *)a2[1];
  uint64_t v8 = *a2;
  char v9 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t, std::__split_buffer<std::pair<std::string, std::string>>::pointer *))(*(void *)a1 + 72))(a1, &v8, a3, &v10);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v13 = &v10;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

void sub_1C56113D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void bambi::XmlTreeItem::addChild(uint64_t a1, xmlNodePtr **a2, uint64_t a3, uint64_t *a4)
{
  if (*(char *)(a3 + 23) >= 0) {
    long long v6 = (const xmlChar *)a3;
  }
  else {
    long long v6 = *(const xmlChar **)a3;
  }
  char v7 = xmlNewNode(0, v6);
  bambi::setNsForNode(*a4, a4[1], v7);
  xmlAddChild(**a2, v7);
  operator new();
}

void bambi::XmlTreeItem::addTextChild(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, long long *a5)
{
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v12 = 0;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v13 = 0;
  uint64_t v14 = 0;
  if (a5) {
    std::__split_buffer<std::pair<std::string, std::string>>::pointer v13 = std::vector<bambi::XmlTreeNs>::__push_back_slow_path<bambi::XmlTreeNs const&>(&v12, a5);
  }
  char v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v10 = *a2;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v11 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, std::__split_buffer<std::pair<std::string, std::string>>::pointer *))(*(void *)a1 + 88))(a1, &v10, a3, a4, &v12);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::string::size_type v15 = &v12;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_1C5611578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void bambi::XmlTreeItem::addTextChild(uint64_t a1, xmlNodePtr **a2, const xmlChar *a3, const xmlChar *a4, uint64_t *a5)
{
  if (*((char *)a3 + 23) < 0) {
    a3 = *(const xmlChar **)a3;
  }
  if (*((char *)a4 + 23) < 0) {
    a4 = *(const xmlChar **)a4;
  }
  long long v6 = xmlNewTextChild(**a2, 0, a3, a4);
  bambi::setNsForNode(*a5, a5[1], v6);
  operator new();
}

uint64_t bambi::XmlTreeItem::addUint32TextChild(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = 0;
  long long v18 = 0u;
  memset(v19, 0, sizeof(v19));
  *(_OWORD *)uint64_t v16 = 0u;
  long long v17 = 0u;
  memset(v15, 0, sizeof(v15));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  std::ostream::operator<<();
  char v9 = (std::__shared_weak_count *)a2[1];
  uint64_t v13 = *a2;
  uint64_t v14 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15 + 8, __p);
  (*(void (**)(uint64_t, uint64_t *, uint64_t, void **, uint64_t))(*(void *)a1 + 88))(a1, &v13, a3, __p, a5);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  *(void *)&v15[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v15 + *(void *)(*(void *)&v15[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v15[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v19);
}

void sub_1C561183C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, char a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void bambi::XmlTreeItem::addText(int a1, xmlNode ***a2, xmlChar *content)
{
  if ((char)content[23] < 0)
  {
    if (!*((void *)content + 1)) {
      return;
    }
    content = *(xmlChar **)content;
  }
  else if (!content[23])
  {
    return;
  }
  int v4 = xmlNewText(content);
  uint64_t v5 = **a2;
  xmlAddChild(v5, v4);
}

std::__split_buffer<std::pair<std::string, std::string>>::pointer std::vector<bambi::XmlTreeNs>::__push_back_slow_path<bambi::XmlTreeNs const&>(std::__split_buffer<std::pair<std::string, std::string>>::pointer *a1, long long *a2)
{
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[2] - (char *)v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  v21.__end_cap_.__value_ = (std::allocator<std::pair<std::string, std::string>> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  v21.__first_ = v10;
  v21.__begin_ = v10 + v4;
  v21.__end_ = v21.__begin_;
  v21.__end_cap_.__value_ = &v10[v9];
  std::construct_at[abi:ne180100]<bambi::XmlTreeNs,bambi::XmlTreeNs const&,bambi::XmlTreeNs*>(&v21.__begin_->first, a2);
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v12 = *a1;
  unint64_t v11 = (unint64_t)a1[1];
  std::__split_buffer<std::pair<std::string, std::string>>::pointer begin = v21.__begin_;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v13 = v21.__begin_;
  if ((std::__split_buffer<std::pair<std::string, std::string>>::pointer)v11 == *a1)
  {
    int64x2_t v17 = vdupq_n_s64(v11);
  }
  else
  {
    do
    {
      long long v15 = *(_OWORD *)(v11 - 48);
      begin[-1].first.__r_.__value_.__r.__words[2] = *(void *)(v11 - 32);
      *(_OWORD *)&begin[-1].first.__r_.__value_.__l.__data_ = v15;
      *(void *)(v11 - 40) = 0;
      *(void *)(v11 - 32) = 0;
      *(void *)(v11 - 48) = 0;
      long long v16 = *(_OWORD *)(v11 - 24);
      begin[-1].second.__r_.__value_.__r.__words[2] = *(void *)(v11 - 8);
      *(_OWORD *)&begin[-1].second.__r_.__value_.__l.__data_ = v16;
      --begin;
      *(void *)(v11 - 16) = 0;
      *(void *)(v11 - 8) = 0;
      *(void *)(v11 - 24) = 0;
      v11 -= 48;
    }
    while ((std::__split_buffer<std::pair<std::string, std::string>>::pointer)v11 != v12);
    int64x2_t v17 = *(int64x2_t *)a1;
  }
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v18 = v13 + 1;
  *a1 = begin;
  a1[1] = v13 + 1;
  *(int64x2_t *)&v21.__begin_ = v17;
  std::string::size_type v19 = a1[2];
  a1[2] = v21.__end_cap_.__value_;
  v21.__end_cap_.__value_ = v19;
  v21.__first_ = (std::__split_buffer<std::pair<std::string, std::string>>::pointer)v17.i64[0];
  std::__split_buffer<bambi::XmlTreeNs>::~__split_buffer(&v21);
  return v18;
}

void sub_1C5611A40(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

std::string *std::construct_at[abi:ne180100]<bambi::XmlTreeNs,bambi::XmlTreeNs const&,bambi::XmlTreeNs*>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  unint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1C5611AD0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<bambi::XmlTreeNode>::shared_ptr[abi:ne180100]<bambi::XmlTreeNode,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5611B54(_Unwind_Exception *exception_object)
{
  if (v1) {
    MEMORY[0x1C878E320](v1, 0x20C4093837F09);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<bambi::XmlTreeNode *,std::shared_ptr<bambi::XmlTreeNode>::__shared_ptr_default_delete<bambi::XmlTreeNode,bambi::XmlTreeNode>,std::allocator<bambi::XmlTreeNode>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<bambi::XmlTreeNode *,std::shared_ptr<bambi::XmlTreeNode>::__shared_ptr_default_delete<bambi::XmlTreeNode,bambi::XmlTreeNode>,std::allocator<bambi::XmlTreeNode>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    JUMPOUT(0x1C878E320);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<bambi::XmlTreeNode *,std::shared_ptr<bambi::XmlTreeNode>::__shared_ptr_default_delete<bambi::XmlTreeNode,bambi::XmlTreeNode>,std::allocator<bambi::XmlTreeNode>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void BambiClientStatus::~BambiClientStatus(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t operator<<(uint64_t a1, const std::string *a2)
{
  LoggableString::LoggableString(&__p, a2);
  (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 40))(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C5611CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::BambiClient(BambiClient *this)
{
  *(void *)this = &unk_1F20E5668;
  uint64_t v2 = (char *)this + 8;
  *((void *)this + 1) = &unk_1F20B2FA8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi");
  ImsLogContainer::ImsLogContainer((uint64_t)this + 16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *(void *)this = &unk_1F20E5358;
  *((void *)this + 1) = &unk_1F20E5498;
  *((void *)this + 2) = &unk_1F20E54C8;
  *((void *)this + 15) = &unk_1F20E5528;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 16) = &unk_1F20E5560;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((_DWORD *)this + 58) = 0x10000;
  *((void *)this + 30) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((void *)this + 38) = 0;
  *((_DWORD *)this + 78) = 1065353216;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_DWORD *)this + 88) = 1065353216;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 45) = (char *)this + 368;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_DWORD *)this + 104) = 1065353216;
  SipTimerContainer::SipTimerContainer((BambiClient *)((char *)this + 424));
  *((void *)this + 73) = 0;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *((unsigned char *)this + 688) = 0;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 41) = 0u;
  *((unsigned char *)this + 672) = 0;
  *((_DWORD *)this + 176) = 0;
  *((void *)this + 89) = this;
  *((unsigned char *)this + 720) = 1;
  *((void *)this + 91) = 0;
  *((_OWORD *)this + 46) = 0u;
  *((void *)this + 87) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v3 = (std::__shared_weak_count *)*((void *)this + 20);
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *((void *)this + 28) = 0;
  *((void *)this + 66) = v2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)((char *)this + 472), (const std::string *)this + 1);
  std::string::operator=((std::string *)((char *)this + 496), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_1C56122E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)(v25 + 728);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  char v31 = *(std::__shared_weak_count **)(v25 + 664);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::string::size_type v32 = *(std::__shared_weak_count **)(v25 + 648);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  size_t v33 = *(std::__shared_weak_count **)(v25 + 624);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (*(char *)(v25 + 591) < 0) {
    operator delete(*v29);
  }
  SipTimerContainer::~SipTimerContainer(v28);
  std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::~__hash_table(v25 + 384);
  PowerAssertionLock::~PowerAssertionLock((PowerAssertionLock **)(v25 + 360));
  std::__hash_table<std::shared_ptr<BambiCall>,std::hash<std::shared_ptr<BambiCall>>,std::equal_to<std::shared_ptr<BambiCall>>,std::allocator<std::shared_ptr<BambiCall>>>::~__hash_table(v25 + 320);
  std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::~__hash_table(v25 + 280);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::~__hash_table(v27);
  int v34 = *(std::__shared_weak_count **)(v25 + 176);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  long long v35 = *(std::__shared_weak_count **)(v25 + 160);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  int v36 = *(std::__shared_weak_count **)(v25 + 144);
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  ImsLogContainer::~ImsLogContainer(v26);
  _Unwind_Resume(a1);
}

void ___ZN11BambiClientC2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = v1[2];
  v1 += 2;
  uint64_t v3 = (*(uint64_t (**)(void *))(v2 + 64))(v1);
  (*(void (**)(void *, uint64_t))(*v1 + 16))(v1, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"system clock changed", 20);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  for (uint64_t i = (long long *)v1[23]; i; uint64_t i = *(long long **)i)
  {
    uint64_t v10 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v9 = 0u;
    std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, i + 1);
    if (*((void *)&v9 + 1))
    {
      uint64_t v5 = *(void *)(*((void *)&v9 + 1) + 144);
      long long v6 = *(int8x8_t **)(v5 + 248);
      uint64_t v7 = *(std::__shared_weak_count **)(v5 + 256);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SipRegistrationClient::systemClockDidChange(v6);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (SBYTE7(v9) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C56125A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  int64x2_t v17 = v16;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::~BambiClient(BambiClient *this)
{
  *(void *)this = &unk_1F20E5358;
  *((void *)this + 1) = &unk_1F20E5498;
  *((void *)this + 2) = &unk_1F20E54C8;
  *((void *)this + 15) = &unk_1F20E5528;
  *((void *)this + 16) = &unk_1F20E5560;
  *(void *)(ims::logger(this) + 440) = 0;
  (*(void (**)(void))(**((void **)this + 85) + 88))(*((void *)this + 85));
  SipTimerContainer::cancelAllTimers((BambiClient *)((char *)this + 424));
  uint64_t v2 = *((void *)this + 87);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 88))(v2);
  }
  uint64_t v3 = *((void *)this + 85);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 76);
  if (v4)
  {
    ImsSleepWakeMonitor::stop(*((io_object_t **)this + 76));
    MEMORY[0x1C878E320](v4, 0x1020C40D270B852);
  }
  for (uint64_t i = (long long *)*((void *)this + 25); i; uint64_t i = *(long long **)i)
  {
    long long v16 = 0;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)long long v15 = 0u;
    std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, i + 1);
    SipStack::destroy(v15[1]);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (SHIBYTE(v15[0]) < 0) {
      operator delete(__p[0]);
    }
  }
  long long v6 = (void **)*((void *)this + 74);
  if (v6)
  {
    SipStackConfig::~SipStackConfig(v6);
    MEMORY[0x1C878E320]();
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 83);
  *((_OWORD *)this + 41) = 0u;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  ImsNotificationCenter::removeObserver((uint64_t)this + 568);
  __p[0] = (char *)this + 728;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 83);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  long long v9 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 78);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (*((char *)this + 591) < 0) {
    operator delete(*((void **)this + 71));
  }
  SipTimerContainer::~SipTimerContainer((BambiClient *)((char *)this + 424));
  std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::~__hash_table((uint64_t)this + 384);
  PowerAssertionLock::~PowerAssertionLock((PowerAssertionLock **)this + 45);
  std::__hash_table<std::shared_ptr<BambiCall>,std::hash<std::shared_ptr<BambiCall>>,std::equal_to<std::shared_ptr<BambiCall>>,std::allocator<std::shared_ptr<BambiCall>>>::~__hash_table((uint64_t)this + 320);
  std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::~__hash_table((uint64_t)this + 280);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::~__hash_table((uint64_t)this + 184);
  unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v12 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__split_buffer<std::pair<std::string, std::string>>::pointer v13 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  *((void *)this + 2) = &unk_1F20C9CA0;
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t vars8;

  BambiClient::~BambiClient(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'BambiClient::~BambiClient(BambiClient *this)
{
}

{
  BambiClient::~BambiClient((BambiClient *)((char *)this - 16));
}

{
  BambiClient::~BambiClient((BambiClient *)((char *)this - 120));
}

{
  BambiClient::~BambiClient((BambiClient *)((char *)this - 128));
}

{
  uint64_t vars8;

  BambiClient::~BambiClient((BambiClient *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiClient::~BambiClient((BambiClient *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiClient::~BambiClient((BambiClient *)((char *)this - 120));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiClient::~BambiClient((BambiClient *)((char *)this - 128));
  JUMPOUT(0x1C878E320);
}

uint64_t BambiClient::createNewStack@<X0>(uint64_t *a1@<X0>, const std::string *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*a1 + 192))(a1);
  if (!*a4) {
    SipStack::create(a1[85], (uint64_t)a1, a3, a2, (SipStack **)&v9);
  }
  return result;
}

void sub_1C5612B28(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::invalidateStack(void *a1, unsigned __int8 *a2)
{
  uint64_t v4 = a1 + 2;
  uint64_t v5 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
  (*(void (**)(void *, uint64_t))(*v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Invalidate stack ", 17);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v5 + 32))(v5, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  long long v6 = v4 + 21;
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(v6, a2);
  if (!v7) {
    return;
  }
  unint64_t v8 = v7;
  uint64_t v9 = *((void *)v7 + 5);
  uint64_t v10 = (std::__shared_weak_count *)*((void *)v8 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v9) {
    goto LABEL_7;
  }
  *(unsigned char *)(v9 + 4290) = 1;
  if (*(_DWORD *)(v9 + 200) == 2)
  {
    SipStack::deinitialize((SipStack *)v9, 0, 1);
LABEL_7:
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    return;
  }
  SipStack::destroy((SipStack *)v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  int8x8_t v11 = (int8x8_t)a1[24];
  unint64_t v12 = *((void *)v8 + 1);
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v11);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    if (v12 >= *(void *)&v11) {
      v12 %= *(void *)&v11;
    }
  }
  else
  {
    v12 &= *(void *)&v11 - 1;
  }
  uint64_t v14 = *(unsigned __int8 **)(*v6 + 8 * v12);
  do
  {
    long long v15 = v14;
    uint64_t v14 = *(unsigned __int8 **)v14;
  }
  while (v14 != v8);
  if (v15 == (unsigned __int8 *)(a1 + 25)) {
    goto LABEL_30;
  }
  unint64_t v16 = *((void *)v15 + 1);
  if (v13.u32[0] > 1uLL)
  {
    if (v16 >= *(void *)&v11) {
      v16 %= *(void *)&v11;
    }
  }
  else
  {
    v16 &= *(void *)&v11 - 1;
  }
  if (v16 != v12)
  {
LABEL_30:
    if (!*(void *)v8) {
      goto LABEL_31;
    }
    unint64_t v17 = *(void *)(*(void *)v8 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v17 >= *(void *)&v11) {
        v17 %= *(void *)&v11;
      }
    }
    else
    {
      v17 &= *(void *)&v11 - 1;
    }
    if (v17 != v12) {
LABEL_31:
    }
      *(void *)(*v6 + 8 * v12) = 0;
  }
  uint64_t v18 = *(void *)v8;
  if (*(void *)v8)
  {
    unint64_t v19 = *(void *)(v18 + 8);
    if (v13.u32[0] > 1uLL)
    {
      if (v19 >= *(void *)&v11) {
        v19 %= *(void *)&v11;
      }
    }
    else
    {
      v19 &= *(void *)&v11 - 1;
    }
    if (v19 != v12)
    {
      *(void *)(*v6 + 8 * v19) = v15;
      uint64_t v18 = *(void *)v8;
    }
  }
  *(void *)long long v15 = v18;
  *(void *)unint64_t v8 = 0;
  --a1[26];
  v20[0] = v8;
  v20[1] = a1 + 25;
  char v21 = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>>>>::reset[abi:ne180100]((uint64_t)v20);
}

void sub_1C5612E20(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::notifyCallsOfAccessNetworkChange(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(void *)(a3 + 8)) {
      goto LABEL_23;
    }
  }
  else if (!*(unsigned char *)(a3 + 23))
  {
    goto LABEL_23;
  }
  if ((*(char *)(a3 + 47) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a3 + 47)) {
      goto LABEL_7;
    }
LABEL_23:
    uint64_t v14 = a1 + 2;
    uint64_t v15 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
    (*(void (**)(void *, uint64_t))(*v14 + 16))(v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"notifyCallsOfAccessNetworkChange: no current access network", 59);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    return;
  }
  if (!*(void *)(a3 + 32)) {
    goto LABEL_23;
  }
LABEL_7:
  for (uint64_t i = (uint64_t **)a1[42]; i; uint64_t i = (uint64_t **)*i)
  {
    uint64_t v9 = i[2];
    if (v9)
    {
      uint64_t v10 = (std::__shared_weak_count *)v9[46];
      if (v10)
      {
        int8x8_t v11 = std::__shared_weak_count::lock(v10);
        if (v11) {
          uint64_t v12 = v9[45];
        }
        else {
          uint64_t v12 = 0;
        }
      }
      else
      {
        uint64_t v12 = 0;
        int8x8_t v11 = 0;
      }
      (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*a1 + 192))(&v17, a1, a2);
      uint64_t v13 = v17;
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      if (v12 == v13)
      {
        BambiCall::handleAccessNetworkChange((BambiCall *)i[2], (const ims::AccessNetwork *)a3, a4, (uint64_t)v16);
        ImsResult::~ImsResult((ImsResult *)v16);
      }
    }
  }
}

void sub_1C561301C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::setDelegatesForStack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  std::string::size_type v32 = 0;
  size_t v33 = 0;
  (*(void (**)(void **__return_ptr))(*(void *)a1 + 192))(&v32);
  uint64_t v14 = v32;
  if (!v32) {
    goto LABEL_29;
  }
  uint64_t v15 = (void *)v32[18];
  if (v15)
  {
    if ((a8 & 1) == 0)
    {
      uint64_t v17 = v15[31];
      unint64_t v16 = (std::__shared_weak_count *)v15[32];
      if (v16)
      {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        *(void *)(v17 + 456) = a3;
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        uint64_t v14 = v32;
        uint64_t v15 = (void *)v32[18];
      }
      else
      {
        *(void *)(v17 + 456) = a3;
      }
      uint64_t v19 = v15[33];
      uint64_t v18 = (std::__shared_weak_count *)v15[34];
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v20 = &qword_1EBBDAF60;
        if (a4) {
          uint64_t v20 = a4;
        }
        *(void *)(v19 + 216) = v20;
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        uint64_t v14 = v32;
      }
      else
      {
        char v21 = &qword_1EBBDAF60;
        if (a4) {
          char v21 = a4;
        }
        *(void *)(v19 + 216) = v21;
      }
    }
    int64_t v22 = (void *)v14[18];
    uint64_t v24 = v22[24];
    long long v23 = (std::__shared_weak_count *)v22[25];
    if (v23)
    {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)(v24 + 152) = a6;
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      uint64_t v14 = v32;
      int64_t v22 = (void *)v32[18];
    }
    else
    {
      *(void *)(v24 + 152) = a6;
    }
    uint64_t v26 = v22[26];
    uint64_t v25 = (std::__shared_weak_count *)v22[27];
    if (v25)
    {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      uint64_t v14 = v32;
      if (!v26) {
        goto LABEL_23;
      }
      uint64_t v27 = v32[18];
      uint64_t v26 = *(void *)(v27 + 208);
      std::string v28 = *(std::__shared_weak_count **)(v27 + 216);
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        *(void *)(v26 + 184) = a7;
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        uint64_t v14 = v32;
        goto LABEL_23;
      }
    }
    else if (!v26)
    {
      goto LABEL_23;
    }
    *(void *)(v26 + 184) = a7;
  }
LABEL_23:
  uint64_t v30 = v14[20];
  uint64_t v29 = (std::__shared_weak_count *)v14[21];
  if (v29)
  {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    if (!v30) {
      goto LABEL_29;
    }
    uint64_t v30 = v32[20];
    char v31 = (std::__shared_weak_count *)v32[21];
    if (v31)
    {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)(v30 + 264) = a5;
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      goto LABEL_29;
    }
  }
  else if (!v30)
  {
    goto LABEL_29;
  }
  *(void *)(v30 + 264) = a5;
LABEL_29:
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
}

uint64_t BambiClient::initializeStack(void *a1, unsigned __int8 *a2, const SipStackConfig *a3)
{
  std::string::size_type v46 = 0;
  std::string::size_type v47 = 0;
  (*(void (**)(SipStack **__return_ptr))(*a1 + 192))(&v46);
  if (!v46)
  {
    uint64_t v11 = a1[2];
    uint64_t v10 = a1 + 2;
    uint64_t v12 = (*(uint64_t (**)(void *))(v11 + 56))(v10);
    (*(void (**)(void *, uint64_t))(*v10 + 16))(v10, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Unable to initialize invalid SIP stack ", 39);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v12 + 32))(v12, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v13 = 0;
    *(unsigned char *)(v12 + 17) = 0;
    goto LABEL_47;
  }
  if (*(unsigned char *)(*((void *)v46 + 18) + 672))
  {
    uint64_t v6 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
    (*(void (**)(void *, uint64_t))(a1[2] + 16))(a1 + 2, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Thumper is enabled for Stack: ", 30);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v6 + 32))(v6, a2);
    uint64_t v7 = (ims *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    unint64_t v8 = (void *)ims::logger(v7);
    int v9 = 3;
  }
  else
  {
    uint64_t v14 = a1 + 2;
    uint64_t v15 = *(uint64_t (**)(void *))(a1[2] + 64);
    if (*((unsigned char *)v46 + 176))
    {
      uint64_t v16 = v15(a1 + 2);
      (*(void (**)(void *, uint64_t))(*v14 + 16))(a1 + 2, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Stack ", 6);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v16 + 32))(v16, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" is an emergency stack", 22);
      *(unsigned char *)(v16 + 17) = 0;
      uint64_t v17 = (ims *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      unint64_t v8 = (void *)ims::logger(v17);
      int v9 = 0;
    }
    else
    {
      uint64_t v18 = v15(a1 + 2);
      (*(void (**)(void *, uint64_t))(*v14 + 16))(a1 + 2, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Stack ", 6);
      *(unsigned char *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v18 + 32))(v18, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" is a normal stack", 18);
      *(unsigned char *)(v18 + 17) = 0;
      uint64_t v19 = (ims *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v18 + 17) = 0;
      unint64_t v8 = (void *)ims::logger(v19);
      int v9 = 1;
    }
  }
  ImsLogger::addStackToLogTagMap(v8, a2, v9);
  SipStack::initialize(v46, a3);
  unint64_t v44 = v46;
  int v45 = v47;
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v20 = SDPSession::initializeCarrierTemplateSDP((uint64_t)&v44);
  char v21 = (ims *)v45;
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if ((v20 & 1) == 0) {
    goto LABEL_46;
  }
  uint64_t v22 = a1[19];
  if (!v22)
  {
    uint64_t v26 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
    (*(void (**)(void *, uint64_t))(a1[2] + 16))(a1 + 2, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"starting RTPManager with stack: ", 32);
    *(unsigned char *)(v26 + 17) = 0;
    int v27 = *((_DWORD *)a3 + 508);
    std::string v28 = "Undefined RTP stack";
    if (v27 == 2) {
      std::string v28 = "kRTPStackTypeBaseband";
    }
    if (v27 == 1) {
      uint64_t v29 = "kRTPStackTypeAVC";
    }
    else {
      uint64_t v29 = (char *)v28;
    }
    std::string::basic_string[abi:ne180100]<0>(&object, v29);
    LoggableString::LoggableString(&__p, &object);
    (*(void (**)(uint64_t, std::string *))(*(void *)v26 + 40))(v26, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v26 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(object.__r_.__value_.__l.__data_);
    }
    uint64_t v30 = (std::__shared_weak_count *)a1[18];
    if (!v30 || (std::string::size_type v31 = a1[17], (v32 = std::__shared_weak_count::lock(v30)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    size_t v33 = v32;
    int v34 = sImsDispatchQueue;
    if (sImsDispatchQueue)
    {
      object.__r_.__value_.__r.__words[0] = sImsDispatchQueue;
    }
    else
    {
      int v34 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v34;
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
      if (!v34) {
        goto LABEL_34;
      }
    }
    dispatch_retain(v34);
LABEL_34:
    int v36 = (std::__shared_weak_count *)operator new(0x1F0uLL);
    v36->__shared_owners_ = 0;
    v36->__shared_weak_owners_ = 0;
    v36->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E57A8;
    std::string::size_type v37 = v36 + 1;
    __p.__r_.__value_.__r.__words[0] = v31;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
    atomic_fetch_add_explicit(&v33->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    RTPManager::RTPManager((uint64_t)&v36[1], &__p, (dispatch_object_t *)&object);
    std::__shared_weak_count::__release_weak(v33);
    shared_weak_owners = (std::__shared_weak_count *)v36[1].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1)
      {
LABEL_39:
        uint64_t v39 = (std::__shared_weak_count *)a1[20];
        a1[19] = v37;
        a1[20] = v36;
        if (v39) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v39);
        }
        if (object.__r_.__value_.__r.__words[0]) {
          dispatch_release((dispatch_object_t)object.__r_.__value_.__l.__data_);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        char v21 = (ims *)(*(uint64_t (**)(void, unsigned __int8 *, void, void, void))(*(void *)a1[19]
                                                                                                  + 16))(a1[19], a2, *((unsigned int *)v46 + 560), *((unsigned __int8 *)v46 + 176), a1[30]);
        goto LABEL_44;
      }
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v36[1].__shared_owners_ = (uint64_t)v37;
      v36[1].__shared_weak_owners_ = (uint64_t)v36;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    else
    {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v36[1].__shared_owners_ = (uint64_t)v37;
      v36[1].__shared_weak_owners_ = (uint64_t)v36;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    goto LABEL_39;
  }
  int v23 = *((_DWORD *)v46 + 560);
  uint64_t v24 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v22 + 312, (void **)a2);
  if ((void **)(v22 + 320) == v24) {
    int v25 = 0;
  }
  else {
    int v25 = *((_DWORD *)v24 + 14);
  }
  if (v23 == v25) {
    goto LABEL_45;
  }
  uint64_t v35 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
  (*(void (**)(void *, uint64_t))(a1[2] + 16))(a1 + 2, v35);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"media config has changed, re-initializing RTPManager", 52);
  *(unsigned char *)(v35 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v35 + 17) = 0;
  char v21 = (ims *)(*(uint64_t (**)(void, unsigned __int8 *, void, void, void))(*(void *)a1[19] + 16))(a1[19], a2, *((unsigned int *)v46 + 560), *((unsigned __int8 *)v46 + 176), a1[30]);
LABEL_44:
  if (v21)
  {
LABEL_45:
    SipStack::initializeMedia(v46);
    uint64_t v13 = 1;
    goto LABEL_47;
  }
LABEL_46:
  uint64_t v40 = ims::logger(v21);
  ImsLogger::removeStackFromLogTagMap(v40, a2);
  uint64_t v13 = 0;
LABEL_47:
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  return v13;
}

void sub_1C5613A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count::__release_weak(v24);
  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v27);
  if (object) {
    dispatch_release(object);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  _Unwind_Resume(a1);
}

uint64_t BambiClient::initializeLazuliStack(void *a1, unsigned __int8 *a2, const SipStackConfig *a3)
{
  char v21 = 0;
  uint64_t v22 = 0;
  (*(void (**)(SipStack **__return_ptr))(*a1 + 192))(&v21);
  uint64_t v7 = a1[2];
  uint64_t v6 = a1 + 2;
  uint64_t v8 = (*(uint64_t (**)(void *))(v7 + 64))(v6);
  (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"BambiClient::initializeLazuliStack()", 36);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  uint64_t v9 = *v6;
  if (v21)
  {
    uint64_t v10 = (*(uint64_t (**)(void *))(v9 + 32))(v6);
    (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Stack ", 6);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v10 + 32))(v10, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" is a Lazuli stack", 18);
    *(unsigned char *)(v10 + 17) = 0;
    uint64_t v11 = (ims *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    uint64_t v12 = (void *)ims::logger(v11);
    ImsLogger::addStackToLogTagMap(v12, a2, 2);
    SipStack::initialize(v21, a3);
    uint64_t v19 = v21;
    char v20 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v13 = SDPSession::initializeLazuliTemplateSDP(&v19);
    uint64_t v14 = (ims *)v20;
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v13)
    {
      uint64_t v15 = 1;
      SipStack::setMediaInitialized(v21, 1);
    }
    else
    {
      uint64_t v17 = ims::logger(v14);
      ImsLogger::removeStackFromLogTagMap(v17, a2);
      uint64_t v15 = 0;
    }
  }
  else
  {
    uint64_t v16 = (*(uint64_t (**)(void *))(v9 + 56))(v6);
    (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Unable to initialize invalid SIP stack ", 39);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v16 + 32))(v16, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v15 = 0;
    *(unsigned char *)(v16 + 17) = 0;
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  return v15;
}

void sub_1C5613E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::deinitializeStack(void *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v12 = 0;
  BOOL v13 = 0;
  (*(void (**)(SipStack **__return_ptr))(*a1 + 192))(&v12);
  if (v12)
  {
    SipStack::deinitialize(v12, a3, a4);
    uint64_t v8 = a1[19];
    if (v8) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 24))(v8, a2);
    }
  }
  else
  {
    uint64_t v10 = a1[2];
    uint64_t v9 = a1 + 2;
    uint64_t v11 = (*(uint64_t (**)(void *))(v10 + 56))(v9);
    (*(void (**)(void *, uint64_t))(*v9 + 16))(v9, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Unable to deinitialize unknown SIP stack ", 41);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 32))(v11, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1C561404C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::shutdownStack(void *a1, unsigned __int8 *a2)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 192))(&v13);
  uint64_t v5 = a1 + 2;
  uint64_t v4 = a1[2];
  if (!v13)
  {
    uint64_t v10 = (*(uint64_t (**)(void *))(v4 + 56))(a1 + 2);
    (*(void (**)(void *, uint64_t))(*v5 + 16))(v5, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Unable to shutdown unknown SIP stack ", 37);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v10 + 32))(v10, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    goto LABEL_12;
  }
  uint64_t v6 = (*(uint64_t (**)(void *))(v4 + 64))(a1 + 2);
  (*(void (**)(void *, uint64_t))(*v5 + 16))(a1 + 2, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Tearing down stack ", 19);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v6 + 32))(v6, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  BambiClient::invalidateStack(a1, a2);
  uint64_t v7 = IMSClientManager::delegateForStack((void **)a2);
  xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v9 = v8;
  if (v8)
  {
    xpc_object_t object = v8;
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t object = v9;
    if (!v9)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v9 = 0;
      goto LABEL_10;
    }
  }
  if (MEMORY[0x1C878F160](v9) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v11 = xpc_null_create();
LABEL_10:
    xpc_object_t object = v11;
    goto LABEL_11;
  }
  xpc_retain(v9);
LABEL_11:
  xpc_release(v9);
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)(v7 + 8) + 72))(v7 + 8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  IMSClientManager::removeClient((uint64_t)a2);
LABEL_12:
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
}

void sub_1C5614360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void BambiClient::setThumperEnabled(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 192))(&v4);
  if (v4) {
    SipUserAgent::setThumperEnabled(*(SipUserAgent **)(v4 + 144), a3);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5614410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::setMute(uint64_t a1, void **a2)
{
  uint64_t v3 = *(void *)(a1 + 152);
  if (v3
    && (uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v3 + 312, a2), (void **)(v3 + 320) != v4)&& *((_DWORD *)v4 + 14) == 1)
  {
    uint64_t v5 = *(RTPManager **)(a1 + 152);
    RTPManager::setMute(v5);
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v6 = a1 + 16;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"No valid media manager to set mute", 34);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
  }
}

void BambiClient::startRegistration(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  xpc_object_t v9 = 0;
  uint64_t v10 = 0;
  (*(void (**)(SipStack **__return_ptr))(*a1 + 192))(&v9);
  uint64_t v6 = *(unsigned __int8 *)(a3 + 1031);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a3 + 1016);
  }
  if (!v6) {
    goto LABEL_8;
  }
  uint64_t v7 = *(unsigned __int8 *)(a3 + 1055);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 1040);
  }
  if (v7)
  {
    BambiClient::updateAccessNetworkInfo(a1, a2, (ims::AccessNetwork *)(a3 + 1008), 1);
  }
  else
  {
LABEL_8:
    uint64_t v8 = v9;
    if (!v9) {
      goto LABEL_12;
    }
    ims::AccessNetwork::clear((uint64_t)v9 + 3160);
    ims::AccessNetwork::clear((uint64_t)v8 + 3232);
    ims::AccessNetwork::clear((uint64_t)v8 + 3304);
  }
  if (v9) {
    SipStack::startRegistration(v9, (const SipRegistrationConfig *)a3);
  }
LABEL_12:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C5614638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::endAllCalls(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = (void *)(a1 + 16);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(void *, uint64_t))(*v5 + 16))(v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Ending all calls with reason: ", 30);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = (void *)v5[40];
  if (v7)
  {
    while (1)
    {
      xpc_object_t v9 = (BambiCall *)v7[2];
      uint64_t v8 = (std::__shared_weak_count *)v7[3];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = (void *)*v7;
      if (!*a3) {
        break;
      }
      uint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 46);
      if (v10)
      {
        xpc_object_t v11 = std::__shared_weak_count::lock(v10);
        uint64_t v12 = *a3;
        if (v11)
        {
          uint64_t v13 = *((void *)v9 + 45);
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          if (v13 == v12) {
            break;
          }
        }
        else if (!v12)
        {
          break;
        }
      }
LABEL_11:
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (!v7) {
        return;
      }
    }
    BambiCall::endWithReason(v9, a2, (uint64_t)v14);
    ImsResult::~ImsResult((ImsResult *)v14);
    goto LABEL_11;
  }
}

void sub_1C56147EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::endOtherCalls(uint64_t a1, uint64_t a2, uint64_t *a3, BambiCall **a4)
{
  uint64_t v4 = *(void **)(a1 + 336);
  if (v4)
  {
    while (1)
    {
      xpc_object_t v9 = (BambiCall *)v4[2];
      uint64_t v8 = (std::__shared_weak_count *)v4[3];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v4 = (void *)*v4;
      if (v9 == *a4) {
        goto LABEL_12;
      }
      if (!*a3) {
        break;
      }
      uint64_t v10 = (std::__shared_weak_count *)*((void *)v9 + 46);
      if (v10)
      {
        xpc_object_t v11 = std::__shared_weak_count::lock(v10);
        uint64_t v12 = *a3;
        if (v11)
        {
          uint64_t v13 = *((void *)v9 + 45);
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          if (v13 == v12) {
            break;
          }
        }
        else if (!v12)
        {
          break;
        }
      }
LABEL_12:
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (!v4) {
        return;
      }
    }
    BambiCall::endWithReason(v9, a2, (uint64_t)v14);
    ImsResult::~ImsResult((ImsResult *)v14);
    goto LABEL_12;
  }
}

void sub_1C56148DC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::updateRegisteredServices(void *a1, unsigned __int8 *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v38 = 0;
  uint64_t v39 = 0;
  (*(void (**)(SipStack **__return_ptr))(*a1 + 192))(&v38);
  if (v38)
  {
    memset(&v37, 0, sizeof(v37));
    int isHandover = ims::AccessNetwork::isHandover((ims::AccessNetwork *)((char *)v38 + 3160), (const ims::AccessNetwork *)a4);
    int v36 = a7;
    uint64_t v15 = (ImsPrefs *)SipStack::prefs(v38);
    RegisterOnServiceUpdateKey = (void **)ImsPrefs::getRegisterOnServiceUpdateKey(v15);
    LODWORD(v15) = ImsPrefs::BOOLValue(v15, RegisterOnServiceUpdateKey);
    BOOL isCellularHandover = ims::AccessNetwork::isCellularHandover((ims::AccessNetwork *)((char *)v38 + 3160), (const ims::AccessNetwork *)a4);
    if ((v15 | isHandover) == 1)
    {
      uint64_t v18 = v38;
      uint64_t v19 = (ims::AccessNetwork *)((char *)v38 + 3160);
      if (ims::AccessNetwork::isNR((ims::AccessNetwork *)((char *)v38 + 3160))
        && ims::AccessNetwork::isNR((ims::AccessNetwork *)a4)
        && (ims::AccessNetwork::isTDD(v19) && ims::AccessNetwork::isFDD((ims::AccessNetwork *)a4)
         || ims::AccessNetwork::isFDD(v19) && ims::AccessNetwork::isTDD((ims::AccessNetwork *)a4))
        && (char v20 = (ImsPrefs *)SipStack::prefs(v18),
            SkipReRegisterWhenNetworkTypeChangedOnNrBetweenTddAndFddKey = (void **)ImsPrefs::getSkipReRegisterWhenNetworkTypeChangedOnNrBetweenTddAndFddKey(v20),
            ImsPrefs::BOOLValue(v20, SkipReRegisterWhenNetworkTypeChangedOnNrBetweenTddAndFddKey)))
      {
        uint64_t v22 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
        (*(void (**)(void *, uint64_t))(a1[2] + 16))(a1 + 2, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Will skip reregister due to NetworkTypeChangedOnNrBetweenTddAndFdd", 66);
        *(unsigned char *)(v22 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        uint64_t v23 = v22;
        int v24 = 0;
        *(unsigned char *)(v23 + 17) = 0;
      }
      else
      {
        int v24 = 1;
      }
    }
    else
    {
      int v24 = 0;
    }
    if (isHandover) {
      std::string v28 = (const std::string *)"Handover";
    }
    else {
      std::string v28 = (const std::string *)"ServicesChanged";
    }
    std::string::operator=(&v37, v28);
    if (a3)
    {
      uint64_t v29 = *(unsigned __int8 *)(a4 + 23);
      if ((v29 & 0x80u) != 0) {
        uint64_t v29 = *(void *)(a4 + 8);
      }
      if (v29)
      {
        uint64_t v30 = *(unsigned __int8 *)(a4 + 47);
        if ((v30 & 0x80u) != 0) {
          uint64_t v30 = *(void *)(a4 + 32);
        }
        if (v30) {
          BambiClient::updateAccessNetworkInfo(a1, a2, (ims::AccessNetwork *)a4, v24);
        }
      }
    }
    std::string::size_type v31 = (ImsPrefs *)SipStack::prefs(v38);
    ReRegisterOnCellularHandoverKey = (void **)ImsPrefs::getReRegisterOnCellularHandoverKey(v31);
    if ((ImsPrefs::BOOLValue(v31, ReRegisterOnCellularHandoverKey) | !isCellularHandover))
    {
      SipStack::updateRegisteredServices(v38, a3, v24, &v37, a5, a6, v36);
    }
    else
    {
      uint64_t v34 = a1[2];
      size_t v33 = a1 + 2;
      uint64_t v35 = (*(uint64_t (**)(void *))(v34 + 64))(v33);
      (*(void (**)(void *, uint64_t))(*v33 + 16))(v33, v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"Skipping reregister on cellular handover", 40);
      *(unsigned char *)(v35 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v35 + 17) = 0;
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v26 = a1[2];
    int v25 = a1 + 2;
    uint64_t v27 = (*(uint64_t (**)(void *))(v26 + 56))(v25);
    (*(void (**)(void *, uint64_t))(*v25 + 16))(v25, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"Unable to update registered services for invalid stack ", 55);
    *(unsigned char *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v27 + 32))(v27, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v27 + 17) = 0;
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
}

void sub_1C5614D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::initializeCallToRemoteUri(void *a1@<X0>, std::string *a2@<X1>, const SipUri *a3@<X2>, std::__shared_weak_count_vtbl *a4@<X3>, const BambiCallOptions *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  memset(&v118, 0, sizeof(v118));
  long long v117 = 0uLL;
  (*(void (**)(long long *__return_ptr))(*a1 + 192))(&v117);
  if (!(void)v117)
  {
    uint64_t v20 = a1[2];
    uint64_t v19 = a1 + 2;
    uint64_t v21 = (*(uint64_t (**)(void *))(v20 + 56))(v19);
    (*(void (**)(void *, uint64_t))(*v19 + 16))(v19, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"initializeCall: no valid SIP stack for ", 39);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v21 + 32))(v21, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_6:
    *(unsigned char *)(v21 + 17) = 0;
LABEL_59:
    *(void *)a8 = 0;
    *(void *)(a8 + 8) = 0;
    goto LABEL_60;
  }
  v72 = a3;
  uint64_t v16 = a4;
  if (a6)
  {
    uint64_t v17 = *(unsigned __int8 *)(a6 + 71);
    if (*(char *)(a6 + 71) < 0) {
      uint64_t v18 = *(void *)(a6 + 56);
    }
    else {
      uint64_t v18 = *(unsigned __int8 *)(a6 + 71);
    }
    if (v18)
    {
      if ((v17 & 0x80u) == 0) {
        uint64_t v22 = *(unsigned __int8 *)(a6 + 71);
      }
      else {
        uint64_t v22 = *(void *)(a6 + 56);
      }
      std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      int v24 = (char)size;
      if ((size & 0x80u) != 0) {
        std::string::size_type size = a2->__r_.__value_.__l.__size_;
      }
      if (v22 == size)
      {
        if (v24 >= 0) {
          int v25 = (unsigned __int8 *)a2;
        }
        else {
          int v25 = (unsigned __int8 *)a2->__r_.__value_.__r.__words[0];
        }
        if ((v17 & 0x80) == 0)
        {
          if (*(unsigned char *)(a6 + 71))
          {
            uint64_t v26 = (unsigned __int8 *)(a6 + 48);
            while (*v26 == *v25)
            {
              ++v26;
              ++v25;
              if (!--v17) {
                goto LABEL_28;
              }
            }
            goto LABEL_25;
          }
LABEL_28:
          uint64_t v30 = (*(uint64_t (**)(void *, unsigned __int8 *))(a1[2] + 64))(a1 + 2, v25);
          (*(void (**)(void *, uint64_t))(a1[2] + 16))(a1 + 2, v30);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"using emergency SIP stack for emergency call", 44);
          *(unsigned char *)(v30 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v30 + 17) = 0;
          if (*(char *)(v117 + 4183) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v103, *(const std::string::value_type **)(v117 + 4160), *(void *)(v117 + 4168));
          }
          else
          {
            *(_OWORD *)v103 = *(_OWORD *)(v117 + 4160);
            *(void *)&v103[16] = *(void *)(v117 + 4176);
          }
          BambiClient::initializeStack(a1, v103, (const SipStackConfig *)(a6 + 1752));
          if ((v103[23] & 0x80000000) != 0) {
            operator delete(*(void **)v103);
          }
          SipStack::updateAccessNetworkInfo((SipStack *)v117, (std::string *)(a6 + 1088), 0);
          goto LABEL_34;
        }
        if (!memcmp(*(const void **)(a6 + 48), v25, *(void *)(a6 + 56))) {
          goto LABEL_28;
        }
      }
    }
LABEL_25:
    uint64_t v27 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
    (*(void (**)(void *, uint64_t))(a1[2] + 16))(a1 + 2, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"using normal SIP stack for emergency call", 41);
    *(unsigned char *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v27 + 17) = 0;
    std::string::operator=(&v118, a2);
    (*(void (**)(unsigned char *__return_ptr, void *, uint64_t))(*a1 + 192))(v103, a1, a6 + 48);
    long long v28 = *(_OWORD *)v103;
    *(_OWORD *)v103 = 0uLL;
    uint64_t v29 = (std::__shared_weak_count *)*((void *)&v117 + 1);
    long long v117 = v28;
    if (v29)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      if (*(void *)&v103[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v103[8]);
      }
    }
  }
LABEL_34:
  char v31 = SipStack::registeredForVoice((SipStack *)v117);
  if (a6) {
    char v32 = 1;
  }
  else {
    char v32 = v31;
  }
  if ((v32 & 1) == 0)
  {
    if (!BambiClient::callCountForStack((uint64_t)a1, (unsigned __int8 *)a2)
      || (size_t v33 = (ImsPrefs *)SipStack::prefs((SipStack *)v117),
          AllowSimultaneousCallsWhileUnregisteredKey = (void **)ImsPrefs::getAllowSimultaneousCallsWhileUnregisteredKey(v33),
          !ImsPrefs::BOOLValue(v33, AllowSimultaneousCallsWhileUnregisteredKey)))
    {
      uint64_t v42 = a1[2];
      std::__split_buffer<std::string>::pointer v41 = a1 + 2;
      uint64_t v43 = (*(uint64_t (**)(void *))(v42 + 56))(v41);
      (*(void (**)(void *, uint64_t))(*v41 + 16))(v41, v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v43 + 8), (uint64_t)"initializeCall: not registered for voice calls", 46);
      *(unsigned char *)(v43 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v43 + 17) = 0;
      if (!a7) {
        goto LABEL_59;
      }
      memset(&v103[24], 0, 48);
      *(void *)v103 = &unk_1F20B2680;
      *(void *)&v103[8] = &_bambiDomain;
      *(_DWORD *)&v103[16] = 1073741826;
      uint64_t v44 = ImsResult::operator<<<char [31]>((uint64_t)v103, "not registered for voice calls");
      ImsResult::operator=(a7, v44);
LABEL_58:
      ImsResult::~ImsResult((ImsResult *)v103);
      goto LABEL_59;
    }
    uint64_t v35 = (*(uint64_t (**)(void *))(a1[2] + 32))(a1 + 2);
    (*(void (**)(void *, uint64_t))(a1[2] + 16))(a1 + 2, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"we are currently in a call.  Allowing additional outgoing call while unregistered.", 82);
    *(unsigned char *)(v35 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v35 + 17) = 0;
  }
  if (!a1[32])
  {
    uint64_t v46 = a1[2];
    int v45 = a1 + 2;
    uint64_t v47 = (*(uint64_t (**)(void *))(v46 + 56))(v45);
    (*(void (**)(void *, uint64_t))(*v45 + 16))(v45, v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)"initializeCall: no call manager delegate specified", 50);
    *(unsigned char *)(v47 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v47 + 17) = 0;
    if (!a7) {
      goto LABEL_59;
    }
    memset(&v103[24], 0, 48);
    *(void *)v103 = &unk_1F20B2680;
    *(void *)&v103[8] = &_bambiDomain;
    *(_DWORD *)&v103[16] = 1073741826;
    uint64_t v48 = ImsResult::operator<<<char [25]>((uint64_t)v103, "no call manager delegate");
    ImsResult::operator=(a7, v48);
    goto LABEL_58;
  }
  if (a6) {
    goto LABEL_43;
  }
  SipStack::carrierIdentifier((SipStack *)v117, (std::string *)v103);
  int v50 = (uint64_t **)BambiPrefsManager::instance(v49);
  v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v103;
  if (*((unsigned char *)std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v50, (void **)v103, (uint64_t)&std::piecewise_construct, (long long **)&v102)+ 96))
  {
    if ((v103[23] & 0x80000000) != 0) {
      operator delete(*(void **)v103);
    }
    goto LABEL_112;
  }
  uint64_t v61 = (void *)a1[42];
  if (v61)
  {
    uint64_t v62 = 0;
    do
    {
      if (*(void *)(v61[2] + 520)) {
        ++v62;
      }
      uint64_t v61 = (void *)*v61;
    }
    while (v61);
  }
  else
  {
    uint64_t v62 = 0;
  }
  if ((v103[23] & 0x80000000) != 0) {
    operator delete(*(void **)v103);
  }
  if (v62)
  {
    uint64_t v64 = a1[2];
    std::string v63 = a1 + 2;
    uint64_t v65 = (*(uint64_t (**)(void *))(v64 + 32))(v63);
    (*(void (**)(void *, uint64_t))(*v63 + 16))(v63, v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)"unable to initialize voice call while on an emergency call", 58);
    *(unsigned char *)(v65 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v65 + 17) = 0;
    if (!a7) {
      goto LABEL_59;
    }
    memset(&v103[24], 0, 48);
    *(void *)v103 = &unk_1F20B2680;
    *(void *)&v103[8] = &SessionTerminatedResultDomain::_domain;
    *(_DWORD *)&v103[16] = 28;
    ImsResult::operator=(a7, (uint64_t)v103);
    goto LABEL_58;
  }
LABEL_112:
  if (*(_DWORD *)(v117 + 200) == 3)
  {
    uint64_t v67 = a1[2];
    long long v66 = a1 + 2;
    uint64_t v21 = (*(uint64_t (**)(void *))(v67 + 56))(v66);
    (*(void (**)(void *, uint64_t))(*v66 + 16))(v66, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"initializeCall: can't initialize a call while SipStack is deinitializing", 72);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_6;
  }
LABEL_43:
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  memset(v112, 0, sizeof(v112));
  long long v111 = 0u;
  long long v109 = 0u;
  memset(v110, 0, sizeof(v110));
  long long v107 = 0u;
  long long v108 = 0u;
  long long v105 = 0u;
  long long v106 = 0u;
  long long v104 = 0u;
  memset(v103, 0, sizeof(v103));
  BambiCallOptions::BambiCallOptions((BambiCallOptions *)v103, a5);
  if (a6)
  {
    memset(&v102, 0, sizeof(v102));
    SipStack::carrierIdentifier((SipStack *)v117, &__p);
    std::string v37 = (uint64_t **)BambiPrefsManager::instance(v36);
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    int v38 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v37, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v100);
    getMatchingPrefix(&v102, (std::string *)(a6 + 4672), v38[23], v38[24]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string::size_type v39 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v39 = v102.__r_.__value_.__l.__size_;
    }
    if (v39)
    {
      uint64_t v40 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
      (*(void (**)(void *, uint64_t))(a1[2] + 16))(a1 + 2, v40);
      LoggableString::LoggableString(&__p, (const std::string *)(a6 + 4672));
      (*(void (**)(uint64_t, std::string *))(*(void *)v40 + 40))(v40, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)" matched private emergency prefix ", 34);
      *(unsigned char *)(v40 + 17) = 0;
      LoggableString::LoggableString(&v100, &v102);
      (*(void (**)(uint64_t, std::string *))(*(void *)v40 + 40))(v40, &v100);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v40 + 17) = 0;
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v100.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v103[1] = 1;
    }
    else
    {
      SipStack::carrierIdentifier((SipStack *)v117, &v100);
      uint64_t v52 = (uint64_t **)BambiPrefsManager::instance(v51);
      v119 = &v100;
      uint64_t v53 = std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v52, (void **)&v100.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v119);
      getMatchingPrefix(&__p, (std::string *)(a6 + 4672), v53[26], v53[27]);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v102.__r_.__value_.__l.__data_);
      }
      std::string v102 = __p;
      *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
      __p.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v100.__r_.__value_.__l.__data_);
      }
      std::string::size_type v54 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v54 = v102.__r_.__value_.__l.__size_;
      }
      if (v54)
      {
        uint64_t v55 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
        (*(void (**)(void *, uint64_t))(a1[2] + 16))(a1 + 2, v55);
        LoggableString::LoggableString(&__p, (const std::string *)(a6 + 4672));
        (*(void (**)(uint64_t, std::string *))(*(void *)v55 + 40))(v55, &__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)" matched non-private emergency prefix ", 38);
        *(unsigned char *)(v55 + 17) = 0;
        LoggableString::LoggableString(&v100, &v102);
        (*(void (**)(uint64_t, std::string *))(*(void *)v55 + 40))(v55, &v100);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v55 + 17) = 0;
        if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v100.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        *(_WORD *)v103 = 1;
      }
    }
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v102.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v56 = (SipStack *)v117;
  if (!(void)v117) {
    goto LABEL_93;
  }
  int v57 = SipStack::requiresLimitedAvailability((SipStack *)v117);
  uint64_t v56 = (SipStack *)v117;
  if (!v57 || *(unsigned char *)(v117 + 4232)) {
    goto LABEL_93;
  }
  if (a6)
  {
    std::string::size_type v58 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
    if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v58 = v118.__r_.__value_.__l.__size_;
    }
    if (v58)
    {
      (*(void (**)(std::string *__return_ptr, void *, std::string *))(*a1 + 192))(&v102, a1, &v118);
      SipStack::setConnectivityAvailable((SipStack *)v102.__r_.__value_.__l.__data_, 0);
      if (v102.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v102.__r_.__value_.__l.__size_);
      }
      uint64_t v56 = (SipStack *)v117;
    }
    SipStack::setConnectivityAvailable(v56, 0);
    uint64_t v56 = (SipStack *)v117;
LABEL_93:
    uint64_t v59 = (std::__shared_weak_count *)*((void *)&v117 + 1);
    v99[0] = v56;
    v99[1] = *((void *)&v117 + 1);
    if (*((void *)&v117 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v117 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    LOWORD(v73) = *(_WORD *)v103;
    long long v74 = *(_OWORD *)&v103[8];
    uint64_t v75 = *(void *)&v103[24];
    memset(&v103[8], 0, 24);
    long long v76 = *(_OWORD *)&v103[32];
    long long v77 = *(_OWORD *)&v103[48];
    *(_OWORD *)int v78 = *(_OWORD *)&v103[64];
    *(void *)((char *)&v78[1] + 5) = *(void *)&v103[77];
    v78[5] = *(void *)&v103[104];
    *(_OWORD *)&v78[3] = *(_OWORD *)&v103[88];
    memset(&v103[88], 0, 24);
    long long v79 = v104;
    uint64_t v80 = v105;
    long long v104 = 0uLL;
    char v81 = BYTE8(v105);
    long long v82 = v106;
    long long v83 = v107;
    uint64_t v86 = *(void *)&v110[0];
    long long v84 = v108;
    long long v85 = v109;
    *(void *)&long long v105 = 0;
    long long v109 = 0uLL;
    memset(v110, 0, sizeof(v110));
    uint64_t v88 = *((void *)&v110[1] + 1);
    long long v87 = *(_OWORD *)((char *)v110 + 8);
    long long v89 = v111;
    long long v111 = 0uLL;
    long long v91 = *(_OWORD *)((char *)v112 + 8);
    uint64_t v60 = *(void *)&v112[0];
    memset(v112, 0, sizeof(v112));
    uint64_t v90 = v60;
    uint64_t v92 = *((void *)&v112[1] + 1);
    uint64_t v94 = v114;
    long long v93 = v113;
    long long v113 = 0uLL;
    *(void *)&long long v114 = 0;
    char v95 = BYTE8(v114);
    LOBYTE(v96) = 0;
    char v98 = 0;
    if (BYTE8(v116))
    {
      long long v96 = v115;
      uint64_t v97 = v116;
      *(void *)&long long v116 = 0;
      long long v115 = 0uLL;
      char v98 = 1;
    }
    BambiClient::createNewCall((std::__shared_weak_count **)a8, (uint64_t)a1, (uint64_t)v99, v72, v16, (const BambiCallOptions *)&v73, a6, a7);
    BambiCallOptions::~BambiCallOptions(&v73);
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    goto LABEL_99;
  }
  uint64_t v69 = a1[2];
  v68 = a1 + 2;
  uint64_t v70 = (*(uint64_t (**)(void *))(v69 + 48))(v68);
  (*(void (**)(void *, uint64_t))(*v68 + 16))(v68, v70);
  v71 = (unsigned char *)ImsOutStream::operator<<(v70, "initializeCall: preventing outgoing call while in limited connectivity");
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v71 + 64))(v71, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v71[17] = 0;
  *(void *)a8 = 0;
  *(void *)(a8 + 8) = 0;
LABEL_99:
  BambiCallOptions::~BambiCallOptions((void **)v103);
LABEL_60:
  if (*((void *)&v117 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v117 + 1));
  }
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v118.__r_.__value_.__l.__data_);
  }
}

void sub_1C5615E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (a64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a64);
  }
  BambiCallOptions::~BambiCallOptions(&a67);
  uint64_t v69 = *(std::__shared_weak_count **)(v67 - 152);
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  if (*(char *)(v67 - 113) < 0) {
    operator delete(*(void **)(v67 - 136));
  }
  _Unwind_Resume(a1);
}

uint64_t BambiClient::callCountForStack(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 336);
  if (v2)
  {
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = v2[2];
      if (!v5) {
        goto LABEL_47;
      }
      uint64_t v6 = *(void *)(v5 + 392);
      if (!v6 || ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 264))(v6) & 1) != 0) {
        goto LABEL_47;
      }
      uint64_t v7 = (void *)v2[2];
      uint64_t v8 = (SipSession *)v7[49];
      if (v8)
      {
        if (SipSession::terminating(v8)) {
          goto LABEL_47;
        }
        uint64_t v7 = (void *)v2[2];
      }
      xpc_object_t v9 = (std::__shared_weak_count *)v7[46];
      if (!v9) {
        goto LABEL_47;
      }
      uint64_t v10 = std::__shared_weak_count::lock(v9);
      if (!v10) {
        goto LABEL_47;
      }
      xpc_object_t v11 = v10;
      if (v7[45])
      {
        uint64_t v12 = v2[2];
        uint64_t v13 = *(std::__shared_weak_count **)(v12 + 368);
        if (v13)
        {
          uint64_t v14 = std::__shared_weak_count::lock(v13);
          if (v14) {
            uint64_t v15 = *(void *)(v12 + 360);
          }
          else {
            uint64_t v15 = 0;
          }
        }
        else
        {
          uint64_t v15 = 0;
          uint64_t v14 = 0;
        }
        if (*(char *)(v15 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(v15 + 4160), *(void *)(v15 + 4168));
        }
        else {
          std::string __s1 = *(std::string *)(v15 + 4160);
        }
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __s1.__r_.__value_.__l.__size_;
        }
        uint64_t v17 = a2[23];
        int v18 = (char)v17;
        if ((v17 & 0x80u) != 0) {
          uint64_t v17 = *((void *)a2 + 1);
        }
        if (size != v17)
        {
          BOOL v28 = 0;
          goto LABEL_40;
        }
        if (v18 >= 0) {
          uint64_t v19 = a2;
        }
        else {
          uint64_t v19 = *(unsigned __int8 **)a2;
        }
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          uint64_t v29 = (void *)__s1.__r_.__value_.__r.__words[0];
          BOOL v28 = memcmp(__s1.__r_.__value_.__l.__data_, v19, __s1.__r_.__value_.__l.__size_) == 0;
LABEL_43:
          operator delete(v29);
LABEL_44:
          if (!v14) {
            goto LABEL_46;
          }
        }
        else
        {
          if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
          {
            uint64_t v20 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
            p_s1 = &__s1;
            do
            {
              int v23 = p_s1->__r_.__value_.__s.__data_[0];
              p_s1 = (std::string *)((char *)p_s1 + 1);
              int v22 = v23;
              int v25 = *v19++;
              int v24 = v25;
              BOOL v27 = v20-- != 0;
              BOOL v28 = v22 == v24;
            }
            while (v22 == v24 && v27);
LABEL_40:
            if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              uint64_t v29 = (void *)__s1.__r_.__value_.__r.__words[0];
              goto LABEL_43;
            }
            goto LABEL_44;
          }
          BOOL v28 = 1;
          if (!v14)
          {
LABEL_46:
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
            v4 += v28;
            goto LABEL_47;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        goto LABEL_46;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_47:
      uint64_t v2 = (void *)*v2;
      if (!v2) {
        return v4;
      }
    }
  }
  return 0;
}

void sub_1C56161C4(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void getMatchingPrefix(std::string *a1, std::string *__str, uint64_t a3, uint64_t a4)
{
  if (a3 == a4)
  {
LABEL_32:
    std::string::basic_string[abi:ne180100]<0>(a1, "");
    return;
  }
  uint64_t v6 = a3;
  while (1)
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (*(char *)(v6 + 23) < 0) {
      std::string::size_type v9 = *(void *)(v6 + 8);
    }
    else {
      std::string::size_type v9 = *(unsigned __int8 *)(v6 + 23);
    }
    if (size < v9) {
      goto LABEL_31;
    }
    std::string::basic_string(&__p, __str, 0, v9, (std::allocator<char> *)&v21);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v10 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v10 = __p.__r_.__value_.__l.__size_;
    }
    uint64_t v11 = *(unsigned __int8 *)(v6 + 23);
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(v6 + 8);
    }
    if (v10 != v11)
    {
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_31;
    }
    uint64_t v13 = v12 >= 0 ? (unsigned __int8 *)v6 : *(unsigned __int8 **)v6;
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
      break;
    }
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_35;
    }
    uint64_t v14 = 0;
    do
    {
      int v15 = __p.__r_.__value_.__s.__data_[v14];
      int v16 = v13[v14];
    }
    while (v15 == v16 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v14++);
    if (v15 == v16) {
      goto LABEL_35;
    }
LABEL_31:
    v6 += 24;
    if (v6 == a4) {
      goto LABEL_32;
    }
  }
  int v18 = (void *)__p.__r_.__value_.__r.__words[0];
  int v19 = memcmp(__p.__r_.__value_.__l.__data_, v13, __p.__r_.__value_.__l.__size_);
  operator delete(v18);
  if (v19) {
    goto LABEL_31;
  }
  LOBYTE(v12) = *(unsigned char *)(v6 + 23);
LABEL_35:
  if ((v12 & 0x80) != 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
    a1->__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
  }
}

void BambiClient::createNewCall(std::__shared_weak_count **a1, uint64_t a2, uint64_t a3, const SipUri *a4, std::__shared_weak_count_vtbl *a5, const BambiCallOptions *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v75 = 0;
  long long v76 = 0;
  if (*((unsigned char *)a6 + 312))
  {
    uint64_t v14 = *(SipStack **)a3;
    int v15 = *(std::__shared_weak_count **)(a3 + 8);
    int v16 = (std::__shared_weak_count *)operator new(0x7F0uLL);
    uint64_t v17 = v16;
    v16->__shared_owners_ = 0;
    v16->__shared_weak_owners_ = 0;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E57F8;
    int v18 = v16 + 1;
    *(void *)&long long __p = v14;
    *((void *)&__p + 1) = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v19 = *(std::__shared_weak_count **)(a2 + 160);
    *(void *)&long long v41 = *(void *)(a2 + 152);
    *((void *)&v41 + 1) = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BambiUnlistedEmergencyCall::BambiUnlistedEmergencyCall((uint64_t)&v16[1], (uint64_t *)&__p, (uint64_t *)&v41, a7);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    uint64_t v20 = (std::__shared_weak_count *)v17[9].__vftable;
    if (v20)
    {
      if (v20->__shared_owners_ != -1) {
        goto LABEL_24;
      }
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v17[8].__shared_weak_owners_ = (uint64_t)v18;
      v17[9].__vftable = (std::__shared_weak_count_vtbl *)v17;
      std::__shared_weak_count::__release_weak(v20);
    }
    else
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v17[8].__shared_weak_owners_ = (uint64_t)v18;
      v17[9].__vftable = (std::__shared_weak_count_vtbl *)v17;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  else
  {
    int v22 = *(SipStack **)a3;
    uint64_t v21 = *(void *)(a3 + 8);
    int v23 = (std::__shared_weak_count *)operator new(0x738uLL);
    uint64_t v17 = v23;
    v23->__shared_owners_ = 0;
    v23->__shared_weak_owners_ = 0;
    v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E5848;
    int v18 = v23 + 1;
    *(void *)&long long __p = v22;
    *((void *)&__p + 1) = v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = *(void *)(a2 + 160);
    *(void *)&long long v41 = *(void *)(a2 + 152);
    *((void *)&v41 + 1) = v24;
    if (v24) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    }
    BambiCall::BambiCall((uint64_t)&v23[1], &__p, (uint64_t *)&v41, a7);
    if (*((void *)&v41 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
    }
    if (*((void *)&__p + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
    }
    uint64_t v35 = v18;
    int v36 = (uint64_t *)v17;
    std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v35, &v17[8].__shared_weak_owners_, (uint64_t)v18);
  }
LABEL_24:
  uint64_t v75 = v18;
  long long v76 = v17;
  memset(v74, 0, sizeof(v74));
  v72 = v18;
  v73 = v17;
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  LoggableString::LoggableString((LoggableString *)&__p, "initializeCall");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock(v74, &v72, (const std::string *)&__p);
  if (SBYTE7(v47) < 0) {
    operator delete((void *)__p);
  }
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  uint64_t v71 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long __p = 0u;
  SipStack::makeCanonicalUri(*(SipStack **)a3, a4, (uint64_t)&__p);
  uint64_t v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  BambiCall::initializeMobileOriginated((BambiCall *)v18, (const SipUri *)&__p, a6, (uint64_t)&v41);
  if ((*(unsigned int (**)(void, void))(**((void **)&v41 + 1) + 24))(*((void *)&v41 + 1), v42))
  {
    BambiCall::handleInitializationFailure((BambiCall *)v18);
    if (a8) {
      ImsResult::operator=(a8, (uint64_t)&v41);
    }
    goto LABEL_48;
  }
  int v25 = (void *)(a2 + 320);
  std::__hash_table<std::shared_ptr<BambiCall>,std::hash<std::shared_ptr<BambiCall>>,std::equal_to<std::shared_ptr<BambiCall>>,std::allocator<std::shared_ptr<BambiCall>>>::__emplace_unique_key_args<std::shared_ptr<BambiCall>,std::shared_ptr<BambiCall> const&>((uint64_t)v25, (unint64_t)v18, (uint64_t)v18, (uint64_t)v17);
  v18[17].__vftable = a5;
  uint64_t v26 = *(void *)(*(void *)a3 + 2912);
  size_t v33 = v18;
  uint64_t v34 = v17;
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  (*(void (**)(std::__shared_weak_count **__return_ptr))(*(void *)v26 + 96))(&v35);
  ImsResult::operator=((uint64_t)&v41, (uint64_t)&v35);
  ImsResult::~ImsResult((ImsResult *)&v35);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if ((*(unsigned int (**)(void, void))(**((void **)&v41 + 1) + 24))(*((void *)&v41 + 1), v42))
  {
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    uint64_t v35 = (std::__shared_weak_count *)&unk_1F20B2680;
    int v36 = &_bambiDomain;
    int v37 = 1073741838;
    if (*((uint64_t **)&v41 + 1) != &_bambiDomain)
    {
      ImsResult::~ImsResult((ImsResult *)&v35);
      uint64_t v27 = a8;
LABEL_37:
      v18[17].__vftable = 0;
      uint64_t v75 = 0;
      long long v76 = 0;
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      uint64_t v17 = 0;
      if (v27) {
        ImsResult::operator=(v27, (uint64_t)&v41);
      }
      int v18 = 0;
      goto LABEL_41;
    }
    int v28 = v42;
    ImsResult::~ImsResult((ImsResult *)&v35);
    uint64_t v27 = a8;
    if (v28 != 1073741838) {
      goto LABEL_37;
    }
  }
LABEL_41:
  uint64_t v31 = 0;
  char v32 = 0;
  SipTypedTerminationLock<SipLockable>::set((uint64_t)v74, &v31);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (!std::__hash_table<std::shared_ptr<BambiCall>,std::hash<std::shared_ptr<BambiCall>>,std::equal_to<std::shared_ptr<BambiCall>>,std::allocator<std::shared_ptr<BambiCall>>>::find<std::shared_ptr<BambiCall>>(v25, (unint64_t)v18))
  {
    uint64_t v75 = 0;
    long long v76 = 0;
    if (v17)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      int v18 = v75;
      uint64_t v17 = v76;
    }
    else
    {
      int v18 = 0;
    }
  }
  *a1 = v18;
  a1[1] = v17;
  a1 = &v75;
LABEL_48:
  *a1 = 0;
  a1[1] = 0;
  ImsResult::~ImsResult((ImsResult *)&v41);
  SipUri::~SipUri((SipUri *)&__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v74);
  if (v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
}

void sub_1C5616844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,std::__shared_weak_count *a36,int a37,__int16 a38,char a39,char a40)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  std::__shared_weak_count::~__shared_weak_count(v40);
  operator delete(v42);
  _Unwind_Resume(a1);
}

void BambiClient::initializeRedial(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, std::__shared_weak_count_vtbl *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = *a2;
  if (!*a2)
  {
    *(void *)a5 = 0;
    *(void *)(a5 + 8) = 0;
    return;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(v6 + 368);
  if (v11)
  {
    int v12 = std::__shared_weak_count::lock(v11);
    if (v12)
    {
      uint64_t v13 = *(void *)(v6 + 360);
      goto LABEL_8;
    }
  }
  else
  {
    int v12 = 0;
  }
  uint64_t v13 = 0;
LABEL_8:
  uint64_t v14 = (const BambiCallOptions *)(*a2 + 672);
  memset(v29, 0, sizeof(v29));
  BambiCallOptions::BambiCallOptions((BambiCallOptions *)v29, v14);
  memset(v27, 0, sizeof(v27));
  int v15 = (const SipUri *)(*a2 + 1048);
  uint64_t v28 = 0;
  SipUri::SipUri((SipUri *)v27, v15);
  if (!a4)
  {
    a4 = *(std::__shared_weak_count_vtbl **)(*a2 + 408);
    if (v13) {
      goto LABEL_10;
    }
LABEL_18:
    uint64_t v20 = *(void *)(a1 + 16);
    uint64_t v19 = a1 + 16;
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(v20 + 56))(v19);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Unable to redial call on invalid stack", 38);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    goto LABEL_19;
  }
  if (!v13) {
    goto LABEL_18;
  }
LABEL_10:
  if (!*(void *)(*a2 + 520))
  {
    v23[0] = v13;
    v23[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BambiCallOptions::BambiCallOptions((BambiCallOptions *)v22, (const BambiCallOptions *)v29);
    BambiClient::createNewCall((std::__shared_weak_count **)a5, a1, (uint64_t)v23, (const SipUri *)v27, a4, (const BambiCallOptions *)v22, 0, a3);
    BambiCallOptions::~BambiCallOptions(v22);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    goto LABEL_24;
  }
  int v16 = *(BambiEmergencyCallHandler **)(v13 + 4240);
  uint64_t v17 = *(std::__shared_weak_count **)(v13 + 4248);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiEmergencyCallHandler::redialAnonymously(v16, (uint64_t)v24);
  char v18 = (*(uint64_t (**)(uint64_t, void))(*(void *)v25 + 24))(v25, v26);
  ImsResult::~ImsResult((ImsResult *)v24);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if ((v18 & 1) == 0)
  {
    SipStack::initiateEmergencyRedial((SipStack *)v13);
    operator new();
  }
LABEL_19:
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
LABEL_24:
  SipUri::~SipUri((SipUri *)v27);
  BambiCallOptions::~BambiCallOptions(v29);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1C5616C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  MEMORY[0x1C878E320](v66, 0x10B2C40AA878D3ELL);
  SipUri::~SipUri((SipUri *)&a65);
  BambiCallOptions::~BambiCallOptions((void **)&STACK[0x360]);
  if (v65) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v65);
  }
  _Unwind_Resume(a1);
}

void BambiClient::createNewLazuliSession(uint64_t a1@<X0>, uint64_t a2@<X1>, const SipUri *a3@<X2>, const LazuliSessionOptions *a4@<X3>, long long *a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"BambiClient::createNewLazuliSession", 35);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  int v12 = *(SipStack **)a2;
  uint64_t v11 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v13 = operator new(0x3E8uLL);
  uint64_t v14 = v13;
  v13[1] = 0;
  v13[2] = 0;
  void *v13 = &unk_1F20E5898;
  uint64_t v15 = (uint64_t)(v13 + 3);
  *(void *)&v21[0] = v12;
  *((void *)&v21[0] + 1) = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LazuliSession::LazuliSession((uint64_t)(v13 + 3), v21);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  *(void *)&long long v23 = v15;
  *((void *)&v23 + 1) = v14;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v23, v14 + 16, v15);
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  SipStack::makeCanonicalUri(*(SipStack **)a2, a3, (uint64_t)v21);
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  LazuliSession::initializeMobileOriginated((LazuliSession *)v23, a4, (uint64_t)&v16);
  if (((*(uint64_t (**)(void, void))(**((void **)&v16 + 1) + 24))(*((void *)&v16 + 1), v17) & 1) == 0)
  {
    *a5 = v23;
    a5 = &v23;
  }
  *(void *)a5 = 0;
  *((void *)a5 + 1) = 0;
  ImsResult::~ImsResult((ImsResult *)&v16);
  SipUri::~SipUri((SipUri *)v21);
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
}

void sub_1C5616F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  SipUri::~SipUri((SipUri *)&a19);
  uint64_t v21 = *(std::__shared_weak_count **)(v19 - 88);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

uint64_t BambiClient::callCountExcludingCall(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 336);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = v2[2];
    if (v5 != *a2)
    {
      uint64_t v6 = *(SipSession **)(v5 + 392);
      if (v6)
      {
        if (!SipSession::terminating(v6))
        {
          uint64_t v7 = *(void *)(v2[2] + 392);
          if (v7) {
            LODWORD(v7) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 264))(v7);
          }
          v4 += v7 ^ 1;
        }
      }
    }
    uint64_t v2 = (void *)*v2;
  }
  while (v2);
  return v4;
}

uint64_t BambiClient::activeCallCountForStack(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v3 = *(void **)(a1 + 336);
  if (v3)
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = v3[2];
      if (((*(void *)(v7 + 520) != 0) ^ a2)) {
        goto LABEL_49;
      }
      uint64_t v8 = *(SipSession **)(v7 + 392);
      if (!v8 || !SipSession::confirmed(v8)) {
        goto LABEL_49;
      }
      uint64_t v9 = (void *)v3[2];
      uint64_t v10 = (SipSession *)v9[49];
      if (v10)
      {
        if (SipSession::terminating(v10)) {
          goto LABEL_49;
        }
        uint64_t v9 = (void *)v3[2];
        uint64_t v11 = v9[49];
        if (v11)
        {
          if ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 264))(v11)) {
            goto LABEL_49;
          }
          uint64_t v9 = (void *)v3[2];
        }
      }
      int v12 = (std::__shared_weak_count *)v9[46];
      if (!v12) {
        goto LABEL_49;
      }
      uint64_t v13 = std::__shared_weak_count::lock(v12);
      if (!v13) {
        goto LABEL_49;
      }
      uint64_t v14 = v13;
      if (v9[45])
      {
        uint64_t v15 = v3[2];
        long long v16 = *(std::__shared_weak_count **)(v15 + 368);
        if (v16)
        {
          long long v17 = std::__shared_weak_count::lock(v16);
          if (v17) {
            uint64_t v18 = *(void *)(v15 + 360);
          }
          else {
            uint64_t v18 = 0;
          }
        }
        else
        {
          uint64_t v18 = 0;
          long long v17 = 0;
        }
        if (*(char *)(v18 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(v18 + 4160), *(void *)(v18 + 4168));
        }
        else {
          std::string __s1 = *(std::string *)(v18 + 4160);
        }
        if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __s1.__r_.__value_.__l.__size_;
        }
        uint64_t v20 = a3[23];
        int v21 = (char)v20;
        if ((v20 & 0x80u) != 0) {
          uint64_t v20 = *((void *)a3 + 1);
        }
        if (size != v20)
        {
          BOOL v31 = 0;
          goto LABEL_42;
        }
        if (v21 >= 0) {
          uint64_t v22 = a3;
        }
        else {
          uint64_t v22 = *(unsigned __int8 **)a3;
        }
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          char v32 = (void *)__s1.__r_.__value_.__r.__words[0];
          BOOL v31 = memcmp(__s1.__r_.__value_.__l.__data_, v22, __s1.__r_.__value_.__l.__size_) == 0;
LABEL_45:
          operator delete(v32);
LABEL_46:
          if (!v17) {
            goto LABEL_48;
          }
        }
        else
        {
          if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
          {
            uint64_t v23 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
            p_s1 = &__s1;
            do
            {
              int v26 = p_s1->__r_.__value_.__s.__data_[0];
              p_s1 = (std::string *)((char *)p_s1 + 1);
              int v25 = v26;
              int v28 = *v22++;
              int v27 = v28;
              BOOL v30 = v23-- != 0;
              BOOL v31 = v25 == v27;
            }
            while (v25 == v27 && v30);
LABEL_42:
            if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              char v32 = (void *)__s1.__r_.__value_.__r.__words[0];
              goto LABEL_45;
            }
            goto LABEL_46;
          }
          BOOL v31 = 1;
          if (!v17)
          {
LABEL_48:
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            v6 += v31;
            goto LABEL_49;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        goto LABEL_48;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_49:
      uint64_t v3 = (void *)*v3;
      if (!v3) {
        return v6;
      }
    }
  }
  return 0;
}

void sub_1C5617258(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiClient::callForMediaSession(BambiClient *this, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>>>::find<unsigned long long>((void *)(a2 + 280), a3);
  if (v4 && (v5 = v4[3]) != 0 && (uint64_t v6 = *(std::__shared_weak_count **)(v5 + 24)) != 0)
  {
    uint64_t v7 = *(void *)(v5 + 16);
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)this = 0;
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    *((void *)this + 1) = v8;
    if (v8) {
      *(void *)this = v7;
    }
    std::__shared_weak_count::__release_weak(v6);
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
}

uint64_t BambiClient::unheldCallsExcludingCall(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *(long long **)(a1 + 336);
  if (v3)
  {
    char v6 = 0;
    do
    {
      uint64_t v7 = *((void *)v3 + 2);
      if (v7 != *a3)
      {
        uint64_t v8 = *(SipSession **)(v7 + 392);
        if (v8)
        {
          if (!*(unsigned char *)(v7 + 460) && *(_DWORD *)(v7 + 448) != 3 && SipSession::confirmed(v8))
          {
            uint64_t v9 = *(void *)(*((void *)v3 + 2) + 392);
            if (v9) {
              LOBYTE(v9) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 264))(v9);
            }
            v6 |= v9 ^ 1;
            if (a2 && (v9 & 1) == 0)
            {
              std::vector<std::shared_ptr<BambiCall>>::push_back[abi:ne180100](a2, v3 + 1);
              char v6 = 1;
            }
          }
        }
      }
      uint64_t v3 = *(long long **)v3;
    }
    while (v3);
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

uint64_t BambiClient::unconfirmedCallsExcludingCall(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v3 = *(long long **)(a1 + 336);
  if (v3)
  {
    char v6 = 0;
    do
    {
      uint64_t v7 = *((void *)v3 + 2);
      if (v7 != *a3)
      {
        uint64_t v8 = *(SipSession **)(v7 + 392);
        if (v8)
        {
          char v9 = SipSession::confirmed(v8);
          v6 |= v9 ^ 1;
          if (a2)
          {
            if ((v9 & 1) == 0)
            {
              std::vector<std::shared_ptr<BambiCall>>::push_back[abi:ne180100](a2, v3 + 1);
              char v6 = 1;
            }
          }
        }
      }
      uint64_t v3 = *(long long **)v3;
    }
    while (v3);
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

void BambiClient::initializeConferenceCall(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, const BambiCallOptions *a4@<X3>, BambiCall **a5@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_28))
  {
    std::string::basic_string[abi:ne180100]<0>(qword_1EBBDC588, "sip:mmtel@conf-factory.");
    __cxa_atexit(MEMORY[0x1E4FBA210], qword_1EBBDC588, &dword_1C51D1000);
    __cxa_guard_release(&_MergedGlobals_28);
  }
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  long long v63 = a2;
  if (*a2 != v7)
  {
    uint64_t v8 = 0;
    char v9 = 0;
    while (1)
    {
      if (v8)
      {
        uint64_t v10 = *(void *)v6;
        uint64_t v11 = *(std::__shared_weak_count **)(*(void *)v6 + 368);
        if (v11)
        {
          int v12 = std::__shared_weak_count::lock(v11);
          if (v12) {
            uint64_t v13 = *(void *)(v10 + 360);
          }
          else {
            uint64_t v13 = 0;
          }
        }
        else
        {
          uint64_t v13 = 0;
          int v12 = 0;
        }
        if (*(char *)(v13 + 4183) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v79, *(const std::string::value_type **)(v13 + 4160), *(void *)(v13 + 4168));
        }
        else
        {
          uint64_t v17 = v13 + 4160;
          *(_OWORD *)long long v79 = *(_OWORD *)v17;
          *(void *)&v79[16] = *(void *)(v17 + 16);
        }
        if (*(char *)(v8 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)(v8 + 4160), *(void *)(v8 + 4168));
        }
        else {
          std::string v68 = *(std::string *)(v8 + 4160);
        }
        char v18 = v79[23];
        if (v79[23] >= 0) {
          uint64_t v19 = v79[23];
        }
        else {
          uint64_t v19 = *(void *)&v79[8];
        }
        std::string::size_type size = HIBYTE(v68.__r_.__value_.__r.__words[2]);
        int v21 = SHIBYTE(v68.__r_.__value_.__r.__words[2]);
        if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v68.__r_.__value_.__l.__size_;
        }
        if (v19 == size)
        {
          if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v22 = &v68;
          }
          else {
            uint64_t v22 = (std::string *)v68.__r_.__value_.__r.__words[0];
          }
          if ((v79[23] & 0x80000000) != 0)
          {
            BOOL v31 = memcmp(*(const void **)v79, v22, *(size_t *)&v79[8]) == 0;
            goto LABEL_43;
          }
          if (v79[23])
          {
            uint64_t v23 = v79[23] - 1;
            uint64_t v24 = v79;
            do
            {
              int v26 = *v24++;
              int v25 = v26;
              int v28 = v22->__r_.__value_.__s.__data_[0];
              uint64_t v22 = (std::string *)((char *)v22 + 1);
              int v27 = v28;
              BOOL v30 = v23-- != 0;
              BOOL v31 = v25 == v27;
            }
            while (v25 == v27 && v30);
LABEL_43:
            if ((v21 & 0x80000000) == 0)
            {
LABEL_44:
              if ((v18 & 0x80) == 0) {
                goto LABEL_45;
              }
LABEL_55:
              operator delete(*(void **)v79);
              if (!v12) {
                goto LABEL_47;
              }
              goto LABEL_46;
            }
          }
          else
          {
            BOOL v31 = 1;
            if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_44;
            }
          }
        }
        else
        {
          BOOL v31 = 0;
          if ((SHIBYTE(v68.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_44;
          }
        }
        operator delete(v68.__r_.__value_.__l.__data_);
        if ((v79[23] & 0x80) != 0) {
          goto LABEL_55;
        }
LABEL_45:
        if (!v12)
        {
LABEL_47:
          if (!v31)
          {
            uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
            (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v48);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"unable to merge calls on different sip stacks", 45);
            *(unsigned char *)(v48 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v48 + 17) = 0;
            *a5 = 0;
            a5[1] = 0;
            goto LABEL_134;
          }
          long long v16 = v9;
          goto LABEL_51;
        }
LABEL_46:
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        goto LABEL_47;
      }
      uint64_t v14 = *(void *)v6;
      uint64_t v15 = *(std::__shared_weak_count **)(*(void *)v6 + 368);
      if (!v15) {
        break;
      }
      long long v16 = std::__shared_weak_count::lock(v15);
      if (v16)
      {
        uint64_t v8 = *(void *)(v14 + 360);
        if (!v9) {
          goto LABEL_51;
        }
        goto LABEL_50;
      }
      uint64_t v8 = 0;
      if (v9) {
        goto LABEL_50;
      }
LABEL_51:
      v6 += 16;
      char v9 = v16;
      if (v6 == v7) {
        goto LABEL_58;
      }
    }
    uint64_t v8 = 0;
    long long v16 = 0;
    if (!v9) {
      goto LABEL_51;
    }
LABEL_50:
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    goto LABEL_51;
  }
  long long v16 = 0;
  uint64_t v8 = 0;
LABEL_58:
  char v9 = v16;
  char v32 = a5;
  if ((SipStack::registeredForVoice((SipStack *)v8) & 1) == 0)
  {
    uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)"not registered for voice calls", 30);
    *(unsigned char *)(v47 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v47 + 17) = 0;
    *a5 = 0;
    a5[1] = 0;
    goto LABEL_134;
  }
  uint64_t v103 = 0;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v99 = 0u;
  long long v100 = 0u;
  long long v97 = 0u;
  long long v98 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v80 = 0u;
  memset(v79, 0, sizeof(v79));
  SipUserAgent::conferenceServerUri(*(std::__shared_weak_count ***)(v8 + 144), (uint64_t)v79);
  uint64_t v33 = HIBYTE(v85);
  if (v85 < 0) {
    uint64_t v33 = v85;
  }
  if (!v33)
  {
    uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v49 + 8), (uint64_t)"no conference server specified", 30);
    *(unsigned char *)(v49 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_93:
    *(unsigned char *)(v49 + 17) = 0;
    *a5 = 0;
    a5[1] = 0;
    goto LABEL_133;
  }
  if (!*(void *)(a1 + 256))
  {
    uint64_t v49 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v49 + 8), (uint64_t)"no call manager delegate specified", 34);
    *(unsigned char *)(v49 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_93;
  }
  v78[0] = 0;
  v78[1] = 0;
  uint64_t v76 = v8;
  long long v77 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(a1 + 160);
  uint64_t v74 = *(void *)(a1 + 152);
  uint64_t v75 = v34;
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiConferenceCall::create(&v76, &v74, v78);
  if (v75) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  }
  if (v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
  }
  memset(v73, 0, sizeof(v73));
  uint64_t v71 = (std::__shared_weak_count *)v78[0];
  v72 = (std::__shared_weak_count *)v78[1];
  if (v78[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v78[1] + 1, 1uLL, memory_order_relaxed);
  }
  LoggableString::LoggableString((LoggableString *)&v68, "initializeConferenceCall");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v73, &v71, &v68);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
  uint64_t v35 = v78[0];
  *((void *)v78[0] + 51) = a3;
  BambiCall::initializeMobileOriginated(v35, (const SipUri *)v79, a4, (uint64_t)&v68);
  char v36 = (*(uint64_t (**)(std::string::size_type, void))(*(void *)v68.__r_.__value_.__l.__size_ + 24))(v68.__r_.__value_.__l.__size_, LODWORD(v68.__r_.__value_.__r.__words[2]));
  ImsResult::~ImsResult((ImsResult *)&v68);
  if (v36) {
    goto LABEL_91;
  }
  uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"created media session for conference call ", 42);
  *(unsigned char *)(v37 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v68, (const std::string *)((char *)v78[0] + 472));
  (*(void (**)(uint64_t, std::string *))(*(void *)v37 + 56))(v37, &v68);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v37 + 17) = 0;
  if (v70 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  if (!BambiConferenceCall::start((uint64_t)v78[0], v63, *(unsigned __int8 *)(v8 + 2672)))
  {
LABEL_91:
    BambiCall::handleInitializationFailure(v78[0]);
    goto LABEL_131;
  }
  long long v39 = v78[0];
  long long v38 = (std::__shared_weak_count *)v78[1];
  if (v78[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v78[1] + 1, 1uLL, memory_order_relaxed);
  }
  long long v40 = (uint64_t *)(a1 + 320);
  unint64_t v41 = 0x9DDFEA08EB382D69 * (((8 * v39) + 8) ^ ((unint64_t)v39 >> 32));
  unint64_t v42 = 0x9DDFEA08EB382D69 * (((unint64_t)v39 >> 32) ^ (v41 >> 47) ^ v41);
  unint64_t v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
  unint64_t v44 = *(void *)(a1 + 328);
  if (!v44)
  {
    unint64_t v46 = 0;
    goto LABEL_108;
  }
  uint8x8_t v45 = (uint8x8_t)vcnt_s8((int8x8_t)v44);
  v45.i16[0] = vaddlv_u8(v45);
  if (v45.u32[0] > 1uLL)
  {
    unint64_t v46 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
    if (v43 >= v44) {
      unint64_t v46 = v43 % v44;
    }
  }
  else
  {
    unint64_t v46 = (v44 - 1) & v43;
  }
  long long v50 = *(void **)(*v40 + 8 * v46);
  if (!v50 || (long long v51 = (void *)*v50) == 0)
  {
LABEL_108:
    long long v53 = operator new(0x20uLL);
    *long long v53 = 0;
    v53[1] = v43;
    v53[2] = v39;
    v53[3] = v38;
    float v54 = (float)(unint64_t)(*(void *)(a1 + 344) + 1);
    float v55 = *(float *)(a1 + 352);
    if (!v44 || (float)(v55 * (float)v44) < v54)
    {
      BOOL v56 = 1;
      if (v44 >= 3) {
        BOOL v56 = (v44 & (v44 - 1)) != 0;
      }
      unint64_t v57 = v56 | (2 * v44);
      unint64_t v58 = vcvtps_u32_f32(v54 / v55);
      if (v57 <= v58) {
        size_t v59 = v58;
      }
      else {
        size_t v59 = v57;
      }
      std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__rehash<true>(a1 + 320, v59);
      unint64_t v44 = *(void *)(a1 + 328);
      if ((v44 & (v44 - 1)) != 0)
      {
        if (v43 >= v44) {
          unint64_t v46 = v43 % v44;
        }
        else {
          unint64_t v46 = v43;
        }
      }
      else
      {
        unint64_t v46 = (v44 - 1) & v43;
      }
    }
    uint64_t v60 = *v40;
    long long v61 = *(void **)(*v40 + 8 * v46);
    if (v61)
    {
      *long long v53 = *v61;
    }
    else
    {
      *long long v53 = *(void *)(a1 + 336);
      *(void *)(a1 + 336) = v53;
      *(void *)(v60 + 8 * v46) = a1 + 336;
      if (!*v53)
      {
LABEL_129:
        ++*(void *)(a1 + 344);
        goto LABEL_130;
      }
      unint64_t v62 = *(void *)(*v53 + 8);
      if ((v44 & (v44 - 1)) != 0)
      {
        if (v62 >= v44) {
          v62 %= v44;
        }
      }
      else
      {
        v62 &= v44 - 1;
      }
      long long v61 = (void *)(*v40 + 8 * v62);
    }
    void *v61 = v53;
    goto LABEL_129;
  }
  while (1)
  {
    unint64_t v52 = v51[1];
    if (v52 == v43) {
      break;
    }
    if (v45.u32[0] > 1uLL)
    {
      if (v52 >= v44) {
        v52 %= v44;
      }
    }
    else
    {
      v52 &= v44 - 1;
    }
    if (v52 != v46) {
      goto LABEL_108;
    }
LABEL_107:
    long long v51 = (void *)*v51;
    if (!v51) {
      goto LABEL_108;
    }
  }
  if ((BambiCall *)v51[2] != v39) {
    goto LABEL_107;
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
LABEL_130:
  *(_OWORD *)a5 = *(_OWORD *)v78;
  char v32 = v78;
LABEL_131:
  void *v32 = 0;
  v32[1] = 0;
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v73);
  if (v78[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v78[1]);
  }
LABEL_133:
  SipUri::~SipUri((SipUri *)v79);
LABEL_134:
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C5617F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
}

void sub_1C5618028()
{
  if (v0) {
    JUMPOUT(0x1C5618030);
  }
  JUMPOUT(0x1C5618004);
}

uint64_t BambiClient::initializeUssdSession(void *a1, uint64_t a2)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 192))(&v10);
  if (v10)
  {
    if (*(_DWORD *)(v10 + 200) == 2) {
      operator new();
    }
    uint64_t v8 = a1[2];
    uint64_t v7 = a1 + 2;
    uint64_t v6 = (unsigned char *)(*(uint64_t (**)(void *))(v8 + 56))(v7);
    (*(void (**)(void *, unsigned char *))(*v7 + 16))(v7, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v6 + 1), (uint64_t)"initializeUssdSession: SIP stack is not initialized", 51);
    v6[17] = 0;
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    uint64_t v5 = a1[2];
    uint64_t v4 = a1 + 2;
    uint64_t v6 = (unsigned char *)(*(uint64_t (**)(void *))(v5 + 56))(v4);
    (*(void (**)(void *, unsigned char *))(*v4 + 16))(v4, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v6 + 1), (uint64_t)"Inavalid stack ", 15);
    v6[17] = 0;
    (*(void (**)(unsigned char *, uint64_t))(*(void *)v6 + 32))(v6, a2);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  v6[17] = 0;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return 0;
}

void sub_1C5618754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  operator delete(v12);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void BambiClient::invalidateUssdSession(BambiClient *this, unint64_t a2)
{
  uint64_t v4 = (void *)((char *)this + 16);
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(void *, uint64_t))(*v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"invalidating USSD session", 25);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  int8x8_t v6 = (int8x8_t)v4[47];
  if (!*(void *)&v6) {
    goto LABEL_18;
  }
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  uint8x8_t v10 = (uint8x8_t)vcnt_s8(v6);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    unint64_t v11 = v9;
    if (v9 >= *(void *)&v6) {
      unint64_t v11 = v9 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v6 - 1) & v9;
  }
  uint64_t v12 = *((void *)this + 48);
  uint64_t v13 = *(void ***)(v12 + 8 * v11);
  if (!v13 || (uint64_t v14 = *v13) == 0)
  {
LABEL_18:
    if (!a2) {
      return;
    }
    goto LABEL_19;
  }
  uint64_t v15 = *(void *)&v6 - 1;
  while (1)
  {
    unint64_t v16 = v14[1];
    if (v16 == v9) {
      break;
    }
    if (v10.u32[0] > 1uLL)
    {
      if (v16 >= *(void *)&v6) {
        v16 %= *(void *)&v6;
      }
    }
    else
    {
      v16 &= v15;
    }
    if (v16 != v11) {
      goto LABEL_18;
    }
LABEL_17:
    uint64_t v14 = (void *)*v14;
    if (!v14) {
      goto LABEL_18;
    }
  }
  if (v14[2] != a2) {
    goto LABEL_17;
  }
  char v18 = (void *)*v14;
  if (v10.u32[0] > 1uLL)
  {
    if (v9 >= *(void *)&v6) {
      v9 %= *(void *)&v6;
    }
  }
  else
  {
    v9 &= v15;
  }
  uint64_t v19 = *(void **)(v12 + 8 * v9);
  do
  {
    uint64_t v20 = v19;
    uint64_t v19 = (void *)*v19;
  }
  while (v19 != v14);
  if (v20 == (void *)((char *)this + 400)) {
    goto LABEL_39;
  }
  unint64_t v21 = v20[1];
  if (v10.u32[0] > 1uLL)
  {
    if (v21 >= *(void *)&v6) {
      v21 %= *(void *)&v6;
    }
  }
  else
  {
    v21 &= v15;
  }
  if (v21 == v9)
  {
LABEL_41:
    if (v18)
    {
      unint64_t v22 = v18[1];
      goto LABEL_43;
    }
  }
  else
  {
LABEL_39:
    if (!v18) {
      goto LABEL_40;
    }
    unint64_t v22 = v18[1];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v23 = v18[1];
      if (v22 >= *(void *)&v6) {
        unint64_t v23 = v22 % *(void *)&v6;
      }
    }
    else
    {
      unint64_t v23 = v22 & v15;
    }
    if (v23 != v9)
    {
LABEL_40:
      *(void *)(v12 + 8 * v9) = 0;
      char v18 = (void *)*v14;
      goto LABEL_41;
    }
LABEL_43:
    if (v10.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&v6) {
        v22 %= *(void *)&v6;
      }
    }
    else
    {
      v22 &= v15;
    }
    if (v22 != v9)
    {
      *(void *)(*((void *)this + 48) + 8 * v22) = v20;
      char v18 = (void *)*v14;
    }
  }
  void *v20 = v18;
  *uint64_t v14 = 0;
  --*((void *)this + 51);
  operator delete(v14);
  if (a2)
  {
LABEL_19:
    uint64_t v17 = *(void (**)(unint64_t))(*(void *)a2 + 32);
    v17(a2);
  }
}

uint64_t BambiClient::sendMessage(void *a1, uint64_t a2, const SipUri *a3, uint64_t a4, uint64_t a5, const std::string *a6, const ims::LocationInfo *a7)
{
  uint64_t v53 = 0;
  float v54 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 192))(&v53);
  uint64_t v14 = v53;
  if (v53)
  {
    uint64_t v15 = *(unsigned __int8 *)(a4 + 23);
    int v16 = (char)v15;
    if ((v15 & 0x80u) != 0) {
      uint64_t v15 = *(void *)(a4 + 8);
    }
    if (v15)
    {
      uint64_t v17 = (long long *)a1[91];
      char v18 = (long long *)a1[92];
      if (v17 != v18)
      {
        long long v38 = a7;
        long long v39 = a3;
        uint64_t v19 = a5;
        uint64_t v20 = a6;
        uint64_t v21 = 0;
        if (v16 >= 0) {
          unint64_t v22 = (const char *)a4;
        }
        else {
          unint64_t v22 = *(const char **)a4;
        }
        while (1)
        {
          unint64_t v23 = *((char *)v17 + v21 + 23) >= 0 ? (char *)v17 + v21 : *(const char **)((char *)v17 + v21);
          if (!strcasecmp(v22, v23)) {
            break;
          }
          v21 += 24;
          if ((long long *)((char *)v17 + v21) == v18)
          {
            a6 = v20;
            a5 = v19;
            a7 = v38;
            a3 = v39;
            goto LABEL_30;
          }
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)v49, (long long *)((char *)v17 + v21 + 24), v18, (uint64_t)v17 + v21);
        a6 = v20;
        a5 = v19;
        a7 = v38;
        a3 = v39;
        uint64_t v29 = v28;
        for (uint64_t i = a1[92]; i != v29; i -= 24)
        {
          if (*(char *)(i - 1) < 0) {
            operator delete(*(void **)(i - 24));
          }
        }
        a1[92] = v29;
        uint64_t v32 = a1[21];
        BOOL v31 = (std::__shared_weak_count *)a1[22];
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v33 = v54;
        uint64_t v53 = v32;
        float v54 = v31;
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        uint64_t v35 = a1[2];
        uint64_t v34 = a1 + 2;
        uint64_t v36 = (*(uint64_t (**)(void *))(v35 + 64))(v34);
        (*(void (**)(void *, uint64_t))(*v34 + 16))(v34, v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"Message is a response to emergency message with call-id ", 56);
        *(unsigned char *)(v36 + 17) = 0;
        ObfuscatedString::ObfuscatedString((uint64_t)v49, (const std::string *)a4);
        (*(void (**)(uint64_t, void **))(*(void *)v36 + 56))(v36, v49);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v36 + 17) = 0;
        if (v52 < 0) {
          operator delete(v51);
        }
        if (v50 < 0) {
          operator delete(v49[0]);
        }
        uint64_t v14 = v53;
      }
    }
LABEL_30:
    ims::LocationInfo::LocationInfo((ims::LocationInfo *)v40, a7);
    uint64_t v27 = SipStack::sendMessage(v14, a3, a4, a5, a6, (const ims::LocationInfo *)v40);
    if (v48 < 0) {
      operator delete(__p);
    }
    if (v46 < 0) {
      operator delete(v45);
    }
    if (v44 < 0) {
      operator delete(v43);
    }
    if (v42 < 0) {
      operator delete(v41);
    }
  }
  else
  {
    uint64_t v25 = a1[2];
    uint64_t v24 = a1 + 2;
    uint64_t v26 = (*(uint64_t (**)(void *))(v25 + 56))(v24);
    (*(void (**)(void *, uint64_t))(*v24 + 16))(v24, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"unable to send message on invalid stack ", 40);
    *(unsigned char *)(v26 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 32))(v26, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v27 = 0;
    *(unsigned char *)(v26 + 17) = 0;
  }
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  return v27;
}

void sub_1C5618E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v14 = *(std::__shared_weak_count **)(v12 - 96);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiClient::sendLazuli(BambiClient *this, const LazuliSendParams *a2, const SipUri *a3)
{
  int8x8_t v6 = (char *)this + 16;
  uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"BambiClient::sendLazuli", 23);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  (*(void (**)(SipStack **__return_ptr, BambiClient *, const LazuliSendParams *))(*(void *)this + 192))(&v11, this, a2);
  if (v11)
  {
    uint64_t v8 = SipStack::sendLazuli(v11, a2, a3);
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(char *))(*(void *)v6 + 56))(v6);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"unable to send message on invalid stack ", 40);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, const LazuliSendParams *))(*(void *)v9 + 32))(v9, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v8 = 0;
    *(unsigned char *)(v9 + 17) = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v8;
}

void sub_1C56190D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiClient::addLazuliParticipant(BambiClient *this, std::string *a2, const SipUri *a3)
{
  int8x8_t v6 = (char *)this + 16;
  uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"BambiClient::addLazuliParticipant", 33);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  (*(void (**)(SipStack **__return_ptr, BambiClient *, std::string *))(*(void *)this + 192))(&v11, this, a2);
  if (v11)
  {
    uint64_t v8 = SipStack::addLazuliParticipant(v11, a2, a3);
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(char *))(*(void *)v6 + 56))(v6);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"unable to add group participant on invalid stack ", 49);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 32))(v9, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v8 = 0;
    *(unsigned char *)(v9 + 17) = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v8;
}

void sub_1C561931C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiClient::removeLazuliParticipant(BambiClient *this, std::string *a2, const SipUri *a3)
{
  int8x8_t v6 = (char *)this + 16;
  uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"BambiClient::removeLazuliParticipant", 36);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  (*(void (**)(SipStack **__return_ptr, BambiClient *, std::string *))(*(void *)this + 192))(&v11, this, a2);
  if (v11)
  {
    uint64_t v8 = SipStack::removeLazuliParticipant(v11, a2, a3);
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(char *))(*(void *)v6 + 56))(v6);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"unable to remove group participant on invalid stack ", 52);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 32))(v9, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v8 = 0;
    *(unsigned char *)(v9 + 17) = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v8;
}

void sub_1C5619560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiClient::changeLazuliGroupInfo(BambiClient *this, const LazuliSendParams *a2, const SipUri *a3)
{
  int8x8_t v6 = (char *)this + 16;
  uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"BambiClient::changeLazuliGroupInfo", 34);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  (*(void (**)(SipStack **__return_ptr, BambiClient *, const LazuliSendParams *))(*(void *)this + 192))(&v11, this, a2);
  if (v11)
  {
    uint64_t v8 = SipStack::changeLazuliGroupInfo(v11, a2, a3);
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(char *))(*(void *)v6 + 56))(v6);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"unable to change group info on invalid stack ", 45);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, const LazuliSendParams *))(*(void *)v9 + 32))(v9, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v8 = 0;
    *(unsigned char *)(v9 + 17) = 0;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v8;
}

void sub_1C56197A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::createMessageSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a5, const std::string *a6)
{
  uint64_t v11 = a1 + 16;
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"BambiClient::createMessageSession", 33);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  uint64_t v13 = *(void *)(*(void *)a2 + 144);
  uint64_t v14 = *(void *)(v13 + 208);
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 216);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v16 = (std::__shared_weak_count *)a4[1];
  uint64_t v20 = *a4;
  uint64_t v21 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = (std::__shared_weak_count *)a5[1];
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v18 = *a5;
  uint64_t v19 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipLazuliManager::createMessageSession(v14, a3, &v20, &v18, a6);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1C5619940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiClient::sendOptionsRequest(void *a1, uint64_t a2, uint64_t a3, const SipUri *a4)
{
  uint64_t v8 = a1 + 2;
  uint64_t v9 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
  (*(void (**)(void *, uint64_t))(*v8 + 16))(v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"BambiClient::sendOptionsRequest", 31);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  (*(void (**)(uint64_t *__return_ptr, void *, uint64_t))(*a1 + 192))(&v12, a1, a2);
  if (v12) {
    SipStack::sendOptionsRequest(v12, a3, a4);
  }
  uint64_t v10 = (*(uint64_t (**)(void *))(*v8 + 56))(v8);
  (*(void (**)(void *, uint64_t))(*v8 + 16))(v8, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"unable to send optiona request on invalid stack ", 48);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return 0;
}

void sub_1C5619BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiClient::reportLazuliSpam(BambiClient *this, const LazuliSpamReportParams *a2)
{
  uint64_t v4 = (char *)this + 16;
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"BambiClient::reportLazuliSpam", 29);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  (*(void (**)(SipStack **__return_ptr, BambiClient *, const LazuliSpamReportParams *))(*(void *)this
                                                                                                 + 192))(&v8, this, a2);
  if (v8) {
    SipStack::reportLazuliSpam(v8, a2);
  }
  uint64_t v6 = (*(uint64_t (**)(char *))(*(void *)v4 + 56))(v4);
  (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"unable to send message on invalid stack ", 40);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, const LazuliSpamReportParams *))(*(void *)v6 + 32))(v6, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return 0;
}

void sub_1C5619DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::setAuthResponse(void *a1, uint64_t a2, SipAuthResponse *a3)
{
  uint64_t v5 = (const std::string *)((char *)a3 + 8);
  uint64_t v6 = *((unsigned __int8 *)a3 + 31);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 2);
  }
  if (v6 == 9)
  {
    if (v7 >= 0) {
      uint64_t v13 = (char *)a3 + 8;
    }
    else {
      uint64_t v13 = (char *)v5->__r_.__value_.__r.__words[0];
    }
    uint64_t v14 = *(void *)v13;
    int v15 = v13[8];
    if (v14 != 0x636E656772656D65 || v15 != 121) {
      goto LABEL_22;
    }
    uint64_t v19 = *(SipAuthClient **)(*(void *)(a1[21] + 144) + 280);
    SipAuthClient::setAuthResponse(v19, a3);
  }
  else
  {
    if (v6 != 3
      || (v7 >= 0
        ? (uint64_t v8 = (unsigned __int16 *)((char *)a3 + 8))
        : (uint64_t v8 = (unsigned __int16 *)v5->__r_.__value_.__r.__words[0]),
          (v9 = *v8, v10 = *((unsigned __int8 *)v8 + 2), v9 == 26995) ? (BOOL v11 = v10 == 112) : (BOOL v11 = 0),
          !v11))
    {
LABEL_22:
      uint64_t v17 = a1 + 2;
      uint64_t v18 = (*(uint64_t (**)(void *))(a1[2] + 56))(a1 + 2);
      (*(void (**)(void *, uint64_t))(*v17 + 16))(v17, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"ignoring auth response with unknown source id '", 47);
      *(unsigned char *)(v18 + 17) = 0;
      LoggableString::LoggableString(&__p, v5);
      (*(void (**)(uint64_t, std::string *))(*(void *)v18 + 40))(v18, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"'", 1);
      *(unsigned char *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v18 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return;
    }
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    (*(void (**)(std::string *__return_ptr, void *))(*a1 + 192))(&__p, a1);
    if (__p.__r_.__value_.__r.__words[0])
    {
      SipAuthClient::setAuthResponse(*(SipAuthClient **)(*(void *)(__p.__r_.__value_.__r.__words[0] + 144) + 280), a3);
    }
    else
    {
      uint64_t v21 = a1[2];
      uint64_t v20 = a1 + 2;
      uint64_t v22 = (*(uint64_t (**)(void *))(v21 + 56))(v20);
      (*(void (**)(void *, uint64_t))(*v20 + 16))(v20, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"ignoring auth response for invalid stack ", 41);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 32))(v22, a2);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v22 + 17) = 0;
    }
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
}

void sub_1C561A11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::handleFatalError(BambiClient *this, const ImsResult *a2)
{
  memset(v17, 0, sizeof(v17));
  if (byte_1EBBDB1A7 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v17, (const std::string::value_type *)BambiClientStatus::kStatusInitialized, *((std::string::size_type *)&BambiClientStatus::kStatusInitialized + 1));
  }
  else
  {
    *(_OWORD *)uint64_t v17 = BambiClientStatus::kStatusInitialized;
    *(void *)&v17[16] = unk_1EBBDB1A0;
  }
  v17[24] = byte_1EBBDB1A8;
  uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 56))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"received fatal error: ", 22);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v4);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  std::string __p = &unk_1F20B2680;
  BOOL v11 = &_bambiDomain;
  int v12 = 1073741831;
  if (*((uint64_t **)a2 + 1) == &_bambiDomain)
  {
    int v5 = *((_DWORD *)a2 + 4);
    ImsResult::~ImsResult((ImsResult *)&__p);
    if (v5 == 1073741831)
    {
      std::string::operator=((std::string *)v17, (const std::string *)BambiClientStatus::kStatusMediaRequestTimedOut);
      v17[24] = byte_1EBBDB1E8;
      goto LABEL_18;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  std::string __p = &unk_1F20B2680;
  BOOL v11 = &_bambiDomain;
  int v12 = 1073741845;
  if (*((uint64_t **)a2 + 1) == &_bambiDomain)
  {
    int v6 = *((_DWORD *)a2 + 4);
    ImsResult::~ImsResult((ImsResult *)&__p);
    if (v6 == 1073741845)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "AVConferenceCrash");
      v9[0] = 0;
      v9[1] = 0;
      BambiClient::endAllCalls((uint64_t)this, (uint64_t)&__p, v9);
      goto LABEL_16;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  std::string __p = &unk_1F20B2680;
  BOOL v11 = &_bambiDomain;
  int v12 = 1073741846;
  if (*((uint64_t **)a2 + 1) != &_bambiDomain)
  {
    ImsResult::~ImsResult((ImsResult *)&__p);
    goto LABEL_18;
  }
  int v7 = *((_DWORD *)a2 + 4);
  ImsResult::~ImsResult((ImsResult *)&__p);
  if (v7 == 1073741846)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "BasebandCrash");
    v8[0] = 0;
    v8[1] = 0;
    BambiClient::endAllCalls((uint64_t)this, (uint64_t)&__p, v8);
LABEL_16:
    if (v13 < 0) {
      operator delete(__p);
    }
  }
LABEL_18:
  if ((v17[23] & 0x80000000) != 0) {
    operator delete(*(void **)v17);
  }
}

void sub_1C561A464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 - 57) < 0) {
    operator delete(*(void **)(v19 - 80));
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::createMediaSessionForStream(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v9 = *(std::__shared_weak_count **)(a2 + 24);
  if (!v9)
  {
    BOOL v11 = 0;
LABEL_9:
    uint64_t v10 = 0;
    goto LABEL_10;
  }
  uint64_t v10 = *(void *)(a2 + 16);
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  BOOL v11 = std::__shared_weak_count::lock(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!v11)
  {
    LOBYTE(v9) = 0;
    goto LABEL_9;
  }
  if (!v10)
  {
    LOBYTE(v9) = 0;
    goto LABEL_10;
  }
  uint64_t v13 = *(void *)(v10 + 376);
  int v12 = *(std::__shared_weak_count **)(v10 + 384);
  if (v12)
  {
    LOBYTE(v9) = 1;
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    if (!v13) {
      goto LABEL_56;
    }
LABEL_10:
    uint64_t v14 = *(void *)(a1 + 224) + 1;
    *(void *)(a1 + 224) = v14;
    BambiCallMediaStream::setMediaSessionId((void *)a2, v14);
    unint64_t v15 = *(void *)(a1 + 224);
    unint64_t v16 = *(void *)(a1 + 288);
    if (v16)
    {
      uint8x8_t v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
      v17.i16[0] = vaddlv_u8(v17);
      if (v17.u32[0] > 1uLL)
      {
        unint64_t v18 = *(void *)(a1 + 224);
        if (v16 <= v15) {
          unint64_t v18 = v15 % v16;
        }
      }
      else
      {
        unint64_t v18 = (v16 - 1) & v15;
      }
      uint64_t v19 = *(void ***)(*(void *)(a1 + 280) + 8 * v18);
      if (v19)
      {
        for (uint64_t i = *v19; i; uint64_t i = (void *)*i)
        {
          unint64_t v21 = i[1];
          if (v21 == v15)
          {
            if (i[2] == v15) {
              goto LABEL_87;
            }
          }
          else
          {
            if (v17.u32[0] > 1uLL)
            {
              if (v21 >= v16) {
                v21 %= v16;
              }
            }
            else
            {
              v21 &= v16 - 1;
            }
            if (v21 != v18) {
              break;
            }
          }
        }
      }
    }
    else
    {
      unint64_t v18 = 0;
    }
    uint64_t i = operator new(0x20uLL);
    *uint64_t i = 0;
    i[1] = v15;
    i[2] = v15;
    i[3] = 0;
    float v22 = (float)(unint64_t)(*(void *)(a1 + 304) + 1);
    float v23 = *(float *)(a1 + 312);
    if (v16 && (float)(v23 * (float)v16) >= v22)
    {
LABEL_77:
      uint64_t v43 = *(void *)(a1 + 280);
      char v44 = *(void **)(v43 + 8 * v18);
      if (v44)
      {
        *uint64_t i = *v44;
      }
      else
      {
        *uint64_t i = *(void *)(a1 + 296);
        *(void *)(a1 + 296) = i;
        *(void *)(v43 + 8 * v18) = a1 + 296;
        if (!*i)
        {
LABEL_86:
          ++*(void *)(a1 + 304);
LABEL_87:
          i[3] = a2;
          if ((v9 & 1) == 0)
          {
            uint64_t v51 = *(void *)(a1 + 16);
            uint64_t v50 = a1 + 16;
            uint64_t v52 = (*(uint64_t (**)(uint64_t))(v51 + 56))(v50);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v50 + 16))(v50, v52);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v52 + 8), (uint64_t)"No valid call", 13);
            *(unsigned char *)(v52 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v52 + 17) = 0;
            *(void *)(a6 + 56) = 0;
            *(void *)(a6 + 64) = 0;
            *(void *)a6 = &unk_1F20B2680;
            *(void *)(a6 + 8) = &_bambiDomain;
            *(_DWORD *)(a6 + 16) = 0x40000000;
            *(void *)(a6 + 40) = 0;
            *(void *)(a6 + 48) = 0;
            *(void *)(a6 + 24) = 0;
            *(void *)(a6 + 32) = 0;
            goto LABEL_155;
          }
          int v46 = *(unsigned __int8 *)(v10 + 754);
          uint64_t v47 = *(void *)(v10 + 520);
          if (v11 && v48)
          {
            char v49 = 1;
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          else
          {
            char v49 = v48 != 0;
          }
          uint64_t v53 = *(std::__shared_weak_count **)(v10 + 368);
          if (v53 && (float v54 = std::__shared_weak_count::lock(v53)) != 0)
          {
            unsigned int v75 = *(unsigned __int8 *)(*(void *)(v10 + 360) + 177);
            std::__shared_weak_count::__release_shared[abi:ne180100](v54);
          }
          else
          {
            unsigned int v75 = MEMORY[0xB1];
          }
          uint64_t v76 = *(RTPTransportManager **)(a1 + 224);
          memset(&v85, 0, sizeof(v85));
          float v55 = *(std::__shared_weak_count **)(v10 + 368);
          if (v55)
          {
            BOOL v56 = std::__shared_weak_count::lock(v55);
            if (v56) {
              uint64_t v57 = *(void *)(v10 + 360);
            }
            else {
              uint64_t v57 = 0;
            }
          }
          else
          {
            uint64_t v57 = 0;
            BOOL v56 = 0;
          }
          long long v77 = v11;
          if (*(char *)(v57 + 2631) < 0) {
            std::string::__init_copy_ctor_external(&v85, *(const std::string::value_type **)(v57 + 2608), *(void *)(v57 + 2616));
          }
          else {
            std::string v85 = *(std::string *)(v57 + 2608);
          }
          if (v56) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v56);
          }
          unint64_t v58 = *(std::__shared_weak_count **)(v10 + 368);
          if (v58)
          {
            unint64_t v58 = std::__shared_weak_count::lock(v58);
            size_t v59 = v58;
            if (v58) {
              unint64_t v58 = *(std::__shared_weak_count **)(v10 + 360);
            }
          }
          else
          {
            size_t v59 = 0;
          }
          uint64_t v60 = (ImsPrefs *)SipStack::prefs((SipStack *)v58);
          BindMediaToTransportInterfaceKey = (void **)ImsPrefs::getBindMediaToTransportInterfaceKey(v60);
          if (ImsPrefs::BOOLValue(v60, BindMediaToTransportInterfaceKey))
          {
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v85.__r_.__value_.__l.__size_;
            }
            if (v59) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v59);
            }
            if (!size)
            {
              BambiCall::interface((BambiCall *)v10, &v84);
              if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v85.__r_.__value_.__l.__data_);
              }
              std::string v85 = v84;
            }
          }
          else if (v59)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v59);
          }
          int v74 = v46;
          *(void *)(a6 + 64) = 0;
          *(_OWORD *)(a6 + 32) = 0u;
          *(_OWORD *)(a6 + 48) = 0u;
          *(_OWORD *)a6 = 0u;
          *(_OWORD *)(a6 + 16) = 0u;
          uint64_t v64 = *(void *)(v10 + 376);
          long long v63 = *(std::__shared_weak_count **)(v10 + 384);
          if (v63) {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v65 = *(std::__shared_weak_count **)(v10 + 368);
          if (v65)
          {
            uint64_t v66 = std::__shared_weak_count::lock(v65);
            if (v66) {
              uint64_t v67 = *(void *)(v10 + 360);
            }
            else {
              uint64_t v67 = 0;
            }
          }
          else
          {
            uint64_t v67 = 0;
            uint64_t v66 = 0;
          }
          if (*(char *)(v67 + 4183) < 0) {
            std::string::__init_copy_ctor_external(&v84, *(const std::string::value_type **)(v67 + 4160), *(void *)(v67 + 4168));
          }
          else {
            std::string v84 = *(std::string *)(v67 + 4160);
          }
          std::string v68 = *(std::__shared_weak_count **)(a5 + 8);
          long long v82 = *(std::__shared_weak_count ***)a5;
          long long v83 = v68;
          if (v68) {
            atomic_fetch_add_explicit(&v68->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v69 = v47 == 0;
          unsigned int v70 = *(_DWORD *)(a2 + 48);
          if (!v69) {
            char v49 = 1;
          }
          uint64_t v71 = v10 + 960;
          v72 = sImsDispatchQueue;
          if (sImsDispatchQueue)
          {
            dispatch_object_t object = (dispatch_object_t)sImsDispatchQueue;
            BOOL v11 = v77;
          }
          else
          {
            v72 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
            sImsDispatchQueue = (uint64_t)v72;
            dispatch_object_t object = v72;
            BOOL v11 = v77;
            if (!v72)
            {
LABEL_141:
              RTPManager::createSession(v64, (void **)&v84.__r_.__value_.__l.__data_, v76, v75, (uint64_t)&v85, a3, &v82, v70, a6, v74 != 0, v49, v71, a4, (uint64_t)&object);
              if (object) {
                dispatch_release(object);
              }
              if (v83) {
                std::__shared_weak_count::__release_weak(v83);
              }
              if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v84.__r_.__value_.__l.__data_);
              }
              if (v66) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v66);
              }
              if (v63) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v63);
              }
              if ((*(unsigned int (**)(void, void))(**(void **)(a6 + 8) + 24))(*(void *)(a6 + 8), *(unsigned int *)(a6 + 16)))
              {
                BambiClient::setMediaSessionIdForStream((void *)a1, (BambiCallMediaStream *)a2, 0);
              }
              if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v85.__r_.__value_.__l.__data_);
              }
LABEL_155:
              if (!v11) {
                return;
              }
              goto LABEL_156;
            }
          }
          dispatch_retain(v72);
          goto LABEL_141;
        }
        unint64_t v45 = *(void *)(*i + 8);
        if ((v16 & (v16 - 1)) != 0)
        {
          if (v45 >= v16) {
            v45 %= v16;
          }
        }
        else
        {
          v45 &= v16 - 1;
        }
        char v44 = (void *)(*(void *)(a1 + 280) + 8 * v45);
      }
      *char v44 = i;
      goto LABEL_86;
    }
    BOOL v24 = 1;
    if (v16 >= 3) {
      BOOL v24 = (v16 & (v16 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v16);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    else {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v16 = *(void *)(a1 + 288);
    }
    if (*(void *)&prime > v16) {
      goto LABEL_39;
    }
    if (*(void *)&prime < v16)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 304) / *(float *)(a1 + 312));
      if (v16 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v16), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (*(void *)&prime <= v34) {
        int8x8_t prime = (int8x8_t)v34;
      }
      if (*(void *)&prime >= v16)
      {
        unint64_t v16 = *(void *)(a1 + 288);
      }
      else
      {
        if (prime)
        {
LABEL_39:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v28 = operator new(8 * *(void *)&prime);
          uint64_t v29 = *(void **)(a1 + 280);
          *(void *)(a1 + 280) = v28;
          if (v29) {
            operator delete(v29);
          }
          uint64_t v30 = 0;
          *(int8x8_t *)(a1 + 288) = prime;
          do
            *(void *)(*(void *)(a1 + 280) + 8 * v30++) = 0;
          while (*(void *)&prime != v30);
          BOOL v31 = *(void **)(a1 + 296);
          if (v31)
          {
            unint64_t v32 = v31[1];
            uint8x8_t v33 = (uint8x8_t)vcnt_s8(prime);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] > 1uLL)
            {
              if (v32 >= *(void *)&prime) {
                v32 %= *(void *)&prime;
              }
            }
            else
            {
              v32 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(a1 + 280) + 8 * v32) = a1 + 296;
            long long v40 = (void *)*v31;
            if (*v31)
            {
              do
              {
                unint64_t v41 = v40[1];
                if (v33.u32[0] > 1uLL)
                {
                  if (v41 >= *(void *)&prime) {
                    v41 %= *(void *)&prime;
                  }
                }
                else
                {
                  v41 &= *(void *)&prime - 1;
                }
                if (v41 != v32)
                {
                  uint64_t v42 = *(void *)(a1 + 280);
                  if (!*(void *)(v42 + 8 * v41))
                  {
                    *(void *)(v42 + 8 * v41) = v31;
                    goto LABEL_68;
                  }
                  *BOOL v31 = *v40;
                  *long long v40 = **(void **)(*(void *)(a1 + 280) + 8 * v41);
                  **(void **)(*(void *)(a1 + 280) + 8 * v41) = v40;
                  long long v40 = v31;
                }
                unint64_t v41 = v32;
LABEL_68:
                BOOL v31 = v40;
                long long v40 = (void *)*v40;
                unint64_t v32 = v41;
              }
              while (v40);
            }
          }
          unint64_t v16 = (unint64_t)prime;
          goto LABEL_72;
        }
        v73 = *(void **)(a1 + 280);
        *(void *)(a1 + 280) = 0;
        if (v73) {
          operator delete(v73);
        }
        unint64_t v16 = 0;
        *(void *)(a1 + 288) = 0;
      }
    }
LABEL_72:
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v16 <= v15) {
        unint64_t v18 = v15 % v16;
      }
      else {
        unint64_t v18 = v15;
      }
    }
    else
    {
      unint64_t v18 = (v16 - 1) & v15;
    }
    goto LABEL_77;
  }
  if (v13)
  {
    LOBYTE(v9) = 1;
    goto LABEL_10;
  }
LABEL_56:
  uint64_t v38 = *(void *)(a1 + 16);
  uint64_t v37 = a1 + 16;
  uint64_t v39 = (*(uint64_t (**)(uint64_t))(v38 + 56))(v37);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(v37, v39);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"No valid mediaManager", 21);
  *(unsigned char *)(v39 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v39 + 17) = 0;
  *(void *)(a6 + 56) = 0;
  *(void *)(a6 + 64) = 0;
  *(void *)a6 = &unk_1F20B2680;
  *(void *)(a6 + 8) = &_bambiDomain;
  *(_DWORD *)(a6 + 16) = 0x40000000;
  *(void *)(a6 + 40) = 0;
  *(void *)(a6 + 48) = 0;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
LABEL_156:
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
}

void sub_1C561AE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, dispatch_object_t object,uint64_t a21,std::__shared_weak_count *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 - 89) < 0) {
    operator delete(*(void **)(v28 - 112));
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void *BambiClient::setMediaSessionIdForStream(void *this, BambiCallMediaStream *a2, uint64_t a3)
{
  if (a2)
  {
    unint64_t v5 = *((void *)a2 + 4);
    if (v5 != a3)
    {
      int v6 = this;
      if (a3)
      {
        if (v5)
        {
          int v7 = this + 2;
          uint64_t v8 = (*(uint64_t (**)(void *))(this[2] + 56))(this + 2);
          (*(void (**)(void *, uint64_t))(*v7 + 16))(v7, v8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Tried to setMediaSessionIdForCall to ", 37);
          *(unsigned char *)(v8 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v8 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" while we have an active mediaSessionId ", 40);
          *(unsigned char *)(v8 + 17) = 0;
LABEL_36:
          std::ostream::operator<<();
          *(unsigned char *)(v8 + 17) = 0;
          this = (void *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v8 + 17) = 0;
          return this;
        }
LABEL_35:
        BambiCallMediaStream::setMediaSessionId(a2, a3);
        uint64_t v21 = v6[2];
        uint64_t v20 = v6 + 2;
        uint64_t v8 = (*(uint64_t (**)(void *))(v21 + 64))(v20);
        (*(void (**)(void *, uint64_t))(*v20 + 16))(v20, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"setMediaSessionIdForCall to ", 28);
        *(unsigned char *)(v8 + 17) = 0;
        goto LABEL_36;
      }
      int v9 = this + 35;
      uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>>>::find<unsigned long long>(this + 35, v5);
      if (!v10) {
        goto LABEL_35;
      }
      int8x8_t v11 = (int8x8_t)v6[36];
      uint64_t v12 = *v10;
      unint64_t v13 = v10[1];
      uint8x8_t v14 = (uint8x8_t)vcnt_s8(v11);
      v14.i16[0] = vaddlv_u8(v14);
      if (v14.u32[0] > 1uLL)
      {
        if (v13 >= *(void *)&v11) {
          v13 %= *(void *)&v11;
        }
      }
      else
      {
        v13 &= *(void *)&v11 - 1;
      }
      unint64_t v15 = *(uint64_t **)(*v9 + 8 * v13);
      do
      {
        unint64_t v16 = v15;
        unint64_t v15 = (uint64_t *)*v15;
      }
      while (v15 != v10);
      if (v16 == v6 + 37) {
        goto LABEL_24;
      }
      unint64_t v17 = v16[1];
      if (v14.u32[0] > 1uLL)
      {
        if (v17 >= *(void *)&v11) {
          v17 %= *(void *)&v11;
        }
      }
      else
      {
        v17 &= *(void *)&v11 - 1;
      }
      if (v17 != v13)
      {
LABEL_24:
        if (v12)
        {
          unint64_t v18 = *(void *)(v12 + 8);
          if (v14.u32[0] > 1uLL)
          {
            unint64_t v19 = *(void *)(v12 + 8);
            if (v18 >= *(void *)&v11) {
              unint64_t v19 = v18 % *(void *)&v11;
            }
          }
          else
          {
            unint64_t v19 = v18 & (*(void *)&v11 - 1);
          }
          if (v19 == v13) {
            goto LABEL_28;
          }
        }
        *(void *)(*v9 + 8 * v13) = 0;
        uint64_t v12 = *v10;
      }
      if (!v12)
      {
LABEL_34:
        uint64_t *v16 = v12;
        uint64_t *v10 = 0;
        --v6[38];
        operator delete(v10);
        goto LABEL_35;
      }
      unint64_t v18 = *(void *)(v12 + 8);
LABEL_28:
      if (v14.u32[0] > 1uLL)
      {
        if (v18 >= *(void *)&v11) {
          v18 %= *(void *)&v11;
        }
      }
      else
      {
        v18 &= *(void *)&v11 - 1;
      }
      if (v18 != v13)
      {
        *(void *)(*v9 + 8 * v18) = v16;
        uint64_t v12 = *v10;
      }
      goto LABEL_34;
    }
  }
  return this;
}

void BambiClient::handleIncomingUssdSession(uint64_t a1@<X0>, void *a2@<X1>, ImsResult *a3@<X8>)
{
  if (*(void *)(a1 + 264))
  {
    if (*a2) {
      operator new();
    }
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    int v6 = &unk_1F20B2680;
    int v7 = &_bambiDomain;
    int v8 = 1073741826;
    unint64_t v5 = (const std::string *)ImsResult::operator<<<char [18]>((uint64_t)&v6, "invalid SIP stack");
    ImsResult::ImsResult(a3, v5);
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    int v6 = &unk_1F20B2680;
    int v7 = &_bambiDomain;
    int v8 = 1073741826;
    uint64_t v4 = (const std::string *)ImsResult::operator<<<char [17]>((uint64_t)&v6, "no USSD delegate");
    ImsResult::ImsResult(a3, v4);
  }
  ImsResult::~ImsResult((ImsResult *)&v6);
}

void sub_1C561B46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void BambiClient::canAcceptIncomingSession(uint64_t a1@<X0>, uint64_t a2@<X1>, SipStack **a3@<X2>, uint64_t a4@<X8>)
{
  int v6 = *a3;
  if (!*a3)
  {
    *(_OWORD *)long long v40 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741826;
    float v23 = (ImsResult *)ImsResult::operator<<<char [18]>((uint64_t)&__p, "invalid SIP stack");
    BOOL v24 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 16), v23);
    ImsResult::ImsResult((ImsResult *)a4, (const std::string *)v24);
    ImsResult::~ImsResult((ImsResult *)&__p);
    return;
  }
  long long v9 = *(void **)(a1 + 336);
  if (!v9)
  {
LABEL_11:
    uint64_t v14 = SipStack::callCount(v6);
    unint64_t v15 = *a3;
    if (v14)
    {
      if (*((unsigned char *)v15 + 2637))
      {
        if (!a2 || (unint64_t v16 = SipMessage::body<SipCallWaitingInfoBody>(a2)) == 0 || !v16[96])
        {
          uint64_t v18 = *(void *)(a1 + 16);
          uint64_t v17 = a1 + 16;
          uint64_t v19 = (*(uint64_t (**)(uint64_t))(v18 + 64))(v17);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v19);
          uint64_t v20 = *(void **)(v19 + 8);
          uint64_t v21 = "network based call waiting is enabled. Incoming INVITEs must have a CW indication";
          uint64_t v22 = 81;
LABEL_45:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
          *(unsigned char *)(v19 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v19 + 17) = 0;
          *(_OWORD *)(a4 + 24) = 0u;
          *(_OWORD *)(a4 + 40) = 0u;
          *(_OWORD *)(a4 + 56) = 0u;
          *(void *)a4 = &unk_1F20B2680;
          *(void *)(a4 + 8) = &SipResultDomain::_domain;
          *(_DWORD *)(a4 + 16) = 486;
          return;
        }
        goto LABEL_20;
      }
      if (a2)
      {
LABEL_20:
        uint64_t v29 = SipMessage::body<SipSdpBody>(a2);
        if (v29)
        {
          uint64_t v31 = *((void *)v29 + 1);
          uint64_t v30 = (std::__shared_weak_count *)*((void *)v29 + 2);
          if (v30) {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v31 && !*((unsigned char *)*a3 + 2638))
          {
            uint64_t v36 = *(void *)(v31 + 416);
            uint64_t v35 = *(void *)(v31 + 424);
            while (v36 != v35)
            {
              if (*(_DWORD *)(v36 + 12) == 3)
              {
                *(_OWORD *)(a4 + 24) = 0u;
                *(_OWORD *)(a4 + 40) = 0u;
                *(_OWORD *)(a4 + 56) = 0u;
                *(void *)a4 = &unk_1F20B2680;
                *(void *)(a4 + 8) = &SipResultDomain::_domain;
                *(_DWORD *)(a4 + 16) = 486;
                if (v30) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
                }
                return;
              }
              v36 += 200;
            }
          }
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
        }
        unint64_t v15 = *a3;
      }
    }
    if (!SipStack::requiresLimitedAvailability(v15) || *((unsigned char *)*a3 + 4232))
    {
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(void *)a4 = &unk_1F20B2680;
      *(void *)(a4 + 8) = &_bambiDomain;
      *(_DWORD *)(a4 + 16) = 0;
      return;
    }
    uint64_t v34 = *(void *)(a1 + 16);
    uint64_t v33 = a1 + 16;
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(v34 + 64))(v33);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v33 + 16))(v33, v19);
    uint64_t v20 = *(void **)(v19 + 8);
    uint64_t v21 = "Can not handle incoming call while in limited connectivity";
    uint64_t v22 = 58;
    goto LABEL_45;
  }
  while (1)
  {
    long long v10 = *(SipSession **)(v9[2] + 392);
    if (!v10 || (SipSession::confirmed(v10) & 1) == 0)
    {
      uint64_t v26 = *(void *)(a1 + 16);
      uint64_t v25 = a1 + 16;
      uint64_t v27 = (*(uint64_t (**)(uint64_t))(v26 + 64))(v25);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"Can not handle incoming call during an existing unconfirmed call", 64);
      *(unsigned char *)(v27 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v27 + 17) = 0;
      uint64_t v28 = (uint64_t)*a3;
      std::string::basic_string[abi:ne180100]<0>(v37, "EstablishingAnotherCall");
      SipStack::callTerminationReason(v28, (uint64_t)v37, (BambiCallTerminationReason *)&__p);
      SipResultDomain::makeResult((SipResultDomain *)&__p, a4);
      goto LABEL_32;
    }
    if (*(void *)(v9[2] + 520))
    {
      SipStack::carrierIdentifier(*a3, &__p);
      uint64_t v12 = (uint64_t **)BambiPrefsManager::instance(v11);
      v37[0] = &__p;
      int v13 = *((unsigned __int8 *)std::__tree<std::__value_type<std::string,BambiCarrierPrefs>,std::__map_value_compare<std::string,std::__value_type<std::string,BambiCarrierPrefs>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BambiCarrierPrefs>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v12, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)v37)+ 97);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (!v13) {
        break;
      }
    }
    long long v9 = (void *)*v9;
    if (!v9)
    {
      int v6 = *a3;
      goto LABEL_11;
    }
  }
  unint64_t v32 = *a3;
  std::string::basic_string[abi:ne180100]<0>(v37, "OnEmergencyCall");
  SipStack::callTerminationReason((uint64_t)v32, (uint64_t)v37, (BambiCallTerminationReason *)&__p);
  SipResultDomain::makeResult((SipResultDomain *)&__p, a4);
LABEL_32:
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (v44 < 0) {
    operator delete(v43);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[1]);
  }
  if (SHIBYTE(v40[0]) < 0) {
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
}

void sub_1C561B9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void BambiClient::handleIncomingSession(void *a1@<X0>, std::__shared_weak_count **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1[32])
  {
    memset(v38, 0, 72);
    SipSessionInterface::stack(*a2, &v36);
    BambiClient::canAcceptIncomingSession((uint64_t)a1, a3, &v36, (uint64_t)v38);
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
    if ((*(unsigned int (**)(void, void))(*(void *)v38[1] + 24))(v38[1], LODWORD(v38[2])))
    {
      ImsResult::ImsResult(a4, (uint64_t)v38);
    }
    else
    {
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      SipSessionInterface::stack(*a2, &v33);
      long long v10 = (std::__shared_weak_count *)operator new(0x738uLL);
      long long v11 = v10;
      v10->__shared_owners_ = 0;
      v10->__shared_weak_owners_ = 0;
      v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E5848;
      uint64_t v12 = v10 + 1;
      v32[0] = v33;
      std::string::size_type v13 = a1[20];
      __p.__r_.__value_.__r.__words[0] = a1[19];
      __p.__r_.__value_.__l.__size_ = v13;
      if (v13) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      }
      BambiCall::BambiCall((uint64_t)&v10[1], v32, (uint64_t *)&__p, 0);
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      if (*((void *)&v32[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32[0] + 1));
      }
      uint64_t v34 = v12;
      uint64_t v35 = v11;
      std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v34, &v11[8].__shared_weak_owners_, (uint64_t)v12);
      memset(v32, 0, sizeof(v32));
      uint64_t v30 = v12;
      uint64_t v31 = v11;
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      LoggableString::LoggableString((LoggableString *)&__p, "handleIncomingSession");
      SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v32, &v30, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      uint64_t v14 = *a2;
      LOWORD(v14[36].__shared_owners_) = 0;
      unint64_t v15 = a2[1];
      uint64_t v27 = v14;
      uint64_t v28 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BambiCall::initializeMobileTerminated((uint64_t)v12, &v27);
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      unint64_t v16 = (uint64_t (***)(void, void *, std::__shared_weak_count **))a1[32];
      uint64_t v25 = v12;
      uint64_t v26 = v11;
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v17 = (**v16)(v16, a1, &v25);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (v17)
      {
        v11[18].__vftable = (std::__shared_weak_count_vtbl *)v17;
        std::__hash_table<std::shared_ptr<BambiCall>,std::hash<std::shared_ptr<BambiCall>>,std::equal_to<std::shared_ptr<BambiCall>>,std::allocator<std::shared_ptr<BambiCall>>>::__emplace_unique_key_args<std::shared_ptr<BambiCall>,std::shared_ptr<BambiCall> const&>((uint64_t)(a1 + 40), (unint64_t)v12, (uint64_t)v12, (uint64_t)v11);
        uint64_t v18 = a1[77];
        v24[0] = (uint64_t)v12;
        v24[1] = (uint64_t)v11;
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        IMSMetricsManager::logEarlyMTSessionRequestedEvent(v18, v24);
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        int v19 = 0;
        uint64_t v20 = &_bambiDomain;
      }
      else
      {
        uint64_t v22 = a1[2];
        uint64_t v21 = a1 + 2;
        uint64_t v23 = (*(uint64_t (**)(void *))(v22 + 56))(v21);
        (*(void (**)(void *, uint64_t))(*v21 + 16))(v21, v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"no delegate to handle incoming call", 35);
        *(unsigned char *)(v23 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v23 + 17) = 0;
        int v19 = 500;
        uint64_t v20 = &SipResultDomain::_domain;
      }
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(void *)a4 = &unk_1F20B2680;
      *(void *)(a4 + 8) = v20;
      *(_DWORD *)(a4 + 16) = v19;
      SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v32);
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else
  {
    memset(&v38[3], 0, 48);
    v38[0] = &unk_1F20B2680;
    v38[1] = &_bambiDomain;
    LODWORD(v38[2]) = 1073741826;
    int v8 = (ImsResult *)ImsResult::operator<<<char [49]>((uint64_t)v38, "no call manager delegate to handle incoming call");
    long long v9 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 2), v8);
    ImsResult::ImsResult((ImsResult *)a4, (const std::string *)v9);
  }
  ImsResult::~ImsResult((ImsResult *)v38);
}

void sub_1C561BE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a24);
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  ImsResult::~ImsResult((ImsResult *)(v32 - 144));
  _Unwind_Resume(a1);
}

void BambiClient::handleIncomingLazuliSession(std::__shared_weak_count **a1@<X1>, uint64_t a2@<X8>)
{
  long long v10 = 0;
  long long v11 = 0;
  SipSessionInterface::stack(*a1, &v8);
  std::allocate_shared[abi:ne180100]<LazuliSession,std::allocator<LazuliSession>,std::shared_ptr<SipStack>,void>(&v8, &v10);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v4 = (std::string *)v10;
  unint64_t v5 = *a1;
  int v6 = a1[1];
  v7[0] = (uint64_t)v5;
  v7[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LazuliSession::initializeMobileTerminated(v4, v7);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C561BFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::handleRTPManagerInitializationStatus(BambiClient *this, int a2, int a3)
{
  int v6 = (void *)((char *)this + 16);
  uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleRTPManagerInitializationStatus appId: ", 44);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" result: ", 9);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  for (uint64_t i = (long long *)v6[23]; i; uint64_t i = *(long long **)i)
  {
    int v19 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v18 = 0u;
    std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, i + 1);
    uint64_t v10 = *((void *)&v18 + 1);
    long long v9 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v10 && *(unsigned __int8 *)(v10 + 177) == a2)
    {
      uint64_t v11 = (*(uint64_t (**)(void *))(*v6 + 64))(v6);
      (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"sip stack media initialized", 27);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v11 + 17) = 0;
      SipStack::setMediaInitialized((SipStack *)v10, a3);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (SBYTE7(v18) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v12 = *((void *)this + 21);
  if (*(unsigned __int8 *)(v12 + 177) != a2)
  {
    uint64_t v13 = *(void *)(v12 + 4240);
    uint64_t v14 = *(std::__shared_weak_count **)(v12 + 4248);
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      int v15 = *(unsigned __int8 *)(v13 + 187);
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (!v15) {
        return;
      }
    }
    else if (!*(unsigned char *)(v13 + 187))
    {
      return;
    }
  }
  uint64_t v16 = (*(uint64_t (**)(void *))(*((void *)this + 2) + 64))(v6);
  (*(void (**)(void *, uint64_t))(*((void *)this + 2) + 16))(v6, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"emergency sip stack media initialized", 37);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  SipStack::setMediaInitialized(*((SipStack **)this + 21), a3);
}

void sub_1C561C384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::pair<std::string const,std::shared_ptr<MessageSession>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiClient::handleMediaSessionCreatedStatus(BambiClient *this, unint64_t a2, char a3)
{
  int v6 = (void *)((char *)this + 16);
  uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleMediaSessionCreatedStatus: ", 33);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" result: ", 9);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>>>::find<unsigned long long>(v6 + 33, a2);
  if (v8)
  {
    if (a3)
    {
      uint64_t v9 = v8[3];
      if (v9)
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v9 + 24);
        if (v10)
        {
          uint64_t v11 = *(BambiCall **)(v9 + 16);
          atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v12 = std::__shared_weak_count::lock(v10);
          std::__shared_weak_count::__release_weak(v10);
          if (v12 && v11)
          {
            if (*((unsigned char *)v11 + 1496))
            {
              if ((*(unsigned int (**)(BambiCall *))(*(void *)v11 + 96))(v11)) {
                BambiCall::notifyMergedCallInitialized(v11);
              }
              BambiCall::setMediaSessionCreated(v11);
            }
            else
            {
              BambiCall::setMediaSessionConfigured(v11);
            }
LABEL_14:
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            return;
          }
LABEL_13:
          uint64_t v13 = (*(uint64_t (**)(void *))(*v6 + 56))(v6);
          (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"handleMediaSessionCreatedStatus couldn't find BambiCall with sessionId: ", 72);
          *(unsigned char *)(v13 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v13 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v13 + 17) = 0;
          RTPManager::terminateSessionWithId(*((RTPManager **)this + 19), a2);
          if (!v12) {
            return;
          }
          goto LABEL_14;
        }
      }
LABEL_12:
      uint64_t v12 = 0;
      goto LABEL_13;
    }
  }
  else if (a3)
  {
    goto LABEL_12;
  }
  BambiClient::terminateCallDueToMediaError((uint64_t)this, a2, 9);
}

void sub_1C561C694(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiClient::terminateCallDueToMediaError(uint64_t a1, unint64_t a2, int a3)
{
  int v6 = std::__hash_table<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>>>::find<unsigned long long>((void *)(a1 + 280), a2);
  if (!v6
    || (uint64_t v7 = (BambiCallMediaStream *)v6[3]) == 0
    || (uint64_t v8 = (std::__shared_weak_count *)*((void *)v7 + 3)) == 0)
  {
    uint64_t v10 = 0;
    goto LABEL_11;
  }
  uint64_t v9 = (BambiCall *)*((void *)v7 + 2);
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = std::__shared_weak_count::lock(v8);
  std::__shared_weak_count::__release_weak(v8);
  if (!v10 || !v9)
  {
LABEL_11:
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"couldn't find a call for Media Session. Terminating session id:", 63);
    *(unsigned char *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    RTPManager::terminateSessionWithId(*(RTPManager **)(a1 + 152), a2);
    if (!v10) {
      return;
    }
    goto LABEL_12;
  }
  uint64_t v12 = (RTPManager *)*((void *)v9 + 47);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v9 + 48);
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (v12)
    {
      uint64_t v12 = (RTPManager *)*((void *)v9 + 47);
      uint64_t v13 = (std::__shared_weak_count *)*((void *)v9 + 48);
      if (v13)
      {
        char v14 = 0;
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_17;
      }
LABEL_16:
      char v14 = 1;
LABEL_17:
      RTPManager::terminateSessionWithId(v12, a2);
      if ((v14 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      BambiClient::setMediaSessionIdForStream((void *)a1, v7, 0);
      memset(&v54, 0, sizeof(v54));
      std::string::basic_string[abi:ne180100]<0>(&v54, "MediaError");
      memset(&v53, 0, sizeof(v53));
      std::string::basic_string[abi:ne180100]<0>(&v53, "");
      switch(a3)
      {
        case 5:
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          {
            v54.__r_.__value_.__l.__size_ = 12;
            uint64_t v20 = (std::string *)v54.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((unsigned char *)&v54.__r_.__value_.__s + 23) = 12;
            uint64_t v20 = &v54;
          }
          strcpy((char *)v20, "MediaTimeout");
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          {
            v53.__r_.__value_.__l.__size_ = 11;
            uint64_t v27 = (std::string *)v53.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((unsigned char *)&v53.__r_.__value_.__s + 23) = 11;
            uint64_t v27 = &v53;
          }
          strcpy((char *)v27, "RTP Timeout");
          break;
        case 6:
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          {
            v54.__r_.__value_.__l.__size_ = 21;
            uint64_t v21 = (std::string *)v54.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((unsigned char *)&v54.__r_.__value_.__s + 23) = 21;
            uint64_t v21 = &v54;
          }
          strcpy((char *)v21, "MediaHeartbeatTimeout");
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          {
            v53.__r_.__value_.__l.__size_ = 12;
            uint64_t v28 = (std::string *)v53.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((unsigned char *)&v53.__r_.__value_.__s + 23) = 12;
            uint64_t v28 = &v53;
          }
          strcpy((char *)v28, "RTCP Timeout");
          break;
        case 7:
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          {
            v54.__r_.__value_.__l.__size_ = 9;
            uint64_t v16 = (std::string *)v54.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((unsigned char *)&v54.__r_.__value_.__s + 23) = 9;
            uint64_t v16 = &v54;
          }
          strcpy((char *)v16, "AudioUnit");
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          {
            v53.__r_.__value_.__l.__size_ = 10;
            uint64_t v26 = (std::string *)v53.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((unsigned char *)&v53.__r_.__value_.__s + 23) = 10;
            uint64_t v26 = &v53;
          }
          strcpy((char *)v26, "Audio Unit");
          break;
        default:
          uint64_t v22 = (std::__shared_weak_count *)*((void *)v9 + 46);
          if (v22)
          {
            uint64_t v23 = std::__shared_weak_count::lock(v22);
            if (v23)
            {
              uint64_t v24 = *((void *)v9 + 45);
              if (v24)
              {
                if (*(unsigned char *)(v24 + 4338))
                {
                  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
                  {
                    v54.__r_.__value_.__l.__size_ = 19;
                    uint64_t v25 = (std::string *)v54.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    *((unsigned char *)&v54.__r_.__value_.__s + 23) = 19;
                    uint64_t v25 = &v54;
                  }
                  strcpy((char *)v25, "RequiresRedialError");
                  std::string::__assign_external(&v53, "Media error requires redial", 0x1BuLL);
LABEL_61:
                  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
                  break;
                }
              }
            }
          }
          else
          {
            uint64_t v23 = 0;
          }
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          {
            v54.__r_.__value_.__l.__size_ = 10;
            uint64_t v29 = (std::string *)v54.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((unsigned char *)&v54.__r_.__value_.__s + 23) = 10;
            uint64_t v29 = &v54;
          }
          strcpy((char *)v29, "MediaError");
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          {
            v53.__r_.__value_.__l.__size_ = 19;
            uint64_t v30 = (std::string *)v53.__r_.__value_.__r.__words[0];
          }
          else
          {
            *((unsigned char *)&v53.__r_.__value_.__s + 23) = 19;
            uint64_t v30 = &v53;
          }
          strcpy((char *)v30, "Unknown media error");
          if (v23) {
            goto LABEL_61;
          }
          break;
      }
      if (!*((void *)v9 + 65)) {
        goto LABEL_87;
      }
      uint64_t v31 = (std::__shared_weak_count *)*((void *)v9 + 46);
      if (!v31) {
        goto LABEL_87;
      }
      uint64_t v32 = std::__shared_weak_count::lock(v31);
      if (!v32) {
        goto LABEL_87;
      }
      long long v33 = v32;
      if (*((void *)v9 + 45))
      {
        uint64_t v34 = (std::__shared_weak_count *)*((void *)v9 + 46);
        if (v34)
        {
          uint64_t v34 = std::__shared_weak_count::lock(v34);
          uint64_t v35 = v34;
          if (v34) {
            uint64_t v34 = (std::__shared_weak_count *)*((void *)v9 + 45);
          }
        }
        else
        {
          uint64_t v35 = 0;
        }
        uint64_t v36 = (ImsPrefs *)SipStack::prefs((SipStack *)v34);
        uint64_t v37 = (void **)ImsPrefs::getContinueEmergencyCallOnMediaTimeoutKey(v36);
        if (ImsPrefs::BOOLValue(v36, v37))
        {
          std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v54.__r_.__value_.__l.__size_;
          }
          if (size == 12)
          {
            uint64_t v39 = &v54;
            if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              uint64_t v39 = (std::string *)v54.__r_.__value_.__r.__words[0];
            }
            std::string::size_type v40 = v39->__r_.__value_.__r.__words[0];
            uint64_t v41 = LODWORD(v39->__r_.__value_.__r.__words[1]);
            if (v40 == *(void *)"MediaTimeout" && v41 == *(unsigned int *)"eout")
            {
              if (v35) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v35);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v33);
              goto LABEL_96;
            }
          }
          BOOL v43 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v54.__r_.__value_.__l.__data_, "MediaHeartbeatTimeout");
          if (v35) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v35);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          if (v43)
          {
LABEL_96:
            uint64_t v48 = *(void *)(a1 + 16);
            uint64_t v47 = a1 + 16;
            uint64_t v49 = (*(uint64_t (**)(uint64_t))(v48 + 48))(v47);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 16))(v47, v49);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v49 + 8), (uint64_t)"a media error has been detected, but the emergency call will be continued", 73);
            *(unsigned char *)(v49 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v49 + 17) = 0;
            BambiCall::suspendWithMediaError((uint64_t)v9, &v54, (uint64_t)v52);
            ImsResult::~ImsResult((ImsResult *)v52);
LABEL_89:
            if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v53.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v54.__r_.__value_.__l.__data_);
            }
            goto LABEL_12;
          }
LABEL_87:
          BambiCall::endWithReason(v9, (uint64_t)&v54, (uint64_t)v51);
          ImsResult::~ImsResult((ImsResult *)v51);
          uint64_t v45 = *(void *)(a1 + 16);
          uint64_t v44 = a1 + 16;
          uint64_t v46 = (*(uint64_t (**)(uint64_t))(v45 + 32))(v44);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v44 + 16))(v44, v46);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)"terminating call with media session id: ", 40);
          *(unsigned char *)(v46 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v46 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)" due to ", 8);
          *(unsigned char *)(v46 + 17) = 0;
          LoggableString::LoggableString(&__p, &v53);
          (*(void (**)(uint64_t, std::string *))(*(void *)v46 + 40))(v46, &__p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v46 + 17) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          goto LABEL_89;
        }
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      goto LABEL_87;
    }
  }
  else if (v12)
  {
    uint64_t v13 = 0;
    goto LABEL_16;
  }
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = a1 + 16;
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(v18 + 56))(v17);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 16))(v17, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"No valid mediaManager", 21);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
LABEL_12:
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
}

void sub_1C561CF58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  if (*(char *)(v17 - 105) < 0) {
    operator delete(*(void **)(v17 - 128));
  }
  if (*(char *)(v17 - 81) < 0) {
    operator delete(*(void **)(v17 - 104));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void BambiClient::handleUpdateSdpStatus(BambiClient *this, unint64_t a2, char a3)
{
  int v6 = (void *)((char *)this + 16);
  uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleUpdateSdpStatus: ", 23);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" result: ", 9);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>>>::find<unsigned long long>(v6 + 33, a2);
  if (v8)
  {
    if (a3)
    {
      uint64_t v9 = v8[3];
      if (v9)
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v9 + 24);
        if (v10)
        {
          uint64_t v11 = *(BambiCall **)(v9 + 16);
          atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v12 = std::__shared_weak_count::lock(v10);
          std::__shared_weak_count::__release_weak(v10);
          if (v12)
          {
            if (v11) {
              BambiCall::setMediaSessionConfigured(v11);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
        }
      }
      return;
    }
  }
  else if (a3)
  {
    return;
  }
  BambiClient::terminateCallDueToMediaError((uint64_t)this, a2, 9);
}

void sub_1C561D1D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiClient::handleActivateMediaSessionStatus(uint64_t a1, unint64_t a2, int a3)
{
  int v6 = (void *)(a1 + 16);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleActivateMediaSessionStatus: ", 34);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" result: ", 9);
  *(unsigned char *)(v7 + 17) = 0;
  if (a3) {
    uint64_t v8 = "failed";
  }
  else {
    uint64_t v8 = "active";
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)v8, 6);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>>>::find<unsigned long long>(v6 + 33, a2);
  if (v9 && !a3 && (uint64_t v10 = v9[3]) != 0)
  {
    uint64_t v11 = *(std::__shared_weak_count **)(v10 + 24);
    if (v11)
    {
      uint64_t v12 = *(void *)(v10 + 16);
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v13 = std::__shared_weak_count::lock(v11);
      std::__shared_weak_count::__release_weak(v11);
      if (v13)
      {
        if (v12)
        {
          if (*(void *)(v12 + 408))
          {
            char v14 = *(std::__shared_weak_count **)(v12 + 368);
            if (v14)
            {
              uint64_t v15 = std::__shared_weak_count::lock(v14);
              if (v15) {
                uint64_t v16 = *(void *)(v12 + 360);
              }
              else {
                uint64_t v16 = 0;
              }
            }
            else
            {
              uint64_t v16 = 0;
              uint64_t v15 = 0;
            }
            if (*(char *)(v16 + 4183) < 0) {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v16 + 4160), *(void *)(v16 + 4168));
            }
            else {
              std::string __p = *(std::string *)(v16 + 4160);
            }
            uint64_t v17 = *(void *)(a1 + 152);
            if (v17)
            {
              uint64_t v18 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v17 + 312, (void **)&__p.__r_.__value_.__l.__data_);
              LODWORD(v17) = (void **)(v17 + 320) != v18 && *((_DWORD *)v18 + 14) == 1;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v15) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v15);
            }
            if (v17)
            {
              memset(&__p, 0, sizeof(__p));
              if (*(char *)(v12 + 1671) < 0) {
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v12 + 1648), *(void *)(v12 + 1656));
              }
              else {
                std::string __p = *(std::string *)(v12 + 1648);
              }
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type size = __p.__r_.__value_.__l.__size_;
              }
              if (size == 6)
              {
                p_p = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if (LODWORD(p_p->__r_.__value_.__l.__data_) ^ 0x2D524D41 | WORD2(p_p->__r_.__value_.__r.__words[0]) ^ 0x4257) {
                  uint64_t v25 = 0;
                }
                else {
                  uint64_t v25 = 16000;
                }
              }
              else if (size == 3)
              {
                uint64_t v20 = &__p;
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v20 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if (LOWORD(v20->__r_.__value_.__l.__data_) == 19777 && v20->__r_.__value_.__s.__data_[2] == 82)
                {
                  uint64_t v25 = 8000;
                }
                else
                {
                  unsigned int v22 = bswap32(LOWORD(v20->__r_.__value_.__l.__data_)) >> 16;
                  if (v22 == 17750)
                  {
                    int v23 = v20->__r_.__value_.__s.__data_[2] - 83;
                  }
                  else if (v22 < 0x4556)
                  {
                    int v23 = -1;
                  }
                  else
                  {
                    int v23 = 1;
                  }
                  if (v23) {
                    uint64_t v25 = 0;
                  }
                  else {
                    uint64_t v25 = 16000;
                  }
                }
              }
              else
              {
                uint64_t v25 = 0;
              }
              (*(void (**)(void, std::string *, uint64_t))(**(void **)(v12 + 408) + 216))(*(void *)(v12 + 408), &__p, v25);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
          }
          (*(void (**)(uint64_t))(*(void *)v12 + 88))(v12);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
  }
  else
  {
    BambiClient::terminateCallDueToMediaError(a1, a2, a3);
  }
}

void sub_1C561D5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void BambiClient::handleDeactivateMediaSessionStatus(BambiClient *this, unint64_t a2, char a3)
{
  int v6 = (void *)((char *)this + 16);
  uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleDeactivateMediaSessionStatus: ", 36);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" result: ", 9);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>>>::find<unsigned long long>(v6 + 33, a2);
  if (v8)
  {
    if (a3)
    {
      uint64_t v9 = v8[3];
      if (v9)
      {
        uint64_t v10 = *(std::__shared_weak_count **)(v9 + 24);
        if (v10)
        {
          uint64_t v11 = *(BambiCall **)(v9 + 16);
          atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v12 = std::__shared_weak_count::lock(v10);
          std::__shared_weak_count::__release_weak(v10);
          if (v12)
          {
            if (v11) {
              BambiCall::handleMediaSessionDeactivated(v11);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
        }
      }
      return;
    }
  }
  else if (a3)
  {
    return;
  }
  BambiClient::terminateCallDueToMediaError((uint64_t)this, a2, 9);
}

void sub_1C561D818(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiClient::handleMediaSessionError(uint64_t a1, unint64_t a2, int a3)
{
  int v6 = (void *)(a1 + 16);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleMediaSessionError for Media session Id:", 45);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>>>::find<unsigned long long>(v6 + 33, a2);
  if (!v8 || (uint64_t v9 = v8[3]) == 0 || (v10 = *(std::__shared_weak_count **)(v9 + 24)) == 0)
  {
    uint64_t v12 = 0;
    goto LABEL_12;
  }
  uint64_t v11 = *(void *)(v9 + 16);
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = std::__shared_weak_count::lock(v10);
  std::__shared_weak_count::__release_weak(v10);
  if (!v12 || !v11) {
    goto LABEL_12;
  }
  uint64_t v13 = *(SipSession **)(v11 + 392);
  if (v13) {
    LOBYTE(v13) = SipSession::confirmed(v13);
  }
  if (a3 != 6 || (v13 & 1) != 0)
  {
LABEL_12:
    BambiClient::terminateCallDueToMediaError(a1, a2, a3);
    if (!v12) {
      return;
    }
    goto LABEL_13;
  }
  uint64_t v14 = (*(uint64_t (**)(void *))(*v6 + 64))(v6);
  (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"handleMediaSessionError ignoring RTCP timeout for unconfirmed call", 66);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
LABEL_13:
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
}

void sub_1C561DA84(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t BambiClient::handleBurstDtmfSendComplete(BambiClient *this)
{
  uint64_t result = *((void *)this + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void BambiClient::handleCallTerminationEvent(BambiClient *this, BambiCallSessionTerminationBaseEvent *lpsrc)
{
  if (lpsrc)
  {
    if (v3)
    {
      if ((v3[10] | 4) != 4)
      {
        uint64_t v12 = *((void *)this + 2);
        uint64_t v11 = (char *)this + 16;
        uint64_t v7 = (*(uint64_t (**)(char *))(v12 + 64))(v11);
        (*(void (**)(char *, uint64_t))(*(void *)v11 + 16))(v11, v7);
        uint64_t v8 = *(void **)(v7 + 8);
        uint64_t v9 = "call termination wasn't local hangup. Not checking for held call to resume.";
        uint64_t v10 = 75;
        goto LABEL_9;
      }
      BambiClient::activeCall((uint64_t)this, &v42);
      uint64_t v4 = v42;
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      if (v4)
      {
        uint64_t v6 = *((void *)this + 2);
        unint64_t v5 = (char *)this + 16;
        uint64_t v7 = (*(uint64_t (**)(char *))(v6 + 64))(v5);
        (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))(v5, v7);
        uint64_t v8 = *(void **)(v7 + 8);
        uint64_t v9 = "we already have an active call. Not checking for held call to resume.";
        uint64_t v10 = 69;
LABEL_9:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
        *(unsigned char *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v7 + 17) = 0;
        return;
      }
      long long v42 = 0;
      BOOL v43 = 0;
      uint64_t v44 = 0;
      uint64_t v39 = 0;
      std::string::size_type v40 = 0;
      BambiClient::unconfirmedCallsExcludingCall((uint64_t)this, (uint64_t *)&v42, &v39);
      if (v42 != v43)
      {
        uint64_t v14 = *((void *)this + 2);
        uint64_t v13 = (char *)this + 16;
        uint64_t v15 = (*(uint64_t (**)(char *))(v14 + 64))(v13);
        (*(void (**)(char *, uint64_t))(*(void *)v13 + 16))(v13, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"we have an unconfirmed call. Not checking for held call to resume.", 66);
        *(unsigned char *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v15 + 17) = 0;
LABEL_39:
        uint64_t v39 = (void **)&v42;
        std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v39);
        return;
      }
      uint64_t v39 = 0;
      std::string::size_type v40 = 0;
      uint64_t v41 = 0;
      uint64_t v16 = (long long *)*((void *)this + 42);
      if (!v16) {
        goto LABEL_32;
      }
      do
      {
        uint64_t v17 = *((void *)v16 + 2);
        if (v17)
        {
          if (*(_DWORD *)(v17 + 448) == 3)
          {
            uint64_t v18 = *(void *)(v17 + 392);
            if (!v18 || ((*(uint64_t (**)(uint64_t))(*(void *)v18 + 264))(v18) & 1) == 0) {
              std::vector<std::shared_ptr<BambiCall>>::push_back[abi:ne180100]((uint64_t *)&v39, v16 + 1);
            }
          }
        }
        uint64_t v16 = *(long long **)v16;
      }
      while (v16);
      uint64_t v19 = v39;
      uint64_t v20 = v40;
      if (v39 == v40)
      {
LABEL_32:
        uint64_t v32 = *((void *)this + 2);
        uint64_t v31 = (char *)this + 16;
        uint64_t v33 = (*(uint64_t (**)(char *))(v32 + 64))(v31);
        (*(void (**)(char *, uint64_t))(*(void *)v31 + 16))(v31, v33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"no held call to resume", 22);
        *(unsigned char *)(v33 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v33 + 17) = 0;
LABEL_38:
        uint64_t v45 = &v39;
        std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
        goto LABEL_39;
      }
      uint64_t v21 = 0;
      unsigned int v22 = 0;
      do
      {
        int v23 = (BambiCall *)*v19;
        if (!v21 || *((void *)v23 + 55) > *((void *)v21 + 55))
        {
          uint64_t v24 = (std::__shared_weak_count *)v19[1];
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          unsigned int v22 = v24;
          uint64_t v21 = v23;
        }
        v19 += 2;
      }
      while (v19 != v20);
      if (v21)
      {
        uint64_t v26 = *((void *)this + 2);
        uint64_t v25 = (char *)this + 16;
        uint64_t v27 = *(uint64_t (**)(char *))(v26 + 64);
        if (!*((unsigned char *)v21 + 1810))
        {
          uint64_t v37 = v27(v25);
          (*(void (**)(char *, uint64_t))(*(void *)v25 + 16))(v25, v37);
          char v38 = (unsigned char *)ImsOutStream::operator<<(v37, "call ended due to local hangup. Auto-resuming last held call.");
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v38[17] = 0;
          BambiCall::performLocalResume(v21);
LABEL_36:
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          goto LABEL_38;
        }
        uint64_t v28 = v27(v25);
        (*(void (**)(char *, uint64_t))(*(void *)v25 + 16))(v25, v28);
        uint64_t v29 = ImsOutStream::operator<<(v28, "last held call held by user, not auto-resuming call.");
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        uint64_t v30 = (unsigned char *)(v29 + 17);
      }
      else
      {
        uint64_t v35 = *((void *)this + 2);
        uint64_t v34 = (char *)this + 16;
        uint64_t v36 = (*(uint64_t (**)(char *))(v35 + 56))(v34);
        (*(void (**)(char *, uint64_t))(*(void *)v34 + 16))(v34, v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"no last held call to resume", 27);
        *(unsigned char *)(v36 + 17) = 0;
        uint64_t v30 = (unsigned char *)(v36 + 17);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      unsigned char *v30 = 0;
      goto LABEL_36;
    }
  }
}

void sub_1C561E130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  a16 = (void **)&a10;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a16);
  a16 = (void **)&a13;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

uint64_t BambiClient::activeCall@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void **)(this + 336);
  if (v3)
  {
    while (1)
    {
      this = *(void *)(v3[2] + 392);
      if (this)
      {
        this = SipSession::confirmed((SipSession *)this);
        if (this)
        {
          uint64_t v4 = v3[2];
          if ((*(_DWORD *)(v4 + 448) & 0xFFFFFFFE) != 2)
          {
            this = *(void *)(v4 + 392);
            if (!this) {
              goto LABEL_13;
            }
            this = SipSession::terminating((SipSession *)this);
            if ((this & 1) == 0)
            {
              uint64_t v4 = v3[2];
              this = *(void *)(v4 + 392);
              if (!this) {
                goto LABEL_13;
              }
              this = (*(uint64_t (**)(uint64_t))(*(void *)this + 264))(this);
              if ((this & 1) == 0) {
                break;
              }
            }
          }
        }
      }
      uint64_t v3 = (void *)*v3;
      if (!v3) {
        goto LABEL_10;
      }
    }
    uint64_t v4 = v3[2];
LABEL_13:
    uint64_t v5 = v3[3];
    *a2 = v4;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

void BambiClient::invalidateStream(BambiClient *this, BambiCallMediaStream *a2)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
    if (v4)
    {
      uint64_t v5 = *((void *)a2 + 2);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v6 = std::__shared_weak_count::lock(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (v6 && v5)
      {
        uint64_t v7 = *(RTPManager **)(v5 + 376);
        uint64_t v8 = *(std::__shared_weak_count **)(v5 + 384);
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        RTPManager::terminateSessionWithId(v7, *((void *)a2 + 4));
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    BambiClient::setMediaSessionIdForStream(this, a2, 0);
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C561E31C(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiClient::invalidateCall(void *a1, unint64_t *a2)
{
  uint64_t v4 = a1 + 2;
  uint64_t v5 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
  (*(void (**)(void *, uint64_t))(*v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"invalidating call ", 18);
  *(unsigned char *)(v5 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v47, (const std::string *)(*a2 + 472));
  (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 56))(v5, &v47);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v49 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  unint64_t v6 = *a2;
  uint64_t v7 = *(std::__shared_weak_count **)(*a2 + 368);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8) {
      uint64_t v9 = *(void *)(v6 + 360);
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v10 = a1 + 40;
  uint64_t v11 = std::__hash_table<std::shared_ptr<BambiCall>,std::hash<std::shared_ptr<BambiCall>>,std::equal_to<std::shared_ptr<BambiCall>>,std::allocator<std::shared_ptr<BambiCall>>>::find<std::shared_ptr<BambiCall>>(a1 + 40, *a2);
  if (v11)
  {
    uint64_t v12 = v11;
    int8x8_t v13 = (int8x8_t)a1[41];
    uint64_t v14 = *v11;
    unint64_t v15 = v11[1];
    uint8x8_t v16 = (uint8x8_t)vcnt_s8(v13);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] > 1uLL)
    {
      if (v15 >= *(void *)&v13) {
        v15 %= *(void *)&v13;
      }
    }
    else
    {
      v15 &= *(void *)&v13 - 1;
    }
    uint64_t v17 = *(uint64_t **)(*v10 + 8 * v15);
    do
    {
      uint64_t v18 = v17;
      uint64_t v17 = (uint64_t *)*v17;
    }
    while (v17 != v11);
    if (v18 == a1 + 42) {
      goto LABEL_28;
    }
    unint64_t v19 = v18[1];
    if (v16.u32[0] > 1uLL)
    {
      if (v19 >= *(void *)&v13) {
        v19 %= *(void *)&v13;
      }
    }
    else
    {
      v19 &= *(void *)&v13 - 1;
    }
    if (v19 != v15)
    {
LABEL_28:
      if (v14)
      {
        unint64_t v20 = *(void *)(v14 + 8);
        if (v16.u32[0] > 1uLL)
        {
          unint64_t v21 = *(void *)(v14 + 8);
          if (v20 >= *(void *)&v13) {
            unint64_t v21 = v20 % *(void *)&v13;
          }
        }
        else
        {
          unint64_t v21 = v20 & (*(void *)&v13 - 1);
        }
        if (v21 == v15) {
          goto LABEL_32;
        }
      }
      *(void *)(*v10 + 8 * v15) = 0;
      uint64_t v14 = *v11;
    }
    if (!v14)
    {
LABEL_38:
      *uint64_t v18 = v14;
      *uint64_t v11 = 0;
      --a1[43];
      unsigned int v22 = (std::__shared_weak_count *)v11[3];
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      operator delete(v12);
      goto LABEL_41;
    }
    unint64_t v20 = *(void *)(v14 + 8);
LABEL_32:
    if (v16.u32[0] > 1uLL)
    {
      if (v20 >= *(void *)&v13) {
        v20 %= *(void *)&v13;
      }
    }
    else
    {
      v20 &= *(void *)&v13 - 1;
    }
    if (v20 != v15)
    {
      *(void *)(*v10 + 8 * v20) = v18;
      uint64_t v14 = *v11;
    }
    goto LABEL_38;
  }
LABEL_41:
  if (*(char *)(v9 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(v9 + 4160), *(void *)(v9 + 4168));
  }
  else {
    std::string v46 = *(std::string *)(v9 + 4160);
  }
  int v23 = (void *)a1[42];
  if (v23)
  {
    uint64_t v24 = 0;
    while (1)
    {
      uint64_t v25 = v23[2];
      if (!v25) {
        goto LABEL_85;
      }
      uint64_t v26 = *(std::__shared_weak_count **)(v25 + 368);
      if (!v26) {
        goto LABEL_85;
      }
      uint64_t v27 = std::__shared_weak_count::lock(v26);
      if (!v27) {
        goto LABEL_85;
      }
      uint64_t v28 = v27;
      if (*(void *)(v25 + 360)) {
        break;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
LABEL_85:
      int v23 = (void *)*v23;
      if (!v23) {
        goto LABEL_90;
      }
    }
    uint64_t v29 = v23[2];
    uint64_t v30 = *(std::__shared_weak_count **)(v29 + 368);
    if (v30)
    {
      uint64_t v31 = std::__shared_weak_count::lock(v30);
      if (v31) {
        uint64_t v32 = *(void *)(v29 + 360);
      }
      else {
        uint64_t v32 = 0;
      }
    }
    else
    {
      uint64_t v32 = 0;
      uint64_t v31 = 0;
    }
    if (*(char *)(v32 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)(v32 + 4160), *(void *)(v32 + 4168));
    }
    else {
      std::string v47 = *(std::string *)(v32 + 4160);
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v47.__r_.__value_.__l.__size_;
    }
    std::string::size_type v34 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
    if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v34 = v46.__r_.__value_.__l.__size_;
    }
    if (size == v34)
    {
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v35 = &v46;
      }
      else {
        uint64_t v35 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&v47.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        uint64_t v45 = (void *)v47.__r_.__value_.__r.__words[0];
        BOOL v44 = memcmp(v47.__r_.__value_.__l.__data_, v35, v47.__r_.__value_.__l.__size_) == 0;
        goto LABEL_81;
      }
      if (!*((unsigned char *)&v47.__r_.__value_.__s + 23))
      {
        BOOL v44 = 1;
        if (!v31) {
          goto LABEL_84;
        }
        goto LABEL_83;
      }
      uint64_t v36 = HIBYTE(v47.__r_.__value_.__r.__words[2]) - 1;
      uint64_t v37 = &v47;
      do
      {
        int v39 = v37->__r_.__value_.__s.__data_[0];
        uint64_t v37 = (std::string *)((char *)v37 + 1);
        int v38 = v39;
        int v41 = v35->__r_.__value_.__s.__data_[0];
        uint64_t v35 = (std::string *)((char *)v35 + 1);
        int v40 = v41;
        BOOL v43 = v36-- != 0;
        BOOL v44 = v38 == v40;
      }
      while (v38 == v40 && v43);
      if ((*((unsigned char *)&v47.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_82:
        if (!v31)
        {
LABEL_84:
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          v24 += v44;
          goto LABEL_85;
        }
LABEL_83:
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        goto LABEL_84;
      }
    }
    else
    {
      BOOL v44 = 0;
      if ((*((unsigned char *)&v47.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_82;
      }
    }
    uint64_t v45 = (void *)v47.__r_.__value_.__r.__words[0];
LABEL_81:
    operator delete(v45);
    goto LABEL_82;
  }
  uint64_t v24 = 0;
LABEL_90:
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v46.__r_.__value_.__l.__data_);
    if (v24) {
      goto LABEL_95;
    }
  }
  else if (v24)
  {
    goto LABEL_95;
  }
  SipStack::allCallsEnded((SipStack *)v9);
LABEL_95:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C561E804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiClient::dumpState(uint64_t a1, const std::string *a2, uint64_t *a3, int a4, int a5)
{
  v34[19] = *MEMORY[0x1E4F143B8];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a3[1], (uint64_t)"********************************** STATE DUMP **********************************", 80);
  *((unsigned char *)a3 + 17) = 0;
  (*(void (**)(uint64_t *, void *(*)(void *)))(*a3 + 64))(a3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a3[1], (uint64_t)"Reason:             ", 20);
  *((unsigned char *)a3 + 17) = 0;
  LoggableString::LoggableString((std::string *)__p, a2);
  (*(void (**)(uint64_t *, void **))(*a3 + 40))(a3, __p);
  (*(void (**)(uint64_t *, void *(*)(void *)))(*a3 + 64))(a3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a3 + 17) = 0;
  if (SBYTE7(v32) < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a3[1], (uint64_t)"OS Version:         ", 20);
  *((unsigned char *)a3 + 17) = 0;
  ims::osVersion(&v30);
  LoggableString::LoggableString((std::string *)__p, &v30);
  (*(void (**)(uint64_t *, void **))(*a3 + 40))(a3, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a3[1], (uint64_t)" (", 2);
  *((unsigned char *)a3 + 17) = 0;
  ims::osBuild(&v28);
  LoggableString::LoggableString(&v29, &v28);
  (*(void (**)(uint64_t *, std::string *))(*a3 + 40))(a3, &v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a3[1], (uint64_t)")", 1);
  *((unsigned char *)a3 + 17) = 0;
  (*(void (**)(uint64_t *, void *(*)(void *)))(*a3 + 64))(a3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a3 + 17) = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v32) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  for (uint64_t i = *(long long **)(a1 + 200); i; uint64_t i = *(long long **)i)
  {
    v33[0] = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v32 = 0u;
    std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, i + 1);
    uint64_t v11 = (SipStack *)*((void *)&v32 + 1);
    uint64_t v12 = v33[0];
    if (v33[0]) {
      atomic_fetch_add_explicit(&v33[0]->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipStack::dumpState(v11, (ImsOutStream *)a3);
    (*(void (**)(uint64_t *, void *(*)(void *)))(*a3 + 64))(a3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a3 + 17) = 0;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v33[0]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33[0]);
    }
    if (SBYTE7(v32) < 0) {
      operator delete(__p[0]);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a3[1], (uint64_t)"Emergency SIP Stack:", 20);
  *((unsigned char *)a3 + 17) = 0;
  (*(void (**)(uint64_t *, void *(*)(void *)))(*a3 + 64))(a3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a3 + 17) = 0;
  SipStack::dumpState(*(SipStack **)(a1 + 168), (ImsOutStream *)a3);
  if (*(void *)(a1 + 344))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a3[1], (uint64_t)"Calls:", 6);
    *((unsigned char *)a3 + 17) = 0;
    (*(void (**)(uint64_t *, void *(*)(void *)))(*a3 + 64))(a3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a3 + 17) = 0;
    for (uint64_t j = *(uint64_t ***)(a1 + 336); j; uint64_t j = (uint64_t **)*j)
      BambiCall::printCallInfo((BambiCall *)j[2], (ImsOutStream *)a3, 0);
  }
  if (a4)
  {
    bzero(&__p[1], 0x238uLL);
    uint64_t v14 = MEMORY[0x1E4FBA460] + 64;
    v34[0] = MEMORY[0x1E4FBA460] + 64;
    uint64_t v15 = MEMORY[0x1E4FBA3F8];
    uint8x8_t v16 = *(void **)(MEMORY[0x1E4FBA3F8] + 16);
    __p[0] = *(void **)(MEMORY[0x1E4FBA3F8] + 8);
    *(void **)((char *)__p + *((void *)__p[0] - 3)) = v16;
    __p[1] = 0;
    uint64_t v17 = (std::ios_base *)((char *)__p + *((void *)__p[0] - 3));
    std::ios_base::init(v17, &v32);
    uint64_t v18 = (void *)(MEMORY[0x1E4FBA460] + 24);
    v17[1].__vftable = 0;
    v17[1].__fmtflags_ = -1;
    __p[0] = v18;
    v34[0] = v14;
    MEMORY[0x1C878DF80](&v32);
    if (!std::filebuf::open()) {
      std::ios_base::clear((std::ios_base *)((char *)__p + *((void *)__p[0] - 3)), *(_DWORD *)((char *)v33 + *((void *)__p[0] - 3)) | 4);
    }
    if ((*((unsigned char *)v33 + *((void *)__p[0] - 3)) & 5) == 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a3[1], (uint64_t)"imsCoreInfo:", 12);
      *((unsigned char *)a3 + 17) = 0;
      (*(void (**)(uint64_t *, void *(*)(void *)))(*a3 + 64))(a3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a3 + 17) = 0;
      (*(void (**)(uint64_t *, void *(*)(void *)))(*a3 + 64))(a3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a3 + 17) = 0;
      memset(&v30, 0, sizeof(v30));
      unint64_t v19 = (std::locale::id *)MEMORY[0x1E4FBA258];
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)__p + *((void *)__p[0] - 3)));
        unint64_t v20 = std::locale::use_facet((const std::locale *)&v29, v19);
        unsigned __int8 v21 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale((std::locale *)&v29);
        unsigned int v22 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (uint64_t)&v30, v21);
        uint64_t v23 = *a3;
        if ((*((unsigned char *)v22 + *(void *)(*v22 - 24) + 32) & 5) != 0) {
          break;
        }
        (*(void (**)(uint64_t *, std::string *))(v23 + 32))(a3, &v30);
        (*(void (**)(uint64_t *, void *(*)(void *)))(*a3 + 64))(a3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *((unsigned char *)a3 + 17) = 0;
      }
      (*(void (**)(uint64_t *, void *(*)(void *)))(v23 + 64))(a3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a3 + 17) = 0;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
    }
    __p[0] = *(void **)v15;
    *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(v15 + 24);
    MEMORY[0x1C878DF90](&v32);
    std::istream::~istream();
    MEMORY[0x1C878E270](v34);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a3[1], (uint64_t)"********************************************************************************", 80);
  *((unsigned char *)a3 + 17) = 0;
  (*(void (**)(uint64_t *, void *(*)(void *)))(*a3 + 64))(a3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a3 + 17) = 0;
  if (a5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a3[1], (uint64_t)"********************************** IMS Config **********************************", 80);
    *((unsigned char *)a3 + 17) = 0;
    (*(void (**)(uint64_t *, void *(*)(void *)))(*a3 + 64))(a3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a3 + 17) = 0;
    BambiPrefsManager::dumpState((BambiPrefsManager *)a3, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a3[1], (uint64_t)"********************************************************************************", 80);
    *((unsigned char *)a3 + 17) = 0;
    (*(void (**)(uint64_t *, void *(*)(void *)))(*a3 + 64))(a3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a3 + 17) = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a3[1], (uint64_t)"********************************************************************************", 80);
  *((unsigned char *)a3 + 17) = 0;
  uint64_t v25 = (ims *)(*(uint64_t (**)(uint64_t *, void *(*)(void *)))(*a3 + 64))(a3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a3 + 17) = 0;
  uint64_t v26 = (ImsLogger *)ims::logger(v25);
  ImsLogger::dumpState(v26, (ImsOutStream *)a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)a3[1], (uint64_t)"********************************************************************************", 80);
  *((unsigned char *)a3 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t *, void *(*)(void *)))(*a3 + 64))(a3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a3 + 17) = 0;
  return result;
}

void sub_1C561F294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::ifstream::~ifstream(&a28);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA3F8];
  uint64_t v3 = *MEMORY[0x1E4FBA3F8];
  *a1 = *MEMORY[0x1E4FBA3F8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x1C878DF90](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1C878E270](a1 + 53);
  return a1;
}

void BambiClient::logPrefix(BambiClient *this, ImsOutStream *a2)
{
  LoggableString::LoggableString((LoggableString *)__p, "BambiClient: ");
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C561F4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiClient::notifyCallsOfRegistrationChange(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  v9[0] = &unk_1F20B2680;
  v9[1] = &_bambiDomain;
  int v10 = 1073741839;
  BOOL v7 = *(uint64_t **)(a3 + 8) == &_bambiDomain && *(_DWORD *)(a3 + 16) == 1073741839;
  ImsResult::~ImsResult((ImsResult *)v9);
  uint64_t result = *(void *)(a1 + 256);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)result + 24))(result, a2, v7 | a4);
  }
  return result;
}

uint64_t BambiClient::systemWillSleep(uint64_t this)
{
  *(unsigned char *)(this + 672) = 1;
  return this;
}

uint64_t non-virtual thunk to'BambiClient::systemWillSleep(uint64_t this)
{
  *(unsigned char *)(this + 552) = 1;
  return this;
}

unsigned char *BambiClient::systemWillNotSleep(unsigned char *this)
{
  if (this[672]) {
    return (unsigned char *)(*(uint64_t (**)(void))(*(void *)this + 280))();
  }
  return this;
}

uint64_t non-virtual thunk to'BambiClient::systemWillNotSleep(uint64_t this)
{
  if (*(unsigned char *)(this + 552)) {
    return (*(uint64_t (**)(void))(*(void *)(this - 120) + 280))();
  }
  return this;
}

uint64_t BambiClient::systemHasPoweredOn(BambiClient *this)
{
  *((unsigned char *)this + 672) = 0;
  for (uint64_t i = (long long *)*((void *)this + 25); i; uint64_t i = *(long long **)i)
  {
    uint64_t v9 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v8 = 0u;
    std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, i + 1);
    uint64_t v3 = *((void *)&v8 + 1);
    char v4 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v3 && *(_DWORD *)(v3 + 200) == 2) {
      SipStack::handleSystemWake((SipStack *)v3);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (SBYTE7(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v5 = *((void *)this + 21);
  if (*(_DWORD *)(v5 + 200) == 2) {
    SipStack::handleSystemWake((SipStack *)v5);
  }
  uint64_t result = *((void *)this + 31);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
  }
  return result;
}

void sub_1C561F754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::pair<std::string const,std::shared_ptr<MessageSession>>::~pair((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'BambiClient::systemHasPoweredOn(BambiClient *this)
{
  return BambiClient::systemHasPoweredOn((BambiClient *)((char *)this - 120));
}

void BambiClient::exitEmergencyState(BambiClient *this)
{
  uint64_t v2 = (void *)*((void *)this + 42);
  if (v2)
  {
    while (1)
    {
      char v4 = (BambiCall *)v2[2];
      uint64_t v3 = (std::__shared_weak_count *)v2[3];
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v2 = (void *)*v2;
      if (*((void *)v4 + 65))
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ExitEmergencyState");
        BambiCall::endWithReason(v4, (uint64_t)&__p, (uint64_t)v10);
        ImsResult::~ImsResult((ImsResult *)v10);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          break;
        }
      }
      if (v3) {
        goto LABEL_7;
      }
LABEL_8:
      if (!v2) {
        goto LABEL_12;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v3) {
      goto LABEL_8;
    }
LABEL_7:
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    goto LABEL_8;
  }
LABEL_12:
  memset(&__p, 0, sizeof(__p));
  uint64_t v5 = *((void *)this + 21);
  if (*(char *)(v5 + 4183) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
    uint64_t v5 = *((void *)this + 21);
  }
  else
  {
    std::string __p = *(std::string *)(v5 + 4160);
  }
  SipStack::deinitialize((SipStack *)v5, 0, 0);
  IMSClientManager::instance(v6);
  IPTelephonyManager::getInstance(&v7);
  IPTelephonyManager::deinitializeNasClient(v7, (void **)&__p.__r_.__value_.__l.__data_);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C561F8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::setMediaManagerForStack(void *a1, void **a2, int a3, int a4, char a5, uint64_t a6)
{
  uint64_t v33 = 0;
  std::string::size_type v34 = 0;
  (*(void (**)(SipStack **__return_ptr))(*a1 + 192))(&v33);
  long long v13 = a1 + 2;
  uint64_t v12 = a1[2];
  if (v33)
  {
    uint64_t v14 = (*(uint64_t (**)(void *))(v12 + 64))(a1 + 2);
    (*(void (**)(void *, uint64_t))(*v13 + 16))(a1 + 2, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"BambiClient::setMediaManagerForStack to AP ", 43);
    *(unsigned char *)(v14 + 17) = 0;
    if (a3) {
      uint64_t v15 = "Enable";
    }
    else {
      uint64_t v15 = "Disable";
    }
    if (a3) {
      uint64_t v16 = 6;
    }
    else {
      uint64_t v16 = 7;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)v15, v16);
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" for ", 5);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v14 + 32))(v14, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (a1[43]
      && (uint64_t v17 = (ImsPrefs *)SipStack::prefs(v33),
          AllowRTPStackHandoverKey = (void **)ImsPrefs::getAllowRTPStackHandoverKey(v17),
          (ImsPrefs::BOOLValue(v17, AllowRTPStackHandoverKey) & 1) == 0))
    {
      uint64_t v30 = (*(uint64_t (**)(void *))(*v13 + 56))(a1 + 2);
      (*(void (**)(void *, uint64_t))(*v13 + 16))(a1 + 2, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"Can't change media manager while ongoing calls", 46);
      *(unsigned char *)(v30 + 17) = 0;
      std::string v28 = (unsigned char *)(v30 + 17);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      uint64_t v19 = a1[19];
      unint64_t v20 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v19 + 312, a2);
      if ((void **)(v19 + 320) != v20)
      {
        uint64_t v21 = *((unsigned int *)v20 + 14);
        if (v21)
        {
          uint64_t v22 = (*(uint64_t (**)(void *))(*v13 + 64))(a1 + 2);
          (*(void (**)(void *, uint64_t))(*v13 + 16))(a1 + 2, v22);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"BambiClient::setMediaManagerForStack currently ", 47);
          *(unsigned char *)(v22 + 17) = 0;
          if (v21 == 1) {
            uint64_t v23 = "AP";
          }
          else {
            uint64_t v23 = "Baseband";
          }
          if (v21 == 1) {
            uint64_t v24 = 2;
          }
          else {
            uint64_t v24 = 8;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)v23, v24);
          *(unsigned char *)(v22 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v22 + 17) = 0;
          if v21 != 1 || (a3)
          {
            int v31 = 0;
            if (v21 == 1 || !a3) {
              goto LABEL_32;
            }
            uint64_t v32 = (*(uint64_t (**)(void *))(*v13 + 64))(a1 + 2);
            (*(void (**)(void *, uint64_t))(*v13 + 16))(a1 + 2, v32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v32 + 8), (uint64_t)"Setting mediaManager to AP", 26);
            *(unsigned char *)(v32 + 17) = 0;
            uint64_t v26 = (unsigned char *)(v32 + 17);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            uint64_t v21 = 1;
          }
          else
          {
            uint64_t v25 = (*(uint64_t (**)(void *))(*v13 + 64))(a1 + 2);
            (*(void (**)(void *, uint64_t))(*v13 + 16))(a1 + 2, v25);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"Setting mediaManager to Baseband", 32);
            *(unsigned char *)(v25 + 17) = 0;
            uint64_t v26 = (unsigned char *)(v25 + 17);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            uint64_t v21 = 2;
          }
          unsigned char *v26 = 0;
          int v31 = 1;
LABEL_32:
          RTPManager::setWifiHotspot(a1[19], (uint64_t)a2, a4);
          if (v31)
          {
            SipStack::setMediaAppId(v33, a5);
            BambiClient::initializeMediaApplicationId((uint64_t)a1);
          }
          else
          {
            (*(void (**)(void *, void **, uint64_t, uint64_t))(*a1 + 64))(a1, a2, v21, a6);
          }
          goto LABEL_25;
        }
      }
      uint64_t v29 = (*(uint64_t (**)(void *))(*v13 + 64))(a1 + 2);
      (*(void (**)(void *, uint64_t))(*v13 + 16))(a1 + 2, v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"Can't change media manager to unknown type", 42);
      *(unsigned char *)(v29 + 17) = 0;
      std::string v28 = (unsigned char *)(v29 + 17);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    uint64_t v27 = (*(uint64_t (**)(void *))(v12 + 56))(a1 + 2);
    (*(void (**)(void *, uint64_t))(*v13 + 16))(v13, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"Unable to set media manager app Id: invalid stack ", 50);
    *(unsigned char *)(v27 + 17) = 0;
    std::string v28 = (unsigned char *)(v27 + 17);
    (*(void (**)(uint64_t, void **))(*(void *)v27 + 32))(v27, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *std::string v28 = 0;
LABEL_25:
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
}

void sub_1C5620038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiClient::initializeMediaApplicationId(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 152);
  if (v2)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 32);
    return v3();
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 16);
    uint64_t v5 = a1 + 16;
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v5);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"no media manager to initialize appId", 36);
    *(unsigned char *)(v7 + 17) = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
  }
  return result;
}

void BambiClient::handleDeviceEvents(uint64_t a1, uint64_t a2, __int16 a3)
{
  if ((a3 & 0x20) != 0)
  {
    BambiAirplaneMode::set((BambiAirplaneMode *)(a1 + 704), 1);
    uint64_t v7 = *(void *)(a1 + 240);
    v23[1] = 0;
    uint64_t v24 = 0;
    v23[0] = 0;
    IMSNasDeviceClient::setBasebandAvailable(v7, 0, (uint64_t)v23);
    if ((SHIBYTE(v24) & 0x80000000) == 0) {
      goto LABEL_25;
    }
    long long v8 = (std::string *)v23;
    goto LABEL_24;
  }
  if ((a3 & 0x40) == 0) {
    goto LABEL_3;
  }
  BambiAirplaneMode::set((BambiAirplaneMode *)(a1 + 704), 0);
  uint64_t v16 = *(void *)(a1 + 240);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v22 = *(std::string *)a2;
  }
  IMSNasDeviceClient::setBasebandAvailable(v16, 1, (uint64_t)&v22);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
  {
    long long v8 = &v22;
LABEL_24:
    operator delete(v8->__r_.__value_.__l.__data_);
  }
LABEL_25:
  uint64_t v17 = *(void *)(a1 + 616);
  uint64_t v18 = v17 + 176;
  for (uint64_t i = *(void *)(v17 + 184); i != v18; uint64_t i = *(void *)(i + 8))
    (*(void (**)(void, BOOL))(**(void **)(i + 16) + 248))(*(void *)(i + 16), (a3 & 0x20) == 0);
LABEL_3:
  __int16 v6 = a3 & 0xFFFD;
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  (*(void (**)(SipStack **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 192))(&v20, a1, a2);
  if (!v20)
  {
    uint64_t v10 = *(void *)(a1 + 16);
    uint64_t v9 = a1 + 16;
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(v10 + 56))(v9);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"No stack for ", 13);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 32))(v11, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)". Ignoring device events - ", 27);
    *(unsigned char *)(v11 + 17) = 0;
    deviceEventsToString(v6);
  }
  if (a3) {
    SipUserAgent::clearLastPreferredPublicUri(*((SipUserAgent **)v20 + 18));
  }
  if ((a3 & 8) != 0)
  {
    uint64_t v12 = *(void *)(a1 + 152);
    if (v12)
    {
      if ((v13 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v12 + 312, (void **)a2), (void **)(v12 + 320) != v13)&& *((_DWORD *)v13 + 14) == 1|| (uint64_t v14 = (ImsPrefs *)SipStack::prefs(v20), EnableAPOnlyModeKey = (void **)ImsPrefs::getEnableAPOnlyModeKey(v14), ImsPrefs::BOOLValue(v14, EnableAPOnlyModeKey)))
      {
        RTPManager::handleAudioReadyEvent(*(RTPManager **)(a1 + 152));
      }
    }
  }
  else
  {
    SipStack::handleDeviceEvents(v20, a3 & 0xFFFD);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_1C5620490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::handleNetworkEvents(void *a1, unsigned __int8 *a2, unsigned int a3)
{
  if (a3)
  {
    if (a3 > 2)
    {
      uint64_t v7 = a1 + 2;
      uint64_t v8 = (*(uint64_t (**)(void *))(a1[2] + 48))(a1 + 2);
      (*(void (**)(void *, uint64_t))(*v7 + 16))(v7, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Unsupported network event received: ", 36);
      *(unsigned char *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
    }
    else
    {
      uint64_t v12 = 0;
      long long v13 = 0;
      (*(void (**)(uint64_t *__return_ptr, void *, unsigned __int8 *))(*a1 + 192))(&v12, a1, a2);
      if (v12)
      {
        *(unsigned char *)(v12 + 4338) = a3 == 1;
      }
      else
      {
        uint64_t v10 = a1[2];
        uint64_t v9 = a1 + 2;
        uint64_t v11 = (*(uint64_t (**)(void *))(v10 + 56))(v9);
        (*(void (**)(void *, uint64_t))(*v9 + 16))(v9, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"No stack for ", 13);
        *(unsigned char *)(v11 + 17) = 0;
        (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v11 + 32))(v11, a2);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v11 + 17) = 0;
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
  }
  else
  {
    uint64_t v6 = a1[19];
    RTPManager::srvccHandoverStarted(v6, a2);
  }
}

void sub_1C5620754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::handleConnectivityChange(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  (*(void (**)(SipStack **__return_ptr))(*a1 + 192))(&v9);
  if (v9)
  {
    SipStack::setConnectivityAvailable(v9, a3);
  }
  else
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1 + 2;
    uint64_t v8 = (*(uint64_t (**)(void *))(v7 + 56))(v6);
    (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"unable to set connectivity: inavlid SIP stack ", 46);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C56208C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::stackDeinitComplete(void *a1, uint64_t *a2)
{
  memset(&v16, 0, sizeof(v16));
  uint64_t v4 = *a2;
  if (*(char *)(*a2 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v4 + 4160), *(void *)(v4 + 4168));
  }
  else {
    std::string v16 = *(std::string *)(v4 + 4160);
  }
  uint64_t v5 = a1 + 2;
  uint64_t v6 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
  (*(void (**)(void *, uint64_t))(a1[2] + 16))(a1 + 2, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Sip Stack ", 10);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 32))(v6, &v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" deinitialized", 14);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(v14, "sip.stack");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::info((uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Sip Stack ", 10);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 32))(v7, &v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" deinitialized", 14);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (*(unsigned char *)(*a2 + 4290))
  {
    uint64_t v8 = (*(uint64_t (**)(void *))(*v5 + 64))(a1 + 2);
    (*(void (**)(void *, uint64_t))(*v5 + 16))(a1 + 2, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Stack marked as invalidated-- skipping uninit delegate call", 59);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    BambiClient::invalidateStack(a1, (unsigned __int8 *)&v16);
  }
  else
  {
    uint64_t v9 = a1[31];
    if (v9)
    {
      if (BambiClientStatus::kStatusUninitialized[23] < 0) {
        std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)BambiClientStatus::kStatusUninitialized, *(std::string::size_type *)&BambiClientStatus::kStatusUninitialized[8]);
      }
      else {
        std::string v10 = *(std::string *)BambiClientStatus::kStatusUninitialized;
      }
      char v11 = byte_1EBBDB1C8;
      (*(void (**)(uint64_t, std::string *, std::string *))(*(void *)v9 + 16))(v9, &v16, &v10);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
    }
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1C5620CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'BambiClient::stackDeinitComplete(uint64_t a1, uint64_t *a2)
{
}

void BambiClient::stackInitComplete(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v6 = (*(uint64_t (**)(void, void))(**(void **)(a3 + 8) + 24))(*(void *)(a3 + 8), *(unsigned int *)(a3 + 16));
  uint64_t v8 = a1 + 16;
  uint64_t v7 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(v7 + 56))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(a1 + 16, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"SIP stack init failed: ", 23);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v9);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(v7 + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(a1 + 16, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Sip Stack ", 10);
    *(unsigned char *)(v10 + 17) = 0;
    uint64_t v11 = *a2;
    if (*(char *)(*a2 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v11 + 4160), *(void *)(v11 + 4168));
    }
    else {
      std::string v28 = *(std::string *)(v11 + 4160);
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v10 + 32))(v10, &v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" initialized", 12);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v28, "sip.stack");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v12 = ims::info((uint64_t)&v28, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Sip Stack ", 10);
    *(unsigned char *)(v12 + 17) = 0;
    uint64_t v13 = *a2;
    if (*(char *)(*a2 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v13 + 4160), *(void *)(v13 + 4168));
    }
    else {
      std::string v25 = *(std::string *)(v13 + 4160);
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v12 + 32))(v12, &v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" initialized", 12);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v14 = *(void *)(a1 + 248);
  if (v14)
  {
    uint64_t v15 = *a2;
    if (*(char *)(*a2 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v15 + 4160), *(void *)(v15 + 4168));
    }
    else {
      std::string v28 = *(std::string *)(v15 + 4160);
    }
    int v16 = (*(uint64_t (**)(void, void))(**(void **)(a3 + 8) + 24))(*(void *)(a3 + 8), *(unsigned int *)(a3 + 16));
    int v17 = v16;
    if (v16) {
      uint64_t v18 = (const std::string::value_type **)BambiClientStatus::kStatusInitFailed;
    }
    else {
      uint64_t v18 = (const std::string::value_type **)&BambiClientStatus::kStatusInitialized;
    }
    uint64_t v19 = &BambiClientStatus::kStatusInitFailed[23];
    if (!v16) {
      uint64_t v19 = (unsigned __int8 *)&byte_1EBBDB1A7;
    }
    if ((char)*v19 < 0)
    {
      unint64_t v20 = *v18;
      if (v16) {
        uint64_t v21 = (long long *)BambiClientStatus::kStatusInitFailed;
      }
      else {
        uint64_t v21 = &BambiClientStatus::kStatusInitialized;
      }
      std::string::__init_copy_ctor_external(&v23, v20, *((void *)v21 + 1));
    }
    else
    {
      std::string v23 = *(std::string *)v18;
    }
    if (v17) {
      std::string v22 = (long long *)BambiClientStatus::kStatusInitFailed;
    }
    else {
      std::string v22 = &BambiClientStatus::kStatusInitialized;
    }
    char v24 = *((unsigned char *)v22 + 24);
    (*(void (**)(uint64_t, std::string *, std::string *))(*(void *)v14 + 16))(v14, &v28, &v23);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C56211F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'BambiClient::stackInitComplete(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void BambiClient::handleMediaStackSwitchComplete(void *a1, uint64_t a2, uint64_t a3)
{
  int v3 = a3;
  uint64_t v5 = a1[32];
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a2, a3);
  }
  if (v3 == 1)
  {
    uint64_t v7 = a1[17];
    int v6 = (std::__shared_weak_count *)a1[18];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    LoggableString::LoggableString((LoggableString *)__p, "handleMediaStackSwitchComplete");
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 1174405120;
    uint64_t v8[2] = ___ZN11BambiClient30handleMediaStackSwitchCompleteERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE12RTPStackTypeb_block_invoke;
    void v8[3] = &__block_descriptor_tmp_169;
    v8[4] = a1;
    v8[5] = v7;
    uint64_t v9 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, void **, void *))(*a1 + 208))(a1, __p, v8);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1C56213B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11BambiClient30handleMediaStackSwitchCompleteERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE12RTPStackTypeb_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        for (uint64_t i = *(void **)(v3 + 336); i; uint64_t i = (void *)*i)
        {
          uint64_t v7 = i[2];
          if (v7)
          {
            uint64_t v8 = *(SipSession **)(v7 + 392);
            if (v8)
            {
              if ((SipSession::confirmed(v8) & 1) == 0
                && BambiCall::shouldFakeLocalQOS((BambiCall *)i[2]))
              {
                uint64_t v9 = i[2];
                uint64_t v10 = operator new(2uLL);
                std::string __p = v10;
                _WORD *v10 = 0;
                uint64_t v12 = v10 + 1;
                uint64_t v13 = v10 + 1;
                BambiCall::setQualityOfServiceEstablished(v9, 0xFFFFFFFF, 1, &__p);
                if (__p)
                {
                  uint64_t v12 = __p;
                  operator delete(__p);
                }
              }
            }
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C56214B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11BambiClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11BambiClientEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void BambiClient::handleInputFrequencyLevelUpdate(BambiClient *this, unint64_t a2, const __CFData *a3)
{
  uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>>>::find<unsigned long long>((void *)this + 35, a2);
  if (v5 && (uint64_t v6 = v5[3]) != 0)
  {
    if (*(_DWORD *)(v6 + 48) != 2)
    {
      uint64_t v8 = *((void *)this + 2);
      uint64_t v7 = (char *)this + 16;
      uint64_t v9 = (*(uint64_t (**)(char *))(v8 + 48))(v7);
      (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))(v7, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Received request to update input frequency level for non-audio stream type ", 75);
      *(unsigned char *)(v9 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
    }
    uint64_t v10 = *(std::__shared_weak_count **)(v6 + 24);
    if (v10)
    {
      char v11 = *(BambiCall **)(v6 + 16);
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = std::__shared_weak_count::lock(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (v12)
      {
        if (v11) {
          BambiCall::setInputFrequencyLevel(v11, a3);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
  }
  else
  {
    uint64_t v14 = *((void *)this + 2);
    uint64_t v13 = (char *)this + 16;
    uint64_t v15 = (*(uint64_t (**)(char *))(v14 + 56))(v13);
    (*(void (**)(char *, uint64_t))(*(void *)v13 + 16))(v13, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"handleInputFrequencyLevelUpdate: No stream found for ", 53);
    *(unsigned char *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" frequency: ", 12);
    *(unsigned char *)(v15 + 17) = 0;
    v17[0] = (ims::CFType *)&unk_1F20E38B0;
    v17[1] = a3;
    if (a3) {
      CFRetain(a3);
    }
    v17[0] = (ims::CFType *)&unk_1F20D2EE0;
    int v16 = off_1F20D2EF0(v17, (ImsOutStream *)v15);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)v16 + 17) = 0;
    ims::CFType::~CFType((ims::CFType *)v17);
  }
}

void sub_1C56217DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiClient::handleOutputFrequencyLevelUpdate(BambiClient *this, unint64_t a2, const __CFData *a3)
{
  uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>>>::find<unsigned long long>((void *)this + 35, a2);
  if (v5 && (uint64_t v6 = v5[3]) != 0)
  {
    if (*(_DWORD *)(v6 + 48) != 2)
    {
      uint64_t v8 = *((void *)this + 2);
      uint64_t v7 = (char *)this + 16;
      uint64_t v9 = (*(uint64_t (**)(char *))(v8 + 48))(v7);
      (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))(v7, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Received request to update output frequency level for non-audio stream type ", 76);
      *(unsigned char *)(v9 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
    }
    uint64_t v10 = *(std::__shared_weak_count **)(v6 + 24);
    if (v10)
    {
      char v11 = *(BambiCall **)(v6 + 16);
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = std::__shared_weak_count::lock(v10);
      std::__shared_weak_count::__release_weak(v10);
      if (v12)
      {
        if (v11) {
          BambiCall::setOutputFrequencyLevel(v11, a3);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
  }
  else
  {
    uint64_t v14 = *((void *)this + 2);
    uint64_t v13 = (char *)this + 16;
    uint64_t v15 = (*(uint64_t (**)(char *))(v14 + 56))(v13);
    (*(void (**)(char *, uint64_t))(*(void *)v13 + 16))(v13, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"handleOutputFrequencyLevelUpdate: No stream found for ", 54);
    *(unsigned char *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v15 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" frequency: ", 12);
    *(unsigned char *)(v15 + 17) = 0;
    v17[0] = (ims::CFType *)&unk_1F20E38B0;
    v17[1] = a3;
    if (a3) {
      CFRetain(a3);
    }
    v17[0] = (ims::CFType *)&unk_1F20D2EE0;
    int v16 = off_1F20D2EF0(v17, (ImsOutStream *)v15);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)v16 + 17) = 0;
    ims::CFType::~CFType((ims::CFType *)v17);
  }
}

void sub_1C5621ACC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiClient::updatePortForSession(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7 = std::__hash_table<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>>>::find<unsigned long long>((void *)(a1 + 280), a2);
  if (v7 && (uint64_t v8 = v7[3]) != 0)
  {
    if (*(_DWORD *)(v8 + 48) != a4)
    {
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = a1 + 16;
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(v10 + 48))(v9);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Request to update port for stream of type ", 42);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(void *)v11 + 32))(v11, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)", but actual stream is of type ", 31);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(void *)v11 + 32))(v11, __p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v11 + 17) = 0;
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
    }
    *(_WORD *)(v8 + 56) = a3;
    uint64_t v12 = *(std::__shared_weak_count **)(v8 + 24);
    if (v12)
    {
      uint64_t v13 = *(void *)(v8 + 16);
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = std::__shared_weak_count::lock(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v14)
      {
        if (v13)
        {
          uint64_t v15 = *(void *)(v13 + 200);
          if (v15) {
            SDPSession::updatePortForMedia(v15, a3, a4);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
  }
  else
  {
    uint64_t v17 = *(void *)(a1 + 16);
    uint64_t v16 = a1 + 16;
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(v17 + 56))(v16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Unable to update port for non-existent sessionId ", 49);
    *(unsigned char *)(v18 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
  }
}

void sub_1C5621DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void BambiClient::handleLRBTChanged(BambiClient *this, unint64_t a2, int a3)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  BambiClient::callForMediaSession((BambiClient *)&v12, (uint64_t)this, a2);
  uint64_t v4 = v12;
  if (v12 && *(void *)(v12 + 408))
  {
    if (a3)
    {
      uint64_t v11 = 0;
      long long v9 = 0u;
      *(_OWORD *)uint64_t v10 = 0u;
      uint64_t v5 = v13;
      v8[0] = v12;
      v8[1] = (uint64_t)v13;
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        BambiCallEvent::BambiCallEvent((uint64_t)&v9, 5, v8);
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      else
      {
        BambiCallEvent::BambiCallEvent((uint64_t)&v9, 5, v8);
      }
      (*(void (**)(void, long long *))(**(void **)(v4 + 408) + 16))(*(void *)(v4 + 408), &v9);
    }
    else
    {
      uint64_t v11 = 0;
      long long v9 = 0u;
      *(_OWORD *)uint64_t v10 = 0u;
      uint64_t v6 = v13;
      v7[0] = v12;
      v7[1] = (uint64_t)v13;
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        BambiCallEvent::BambiCallEvent((uint64_t)&v9, 6, v7);
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      else
      {
        BambiCallEvent::BambiCallEvent((uint64_t)&v9, 6, v7);
      }
      (*(void (**)(void, long long *))(**(void **)(v4 + 408) + 16))(*(void *)(v4 + 408), &v9);
    }
    *(void *)&long long v9 = &unk_1F20B8640;
    if (v10[1]) {
      std::__shared_weak_count::__release_weak(v10[1]);
    }
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1C5621F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::callAudioSourceIdForSession(BambiClient *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  BambiClient::callForMediaSession((BambiClient *)&v5, (uint64_t)this, a2);
  if (v5) {
    std::string::operator=(a3, v5 + 40);
  }
  uint64_t v4 = v6;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C5622060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::sdpSessionForSession(BambiClient *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  BambiClient::callForMediaSession((BambiClient *)&v6, (uint64_t)this, a2);
  if (v6)
  {
    uint64_t v4 = *(void *)(v6 + 208);
    *a3 = *(void *)(v6 + 200);
    a3[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  uint64_t v5 = v7;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void BambiClient::interfaceForSession(BambiClient *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  BambiClient::callForMediaSession((BambiClient *)&v5, (uint64_t)this, a2);
  if (v5) {
    BambiCall::interface(v5, a3);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  uint64_t v4 = v6;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C562219C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::addressForSession(BambiClient *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  BambiClient::callForMediaSession((BambiClient *)&v5, (uint64_t)this, a2);
  if (v5)
  {
    BambiCall::address(v5);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  uint64_t v4 = v6;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C5622230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL BambiClient::sessionMobileOriginated(BambiClient *this, unint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  BambiClient::callForMediaSession((BambiClient *)&v4, (uint64_t)this, a2);
  if (v4) {
    BOOL v2 = *(unsigned __int8 *)(v4 + 1496) != 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

void BambiClient::reportCodecForSession(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  BambiClient::callForMediaSession((BambiClient *)&v6, a1, a2);
  uint64_t v4 = v6;
  if (v6)
  {
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __p = *(std::string *)a3;
    }
    std::string::operator=((std::string *)(v4 + 1648), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C5622340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiClient::metricsManager@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 624);
  *a2 = *(void *)(this + 616);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void BambiClient::awdCallIdForSession(int8x8_t *this@<X0>, unint64_t a2@<X1>, std::string *a3@<X8>)
{
  int8x8_t v4 = this[36];
  if (!*(void *)&v4) {
    goto LABEL_17;
  }
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v4);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = a2;
    if (*(void *)&v4 <= a2) {
      unint64_t v6 = a2 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v6 = (*(void *)&v4 - 1) & a2;
  }
  uint64_t v7 = *(void **)(*(void *)&this[35] + 8 * v6);
  if (!v7) {
    goto LABEL_17;
  }
  uint64_t v8 = (void *)*v7;
  if (!v8) {
    goto LABEL_17;
  }
  while (1)
  {
    unint64_t v9 = v8[1];
    if (v9 == a2) {
      break;
    }
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v4) {
        v9 %= *(void *)&v4;
      }
    }
    else
    {
      v9 &= *(void *)&v4 - 1;
    }
    if (v9 != v6) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_17;
    }
  }
  if (v8[2] != a2) {
    goto LABEL_16;
  }
  uint64_t v11 = v8[3];
  if (!v11 || (uint64_t v12 = *(std::__shared_weak_count **)(v11 + 24)) == 0)
  {
LABEL_17:
    uint64_t v10 = 0;
    goto LABEL_18;
  }
  uint64_t v13 = *(void *)(v11 + 16);
  atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = std::__shared_weak_count::lock(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (v10 && v13)
  {
    if (*(char *)(v13 + 519) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v13 + 496), *(void *)(v13 + 504));
    }
    else
    {
      long long v14 = *(_OWORD *)(v13 + 496);
      a3->__r_.__value_.__r.__words[2] = *(void *)(v13 + 512);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v14;
    }
    goto LABEL_19;
  }
LABEL_18:
  std::string::basic_string[abi:ne180100]<0>(a3, "");
  if (v10)
  {
LABEL_19:
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C5622504(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiClient::performBlock(uint64_t a1, uint64_t a2)
{
  v2[0] = 0;
  v2[1] = 0;
  BambiClient::performBlock(a1, a2, (uint64_t)v2);
}

void BambiClient::performBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 640);
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  ImsBlockQueue::addBlock<std::shared_ptr<SipLockable>>(v3, a2);
}

{
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *(void *)(a1 + 640);
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  ImsBlockQueue::addBlock<std::shared_ptr<MediaSessionInterface>>(v3, a2);
}

void sub_1C56225A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5622610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::handleAudioStreamTokens(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint8x8_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>>>::find<unsigned long long>((void *)(a1 + 280), a2);
  if (v5 && (uint64_t v6 = v5[3]) != 0)
  {
    if (*(_DWORD *)(v6 + 48) == 2)
    {
      uint64_t v7 = *(std::__shared_weak_count **)(v6 + 24);
      if (v7)
      {
        uint64_t v8 = *(void *)(v6 + 16);
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        unint64_t v9 = std::__shared_weak_count::lock(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (v9)
        {
          if (v8)
          {
            uint64_t v10 = *(const void **)(a3 + 8);
            v17[0] = &unk_1F20E38B0;
            v17[1] = v10;
            if (v10) {
              CFRetain(v10);
            }
            v17[0] = &unk_1F20E39B8;
            BambiCall::handleAudioStreamTokens(v8, (uint64_t)v17);
            ims::CFType::~CFType((ims::CFType *)v17);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v14 = a1 + 16;
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(v15 + 48))(v14);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Audio stream tokens callback for non-audio stream type ", 55);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(void *)v16 + 32))(v16, __p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v11 = a1 + 16;
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"No media stream for sessionId ", 30);
    *(unsigned char *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
  }
}

void sub_1C56228E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void BambiClient::handleTextStreamToken(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint8x8_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>>>::find<unsigned long long>((void *)(a1 + 280), a2);
  if (v5 && (uint64_t v6 = v5[3]) != 0)
  {
    if (*(_DWORD *)(v6 + 48) == 4)
    {
      uint64_t v7 = *(std::__shared_weak_count **)(v6 + 24);
      if (v7)
      {
        uint64_t v8 = *(void *)(v6 + 16);
        atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        unint64_t v9 = std::__shared_weak_count::lock(v7);
        std::__shared_weak_count::__release_weak(v7);
        if (v9)
        {
          if (v8)
          {
            uint64_t v10 = *(const void **)(a3 + 8);
            v17[0] = &unk_1F20E38B0;
            v17[1] = v10;
            if (v10) {
              CFRetain(v10);
            }
            v17[0] = &unk_1F20E3960;
            BambiCall::handleTextStreamToken(v8, (uint64_t)v17);
            ims::CFType::~CFType((ims::CFType *)v17);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
    }
    else
    {
      uint64_t v15 = *(void *)(a1 + 16);
      uint64_t v14 = a1 + 16;
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(v15 + 48))(v14);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 16))(v14, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Text stream token callback for non-text stream type ", 52);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(void *)v16 + 32))(v16, __p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 16);
    uint64_t v11 = a1 + 16;
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(v12 + 56))(v11);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"No media stream for sessionId ", 30);
    *(unsigned char *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
  }
}

void sub_1C5622BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  _Unwind_Resume(a1);
}

void BambiClient::handleIncomingDtmf(BambiClient *this, unint64_t a2, uint64_t a3)
{
  uint8x8_t v5 = std::__hash_table<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>>>::find<unsigned long long>((void *)this + 35, a2);
  if (v5 && (uint64_t v6 = v5[3]) != 0)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(v6 + 24);
    if (v7)
    {
      uint64_t v8 = *(void *)(v6 + 16);
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      unint64_t v9 = std::__shared_weak_count::lock(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (v9)
      {
        if (v8)
        {
          uint64_t v10 = *(void *)(v8 + 408);
          if (v10) {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 240))(v10, a3);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
  else
  {
    uint64_t v12 = *((void *)this + 2);
    uint64_t v11 = (char *)this + 16;
    uint64_t v13 = (*(uint64_t (**)(char *))(v12 + 56))(v11);
    (*(void (**)(char *, uint64_t))(*(void *)v11 + 16))(v11, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"No media stream for sessionId ", 30);
    *(unsigned char *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
  }
}

void sub_1C5622DA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiClient::sipStack(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 26), a2);
  int8x8_t v7 = (int8x8_t)a1[24];
  if (!*(void *)&v7) {
    goto LABEL_17;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(unsigned __int8 ***)(a1[23] + 8 * v11);
  if (!v12 || (uint64_t v13 = *v12) == 0)
  {
LABEL_17:
    uint64_t v15 = a1[21];
    if (v15)
    {
      if (*(char *)(v15 + 4183) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v15 + 4160), *(void *)(v15 + 4168));
      }
      else {
        std::string __p = *(std::string *)(v15 + 4160);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
      int v18 = (char)v17;
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = *(void *)(a2 + 8);
      }
      if (size == v17)
      {
        if (v18 >= 0) {
          char v19 = (unsigned __int8 *)a2;
        }
        else {
          char v19 = *(unsigned __int8 **)a2;
        }
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          char v24 = (void *)__p.__r_.__value_.__r.__words[0];
          int v25 = memcmp(__p.__r_.__value_.__l.__data_, v19, __p.__r_.__value_.__l.__size_);
          operator delete(v24);
          if (!v25)
          {
LABEL_45:
            uint64_t v27 = a1[21];
            uint64_t v26 = a1[22];
            goto LABEL_46;
          }
        }
        else
        {
          if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
            goto LABEL_45;
          }
          uint64_t v20 = 0;
          do
          {
            int v21 = __p.__r_.__value_.__s.__data_[v20];
            int v22 = v19[v20];
          }
          while (v21 == v22 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v20++);
          if (v21 == v22) {
            goto LABEL_45;
          }
        }
      }
      else if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  while (1)
  {
    unint64_t v14 = *((void *)v13 + 1);
    if (v8 == v14) {
      break;
    }
    if (v10 > 1)
    {
      if (v14 >= *(void *)&v7) {
        v14 %= *(void *)&v7;
      }
    }
    else
    {
      v14 &= *(void *)&v7 - 1;
    }
    if (v14 != v11) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v13 = *(unsigned __int8 **)v13;
    if (!v13) {
      goto LABEL_17;
    }
  }
  if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 27), v13 + 16, (unsigned __int8 *)a2) & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v27 = *((void *)v13 + 5);
  uint64_t v26 = *((void *)v13 + 6);
LABEL_46:
  *a3 = v27;
  a3[1] = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
}

void BambiClient::sipStacks(BambiClient *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  for (uint64_t i = (long long *)*((void *)this + 25); i; uint64_t i = *(long long **)i)
  {
    unint64_t v6 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v5 = 0u;
    std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, i + 1);
    std::vector<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const>>::push_back[abi:ne180100](a2, (long long *)((char *)&v5 + 8));
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    if (SBYTE7(v5) < 0) {
      operator delete(__p[0]);
    }
  }
}

{
  long long *i;
  void *__p[2];
  long long v5;
  std::__shared_weak_count *v6;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  for (uint64_t i = (long long *)*((void *)this + 25); i; uint64_t i = *(long long **)i)
  {
    unint64_t v6 = 0;
    *(_OWORD *)std::string __p = 0u;
    long long v5 = 0u;
    std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, i + 1);
    std::vector<std::shared_ptr<SipStack>>::push_back[abi:ne180100](a2, (long long *)((char *)&v5 + 8));
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    if (SBYTE7(v5) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C5623058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_1C5623110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void **std::vector<std::shared_ptr<SipStack>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  int8x8_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18[2] = v15 + 16;
    std::vector<std::shared_ptr<SipStack>>::__swap_out_circular_buffer(a1, v18);
    uint8x8_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer(v18);
  }
  else
  {
    *int8x8_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint8x8_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1C5623240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t BambiClient::handleKeepAliveWake(BambiClient *this)
{
  uint64_t v1 = (void *)((char *)this + 16);
  uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(void *, uint64_t))(*v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Keepalive wakeup received", 25);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  for (uint64_t i = (void *)v1[23]; i; uint64_t i = (void *)*i)
  {
    if (*(unsigned char *)(i[5] + 2681))
    {
      uint64_t v5 = (*(uint64_t (**)(void *))(*v1 + 64))(v1);
      (*(void (**)(void *, uint64_t))(*v1 + 16))(v1, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"keepAlive wake for stack ", 25);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *))(*(void *)v5 + 32))(v5, i + 2);
      uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
      uint64_t v6 = i[5];
      if (*(unsigned char *)(v6 + 2681)) {
        uint64_t result = SipTransportLayer::handleKeepAliveWake(*(void *)(v6 + 160));
      }
    }
  }
  return result;
}

void BambiClient::coalesceLazuliRegistrationRefresh(BambiClient *this, int a2)
{
  uint64_t v2 = (long long *)*((void *)this + 25);
  if (v2)
  {
    uint64_t v4 = (char *)this + 16;
    do
    {
      uint64_t v8 = 0;
      *(_OWORD *)std::string __p = 0u;
      *(_OWORD *)int8x8_t v7 = 0u;
      std::pair<std::string const,std::shared_ptr<SipClientTransaction>>::pair[abi:ne180100]((std::string *)__p, v2 + 1);
      if (*((unsigned char *)v7[1] + 2681) && *((_DWORD *)v7[1] + 1025) == a2)
      {
        uint64_t v5 = (*(uint64_t (**)(char *))(*(void *)v4 + 64))(v4);
        (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Trying to coalesce registration refresh for stack ", 50);
        *(unsigned char *)(v5 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, __p);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v5 + 17) = 0;
        SipStack::coalesceLazuliRegistrationRefresh(v7[1]);
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (SHIBYTE(v7[0]) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v2 = *(long long **)v2;
    }
    while (v2);
  }
}

void sub_1C56235BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void BambiClient::addAssertions(uint64_t a1, uint64_t a2, unsigned int __val)
{
  v28[2] = *MEMORY[0x1E4F143B8];
  memset(&v26, 0, sizeof(v26));
  std::to_string(&v26, __val);
  v28[0] = ".ipt";
  v28[1] = ".apns";
  v27[0] = ".wifi";
  v27[1] = ".cell";
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Add KeepAlive power assertions for stackId=", 43);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  char v6 = 0;
  *(unsigned char *)(v5 + 17) = 0;
  int8x8_t v7 = (uint64_t **)(a1 + 360);
  uint64_t v8 = 1;
  uint8x8_t v9 = (const char **)v28;
  do
  {
    char v10 = 0;
    char v11 = v6;
    uint64_t v12 = (const char **)v27;
    uint64_t v13 = 1;
    do
    {
      char v14 = v10;
      __p[0] = 0;
      __p[1] = 0;
      std::string::size_type v25 = 0;
      std::operator+<char>();
      uint64_t v15 = *v12;
      size_t v16 = strlen(v15);
      long long v17 = std::string::append(&v22, v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      size_t v19 = strlen(*v9);
      uint64_t v20 = std::string::append(&v23, *v9, v19);
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      std::string::size_type v25 = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      PowerAssertionLock::addAssertion(v7, (long long *)__p);
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v12 = (const char **)&v27[v13];
      char v10 = 1;
      uint64_t v13 = 2;
    }
    while ((v14 & 1) == 0);
    uint8x8_t v9 = (const char **)&v28[v8];
    char v6 = 1;
    uint64_t v8 = 2;
  }
  while ((v11 & 1) == 0);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_1C5623880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

void BambiClient::removeAssertions(uint64_t a1, uint64_t a2, unsigned int __val)
{
  v28[2] = *MEMORY[0x1E4F143B8];
  memset(&v26, 0, sizeof(v26));
  std::to_string(&v26, __val);
  v28[0] = ".ipt";
  v28[1] = ".apns";
  v27[0] = ".wifi";
  v27[1] = ".cell";
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Remove KeepAlive power assertions for stackId=", 46);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  char v6 = 0;
  *(unsigned char *)(v5 + 17) = 0;
  int8x8_t v7 = (uint64_t **)(a1 + 360);
  uint64_t v8 = 1;
  uint8x8_t v9 = (const char **)v28;
  do
  {
    char v10 = 0;
    char v11 = v6;
    uint64_t v12 = (const char **)v27;
    uint64_t v13 = 1;
    do
    {
      char v14 = v10;
      __p[0] = 0;
      __p[1] = 0;
      std::string::size_type v25 = 0;
      std::operator+<char>();
      uint64_t v15 = *v12;
      size_t v16 = strlen(v15);
      long long v17 = std::string::append(&v22, v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v23.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      size_t v19 = strlen(*v9);
      uint64_t v20 = std::string::append(&v23, *v9, v19);
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      std::string::size_type v25 = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>>>::__erase_unique<std::string>(v7, __p);
      if (SHIBYTE(v25) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v12 = (const char **)&v27[v13];
      char v10 = 1;
      uint64_t v13 = 2;
    }
    while ((v14 & 1) == 0);
    uint8x8_t v9 = (const char **)&v28[v8];
    char v6 = 1;
    uint64_t v8 = 2;
  }
  while ((v11 & 1) == 0);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_1C5623B9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

void BambiClient::acquireKeepAliveAssertion(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Acquire KeepAlive power assertion for stackId=", 46);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = 0uLL;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 192))(&v32, a1, a2);
  if (v32.__r_.__value_.__r.__words[0]) {
    BOOL isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v32.__r_.__value_.__r.__words[0] + 3160));
  }
  else {
    BOOL isWifi = 0;
  }
  if (v32.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v32.__r_.__value_.__l.__size_);
  }
  memset(&v32, 0, sizeof(v32));
  std::to_string(&v32, a3);
  uint64_t v29 = 0;
  std::string::size_type v30 = 0;
  uint64_t v31 = 0;
  if (a4) {
    char v11 = ".ipt";
  }
  else {
    char v11 = ".apns";
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, v11);
  std::string v26 = 0;
  std::string::size_type v27 = 0;
  uint64_t v28 = 0;
  if (isWifi) {
    uint64_t v12 = ".wifi";
  }
  else {
    uint64_t v12 = ".cell";
  }
  std::string::basic_string[abi:ne180100]<0>(&v26, v12);
  std::operator+<char>();
  if (v28 >= 0) {
    uint64_t v13 = (const std::string::value_type *)&v26;
  }
  else {
    uint64_t v13 = v26;
  }
  if (v28 >= 0) {
    std::string::size_type v14 = HIBYTE(v28);
  }
  else {
    std::string::size_type v14 = v27;
  }
  uint64_t v15 = std::string::append(&v24, v13, v14);
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (v31 >= 0) {
    long long v17 = (const std::string::value_type *)&v29;
  }
  else {
    long long v17 = v29;
  }
  if (v31 >= 0) {
    std::string::size_type v18 = HIBYTE(v31);
  }
  else {
    std::string::size_type v18 = v30;
  }
  size_t v19 = std::string::append(&v25, v17, v18);
  long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v26);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v29);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if ((void **)(a1 + 368) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 360, (void **)&__str.__r_.__value_.__l.__data_))
  {
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    long long v21 = std::__tree<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 360), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v32);
    AssertionCounter::initialize((atomic_uint *)v21[7], 30.0, !isWifi, (uint64_t)v22);
    ImsResult::~ImsResult((ImsResult *)v22);
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = 0uLL;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 192))(&v32, a1, a2);
    if (v32.__r_.__value_.__r.__words[0]) {
      std::string::operator=((std::string *)(v32.__r_.__value_.__r.__words[0] + 4208), &__str);
    }
    if (v32.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v32.__r_.__value_.__l.__size_);
    }
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C5623F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  int v38 = *(std::__shared_weak_count **)(v36 - 80);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::releaseKeepAliveAssertion(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Release KeepAlive power assertion for stackId=", 46);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  memset(&__p, 0, sizeof(__p));
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 192))(&v7, a1, a2);
  if (v7)
  {
    if (*(char *)(v7 + 4231) < 0) {
      std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(v7 + 4208), *(void *)(v7 + 4216));
    }
    else {
      std::string v6 = *(std::string *)(v7 + 4208);
    }
    std::string __p = v6;
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if ((void **)(a1 + 368) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 360, (void **)&__p.__r_.__value_.__l.__data_))PowerAssertionLock::deinitialize((uint64_t **)(a1 + 360), (uint64_t)&__p); {
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  }
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1C5624218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void BambiClient::loggableName(LoggableString *a1@<X8>)
{
}

void non-virtual thunk to'BambiClient::loggableName(LoggableString *a1@<X8>)
{
}

std::string *BambiClientStatus::BambiClientStatus(std::string *a1, const std::string *a2, std::string::value_type a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::operator=(a1, a2);
  a1[1].__r_.__value_.__s.__data_[0] = a3;
  return a1;
}

void sub_1C56242A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::shared_ptr<BambiCall>,std::hash<std::shared_ptr<BambiCall>>,std::equal_to<std::shared_ptr<BambiCall>>,std::allocator<std::shared_ptr<BambiCall>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void _ZNSt3__115allocate_sharedB8ne180100I20SimpleNetworkManagerNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_()
{
  uint64_t v0 = operator new(0x70uLL);
  v0[1] = 0;
  _OWORD v0[2] = 0;
  *uint64_t v0 = &unk_1F20E5758;
  SimpleNetworkManager::SimpleNetworkManager((SimpleNetworkManager *)(v0 + 3));
}

void sub_1C562437C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SimpleNetworkManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E5758;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SimpleNetworkManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E5758;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SimpleNetworkManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipStack>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipStack>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipStack>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipStack>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    std::string::size_type v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  long long v17 = *a4;
  std::string::size_type v18 = (void *)(a1 + 16);
  uint64_t v44 = 0;
  size_t v19 = operator new(0x38uLL);
  v43[0] = v19;
  v43[1] = a1 + 16;
  void *v19 = 0;
  v19[1] = v9;
  long long v20 = (std::string *)(v19 + 2);
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)v17, *((void *)v17 + 1));
  }
  else
  {
    long long v21 = *v17;
    v19[4] = *((void *)v17 + 2);
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
  }
  v19[5] = 0;
  v19[6] = 0;
  LOBYTE(v44) = 1;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v10 || (float)(v23 * (float)v10) < v22)
  {
    BOOL v24 = 1;
    if (v10 >= 3) {
      BOOL v24 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v10);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    else {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if (*(void *)&prime > v10) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v10)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v10 < 3 || (uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (*(void *)&prime <= v34) {
        int8x8_t prime = (int8x8_t)v34;
      }
      if (*(void *)&prime >= v10)
      {
        unint64_t v10 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v28 = operator new(8 * *(void *)&prime);
          uint64_t v29 = *(void **)a1;
          *(void *)a1 = v28;
          if (v29) {
            operator delete(v29);
          }
          uint64_t v30 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v30++) = 0;
          while (*(void *)&prime != v30);
          uint64_t v31 = (void *)*v18;
          if (*v18)
          {
            unint64_t v32 = v31[1];
            uint8x8_t v33 = (uint8x8_t)vcnt_s8(prime);
            v33.i16[0] = vaddlv_u8(v33);
            if (v33.u32[0] > 1uLL)
            {
              if (v32 >= *(void *)&prime) {
                v32 %= *(void *)&prime;
              }
            }
            else
            {
              v32 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v32) = v18;
            uint64_t v37 = (void *)*v31;
            if (*v31)
            {
              do
              {
                unint64_t v38 = v37[1];
                if (v33.u32[0] > 1uLL)
                {
                  if (v38 >= *(void *)&prime) {
                    v38 %= *(void *)&prime;
                  }
                }
                else
                {
                  v38 &= *(void *)&prime - 1;
                }
                if (v38 != v32)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v38))
                  {
                    *(void *)(*(void *)a1 + 8 * v38) = v31;
                    goto LABEL_58;
                  }
                  *uint64_t v31 = *v37;
                  void *v37 = **(void **)(*(void *)a1 + 8 * v38);
                  **(void **)(*(void *)a1 + 8 * v38) = v37;
                  uint64_t v37 = v31;
                }
                unint64_t v38 = v32;
LABEL_58:
                uint64_t v31 = v37;
                uint64_t v37 = (void *)*v37;
                unint64_t v32 = v38;
              }
              while (v37);
            }
          }
          unint64_t v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        long long v42 = *(void **)a1;
        *(void *)a1 = 0;
        if (v42) {
          operator delete(v42);
        }
        unint64_t v10 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  int v39 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
  uint64_t i = (unsigned __int8 *)v43[0];
  if (v39)
  {
    *(void *)v43[0] = *v39;
LABEL_75:
    *int v39 = i;
    goto LABEL_76;
  }
  *(void *)v43[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v13) = v18;
  if (*(void *)i)
  {
    unint64_t v40 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v40 >= v10) {
        v40 %= v10;
      }
    }
    else
    {
      v40 &= v10 - 1;
    }
    int v39 = (unsigned __int8 **)(*(void *)a1 + 8 * v40);
    goto LABEL_75;
  }
LABEL_76:
  v43[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>>>>::reset[abi:ne180100]((uint64_t)v43);
  return i;
}

void sub_1C562489C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<RTPManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E57A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<RTPManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E57A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<RTPManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<BambiUnlistedEmergencyCall>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E57F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiUnlistedEmergencyCall>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E57F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiUnlistedEmergencyCall>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<BambiCall>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E5848;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiCall>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E5848;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiCall>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__hash_table<std::shared_ptr<BambiCall>,std::hash<std::shared_ptr<BambiCall>>,std::equal_to<std::shared_ptr<BambiCall>>,std::allocator<std::shared_ptr<BambiCall>>>::__emplace_unique_key_args<std::shared_ptr<BambiCall>,std::shared_ptr<BambiCall> const&>(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v12 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v12 = v9 % v10;
      }
    }
    else
    {
      unint64_t v12 = (v10 - 1) & v9;
    }
    unint64_t v13 = *(void **)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = (void *)*v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v9)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  unint64_t v16 = operator new(0x20uLL);
  void *v16 = 0;
  v16[1] = v9;
  uint64_t v16[2] = a3;
  v16[3] = a4;
  if (a4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a4 + 8), 1uLL, memory_order_relaxed);
  }
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v12 = v9 % v10;
      }
      else {
        unint64_t v12 = v9;
      }
    }
    else
    {
      unint64_t v12 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  BOOL v24 = *(void **)(*(void *)a1 + 8 * v12);
  if (v24)
  {
    void *v16 = *v24;
LABEL_40:
    *BOOL v24 = v16;
    goto LABEL_41;
  }
  void *v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v16;
  *(void *)(v23 + 8 * v12) = a1 + 16;
  if (*v16)
  {
    unint64_t v25 = *(void *)(*v16 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    BOOL v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
}

void sub_1C5624CD0(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<SipTcpConnection>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::shared_ptr<BambiCall>,std::hash<std::shared_ptr<BambiCall>>,std::equal_to<std::shared_ptr<BambiCall>>,std::allocator<std::shared_ptr<BambiCall>>>::find<std::shared_ptr<BambiCall>>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v2 - 1) & v5;
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void std::__shared_ptr_emplace<LazuliSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E5898;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E5898;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliSession>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,BambiCallMediaStream *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,BambiCallMediaStream *>>>::find<unsigned long long>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  unint64_t v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<LazuliSession,std::allocator<LazuliSession>,std::shared_ptr<SipStack>,void>(void *a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x3E8uLL);
  std::__shared_ptr_emplace<LazuliSession>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipStack>,std::allocator<LazuliSession>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4 + 16, (uint64_t)(v4 + 3));
}

void sub_1C5624F7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<LazuliSession>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipStack>,std::allocator<LazuliSession>,0>(void *a1, void *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20E5898;
  std::construct_at[abi:ne180100]<LazuliSession,std::shared_ptr<SipStack>,LazuliSession*>((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1C5624FD8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<LazuliSession,std::shared_ptr<SipStack>,LazuliSession*>(uint64_t a1, void *a2)
{
  uint8x8_t v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  *a2 = 0;
  a2[1] = 0;
  LazuliSession::LazuliSession(a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_1C5625038(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_BambiClient_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "Uninitialized");
  BambiClientStatus::BambiClientStatus((std::string *)BambiClientStatus::kStatusUninitialized, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))BambiClientStatus::~BambiClientStatus, BambiClientStatus::kStatusUninitialized, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Initializing");
  BambiClientStatus::BambiClientStatus(&stru_1EBBDC5A0, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))BambiClientStatus::~BambiClientStatus, &stru_1EBBDC5A0, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Initialized");
  BambiClientStatus::BambiClientStatus((std::string *)&BambiClientStatus::kStatusInitialized, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))BambiClientStatus::~BambiClientStatus, &BambiClientStatus::kStatusInitialized, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "InitFailed");
  BambiClientStatus::BambiClientStatus((std::string *)BambiClientStatus::kStatusInitFailed, &__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))BambiClientStatus::~BambiClientStatus, BambiClientStatus::kStatusInitFailed, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "FatalError");
  BambiClientStatus::BambiClientStatus((std::string *)BambiClientStatus::kStatusFatalError, &__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))BambiClientStatus::~BambiClientStatus, BambiClientStatus::kStatusFatalError, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Deinitializing");
  BambiClientStatus::BambiClientStatus(&stru_1EBBDC5C0, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))BambiClientStatus::~BambiClientStatus, &stru_1EBBDC5C0, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "MediaRequestTimedOut");
  BambiClientStatus::BambiClientStatus((std::string *)BambiClientStatus::kStatusMediaRequestTimedOut, &__p, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return __cxa_atexit((void (*)(void *))BambiClientStatus::~BambiClientStatus, BambiClientStatus::kStatusMediaRequestTimedOut, &dword_1C51D1000);
}

void sub_1C56252DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::SipSocketMultiplexer(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)a1 = &unk_1F20B6210;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 8 + *(void *)(v4 - 4BambiClient::~BambiClient((BambiClient *)((char *)this - 8)) = a2[2];
  *(unsigned char *)(a1 + 20) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = a1 + 32;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = 0;
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[3];
  *(void *)(a1 + *(void *)(v5 - 24)) = a2[4];
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
    unint64_t v8 = *(std::__shared_weak_count **)(a1 + 120);
    *(void *)(a1 + 112) = v6;
    *(void *)(a1 + 120) = v7;
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  else
  {
    *(void *)(a1 + 112) = v6;
    *(void *)(a1 + 120) = 0;
  }
  return a1;
}

void *SipUdpSocketMultiplexer::SipUdpSocketMultiplexer(void *a1, uint64_t *a2)
{
  a1[1] = &unk_1F20B2FA8;
  uint8x8_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::SipSocketMultiplexer((uint64_t)a1, (uint64_t *)&off_1F20E5998, &v5);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  *a1 = &unk_1F20E58F0;
  a1[1] = &unk_1F20E5958;
  a1[16] = 0;
  a1[17] = 0;
  return a1;
}

void sub_1C56255B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void SipUdpSocketMultiplexer::~SipUdpSocketMultiplexer(SipUdpSocketMultiplexer *this)
{
  *(void *)this = &unk_1F20E58F0;
  *((void *)this + 1) = &unk_1F20E5958;
  uint64_t v2 = *((void *)this + 16);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 40))(v2);
    uint8x8_t v3 = (std::__shared_weak_count *)*((void *)this + 17);
    *((void *)this + 16) = 0;
    *((void *)this + 17) = 0;
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::~SipSocketMultiplexer((uint64_t)this, (uint64_t *)&off_1F20E5998);
}

{
  uint64_t vars8;

  SipUdpSocketMultiplexer::~SipUdpSocketMultiplexer(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::~SipSocketMultiplexer(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  uint64_t v5 = (SipLockable *)(a1 + 8);
  *(void *)(a1 + 8) = a2[3];
  *(void *)(a1 + *(void *)(v4 - 24)) = a2[4];
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 120);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(*(void **)(a1 + 96));
  SipLockable::~SipLockable(v5, a2 + 1);
  return a1;
}

void non-virtual thunk to'SipUdpSocketMultiplexer::~SipUdpSocketMultiplexer(SipUdpSocketMultiplexer *this)
{
}

{
  uint64_t vars8;

  SipUdpSocketMultiplexer::~SipUdpSocketMultiplexer((SipUdpSocketMultiplexer *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipUdpSocketMultiplexer::loggableName(LoggableString *a1@<X8>)
{
}

void non-virtual thunk to'SipUdpSocketMultiplexer::loggableName(LoggableString *a1@<X8>)
{
}

void SipUdpSocketMultiplexer::processDataFromSocket(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::delegateForRemoteAddress(a1, &v12);
  if (v13)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v13);
    if (v7) {
      unint64_t v8 = v12;
    }
    else {
      unint64_t v8 = 0;
    }
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
    if (v8)
    {
      (*(void (**)(void *, uint64_t, uint64_t, void *))(*(void *)v8 + 24))(v8, a2, a3, a4);
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v12, "transport");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v9 = ims::error((uint64_t)&v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"SipUdpSocketMultiplexer: no delegate to handle incoming data from ", 66);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(void, uint64_t))(*(void *)*a4 + 40))(*a4, v9);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v12);
  }
LABEL_14:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C56259CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::~SipSocketMultiplexer(uint64_t a1)
{
}

void SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::~SipSocketMultiplexer(uint64_t a1)
{
  JUMPOUT(0x1C878E320);
}

uint64_t non-virtual thunk to'SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::~SipSocketMultiplexer(uint64_t a1)
{
}

void non-virtual thunk to'SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::~SipSocketMultiplexer(uint64_t a1)
{
  JUMPOUT(0x1C878E320);
}

uint64_t SDPParser::parseAMROctetAligned(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2 == 1)
  {
    if (v3 >= 0) {
      uint64_t v4 = (unsigned char *)a2;
    }
    else {
      uint64_t v4 = *(unsigned char **)a2;
    }
    BOOL v5 = *v4 == 49;
  }
  else
  {
    BOOL v5 = 0;
  }
  *(unsigned char *)(a1 + 43) = v5;
  *(unsigned char *)(a1 + 44) = 1;
  return 1;
}

uint64_t SDPParser::parseAMRModeset(uint64_t a1, const std::string *a2)
{
  *(_WORD *)(a1 + 46) = SDPMediaFormatAMRParams::modesetFromString(a2);
  *(unsigned char *)(a1 + 63) = 0;
  return 1;
}

uint64_t SDPParser::parseAMRMaxRedundancy(uint64_t a1, char *__str)
{
  if (__str[23] < 0) {
    std::string __str = *(char **)__str;
  }
  *(_WORD *)(a1 + 48) = strtoul(__str, 0, 10);
  *(unsigned char *)(a1 + 50) = 1;
  return 1;
}

uint64_t SDPParser::parseAMRModeChangeCapability(uint64_t a1, char *__str)
{
  if (__str[23] < 0) {
    std::string __str = *(char **)__str;
  }
  *(_WORD *)(a1 + 52) = strtoul(__str, 0, 10);
  *(unsigned char *)(a1 + 54) = 1;
  return 1;
}

uint64_t SDPParser::parseAMRModeChangePeriod(uint64_t a1, char *__str)
{
  if (__str[23] < 0) {
    std::string __str = *(char **)__str;
  }
  *(_WORD *)(a1 + 56) = strtoul(__str, 0, 10);
  *(unsigned char *)(a1 + 58) = 1;
  return 1;
}

uint64_t SDPParser::parseAMRModeChangeNeighbor(uint64_t a1, char *__str)
{
  if (__str[23] < 0) {
    std::string __str = *(char **)__str;
  }
  *(_WORD *)(a1 + 60) = strtoul(__str, 0, 10);
  *(unsigned char *)(a1 + 62) = 1;
  return 1;
}

void *ims::toString<MediaDirection>@<X0>(unsigned int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  if ((int)v4 < 5) {
  else
  }
    BOOL v5 = "Unknown";
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

void SDPAttribute::toStream(SDPAttribute *this, ImsOutStream *a2)
{
  uint64_t v4 = (void *)*((void *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 97;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  BOOL v5 = (void *)*((void *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(std::string *__return_ptr, SDPAttribute *))(*(void *)this + 32))(&v9, this);
  LoggableString::LoggableString(&__p, &v9);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  (*(void (**)(std::string *__return_ptr, SDPAttribute *))(*(void *)this + 40))(&__p, this);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    unint64_t v8 = (void *)*((void *)a2 + 1);
    v9.__r_.__value_.__s.__data_[0] = 58;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v9, 1);
    *((unsigned char *)a2 + 17) = 0;
    LoggableString::LoggableString(&v9, &__p);
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v9);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    char v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  if (v7 < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C5625E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void SDPAttribute::key(SDPAttribute *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 39) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 2), *((void *)this + 3));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 1);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 4);
  }
}

void SipPBambiCallIdHeader::~SipPBambiCallIdHeader(void **this)
{
  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipPBambiCallIdHeader::clone(SipPBambiCallIdHeader *this)
{
}

void sub_1C5626014(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40EE8ABE80);
  _Unwind_Resume(a1);
}

void SipOptionsManager::SipOptionsManager(SipOptionsManager *this, SipUserAgent *a2)
{
  *(void *)this = &unk_1F20B33E8;
  *((void *)this + 1) = &unk_1F20B3658;
  uint64_t v4 = (char *)this + 16;
  *((void *)this + 2) = &unk_1F20B2FA8;
  std::string::basic_string[abi:ne180100]<0>(&__str, "sip.options");
  BOOL v5 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6) {
      uint64_t v7 = *((void *)a2 + 1);
    }
    else {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  if (*(char *)(v7 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 4160), *(void *)(v7 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v7 + 4160);
  }
  ImsLogContainer::ImsLogContainer((uint64_t)this + 24, &__str, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *(void *)this = &unk_1F20E5D50;
  *((void *)this + 1) = &unk_1F20E5DA8;
  *((void *)this + 2) = &unk_1F20E5DF0;
  *((void *)this + 3) = &unk_1F20E5E20;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 19) = (char *)this + 160;
  *((void *)this + 23) = (char *)this + 192;
  *((void *)this + 25) = 0;
  SipTimerContainer::SipTimerContainer((SipOptionsManager *)((char *)this + 208));
  *((void *)this + 18) = a2;
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)"OPTIONS";
  std::__tree<std::__value_type<std::string,SipUserAgentDelegate *>,std::__map_value_compare<std::string,std::__value_type<std::string,SipUserAgentDelegate *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipUserAgentDelegate *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 16, (void **)"OPTIONS", (uint64_t)&std::piecewise_construct, (long long **)&__str)[7] = (uint64_t)this;
  *((void *)this + 39) = v4;
  unint64_t v8 = (std::__shared_weak_count *)*((void *)a2 + 2);
  if (v8)
  {
    std::string v9 = std::__shared_weak_count::lock(v8);
    if (v9) {
      uint64_t v10 = *((void *)a2 + 1);
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    std::string v9 = 0;
  }
  if (*(char *)(v10 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v10 + 4160), *(void *)(v10 + 4168));
  }
  else {
    std::string __str = *(std::string *)(v10 + 4160);
  }
  std::string::operator=((std::string *)((char *)this + 256), (const std::string *)((char *)this + 32));
  std::string::operator=((std::string *)((char *)this + 280), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C56262F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  SipTimerContainer::~SipTimerContainer(v24);
  std::__tree<std::__value_type<std::string,ResendOptionsInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ResendOptionsInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ResendOptionsInfo>>>::destroy(v23, *(void **)(v21 + 192));
  std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(*(void **)(v21 + 160));
  std::string::size_type v27 = *(std::__shared_weak_count **)(v21 + 136);
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  ImsLogContainer::~ImsLogContainer(v22);
  _Unwind_Resume(a1);
}

void SipOptionsManager::logPrefix(SipOptionsManager *this, ImsOutStream *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 24))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C562644C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipOptionsManager::logPrefix(SipOptionsManager *this, ImsOutStream *a2)
{
}

uint64_t SipOptionsManager::handleNewServerTransaction(void *a1, uint64_t *a2)
{
  int v3 = (std::__shared_weak_count *)a1[17];
  if (!v3 || (v5 = *a2, uint64_t v6 = a1[16], (v7 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v8 = v7;
  uint64_t v9 = v6 + 8;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v10 = *(std::__shared_weak_count **)(v5 + 360);
  if (!v6) {
    uint64_t v9 = 0;
  }
  *(void *)(v5 + 352) = v9;
  *(void *)(v5 + 360) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  uint64_t v12 = a1[3];
  char v11 = a1 + 3;
  uint64_t v13 = (*(uint64_t (**)(void *))(v12 + 64))(v11);
  (*(void (**)(void *, uint64_t))(*v11 + 16))(v11, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"new OPTIONS transaction ", 24);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, *a2 + 328);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  return 1;
}

uint64_t SipOptionsManager::handleRequest(uint64_t a1, SipRequest *a2, uint64_t a3)
{
  uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
  uint64_t v7 = v6[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v6[23];
  }
  else {
    uint64_t v8 = *((void *)v6 + 1);
  }
  if (v8 != 7) {
    return 1;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v6, "OPTIONS", *((void *)v6 + 1))) {
      return 1;
    }
LABEL_12:
    uint64_t v10 = *(void *)(a1 + 144);
    char v11 = *(std::__shared_weak_count **)(v10 + 16);
    if (v11 && (uint64_t v12 = std::__shared_weak_count::lock(v11)) != 0)
    {
      int v13 = *(unsigned __int8 *)(*(void *)(v10 + 8) + 2681);
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      if (!v13) {
        goto LABEL_23;
      }
    }
    else if (!MEMORY[0xA79])
    {
      goto LABEL_23;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 16))(a1 + 24, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Routing MT OPTIONS tags to Lazuli", 33);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    uint64_t v15 = *(void *)(a1 + 144);
    uint64_t v16 = *(void *)(v15 + 208);
    float v17 = *(std::__shared_weak_count **)(v15 + 216);
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v16) {
      (*(void (**)(uint64_t, SipRequest *, void, void))(*(void *)v16 + 56))(v16, a2, 0, 0);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
LABEL_23:
    long long v51 = 0u;
    long long v52 = 0u;
    uint64_t v18 = *(void *)(a1 + 144);
    long long v47 = 0u;
    long long v48 = 0u;
    long long v49 = 0u;
    uint64_t v50 = 0;
    LODWORD(v51) = 1065353216;
    *(void *)&long long v52 = v18 + 288;
    std::string v46 = &unk_1F20DD488;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    std::string v53 = 0;
    DWORD2(v52) = 200;
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v37 = &unk_1F20B2680;
    unint64_t v38 = &_bambiDomain;
    uint64_t v41 = 0;
    BOOL v19 = *(std::__shared_weak_count **)(v18 + 16);
    if (v19 && (unint64_t v20 = std::__shared_weak_count::lock(v19)) != 0)
    {
      int v21 = *(unsigned __int8 *)(*(void *)(v18 + 8) + 2681);
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      if (!v21) {
        goto LABEL_26;
      }
    }
    else if (!MEMORY[0xA79])
    {
LABEL_26:
      uint64_t v22 = *(void *)(a1 + 144);
      uint64_t v23 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v22 + 16));
      uint64_t v24 = *(void *)(*(void *)(v22 + 8) + 136);
      uint64_t v25 = *(void *)(a1 + 144);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      unint64_t v26 = *(std::__shared_weak_count **)(v25 + 16);
      if (v26)
      {
        uint64_t v31 = std::__shared_weak_count::lock(v26);
        if (v31) {
          uint64_t v30 = *(SipStack **)(v25 + 8);
        }
      }
      BambiClient::canAcceptIncomingSession(v24, 0, &v30, (uint64_t)v32);
      ImsResult::operator=((uint64_t)&v37, (uint64_t)v32);
      ImsResult::~ImsResult((ImsResult *)v32);
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      goto LABEL_34;
    }
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    v32[0] = &unk_1F20B2680;
    v32[1] = &_bambiDomain;
    int v33 = 0;
    ImsResult::operator=((uint64_t)&v37, (uint64_t)v32);
    ImsResult::~ImsResult((ImsResult *)v32);
LABEL_34:
    if ((*(unsigned int (**)(uint64_t *, void))(*v38 + 24))(v38, v39)) {
      SipResponse::setStatusFromImsResult((SipResponse *)&v46, (const ImsResult *)&v37);
    }
    v29[0] = 0;
    v29[1] = 0;
    SipOptionsManager::fillOptionsResponse(a1, a2, v29, (SipResponse *)&v46);
    (*(void (**)(void *__return_ptr))(**(void **)a3 + 168))(v28);
    ImsResult::~ImsResult((ImsResult *)v28);
    ImsResult::~ImsResult((ImsResult *)&v37);
    std::string v46 = &unk_1F20DD488;
    if (SHIBYTE(v55) < 0) {
      operator delete(v53);
    }
    SipMessage::~SipMessage((SipMessage *)&v46);
    return 1;
  }
  if (!v6[23]) {
    goto LABEL_12;
  }
  uint64_t v9 = "OPTIONS";
  while (*v6 == *(unsigned __int8 *)v9)
  {
    ++v6;
    ++v9;
    if (!--v7) {
      goto LABEL_12;
    }
  }
  return 1;
}

void sub_1C5626A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  ImsResult::~ImsResult((ImsResult *)&a22);
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  ImsResult::~ImsResult((ImsResult *)&a31);
  SipResponse::~SipResponse((void **)(v32 - 184));
  _Unwind_Resume(a1);
}

void SipOptionsManager::fillOptionsResponse(uint64_t a1, SipRequest *a2, uint64_t *a3, SipResponse *a4)
{
  uint64_t v8 = (void *)*((void *)a4 + 10);
  if (v8) {
    SipMessageEncodingMap::copyHeadersFromRequestToResponse(v8, a2, a4, 0);
  }
  memset(v76, 0, sizeof(v76));
  memset(v68, 0, sizeof(v68));
  long long v67 = 0u;
  memset(v66, 0, sizeof(v66));
  DWORD2(v67) = 90;
  v68[0] = 1;
  v68[2] = 1;
  *(void *)&v68[4] = 0x200000001;
  *(_WORD *)&v68[13] = 257;
  *(void *)&v68[15] = 0;
  *(_WORD *)&v68[23] = 256;
  long long v70 = 0u;
  long long v71 = 0u;
  memset(v69, 0, sizeof(v69));
  *(void *)v72 = 0x40A7700000000000;
  memset(v75, 0, sizeof(v75));
  *(_OWORD *)&v72[8] = 0u;
  long long v73 = 0u;
  memset(v74, 0, sizeof(v74));
  uint64_t v9 = *a3;
  if (*a3)
  {
    LOWORD(v66[0]) = *(_WORD *)(v9 + 792);
    std::string::operator=((std::string *)((char *)v66 + 8), (const std::string *)(v9 + 800));
    long long v10 = *(_OWORD *)(v9 + 840);
    long long v67 = *(_OWORD *)(v9 + 824);
    *(_OWORD *)std::string v68 = v10;
    *(_OWORD *)&v68[16] = *(_OWORD *)(v9 + 856);
    *(void *)&v68[29] = *(void *)(v9 + 869);
    std::string::operator=((std::string *)v69, (const std::string *)(v9 + 880));
    std::string::operator=((std::string *)&v69[24], (const std::string *)(v9 + 904));
    v69[48] = *(unsigned char *)(v9 + 928);
    long long v11 = *(_OWORD *)(v9 + 952);
    long long v70 = *(_OWORD *)(v9 + 936);
    long long v71 = v11;
    *(_OWORD *)v72 = *(_OWORD *)(v9 + 968);
    std::string::operator=((std::string *)&v72[16], (const std::string *)(v9 + 984));
    std::string::operator=(v74, (const std::string *)(v9 + 1008));
    std::string::operator=(&v74[1], (const std::string *)(v9 + 1032));
    std::string::operator=((std::string *)v75, (const std::string *)(v9 + 1056));
    std::string::operator=((std::string *)&v75[24], (const std::string *)(v9 + 1080));
    v75[48] = *(unsigned char *)(v9 + 1104);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)v76, (const std::string *)(v9 + 1112));
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 144);
    int v13 = *(std::__shared_weak_count **)(v12 + 16);
    if (v13)
    {
      int v13 = std::__shared_weak_count::lock(v13);
      uint64_t v14 = v13;
      if (v13) {
        int v13 = *(std::__shared_weak_count **)(v12 + 8);
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = (const ImsPrefs *)SipStack::prefs((SipStack *)v13);
    BambiCallOptions::initializeFromPrefs((BambiCallOptions *)v66, v15);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  int v16 = *(_DWORD *)&v68[4];
  if (*(int *)&v68[4] >= 2)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "precondition");
    SipMessage::addSupportedOption(a4, &__p);
    if (SHIBYTE(v60[0]) < 0) {
      operator delete(__p);
    }
  }
  if (v68[0])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "timer");
    SipMessage::addSupportedOption(a4, &__p);
    if (SHIBYTE(v60[0]) < 0) {
      operator delete(__p);
    }
  }
  SipUserAgent::transportLayer(*(SipUserAgent **)(a1 + 144), &__p);
  int isIPSecAvailableAndEnabled = SipTransportLayer::isIPSecAvailableAndEnabled((SipTransportLayer *)__p);
  if (*(void *)&v60[0]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v60[0]);
  }
  if (isIPSecAvailableAndEnabled)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sec-agree");
    SipMessage::addSupportedOption(a4, &__p);
    if (SHIBYTE(v60[0]) < 0) {
      operator delete(__p);
    }
  }
  int v53 = v16;
  uint64_t v18 = *(void *)(a1 + 144);
  BOOL v19 = *(std::__shared_weak_count **)(v18 + 16);
  if (v19 && (unint64_t v20 = std::__shared_weak_count::lock(v19)) != 0)
  {
    int v21 = *(unsigned __int8 *)(*(void *)(v18 + 8) + 2681);
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    if (!v21) {
      goto LABEL_37;
    }
  }
  else if (!MEMORY[0xA79])
  {
    goto LABEL_37;
  }
  uint64_t v22 = *(void *)(a1 + 144);
  uint64_t v23 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v22 + 16));
  uint64_t v24 = *(void *)(*(void *)(v22 + 8) + 144);
  uint64_t v26 = *(void *)(v24 + 248);
  uint64_t v25 = *(std::__shared_weak_count **)(v24 + 256);
  if (v25)
  {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    int v27 = *(_DWORD *)(v26 + 1104);
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  else
  {
    int v27 = *(_DWORD *)(v26 + 1104);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 16))(a1 + 24, v28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"Adding Lazuli tags in OPTIONS response: ", 40);
  *(unsigned char *)(v28 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v55, ",");
  BambiServices::namesForServiceMask(v27, &__p);
  (*(void (**)(uint64_t, void **))(*(void *)v28 + 32))(v28, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v28 + 17) = 0;
  if (SHIBYTE(v60[0]) < 0) {
    operator delete(__p);
  }
  if (v58 < 0) {
    operator delete(v55);
  }
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  memset(v60, 0, sizeof(v60));
  std::string __p = &unk_1F20C3100;
  SipUri::SipUri((SipUri *)v60);
  *(void *)&long long v63 = 0;
  *((void *)&v62 + 1) = 0;
  *((void *)&v61 + 1) = &unk_1F20B37B0;
  *(void *)&long long v62 = (char *)&v62 + 8;
  WORD4(v63) = 256;
  long long v65 = 0uLL;
  *((void *)&v64 + 1) = &v65;
  LODWORD(v64) = 0;
  uint64_t v29 = *(SipUserAgent **)(a1 + 144);
  uint64_t v30 = (long long *)(*(uint64_t (**)(SipRequest *))(*(void *)a2 + 112))(a2);
  SipUserAgent::fillContactForServicesAndMethod(v29, (uint64_t)&__p, v27, v30, 0, (uint64_t)&v55);
  char v31 = (*(uint64_t (**)(atomic_ullong *, void))(*v56 + 24))(v56, v57);
  ImsResult::~ImsResult((ImsResult *)&v55);
  if ((v31 & 1) == 0) {
    SipMessage::setContact(a4, (const SipContactParam *)&__p);
  }
  std::string __p = &unk_1F20C3100;
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)&v64 + 8, (void *)v65);
  *((void *)&v61 + 1) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v62, *((void **)&v62 + 1));
  SipUri::~SipUri((SipUri *)v60);
LABEL_37:
  std::string::basic_string[abi:ne180100]<0>(&__p, "application/sdp");
  SipMessage::addHeader(a4, (uint64_t)"Accept", (uint64_t)&__p, 0);
  if (SHIBYTE(v60[0]) < 0) {
    operator delete(__p);
  }
  uint64_t v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)a2 + 4, "Accept");
  if (v32)
  {
    int v33 = (const void *)*((void *)v32 + 5);
    if (v33)
    {
      if (v34)
      {
        long long v35 = v34;
        std::string::basic_string[abi:ne180100]<0>(&__p, "application/sdp");
        long long v36 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v35 + 64), &__p);
        if (SHIBYTE(v60[0]) < 0) {
          operator delete(__p);
        }
        if (v35 + 72 != (char *)v36)
        {
          std::string __p = 0;
          *(void *)&v60[0] = 0;
          if (*a3)
          {
            (*(void (**)(void **__return_ptr))(*(void *)*a3 + 128))(&v55);
            unint64_t v38 = v55;
            uint64_t v37 = v56;
            if (v56) {
              atomic_fetch_add_explicit(v56 + 1, 1uLL, memory_order_relaxed);
            }
            uint64_t v39 = *(std::__shared_weak_count **)&v60[0];
            std::string __p = v38;
            *(void *)&v60[0] = v37;
            if (v39) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v39);
            }
            uint64_t v40 = (std::__shared_weak_count *)v56;
            if (!v56) {
              goto LABEL_58;
            }
          }
          else
          {
            uint64_t v41 = *(void *)(a1 + 144);
            uint64_t v42 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v41 + 16));
            uint64_t v43 = *(void *)(v41 + 8);
            uint64_t v44 = *(void **)(v43 + 4304);
            uint64_t v45 = *(void *)(v43 + 4312);
            if (v45) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
            }
            std::string v46 = *(std::__shared_weak_count **)&v60[0];
            std::string __p = v44;
            *(void *)&v60[0] = v45;
            if (v46) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v46);
            }
            uint64_t v40 = v42;
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
LABEL_58:
          if (__p)
          {
            uint64_t v55 = 0;
            BOOL v56 = 0;
            std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> &,void>((uint64_t *)&__p, &v55);
            uint64_t v47 = *(void *)(a1 + 144);
            long long v48 = *(std::__shared_weak_count **)(v47 + 16);
            if (v48)
            {
              long long v48 = std::__shared_weak_count::lock(v48);
              long long v49 = v48;
              if (v48) {
                long long v48 = *(std::__shared_weak_count **)(v47 + 8);
              }
            }
            else
            {
              long long v49 = 0;
            }
            uint64_t v50 = (std::__shared_weak_count *)v56;
            v54[0] = (uint64_t)v55;
            v54[1] = (uint64_t)v56;
            if (v56) {
              atomic_fetch_add_explicit(v56 + 1, 1uLL, memory_order_relaxed);
            }
            SipStack::updateSdpWithLocalAddressAndUsername((uint64_t)v48, v54);
            if (v50) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v50);
            }
            if (v49) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v49);
            }
            if (*a3)
            {
              long long v51 = v55;
            }
            else
            {
              time_t v52 = time(0);
              long long v51 = v55;
              *((void *)v55 + 17) = v52;
              v51[18] = v52;
            }
            if (v53 >= 2) {
              SDPModel::setDesiredPrecondition((uint64_t)v51, 1, 1, 3);
            }
            if (v56) {
              atomic_fetch_add_explicit(v56 + 1, 1uLL, memory_order_relaxed);
            }
            SipMessage::setSdp();
          }
          if (*(void *)&v60[0]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v60[0]);
          }
        }
      }
    }
  }
  BambiCallOptions::~BambiCallOptions((void **)v66);
}

void sub_1C5627354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,std::__shared_weak_count *a25)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  BambiCallOptions::~BambiCallOptions((void **)&STACK[0x260]);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'SipOptionsManager::handleRequest(uint64_t a1, SipRequest *a2, uint64_t a3)
{
  return 1;
}

void SipOptionsManager::transactionTerminated(uint64_t a1, uint64_t a2)
{
}

void non-virtual thunk to'SipOptionsManager::transactionTerminated(uint64_t a1, uint64_t a2)
{
}

void SipOptionsManager::handleTransactionError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 152, (void **)(*(void *)a3 + 328));
  if ((void **)(a1 + 160) == v6 || (uint64_t v7 = (std::__shared_weak_count *)v6[8]) == 0)
  {
    uint64_t v9 = 0;
    goto LABEL_15;
  }
  uint64_t v8 = v6[7];
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v9 = std::__shared_weak_count::lock(v7);
  std::__shared_weak_count::__release_weak(v7);
  if (!v9 || !v8)
  {
LABEL_15:
    uint64_t v14 = *(void *)(a1 + 24);
    uint64_t v13 = a1 + 24;
    uint64_t v15 = (*(uint64_t (**)(uint64_t))(v14 + 48))(v13);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"no delegate registered for transaction ", 39);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 32))(v15, *(void *)a3 + 328);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (!v9) {
      return;
    }
    goto LABEL_16;
  }
  bzero(v20, 0x210uLL);
  SipRequest::SipRequest((SipRequest *)v20, *(const SipRequest **)(*(void *)a3 + 296));
  memset(&__p, 0, sizeof(__p));
  SipMessage::transactionId((SipMessage *)v20, &__p);
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  SipUri::SipUri((SipUri *)v17);
  long long v10 = SipMessage::header<SipContactHeader>((uint64_t)v20);
  if (v10)
  {
    uint64_t v11 = v10[9];
    if (v11)
    {
      if (v11 != v10[10]) {
        SipUri::operator=((SipUri *)v17, v11 + 8);
      }
    }
  }
  SipMessage::assertedIdentityList((SipMessage *)v20, (uint64_t)v16);
  v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(void *, void *, uint64_t, uint64_t, std::string *, _OWORD *, unsigned char *, uint64_t))(*(void *)v8 + 24))(v8, v20, 408, a2, &__p, v17, v16, (uint64_t)((double)(v12.__d_.__rep_ - *(void *)(a1 + 176)) / 1000000.0));
  uint64_t v23 = (void **)v16;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100](&v23);
  SipUri::~SipUri((SipUri *)v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v20[0] = &unk_1F20D3808;
  SipUri::~SipUri((SipUri *)&v22);
  if (v21 < 0) {
    operator delete((void *)v20[11]);
  }
  SipMessage::~SipMessage((SipMessage *)v20);
LABEL_16:
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_1C56277B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v73 - 72) = v72;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 72));
  SipUri::~SipUri((SipUri *)&a13);
  if (a70 < 0) {
    operator delete(__p);
  }
  SipRequest::~SipRequest(&a71);
  std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipOptionsManager::handleTransactionError(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void SipOptionsManager::sendOptionsRequest(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 144);
  std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v1 + 16));
  ims::AccessNetwork::isWifi((ims::AccessNetwork *)(*(void *)(v1 + 8) + 3160));
  SipMessageEncodingMap::createRequestFromTemplate();
}

void sub_1C5627E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<SipProxyResolver::ResolvedUri>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<SipProxyResolver::ResolvedUri>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a12);
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  ImsResult::~ImsResult(v33);
  SipContactParam::~SipContactParam((SipContactParam *)&__p);
  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  _Unwind_Resume(a1);
}

uint64_t SipOptionsManager::handleResponse(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 19), (void **)(*a3 + 328));
  if (a1 + 20 == v6 || (uint64_t v7 = (std::__shared_weak_count *)v6[8]) == 0)
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = v6[7];
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v9 = std::__shared_weak_count::lock(v7);
    if (!v9) {
      uint64_t v8 = 0;
    }
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v10 = a1[18];
  uint64_t v11 = *(std::__shared_weak_count **)(v10 + 16);
  if (v11 && (std::chrono::steady_clock::time_point v12 = std::__shared_weak_count::lock(v11)) != 0)
  {
    int v13 = *(unsigned __int8 *)(*(void *)(v10 + 8) + 2681);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  else
  {
    int v13 = MEMORY[0xA79];
  }
  uint64_t v47 = 0;
  memset(v46, 0, sizeof(v46));
  SipUri::SipUri((SipUri *)v46);
  uint64_t v14 = SipMessage::header<SipContactHeader>(a2);
  if (v14)
  {
    uint64_t v15 = v14[9];
    if (v15)
    {
      if (v15 != v14[10]) {
        SipUri::operator=((SipUri *)v46, v15 + 8);
      }
    }
  }
  uint64_t v45 = 0;
  memset(v44, 0, sizeof(v44));
  SipResultDomain::makeResult((_DWORD *)a2, (uint64_t)v44);
  if (!v8)
  {
    uint64_t v19 = a1[3];
    uint64_t v18 = a1 + 3;
    uint64_t v20 = (*(uint64_t (**)(void *))(v19 + 56))(v18);
    (*(void (**)(void *, uint64_t))(*v18 + 16))(v18, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"no delegate registered for transaction ", 39);
    *(unsigned char *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v20 + 32))(v20, *a3 + 328);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v20 + 17) = 0;
    goto LABEL_34;
  }
  uint64_t v16 = *(unsigned int *)(a2 + 88);
  if ((v16 - 200) < 0x64)
  {
LABEL_17:
    v17.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 16))(v8, a2, v16, (uint64_t)((double)(v17.__d_.__rep_ - a1[22]) / 1000000.0));
    goto LABEL_34;
  }
  if (v16 != 480) {
    goto LABEL_29;
  }
  char v21 = SipMessage::header<SipContactHeader>(a2);
  if (v21)
  {
    uint64_t v22 = v21[9];
    if (v22)
    {
      if (v22 != v21[10])
      {
        uint64_t v23 = SipMessage::header<SipContactHeader>(a2);
        uint64_t v24 = v23[9];
        if (v24 == v23[10]) {
          uint64_t v24 = 0;
        }
        if (*(void *)(v24 + 440))
        {
          uint64_t v25 = (*(uint64_t (**)(void *))(a1[3] + 64))(a1 + 3);
          (*(void (**)(void *, uint64_t))(a1[3] + 16))(a1 + 3, v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"Currently unregistered, but response has capabilities", 53);
          *(unsigned char *)(v25 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v25 + 17) = 0;
          uint64_t v16 = *(unsigned int *)(a2 + 88);
          goto LABEL_17;
        }
      }
    }
  }
  uint64_t v16 = *(unsigned int *)(a2 + 88);
  if (v16 != 480)
  {
LABEL_29:
    if (v16 != 408 && v16 != 404)
    {
      if (!v13 || v16 != 503)
      {
        SipMessage::transactionId((SipMessage *)a2, &__p);
        SipMessage::assertedIdentityList((SipMessage *)a2, (uint64_t)v42);
        v34.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        (*(void (**)(void *, uint64_t, uint64_t, _OWORD *, std::string *, _OWORD *, unsigned char *, uint64_t))(*(void *)v8 + 24))(v8, a2, v16, v44, &__p, v46, v42, (uint64_t)((double)(v34.__d_.__rep_ - a1[22]) / 1000000.0));
        goto LABEL_31;
      }
      uint64_t v30 = (*(uint64_t (**)(void *))(a1[3] + 56))(a1 + 3);
      (*(void (**)(void *, uint64_t))(a1[3] + 16))(a1 + 3, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"service unavailable", 19);
      *(unsigned char *)(v30 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v30 + 17) = 0;
      char v31 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a2 + 32), "Retry-After");
      if (v31)
      {
        uint64_t v32 = *((void *)v31 + 5);
        if (v32)
        {
          memset(&__p, 0, sizeof(__p));
          (*(void (**)(uint64_t, std::string *))(*(void *)v32 + 40))(v32, &__p);
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            uint64_t v33 = atoi((const char *)&__p);
            if (!v33) {
              goto LABEL_56;
            }
LABEL_46:
            long long v36 = (std::__shared_weak_count *)a3[1];
            v41[0] = *a3;
            v41[1] = v36;
            if (v36) {
              atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v40[0] = v8;
            v40[1] = v9;
            if (v9) {
              atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            SipOptionsManager::handleServiceUnavailable((uint64_t)a1, (uint64_t)v41, v40);
            if (v9) {
              std::__shared_weak_count::__release_weak(v9);
            }
            if (v36) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v36);
            }
            v37.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
            (*(void (**)(void *, _OWORD *, uint64_t, uint64_t))(*(void *)v8 + 32))(v8, v44, v33, (uint64_t)((double)(v37.__d_.__rep_ - a1[22]) / 1000000.0));
            goto LABEL_32;
          }
          long long v35 = (void *)__p.__r_.__value_.__r.__words[0];
          uint64_t v33 = atoi(__p.__r_.__value_.__l.__data_);
          if (v33) {
            goto LABEL_46;
          }
          operator delete(v35);
        }
      }
LABEL_56:
      uint64_t v38 = *(unsigned int *)(a2 + 88);
      SipMessage::transactionId((SipMessage *)a2, &__p);
      SipMessage::assertedIdentityList((SipMessage *)a2, (uint64_t)v42);
      v39.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      (*(void (**)(void *, uint64_t, uint64_t, _OWORD *, std::string *, _OWORD *, unsigned char *, uint64_t))(*(void *)v8 + 24))(v8, a2, v38, v44, &__p, v46, v42, (uint64_t)((double)(v39.__d_.__rep_ - a1[22]) / 1000000.0));
      goto LABEL_31;
    }
  }
  uint64_t v26 = (*(uint64_t (**)(void *))(a1[3] + 56))(a1 + 3);
  (*(void (**)(void *, uint64_t))(a1[3] + 16))(a1 + 3, v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"Options response error: ", 24);
  *(unsigned char *)(v26 + 17) = 0;
  (*(void (**)(_OWORD *, uint64_t))(*(void *)&v44[0] + 16))(v44, v26);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v26 + 17) = 0;
  uint64_t v27 = *(unsigned int *)(a2 + 88);
  SipMessage::transactionId((SipMessage *)a2, &__p);
  SipMessage::assertedIdentityList((SipMessage *)a2, (uint64_t)v42);
  v28.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  (*(void (**)(void *, uint64_t, uint64_t, _OWORD *, std::string *, _OWORD *, unsigned char *, uint64_t))(*(void *)v8 + 24))(v8, a2, v27, v44, &__p, v46, v42, (uint64_t)((double)(v28.__d_.__rep_ - a1[22]) / 1000000.0));
LABEL_31:
  long long v48 = (void **)v42;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100](&v48);
LABEL_32:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_34:
  ImsResult::~ImsResult((ImsResult *)v44);
  SipUri::~SipUri((SipUri *)v46);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return 1;
}

void sub_1C5628748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult((ImsResult *)&a22);
  SipUri::~SipUri((SipUri *)&a32);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(a1);
}

void SipOptionsManager::handleServiceUnavailable(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  bzero(v30, 0x210uLL);
  SipRequest::SipRequest((SipRequest *)v30, *(const SipRequest **)(*(void *)a2 + 296));
  uint64_t v29 = 0;
  memset(v28, 0, sizeof(v28));
  SipUri::SipUri((SipUri *)v28, (const SipUri *)v32);
  memset(&v27, 0, sizeof(v27));
  uint64_t v6 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)v30);
  uint64_t v7 = (long long *)(v6 + 64);
  if (!v6) {
    uint64_t v7 = &ims::kEmptyString;
  }
  if (*((char *)v7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)v7, *((void *)v7 + 1));
  }
  else {
    std::string v27 = *(std::string *)v7;
  }
  long long v26 = 0u;
  memset(__str, 0, sizeof(__str));
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(__str, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    __str[0] = v27;
  }
  SipUri::SipUri((SipUri *)&__str[1], (const SipUri *)v28);
  uint64_t v8 = a3[1];
  *(void *)&long long v26 = *a3;
  *((void *)&v26 + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a1 + 128);
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 136);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v24 = 0;
  std::operator+<char>();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 16))(a1 + 24, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"handleServiceUnavailable. Retrying OPTIONS again after ", 55);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" seconds.", 9);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  long long v36 = 0;
  std::chrono::steady_clock::time_point v12 = operator new(0x20uLL);
  void *v12 = &unk_1F20E5F70;
  v12[1] = a1;
  v12[2] = v10;
  v12[3] = v9;
  long long v36 = v12;
  SipTimerContainer::startTimer((int8x8_t *)(a1 + 208), (uint64_t)__p);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v35);
  int v13 = *(char **)(a1 + 192);
  uint64_t v14 = (char **)(a1 + 192);
  uint64_t v15 = (char **)(a1 + 192);
  if (!v13) {
    goto LABEL_24;
  }
  uint64_t v14 = (char **)(a1 + 192);
  while (1)
  {
    while (1)
    {
      uint64_t v15 = (char **)v13;
      uint64_t v16 = v13 + 32;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, (void **)v13 + 4) & 0x80) == 0) {
        break;
      }
      int v13 = *v15;
      uint64_t v14 = v15;
      if (!*v15) {
        goto LABEL_24;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v16, __p) & 0x80) == 0) {
      break;
    }
    uint64_t v14 = v15 + 1;
    int v13 = v15[1];
    if (!v13) {
      goto LABEL_24;
    }
  }
  std::chrono::steady_clock::time_point v17 = *v14;
  if (!*v14)
  {
LABEL_24:
    uint64_t v34 = 0;
    uint64_t v18 = (char *)operator new(0x1F8uLL);
    uint64_t v19 = v18;
    v33[0] = v18;
    v33[1] = a1 + 192;
    if (SHIBYTE(v24) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v18 + 32), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    }
    else
    {
      *((_OWORD *)v18 + 2) = *(_OWORD *)__p;
      *((void *)v18 + 6) = v24;
    }
    *(_OWORD *)(v19 + 56) = 0u;
    *(_OWORD *)(v19 + 472) = 0u;
    *(_OWORD *)(v19 + 488) = 0u;
    *(_OWORD *)(v19 + 440) = 0u;
    *(_OWORD *)(v19 + 456) = 0u;
    *(_OWORD *)(v19 + 408) = 0u;
    *(_OWORD *)(v19 + 424) = 0u;
    *(_OWORD *)(v19 + 376) = 0u;
    *(_OWORD *)(v19 + 392) = 0u;
    *(_OWORD *)(v19 + 344) = 0u;
    *(_OWORD *)(v19 + 360) = 0u;
    *(_OWORD *)(v19 + 312) = 0u;
    *(_OWORD *)(v19 + 328) = 0u;
    *(_OWORD *)(v19 + 296) = 0u;
    *(_OWORD *)(v19 + 232) = 0u;
    *(_OWORD *)(v19 + 248) = 0u;
    *(_OWORD *)(v19 + 200) = 0u;
    *(_OWORD *)(v19 + 216) = 0u;
    *(_OWORD *)(v19 + 168) = 0u;
    *(_OWORD *)(v19 + 184) = 0u;
    *(_OWORD *)(v19 + 136) = 0u;
    *(_OWORD *)(v19 + 152) = 0u;
    *(_OWORD *)(v19 + 104) = 0u;
    *(_OWORD *)(v19 + 120) = 0u;
    *(_OWORD *)(v19 + 72) = 0u;
    *(_OWORD *)(v19 + 88) = 0u;
    *(_OWORD *)(v19 + 280) = 0u;
    *(_OWORD *)(v19 + 264) = 0u;
    SipUri::SipUri((SipUri *)(v19 + 80));
    *((void *)v19 + 61) = 0;
    *((void *)v19 + 62) = 0;
    LOBYTE(v34) = 1;
    *(void *)uint64_t v19 = 0;
    *((void *)v19 + 1) = 0;
    *((void *)v19 + 2) = v15;
    *uint64_t v14 = v19;
    uint64_t v20 = **(void **)(a1 + 184);
    if (v20)
    {
      *(void *)(a1 + 184) = v20;
      uint64_t v19 = *v14;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 192), (uint64_t *)v19);
    ++*(void *)(a1 + 200);
    std::chrono::steady_clock::time_point v17 = (char *)v33[0];
    v33[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,ResendOptionsInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ResendOptionsInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v33);
  }
  std::string::operator=((std::string *)(v17 + 56), __str);
  SipUri::operator=((SipUri *)(v17 + 80), (uint64_t)&__str[1]);
  long long v21 = v26;
  if (*((void *)&v26 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)v17 + 62);
  *(_OWORD *)(v17 + 488) = v21;
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  if (v9)
  {
    std::__shared_weak_count::__release_weak(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v26 + 1));
  }
  SipUri::~SipUri((SipUri *)&__str[1]);
  if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  SipUri::~SipUri((SipUri *)v28);
  v30[0] = &unk_1F20D3808;
  SipUri::~SipUri((SipUri *)v32);
  if (v31 < 0) {
    operator delete((void *)v30[11]);
  }
  SipMessage::~SipMessage((SipMessage *)v30);
}

void sub_1C5628D68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,ResendOptionsInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ResendOptionsInfo>,void *>>>>::reset[abi:ne180100](v74 - 144);
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v73)
  {
    std::__shared_weak_count::__release_weak(v73);
    std::__shared_weak_count::__release_weak(v73);
  }
  ResendOptionsInfo::~ResendOptionsInfo((ResendOptionsInfo *)&a16);
  if (a73 < 0) {
    operator delete(a72);
  }
  SipUri::~SipUri((SipUri *)&STACK[0x200]);
  SipRequest::~SipRequest((void **)&STACK[0x3A0]);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'SipOptionsManager::handleResponse(uint64_t a1, uint64_t a2, void *a3)
{
  return 1;
}

void ResendOptionsInfo::~ResendOptionsInfo(ResendOptionsInfo *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  SipUri::~SipUri((ResendOptionsInfo *)((char *)this + 24));
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

void SipOptionsManager::~SipOptionsManager(SipOptionsManager *this)
{
  *(void *)this = &unk_1F20E5D50;
  *((void *)this + 1) = &unk_1F20E5DA8;
  *((void *)this + 2) = &unk_1F20E5DF0;
  *((void *)this + 3) = &unk_1F20E5E20;
  SipTimerContainer::~SipTimerContainer((SipOptionsManager *)((char *)this + 208));
  std::__tree<std::__value_type<std::string,ResendOptionsInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ResendOptionsInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ResendOptionsInfo>>>::destroy((uint64_t)this + 184, *((void **)this + 24));
  std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(*((void **)this + 20));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this + 3) = &unk_1F20C9CA0;
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20E5D50;
  *((void *)this + 1) = &unk_1F20E5DA8;
  *((void *)this + 2) = &unk_1F20E5DF0;
  *((void *)this + 3) = &unk_1F20E5E20;
  SipTimerContainer::~SipTimerContainer((SipOptionsManager *)((char *)this + 208));
  std::__tree<std::__value_type<std::string,ResendOptionsInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ResendOptionsInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ResendOptionsInfo>>>::destroy((uint64_t)this + 184, *((void **)this + 24));
  std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(*((void **)this + 20));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this + 3) = &unk_1F20C9CA0;
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  JUMPOUT(0x1C878E320);
}

void SipOptionsManager::loggableName(LoggableString *a1@<X8>)
{
}

void non-virtual thunk to'SipOptionsManager::~SipOptionsManager(SipOptionsManager *this)
{
  *((void *)this - 1) = &unk_1F20E5D50;
  *(void *)this = &unk_1F20E5DA8;
  *((void *)this + 1) = &unk_1F20E5DF0;
  *((void *)this + 2) = &unk_1F20E5E20;
  SipTimerContainer::~SipTimerContainer((SipOptionsManager *)((char *)this + 200));
  std::__tree<std::__value_type<std::string,ResendOptionsInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ResendOptionsInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ResendOptionsInfo>>>::destroy((uint64_t)this + 176, *((void **)this + 23));
  std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(*((void **)this + 19));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this + 2) = &unk_1F20C9CA0;
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  SipOptionsManager::~SipOptionsManager((SipOptionsManager *)((char *)this - 8));
}

{
  std::__shared_weak_count *v2;

  *((void *)this - 2) = &unk_1F20E5D50;
  *((void *)this - 1) = &unk_1F20E5DA8;
  *(void *)this = &unk_1F20E5DF0;
  *((void *)this + 1) = &unk_1F20E5E20;
  SipTimerContainer::~SipTimerContainer((SipOptionsManager *)((char *)this + 192));
  std::__tree<std::__value_type<std::string,ResendOptionsInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ResendOptionsInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ResendOptionsInfo>>>::destroy((uint64_t)this + 168, *((void **)this + 22));
  std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(*((void **)this + 18));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *((void *)this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  SipOptionsManager::~SipOptionsManager((SipOptionsManager *)((char *)this - 16));
}

{
  std::__shared_weak_count *v2;

  *((void *)this - 3) = &unk_1F20E5D50;
  *((void *)this - 2) = &unk_1F20E5DA8;
  *((void *)this - 1) = &unk_1F20E5DF0;
  *(void *)this = &unk_1F20E5E20;
  SipTimerContainer::~SipTimerContainer((SipOptionsManager *)((char *)this + 184));
  std::__tree<std::__value_type<std::string,ResendOptionsInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ResendOptionsInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ResendOptionsInfo>>>::destroy((uint64_t)this + 160, *((void **)this + 21));
  std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(*((void **)this + 17));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  SipOptionsManager::~SipOptionsManager((SipOptionsManager *)((char *)this - 24));
}

void non-virtual thunk to'SipOptionsManager::loggableName(LoggableString *a1@<X8>)
{
}

void std::__tree<std::__value_type<std::string,ResendOptionsInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ResendOptionsInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ResendOptionsInfo>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,ResendOptionsInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ResendOptionsInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ResendOptionsInfo>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,ResendOptionsInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ResendOptionsInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ResendOptionsInfo>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,ResendOptionsInfo>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,ResendOptionsInfo>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 464);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  SipUri::~SipUri((SipUri *)(a1 + 48));
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<SipOptionsDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<SipOptionsDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<SipOptionsDelegate>>>>::__erase_unique<std::string>(void ***a1, void **a2)
{
  int v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (void ***)v3)
  {
    char v4 = (uint64_t *)v3;
    uint64_t v5 = (void **)v3[1];
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = (void **)*v5;
      }
      while (v5);
    }
    else
    {
      uint64_t v7 = v3;
      do
      {
        uint64_t v6 = (void **)v7[2];
        BOOL v8 = *v6 == v7;
        uint64_t v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3) {
      *a1 = v6;
    }
    uint64_t v9 = (uint64_t *)a1[1];
    a1[2] = (void **)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

void std::__shared_ptr_pointer<SipRequest *,std::shared_ptr<SipRequest>::__shared_ptr_default_delete<SipRequest,SipRequest>,std::allocator<SipRequest>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<SipRequest *,std::shared_ptr<SipRequest>::__shared_ptr_default_delete<SipRequest,SipRequest>,std::allocator<SipRequest>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<SipRequest *,std::shared_ptr<SipRequest>::__shared_ptr_default_delete<SipRequest,SipRequest>,std::allocator<SipRequest>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0,std::allocator<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E5F70;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0,std::allocator<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E5F70;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0,std::allocator<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20E5F70;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0,std::allocator<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E5F70;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0,std::allocator<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0,std::allocator<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0,std::allocator<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, void **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2])
      {
        BOOL v8 = *(void **)(v5 + 192);
        if (v8)
        {
          uint64_t v9 = v5 + 192;
          do
          {
            char v10 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8 + 4, a2);
            if (v10 >= 0) {
              uint64_t v11 = v8;
            }
            else {
              uint64_t v11 = v8 + 1;
            }
            if (v10 >= 0) {
              uint64_t v9 = (uint64_t)v8;
            }
            BOOL v8 = (void *)*v11;
          }
          while (*v11);
          if (v9 != v5 + 192
            && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)(v9 + 32)) & 0x80) == 0)
          {
            uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)(v5 + 24) + 64))(v5 + 24);
            (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 + 24) + 16))(v5 + 24, v12);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Retrying OPTIONS request again as recommended by Server", 55);
            *(unsigned char *)(v12 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v12 + 17) = 0;
            long long v18 = 0u;
            memset(v17, 0, sizeof(v17));
            if (*(char *)(v9 + 79) < 0) {
              std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(v9 + 56), *(void *)(v9 + 64));
            }
            else {
              v17[0] = *(std::string *)(v9 + 56);
            }
            SipUri::SipUri((SipUri *)&v17[1], (const SipUri *)(v9 + 80));
            uint64_t v16 = *(void *)(v9 + 496);
            *(void *)&long long v18 = *(void *)(v9 + 488);
            *((void *)&v18 + 1) = v16;
            if (v16)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
              if (*((void *)&v18 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v18 + 1) + 16), 1uLL, memory_order_relaxed);
              }
            }
            SipOptionsManager::sendOptionsRequest(v5);
          }
        }
        uint64_t v14 = *(void *)(v5 + 24);
        uint64_t v13 = v5 + 24;
        uint64_t v15 = (*(uint64_t (**)(uint64_t))(v14 + 48))(v13);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Timer fired for unknown id ", 27);
        *(unsigned char *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(void *)v15 + 32))(v15, a2);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v15 + 17) = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5629BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if ((v28 & 1) == 0) {
    std::__shared_weak_count::__release_weak(v27);
  }
  ResendOptionsInfo::~ResendOptionsInfo((ResendOptionsInfo *)&__p);
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0,std::allocator<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0,std::allocator<SipOptionsManager::handleServiceUnavailable(std::shared_ptr<SipTransaction>,std::weak_ptr<SipOptionsDelegate>,unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,ResendOptionsInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ResendOptionsInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ResendOptionsInfo>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void SipWWWAuthenticateHeader::createAuthorizationHeader(SipWWWAuthenticateHeader *this)
{
}

void sub_1C5629D20(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40ADE1DEA6);
  _Unwind_Resume(a1);
}

void SipWWWAuthenticateHeader::~SipWWWAuthenticateHeader(SipWWWAuthenticateHeader *this)
{
  SipAuthenticateHeader::~SipAuthenticateHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipWWWAuthenticateHeader::clone(SipWWWAuthenticateHeader *this)
{
}

void sub_1C5629DE4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40ADE1DEA6);
  _Unwind_Resume(a1);
}

uint64_t ImsPref::ImsPref(uint64_t a1, const std::string *a2, const std::string *a3, uint64_t a4)
{
  *(void *)a1 = &unk_1F20E6098;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v7 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  std::string::operator=((std::string *)(a1 + 8), a2);
  std::string::operator=(v7, a3);
  *(void *)(a1 + 80) = a4;
  return a1;
}

void sub_1C5629E9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*(void **)(v1 + 56));
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsPref::ImsPref(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  char v4 = (std::string *)(a1 + 56);
  *(_OWORD *)(a1 + 88) = 0u;
  uint64_t v5 = (void *)(a1 + 88);
  *(void *)a1 = &unk_1F20E6098;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v6 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=(v6, (const std::string *)(a2 + 32));
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *uint64_t v5 = 0;
  v5[1] = 0;
  std::string::operator=(v4, (const std::string *)(a2 + 56));
  return a1;
}

void sub_1C5629F88(_Unwind_Exception *exception_object)
{
  if (v1[79] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void ImsStringPref::stringValue(ImsStringPref *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 12);
  if (v4 {
    && (uint64_t v5 = (const void *)*((void *)this + 10)) != 0
  }
  {
    uint64_t v7 = *(void *)(v4 + 32);
    ImsPrefs::substituteRuntimeVars(v7, (uint64_t)this + 104, (uint64_t)a2);
  }
  else if (*((char *)this + 127) < 0)
  {
    BOOL v8 = (const std::string::value_type *)*((void *)this + 13);
    std::string::size_type v9 = *((void *)this + 14);
    std::string::__init_copy_ctor_external(a2, v8, v9);
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 104);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 15);
  }
}

void ImsPrefs::substituteRuntimeVars(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(void *)(a3 + 16) = *(void *)(a2 + 16);
  }
  uint64_t v5 = *(void **)(a1 + 264);
  uint64_t v6 = (void *)(a1 + 272);
  if (v5 != v6)
  {
    do
    {
      ims::substituteVar((const std::string *)a3, (uint64_t)(v5 + 7), (uint64_t)(v5 + 10), &v10);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = v10;
      *(void *)(a3 + 16) = v11;
      uint64_t v7 = (void *)v5[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v5[2];
          BOOL v9 = *v8 == (void)v5;
          uint64_t v5 = v8;
        }
        while (!v9);
      }
      uint64_t v5 = v8;
    }
    while (v8 != v6);
  }
}

void sub_1C562A1A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL ImsStringPref::BOOLValue(ImsStringPref *this)
{
  std::string::basic_string[abi:ne180100]<0>(v11, "true");
  uint64_t v4 = (const char *)*((void *)this + 13);
  uint64_t v3 = (char *)this + 104;
  uint64_t v2 = v4;
  if (v3[23] >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v2;
  }
  int v6 = v12;
  uint64_t v7 = (void *)v11[0];
  if (v12 >= 0) {
    BOOL v8 = (const char *)v11;
  }
  else {
    BOOL v8 = (const char *)v11[0];
  }
  int v9 = strcasecmp(v5, v8);
  if (v6 < 0) {
    operator delete(v7);
  }
  return v9 == 0;
}

uint64_t ImsStringPref::intValue(ImsStringPref *this)
{
  uint64_t v2 = 0;
  if (ims::strToLong((uint64_t *)this + 13, &v2)) {
    return v2;
  }
  else {
    return 0;
  }
}

__CFString *ImsStringPref::cfValue(ImsStringPref *this)
{
  uint64_t v1 = (void *)((char *)this + 104);
  if ((*((char *)this + 127) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 127)) {
      return &stru_1F20EAF20;
    }
    return (__CFString *)[NSString stringWithUTF8String:v1];
  }
  if (*((void *)this + 14))
  {
    uint64_t v1 = (void *)*v1;
    return (__CFString *)[NSString stringWithUTF8String:v1];
  }
  return &stru_1F20EAF20;
}

uint64_t ImsIntPref::stringValue@<X0>(void *a1@<X8>)
{
  uint64_t v9 = 0;
  long long v7 = 0u;
  memset(v8, 0, sizeof(v8));
  *(_OWORD *)std::string __p = 0u;
  long long v6 = 0u;
  memset(v4, 0, sizeof(v4));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v4 + 8, a1);
  *(void *)&v4[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v4 + *(void *)(*(void *)&v4[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v4[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v8);
}

void sub_1C562A40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ImsIntPref::cfValue(ImsIntPref *this)
{
  return [NSNumber numberWithInt:*((unsigned int *)this + 26)];
}

uint64_t ImsBoolPref::cfValue(ImsBoolPref *this)
{
  if (*((unsigned char *)this + 104)) {
    uint64_t v1 = MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v1 = MEMORY[0x1E4F1CFC8];
  }
  return *(void *)v1;
}

void ImsArrayPref::~ImsArrayPref(ImsArrayPref *this)
{
  *(void *)this = &unk_1F20E60F8;
  uint64_t v2 = (void *)*((void *)this + 13);
  uint64_t v3 = (void *)*((void *)this + 14);
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)*((void *)this + 13);
  }
  if (v2)
  {
    *((void *)this + 14) = v2;
    operator delete(v2);
  }
  ImsPref::~ImsPref((void **)this);
}

{
  uint64_t vars8;

  ImsArrayPref::~ImsArrayPref(this);
  JUMPOUT(0x1C878E320);
}

uint64_t ImsArrayPref::log(ImsArrayPref *this, ImsOutStream *a2)
{
  return (*(uint64_t (**)(ImsArrayPref *, ImsOutStream *, void, void))(*(void *)this + 72))(this, a2, 0, 0);
}

ImsOutStream *ImsArrayPref::log(ImsArrayPref *this, ImsOutStream *a2, uint64_t a3, int a4)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"[", 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v8 = *((void *)this + 13);
  if (*((void *)this + 14) != v8)
  {
    unint64_t v9 = 0;
    size_t v10 = a4 + 4;
    do
    {
      uint64_t v11 = *(void *)(v8 + 8 * v9);
      std::string::basic_string[abi:ne180100](&v14, v10, 32);
      LoggableString::LoggableString(&__p, &v14);
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v14.__r_.__value_.__l.__data_);
      }
      (*(void (**)(uint64_t, ImsOutStream *, uint64_t, size_t))(*(void *)v11 + 72))(v11, a2, a3, v10);
      if (v9 < ((uint64_t)(*((void *)this + 14) - *((void *)this + 13)) >> 3) - 1)
      {
        char v12 = (void *)*((void *)a2 + 1);
        __p.__r_.__value_.__s.__data_[0] = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&__p, 1);
        *((unsigned char *)a2 + 17) = 0;
      }
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      ++v9;
      uint64_t v8 = *((void *)this + 13);
    }
    while (v9 < (*((void *)this + 14) - v8) >> 3);
  }
  std::string::basic_string[abi:ne180100](&v14, a4, 32);
  LoggableString::LoggableString(&__p, &v14);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"]", 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  return a2;
}

void sub_1C562A80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id ImsArrayPref::cfValue(ImsArrayPref *this)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v4 = (uint64_t *)*((void *)this + 13);
  uint64_t v3 = (uint64_t *)*((void *)this + 14);
  while (v4 != v3)
  {
    uint64_t v5 = *v4++;
    [v2 addObject:(*(uint64_t (**)(uint64_t))(*(void *)v5 + 64))(v5)];
  }
  return v2;
}

void ImsArrayPref::stringValues(uint64_t a1, std::vector<std::string> *a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  if (v2 != v3)
  {
    p_end_cap = (std::allocator<std::string> *)&a2->__end_cap_;
    do
    {
      (*(void (**)(void **__return_ptr))(**(void **)v2 + 48))(__p);
      std::vector<std::string>::pointer end = a2->__end_;
      value = a2->__end_cap_.__value_;
      if (end >= value)
      {
        unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a2->__begin_) >> 3);
        unint64_t v10 = v9 + 1;
        if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::string>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a2->__begin_) >> 3);
        if (2 * v11 > v10) {
          unint64_t v10 = 2 * v11;
        }
        if (v11 >= 0x555555555555555) {
          unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v12 = v10;
        }
        __v.__end_cap_.__value_ = p_end_cap;
        if (v12) {
          uint64_t v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v12);
        }
        else {
          uint64_t v13 = 0;
        }
        std::string v14 = v13 + v9;
        __v.__first_ = v13;
        __v.__begin_ = v14;
        __v.__end_cap_.__value_ = &v13[v12];
        long long v15 = *(_OWORD *)__p;
        v14->__r_.__value_.__r.__words[2] = v19;
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
        __p[1] = 0;
        std::string::size_type v19 = 0;
        __p[0] = 0;
        __v.__end_ = v14 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(a2, &__v);
        uint64_t v16 = a2->__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v17 = SHIBYTE(v19);
        a2->__end_ = v16;
        if (v17 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        long long v8 = *(_OWORD *)__p;
        end->__r_.__value_.__r.__words[2] = v19;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v8;
        a2->__end_ = end + 1;
      }
      v2 += 8;
    }
    while (v2 != v3);
  }
}

void sub_1C562AA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::__split_buffer<std::string> *a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsArrayPref::childWithName(uint64_t a1, uint64_t *a2)
{
  unint64_t v7 = 0;
  int v3 = ims::strToLong(a2, (uint64_t *)&v7);
  unint64_t v4 = v7;
  if (!v3) {
    unint64_t v4 = -1;
  }
  if ((v4 & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 104);
  if (v4 >= (*(void *)(a1 + 112) - v5) >> 3) {
    return 0;
  }
  else {
    return *(void *)(v5 + 8 * v4);
  }
}

void ImsArrayPref::addChild(ImsArrayPref *this, ImsPref *a2)
{
  *((void *)a2 + 11) = this;
  uint64_t v5 = (void *)*((void *)this + 14);
  unint64_t v4 = *((void *)this + 15);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = *((void *)this + 13);
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<ImsPref *>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (void *)(v11 + 8 * v8);
    unint64_t v14 = v11 + 8 * v12;
    void *v13 = a2;
    long long v6 = v13 + 1;
    uint64_t v16 = (char *)*((void *)this + 13);
    long long v15 = (char *)*((void *)this + 14);
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *--uint64_t v13 = v17;
      }
      while (v15 != v16);
      long long v15 = (char *)*((void *)this + 13);
    }
    *((void *)this + 13) = v13;
    *((void *)this + 14) = v6;
    *((void *)this + 15) = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    long long v6 = v5 + 1;
  }
  *((void *)this + 14) = v6;
}

void ImsArrayPref::merge(ImsArrayPref *this, const ImsArrayPref *a2, const ImsArrayPref *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    do
    {
      uint64_t v6 = *(void *)v4;
      unint64_t v4 = (const ImsArrayPref *)((char *)v4 + 8);
      uint64_t v7 = (ImsPref *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
      ImsArrayPref::addChild(this, v7);
    }
    while (v4 != a3);
  }
}

void ImsDictPref::~ImsDictPref(ImsDictPref *this)
{
  *(void *)this = &unk_1F20E6168;
  uint64_t v2 = (char *)this + 104;
  int v3 = (char *)*((void *)this + 13);
  unint64_t v4 = (char *)this + 112;
  if (v3 != (char *)this + 112)
  {
    do
    {
      uint64_t v5 = *((void *)v3 + 7);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      uint64_t v6 = (char *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (char *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          int v3 = v7;
        }
        while (!v8);
      }
      int v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<std::string>::destroy((uint64_t)v2, *((char **)this + 14));
  ImsPref::~ImsPref((void **)this);
}

{
  uint64_t vars8;

  ImsDictPref::~ImsDictPref(this);
  JUMPOUT(0x1C878E320);
}

void *ImsDictPref::childWithName(uint64_t a1, uint64_t a2)
{
  memset(&__p, 0, sizeof(__p));
  ims::lowerCase(a2, &__p);
  int v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 104, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 112) == v3) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = v3[7];
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

{
  void **v3;
  void *v4;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  ims::lowerCase(a2, &__p);
  int v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 104, (void **)&__p.__r_.__value_.__l.__data_);
  if ((void **)(a1 + 112) == v3) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = v3[7];
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v4;
}

void sub_1C562AE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsDictPref::log(ImsDictPref *this, ImsOutStream *a2)
{
  return (*(uint64_t (**)(ImsDictPref *, ImsOutStream *, void, void))(*(void *)this + 72))(this, a2, 0, 0);
}

ImsOutStream *ImsDictPref::log(ImsDictPref *this, ImsOutStream *a2, uint64_t a3, int a4)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"{", 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v7 = (char *)*((void *)this + 13);
  BOOL v8 = (char *)this + 112;
  if (v7 != (char *)this + 112)
  {
    size_t v9 = a4 + 4;
    do
    {
      uint64_t v10 = *((void *)v7 + 7);
      memset(&v24, 0, sizeof(v24));
      if (v10)
      {
        uint64_t v11 = v10;
        while (!*(void *)(v11 + 80))
        {
          uint64_t v11 = *(void *)(v11 + 88);
          if (!v11) {
            goto LABEL_7;
          }
        }
      }
      else
      {
LABEL_7:
        *((unsigned char *)&v24.__r_.__value_.__s + 23) = 10;
        LOWORD(v24.__r_.__value_.__r.__words[1]) = 8285;
        v24.__r_.__value_.__r.__words[0] = *(void *)"[UNKNOWN] ";
      }
      memset(&v23, 0, sizeof(v23));
      if (a3) {
        std::string::operator=(&v23, (const std::string *)(v10 + 32));
      }
      if (!v10) {
        __cxa_bad_typeid();
      }
      {
        std::string::basic_string[abi:ne180100](&__b, v9, 32);
        LoggableString::LoggableString(&v22, &__b);
        (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v22);
        LoggableString::LoggableString(&v20, (const std::string *)(v10 + 8));
        (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
        *((unsigned char *)a2 + 17) = 0;
      }
      else
      {
        std::string::size_type size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v23.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          std::string::basic_string[abi:ne180100](&__b, v9, 32);
          LoggableString::LoggableString(&v22, &__b);
          (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v22);
          LoggableString::LoggableString(&v20, &v24);
          (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v20);
          LoggableString::LoggableString(&v19, (const std::string *)(v10 + 8));
          (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" (", 2);
          *((unsigned char *)a2 + 17) = 0;
          LoggableString::LoggableString(&__p, &v23);
          (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"): ", 3);
          *((unsigned char *)a2 + 17) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100](&__b, v9, 32);
          LoggableString::LoggableString(&v22, &__b);
          (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v22);
          LoggableString::LoggableString(&v20, &v24);
          (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v20);
          LoggableString::LoggableString(&v19, (const std::string *)(v10 + 8));
          (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
          *((unsigned char *)a2 + 17) = 0;
        }
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__b.__r_.__value_.__l.__data_);
      }
      (*(void (**)(uint64_t, ImsOutStream *, uint64_t, size_t))(*(void *)v10 + 72))(v10, a2, a3, v9);
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      uint64_t v13 = (char *)*((void *)v7 + 1);
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          uint64_t v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v14 = (char *)*((void *)v7 + 2);
          BOOL v15 = *(void *)v14 == (void)v7;
          uint64_t v7 = v14;
        }
        while (!v15);
      }
      uint64_t v7 = v14;
    }
    while (v14 != v8);
  }
  std::string::basic_string[abi:ne180100](&v23, a4, 32);
  LoggableString::LoggableString(&v24, &v23);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"}", 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  return a2;
}

void sub_1C562B45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id ImsDictPref::cfValue(ImsDictPref *this)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  int v3 = (char *)*((void *)this + 13);
  unint64_t v4 = (char *)this + 112;
  if (v3 != (char *)this + 112)
  {
    do
    {
      uint64_t v5 = *((void *)v3 + 7);
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 64))(v5);
      uint64_t v7 = (void *)(v5 + 8);
      if (*(char *)(v5 + 31) < 0)
      {
        if (!*(void *)(v5 + 16))
        {
LABEL_8:
          BOOL v8 = &stru_1F20EAF20;
          goto LABEL_9;
        }
        uint64_t v7 = (void *)*v7;
      }
      else if (!*(unsigned char *)(v5 + 31))
      {
        goto LABEL_8;
      }
      BOOL v8 = (__CFString *)[NSString stringWithUTF8String:v7];
LABEL_9:
      [v2 setObject:v6 forKey:v8];
      size_t v9 = (char *)*((void *)v3 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          size_t v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (char *)*((void *)v3 + 2);
          BOOL v11 = *(void *)v10 == (void)v3;
          int v3 = v10;
        }
        while (!v11);
      }
      int v3 = v10;
    }
    while (v10 != v4);
  }
  return v2;
}

void ImsDictPref::addChildWithName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = ImsDictPref::childWithName(a1, a3);
  if (v6) {
    (*(void (**)(void *))(*(void *)v6 + 8))(v6);
  }
  *(void *)(a2 + 88) = a1;
  ims::lowerCase(a3, &__p);
  p_p = &__p;
  *((void *)std::__tree<std::__value_type<std::string,ImsPref *>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsPref *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsPref *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 104), (void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)&p_p)+ 7) = a2;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C562B72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsDictPref::merge(ImsDictPref *this, const ImsDictPref *a2)
{
  id v2 = (char *)*((void *)a2 + 13);
  int v3 = (char *)a2 + 112;
  if (v2 != (char *)a2 + 112)
  {
    unint64_t v4 = this;
    while (1)
    {
      uint64_t v5 = ImsDictPref::childWithName((uint64_t)v4, (uint64_t)(v2 + 32));
      uint64_t v6 = (const void *)*((void *)v2 + 7);
      if (!v5) {
        goto LABEL_9;
      }
      uint64_t v7 = v5;
      if (!v6) {
        break;
      }
      size_t v9 = v8;
      if (!v9 || !v10)
      {
        unint64_t v4 = this;
        if (v15 && v16)
        {
          ImsArrayPref::merge(v15, v16[13], v16[14]);
          goto LABEL_10;
        }
        goto LABEL_9;
      }
      ImsDictPref::merge(v9, v10);
      unint64_t v4 = this;
LABEL_10:
      uint64_t v12 = (char *)*((void *)v2 + 1);
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (char *)*((void *)v2 + 2);
          BOOL v14 = *(void *)v13 == (void)v2;
          id v2 = v13;
        }
        while (!v14);
      }
      id v2 = v13;
      if (v13 == v3) {
        return;
      }
    }
LABEL_9:
    uint64_t v11 = (*(uint64_t (**)(const void *))(*(void *)v6 + 32))(v6);
    ImsDictPref::addChildWithName((uint64_t)v4, v11, (uint64_t)(v2 + 32));
    goto LABEL_10;
  }
}

void ImsDictPref::stringMapValue(uint64_t a1, uint64_t **a2)
{
  id v2 = *(void **)(a1 + 104);
  int v3 = (void *)(a1 + 112);
  if (v2 != (void *)(a1 + 112))
  {
    do
    {
      (*(void (**)(long long *__return_ptr))(*(void *)v2[7] + 48))(&v10);
      uint64_t v12 = (long long *)(v2 + 4);
      uint64_t v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (void **)v2 + 4, (uint64_t)&std::piecewise_construct, &v12);
      uint64_t v6 = v5 + 7;
      if (*((char *)v5 + 79) < 0) {
        operator delete((void *)*v6);
      }
      *(_OWORD *)uint64_t v6 = v10;
      uint64_t v6[2] = v11;
      uint64_t v7 = (void *)v2[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v2[2];
          BOOL v9 = *v8 == (void)v2;
          id v2 = v8;
        }
        while (!v9);
      }
      id v2 = v8;
    }
    while (v8 != v3);
  }
}

void sub_1C562BA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsDictPref::keys(uint64_t a1, uint64_t *a2)
{
  id v2 = *(void **)(a1 + 104);
  int v3 = (void *)(a1 + 112);
  if (v2 != (void *)(a1 + 112))
  {
    unint64_t v5 = a2[1];
    do
    {
      uint64_t v6 = (long long *)(v2 + 4);
      if (v5 >= a2[2])
      {
        unint64_t v5 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v6);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v6);
        v5 += 24;
      }
      a2[1] = v5;
      uint64_t v7 = (void *)v2[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v2[2];
          BOOL v9 = *v8 == (void)v2;
          id v2 = v8;
        }
        while (!v9);
      }
      id v2 = v8;
    }
    while (v8 != v3);
  }
}

void ImsDictPref::keysAndValues(uint64_t a1, uint64_t *a2, char **a3)
{
  int v3 = *(void **)(a1 + 104);
  unint64_t v4 = (void *)(a1 + 112);
  if (v3 != (void *)(a1 + 112))
  {
    do
    {
      uint64_t v7 = (long long *)(v3[7] + 8);
      unint64_t v8 = a2[1];
      if (v8 >= a2[2])
      {
        uint64_t v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v7);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v7);
        uint64_t v9 = v8 + 24;
      }
      a2[1] = v9;
      uint64_t v11 = a3[1];
      unint64_t v10 = (unint64_t)a3[2];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = *a3;
        uint64_t v14 = (v11 - *a3) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<ImsPref *>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          if (v17 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          long long v18 = (char *)operator new(8 * v17);
        }
        else
        {
          long long v18 = 0;
        }
        std::string v19 = &v18[8 * v14];
        *(void *)std::string v19 = v3[7];
        uint64_t v12 = v19 + 8;
        if (v11 != v13)
        {
          do
          {
            uint64_t v20 = *((void *)v11 - 1);
            v11 -= 8;
            *((void *)v19 - 1) = v20;
            v19 -= 8;
          }
          while (v11 != v13);
          uint64_t v11 = *a3;
        }
        *a3 = v19;
        a3[1] = v12;
        a3[2] = &v18[8 * v17];
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *(void *)uint64_t v11 = v3[7];
        uint64_t v12 = v11 + 8;
      }
      a3[1] = v12;
      long long v21 = (void *)v3[1];
      if (v21)
      {
        do
        {
          std::string v22 = v21;
          long long v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          std::string v22 = (void *)v3[2];
          BOOL v23 = *v22 == (void)v3;
          int v3 = v22;
        }
        while (!v23);
      }
      int v3 = v22;
    }
    while (v22 != v4);
  }
}

BOOL ImsDictPref::stringChildValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v5 = v4;
  if (v4)
  {
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v4 + 48))(&v7, v4);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = v7;
    *(void *)(a3 + 16) = v8;
  }
  return v5 != 0;
}

void *ImsPrefsKeyEnum::allowedValue(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 64);
  int v3 = (void *)(a1 + 72);
  if (v2 == (void *)(a1 + 72)) {
    return 0;
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v4 = (const char *)a2;
  }
  else {
    uint64_t v4 = *(const char **)a2;
  }
  while (1)
  {
    uint64_t v5 = v2 + 4;
    uint64_t v6 = *((char *)v2 + 55) >= 0 ? (const char *)(v2 + 4) : (const char *)v2[4];
    if (!strcasecmp(v6, v4)) {
      break;
    }
    long long v7 = (void *)v2[1];
    if (v7)
    {
      do
      {
        uint64_t v8 = v7;
        long long v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        uint64_t v8 = (void *)v2[2];
        BOOL v9 = *v8 == (void)v2;
        id v2 = v8;
      }
      while (!v9);
    }
    id v2 = v8;
    if (v8 == v3) {
      return 0;
    }
  }
  return v5;
}

void ImsPrefsSection::addPref(ImsPrefsSection *this, const ImsPref *a2)
{
  uint64_t v4 = (char *)a2 + 8;
  uint64_t v5 = (uint64_t **)((char *)this + 64);
  ims::lowerCase((uint64_t)a2 + 8, &__p);
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v5, (void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((void **)((char *)this + 72) == v6) {
    goto LABEL_10;
  }
  long long v7 = v6[7];
  if (!v7) {
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)a2;
  if (v9)
  {
    uint64_t v11 = v10;
    if (v10)
    {
      uint64_t v12 = *((void *)this + 4);
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 64))(v12);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 16))(v12, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"merging dict values for ", 24);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, char *))(*(void *)v13 + 32))(v13, v4);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      ImsDictPref::merge(v11, v9);
      return;
    }
  }
  if (v15)
  {
    unint64_t v17 = v16;
    if (v16)
    {
      uint64_t v18 = *((void *)this + 4);
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 64))(v18);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"merging array values for ", 25);
      *(unsigned char *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, char *))(*(void *)v19 + 32))(v19, v4);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v19 + 17) = 0;
      uint64_t v20 = (const ImsArrayPref *)*((void *)v15 + 13);
      long long v21 = (const ImsArrayPref *)*((void *)v15 + 14);
      ImsArrayPref::merge(v17, v20, v21);
      return;
    }
  }
  (*(void (**)(std::string *__return_ptr, const ImsPref *))(v8 + 48))(&__p, a2);
  (*(void (**)(void **__return_ptr, const void *))(*(void *)v7 + 48))(v38, v7);
  char v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v25 = v39;
  int v26 = (char)v39;
  if ((v39 & 0x80u) != 0) {
    unint64_t v25 = (unint64_t)v38[1];
  }
  if (size == v25)
  {
    if ((v39 & 0x80u) == 0) {
      std::string v22 = v38;
    }
    else {
      std::string v22 = (void **)v38[0];
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v35 = memcmp(__p.__r_.__value_.__l.__data_, v22, __p.__r_.__value_.__l.__size_) == 0;
    }
    else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
      uint64_t v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
      p_p = &__p;
      do
      {
        int v30 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v29 = v30;
        int v32 = *(unsigned __int8 *)v22;
        std::string v22 = (void **)((char *)v22 + 1);
        int v31 = v32;
        BOOL v34 = v27-- != 0;
        BOOL v35 = v29 == v31;
      }
      while (v29 == v31 && v34);
    }
    else
    {
      BOOL v35 = 1;
    }
  }
  else
  {
    BOOL v35 = 0;
  }
  if (v26 < 0)
  {
    operator delete(v38[0]);
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_41:
      if (v35) {
        goto LABEL_47;
      }
LABEL_45:
      uint64_t v36 = *((void *)this + 4);
      uint64_t v37 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v36 + 64))(v36, v22);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 16))(v36, v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"overwriting pref ", 17);
      *(unsigned char *)(v37 + 17) = 0;
      (*(void (**)(uint64_t, char *))(*(void *)v37 + 32))(v37, v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"(old = ", 7);
      *(unsigned char *)(v37 + 17) = 0;
      (*(void (**)(std::string *__return_ptr, const void *))(*(void *)v7 + 48))(&__p, v7);
      (*(void (**)(uint64_t, std::string *))(*(void *)v37 + 32))(v37, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)" from ", 6);
      *(unsigned char *)(v37 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 32))(v37, (uint64_t)v7 + 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)", new = ", 8);
      *(unsigned char *)(v37 + 17) = 0;
      (*(void (**)(const ImsPref *, uint64_t))(*(void *)a2 + 16))(a2, v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)" from ", 6);
      *(unsigned char *)(v37 + 17) = 0;
      (*(void (**)(uint64_t, char *))(*(void *)v37 + 32))(v37, (char *)a2 + 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)")", 1);
      *(unsigned char *)(v37 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v37 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_47;
    }
  }
  else if ((v23 & 0x80) == 0)
  {
    goto LABEL_41;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v35) {
    goto LABEL_45;
  }
LABEL_47:
  (*(void (**)(const void *, void **))(*(void *)v7 + 8))(v7, v22);
LABEL_10:
  uint64_t v14 = (*(uint64_t (**)(const ImsPref *))(*(void *)a2 + 32))(a2);
  *(void *)(v14 + 96) = this;
  ims::lowerCase((uint64_t)v4, &__p);
  v38[0] = &__p;
  *((void *)std::__tree<std::__value_type<std::string,ImsPref *>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsPref *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsPref *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v5, (void **)&__p.__r_.__value_.__l.__data_, (_OWORD **)v38)+ 7) = v14;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C562C584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsPrefsSection::~ImsPrefsSection(ImsPrefsSection *this)
{
  *(void *)this = &unk_1F20E6208;
  id v2 = (char *)this + 64;
  int v3 = (char *)*((void *)this + 8);
  uint64_t v4 = (char *)this + 72;
  if (v3 != (char *)this + 72)
  {
    do
    {
      uint64_t v5 = *((void *)v3 + 7);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      uint64_t v6 = (char *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          long long v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (char *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          int v3 = v7;
        }
        while (!v8);
      }
      int v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<std::string>::destroy((uint64_t)v2, *((char **)this + 9));
  BOOL v9 = (void *)*((void *)this + 5);
  if (v9)
  {
    *((void *)this + 6) = v9;
    operator delete(v9);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  ImsPrefsSection::~ImsPrefsSection(this);
  JUMPOUT(0x1C878E320);
}

void ImsPrefsSection::clear(ImsPrefsSection *this)
{
  id v2 = (char *)this + 64;
  int v3 = (char *)*((void *)this + 8);
  uint64_t v4 = (char *)this + 72;
  if (v3 != (char *)this + 72)
  {
    do
    {
      uint64_t v5 = *((void *)v3 + 7);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      uint64_t v6 = (char *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          long long v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (char *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          int v3 = v7;
        }
        while (!v8);
      }
      int v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<std::string>::destroy((uint64_t)v2, *((char **)this + 9));
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 8) = v4;
}

void *ImsPrefsSection::prefWithName(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 64;
  ims::lowerCase(a2, &__p);
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v3, (void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((void **)(a1 + 72) == v4) {
    return 0;
  }
  else {
    return v4[7];
  }
}

void sub_1C562C7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *ImsPrefsSection::logPrefs(ImsPrefsSection *this, ImsOutStream *a2)
{
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 8));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": {", 3);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v5 = (void *)*((void *)this + 5);
  for (uint64_t i = (void *)*((void *)this + 6); v5 != i; ++v5)
  {
    uint64_t v6 = *v5;
    long long v7 = (const std::string *)(*v5 + 8);
    BOOL v8 = ImsPrefsSection::prefWithName((uint64_t)this, (uint64_t)v7);
    if (v8)
    {
      BOOL v9 = v8;
      if (*((char *)v8 + 55) < 0) {
        uint64_t v10 = v8[5];
      }
      else {
        uint64_t v10 = *((unsigned __int8 *)v8 + 55);
      }
      if (v10
      {
        *((unsigned char *)&v13.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v13, "    ");
        LoggableString::LoggableString(&__p, &v13);
        (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
        LoggableString::LoggableString(&v12, v7);
        (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v12);
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v13.__r_.__value_.__l.__data_);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" (", 2);
        *((unsigned char *)a2 + 17) = 0;
        LoggableString::LoggableString(&__p, (const std::string *)(v9 + 4));
        (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)")", 1);
        *((unsigned char *)a2 + 17) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
        *((unsigned char *)a2 + 17) = 0;
      }
      else
      {
        *((unsigned char *)&v13.__r_.__value_.__s + 23) = 4;
        strcpy((char *)&v13, "    ");
        LoggableString::LoggableString(&__p, &v13);
        (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
        LoggableString::LoggableString(&v12, v7);
        (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
        *((unsigned char *)a2 + 17) = 0;
        if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v12.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v13.__r_.__value_.__l.__data_);
        }
      }
      (*(void (**)(void *, ImsOutStream *, uint64_t, uint64_t))(*v9 + 72))(v9, a2, 1, 4);
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
    }
    else
    {
      *((unsigned char *)&v13.__r_.__value_.__s + 23) = 4;
      strcpy((char *)&v13, "    ");
      LoggableString::LoggableString(&__p, &v13);
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
      LoggableString::LoggableString(&v12, v7);
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v12);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v12.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" (internal default)", 19);
      *((unsigned char *)a2 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v6 + 16))(&v13, v6);
      LoggableString::LoggableString(&__p, &v13);
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v13.__r_.__value_.__l.__data_);
      }
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"}", 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  return a2;
}

void sub_1C562CE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void ImsPrefs::ImsPrefs(ImsPrefs *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v1132, "prefs");
  id v2 = (ims *)ImsLogContainer::ImsLogContainer((uint64_t)this, &v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_1F20E6238;
  *((void *)this + 13) = &unk_1F20E62A8;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 17) = (char *)this + 144;
  *((void *)this + 21) = 0;
  *((void *)this + 20) = (char *)this + 168;
  *((void *)this + 24) = 0;
  *((void *)this + 23) = (char *)this + 192;
  *((void *)this + 22) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 25) = 0;
  *((void *)this + 26) = (char *)this + 216;
  *((void *)this + 31) = 0;
  *((void *)this + 30) = 0;
  *((void *)this + 29) = (char *)this + 240;
  *((void *)this + 33) = (char *)this + 272;
  *((void *)this + 34) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = (char *)this + 296;
  *((_WORD *)this + 156) = 256;
  *((void *)this + 40) = (char *)this + 328;
  *((void *)this + 41) = 0;
  *((void *)this + 44) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 42) = 0;
  *((void *)this + 43) = (char *)this + 352;
  *((void *)this + 46) = 0;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  uint64_t v3 = ims::logger(v2);
  uint64_t v4 = (ImsPrefs *)ImsLogger::facilityWithName(v3, (unsigned __int8 *)this + 8, 1);
  *((unsigned char *)v4 + 152) = 1;
  v1129 = 0;
  uint64_t v1130 = 0;
  uint64_t v1131 = 0;
  AcceptContactParamsKey = ImsPrefs::getAcceptContactParamsKey(v4);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AcceptContactParamsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AcceptedSmsContentTypesKey = ImsPrefs::getAcceptedSmsContentTypesKey(v6);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AcceptedSmsContentTypesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AcceptedSmsContentTypes");
  ims::lowerCase((uint64_t)__p, &v1132);
  BOOL v8 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  AccessBarringTypeKey = ImsPrefs::getAccessBarringTypeKey(v8);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AccessBarringTypeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AccessNetworkRefreshMethodKey = ImsPrefs::getAccessNetworkRefreshMethodKey(v10);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AccessNetworkRefreshMethodKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AccessNetworkRefreshDelayMillisecondsKey = ImsPrefs::getAccessNetworkRefreshDelayMillisecondsKey(v12);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AccessNetworkRefreshDelayMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AccessNetworkRefreshInHeldCallsKey = ImsPrefs::getAccessNetworkRefreshInHeldCallsKey(v14);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AccessNetworkRefreshInHeldCallsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AccessNetworkRefreshInHeldCalls");
  ims::lowerCase((uint64_t)__p, &v1132);
  uint64_t v16 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  AddAccessNetworkInfoToInsecureMessagesKey = ImsPrefs::getAddAccessNetworkInfoToInsecureMessagesKey(v16);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AddAccessNetworkInfoToInsecureMessagesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AddConferenceParticipantsToInviteKey = ImsPrefs::getAddConferenceParticipantsToInviteKey(v18);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AddConferenceParticipantsToInviteKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AddContentDispositionInPIDFKey = ImsPrefs::getAddContentDispositionInPIDFKey(v20);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AddContentDispositionInPIDFKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AddContentDispositionInPIDF");
  ims::lowerCase((uint64_t)__p, &v1132);
  std::string v22 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  AdditionalContactParamsKey = ImsPrefs::getAdditionalContactParamsKey(v22);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AdditionalContactParamsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AddQosOptionsToSocketsKey = ImsPrefs::getAddQosOptionsToSocketsKey(v24);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AddQosOptionsToSocketsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AdditionalHeadersKey = ImsPrefs::getAdditionalHeadersKey(v26);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AdditionalHeadersKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AdditionalFeatureTagsKey = ImsPrefs::getAdditionalFeatureTagsKey(v28);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AdditionalFeatureTagsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AddGeolocationSupportedHeaderKey = ImsPrefs::getAddGeolocationSupportedHeaderKey(v30);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AddGeolocationSupportedHeaderKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AddRoutableLocalAddressHeaderKey = ImsPrefs::getAddRoutableLocalAddressHeaderKey(v32);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AddRoutableLocalAddressHeaderKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AddSipInstanceForWifiKey = ImsPrefs::getAddSipInstanceForWifiKey(v34);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AddSipInstanceForWifiKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AddSipInstanceForWifi");
  ims::lowerCase((uint64_t)__p, &v1132);
  uint64_t v36 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  AllowAnonymousEmergencyCallsKey = ImsPrefs::getAllowAnonymousEmergencyCallsKey(v36);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowAnonymousEmergencyCallsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AllowEmergencyRetryForIPSecKey = ImsPrefs::getAllowEmergencyRetryForIPSecKey(v38);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowEmergencyRetryForIPSecKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AllowAnonymousEmergencyCallsWhileRoamingKey = ImsPrefs::getAllowAnonymousEmergencyCallsWhileRoamingKey(v40);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowAnonymousEmergencyCallsWhileRoamingKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AllowAnonymousEmergencyCallsWhileRoaming");
  ims::lowerCase((uint64_t)__p, &v1132);
  uint64_t v42 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  AllowDisabledModeKey = ImsPrefs::getAllowDisabledModeKey(v42);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowDisabledModeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AllowDisabledMode");
  ims::lowerCase((uint64_t)__p, &v1132);
  uint64_t v44 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  AllowEarlyRegistrationRefreshKey = ImsPrefs::getAllowEarlyRegistrationRefreshKey(v44);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowEarlyRegistrationRefreshKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AllowEarlyRegistrationRefresh");
  ims::lowerCase((uint64_t)__p, &v1132);
  std::string v46 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  AllowInvalidTimestampInPCNIKey = ImsPrefs::getAllowInvalidTimestampInPCNIKey(v46);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowInvalidTimestampInPCNIKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AllowPCNIInAirplaneModeKey = ImsPrefs::getAllowPCNIInAirplaneModeKey(v48);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowPCNIInAirplaneModeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AllowLimitedAccessModeRegistrationKey = ImsPrefs::getAllowLimitedAccessModeRegistrationKey(v50);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowLimitedAccessModeRegistrationKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AllowMultipleAddressesPerProxyKey = ImsPrefs::getAllowMultipleAddressesPerProxyKey(v52);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowMultipleAddressesPerProxyKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AllowMultipleAddressesPerProxy");
  ims::lowerCase((uint64_t)__p, &v1132);
  uint64_t v54 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  AllowRemoteHoldForUnconfirmedCallsKey = ImsPrefs::getAllowRemoteHoldForUnconfirmedCallsKey(v54);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowRemoteHoldForUnconfirmedCallsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  unsigned int v57 = ImsPrefs::getAllowIncomingCallsDuringEmergencyCallKey(v56);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v57, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AllowIncomingCallsDuringEmergencyCall");
  ims::lowerCase((uint64_t)__p, &v1132);
  char v58 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  size_t v59 = ImsPrefs::getAllowOutgoingCallsDuringEmergencyCallKey(v58);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v59, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AllowOutgoingCallsDuringEmergencyCall");
  ims::lowerCase((uint64_t)__p, &v1132);
  uint64_t v60 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  AllowPhoneContextInEmergencyUriKey = ImsPrefs::getAllowPhoneContextInEmergencyUriKey(v60);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowPhoneContextInEmergencyUriKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AllowTelUriInReferToKey = ImsPrefs::getAllowTelUriInReferToKey(v62);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowTelUriInReferToKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AllowTelUriInReferTo");
  ims::lowerCase((uint64_t)__p, &v1132);
  long long v64 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  AllowResponsesOverDifferentTransportKey = ImsPrefs::getAllowResponsesOverDifferentTransportKey(v64);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowResponsesOverDifferentTransportKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AllowRegistrationCanceledStateKey = ImsPrefs::getAllowRegistrationCanceledStateKey(v66);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowRegistrationCanceledStateKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AllowSimultaneousCallsWhileUnregisteredKey = ImsPrefs::getAllowSimultaneousCallsWhileUnregisteredKey(v68);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowSimultaneousCallsWhileUnregisteredKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AddEmergencyContactParamInInviteKey = ImsPrefs::getAddEmergencyContactParamInInviteKey(v70);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AddEmergencyContactParamInInviteKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AlwaysAddPrivacyHeaderKey = ImsPrefs::getAlwaysAddPrivacyHeaderKey(v72);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AlwaysAddPrivacyHeaderKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AlwaysAddSipInstanceKey = ImsPrefs::getAlwaysAddSipInstanceKey(v74);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AlwaysAddSipInstanceKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AcceptMsgFromNonProxyKey = ImsPrefs::getAcceptMsgFromNonProxyKey(v76);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AcceptMsgFromNonProxyKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AlwaysAddSipInstanceToSubscribeRequestKey = ImsPrefs::getAlwaysAddSipInstanceToSubscribeRequestKey(v78);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AlwaysAddSipInstanceToSubscribeRequestKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  long long v81 = ImsPrefs::getRedialOverLteIfEpsFallbackCallFailedKey(v80);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v81, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AlwaysAddTextServiceKey = ImsPrefs::getAlwaysAddTextServiceKey(v82);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AlwaysAddTextServiceKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  CompressIPv6AddressesKey = ImsPrefs::getCompressIPv6AddressesKey(v84);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)CompressIPv6AddressesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AlwaysEmergencyRegisterKey = ImsPrefs::getAlwaysEmergencyRegisterKey(v86);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AlwaysEmergencyRegisterKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AlwaysPrack18xKey = ImsPrefs::getAlwaysPrack18xKey(v88);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AlwaysPrack18xKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AlwaysResetProxyListKey = ImsPrefs::getAlwaysResetProxyListKey(v90);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AlwaysResetProxyListKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AlwaysResetProxyList");
  ims::lowerCase((uint64_t)__p, &v1132);
  long long v92 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  AlwaysSendSessionProgressKey = ImsPrefs::getAlwaysSendSessionProgressKey(v92);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AlwaysSendSessionProgressKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AlwaysSendTryingResponseKey = ImsPrefs::getAlwaysSendTryingResponseKey(v94);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AlwaysSendTryingResponseKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AlwaysSetPhoneContextKey = ImsPrefs::getAlwaysSetPhoneContextKey(v96);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AlwaysSetPhoneContextKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AlwaysAddGeolocationForEmergencyCallsKey = ImsPrefs::getAlwaysAddGeolocationForEmergencyCallsKey(v98);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AlwaysAddGeolocationForEmergencyCallsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AllowGeolocationForEmergencyCallsWhileInboundRoamingKey = ImsPrefs::getAllowGeolocationForEmergencyCallsWhileInboundRoamingKey(v100);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowGeolocationForEmergencyCallsWhileInboundRoamingKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  uint64_t v103 = ImsPrefs::getAlwaysAddGeolocationToInviteForNormalSetupEmergencyCallKey(v102);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v103, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  long long v105 = ImsPrefs::getAlwaysAddGeolocationToUpdateForNormalSetupEmergencyCallKey(v104);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v105, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AllowIncomingUssdSessionsKey = ImsPrefs::getAllowIncomingUssdSessionsKey(v106);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowIncomingUssdSessionsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AlwaysUnsubscribeFromRegEventsKey = ImsPrefs::getAlwaysUnsubscribeFromRegEventsKey(v108);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AlwaysUnsubscribeFromRegEventsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AuthResponseTimeoutMillisecondsKey = ImsPrefs::getAuthResponseTimeoutMillisecondsKey(v110);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AuthResponseTimeoutMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  long long v113 = ImsPrefs::getCallEndReasonsKey(v112);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v113, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  long long v115 = ImsPrefs::getCallSetupPingTimerMillisecondsKey(v114);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v115, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "CallSetupPingTimer");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  long long v116 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  long long v117 = std::string::__assign_external((std::string *)((char *)v116 + 56), "CallSetupPingTimerMilliseconds", 0x1EuLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  std::string v118 = ImsPrefs::getClearRegistrationCallIdOnDeinitializationKey((ImsPrefs *)v117);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v118, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ContactUserKey = ImsPrefs::getContactUserKey(v119);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ContactUserKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v122 = ImsPrefs::getContinueEmergencyCallOnMediaTimeoutKey(v121);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v122, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EmergencyMediaTimeoutDeferalTimerSecondsKey = ImsPrefs::getEmergencyMediaTimeoutDeferalTimerSecondsKey(v123);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyMediaTimeoutDeferalTimerSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ConvertSessionProgressToRingingKey = ImsPrefs::getConvertSessionProgressToRingingKey(v125);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ConvertSessionProgressToRingingKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  CountryOfOriginationFormatKey = ImsPrefs::getCountryOfOriginationFormatKey(v127);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)CountryOfOriginationFormatKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "CountryOfOriginationForWifi");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v129 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v130 = std::string::__assign_external((std::string *)((char *)v129 + 56), "CountryOfOriginationFormat", 0x1AuLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  CSFBOnAccessBarredKey = ImsPrefs::getCSFBOnAccessBarredKey((ImsPrefs *)v130);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)CSFBOnAccessBarredKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v133 = ImsPrefs::getCheckContactHeaderOnRegisterResponseKey(v132);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v133, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  LocationForShortCodeCallsKey = ImsPrefs::getLocationForShortCodeCallsKey(v134);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)LocationForShortCodeCallsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DefaultAuthAlgorithmKey = ImsPrefs::getDefaultAuthAlgorithmKey(v136);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DefaultAuthAlgorithmKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DefaultLocalSipPortKey = ImsPrefs::getDefaultLocalSipPortKey(v138);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DefaultLocalSipPortKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DefaultRemoteSipPortKey = ImsPrefs::getDefaultRemoteSipPortKey(v140);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DefaultRemoteSipPortKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DeferMediaActivationOnSessionConfirmedKey = ImsPrefs::getDeferMediaActivationOnSessionConfirmedKey(v142);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DeferMediaActivationOnSessionConfirmedKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DeferIncomingMessagesUntilWakeKey = ImsPrefs::getDeferIncomingMessagesUntilWakeKey(v144);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DeferIncomingMessagesUntilWakeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "DeferIncomingMessagesUntilWake");
  ims::lowerCase((uint64_t)__p, &v1132);
  v146 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  DeferReRegOnConnectivityDisableKey = ImsPrefs::getDeferReRegOnConnectivityDisableKey(v146);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DeferReRegOnConnectivityDisableKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DeferReRegOnSubDisableKey = ImsPrefs::getDeferReRegOnSubDisableKey(v148);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DeferReRegOnSubDisableKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableSignalingReductionKey = ImsPrefs::getEnableSignalingReductionKey(v150);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableSignalingReductionKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DeregistrationWaitTimeoutMillisecondsKey = ImsPrefs::getDeregistrationWaitTimeoutMillisecondsKey(v152);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DeregistrationWaitTimeoutMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DialogEventPackageSessionDescriptionKey = ImsPrefs::getDialogEventPackageSessionDescriptionKey(v154);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DialogEventPackageSessionDescriptionKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "DialogEventPackageSessionDescription");
  ims::lowerCase((uint64_t)__p, &v1132);
  v156 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  DisableAccessNetworkInfoForAckAndCancelKey = ImsPrefs::getDisableAccessNetworkInfoForAckAndCancelKey(v156);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DisableAccessNetworkInfoForAckAndCancelKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DisableRegistrationOnNotifyEventsKey = ImsPrefs::getDisableRegistrationOnNotifyEventsKey(v158);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DisableRegistrationOnNotifyEventsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v161 = ImsPrefs::getDontChangeProxiesDuringActiveCallsKey(v160);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v161, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "DontChangeProxiesDuringActiveCalls");
  ims::lowerCase((uint64_t)__p, &v1132);
  v162 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  DontThrottleOnRegistrationErrorCodesKey = ImsPrefs::getDontThrottleOnRegistrationErrorCodesKey(v162);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DontThrottleOnRegistrationErrorCodesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v165 = ImsPrefs::getDontSendPreconditionsIfCallWaitingDisabledKey(v164);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v165, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DropRegistrationOnCSFBKey = ImsPrefs::getDropRegistrationOnCSFBKey(v166);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DropRegistrationOnCSFBKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DropRegistrationOnSRVCCKey = ImsPrefs::getDropRegistrationOnSRVCCKey(v168);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DropRegistrationOnSRVCCKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DropRegistrationOnAirplaneModeToggleKey = ImsPrefs::getDropRegistrationOnAirplaneModeToggleKey(v170);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DropRegistrationOnAirplaneModeToggleKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DropRegistrationOnErrorCodesKey = ImsPrefs::getDropRegistrationOnErrorCodesKey(v172);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DropRegistrationOnErrorCodesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DropRegistrationOnWaitTimeoutKey = ImsPrefs::getDropRegistrationOnWaitTimeoutKey(v174);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DropRegistrationOnWaitTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DropRegistrationOn305ToAllProxiesKey = ImsPrefs::getDropRegistrationOn305ToAllProxiesKey(v176);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DropRegistrationOn305ToAllProxiesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EarlyMediaNeedsHeaderKey = ImsPrefs::getEarlyMediaNeedsHeaderKey(v178);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EarlyMediaNeedsHeaderKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EchoRemotePreconditionStrengthKey = ImsPrefs::getEchoRemotePreconditionStrengthKey(v180);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EchoRemotePreconditionStrengthKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "EchoRemotePreconditionStrength");
  ims::lowerCase((uint64_t)__p, &v1132);
  v182 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  EmergencyAnonymousAutomaticRedialKey = ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(v182);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyAnonymousAutomaticRedialKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v185 = ImsPrefs::getEmergencyCallBackModeExpirationSecondsKey(v184);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v185, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v187 = ImsPrefs::getEmergencyCallSetupTimeoutSecondsKey(v186);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v187, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EmergencySessionSetupTimeoutSecondsKey = ImsPrefs::getEmergencySessionSetupTimeoutSecondsKey(v188);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencySessionSetupTimeoutSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EmergencyErrorResponsesToTriggerCSFBKey = ImsPrefs::getEmergencyErrorResponsesToTriggerCSFBKey(v190);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyErrorResponsesToTriggerCSFBKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EmergencyImpuRankKey = ImsPrefs::getEmergencyImpuRankKey(v192);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyImpuRankKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EmergencyLocationLookupRequiredKey = ImsPrefs::getEmergencyLocationLookupRequiredKey(v194);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyLocationLookupRequiredKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EmergencyLocationLookupTimeoutSecondsKey = ImsPrefs::getEmergencyLocationLookupTimeoutSecondsKey(v196);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyLocationLookupTimeoutSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "EmergencyLocationLookupTimeout");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v198 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v199 = std::string::__assign_external((std::string *)((char *)v198 + 56), "EmergencyLocationLookupTimeoutSeconds", 0x25uLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  EmergencyLocationUpdateTimeSecondsKey = ImsPrefs::getEmergencyLocationUpdateTimeSecondsKey((ImsPrefs *)v199);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyLocationUpdateTimeSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EmergencyLocationUpdateTimeMinSecondsKey = ImsPrefs::getEmergencyLocationUpdateTimeMinSecondsKey(v201);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyLocationUpdateTimeMinSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EmergencyLocationUpdateTimeSMSFixedKey = ImsPrefs::getEmergencyLocationUpdateTimeSMSFixedKey(v203);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyLocationUpdateTimeSMSFixedKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SupportsCurrentLocationDiscoveryKey = ImsPrefs::getSupportsCurrentLocationDiscoveryKey(v205);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SupportsCurrentLocationDiscoveryKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EmergencyPreferredIdentityKey = ImsPrefs::getEmergencyPreferredIdentityKey(v207);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyPreferredIdentityKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EmergencyRegistrationRequestUriKey = ImsPrefs::getEmergencyRegistrationRequestUriKey(v209);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyRegistrationRequestUriKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "EmergencyRegistrationRequestUri");
  ims::lowerCase((uint64_t)__p, &v1132);
  v211 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  EmergencyRegistrationTimeoutSecondsKey = ImsPrefs::getEmergencyRegistrationTimeoutSecondsKey(v211);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyRegistrationTimeoutSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EmergencyRegistrationRetryResponsesKey = ImsPrefs::getEmergencyRegistrationRetryResponsesKey(v213);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyRegistrationRetryResponsesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EmergencyRingbackTimerSecondsKey = ImsPrefs::getEmergencyRingbackTimerSecondsKey(v215);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyRingbackTimerSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EmergencySMSModeExpirationSecondsKey = ImsPrefs::getEmergencySMSModeExpirationSecondsKey(v217);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencySMSModeExpirationSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AddLocationToEmergencySMSKey = ImsPrefs::getAddLocationToEmergencySMSKey(v219);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AddLocationToEmergencySMSKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EmergencyURNsKey = ImsPrefs::getEmergencyURNsKey(v221);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyURNsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableATCommandModeKey = ImsPrefs::getEnableATCommandModeKey(v223);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableATCommandModeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "EnableATCommandMode");
  ims::lowerCase((uint64_t)__p, &v1132);
  v225 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  EnableCellularNetworkInfoKey = ImsPrefs::getEnableCellularNetworkInfoKey(v225);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableCellularNetworkInfoKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableEmergencyRegistrationKey = ImsPrefs::getEnableEmergencyRegistrationKey(v227);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableEmergencyRegistrationKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableForkingKey = ImsPrefs::getEnableForkingKey(v229);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableForkingKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "EnableForking");
  ims::lowerCase((uint64_t)__p, &v1132);
  v231 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  EnableLastAccessNetworkInfoKey = ImsPrefs::getEnableLastAccessNetworkInfoKey(v231);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableLastAccessNetworkInfoKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableReasonHeaderInByeKey = ImsPrefs::getEnableReasonHeaderInByeKey(v233);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableReasonHeaderInByeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "EnableReasonHeaderInBye");
  ims::lowerCase((uint64_t)__p, &v1132);
  v235 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  EnableRportKey = ImsPrefs::getEnableRportKey(v235);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableRportKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "EnableRport");
  ims::lowerCase((uint64_t)__p, &v1132);
  v237 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  EnableSenderNameKey = ImsPrefs::getEnableSenderNameKey(v237);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableSenderNameKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableSessionIdKey = ImsPrefs::getEnableSessionIdKey(v239);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableSessionIdKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "EnableSessionId");
  ims::lowerCase((uint64_t)__p, &v1132);
  v241 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  EnableRegistrationSessionIdKey = ImsPrefs::getEnableRegistrationSessionIdKey(v241);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableRegistrationSessionIdKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v244 = ImsPrefs::getEndCallOnAudioBearerRevokedKey(v243);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v244, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnforceMaximumEmergencyExpirationSecondsKey = ImsPrefs::getEnforceMaximumEmergencyExpirationSecondsKey(v245);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnforceMaximumEmergencyExpirationSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EPSFallbackTimerSecondsKey = ImsPrefs::getEPSFallbackTimerSecondsKey(v247);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EPSFallbackTimerSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  FastEmergencyLocationEnabledKey = ImsPrefs::getFastEmergencyLocationEnabledKey(v249);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)FastEmergencyLocationEnabledKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  FastEmergencyLocationTimeoutSecondsKey = ImsPrefs::getFastEmergencyLocationTimeoutSecondsKey(v251);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)FastEmergencyLocationTimeoutSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  FatalSmsErrorsKey = ImsPrefs::getFatalSmsErrorsKey(v253);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)FatalSmsErrorsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "FatalSmsErrors");
  ims::lowerCase((uint64_t)__p, &v1132);
  v255 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  FatalTransportErrorsKey = ImsPrefs::getFatalTransportErrorsKey(v255);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)FatalTransportErrorsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  FeatureTagsEnabledKey = ImsPrefs::getFeatureTagsEnabledKey(v257);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)FeatureTagsEnabledKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "FeatureTagsEnabled");
  ims::lowerCase((uint64_t)__p, &v1132);
  v259 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  ForbiddenRegistrationErrorCodesKey = ImsPrefs::getForbiddenRegistrationErrorCodesKey(v259);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ForbiddenRegistrationErrorCodesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ForceResetExistingTransportsKey = ImsPrefs::getForceResetExistingTransportsKey(v261);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ForceResetExistingTransportsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ForceTcpKey = ImsPrefs::getForceTcpKey(v263);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ForceTcpKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ForceTlsKey = ImsPrefs::getForceTlsKey(v265);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ForceTlsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ForcedFeatureTagsKey = ImsPrefs::getForcedFeatureTagsKey(v267);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ForcedFeatureTagsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  FuzzyContactMatchingKey = ImsPrefs::getFuzzyContactMatchingKey(v269);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)FuzzyContactMatchingKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "FuzzyContactMatching");
  ims::lowerCase((uint64_t)__p, &v1132);
  v271 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  HonorSimAccessClassBeforeBarringKey = ImsPrefs::getHonorSimAccessClassBeforeBarringKey(v271);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)HonorSimAccessClassBeforeBarringKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IPSecSegmentOffsetKey = ImsPrefs::getIPSecSegmentOffsetKey(v273);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IPSecSegmentOffsetKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IPSecBringupUseNetworkPathKey = ImsPrefs::getIPSecBringupUseNetworkPathKey(v275);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IPSecBringupUseNetworkPathKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IPSecBringupTimeoutMillisecondsKey = ImsPrefs::getIPSecBringupTimeoutMillisecondsKey(v277);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IPSecBringupTimeoutMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AlwaysUseDefaultTransportKey = ImsPrefs::getAlwaysUseDefaultTransportKey(v279);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AlwaysUseDefaultTransportKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DropTrafficOnUnknownTransportsKey = ImsPrefs::getDropTrafficOnUnknownTransportsKey(v281);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DropTrafficOnUnknownTransportsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IgnoreDuplicateSDPKey = ImsPrefs::getIgnoreDuplicateSDPKey(v283);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IgnoreDuplicateSDPKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "IgnoreDuplicateSDP");
  ims::lowerCase((uint64_t)__p, &v1132);
  v285 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  IgnoreErrorsInTerminatedForksKey = ImsPrefs::getIgnoreErrorsInTerminatedForksKey(v285);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IgnoreErrorsInTerminatedForksKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IgnoreNonCompliantSupportedHeadersKey = ImsPrefs::getIgnoreNonCompliantSupportedHeadersKey(v287);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IgnoreNonCompliantSupportedHeadersKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IgnoreSessionRefreshErrorsKey = ImsPrefs::getIgnoreSessionRefreshErrorsKey(v289);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IgnoreSessionRefreshErrorsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IgnoreFromHeaderForSenderNameKey = ImsPrefs::getIgnoreFromHeaderForSenderNameKey(v291);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IgnoreFromHeaderForSenderNameKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IgnoreOverridesForWPSCallsKey = ImsPrefs::getIgnoreOverridesForWPSCallsKey(v293);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IgnoreOverridesForWPSCallsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IgnoreWPSCallsOverNRKey = ImsPrefs::getIgnoreWPSCallsOverNRKey(v295);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IgnoreWPSCallsOverNRKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IgnoreNetworkUnreachableErrorsKey = ImsPrefs::getIgnoreNetworkUnreachableErrorsKey(v297);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IgnoreNetworkUnreachableErrorsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IgnoreLimitedServiceInEmergencyModeKey = ImsPrefs::getIgnoreLimitedServiceInEmergencyModeKey(v299);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IgnoreLimitedServiceInEmergencyModeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IgnoreReregistrationErrorCodesKey = ImsPrefs::getIgnoreReregistrationErrorCodesKey(v301);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IgnoreReregistrationErrorCodesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "InternalIgnoreReregistrationErrorCodes");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v303 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  std::string::__assign_external((std::string *)((char *)v303 + 56), "IgnoreReregistrationErrorCodes", 0x1EuLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "InternalIgnoreReregistrationErrorCodes");
  ims::lowerCase((uint64_t)__p, &v1132);
  v304 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  IgnoreWifiHotspotKey = ImsPrefs::getIgnoreWifiHotspotKey(v304);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IgnoreWifiHotspotKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IgnoreRegNotificationContactExpiresKey = ImsPrefs::getIgnoreRegNotificationContactExpiresKey(v306);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IgnoreRegNotificationContactExpiresKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ImpuRankKey = ImsPrefs::getImpuRankKey(v308);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ImpuRankKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v311 = ImsPrefs::getIncomingCallEndReasonsKey(v310);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v311, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IncomingPhoneNumberPrefixMapKey = ImsPrefs::getIncomingPhoneNumberPrefixMapKey(v312);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IncomingPhoneNumberPrefixMapKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IncompleteRegistrationThrottlingIntervalSecondsKey = ImsPrefs::getIncompleteRegistrationThrottlingIntervalSecondsKey(v314);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IncompleteRegistrationThrottlingIntervalSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  InitialRemotePreconditionStrengthKey = ImsPrefs::getInitialRemotePreconditionStrengthKey(v316);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)InitialRemotePreconditionStrengthKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  InviteErrorResponsesToTriggerCSFBKey = ImsPrefs::getInviteErrorResponsesToTriggerCSFBKey(v318);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)InviteErrorResponsesToTriggerCSFBKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IR92PreconditionSupportKey = ImsPrefs::getIR92PreconditionSupportKey(v320);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IR92PreconditionSupportKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v323 = ImsPrefs::getKillCallOnHoldResumeErrorKey(v322);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v323, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  KillForkOnUpdateErrorsKey = ImsPrefs::getKillForkOnUpdateErrorsKey(v324);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)KillForkOnUpdateErrorsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  KillRegistrationOnHandoverTimeoutKey = ImsPrefs::getKillRegistrationOnHandoverTimeoutKey(v326);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)KillRegistrationOnHandoverTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  LegacyImpuRankKey = ImsPrefs::getLegacyImpuRankKey(v328);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)LegacyImpuRankKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  LimitedConnectivityHysteresisTimeoutSecondsKey = ImsPrefs::getLimitedConnectivityHysteresisTimeoutSecondsKey(v330);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)LimitedConnectivityHysteresisTimeoutSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  LimitedConnectivityHysteresisFromRegistrationKey = ImsPrefs::getLimitedConnectivityHysteresisFromRegistrationKey(v332);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)LimitedConnectivityHysteresisFromRegistrationKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  LocalQoSTimeoutMOSecondsKey = ImsPrefs::getLocalQoSTimeoutMOSecondsKey(v334);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)LocalQoSTimeoutMOSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "LocalQoSTimeoutMO");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v336 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v337 = std::string::__assign_external((std::string *)((char *)v336 + 56), "LocalQoSTimeoutMOSeconds", 0x18uLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  LocalQoSTimeoutMTSecondsKey = ImsPrefs::getLocalQoSTimeoutMTSecondsKey((ImsPrefs *)v337);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)LocalQoSTimeoutMTSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "LocalQoSTimeoutMT");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v339 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v340 = std::string::__assign_external((std::string *)((char *)v339 + 56), "LocalQoSTimeoutMTSeconds", 0x18uLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  MaintainTransportForDurationOfSessionKey = ImsPrefs::getMaintainTransportForDurationOfSessionKey((ImsPrefs *)v340);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MaintainTransportForDurationOfSessionKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MaintainTransportForDurationOfSession");
  ims::lowerCase((uint64_t)__p, &v1132);
  v342 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  MaxAuthRetriesKey = ImsPrefs::getMaxAuthRetriesKey(v342);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MaxAuthRetriesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  MaxFatalRegistrationErrorsKey = ImsPrefs::getMaxFatalRegistrationErrorsKey(v344);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MaxFatalRegistrationErrorsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  MaxForbiddenErrorsKey = ImsPrefs::getMaxForbiddenErrorsKey(v346);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MaxForbiddenErrorsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  MaxReRegistrationAttemptsKey = ImsPrefs::getMaxReRegistrationAttemptsKey(v348);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MaxReRegistrationAttemptsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AddLocationInInviteResponsesKey = ImsPrefs::getAddLocationInInviteResponsesKey(v350);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AddLocationInInviteResponsesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AddServicesToUssdSessionsKey = ImsPrefs::getAddServicesToUssdSessionsKey(v352);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AddServicesToUssdSessionsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  MaxRegistrationAttemptsPerProxyKey = ImsPrefs::getMaxRegistrationAttemptsPerProxyKey(v354);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MaxRegistrationAttemptsPerProxyKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MaxRegistrationAttemptsPerProxy");
  ims::lowerCase((uint64_t)__p, &v1132);
  v356 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  MaxTransportErrorsKey = ImsPrefs::getMaxTransportErrorsKey(v356);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MaxTransportErrorsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  MaxUdpMessageSizeKey = ImsPrefs::getMaxUdpMessageSizeKey(v358);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MaxUdpMessageSizeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  MinSessionExpiresSecondsKey = ImsPrefs::getMinSessionExpiresSecondsKey(v360);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MinSessionExpiresSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MinSessionExpires");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v362 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v363 = std::string::__assign_external((std::string *)((char *)v362 + 56), "MinSessionExpiresSeconds", 0x18uLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  MethodInPIDFKey = ImsPrefs::getMethodInPIDFKey((ImsPrefs *)v363);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MethodInPIDFKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v366 = ImsPrefs::getNetworkBasedCallWaitingKey(v365);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v366, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v368 = ImsPrefs::getEnableVideoCallWaitingKey(v367);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v368, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "EnableVideoCallWaiting");
  ims::lowerCase((uint64_t)__p, &v1132);
  v369 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  NetworkTerminationRetryIntervalSecondsKey = ImsPrefs::getNetworkTerminationRetryIntervalSecondsKey(v369);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)NetworkTerminationRetryIntervalSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "NetworkTerminationRetryInterval");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v371 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v372 = std::string::__assign_external((std::string *)((char *)v371 + 56), "NetworkTerminationRetryIntervalSeconds", 0x26uLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  NonPrivateEmergencyPrefixesKey = ImsPrefs::getNonPrivateEmergencyPrefixesKey((ImsPrefs *)v372);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)NonPrivateEmergencyPrefixesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  NoFallbackVoiceServiceKey = ImsPrefs::getNoFallbackVoiceServiceKey(v374);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)NoFallbackVoiceServiceKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  NonFatalReInviteResponsesKey = ImsPrefs::getNonFatalReInviteResponsesKey(v376);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)NonFatalReInviteResponsesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "NumberOfSilentRedialAttempts");
  ims::lowerCase((uint64_t)__p, &v1132);
  v378 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  NumberOfSilentRedialAttemptsKey = ImsPrefs::getNumberOfSilentRedialAttemptsKey(v378);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)NumberOfSilentRedialAttemptsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  OnlyUpdatePreconditionsIfConfPresentKey = ImsPrefs::getOnlyUpdatePreconditionsIfConfPresentKey(v380);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)OnlyUpdatePreconditionsIfConfPresentKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  OutgoingDomainKey = ImsPrefs::getOutgoingDomainKey(v382);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)OutgoingDomainKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseOutgoingSipUriKey = ImsPrefs::getUseOutgoingSipUriKey(v384);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseOutgoingSipUriKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PdnBringupTimerSecondsKey = ImsPrefs::getPdnBringupTimerSecondsKey(v386);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PdnBringupTimerSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "PdnBringupTimer");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v388 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v388 + 79) < 0)
  {
    *((void *)v388 + 8) = 22;
    v389 = (char *)*((void *)v388 + 7);
  }
  else
  {
    v389 = (char *)v388 + 56;
    *((unsigned char *)v388 + 79) = 22;
  }
  strcpy(v389, "PdnBringupTimerSeconds");
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  v390 = ImsPrefs::getPerCallQoSIndicationsKey((ImsPrefs *)v388);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v390, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  Allow3DPIDFInMessagesKey = ImsPrefs::getAllow3DPIDFInMessagesKey(v391);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)Allow3DPIDFInMessagesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PIDFGeoPrivShapeKey = ImsPrefs::getPIDFGeoPrivShapeKey(v393);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PIDFGeoPrivShapeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PIDFConfidenceKey = ImsPrefs::getPIDFConfidenceKey(v395);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PIDFConfidenceKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PrackErrorDelayKey = ImsPrefs::getPrackErrorDelayKey(v397);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PrackErrorDelayKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PreconditionAllowMTUpdateKey = ImsPrefs::getPreconditionAllowMTUpdateKey(v399);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PreconditionAllowMTUpdateKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "PreconditionAllowMTUpdate");
  ims::lowerCase((uint64_t)__p, &v1132);
  v401 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  PreconditionUpdateDelayTimerMillisecondsKey = ImsPrefs::getPreconditionUpdateDelayTimerMillisecondsKey(v401);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PreconditionUpdateDelayTimerMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "PreconditionUpdateDelayTimer");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v403 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v404 = std::string::__assign_external((std::string *)((char *)v403 + 56), "PreconditionUpdateDelayTimerMilliseconds", 0x28uLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  PreconditionsKey = ImsPrefs::getPreconditionsKey((ImsPrefs *)v404);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PreconditionsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "Preconditions");
  v1133[0] = 0;
  v406 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)this + 184, v1133, __p);
  v407 = *v406;
  if (!*v406)
  {
    v1132.__r_.__value_.__r.__words[2] = 1;
    v407 = (uint64_t *)operator new(0x50uLL);
    v1132.__r_.__value_.__l.__size_ = (std::string::size_type)this + 192;
    *((_OWORD *)v407 + 2) = *(_OWORD *)__p;
    uint64_t v408 = v1128;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v1128 = 0;
    v407[9] = 0;
    v407[8] = 0;
    v407[6] = v408;
    v407[7] = (uint64_t)(v407 + 8);
    std::__tree<unsigned int>::__insert_node_at((uint64_t **)this + 23, (uint64_t)v1133[0], v406, v407);
    v1132.__r_.__value_.__r.__words[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v1132, 0);
  }
  std::string::basic_string[abi:ne180100]<0>(&v1132, "supportedButMandatory");
  v1133[0] = &v1132;
  v409 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)v407 + 7, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v409 + 79) < 0)
  {
    *((void *)v409 + 8) = 9;
    v410 = (char *)*((void *)v409 + 7);
  }
  else
  {
    v410 = (char *)v409 + 56;
    *((unsigned char *)v409 + 79) = 9;
  }
  strcpy(v410, "Supported");
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  PreferredAuthQopListKey = ImsPrefs::getPreferredAuthQopListKey((ImsPrefs *)v409);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PreferredAuthQopListKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "PreferredAuthQopList");
  ims::lowerCase((uint64_t)__p, &v1132);
  v412 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  PreferredSenderIdentityKey = ImsPrefs::getPreferredSenderIdentityKey(v412);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PreferredSenderIdentityKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PreferredSenderNameKey = ImsPrefs::getPreferredSenderNameKey(v414);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PreferredSenderNameKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PrivacyHeaderValueKey = ImsPrefs::getPrivacyHeaderValueKey(v416);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PrivacyHeaderValueKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PrivateEmergencyPrefixesKey = ImsPrefs::getPrivateEmergencyPrefixesKey(v418);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PrivateEmergencyPrefixesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  QueueUnreliableProvisionalResponsesKey = ImsPrefs::getQueueUnreliableProvisionalResponsesKey(v420);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)QueueUnreliableProvisionalResponsesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ReRegisterOnErrorCodesKey = ImsPrefs::getReRegisterOnErrorCodesKey(v422);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ReRegisterOnErrorCodesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ReRegisterOnInternalRequestTimeoutKey = ImsPrefs::getReRegisterOnInternalRequestTimeoutKey(v424);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ReRegisterOnInternalRequestTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ReRegisterOnCellularHandoverKey = ImsPrefs::getReRegisterOnCellularHandoverKey(v426);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ReRegisterOnCellularHandoverKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RequireRegistrationOnEPSFallbackKey = ImsPrefs::getRequireRegistrationOnEPSFallbackKey(v428);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RequireRegistrationOnEPSFallbackKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ReRegistrationHysteresisTimerMillisecondsKey = ImsPrefs::getReRegistrationHysteresisTimerMillisecondsKey(v430);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ReRegistrationHysteresisTimerMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ReSubscribeOnReRegistrationKey = ImsPrefs::getReSubscribeOnReRegistrationKey(v432);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ReSubscribeOnReRegistrationKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RefreshRegistrationDuringECBMKey = ImsPrefs::getRefreshRegistrationDuringECBMKey(v434);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RefreshRegistrationDuringECBMKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RegSubscriptionEnabledKey = ImsPrefs::getRegSubscriptionEnabledKey(v436);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegSubscriptionEnabledKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RegSubscriptionExpirationSecondsKey = ImsPrefs::getRegSubscriptionExpirationSecondsKey(v438);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegSubscriptionExpirationSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "RegSubscriptionExpiration");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v440 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v441 = std::string::__assign_external((std::string *)((char *)v440 + 56), "RegSubscriptionExpirationSeconds", 0x20uLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  RegisterOnServiceUpdateKey = ImsPrefs::getRegisterOnServiceUpdateKey((ImsPrefs *)v441);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegisterOnServiceUpdateKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SkipReRegisterWhenNetworkTypeChangedOnNrBetweenTddAndFddKey = ImsPrefs::getSkipReRegisterWhenNetworkTypeChangedOnNrBetweenTddAndFddKey(v443);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SkipReRegisterWhenNetworkTypeChangedOnNrBetweenTddAndFddKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RegistrationExpirationSecondsKey = ImsPrefs::getRegistrationExpirationSecondsKey(v445);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegistrationExpirationSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "RegistrationExpiration");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v447 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v448 = std::string::__assign_external((std::string *)((char *)v447 + 56), "RegistrationExpirationSeconds", 0x1DuLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  RegisterSmsWhenAccessBarringZeroKey = ImsPrefs::getRegisterSmsWhenAccessBarringZeroKey((ImsPrefs *)v448);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegisterSmsWhenAccessBarringZeroKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RegisterSmsOnEmergencyPdnKey = ImsPrefs::getRegisterSmsOnEmergencyPdnKey(v450);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegisterSmsOnEmergencyPdnKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RegistrationPolicyKey = ImsPrefs::getRegistrationPolicyKey(v452);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegistrationPolicyKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RegistrationRefreshCushionPercentKey = ImsPrefs::getRegistrationRefreshCushionPercentKey(v454);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegistrationRefreshCushionPercentKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RegistrationCoalesceCushionPercentKey = ImsPrefs::getRegistrationCoalesceCushionPercentKey(v456);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegistrationCoalesceCushionPercentKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RegistrationRetryBaseTimeSecondsKey = ImsPrefs::getRegistrationRetryBaseTimeSecondsKey(v458);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegistrationRetryBaseTimeSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "RegistrationRetryBaseTime");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v460 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v461 = std::string::__assign_external((std::string *)((char *)v460 + 56), "RegistrationRetryBaseTimeSeconds", 0x20uLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  RegistrationRetryMaxTimeSecondsKey = ImsPrefs::getRegistrationRetryMaxTimeSecondsKey((ImsPrefs *)v461);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegistrationRetryMaxTimeSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "RegistrationRetryMaxTime");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v463 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v464 = std::string::__assign_external((std::string *)((char *)v463 + 56), "RegistrationRetryMaxTimeSeconds", 0x1FuLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  RegistrationRetryIntervalsKey = ImsPrefs::getRegistrationRetryIntervalsKey((ImsPrefs *)v464);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegistrationRetryIntervalsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  CountryCodesWhereNeedImsiInContactHeaderOfAnonymousEmergencyInviteKey = ImsPrefs::getCountryCodesWhereNeedImsiInContactHeaderOfAnonymousEmergencyInviteKey(v466);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)CountryCodesWhereNeedImsiInContactHeaderOfAnonymousEmergencyInviteKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RegistrationThrottlingCushionPercentKey = ImsPrefs::getRegistrationThrottlingCushionPercentKey(v468);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegistrationThrottlingCushionPercentKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v471 = ImsPrefs::getRemoveForkOnTransactionDoesNotExistKey(v470);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v471, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ReportSipErrorsDuringReRegistrationKey = ImsPrefs::getReportSipErrorsDuringReRegistrationKey(v472);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ReportSipErrorsDuringReRegistrationKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RequireExplicitPortsForEmergencyRoutesKey = ImsPrefs::getRequireExplicitPortsForEmergencyRoutesKey(v474);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RequireExplicitPortsForEmergencyRoutesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RequireQoSBeforeRingingKey = ImsPrefs::getRequireQoSBeforeRingingKey(v476);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RequireQoSBeforeRingingKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RequirePreconditionsWhenSdpPresentKey = ImsPrefs::getRequirePreconditionsWhenSdpPresentKey(v478);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RequirePreconditionsWhenSdpPresentKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RequirePreconditionsWhenMandatoryKey = ImsPrefs::getRequirePreconditionsWhenMandatoryKey(v480);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RequirePreconditionsWhenMandatoryKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  VerstatFeatureCapabilityKey = ImsPrefs::getVerstatFeatureCapabilityKey(v482);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)VerstatFeatureCapabilityKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableBrandedCallingKey = ImsPrefs::getEnableBrandedCallingKey(v484);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableBrandedCallingKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SpamHeaderFeatureCapabilityKey = ImsPrefs::getSpamHeaderFeatureCapabilityKey(v486);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SpamHeaderFeatureCapabilityKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v489 = ImsPrefs::getResetCallIdOnAuthChallengeKey(v488);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v489, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v491 = ImsPrefs::getResetCallIdOnInitialRegistrationKey(v490);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v491, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ResetConnectionsWhenClosedByPeerKey = ImsPrefs::getResetConnectionsWhenClosedByPeerKey(v492);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ResetConnectionsWhenClosedByPeerKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ResetConnectionsWhenClosedByPeer");
  ims::lowerCase((uint64_t)__p, &v1132);
  v494 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  v495 = ImsPrefs::getResetSocketWhenNetworkChangeKey(v494);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v495, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ResetDisabledModeOnEventsKey = ImsPrefs::getResetDisabledModeOnEventsKey(v496);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ResetDisabledModeOnEventsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ResetThrottlingOnEventsKey = ImsPrefs::getResetThrottlingOnEventsKey(v498);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ResetThrottlingOnEventsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ResetThrottlingOnEvents");
  ims::lowerCase((uint64_t)__p, &v1132);
  v500 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  RetryAfterStatusCodesKey = ImsPrefs::getRetryAfterStatusCodesKey(v500);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RetryAfterStatusCodesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IgnoreRetryAfterStatusCodesKey = ImsPrefs::getIgnoreRetryAfterStatusCodesKey(v502);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IgnoreRetryAfterStatusCodesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RestartRingbackTimerOn180Key = ImsPrefs::getRestartRingbackTimerOn180Key(v504);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RestartRingbackTimerOn180Key, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RingbackTimerSecondsKey = ImsPrefs::getRingbackTimerSecondsKey(v506);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RingbackTimerSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "RingbackTimer");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v508 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v508 + 79) < 0)
  {
    *((void *)v508 + 8) = 20;
    v509 = (char *)*((void *)v508 + 7);
  }
  else
  {
    v509 = (char *)v508 + 56;
    *((unsigned char *)v508 + 79) = 20;
  }
  strcpy(v509, "RingbackTimerSeconds");
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  RingingTimerSecondsKey = ImsPrefs::getRingingTimerSecondsKey((ImsPrefs *)v508);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RingingTimerSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "RingingTimer");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v511 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v511 + 79) < 0)
  {
    *((void *)v511 + 8) = 19;
    v512 = (char *)*((void *)v511 + 7);
  }
  else
  {
    v512 = (char *)v511 + 56;
    *((unsigned char *)v511 + 79) = 19;
  }
  strcpy(v512, "RingingTimerSeconds");
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SecurityAgreementOptionsKey = ImsPrefs::getSecurityAgreementOptionsKey((ImsPrefs *)v511);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SecurityAgreementOptionsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SecurityAgreementAlgsKey = ImsPrefs::getSecurityAgreementAlgsKey(v514);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SecurityAgreementAlgsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SecurityAgreementEalgsKey = ImsPrefs::getSecurityAgreementEalgsKey(v516);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SecurityAgreementEalgsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SendAcceptContactInInviteKey = ImsPrefs::getSendAcceptContactInInviteKey(v518);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SendAcceptContactInInviteKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SendAcceptContactInInvite");
  ims::lowerCase((uint64_t)__p, &v1132);
  v520 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SendAcceptContactInSmsKey = ImsPrefs::getSendAcceptContactInSmsKey(v520);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SendAcceptContactInSmsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SendAcceptContactInSms");
  ims::lowerCase((uint64_t)__p, &v1132);
  v522 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SendEmergencyLocationUpdatesKey = ImsPrefs::getSendEmergencyLocationUpdatesKey(v522);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SendEmergencyLocationUpdatesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SendInitialInviteAsInactiveKey = ImsPrefs::getSendInitialInviteAsInactiveKey(v524);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SendInitialInviteAsInactiveKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SendResumeInviteAsSendRecvKey = ImsPrefs::getSendResumeInviteAsSendRecvKey(v526);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SendResumeInviteAsSendRecvKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SendLocalTimeZoneInformationKey = ImsPrefs::getSendLocalTimeZoneInformationKey(v528);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SendLocalTimeZoneInformationKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SendOfferWithInviteKey = ImsPrefs::getSendOfferWithInviteKey(v530);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SendOfferWithInviteKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SendOfferWithInvite");
  ims::lowerCase((uint64_t)__p, &v1132);
  v532 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SendPreconditionsInConfirmedSessionsKey = ImsPrefs::getSendPreconditionsInConfirmedSessionsKey(v532);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SendPreconditionsInConfirmedSessionsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SendPreferredIdentityKey = ImsPrefs::getSendPreferredIdentityKey(v534);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SendPreferredIdentityKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SendPreferredIdentity");
  ims::lowerCase((uint64_t)__p, &v1132);
  v536 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SendPreferredServiceInInviteKey = ImsPrefs::getSendPreferredServiceInInviteKey(v536);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SendPreferredServiceInInviteKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SendReInviteInInactiveSessionsKey = ImsPrefs::getSendReInviteInInactiveSessionsKey(v538);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SendReInviteInInactiveSessionsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ServiceClassKey = ImsPrefs::getServiceClassKey(v540);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ServiceClassKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SessionExpiresSecondsKey = ImsPrefs::getSessionExpiresSecondsKey(v542);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SessionExpiresSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SessionExpires");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v544 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v544 + 79) < 0)
  {
    *((void *)v544 + 8) = 21;
    v545 = (char *)*((void *)v544 + 7);
  }
  else
  {
    v545 = (char *)v544 + 56;
    *((unsigned char *)v544 + 79) = 21;
  }
  strcpy(v545, "SessionExpiresSeconds");
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  v546 = ImsPrefs::getSpamCallRiskLevelsKey((ImsPrefs *)v544);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v546, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v548 = ImsPrefs::getSpamCallCategoryMappingKey(v547);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v548, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AllowEmergencyRegistrationInLimitedAccessOnWiFiKey = ImsPrefs::getAllowEmergencyRegistrationInLimitedAccessOnWiFiKey(v549);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowEmergencyRegistrationInLimitedAccessOnWiFiKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SetSessionTimerRefresherInInitialRequestKey = ImsPrefs::getSetSessionTimerRefresherInInitialRequestKey(v551);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SetSessionTimerRefresherInInitialRequestKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SetCountryWithCampedPANIKey = ImsPrefs::getSetCountryWithCampedPANIKey(v553);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SetCountryWithCampedPANIKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SRVCCCleanupTimeoutSecondsKey = ImsPrefs::getSRVCCCleanupTimeoutSecondsKey(v555);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SRVCCCleanupTimeoutSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  StartLocalQosTimerOnSessionProgressKey = ImsPrefs::getStartLocalQosTimerOnSessionProgressKey(v557);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)StartLocalQosTimerOnSessionProgressKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v560 = ImsPrefs::getStrictCallFlowTimeoutKey(v559);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v560, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  StrictTS24930PreconditionHeadersKey = ImsPrefs::getStrictTS24930PreconditionHeadersKey(v561);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)StrictTS24930PreconditionHeadersKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SubscriptionRetryMaxSecondsKey = ImsPrefs::getSubscriptionRetryMaxSecondsKey(v563);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SubscriptionRetryMaxSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SubscriptionRetryMinSecondsKey = ImsPrefs::getSubscriptionRetryMinSecondsKey(v565);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SubscriptionRetryMinSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SubscriptionTerminatedMeansRegistrationTerminatedKey = ImsPrefs::getSubscriptionTerminatedMeansRegistrationTerminatedKey(v567);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SubscriptionTerminatedMeansRegistrationTerminatedKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SupportPEarlyMediaHeaderKey = ImsPrefs::getSupportPEarlyMediaHeaderKey(v569);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SupportPEarlyMediaHeaderKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SystemWakeWaitTimeoutMillisecondsKey = ImsPrefs::getSystemWakeWaitTimeoutMillisecondsKey(v571);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SystemWakeWaitTimeoutMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  TLSKeepAliveIntervalSecondsKey = ImsPrefs::getTLSKeepAliveIntervalSecondsKey(v573);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TLSKeepAliveIntervalSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  TLSIdlePingIntervalSecondsKey = ImsPrefs::getTLSIdlePingIntervalSecondsKey(v575);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TLSIdlePingIntervalSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PCSCFDomainNameKey = ImsPrefs::getPCSCFDomainNameKey(v577);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PCSCFDomainNameKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  TCPIdlePingIntervalSecondsKey = ImsPrefs::getTCPIdlePingIntervalSecondsKey(v579);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TCPIdlePingIntervalSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  CRLFMinimumPingIntervalSecondsKey = ImsPrefs::getCRLFMinimumPingIntervalSecondsKey(v581);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)CRLFMinimumPingIntervalSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  CRLFIdlePingThresholdCapSecondsKey = ImsPrefs::getCRLFIdlePingThresholdCapSecondsKey(v583);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)CRLFIdlePingThresholdCapSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseCrlfIntervalFromRegistrationKeepKey = ImsPrefs::getUseCrlfIntervalFromRegistrationKeepKey(v585);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseCrlfIntervalFromRegistrationKeepKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  TcpIdleTimeoutSecondsKey = ImsPrefs::getTcpIdleTimeoutSecondsKey(v587);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TcpIdleTimeoutSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TcpIdleTimeout");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v589 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v589 + 79) < 0)
  {
    *((void *)v589 + 8) = 21;
    v590 = (char *)*((void *)v589 + 7);
  }
  else
  {
    v590 = (char *)v589 + 56;
    *((unsigned char *)v589 + 79) = 21;
  }
  strcpy(v590, "TcpIdleTimeoutSeconds");
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  TransferWaitForHoldTimeoutKey = ImsPrefs::getTransferWaitForHoldTimeoutKey((ImsPrefs *)v589);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TransferWaitForHoldTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  TransferWaitForJoinTimeoutKey = ImsPrefs::getTransferWaitForJoinTimeoutKey(v592);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TransferWaitForJoinTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  TransferHangupTimeoutKey = ImsPrefs::getTransferHangupTimeoutKey(v594);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TransferHangupTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  TransferorShouldSendByeRequestKey = ImsPrefs::getTransferorShouldSendByeRequestKey(v596);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TransferorShouldSendByeRequestKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ExplicitTransferEnabledKey = ImsPrefs::getExplicitTransferEnabledKey(v598);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ExplicitTransferEnabledKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  HoldTransferTargetSessionKey = ImsPrefs::getHoldTransferTargetSessionKey(v600);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)HoldTransferTargetSessionKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  TransportInitTimeoutSecondsKey = ImsPrefs::getTransportInitTimeoutSecondsKey(v602);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TransportInitTimeoutSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  TriggerCSFBOnLocalQoSTimeoutMOKey = ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMOKey(v604);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TriggerCSFBOnLocalQoSTimeoutMOKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  TriggerCSFBOnLocalQoSTimeoutMTKey = ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMTKey(v606);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TriggerCSFBOnLocalQoSTimeoutMTKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  TriggerCSFBOnSDPErrorKey = ImsPrefs::getTriggerCSFBOnSDPErrorKey(v608);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TriggerCSFBOnSDPErrorKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  TriggerCSFBOnWaitForRingingTimeoutKey = ImsPrefs::getTriggerCSFBOnWaitForRingingTimeoutKey(v610);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TriggerCSFBOnWaitForRingingTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  TimeoutRegistrationAllProxyErrorCodesKey = ImsPrefs::getTimeoutRegistrationAllProxyErrorCodesKey(v612);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TimeoutRegistrationAllProxyErrorCodesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseAoRForSmsSenderIdentityKey = ImsPrefs::getUseAoRForSmsSenderIdentityKey(v614);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseAoRForSmsSenderIdentityKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseCIDUrlInPIDFKey = ImsPrefs::getUseCIDUrlInPIDFKey(v616);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseCIDUrlInPIDFKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseTupleInPIDFKey = ImsPrefs::getUseTupleInPIDFKey(v618);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseTupleInPIDFKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseCampedAccessNetworkInPANIKey = ImsPrefs::getUseCampedAccessNetworkInPANIKey(v620);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseCampedAccessNetworkInPANIKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseCompactHeadersKey = ImsPrefs::getUseCompactHeadersKey(v622);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseCompactHeadersKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "UseCompactHeaders");
  ims::lowerCase((uint64_t)__p, &v1132);
  v624 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  UseCorrectAckConstructionKey = ImsPrefs::getUseCorrectAckConstructionKey(v624);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseCorrectAckConstructionKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "UseCorrectAckConstruction");
  ims::lowerCase((uint64_t)__p, &v1132);
  v626 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  UseStrictBearerPreconditionsKey = ImsPrefs::getUseStrictBearerPreconditionsKey(v626);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseStrictBearerPreconditionsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RequireBearerPortMatchForPreconditionsKey = ImsPrefs::getRequireBearerPortMatchForPreconditionsKey(v628);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RequireBearerPortMatchForPreconditionsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseBase64ForMultipartSMSKey = ImsPrefs::getUseBase64ForMultipartSMSKey(v630);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseBase64ForMultipartSMSKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseCustomSSOAuthKey = ImsPrefs::getUseCustomSSOAuthKey(v632);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseCustomSSOAuthKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseDialogEventPackageKey = ImsPrefs::getUseDialogEventPackageKey(v634);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseDialogEventPackageKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v637 = ImsPrefs::getUseDummyImeiCheckDigitKey(v636);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v637, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseEphemeralSipSourcePortForTcpKey = ImsPrefs::getUseEphemeralSipSourcePortForTcpKey(v638);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseEphemeralSipSourcePortForTcpKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseFakeSAsForDeregistrationKey = ImsPrefs::getUseFakeSAsForDeregistrationKey(v640);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseFakeSAsForDeregistrationKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseIPSecKey = ImsPrefs::getUseIPSecKey(v642);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseIPSecKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseEphemeralRangeForIPSecKey = ImsPrefs::getUseEphemeralRangeForIPSecKey(v644);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseEphemeralRangeForIPSecKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  MaxIPSecTransportRetriesKey = ImsPrefs::getMaxIPSecTransportRetriesKey(v646);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MaxIPSecTransportRetriesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DefaultIPSecPortKey = ImsPrefs::getDefaultIPSecPortKey(v648);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DefaultIPSecPortKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseNextProxyForPcscfRestorationKey = ImsPrefs::getUseNextProxyForPcscfRestorationKey(v650);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseNextProxyForPcscfRestorationKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseNormalIdentityForEmergencyCallsKey = ImsPrefs::getUseNormalIdentityForEmergencyCallsKey(v652);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseNormalIdentityForEmergencyCallsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseNormalIdentityForEmergencyUSIMKey = ImsPrefs::getUseNormalIdentityForEmergencyUSIMKey(v654);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseNormalIdentityForEmergencyUSIMKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UsePublicDomainForPhoneContextKey = ImsPrefs::getUsePublicDomainForPhoneContextKey(v656);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UsePublicDomainForPhoneContextKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UserAgentHeaderValueKey = ImsPrefs::getUserAgentHeaderValueKey(v658);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UserAgentHeaderValueKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UssdResponseTimeoutMillisecondsKey = ImsPrefs::getUssdResponseTimeoutMillisecondsKey(v660);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UssdResponseTimeoutMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "UssdResponseTimeout");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v662 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v663 = std::string::__assign_external((std::string *)((char *)v662 + 56), "UssdResponseTimeoutMilliseconds", 0x1FuLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  ValidateSipMessageRecipientKey = ImsPrefs::getValidateSipMessageRecipientKey((ImsPrefs *)v663);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ValidateSipMessageRecipientKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  VirtualInterfaceMtuKey = ImsPrefs::getVirtualInterfaceMtuKey(v665);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)VirtualInterfaceMtuKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v668 = ImsPrefs::getWaitForAckBeforeEndingCallTimeoutKey(v667);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v668, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  WaitForByeResponseTimeoutKey = ImsPrefs::getWaitForByeResponseTimeoutKey(v669);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)WaitForByeResponseTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "WaitForByeResponseTimeout");
  ims::lowerCase((uint64_t)__p, &v1132);
  v671 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  WaitForCancelResponseTimeoutKey = ImsPrefs::getWaitForCancelResponseTimeoutKey(v671);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)WaitForCancelResponseTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  WaitForRingingTimerMOSecondsKey = ImsPrefs::getWaitForRingingTimerMOSecondsKey(v673);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)WaitForRingingTimerMOSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "WaitForRingingTimerMO");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v675 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v676 = std::string::__assign_external((std::string *)((char *)v675 + 56), "WaitForRingingTimerMOSeconds", 0x1CuLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  WaitForRingingTimerMTSecondsKey = ImsPrefs::getWaitForRingingTimerMTSecondsKey((ImsPrefs *)v676);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)WaitForRingingTimerMTSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "WaitForRingingTimerMT");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v678 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v679 = std::string::__assign_external((std::string *)((char *)v678 + 56), "WaitForRingingTimerMTSeconds", 0x1CuLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  WaitForRingingTimerWPSSecondsKey = ImsPrefs::getWaitForRingingTimerWPSSecondsKey((ImsPrefs *)v679);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)WaitForRingingTimerWPSSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  WPSCSFBDelayTimeoutKey = ImsPrefs::getWPSCSFBDelayTimeoutKey(v681);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)WPSCSFBDelayTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ResponseCodesBlockedForSilentRedialNRSANonEmKey = ImsPrefs::getResponseCodesBlockedForSilentRedialNRSANonEmKey(v683);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ResponseCodesBlockedForSilentRedialNRSANonEmKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SipTimerAKey = ImsPrefs::getSipTimerAKey(v685);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SipTimerAKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SipTimerA");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v687 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v687 + 79) < 0)
  {
    *((void *)v687 + 8) = 1;
    v688 = (_WORD *)*((void *)v687 + 7);
  }
  else
  {
    v688 = (_WORD *)v687 + 28;
    *((unsigned char *)v687 + 79) = 1;
  }
  _WORD *v688 = 65;
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SipTimerBKey = ImsPrefs::getSipTimerBKey((ImsPrefs *)v687);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SipTimerBKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SipTimerB");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v690 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v690 + 79) < 0)
  {
    *((void *)v690 + 8) = 1;
    v691 = (_WORD *)*((void *)v690 + 7);
  }
  else
  {
    v691 = (_WORD *)v690 + 28;
    *((unsigned char *)v690 + 79) = 1;
  }
  _WORD *v691 = 66;
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SipTimerCKey = ImsPrefs::getSipTimerCKey((ImsPrefs *)v690);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SipTimerCKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SipTimerC");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v693 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v693 + 79) < 0)
  {
    *((void *)v693 + 8) = 1;
    v694 = (_WORD *)*((void *)v693 + 7);
  }
  else
  {
    v694 = (_WORD *)v693 + 28;
    *((unsigned char *)v693 + 79) = 1;
  }
  _WORD *v694 = 67;
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SipTimerDKey = ImsPrefs::getSipTimerDKey((ImsPrefs *)v693);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SipTimerDKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SipTimerD");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v696 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v696 + 79) < 0)
  {
    *((void *)v696 + 8) = 1;
    v697 = (_WORD *)*((void *)v696 + 7);
  }
  else
  {
    v697 = (_WORD *)v696 + 28;
    *((unsigned char *)v696 + 79) = 1;
  }
  _WORD *v697 = 68;
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SipTimerEKey = ImsPrefs::getSipTimerEKey((ImsPrefs *)v696);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SipTimerEKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SipTimerE");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v699 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v699 + 79) < 0)
  {
    *((void *)v699 + 8) = 1;
    v700 = (_WORD *)*((void *)v699 + 7);
  }
  else
  {
    v700 = (_WORD *)v699 + 28;
    *((unsigned char *)v699 + 79) = 1;
  }
  _WORD *v700 = 69;
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SipTimerFKey = ImsPrefs::getSipTimerFKey((ImsPrefs *)v699);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SipTimerFKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SipTimerF");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v702 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v702 + 79) < 0)
  {
    *((void *)v702 + 8) = 1;
    v703 = (_WORD *)*((void *)v702 + 7);
  }
  else
  {
    v703 = (_WORD *)v702 + 28;
    *((unsigned char *)v702 + 79) = 1;
  }
  _WORD *v703 = 70;
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SipTimerGKey = ImsPrefs::getSipTimerGKey((ImsPrefs *)v702);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SipTimerGKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SipTimerG");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v705 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v705 + 79) < 0)
  {
    *((void *)v705 + 8) = 1;
    v706 = (_WORD *)*((void *)v705 + 7);
  }
  else
  {
    v706 = (_WORD *)v705 + 28;
    *((unsigned char *)v705 + 79) = 1;
  }
  _WORD *v706 = 71;
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SipTimerHKey = ImsPrefs::getSipTimerHKey((ImsPrefs *)v705);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SipTimerHKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SipTimerH");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v708 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v708 + 79) < 0)
  {
    *((void *)v708 + 8) = 1;
    v709 = (_WORD *)*((void *)v708 + 7);
  }
  else
  {
    v709 = (_WORD *)v708 + 28;
    *((unsigned char *)v708 + 79) = 1;
  }
  _WORD *v709 = 72;
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SipTimerIKey = ImsPrefs::getSipTimerIKey((ImsPrefs *)v708);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SipTimerIKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SipTimerI");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v711 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v711 + 79) < 0)
  {
    *((void *)v711 + 8) = 1;
    v712 = (_WORD *)*((void *)v711 + 7);
  }
  else
  {
    v712 = (_WORD *)v711 + 28;
    *((unsigned char *)v711 + 79) = 1;
  }
  _WORD *v712 = 73;
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SipTimerJKey = ImsPrefs::getSipTimerJKey((ImsPrefs *)v711);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SipTimerJKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SipTimerJ");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v714 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v714 + 79) < 0)
  {
    *((void *)v714 + 8) = 1;
    v715 = (_WORD *)*((void *)v714 + 7);
  }
  else
  {
    v715 = (_WORD *)v714 + 28;
    *((unsigned char *)v714 + 79) = 1;
  }
  _WORD *v715 = 74;
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SipTimerT1Key = ImsPrefs::getSipTimerT1Key((ImsPrefs *)v714);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SipTimerT1Key, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SipTimerT1");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v717 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v717 + 79) < 0)
  {
    *((void *)v717 + 8) = 2;
    v718 = (char *)*((void *)v717 + 7);
  }
  else
  {
    v718 = (char *)v717 + 56;
    *((unsigned char *)v717 + 79) = 2;
  }
  strcpy(v718, "T1");
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SipTimerT2Key = ImsPrefs::getSipTimerT2Key((ImsPrefs *)v717);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SipTimerT2Key, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SipTimerT2");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v720 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v720 + 79) < 0)
  {
    *((void *)v720 + 8) = 2;
    v721 = (char *)*((void *)v720 + 7);
  }
  else
  {
    v721 = (char *)v720 + 56;
    *((unsigned char *)v720 + 79) = 2;
  }
  strcpy(v721, "T2");
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SipTimerT4Key = ImsPrefs::getSipTimerT4Key((ImsPrefs *)v720);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SipTimerT4Key, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SipTimerT4");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v723 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v723 + 79) < 0)
  {
    *((void *)v723 + 8) = 2;
    v724 = (char *)*((void *)v723 + 7);
  }
  else
  {
    v724 = (char *)v723 + 56;
    *((unsigned char *)v723 + 79) = 2;
  }
  strcpy(v724, "T4");
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  Sip200RetransmitTimerKey = ImsPrefs::getSip200RetransmitTimerKey((ImsPrefs *)v723);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)Sip200RetransmitTimerKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "200Retransmit");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v726 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v726 + 79) < 0)
  {
    *((void *)v726 + 8) = 18;
    v727 = (char *)*((void *)v726 + 7);
  }
  else
  {
    v727 = (char *)v726 + 56;
    *((unsigned char *)v726 + 79) = 18;
  }
  strcpy(v727, "200RetransmitTimer");
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  AckReceiveTimeoutKey = ImsPrefs::getAckReceiveTimeoutKey((ImsPrefs *)v726);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AckReceiveTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AckRetransmitTimerKey = ImsPrefs::getAckRetransmitTimerKey(v729);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AckRetransmitTimerKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AckRetransmit");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v731 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v731 + 79) < 0)
  {
    *((void *)v731 + 8) = 18;
    v732 = (char *)*((void *)v731 + 7);
  }
  else
  {
    v732 = (char *)v731 + 56;
    *((unsigned char *)v731 + 79) = 18;
  }
  strcpy(v732, "AckRetransmitTimer");
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  RegAwaitAuthTimeoutKey = ImsPrefs::getRegAwaitAuthTimeoutKey((ImsPrefs *)v731);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegAwaitAuthTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  InviteResponseTimeoutKey = ImsPrefs::getInviteResponseTimeoutKey(v734);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)InviteResponseTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EPSInviteResponseTimeoutKey = ImsPrefs::getEPSInviteResponseTimeoutKey(v736);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EPSInviteResponseTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EmergencyInviteResponseTimeoutKey = ImsPrefs::getEmergencyInviteResponseTimeoutKey(v738);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Signaling/SipTimers");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EmergencyInviteResponseTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AddServicesToContactInConferenceSubscribeKey = ImsPrefs::getAddServicesToContactInConferenceSubscribeKey(v740);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "ConferenceCalling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AddServicesToContactInConferenceSubscribeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "AddServicesToContactInConferenceSubscribe");
  ims::lowerCase((uint64_t)__p, &v1132);
  v742 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  AddSupportedHeaderToAllResponsesKey = ImsPrefs::getAddSupportedHeaderToAllResponsesKey(v742);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "ConferenceCalling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AddSupportedHeaderToAllResponsesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AlwaysSubscribeToConferenceEventsKey = ImsPrefs::getAlwaysSubscribeToConferenceEventsKey(v744);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "ConferenceCalling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AlwaysSubscribeToConferenceEventsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DisableMergeOnInviteErrorResponsesKey = ImsPrefs::getDisableMergeOnInviteErrorResponsesKey(v746);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "ConferenceCalling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DisableMergeOnInviteErrorResponsesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ConferenceServerKey = ImsPrefs::getConferenceServerKey(v748);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "ConferenceCalling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ConferenceServerKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  TreatAllNotificationsAsPartialKey = ImsPrefs::getTreatAllNotificationsAsPartialKey(v750);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "ConferenceCalling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TreatAllNotificationsAsPartialKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SendConferenceSubscribeInNewDialogKey = ImsPrefs::getSendConferenceSubscribeInNewDialogKey(v752);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "ConferenceCalling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SendConferenceSubscribeInNewDialogKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SendConferenceSubscribeAfterRefersKey = ImsPrefs::getSendConferenceSubscribeAfterRefersKey(v754);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "ConferenceCalling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SendConferenceSubscribeAfterRefersKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SendReferToPeerKey = ImsPrefs::getSendReferToPeerKey(v756);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "ConferenceCalling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SendReferToPeerKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SerializeRefersKey = ImsPrefs::getSerializeRefersKey(v758);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "ConferenceCalling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SerializeRefersKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "SerializeRefers");
  ims::lowerCase((uint64_t)__p, &v1132);
  v760 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SerializeParticipantsKey = ImsPrefs::getSerializeParticipantsKey(v760);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "ConferenceCalling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SerializeParticipantsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseDomainForConferenceServerKey = ImsPrefs::getUseDomainForConferenceServerKey(v762);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "ConferenceCalling");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseDomainForConferenceServerKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AddBWSpecsAtSessionLevelKey = ImsPrefs::getAddBWSpecsAtSessionLevelKey(v764);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AddBWSpecsAtSessionLevelKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AllowHoldMusicKey = ImsPrefs::getAllowHoldMusicKey(v766);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowHoldMusicKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AllowIPv6UnicastAddressKey = ImsPrefs::getAllowIPv6UnicastAddressKey(v768);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowIPv6UnicastAddressKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IgnoreLocalhostRemoteRtpAddressKey = ImsPrefs::getIgnoreLocalhostRemoteRtpAddressKey(v770);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IgnoreLocalhostRemoteRtpAddressKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AlwaysPrintSDPFormatInfoKey = ImsPrefs::getAlwaysPrintSDPFormatInfoKey(v772);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AlwaysPrintSDPFormatInfoKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  BandwidthSpecifierRRValueKey = ImsPrefs::getBandwidthSpecifierRRValueKey(v774);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)BandwidthSpecifierRRValueKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  BandwidthSpecifierRSValueKey = ImsPrefs::getBandwidthSpecifierRSValueKey(v776);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)BandwidthSpecifierRSValueKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SuppressBSUntilPreconditionsMetKey = ImsPrefs::getSuppressBSUntilPreconditionsMetKey(v778);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SuppressBSUntilPreconditionsMetKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DTMFDigitDurationMillisecondsKey = ImsPrefs::getDTMFDigitDurationMillisecondsKey(v780);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DTMFDigitDurationMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "DTMFDigitDuration");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v782 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v783 = std::string::__assign_external((std::string *)((char *)v782 + 56), "DTMFDigitDurationMilliseconds", 0x1DuLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  DTMFInterDigitIntervalMillisecondsKey = ImsPrefs::getDTMFInterDigitIntervalMillisecondsKey((ImsPrefs *)v783);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DTMFInterDigitIntervalMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "DTMFInterDigitInterval");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v785 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v786 = std::string::__assign_external((std::string *)((char *)v785 + 56), "DTMFInterDigitIntervalMilliseconds", 0x22uLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  DTMFVolumeKey = ImsPrefs::getDTMFVolumeKey((ImsPrefs *)v786);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DTMFVolumeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableBandwidthSpecifiersKey = ImsPrefs::getEnableBandwidthSpecifiersKey(v788);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableBandwidthSpecifiersKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableRemoteRTCPDeactivationKey = ImsPrefs::getEnableRemoteRTCPDeactivationKey(v790);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableRemoteRTCPDeactivationKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableDTXKey = ImsPrefs::getEnableDTXKey(v792);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableDTXKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "EnableDTX");
  ims::lowerCase((uint64_t)__p, &v1132);
  v794 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  EnableRingbackAudioForTextCallsKey = ImsPrefs::getEnableRingbackAudioForTextCallsKey(v794);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableRingbackAudioForTextCallsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableRTCPExtendedReportsKey = ImsPrefs::getEnableRTCPExtendedReportsKey(v796);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableRTCPExtendedReportsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableSDPCandidateAttributeKey = ImsPrefs::getEnableSDPCandidateAttributeKey(v798);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableSDPCandidateAttributeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  HideSessionLevelDirectionKey = ImsPrefs::getHideSessionLevelDirectionKey(v800);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)HideSessionLevelDirectionKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  HoldHeartbeatIntervalSecondsKey = ImsPrefs::getHoldHeartbeatIntervalSecondsKey(v802);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)HoldHeartbeatIntervalSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "HoldHeartbeatInterval");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v804 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v805 = std::string::__assign_external((std::string *)((char *)v804 + 56), "HoldHeartbeatIntervalSeconds", 0x1CuLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  InactivityTimerRTCPSecondsKey = ImsPrefs::getInactivityTimerRTCPSecondsKey((ImsPrefs *)v805);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)InactivityTimerRTCPSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "InactivityTimerRTCP");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v807 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v808 = std::string::__assign_external((std::string *)((char *)v807 + 56), "InactivityTimerRTCPSeconds", 0x1AuLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  InactivityTimerRTPSecondsKey = ImsPrefs::getInactivityTimerRTPSecondsKey((ImsPrefs *)v808);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)InactivityTimerRTPSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "InactivityTimerRTPRTCP");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v810 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v811 = std::string::__assign_external((std::string *)((char *)v810 + 56), "InactivityTimerRTPSeconds", 0x19uLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  IncludeEVSIOModesKey = ImsPrefs::getIncludeEVSIOModesKey((ImsPrefs *)v811);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IncludeEVSIOModesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IncludeSDPMaxRedKey = ImsPrefs::getIncludeSDPMaxRedKey(v813);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IncludeSDPMaxRedKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v816 = ImsPrefs::getIncludeSDPModeChangeCapabilityKey(v815);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v816, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v818 = ImsPrefs::getIncludeSDPModeChangeNeighborKey(v817);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v818, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v820 = ImsPrefs::getIncludeSDPModeChangePeriodKey(v819);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v820, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  LocalRTCPReportIntervalSecondsKey = ImsPrefs::getLocalRTCPReportIntervalSecondsKey(v821);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)LocalRTCPReportIntervalSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "LocalRTCPReportInterval");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v823 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v824 = std::string::__assign_external((std::string *)((char *)v823 + 56), "LocalRTCPReportIntervalSeconds", 0x1EuLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  MaxPacketizationTimeKey = ImsPrefs::getMaxPacketizationTimeKey((ImsPrefs *)v824);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MaxPacketizationTimeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "PacketizationTime");
  ims::lowerCase((uint64_t)__p, &v1132);
  v826 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  MaxRedundancyKey = ImsPrefs::getMaxRedundancyKey(v826);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MaxRedundancyKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MaxRed");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v828 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v828 + 79) < 0)
  {
    *((void *)v828 + 8) = 13;
    v829 = (char *)*((void *)v828 + 7);
  }
  else
  {
    v829 = (char *)v828 + 56;
    *((unsigned char *)v828 + 79) = 13;
  }
  strcpy(v829, "MaxRedundancy");
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  v830 = ImsPrefs::getModeChangeCapabilityKey((ImsPrefs *)v828);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v830, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v832 = ImsPrefs::getModeChangeNeighborKey(v831);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v832, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v834 = ImsPrefs::getModeChangePeriodKey(v833);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v834, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ModeSetAMRNBKey = ImsPrefs::getModeSetAMRNBKey(v835);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ModeSetAMRNBKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ModeSetAMRWBKey = ImsPrefs::getModeSetAMRWBKey(v837);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ModeSetAMRWBKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SDPTemplateKey = ImsPrefs::getSDPTemplateKey(v839);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SDPTemplateKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  BindMediaToTransportInterfaceKey = ImsPrefs::getBindMediaToTransportInterfaceKey(v841);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)BindMediaToTransportInterfaceKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "BindMediaToTransportInterface");
  ims::lowerCase((uint64_t)__p, &v1132);
  v843 = (ImsPrefs *)std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)this + 36, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1132);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  EnforceEarlyMediaDirectionKey = ImsPrefs::getEnforceEarlyMediaDirectionKey(v843);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnforceEarlyMediaDirectionKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnforceEarlyMediaInactiveDirectionKey = ImsPrefs::getEnforceEarlyMediaInactiveDirectionKey(v845);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnforceEarlyMediaInactiveDirectionKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseRemoteMediaOrderKey = ImsPrefs::getUseRemoteMediaOrderKey(v847);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseRemoteMediaOrderKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseRTPDetectionAutoStartKey = ImsPrefs::getUseRTPDetectionAutoStartKey(v849);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseRTPDetectionAutoStartKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  LinkMonitorPreferenceKey = ImsPrefs::getLinkMonitorPreferenceKey(v851);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)LinkMonitorPreferenceKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableIncomingDTMFKey = ImsPrefs::getEnableIncomingDTMFKey(v853);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableIncomingDTMFKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  OriginUsernameKey = ImsPrefs::getOriginUsernameKey(v855);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)OriginUsernameKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PacketAlignmentAMRNBKey = ImsPrefs::getPacketAlignmentAMRNBKey(v857);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PacketAlignmentAMRNBKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PacketAlignmentAMRWBKey = ImsPrefs::getPacketAlignmentAMRWBKey(v859);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PacketAlignmentAMRWBKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PacketizationTimeKey = ImsPrefs::getPacketizationTimeKey(v861);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PacketizationTimeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PayloadTypeBWEfficientAMRNBKey = ImsPrefs::getPayloadTypeBWEfficientAMRNBKey(v863);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PayloadTypeBWEfficientAMRNBKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PayloadTypeBWEfficientAMRWBKey = ImsPrefs::getPayloadTypeBWEfficientAMRWBKey(v865);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PayloadTypeBWEfficientAMRWBKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PayloadTypeDTMF16KKey = ImsPrefs::getPayloadTypeDTMF16KKey(v867);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PayloadTypeDTMF16KKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PayloadTypeDTMF8KKey = ImsPrefs::getPayloadTypeDTMF8KKey(v869);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PayloadTypeDTMF8KKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PayloadTypeOctetAlignAMRNBKey = ImsPrefs::getPayloadTypeOctetAlignAMRNBKey(v871);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PayloadTypeOctetAlignAMRNBKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PayloadTypeOctetAlignAMRWBKey = ImsPrefs::getPayloadTypeOctetAlignAMRWBKey(v873);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PayloadTypeOctetAlignAMRWBKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PayloadTypeTTYKey = ImsPrefs::getPayloadTypeTTYKey(v875);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PayloadTypeTTYKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PayloadTypeTTYRedundancyKey = ImsPrefs::getPayloadTypeTTYRedundancyKey(v877);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PayloadTypeTTYRedundancyKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PreferredAMRNBModeKey = ImsPrefs::getPreferredAMRNBModeKey(v879);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PreferredAMRNBModeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PreferredAMRWBModeKey = ImsPrefs::getPreferredAMRWBModeKey(v881);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PreferredAMRWBModeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RTCPXRBasebandSupportKey = ImsPrefs::getRTCPXRBasebandSupportKey(v883);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RTCPXRBasebandSupportKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RTTBandwidthSpecifierASValueKey = ImsPrefs::getRTTBandwidthSpecifierASValueKey(v885);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RTTBandwidthSpecifierASValueKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RTTBandwidthSpecifierRTCPPercentageKey = ImsPrefs::getRTTBandwidthSpecifierRTCPPercentageKey(v887);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RTTBandwidthSpecifierRTCPPercentageKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RTTUpgradeResponseTimeoutMillisecondsKey = ImsPrefs::getRTTUpgradeResponseTimeoutMillisecondsKey(v889);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RTTUpgradeResponseTimeoutMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  StopLocalRingbackToneOn181Key = ImsPrefs::getStopLocalRingbackToneOn181Key(v891);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)StopLocalRingbackToneOn181Key, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RTCPIntervalSecondsKey = ImsPrefs::getRTCPIntervalSecondsKey(v893);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RTCPIntervalSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "RTCPInterval");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v895 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  if (*((char *)v895 + 79) < 0)
  {
    *((void *)v895 + 8) = 19;
    v896 = (char *)*((void *)v895 + 7);
  }
  else
  {
    v896 = (char *)v895 + 56;
    *((unsigned char *)v895 + 79) = 19;
  }
  strcpy(v896, "RTCPIntervalSeconds");
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  RTTNegotiationTimerSecondsKey = ImsPrefs::getRTTNegotiationTimerSecondsKey((ImsPrefs *)v895);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RTTNegotiationTimerSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SRTPCryptoSuiteKey = ImsPrefs::getSRTPCryptoSuiteKey(v898);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SRTPCryptoSuiteKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SRTPEndToAccessEdgeProtectionKey = ImsPrefs::getSRTPEndToAccessEdgeProtectionKey(v900);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SRTPEndToAccessEdgeProtectionKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SRTPUnauthenticatedSRTPKey = ImsPrefs::getSRTPUnauthenticatedSRTPKey(v902);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SRTPUnauthenticatedSRTPKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SRTPUnencryptedSRTCPKey = ImsPrefs::getSRTPUnencryptedSRTCPKey(v904);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SRTPUnencryptedSRTCPKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SRTPUnencryptedSRTPKey = ImsPrefs::getSRTPUnencryptedSRTPKey(v906);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SRTPUnencryptedSRTPKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SampleRateTTYKey = ImsPrefs::getSampleRateTTYKey(v908);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SampleRateTTYKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AudioCodecsKey = ImsPrefs::getAudioCodecsKey(v910);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AudioCodecsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AudioCodecListKey = ImsPrefs::getAudioCodecListKey(v912);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AudioCodecListKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EVSHardBwLimitKey = ImsPrefs::getEVSHardBwLimitKey(v914);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EVSHardBwLimitKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EVSHardBrLimitKey = ImsPrefs::getEVSHardBrLimitKey(v916);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EVSHardBrLimitKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RestrictSessionEVSBandwidthKey = ImsPrefs::getRestrictSessionEVSBandwidthKey(v918);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RestrictSessionEVSBandwidthKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  OrderEVSCodecsByCodecIDKey = ImsPrefs::getOrderEVSCodecsByCodecIDKey(v920);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)OrderEVSCodecsByCodecIDKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SupportAMRNBKey = ImsPrefs::getSupportAMRNBKey(v922);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SupportAMRNBKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SupportAMRWBKey = ImsPrefs::getSupportAMRWBKey(v924);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SupportAMRWBKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SupportPCMAKey = ImsPrefs::getSupportPCMAKey(v926);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SupportPCMAKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SupportPCMUKey = ImsPrefs::getSupportPCMUKey(v928);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SupportPCMUKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseEphemeralRTPPortsKey = ImsPrefs::getUseEphemeralRTPPortsKey(v930);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseEphemeralRTPPortsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseRestrictiveDirectionWhenCreatingAnswerKey = ImsPrefs::getUseRestrictiveDirectionWhenCreatingAnswerKey(v932);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseRestrictiveDirectionWhenCreatingAnswerKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseSDPTemplateForAllInvitesKey = ImsPrefs::getUseSDPTemplateForAllInvitesKey(v934);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseSDPTemplateForAllInvitesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseSDPTemplateForUpdatesKey = ImsPrefs::getUseSDPTemplateForUpdatesKey(v936);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseSDPTemplateForUpdatesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SuppressOctetAlignAttributeForBECodecsKey = ImsPrefs::getSuppressOctetAlignAttributeForBECodecsKey(v938);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SuppressOctetAlignAttributeForBECodecsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SelectForkWithActiveEarlyMediaKey = ImsPrefs::getSelectForkWithActiveEarlyMediaKey(v940);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SelectForkWithActiveEarlyMediaKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SelectLatestForkWithActiveEarlyMediaKey = ImsPrefs::getSelectLatestForkWithActiveEarlyMediaKey(v942);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SelectLatestForkWithActiveEarlyMediaKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableAPOnlyModeKey = ImsPrefs::getEnableAPOnlyModeKey(v944);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media/VoiceOnAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableAPOnlyModeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableANBRKey = ImsPrefs::getEnableANBRKey(v946);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media/VoiceOnAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableANBRKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableRateAdaptationKey = ImsPrefs::getEnableRateAdaptationKey(v948);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Media/VoiceOnAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableRateAdaptationKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapAuidKey = ImsPrefs::getXcapAuidKey(v950);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapAuidKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapBsfHostKey = ImsPrefs::getXcapBsfHostKey(v952);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapBsfHostKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapBsfPortKey = ImsPrefs::getXcapBsfPortKey(v954);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapBsfPortKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapBsfUseSecureTransportKey = ImsPrefs::getXcapBsfUseSecureTransportKey(v956);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapBsfUseSecureTransportKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapContentTypeKey = ImsPrefs::getXcapContentTypeKey(v958);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapContentTypeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapDisableOnNetworkErrorKey = ImsPrefs::getXcapDisableOnNetworkErrorKey(v960);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapDisableOnNetworkErrorKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AllCDIVRulesKey = ImsPrefs::getXcapFetchAllCDIVRulesKey(v962);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllCDIVRulesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapForbiddenHttpErrorCodesKey = ImsPrefs::getXcapForbiddenHttpErrorCodesKey(v964);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapForbiddenHttpErrorCodesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapImeiHeaderNameInBsfRequestKey = ImsPrefs::getXcapImeiHeaderNameInBsfRequestKey(v966);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapImeiHeaderNameInBsfRequestKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapImpuRankKey = ImsPrefs::getXcapImpuRankKey(v968);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapImpuRankKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapNafHostKey = ImsPrefs::getXcapNafHostKey(v970);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapNafHostKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapNafPortKey = ImsPrefs::getXcapNafPortKey(v972);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapNafPortKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapNafUseSecureTransportKey = ImsPrefs::getXcapNafUseSecureTransportKey(v974);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapNafUseSecureTransportKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapPreferredGbaModeKey = ImsPrefs::getXcapPreferredGbaModeKey(v976);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapPreferredGbaModeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapRequestTimeoutValueKey = ImsPrefs::getXcapRequestTimeoutValueKey(v978);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapRequestTimeoutValueKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapUnsolicitedRequestDelayKey = ImsPrefs::getXcapUnsolicitedRequestDelayKey(v980);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapUnsolicitedRequestDelayKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapReuseAuthCredentialsKey = ImsPrefs::getXcapReuseAuthCredentialsKey(v982);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapReuseAuthCredentialsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapServeMultipleCDIVRulesPerRequestKey = ImsPrefs::getXcapServeMultipleCDIVRulesPerRequestKey(v984);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapServeMultipleCDIVRulesPerRequestKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapCFErasureSupportKey = ImsPrefs::getXcapCFErasureSupportKey(v986);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapCFErasureSupportKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapCFMediaTagSupportKey = ImsPrefs::getXcapCFMediaTagSupportKey(v988);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapCFMediaTagSupportKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapCBSupportKey = ImsPrefs::getXcapCBSupportKey(v990);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapCBSupportKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapCBMediaTagSupportKey = ImsPrefs::getXcapCBMediaTagSupportKey(v992);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapCBMediaTagSupportKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapUtInterfaceTypeKey = ImsPrefs::getXcapUtInterfaceTypeKey(v994);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapUtInterfaceTypeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapUseSecureTransportKey = ImsPrefs::getXcapUseSecureTransportKey(v996);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapUseSecureTransportKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  XcapHttpVersionKey = ImsPrefs::getXcapHttpVersionKey(v998);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "XCAP");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)XcapHttpVersionKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AllowRTPStackHandoverKey = ImsPrefs::getAllowRTPStackHandoverKey(v1000);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AllowRTPStackHandoverKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  MediaSessionHandoverTimeoutMillisecondsKey = ImsPrefs::getMediaSessionHandoverTimeoutMillisecondsKey(v1002);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MediaSessionHandoverTimeoutMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AutoRingTimerMillisecondsKey = ImsPrefs::getAutoRingTimerMillisecondsKey(v1004);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AutoRingTimerMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ClearThrottlingOnSocketErrorsKey = ImsPrefs::getClearThrottlingOnSocketErrorsKey(v1006);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ClearThrottlingOnSocketErrorsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ConferenceParticipantJoinTimeoutMillisecondsKey = ImsPrefs::getConferenceParticipantJoinTimeoutMillisecondsKey(v1008);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ConferenceParticipantJoinTimeoutMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ConferenceParticipantJoinTimeout");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v1010 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v1011 = std::string::__assign_external((std::string *)((char *)v1010 + 56), "ConferenceParticipantJoinTimeoutMilliseconds", 0x2CuLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  ConferenceWaitForHoldTimeoutMillisecondsKey = ImsPrefs::getConferenceWaitForHoldTimeoutMillisecondsKey((ImsPrefs *)v1011);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ConferenceWaitForHoldTimeoutMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ConferenceWaitForHoldTimeout");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v1013 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v1014 = std::string::__assign_external((std::string *)((char *)v1013 + 56), "ConferenceWaitForHoldTimeoutMilliseconds", 0x28uLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  CSFBDeregisterTimeoutSecondsKey = ImsPrefs::getCSFBDeregisterTimeoutSecondsKey((ImsPrefs *)v1014);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)CSFBDeregisterTimeoutSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EndConferenceOn405Key = ImsPrefs::getEndConferenceOn405Key(v1016);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EndConferenceOn405Key, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DeviceIMEIKey = ImsPrefs::getDeviceIMEIKey(v1018);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DeviceIMEIKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DisableDeviceSVNKey = ImsPrefs::getDisableDeviceSVNKey(v1020);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DisableDeviceSVNKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DisplayNameKey = ImsPrefs::getDisplayNameKey(v1022);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DisplayNameKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DigestPasswordKey = ImsPrefs::getDigestPasswordKey(v1024);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DigestPasswordKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DigestUsernameKey = ImsPrefs::getDigestUsernameKey(v1026);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DigestUsernameKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DomainKey = ImsPrefs::getDomainKey(v1028);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DomainKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DropIncomingKey = ImsPrefs::getDropIncomingKey(v1030);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DropIncomingKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DropOutgoingKey = ImsPrefs::getDropOutgoingKey(v1032);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DropOutgoingKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  FatalRegistrationErrorCodesKey = ImsPrefs::getFatalRegistrationErrorCodesKey(v1034);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)FatalRegistrationErrorCodesKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  EnableBasebandAssertOnInitializationFailureKey = ImsPrefs::getEnableBasebandAssertOnInitializationFailureKey(v1036);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)EnableBasebandAssertOnInitializationFailureKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  HoldResumeTimerMillisecondsKey = ImsPrefs::getHoldResumeTimerMillisecondsKey(v1038);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)HoldResumeTimerMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  HonorForbiddenRetryAfterKey = ImsPrefs::getHonorForbiddenRetryAfterKey(v1040);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)HonorForbiddenRetryAfterKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  IgnoreSessionTimerExpirationKey = ImsPrefs::getIgnoreSessionTimerExpirationKey(v1042);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)IgnoreSessionTimerExpirationKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  InternalDisableSipInstanceKey = ImsPrefs::getInternalDisableSipInstanceKey(v1044);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)InternalDisableSipInstanceKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ImpiKey = ImsPrefs::getImpiKey(v1046);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ImpiKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ImpuKey = ImsPrefs::getImpuKey(v1048);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ImpuKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  LoggingParamsKey = ImsPrefs::getLoggingParamsKey(v1050);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)LoggingParamsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v1053 = ImsPrefs::getMaxCallCountKey(v1052);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v1053, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  MaxProxyResolveAttemptsKey = ImsPrefs::getMaxProxyResolveAttemptsKey(v1054);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MaxProxyResolveAttemptsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  MediaAddressTypeKey = ImsPrefs::getMediaAddressTypeKey(v1056);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MediaAddressTypeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  MediaInterfaceKey = ImsPrefs::getMediaInterfaceKey(v1058);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MediaInterfaceKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  MediaInitTimeoutKey = ImsPrefs::getMediaInitTimeoutKey(v1060);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)MediaInitTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v1063 = ImsPrefs::getMultiCallHoldResumeTimerMillisecondsKey(v1062);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v1063, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  NewSubscriptionOnReRegistrationKey = ImsPrefs::getNewSubscriptionOnReRegistrationKey(v1064);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)NewSubscriptionOnReRegistrationKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  NetworkInterfaceKey = ImsPrefs::getNetworkInterfaceKey(v1066);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)NetworkInterfaceKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  OutgoingUriKey = ImsPrefs::getOutgoingUriKey(v1068);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)OutgoingUriKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PcscfOverrideKey = ImsPrefs::getPcscfOverrideKey(v1070);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PcscfOverrideKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RejectSMSWithFakeTimeoutKey = ImsPrefs::getRejectSMSWithFakeTimeoutKey(v1072);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RejectSMSWithFakeTimeoutKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ReRegisterOnMobikeHandoverKey = ImsPrefs::getReRegisterOnMobikeHandoverKey(v1074);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ReRegisterOnMobikeHandoverKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ResponseCodesAllowedForSilentRedialKey = ImsPrefs::getResponseCodesAllowedForSilentRedialKey(v1076);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ResponseCodesAllowedForSilentRedialKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  RegistrationExpirationCushionSecondsKey = ImsPrefs::getRegistrationExpirationCushionSecondsKey(v1078);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegistrationExpirationCushionSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "RegistrationExpirationCushion");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v1080 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v1081 = std::string::__assign_external((std::string *)((char *)v1080 + 56), "RegistrationExpirationCushionSeconds", 0x24uLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  RegistrationRefreshCushionCapSecondsKey = ImsPrefs::getRegistrationRefreshCushionCapSecondsKey((ImsPrefs *)v1081);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegistrationRefreshCushionCapSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "RegistrationRefreshCushionCap");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v1083 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v1084 = std::string::__assign_external((std::string *)((char *)v1083 + 56), "RegistrationRefreshCushionCapSeconds", 0x24uLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  RegistrationThrottlingCushionCapSecondsKey = ImsPrefs::getRegistrationThrottlingCushionCapSecondsKey((ImsPrefs *)v1084);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)RegistrationThrottlingCushionCapSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "RegistrationThrottlingCushionCap");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v1086 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v1087 = std::string::__assign_external((std::string *)((char *)v1086 + 56), "RegistrationThrottlingCushionCapSeconds", 0x27uLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  SessionExpiresCushionKey = ImsPrefs::getSessionExpiresCushionKey((ImsPrefs *)v1087);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SessionExpiresCushionKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ShutdownWaitTimeSecondsKey = ImsPrefs::getShutdownWaitTimeSecondsKey(v1089);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)ShutdownWaitTimeSecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ShutdownWaitTime");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v1091 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v1092 = std::string::__assign_external((std::string *)((char *)v1091 + 56), "ShutdownWaitTimeSeconds", 0x17uLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  TTYReinviteTimeoutMillisecondsKey = ImsPrefs::getTTYReinviteTimeoutMillisecondsKey((ImsPrefs *)v1092);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TTYReinviteTimeoutMillisecondsKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "TTYReinviteTimeout");
  ims::lowerCase((uint64_t)__p, &v1132);
  v1133[0] = &v1132;
  v1094 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 20, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v1133);
  v1095 = std::string::__assign_external((std::string *)((char *)v1094 + 56), "TTYReinviteTimeoutMilliseconds", 0x1EuLL);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1128) < 0) {
    operator delete(__p[0]);
  }
  UseAPMediaStackKey = ImsPrefs::getUseAPMediaStackKey((ImsPrefs *)v1095);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Internal");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseAPMediaStackKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v1098 = ImsPrefs::getResetCallIdOn401WithoutSecurityServerKey(v1097);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Cert");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v1098, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseUacAsRefresherKey = ImsPrefs::getUseUacAsRefresherKey(v1099);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Cert");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseUacAsRefresherKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  AddPreconditionToSupportedHeaderIfEnabledKey = ImsPrefs::getAddPreconditionToSupportedHeaderIfEnabledKey(v1101);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Cert");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)AddPreconditionToSupportedHeaderIfEnabledKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  UseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey = ImsPrefs::getUseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey(v1103);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Cert");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)UseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  DoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey = ImsPrefs::getDoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey(v1105);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Cert");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)DoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SendPreconditionsInPrackKey = ImsPrefs::getSendPreconditionsInPrackKey(v1107);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Cert");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SendPreconditionsInPrackKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  PcscfKey = ImsPrefs::getPcscfKey(v1109);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "IPTelephony");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)PcscfKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  BlockSilentRedialOverCSKey = ImsPrefs::getBlockSilentRedialOverCSKey(v1111);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Voice");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)BlockSilentRedialOverCSKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  TTYOverImsSupportedKey = ImsPrefs::getTTYOverImsSupportedKey(v1113);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Voice");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)TTYOverImsSupportedKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v1116 = ImsPrefs::getCallTransferDialNumberKey(v1115);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "CallTransfer");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v1116, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v1118 = ImsPrefs::getCallTransferRequestUriKey(v1117);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "CallTransfer");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v1118, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  v1120 = ImsPrefs::getCallTransferToUriKey(v1119);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "CallTransfer");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)v1120, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  SwitchoverSizeKey = ImsPrefs::getSwitchoverSizeKey(v1121);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Lazuli");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)SwitchoverSizeKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  LazuliConferenceFactoryKey = ImsPrefs::getLazuliConferenceFactoryKey(v1123);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Lazuli");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)LazuliConferenceFactoryKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  CarrierBasedKey = ImsPrefs::getCarrierBasedKey(v1125);
  std::string::basic_string[abi:ne180100]<0>(&v1132, "Lazuli");
  ImsPrefs::addKeyInSection((uint64_t)this, (uint64_t)CarrierBasedKey, (void **)&v1132.__r_.__value_.__l.__data_, (uint64_t)&v1129);
  if (SHIBYTE(v1132.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v1132.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v1131) < 0)
  {
    *(unsigned char *)v1129 = 0;
    uint64_t v1130 = 0;
  }
  else
  {
    LOBYTE(v1129) = 0;
    HIBYTE(v1131) = 0;
  }
  ImsPrefs::setDefaultRuntimeVars(this);
  operator new();
}

void sub_1C563B970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **a10, char **a11, char **a12, void **a13, void **a14, char **a15, void **a16, void **a17, void **a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  MEMORY[0x1C878E320](v35, 0x10B3C40B5098F76);
  if (a30 < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)(v33 + 136);
  std::vector<SipSecurityAgreementConfig>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::string>::destroy(v33 + 112, *a10);
  std::__tree<std::string>::destroy(v33 + 88, *a11);
  std::__tree<std::string>::destroy(v34, *a12);
  std::__tree<std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsPrefs::RuntimeVar>>>::destroy(v33 + 32, *a13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v33, *a14);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*a15);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(v32, *v36);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v31, *a16);
  std::__tree<std::__value_type<std::string,std::vector<ImsPrefsKey const*>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ImsPrefsKey const*>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ImsPrefsKey const*>>>>::destroy(*a17);
  uint64_t v38 = *a18;
  if (*a18)
  {
    *(void *)(v30 + 120) = v38;
    operator delete(v38);
  }
  ImsLogContainer::~ImsLogContainer((void **)v30);
  _Unwind_Resume(a1);
}

void ImsPrefs::addKeyInSection(uint64_t a1, uint64_t a2, void **a3, uint64_t a4)
{
  memset(&__p, 0, sizeof(__p));
  ims::lowerCase(a2 + 8, &__p);
  BOOL v8 = *(long long **)(a1 + 144);
  BOOL v9 = (long long **)(a1 + 144);
  uint64_t v10 = (long long **)(a1 + 144);
  if (!v8) {
    goto LABEL_10;
  }
  BOOL v9 = (long long **)(a1 + 144);
  while (1)
  {
    while (1)
    {
      uint64_t v10 = (long long **)v8;
      uint64_t v11 = v8 + 2;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, (void **)v8 + 4) & 0x80) == 0) {
        break;
      }
      BOOL v8 = *v10;
      BOOL v9 = v10;
      if (!*v10) {
        goto LABEL_10;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, (void **)&__p.__r_.__value_.__l.__data_) & 0x80) == 0)break; {
    BOOL v9 = v10 + 1;
    }
    BOOL v8 = v10[1];
    if (!v8) {
      goto LABEL_10;
    }
  }
  std::string v12 = *v9;
  if (!*v9)
  {
LABEL_10:
    uint64_t v50 = 0;
    std::string v13 = (long long *)operator new(0x50uLL);
    v49[0] = v13;
    v49[1] = (long long *)(a1 + 144);
    uint64_t v14 = (std::string *)(v13 + 2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v14, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v13 + 6) = *((void *)&__p.__r_.__value_.__l + 2);
    }
    *((void *)v13 + 8) = 0;
    *((void *)v13 + 9) = 0;
    *((void *)v13 + 7) = 0;
    LOBYTE(v50) = 1;
    *(void *)std::string v13 = 0;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = v10;
    void *v9 = v13;
    uint64_t v15 = **(void **)(a1 + 136);
    if (v15)
    {
      *(void *)(a1 + 136) = v15;
      std::string v13 = *v9;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 144), (uint64_t *)v13);
    ++*(void *)(a1 + 152);
    std::string v12 = v49[0];
    v49[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<ImsPrefsKey const*>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<ImsPrefsKey const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)v49);
  }
  unint64_t v17 = (void *)*((void *)v12 + 8);
  unint64_t v16 = *((void *)v12 + 9);
  if ((unint64_t)v17 >= v16)
  {
    uint64_t v19 = *((void *)v12 + 7);
    uint64_t v20 = ((uint64_t)v17 - v19) >> 3;
    if ((unint64_t)(v20 + 1) >> 61) {
      goto LABEL_58;
    }
    uint64_t v21 = v16 - v19;
    uint64_t v22 = v21 >> 2;
    if (v21 >> 2 <= (unint64_t)(v20 + 1)) {
      uint64_t v22 = v20 + 1;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v23 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v23 = v22;
    }
    if (v23) {
      unint64_t v23 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v23);
    }
    else {
      uint64_t v24 = 0;
    }
    unint64_t v25 = (void *)(v23 + 8 * v20);
    unint64_t v26 = v23 + 8 * v24;
    void *v25 = a2;
    uint64_t v18 = v25 + 1;
    char v28 = (char *)*((void *)v12 + 7);
    uint64_t v27 = (char *)*((void *)v12 + 8);
    if (v27 != v28)
    {
      do
      {
        uint64_t v29 = *((void *)v27 - 1);
        v27 -= 8;
        *--unint64_t v25 = v29;
      }
      while (v27 != v28);
      uint64_t v27 = (char *)*((void *)v12 + 7);
    }
    *((void *)v12 + 7) = v25;
    *((void *)v12 + 8) = v18;
    *((void *)v12 + 9) = v26;
    if (v27) {
      operator delete(v27);
    }
  }
  else
  {
    void *v17 = a2;
    uint64_t v18 = v17 + 1;
  }
  *((void *)v12 + 8) = v18;
  uint64_t v30 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 208, a3);
  if ((void **)(a1 + 216) == v30) {
    operator new();
  }
  uint64_t v31 = v30[7];
  uint64_t v33 = (void *)v31[6];
  unint64_t v32 = v31[7];
  if ((unint64_t)v33 < v32)
  {
    void *v33 = a2;
    uint64_t v34 = v33 + 1;
    goto LABEL_51;
  }
  uint64_t v35 = v31[5];
  uint64_t v36 = ((uint64_t)v33 - v35) >> 3;
  if ((unint64_t)(v36 + 1) >> 61) {
LABEL_58:
  }
    std::vector<ImsPref *>::__throw_length_error[abi:ne180100]();
  uint64_t v37 = v32 - v35;
  uint64_t v38 = v37 >> 2;
  if (v37 >> 2 <= (unint64_t)(v36 + 1)) {
    uint64_t v38 = v36 + 1;
  }
  if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v39 = v38;
  }
  if (v39) {
    unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v39);
  }
  else {
    uint64_t v40 = 0;
  }
  uint64_t v41 = (void *)(v39 + 8 * v36);
  unint64_t v42 = v39 + 8 * v40;
  void *v41 = a2;
  uint64_t v34 = v41 + 1;
  uint64_t v44 = (char *)v31[5];
  uint64_t v43 = (char *)v31[6];
  if (v43 != v44)
  {
    do
    {
      uint64_t v45 = *((void *)v43 - 1);
      v43 -= 8;
      *--uint64_t v41 = v45;
    }
    while (v43 != v44);
    uint64_t v43 = (char *)v31[5];
  }
  v31[5] = v41;
  v31[6] = v34;
  v31[7] = v42;
  if (v43) {
    operator delete(v43);
  }
LABEL_51:
  v31[6] = v34;
  uint64_t v46 = *(unsigned __int8 *)(a4 + 23);
  if ((v46 & 0x80u) != 0) {
    uint64_t v46 = *(void *)(a4 + 8);
  }
  if (v46)
  {
    v49[0] = (long long *)&__p;
    uint64_t v47 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 232), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, v49);
    std::string::operator=((std::string *)(v47 + 7), (const std::string *)a4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C563D5FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  operator delete(v17);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ImsPrefs::setDefaultRuntimeVars(ImsPrefs *this)
{
  std::string::basic_string[abi:ne180100]<0>(v3, "OS");
  std::string::basic_string[abi:ne180100]<0>(&__p, "iOS");
  ImsPrefs::setRuntimeVar((uint64_t)this, (uint64_t)v3, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v3, "OS_VERSION");
  ims::osVersion(&__p);
  ImsPrefs::setRuntimeVar((uint64_t)this, (uint64_t)v3, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v3, "DEVICE");
  ims::deviceClass(&__p);
  ImsPrefs::setRuntimeVar((uint64_t)this, (uint64_t)v3, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v3, "SHORT_DEVICE_CLASS");
  ims::shortDeviceClass(&__p);
  ImsPrefs::setRuntimeVar((uint64_t)this, (uint64_t)v3, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v3, "DEVICE_NAME");
  ims::userAssignedDeviceName(&__p);
  ImsPrefs::setRuntimeVar((uint64_t)this, (uint64_t)v3, &__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_1C563D804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void ImsPrefs::~ImsPrefs(ImsPrefs *this)
{
  *(void *)this = &unk_1F20E6238;
  *((void *)this + 13) = &unk_1F20E62A8;
  ImsPrefs::clear(this);
  id v2 = (ImsPrefs *)*((void *)this + 26);
  if (v2 != (ImsPrefs *)((char *)this + 216))
  {
    do
    {
      uint64_t v3 = *((void *)v2 + 7);
      if (v3) {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      char v4 = (ImsPrefs *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          char v4 = *(ImsPrefs **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (ImsPrefs *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          id v2 = v5;
        }
        while (!v6);
      }
      id v2 = v5;
    }
    while (v5 != (ImsPrefs *)((char *)this + 216));
  }
  uint64_t v7 = *((void *)this + 32);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  BOOL v9 = (void **)((char *)this + 368);
  std::vector<SipSecurityAgreementConfig>::__destroy_vector::operator()[abi:ne180100](&v9);
  std::__tree<std::string>::destroy((uint64_t)this + 344, *((char **)this + 44));
  std::__tree<std::string>::destroy((uint64_t)this + 320, *((char **)this + 41));
  std::__tree<std::string>::destroy((uint64_t)this + 288, *((char **)this + 37));
  std::__tree<std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsPrefs::RuntimeVar>>>::destroy((uint64_t)this + 264, *((void **)this + 34));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 232, *((void **)this + 30));
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 27));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 184, *((void **)this + 24));
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 160, *((void **)this + 21));
  std::__tree<std::__value_type<std::string,std::vector<ImsPrefsKey const*>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ImsPrefsKey const*>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ImsPrefsKey const*>>>>::destroy(*((void **)this + 18));
  BOOL v8 = (void *)*((void *)this + 14);
  if (v8)
  {
    *((void *)this + 15) = v8;
    operator delete(v8);
  }
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  ImsPrefs::~ImsPrefs(this);
  JUMPOUT(0x1C878E320);
}

void ImsPrefs::clear(ImsPrefs *this)
{
  id v2 = (void *)*((void *)this + 14);
  uint64_t v3 = (void *)*((void *)this + 15);
  while (v2 != v3)
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  char v4 = (ImsPrefs *)*((void *)this + 26);
  if (v4 != (ImsPrefs *)((char *)this + 216))
  {
    do
    {
      ImsPrefsSection::clear(*((ImsPrefsSection **)v4 + 7));
      uint64_t v5 = (ImsPrefs *)*((void *)v4 + 1);
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          uint64_t v5 = *(ImsPrefs **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          BOOL v6 = (ImsPrefs *)*((void *)v4 + 2);
          BOOL v7 = *(void *)v6 == (void)v4;
          char v4 = v6;
        }
        while (!v7);
      }
      char v4 = v6;
    }
    while (v6 != (ImsPrefs *)((char *)this + 216));
  }
  ImsPrefsSection::clear(*((ImsPrefsSection **)this + 32));
  *((void *)this + 15) = *((void *)this + 14);
  BOOL v9 = (void (***)(void))*((void *)this + 46);
  BOOL v8 = (void (***)(void))*((void *)this + 47);
  if (v8 != v9)
  {
    uint64_t v10 = v8 - 9;
    uint64_t v11 = v8 - 9;
    std::string v12 = v8 - 9;
    do
    {
      std::string v13 = *v12;
      v12 -= 9;
      (*v13)(v11);
      v10 -= 9;
      BOOL v7 = v11 == v9;
      uint64_t v11 = v12;
    }
    while (!v7);
  }
  *((void *)this + 47) = v9;
  std::__tree<std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsPrefs::RuntimeVar>>>::destroy((uint64_t)this + 264, *((void **)this + 34));
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 33) = (char *)this + 272;
  ImsPrefs::setDefaultRuntimeVars(this);
}

void non-virtual thunk to'ImsPrefs::~ImsPrefs(ImsPrefs *this)
{
}

{
  uint64_t vars8;

  ImsPrefs::~ImsPrefs((ImsPrefs *)((char *)this - 104));
  JUMPOUT(0x1C878E320);
}

void **ImsPrefs::keysWithName(uint64_t a1, uint64_t a2)
{
  ims::lowerCase(a2, &__p);
  uint64_t v5 = *(void **)(a1 + 144);
  uint64_t v3 = (void **)(a1 + 144);
  char v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  BOOL v6 = v3;
  do
  {
    char v7 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4 + 4, (void **)&__p.__r_.__value_.__l.__data_);
    if (v7 >= 0) {
      BOOL v8 = v4;
    }
    else {
      BOOL v8 = v4 + 1;
    }
    if (v7 >= 0) {
      BOOL v6 = (void **)v4;
    }
    char v4 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v3
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, v6 + 4) & 0x80) != 0)
  {
LABEL_11:
    BOOL v6 = v3;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v3 == v6) {
    return 0;
  }
  else {
    return v6 + 7;
  }
}

long long *ImsPrefs::valueForOldEnumValue(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 184, (void **)(a2 + 8));
  BOOL v6 = (void **)(a1 + 192);
  char v7 = &ims::kEmptyString;
  if (v6 != v5)
  {
    BOOL v8 = v5;
    BOOL v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v5 + 7), a3);
    if (v8 + 8 != v9) {
      return (long long *)(v9 + 7);
    }
  }
  return v7;
}

void ImsPrefs::setRuntimeVar(uint64_t a1, uint64_t a2, const std::string *a3, char a4)
{
  ims::upperCase(a2, &v12);
  char v7 = std::string::insert(&v12, 0, "${", 2uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  BOOL v9 = std::string::append(&v13, "}", 1uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  uint64_t v11 = std::__tree<std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsPrefs::RuntimeVar>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 264), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v13);
  std::string::operator=((std::string *)(v11 + 7), &__str);
  std::string::operator=((std::string *)(v11 + 10), a3);
  *((unsigned char *)v11 + 104) = a4;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C563DE2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void ImsPrefs::updateRuntimeVar(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  ims::upperCase(a2, &v19);
  char v7 = std::string::insert(&v19, 0, "${", 2uLL);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  BOOL v9 = std::string::append(&v20, "}", 1uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  uint64_t v11 = (uint64_t **)(a1 + 264);
  std::string v12 = *(void **)(a1 + 272);
  if (!v12) {
    goto LABEL_18;
  }
  std::string v13 = (void **)(a1 + 272);
  uint64_t v14 = v13;
  do
  {
    char v15 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, (void **)&__str.__r_.__value_.__l.__data_);
    if (v15 >= 0) {
      unint64_t v16 = v12;
    }
    else {
      unint64_t v16 = v12 + 1;
    }
    if (v15 >= 0) {
      uint64_t v14 = (void **)v12;
    }
    std::string v12 = (void *)*v16;
  }
  while (*v16);
  if (v14 == v13
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__str, v14 + 4) & 0x80) != 0)
  {
    goto LABEL_18;
  }
  uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *(void *)(a3 + 8);
  }
  if (v17)
  {
LABEL_18:
    v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
    uint64_t v18 = std::__tree<std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsPrefs::RuntimeVar>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v20);
    std::string::operator=((std::string *)(v18 + 7), &__str);
    std::string::operator=((std::string *)(v18 + 10), (const std::string *)a3);
    *((unsigned char *)v18 + 104) = a4;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C563E040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsPrefsSource::ImsPrefsSource(uint64_t a1, uint64_t a2, std::string *__str)
{
  *(void *)a1 = &unk_1F20E62D8;
  *(void *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 96) = &unk_1F20E3A10;
  *(void *)(a1 + 104) = 0;
  std::string::operator=((std::string *)(a1 + 16), __str);
  return a1;
}

void sub_1C563E110(_Unwind_Exception *a1)
{
  char v4 = v3;
  ims::CFType::~CFType(v4);
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*(void **)(v1 + 64));
  }
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*(void **)(v1 + 40));
  }
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void ImsPrefsSource::~ImsPrefsSource(ImsPrefsSource *this)
{
  *(void *)this = &unk_1F20E62D8;
  uint64_t v2 = *((void *)this + 11);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  ims::CFType::~CFType((ImsPrefsSource *)((char *)this + 96));
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  ImsPrefsSource::~ImsPrefsSource(this);
  JUMPOUT(0x1C878E320);
}

void ImsPrefsSource::loadFromDict(std::string *__str@<X2>, uint64_t a2@<X0>, void *a3@<X1>, ImsResult *a4@<X8>)
{
  std::string::operator=((std::string *)(a2 + 64), __str);
  memset(&v20, 0, sizeof(v20));
  std::string __p = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  ims::tokenize(__str, (uint64_t *)&__p, 0x2Fu);
  *((unsigned char *)&v20.__r_.__value_.__s + 23) = 0;
  v20.__r_.__value_.__s.__data_[0] = 0;
  char v7 = (const std::string *)__p;
  long long v8 = v15;
  BOOL v9 = a3;
  if (__p != v15)
  {
    BOOL v9 = a3;
    do
    {
      if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
      {
        if (v7->__r_.__value_.__l.__size_)
        {
          long long v10 = (const std::string *)v7->__r_.__value_.__r.__words[0];
LABEL_8:
          uint64_t v11 = (__CFString *)[NSString stringWithUTF8String:v10];
          goto LABEL_10;
        }
      }
      else
      {
        long long v10 = v7;
        if (*((unsigned char *)&v7->__r_.__value_.__s + 23)) {
          goto LABEL_8;
        }
      }
      uint64_t v11 = &stru_1F20EAF20;
LABEL_10:
      BOOL v9 = (void *)[v9 objectForKey:v11];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        p_p = &__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
        goto LABEL_15;
      }
      std::string::operator=(&v20, v7++);
    }
    while (v7 != (const std::string *)v8);
  }
  p_p = &__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&p_p);
  if (v9) {
    operator new();
  }
LABEL_15:
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  std::string __p = &unk_1F20B2680;
  char v15 = &_bambiDomain;
  LODWORD(v16) = 1073741825;
  uint64_t v12 = ImsResult::operator<<<char [37]>((uint64_t)&__p, "couldn't find dictionary at keypath ");
  std::string v13 = (const std::string *)ImsResult::operator<<<std::string>(v12, (uint64_t)__str);
  ImsResult::ImsResult(a4, v13);
  ImsResult::~ImsResult((ImsResult *)&__p);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_1C563E4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fillDictPrefFromObject(ImsPrefsSection **a1, uint64_t a2, void **a3, uint64_t a4, void *a5, int a6, unsigned int a7, void *a8)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  long long v58 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  uint64_t result = [a5 countByEnumeratingWithState:&v58 objects:v63 count:16];
  uint64_t v13 = result;
  if (result)
  {
    p_std::string::size_type size = &__p.__r_.__value_.__l.__size_;
    uint64_t v50 = (uint64_t)(a1 + 26);
    uint64_t v51 = *(void *)v59;
    long long v49 = (void **)(a1 + 27);
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v59 != v51) {
          objc_enumerationMutation(a5);
        }
        char v15 = *(void **)(*((void *)&v58 + 1) + 8 * v14);
        memset(&__str, 0, sizeof(__str));
        std::string::basic_string[abi:ne180100]<0>(&__str, (char *)objc_msgSend(v15, "UTF8String", p_size));
        uint64_t v16 = (void *)[a5 objectForKey:v15];
        long long v17 = ImsDictPref::childWithName(a4, (uint64_t)&__str);
        long long v18 = v17;
        if (v17)
        {
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              memset(&__p, 0, sizeof(__p));
              uint64_t v20 = *(unsigned __int8 *)(a2 + 23);
              if ((v20 & 0x80u) != 0) {
                uint64_t v20 = *(void *)(a2 + 8);
              }
              if (v20)
              {
                std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, 47, &v55);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_str = &__str;
                }
                else {
                  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                }
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = __str.__r_.__value_.__l.__size_;
                }
                unint64_t v23 = std::string::append(&v55, (const std::string::value_type *)p_str, size);
                std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
                v62[0] = v23->__r_.__value_.__l.__size_;
                *(void *)((char *)v62 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
                char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
                v23->__r_.__value_.__l.__size_ = 0;
                v23->__r_.__value_.__r.__words[2] = 0;
                v23->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                __p.__r_.__value_.__r.__words[0] = v24;
                *p_std::string::size_type size = v62[0];
                *(std::string::size_type *)((char *)p_size + 7) = *(void *)((char *)v62 + 7);
                *((unsigned char *)&__p.__r_.__value_.__s + 23) = v25;
                if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v55.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                std::string::operator=(&__p, &__str);
              }
              if (a6) {
                BOOL v43 = *(void *)(a4 + 80) == 0;
              }
              else {
                BOOL v43 = 0;
              }
              fillDictPrefFromObject(a1, &__p, a3, v19, v16, v43, a7, a8);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_64;
            }
          }
        }
        if (a6) {
          char v26 = *(void *)(a4 + 80) == 0;
        }
        else {
          char v26 = 0;
        }
        uint64_t v27 = prefFromObject((uint64_t)a1, a2, (uint64_t)&__str, a3, v16, v26);
        if (!v27) {
          goto LABEL_64;
        }
        ImsDictPref::addChildWithName(a4, v27, (uint64_t)&__str);
        uint64_t v28 = *(void *)(v27 + 80);
        if (v28)
        {
          uint64_t v29 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v50, (void **)(v28 + 32));
          if (v49 == v29 || (uint64_t v30 = v29[7]) == 0)
          {
            uint64_t v31 = (*((uint64_t (**)(ImsPrefsSection **))*a1 + 7))(a1);
            (*((void (**)(ImsPrefsSection **, uint64_t))*a1 + 2))(a1, v31);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"can't find section for key ", 27);
            *(unsigned char *)(v31 + 17) = 0;
            uint64_t v32 = *(void *)(v27 + 80);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"(", 1);
            *(unsigned char *)(v31 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 32))(v31, v32 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)", ", 2);
            *(unsigned char *)(v31 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 32))(v31, v32 + 32);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)", ", 2);
            *(unsigned char *)(v31 + 17) = 0;
            uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 8))(v32);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 32))(v31, v33);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)")", 1);
            *(unsigned char *)(v31 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v31 + 17) = 0;
            goto LABEL_64;
          }
LABEL_35:
          uint64_t v36 = *((unsigned __int8 *)v30 + 31);
          int v37 = (char)v36;
          if ((v36 & 0x80u) != 0) {
            uint64_t v36 = v30[2];
          }
          if (v36 != 8
            || (v37 >= 0 ? (uint64_t v38 = v30 + 1) : (uint64_t v38 = (void *)v30[1]),
                *v38 != 0x6C616E7265746E49 || a7 && os_variant_has_internal_content()))
          {
            ImsPrefsSection::addPref((ImsPrefsSection *)v30, (const ImsPref *)v27);
          }
          goto LABEL_64;
        }
        if (*(char *)(v27 + 79) < 0)
        {
          if (*(void *)(v27 + 64))
          {
LABEL_32:
            uint64_t v34 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v50, (void **)(v27 + 56));
            if (v49 == v34 || (uint64_t v30 = v34[7]) == 0)
            {
              uint64_t v39 = (*((uint64_t (**)(ImsPrefsSection **))*a1 + 7))(a1);
              (*((void (**)(ImsPrefsSection **, uint64_t))*a1 + 2))(a1, v39);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"can't find section ", 19);
              *(unsigned char *)(v39 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 32))(v39, v27 + 56);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)" for unknown pref ", 18);
              *(unsigned char *)(v39 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 32))(v39, v27 + 8);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v39 + 17) = 0;
              goto LABEL_64;
            }
            uint64_t v35 = (*((uint64_t (**)(ImsPrefsSection **))*a1 + 8))(a1);
            (*((void (**)(ImsPrefsSection **, uint64_t))*a1 + 2))(a1, v35);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"found section ", 14);
            *(unsigned char *)(v35 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 32))(v35, v27 + 56);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)" for unknown pref ", 18);
            *(unsigned char *)(v35 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 32))(v35, v27 + 8);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v35 + 17) = 0;
            goto LABEL_35;
          }
        }
        else if (*(unsigned char *)(v27 + 79))
        {
          goto LABEL_32;
        }
        uint64_t v40 = v27 + 8;
        uint64_t v41 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v50, (void **)(v27 + 8));
        if (v49 == v41 || !v41[7])
        {
          uint64_t v44 = *(const void **)(v27 + 88);
          if (v44)
          {
            if (v45 == a8 && a8 && v45)
            {
              uint64_t v46 = (*((uint64_t (**)(ImsPrefsSection **))*a1 + 6))(a1);
              (*((void (**)(ImsPrefsSection **, uint64_t))*a1 + 2))(a1, v46);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)"Key : ", 6);
              *(unsigned char *)(v46 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v46 + 32))(v46, v27 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)" : set at root level", 20);
              *(unsigned char *)(v46 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v46 + 17) = 0;
              ImsPrefsSection::addPref(a1[32], (const ImsPref *)v27);
              goto LABEL_64;
            }
          }
          uint64_t v42 = (*((uint64_t (**)(ImsPrefsSection **))*a1 + 8))(a1);
          (*((void (**)(ImsPrefsSection **, uint64_t))*a1 + 2))(a1, v42);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 32))(v42, v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)" is an unknown nested key", 25);
          *(unsigned char *)(v42 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        else
        {
          uint64_t v42 = (*((uint64_t (**)(ImsPrefsSection **))*a1 + 8))(a1);
          (*((void (**)(ImsPrefsSection **, uint64_t))*a1 + 2))(a1, v42);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v42 + 32))(v42, v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)" is a section", 13);
          *(unsigned char *)(v42 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        *(unsigned char *)(v42 + 17) = 0;
LABEL_64:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        ++v14;
      }
      while (v13 != v14);
      uint64_t result = [a5 countByEnumeratingWithState:&v58 objects:v63 count:16];
      uint64_t v13 = result;
    }
    while (result);
  }
  return result;
}

void sub_1C563F0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void ImsPrefsSource::loadFromFile(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, ImsResult *a4@<X8>)
{
  std::string::operator=((std::string *)(a1 + 40), (const std::string *)a2);
  long long v8 = (void *)MEMORY[0x1E4F1C9E8];
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    uint64_t v9 = a2;
    if (!*(unsigned char *)(a2 + 23)) {
      goto LABEL_7;
    }
LABEL_6:
    long long v10 = (__CFString *)[NSString stringWithUTF8String:v9];
    goto LABEL_8;
  }
  if (*(void *)(a2 + 8))
  {
    uint64_t v9 = *(void *)a2;
    goto LABEL_6;
  }
LABEL_7:
  long long v10 = &stru_1F20EAF20;
LABEL_8:
  uint64_t v11 = (void *)[v8 dictionaryWithContentsOfFile:v10];
  if (v11)
  {
    ImsPrefsSource::loadFromDict(a3, a1, v11, a4);
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    v14[0] = &unk_1F20B2680;
    v14[1] = &_bambiDomain;
    int v15 = 1073741825;
    uint64_t v12 = ImsResult::operator<<<char [22]>((uint64_t)v14, "unable to load plist ");
    uint64_t v13 = (const std::string *)ImsResult::operator<<<std::string>(v12, a2);
    ImsResult::ImsResult(a4, v13);
    ImsResult::~ImsResult((ImsResult *)v14);
  }
}

void sub_1C563F294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

ImsOutStream *ImsPrefsSource::log(ImsPrefsSource *this, ImsOutStream *a2)
{
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 16));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)":", 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = *((void *)this + 11);
  if (v4) {
    (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v4 + 16))(v4, a2);
  }
  return a2;
}

void sub_1C563F3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsPrefs::loadDict()
{
}

void sub_1C563F544(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C40DF2C32A4);
  _Unwind_Resume(a1);
}

void ImsPrefs::loadPlist()
{
}

void sub_1C563F748(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C40DF2C32A4);
  _Unwind_Resume(a1);
}

uint64_t ImsPrefs::logRuntimeVars(uint64_t this, ImsOutStream *a2)
{
  uint64_t v2 = *(void **)(this + 264);
  uint64_t v3 = (void *)(this + 272);
  if (v2 != (void *)(this + 272))
  {
    while (1)
    {
      LoggableString::LoggableString(&__p, (const std::string *)(v2 + 7));
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" = ", 3);
      *((unsigned char *)a2 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (*((unsigned char *)v2 + 104)) {
        break;
      }
      LoggableString::LoggableString(&__p, (const std::string *)(v2 + 10));
      (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v5 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_13:
        operator delete(v5);
      }
LABEL_14:
      this = (*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      BOOL v6 = (void *)v2[1];
      if (v6)
      {
        do
        {
          char v7 = v6;
          BOOL v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          char v7 = (void *)v2[2];
          BOOL v8 = *v7 == (void)v2;
          uint64_t v2 = v7;
        }
        while (!v8);
      }
      uint64_t v2 = v7;
      if (v7 == v3) {
        return this;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v9, "");
    PIIString::PIIString((uint64_t)&__p, (const std::string *)(v2 + 10), &v9);
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 48))(a2, &__p);
    if (v12 < 0) {
      operator delete(v11);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    uint64_t v5 = (void *)v9.__r_.__value_.__r.__words[0];
    goto LABEL_13;
  }
  return this;
}

void sub_1C563F970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *ImsPrefs::log(ImsPrefs *this, ImsOutStream *a2)
{
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Runtime Vars:", 13);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  ImsPrefs::logRuntimeVars((uint64_t)this, a2);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Pref Bundles:", 13);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v4 = (uint64_t *)*((void *)this + 14);
  uint64_t v5 = (uint64_t *)*((void *)this + 15);
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v6 + 16))(v6, a2);
  }
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Merged Prefs:", 13);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  char v7 = (ImsPrefs *)*((void *)this + 26);
  if (v7 != (ImsPrefs *)((char *)this + 216))
  {
    do
    {
      uint64_t v8 = *((void *)v7 + 7);
      uint64_t v9 = *(unsigned __int8 *)(v8 + 31);
      int v10 = (char)v9;
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *(void *)(v8 + 16);
      }
      if (v9 != 8
        || (v10 >= 0 ? (uint64_t v11 = (void *)(v8 + 8)) : (uint64_t v11 = *(void **)(v8 + 8)),
            *v11 != 0x6C616E7265746E49 || os_variant_has_internal_content()))
      {
        ImsPrefsSection::logPrefs((ImsPrefsSection *)v8, a2);
      }
      char v12 = (ImsPrefs *)*((void *)v7 + 1);
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          char v12 = *(ImsPrefs **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (ImsPrefs *)*((void *)v7 + 2);
          BOOL v14 = *(void *)v13 == (void)v7;
          char v7 = v13;
        }
        while (!v14);
      }
      char v7 = v13;
    }
    while (v13 != (ImsPrefs *)((char *)this + 216));
  }
  int v15 = (ImsPrefsSection *)*((void *)this + 32);
  return ImsPrefsSection::logPrefs(v15, a2);
}

ImsOutStream *non-virtual thunk to'ImsPrefs::log(ImsPrefs *this, ImsOutStream *a2)
{
  return ImsPrefs::log((ImsPrefs *)((char *)this - 104), a2);
}

void *ImsPrefs::prefWithKey(ImsPrefs *this, void **a2)
{
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 208, a2 + 4);
  if ((void **)((char *)this + 216) == v4) {
    return 0;
  }
  uint64_t v5 = (uint64_t)v4[7];
  if (!v5) {
    return 0;
  }
  return ImsPrefsSection::prefWithName(v5, (uint64_t)(a2 + 1));
}

uint64_t ImsPrefs::intValue(ImsPrefs *this, void **a2)
{
  uint64_t v3 = ImsPrefs::prefWithKey(this, a2);
  if (!v3) {
    return *((unsigned int *)a2 + 15);
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 56);
  return v4();
}

uint64_t ImsPrefs::stringValue(ImsPrefs *this, void **a2)
{
  uint64_t v4 = ImsPrefs::prefWithKey(this, a2);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 48);
    return v5();
  }
  else
  {
    char v7 = (uint64_t (*)(void **, ImsPrefs *))*((void *)*a2 + 3);
    return v7(a2, this);
  }
}

void ImsPrefs::stringValue(ImsPrefs *this@<X0>, const ImsPrefsKeyEnum *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = ImsPrefs::prefWithKey(this, (void **)a2);
  if (v5)
  {
    uint64_t v6 = *(void (**)(void))(*(void *)v5 + 48);
    v6();
  }
  else if (*((char *)a2 + 111) < 0)
  {
    char v7 = (const std::string::value_type *)*((void *)a2 + 11);
    std::string::size_type v8 = *((void *)a2 + 12);
    std::string::__init_copy_ctor_external(a3, v7, v8);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)a2 + 88);
    a3->__r_.__value_.__r.__words[2] = *((void *)a2 + 13);
  }
}

uint64_t ImsPrefs::BOOLValue(ImsPrefs *this, void **a2)
{
  uint64_t v3 = ImsPrefs::prefWithKey(this, a2);
  if (!v3) {
    return *((unsigned __int8 *)a2 + 57);
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 40);
  return v4();
}

const void *ImsPrefs::typedPrefWithKey<ImsDictPref>(ImsPrefs *a1, void **a2)
{
  uint64_t result = ImsPrefs::prefWithKey(a1, a2);
  if (result)
  {
  }
  return result;
}

const void *ImsPrefs::typedPrefWithKey<ImsArrayPref>(ImsPrefs *a1, void **a2)
{
  uint64_t result = ImsPrefs::prefWithKey(a1, a2);
  if (result)
  {
  }
  return result;
}

uint64_t ImsPrefs::stringArrayValues(ImsPrefs *a1, uint64_t a2, std::vector<std::string> *a3)
{
  uint64_t v5 = ImsPrefs::typedPrefWithKey<ImsArrayPref>(a1, (void **)a2);
  if (v5)
  {
    ImsArrayPref::stringValues((uint64_t)v5, a3);
  }
  else if ((std::vector<std::string> *)(a2 + 64) != a3)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(a3, *(std::string **)(a2 + 64), *(long long **)(a2 + 72), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 3));
  }
  return 1;
}

BOOL ImsPrefs::stringMapValue(ImsPrefs *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5 = ImsPrefs::typedPrefWithKey<ImsDictPref>(a1, (void **)a2);
  if (v5) {
    uint64_t v6 = (uint64_t)v5;
  }
  else {
    uint64_t v6 = *(void *)(a2 + 88);
  }
  if (v6) {
    ImsDictPref::stringMapValue(v6, a3);
  }
  return v6 != 0;
}

uint64_t ImsPrefsKey::addInfoToDictionary(ImsPrefsKey *this, __CFDictionary *a2)
{
  uint64_t v3 = (void *)((char *)this + 8);
  if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)this + 31)) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v4 = (__CFString *)[NSString stringWithUTF8String:v3];
    goto LABEL_8;
  }
  if (*((void *)this + 2))
  {
    uint64_t v3 = (void *)*v3;
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v4 = &stru_1F20EAF20;
LABEL_8:
  return [(__CFDictionary *)a2 setObject:v4 forKey:@"name"];
}

void ImsPrefsKeyString::defaultValueAsStringInPrefs(ImsPrefsKeyString *this@<X0>, const ImsPrefs *a2@<X1>, uint64_t a3@<X8>)
{
}

void ImsPrefsKeyString::createPrefFromString()
{
}

void sub_1C5640240(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C4027359FD2);
  _Unwind_Resume(a1);
}

uint64_t ImsPrefsKeyString::addInfoToDictionary(ImsPrefsKeyString *this, __CFDictionary *a2, int a3)
{
  uint64_t result = ImsPrefsKey::addInfoToDictionary(this, a2);
  if (!a3) {
    return result;
  }
  char v7 = (void *)((char *)this + 64);
  if (*((char *)this + 87) < 0)
  {
    if (!*((void *)this + 9))
    {
LABEL_9:
      std::string::size_type v8 = &stru_1F20EAF20;
      goto LABEL_10;
    }
    char v7 = (void *)*v7;
  }
  else if (!*((unsigned char *)this + 87))
  {
    goto LABEL_9;
  }
  std::string::size_type v8 = (__CFString *)[NSString stringWithUTF8String:v7];
LABEL_10:
  return [(__CFDictionary *)a2 setObject:v8 forKey:@"value"];
}

void ImsPrefsKeyEnum::createPrefFromString()
{
}

void sub_1C564036C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C4027359FD2);
  _Unwind_Resume(a1);
}

void ImsPrefsKeyEnum::addInfoToDictionary(ImsPrefsKeyEnum *this, __CFDictionary *a2, int a3)
{
  ImsPrefsKey::addInfoToDictionary(this, a2);
  if (a3)
  {
    uint64_t v6 = (void *)((char *)this + 88);
    if (*((char *)this + 111) < 0)
    {
      if (!*((void *)this + 12))
      {
LABEL_8:
        char v7 = &stru_1F20EAF20;
        goto LABEL_9;
      }
      uint64_t v6 = (void *)*v6;
    }
    else if (!*((unsigned char *)this + 111))
    {
      goto LABEL_8;
    }
    char v7 = (__CFString *)[NSString stringWithUTF8String:v6];
LABEL_9:
    [(__CFDictionary *)a2 setObject:v7 forKey:@"value"];
  }
  id v15 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  std::string::size_type v8 = (void *)*((void *)this + 8);
  uint64_t v9 = (char *)this + 72;
  if (v8 != (void *)v9)
  {
    do
    {
      int v10 = v8 + 4;
      if (*((char *)v8 + 55) < 0)
      {
        if (!v8[5])
        {
LABEL_17:
          uint64_t v11 = &stru_1F20EAF20;
          goto LABEL_18;
        }
        int v10 = (void *)*v10;
      }
      else if (!*((unsigned char *)v8 + 55))
      {
        goto LABEL_17;
      }
      uint64_t v11 = (__CFString *)[NSString stringWithUTF8String:v10];
LABEL_18:
      [v15 addObject:v11];
      char v12 = (char *)v8[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          char v12 = *(char **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (char *)v8[2];
          BOOL v14 = *(void *)v13 == (void)v8;
          std::string::size_type v8 = v13;
        }
        while (!v14);
      }
      std::string::size_type v8 = v13;
    }
    while (v13 != v9);
  }
  [(__CFDictionary *)a2 setObject:v15 forKey:@"allowedValues"];
}

void ImsPrefsKeyInt::createPrefFromString()
{
}

void sub_1C56405A4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C402F221486);
  _Unwind_Resume(a1);
}

uint64_t ImsPrefsKeyInt::addInfoToDictionary(ImsPrefsKeyInt *this, __CFDictionary *a2, int a3)
{
  uint64_t result = ImsPrefsKey::addInfoToDictionary(this, a2);
  if (a3)
  {
    uint64_t v7 = [NSNumber numberWithInt:*((unsigned int *)this + 15)];
    return [(__CFDictionary *)a2 setObject:v7 forKey:@"value"];
  }
  return result;
}

void ImsPrefsKeyBool::createPrefFromString()
{
}

void sub_1C56406D8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C402AC266ACLL);
  _Unwind_Resume(a1);
}

uint64_t ImsPrefsKeyBool::addInfoToDictionary(ImsPrefsKeyBool *this, __CFDictionary *a2, int a3)
{
  uint64_t result = ImsPrefsKey::addInfoToDictionary(this, a2);
  if (a3)
  {
    uint64_t v7 = [NSNumber numberWithBool:*((unsigned __int8 *)this + 57)];
    return [(__CFDictionary *)a2 setObject:v7 forKey:@"value"];
  }
  return result;
}

uint64_t ImsPrefsKeyArray::ImsPrefsKeyArray(uint64_t a1, const std::string *a2, const std::string *a3, char a4, std::string *a5)
{
  uint64_t v7 = (void *)ImsPrefsKey::ImsPrefsKey(a1, a2, a3, a4);
  *uint64_t v7 = &unk_1F20E6308;
  v7[8] = 0;
  std::string::size_type v8 = v7 + 8;
  v7[9] = 0;
  v7[10] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, ",");
  ims::tokenize(a5, v8, (char *)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1C564080C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  ImsPrefsKey::~ImsPrefsKey(v15);
  _Unwind_Resume(a1);
}

void ImsPrefsKeyArray::defaultValueAsString(ImsPrefsKeyArray *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, ",");
  ims::join<std::__wrap_iter<std::string const*>>();
}

void sub_1C56408A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsPrefsKeyArray::createPrefFromString()
{
}

void sub_1C5640A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::string __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t ImsPrefsKeyArray::addInfoToDictionary(ImsPrefsKeyArray *this, __CFDictionary *a2, int a3)
{
  uint64_t result = ImsPrefsKey::addInfoToDictionary(this, a2);
  if (a3)
  {
    uint64_t v6 = [MEMORY[0x1E4F1C978] array];
    return [(__CFDictionary *)a2 setObject:v6 forKey:@"value"];
  }
  return result;
}

uint64_t ImsPrefsKeyDict::ImsPrefsKeyDict(uint64_t a1, const std::string *a2, const std::string *a3, char a4, void *a5)
{
  std::string::size_type v8 = (void *)ImsPrefsKey::ImsPrefsKey(a1, a2, a3, a4);
  void *v8 = &unk_1F20E6750;
  std::map<std::string,std::string>::map[abi:ne180100](v8 + 8, (uint64_t)a5);
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v9 = operator new(0x98uLL);
  v9[1] = 0;
  void v9[2] = 0;
  void *v9 = &unk_1F20E65C0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "defaults");
  ImsPref::ImsPref((uint64_t)(v9 + 3), a2, &__p, a1);
  v9[17] = 0;
  uint64_t v9[3] = &unk_1F20E6168;
  v9[18] = 0;
  v9[16] = v9 + 17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  int v10 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v9 + 3;
  *(void *)(a1 + 96) = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if ((void *)*a5 != a5 + 1) {
    operator new();
  }
  return a1;
}

void sub_1C5640D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v19);
  uint64_t v20 = *(std::__shared_weak_count **)(v15 + 96);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v16, *(void **)(v15 + 72));
  ImsPrefsKey::~ImsPrefsKey((void **)v15);
  _Unwind_Resume(a1);
}

void ImsPrefsKeyDict::createPrefFromString()
{
}

void sub_1C5640E44(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C4058139EB7);
  _Unwind_Resume(a1);
}

uint64_t ImsPrefsKeyDict::addInfoToDictionary(ImsPrefsKeyDict *this, __CFDictionary *a2, int a3)
{
  uint64_t result = ImsPrefsKey::addInfoToDictionary(this, a2);
  if (a3)
  {
    uint64_t v6 = [MEMORY[0x1E4F1C9E8] dictionary];
    return [(__CFDictionary *)a2 setObject:v6 forKey:@"value"];
  }
  return result;
}

void ImsPrefsKeyDict::defaultValueAsString(ImsPrefsKeyDict *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, ",");
  uint64_t v3 = 0;
  memset(v2, 0, sizeof(v2));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v2);
}

void sub_1C5641034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ImsPrefs::logVerificationFailure(ImsPrefs *this, std::string *a2)
{
  if (*((unsigned char *)this + 312))
  {
    uint64_t v4 = (_OWORD *)((char *)this + 376);
    unint64_t v6 = *((void *)this + 47);
    unint64_t v5 = *((void *)this + 48);
    if (v6 >= v5)
    {
      uint64_t v9 = *((void *)this + 46);
      unint64_t v10 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - v9) >> 3);
      if (v10 + 1 > 0x38E38E38E38E38ELL) {
        std::vector<ImsPref *>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - v9) >> 3);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= v10 + 1) {
        uint64_t v12 = v10 + 1;
      }
      if (v11 >= 0x1C71C71C71C71C7) {
        unint64_t v13 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v13 = v12;
      }
      std::string::size_type v24 = (char *)this + 384;
      if (v13)
      {
        if (v13 > 0x38E38E38E38E38ELL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        BOOL v14 = (char *)operator new(72 * v13);
      }
      else
      {
        BOOL v14 = 0;
      }
      std::string __p = v14;
      *(void *)unint64_t v23 = &v14[72 * v10];
      *(void *)&v23[16] = &v14[72 * v13];
      ImsResult::ImsResult(*(ImsResult **)v23, a2);
      uint64_t v15 = 0;
      *(void *)&v23[8] = *(void *)v23 + 72;
      uint64_t v17 = *((void *)this + 46);
      for (uint64_t i = *((void *)this + 47);
            i + v15 != v17;
            ImsResult::ImsResult((ImsResult *)(v15 + *(void *)v23), (const std::string *)(v15 + i)))
      {
        v15 -= 72;
      }
      uint64_t v18 = *((void *)this + 48);
      long long v19 = *(_OWORD *)&v23[8];
      unint64_t v21 = *(void *)&v23[8];
      long long v20 = *((_OWORD *)this + 23);
      *((void *)this + 46) = *(void *)v23 + v15;
      *(_OWORD *)unint64_t v23 = v20;
      _OWORD *v4 = v19;
      *(void *)&v23[16] = v18;
      std::string __p = (void *)v20;
      std::__split_buffer<SipSecurityAgreementConfig>::~__split_buffer((uint64_t)&__p);
      unint64_t v7 = v21;
    }
    else
    {
      ImsResult::ImsResult(*((ImsResult **)this + 47), a2);
      unint64_t v7 = v6 + 72;
      *(void *)uint64_t v4 = v6 + 72;
    }
    *(void *)uint64_t v4 = v7;
  }
  else
  {
    std::string::size_type v8 = (unsigned char *)(*(uint64_t (**)(ImsPrefs *))(*(void *)this + 48))(this);
    (*(void (**)(ImsPrefs *, unsigned char *))(*(void *)this + 16))(this, v8);
    ImsResult::description((ImsResult *)a2, &__p);
    (*(void (**)(unsigned char *, void **))(*(void *)v8 + 32))(v8, &__p);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v8[17] = 0;
    if ((v23[15] & 0x80000000) != 0) {
      operator delete(__p);
    }
  }
}

void sub_1C56412DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void ImsStringPref::~ImsStringPref(void **this)
{
  *this = &unk_1F20E6348;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  ImsPref::~ImsPref(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20E6348;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  ImsPref::~ImsPref(this);
  JUMPOUT(0x1C878E320);
}

ImsOutStream *ImsStringPref::log(ImsStringPref *this, ImsOutStream *a2)
{
  uint64_t v4 = (void *)*((void *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&__p, 1);
  *((unsigned char *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 104));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  unint64_t v5 = (void *)*((void *)a2 + 1);
  char v8 = 34;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v8, 1);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a2;
}

void sub_1C56414E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *ImsPref::loggableName@<X0>(ImsPref *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 8));
}

void ImsStringPref::clone(ImsStringPref *this)
{
}

void sub_1C5641598(_Unwind_Exception *a1)
{
  ImsPref::~ImsPref(v1);
  MEMORY[0x1C878E320](v1, 0x10F3C4027359FD2);
  _Unwind_Resume(a1);
}

uint64_t ImsPref::log(ImsPref *this, ImsOutStream *a2)
{
  return (*(uint64_t (**)(ImsPref *, ImsOutStream *))(*(void *)this + 16))(this, a2);
}

std::string *ImsStringPref::setValue(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 104), a2);
}

void ImsBoolPref::~ImsBoolPref(void **this)
{
  ImsPref::~ImsPref(this);
  JUMPOUT(0x1C878E320);
}

ImsOutStream *ImsBoolPref::log(ImsBoolPref *this, ImsOutStream *a2)
{
  if (*((unsigned char *)this + 104)) {
    uint64_t v3 = "true";
  }
  else {
    uint64_t v3 = "false";
  }
  if (*((unsigned char *)this + 104)) {
    uint64_t v4 = 4;
  }
  else {
    uint64_t v4 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)v3, v4);
  *((unsigned char *)a2 + 17) = 0;
  return a2;
}

void ImsBoolPref::clone(ImsBoolPref *this)
{
}

void sub_1C56416F4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C402AC266ACLL);
  _Unwind_Resume(a1);
}

uint64_t ImsBoolPref::BOOLValue(ImsBoolPref *this)
{
  return *((unsigned __int8 *)this + 104);
}

void *ImsBoolPref::stringValue@<X0>(ImsBoolPref *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 104)) {
    uint64_t v2 = "true";
  }
  else {
    uint64_t v2 = "false";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t ImsBoolPref::intValue(ImsBoolPref *this)
{
  return *((unsigned __int8 *)this + 104);
}

void ImsIntPref::~ImsIntPref(void **this)
{
  ImsPref::~ImsPref(this);
  JUMPOUT(0x1C878E320);
}

ImsOutStream *ImsIntPref::log(ImsIntPref *this, ImsOutStream *a2)
{
  *((unsigned char *)a2 + 17) = 0;
  return a2;
}

void ImsIntPref::clone(ImsIntPref *this)
{
}

void sub_1C5641828(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C402F221486);
  _Unwind_Resume(a1);
}

BOOL ImsIntPref::BOOLValue(ImsIntPref *this)
{
  return *((_DWORD *)this + 26) != 0;
}

uint64_t ImsIntPref::intValue(ImsIntPref *this)
{
  return *((unsigned int *)this + 26);
}

void ImsArrayPref::clone(ImsArrayPref *this)
{
}

void sub_1C56419E8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C4015D05941);
  _Unwind_Resume(a1);
}

uint64_t ImsPref::BOOLValue(ImsPref *this)
{
  return 0;
}

void *ImsPref::stringValue@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "I don't know");
}

uint64_t ImsPref::intValue(ImsPref *this)
{
  return 0;
}

uint64_t ImsArrayPref::childCount(ImsArrayPref *this)
{
  return (uint64_t)(*((void *)this + 14) - *((void *)this + 13)) >> 3;
}

void ImsDictPref::clone(ImsDictPref *this)
{
}

void sub_1C5641BEC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C4058139EB7);
  _Unwind_Resume(a1);
}

uint64_t ImsDictPref::childCount(ImsDictPref *this)
{
  return *((void *)this + 15);
}

uint64_t ImsPrefsKey::validate(ImsPrefsKey *this, const ImsPref *a2)
{
  return 1;
}

uint64_t ImsPrefsKey::defaultValueAsStringInPrefs(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

BOOL ImsPrefsKeyString::validate(ImsPrefsKeyString *this, const ImsPref *lpsrc)
{
  return lpsrc
}

const char *ImsPrefsKeyString::type(ImsPrefsKeyString *this)
{
  return "string";
}

void ImsPrefsKeyString::defaultValueAsString(ImsPrefsKeyString *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 87) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 8), *((void *)this + 9));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 4);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 10);
  }
}

BOOL ImsPrefsKeyEnum::validate(ImsPrefsKeyEnum *this, const ImsPref *lpsrc)
{
  if (!lpsrc) {
    return 0;
  }
  if (!v3) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)v3 + 48))(__p);
  BOOL v4 = (void **)((char *)this + 72) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 64, __p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1C5641DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *ImsPrefsKeyEnum::type(ImsPrefsKeyEnum *this)
{
  return "enum";
}

void ImsPrefsKeyEnum::defaultValueAsString(ImsPrefsKeyEnum *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((void *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 13);
  }
}

uint64_t ImsPrefsKeyInt::validate(ImsPrefsKeyInt *this, const ImsPref *a2)
{
  return 0;
}

const char *ImsPrefsKeyInt::type(ImsPrefsKeyInt *this)
{
  return "integer";
}

void ImsPrefsKeyInt::defaultValueAsString(ImsPrefsKeyInt *this)
{
}

uint64_t ImsPrefsKeyBool::validate(ImsPrefsKeyBool *this, const ImsPref *a2)
{
  return 0;
}

const char *ImsPrefsKeyBool::type(ImsPrefsKeyBool *this)
{
  return "BOOL";
}

void *ImsPrefsKeyBool::defaultValueAsString@<X0>(ImsPrefsKeyBool *this@<X0>, void *a2@<X8>)
{
  if (*((unsigned char *)this + 57)) {
    uint64_t v2 = "true";
  }
  else {
    uint64_t v2 = "false";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t ImsPrefsKeyDict::validate(ImsPrefsKeyDict *this, const ImsPref *a2)
{
  return 0;
}

const char *ImsPrefsKeyDict::type(ImsPrefsKeyDict *this)
{
  return "dict";
}

void ImsPrefsSection::loggableName(LoggableString *a1@<X8>)
{
}

void *ImsPrefs::logPrefix(ImsPrefs *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"ImsPrefs: ", 10);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void ImsPrefs::loggableName(LoggableString *a1@<X8>)
{
}

void non-virtual thunk to'ImsPrefs::loggableName(LoggableString *a1@<X8>)
{
}

std::string *ImsPrefsSource::loggableName@<X0>(ImsPrefsSource *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 16));
}

uint64_t ImsPrefsKeyArray::validate(ImsPrefsKeyArray *this, const ImsPref *a2)
{
  return 0;
}

const char *ImsPrefsKeyArray::type(ImsPrefsKeyArray *this)
{
  return "array";
}

void std::vector<ImsPref *>::__throw_length_error[abi:ne180100]()
{
}

void ImsPref::~ImsPref(void **this)
{
  *this = &unk_1F20E6098;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t ImsStringPref::ImsStringPref(uint64_t a1, const std::string *a2, const std::string *a3, uint64_t a4, const std::string *a5)
{
  uint64_t v7 = ImsPref::ImsPref(a1, a2, a3, a4);
  *(void *)uint64_t v7 = &unk_1F20E6348;
  *(void *)(v7 + 104) = 0;
  *(void *)(v7 + 112) = 0;
  *(void *)(v7 + 120) = 0;
  std::string::operator=((std::string *)(v7 + 104), a5);
  return a1;
}

void sub_1C5642050(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*v2);
  }
  ImsPref::~ImsPref((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t ImsPrefsSection::ImsPrefsSection(uint64_t a1, const std::string *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F20E6208;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 64) = a1 + 72;
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  *(void *)(a1 + 32) = a3;
  return a1;
}

void sub_1C56420F8(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v3, *(char **)(v1 + 72));
  unint64_t v5 = *(void **)(v1 + 40);
  if (v5)
  {
    *(void *)(v1 + 48) = v5;
    operator delete(v5);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

uint64_t prefFromObject(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, void *a5, char a6)
{
  uint64_t v182 = *MEMORY[0x1E4F143B8];
  memset(&__str, 0, sizeof(__str));
  ims::chomp("\r\n\t ", a3, 3, &__str);
  memset(&v179, 0, sizeof(v179));
  uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  if (v11)
  {
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a2, 47, &v175);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    BOOL v14 = std::string::append(&v175, (const std::string::value_type *)p_str, size);
    std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
    v181.__r_.__value_.__r.__words[0] = v14->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v181.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
    char v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v179.__r_.__value_.__l.__data_);
    }
    v179.__r_.__value_.__r.__words[0] = v15;
    v179.__r_.__value_.__l.__size_ = v181.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&v179.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v181.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&v179.__r_.__value_.__s + 23) = v16;
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v175.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::operator=(&v179, &__str);
  }
  std::string::size_type v17 = HIBYTE(v179.__r_.__value_.__r.__words[2]);
  if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v17 = v179.__r_.__value_.__l.__size_;
  }
  if (v17 != 7) {
    goto LABEL_25;
  }
  uint64_t v18 = &v179;
  if ((v179.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v18 = (std::string *)v179.__r_.__value_.__r.__words[0];
  }
  int data = (int)v18->__r_.__value_.__l.__data_;
  int v20 = *(_DWORD *)((char *)v18->__r_.__value_.__r.__words + 3);
  if (data != 1936876886 || v20 != 1852795251)
  {
LABEL_25:
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    char v23 = isKindOfClass;
    if ((a6 & 1) == 0)
    {
      uint64_t v30 = 0;
      memset(&v174, 0, sizeof(v174));
      char v31 = 1;
      if ((isKindOfClass & 1) == 0) {
        goto LABEL_110;
      }
      goto LABEL_42;
    }
    uint64_t v24 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    int v27 = (char)v26;
    if ((v26 & 0x80u) != 0) {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    if (v25 != v26) {
      goto LABEL_44;
    }
    if (v27 >= 0) {
      uint64_t v28 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v28 = *(unsigned __int8 **)a3;
    }
    if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__str.__r_.__value_.__l.__data_, v28, __str.__r_.__value_.__l.__size_))
      {
LABEL_44:
        long long v176 = 0u;
        long long v177 = 0u;
        long long v178 = 0u;
        v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
        v175.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
        LODWORD(v175.__r_.__value_.__r.__words[2]) = 0x40000000;
        uint64_t v32 = ImsResult::operator<<<char [20]>((uint64_t)&v175, "Extra whitespace: '");
        uint64_t v33 = ImsResult::operator<<<std::string>(v32, a3);
        uint64_t v34 = (std::string *)ImsResult::operator<<<char [2]>(v33, "'");
        ImsPrefs::logVerificationFailure((ImsPrefs *)a1, v34);
        ImsResult::~ImsResult((ImsResult *)&v175);
      }
    }
    else if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
    {
      uint64_t v29 = &__str;
      while (v29->__r_.__value_.__s.__data_[0] == *v28)
      {
        uint64_t v29 = (std::string *)((char *)v29 + 1);
        ++v28;
        if (!--v24) {
          goto LABEL_45;
        }
      }
      goto LABEL_44;
    }
LABEL_45:
    uint64_t v35 = ImsPrefs::keysWithName(a1, (uint64_t)&__str);
    uint64_t v36 = v35;
    if (!v35)
    {
      ims::lowerCase((uint64_t)&__str, &v175);
      time_t v52 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 160, (void **)&v175.__r_.__value_.__l.__data_);
      if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v175.__r_.__value_.__l.__data_);
      }
      if ((void **)(a1 + 168) == v52 || (uint64_t v35 = ImsPrefs::keysWithName(a1, (uint64_t)(v52 + 7))) == 0)
      {
        if ((v23 & 1) == 0)
        {
          long long v176 = 0u;
          long long v177 = 0u;
          long long v178 = 0u;
          v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
          v175.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
          LODWORD(v175.__r_.__value_.__r.__words[2]) = 0x40000000;
          uint64_t v53 = ImsResult::operator<<<char [14]>((uint64_t)&v175, "Unknown key: ");
          uint64_t v54 = (std::string *)ImsResult::operator<<<std::string>(v53, (uint64_t)&v179);
          ImsPrefs::logVerificationFailure((ImsPrefs *)a1, v54);
          ImsResult::~ImsResult((ImsResult *)&v175);
        }
        memset(&v174, 0, sizeof(v174));
LABEL_109:
        std::string::operator=(&v174, (const std::string *)a2);
        uint64_t v30 = 0;
        char v31 = 1;
        if ((v23 & 1) == 0) {
          goto LABEL_110;
        }
        goto LABEL_42;
      }
    }
    uint64_t v38 = (char *)*v35;
    int v37 = (char *)v35[1];
    if (v37 - (unsigned char *)*v35 == 8)
    {
      uint64_t v30 = *(void *)v38;
    }
    else
    {
      if (v38 == v37)
      {
LABEL_73:
        long long v176 = 0u;
        long long v177 = 0u;
        long long v178 = 0u;
        v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
        v175.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
        LODWORD(v175.__r_.__value_.__r.__words[2]) = 0x40000000;
        uint64_t v47 = ImsResult::operator<<<char [21]>((uint64_t)&v175, "Multiple keys match ");
        uint64_t v48 = ImsResult::operator<<<std::string>(v47, (uint64_t)&__str);
        uint64_t v49 = ImsResult::operator<<<char [23]>(v48, ", but none in section ");
        uint64_t v50 = ImsResult::operator<<<std::string>(v49, a2);
        uint64_t v51 = (std::string *)ImsResult::operator<<<char [15]>(v50, ". Ignoring it.");
        ImsPrefs::logVerificationFailure((ImsPrefs *)a1, v51);
        ImsResult::~ImsResult((ImsResult *)&v175);
        goto LABEL_248;
      }
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v45 = (const char *)a2;
      }
      else {
        uint64_t v45 = *(const char **)a2;
      }
      while (1)
      {
        uint64_t v30 = *(void *)v38;
        uint64_t v46 = *(char *)(*(void *)v38 + 55) >= 0
            ? (const char *)(*(void *)v38 + 32)
            : *(const char **)(*(void *)v38 + 32);
        if (!strcasecmp(v46, v45)) {
          break;
        }
        v38 += 8;
        if (v38 == v37) {
          goto LABEL_73;
        }
      }
    }
    if (!v36)
    {
      long long v176 = 0u;
      long long v177 = 0u;
      long long v178 = 0u;
      v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      v175.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v175.__r_.__value_.__r.__words[2]) = 0x40000000;
      uint64_t v55 = ImsResult::operator<<<char [6]>((uint64_t)&v175, "Pref ");
      uint64_t v56 = ImsResult::operator<<<std::string>(v55, (uint64_t)&__str);
      uint64_t v57 = ImsResult::operator<<<char [23]>(v56, " should be renamed to ");
      long long v58 = (std::string *)ImsResult::operator<<<std::string>(v57, v30 + 8);
      ImsPrefs::logVerificationFailure((ImsPrefs *)a1, v58);
      ImsResult::~ImsResult((ImsResult *)&v175);
      goto LABEL_86;
    }
    uint64_t v39 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v40 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v40 = __str.__r_.__value_.__l.__size_;
    }
    uint64_t v41 = *(unsigned __int8 *)(v30 + 31);
    int v42 = (char)v41;
    if ((v41 & 0x80u) != 0) {
      uint64_t v41 = *(void *)(v30 + 16);
    }
    if (v40 == v41)
    {
      if (v42 >= 0) {
        BOOL v43 = (unsigned __int8 *)(v30 + 8);
      }
      else {
        BOOL v43 = *(unsigned __int8 **)(v30 + 8);
      }
      if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(__str.__r_.__value_.__l.__data_, v43, __str.__r_.__value_.__l.__size_)) {
          goto LABEL_86;
        }
      }
      else
      {
        if (!*((unsigned char *)&__str.__r_.__value_.__s + 23)) {
          goto LABEL_86;
        }
        uint64_t v44 = &__str;
        while (v44->__r_.__value_.__s.__data_[0] == *v43)
        {
          uint64_t v44 = (std::string *)((char *)v44 + 1);
          ++v43;
          if (!--v39) {
            goto LABEL_86;
          }
        }
      }
    }
    if (!*(unsigned char *)(a1 + 313))
    {
      long long v176 = 0u;
      long long v177 = 0u;
      long long v178 = 0u;
      v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      v175.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v175.__r_.__value_.__r.__words[2]) = 0x40000000;
      uint64_t v59 = ImsResult::operator<<<char [18]>((uint64_t)&v175, "Wrong case: pref ");
      uint64_t v60 = ImsResult::operator<<<std::string>(v59, (uint64_t)&__str);
      uint64_t v61 = ImsResult::operator<<<char [12]>(v60, " should be ");
      long long v62 = (std::string *)ImsResult::operator<<<std::string>(v61, v30 + 8);
      ImsPrefs::logVerificationFailure((ImsPrefs *)a1, v62);
      ImsResult::~ImsResult((ImsResult *)&v175);
    }
LABEL_86:
    ims::lowerCase(v30 + 8, &v175);
    long long v63 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 288, (void **)&v175.__r_.__value_.__l.__data_);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v175.__r_.__value_.__l.__data_);
    }
    if ((void **)(a1 + 296) != v63)
    {
      long long v176 = 0u;
      long long v177 = 0u;
      long long v178 = 0u;
      v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      v175.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v175.__r_.__value_.__r.__words[2]) = 0x40000000;
      uint64_t v64 = ImsResult::operator<<<char [6]>((uint64_t)&v175, "Pref ");
      uint64_t v65 = ImsResult::operator<<<std::string>(v64, v30 + 8);
      uint64_t v66 = (std::string *)ImsResult::operator<<<char [60]>(v65, " is Deprecated. It needs to be removed from carrier bundle.");
      ImsPrefs::logVerificationFailure((ImsPrefs *)a1, v66);
      ImsResult::~ImsResult((ImsResult *)&v175);
    }
    memset(&v174, 0, sizeof(v174));
    if (!v30) {
      goto LABEL_109;
    }
    if (*(void *)(a1 + 360)
      && (void **)(a1 + 328) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 320, a4)&& (a1 + 352 != (void)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 344, a4)) != (*(unsigned char *)(v30 + 56) != 0))
    {
LABEL_246:
      if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v174.__r_.__value_.__l.__data_);
      }
      goto LABEL_248;
    }
    std::string::operator=(&__str, (const std::string *)(v30 + 8));
    v170 = (ImsPrefs *)(v30 + 32);
    uint64_t v67 = *(unsigned __int8 *)(a2 + 23);
    if ((v67 & 0x80u) == 0) {
      uint64_t v68 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v68 = *(void *)(a2 + 8);
    }
    uint64_t v69 = *(unsigned __int8 *)(v30 + 55);
    int v70 = (char)v69;
    if ((v69 & 0x80u) != 0) {
      uint64_t v69 = *(void *)(v30 + 40);
    }
    if (v68 == v69)
    {
      if (v70 >= 0) {
        long long v71 = (unsigned __int8 *)(v30 + 32);
      }
      else {
        long long v71 = *(unsigned __int8 **)v170;
      }
      if ((v67 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)a2, v71, *(void *)(a2 + 8))) {
          goto LABEL_178;
        }
      }
      else
      {
        if (!*(unsigned char *)(a2 + 23)) {
          goto LABEL_178;
        }
        uint64_t v72 = (unsigned __int8 *)a2;
        while (*v72 == *v71)
        {
          ++v72;
          ++v71;
          if (!--v67) {
            goto LABEL_178;
          }
        }
      }
    }
    long long v88 = ImsPrefs::prefWithKey((ImsPrefs *)a1, (void **)v30);
    long long v89 = v88;
    if (v88)
    {
      if (((char)v88[79] & 0x80000000) == 0)
      {
        if (v88[79]) {
          goto LABEL_160;
        }
        goto LABEL_181;
      }
      if (!*((void *)v88 + 8))
      {
LABEL_181:
        long long v176 = 0u;
        long long v177 = 0u;
        long long v178 = 0u;
        v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
        v175.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
        LODWORD(v175.__r_.__value_.__r.__words[2]) = 0x40000000;
        uint64_t v99 = ImsResult::operator<<<char [36]>((uint64_t)&v175, "Duplicate: ignoring duplicate pref ");
        uint64_t v100 = ImsResult::operator<<<std::string>(v99, (uint64_t)&__str);
        uint64_t v101 = ImsResult::operator<<<char [5]>(v100, " in ");
        uint64_t v102 = ImsResult::operator<<<std::string>(v101, a2);
        uint64_t v103 = ImsResult::operator<<<char [18]>(v102, " (keeping value '");
        (*(void (**)(std::string *__return_ptr, unsigned char *))(*(void *)v89 + 48))(&v181, v89);
        uint64_t v104 = ImsResult::operator<<<std::string>(v103, (uint64_t)&v181);
        uint64_t v105 = ImsResult::operator<<<char [8]>(v104, "' from ");
        uint64_t v106 = ImsResult::operator<<<std::string>(v105, (uint64_t)v170);
        uint64_t v107 = ImsResult::operator<<<char [12]>(v106, ", source = ");
        uint64_t v108 = ImsResult::operator<<<std::string>(v107, (uint64_t)(v89 + 32));
        long long v109 = (std::string *)ImsResult::operator<<<char [2]>(v108, ")");
        ImsPrefs::logVerificationFailure((ImsPrefs *)a1, v109);
        if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v181.__r_.__value_.__l.__data_);
        }
        ImsResult::~ImsResult((ImsResult *)&v175);
        goto LABEL_246;
      }
    }
LABEL_160:
    memset(&v181, 0, sizeof(v181));
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      std::string::__assign_external(&v181, (const std::string::value_type *)[a5 UTF8String]);
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        std::to_string(&v175, [a5 intValue]);
        if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v181.__r_.__value_.__l.__data_);
        }
        std::string v181 = v175;
      }
    }
    long long v176 = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v175.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v175.__r_.__value_.__r.__words[2]) = 0x40000000;
    uint64_t v90 = ImsResult::operator<<<char [16]>((uint64_t)&v175, "Wrong section: ");
    uint64_t v91 = ImsResult::operator<<<std::string>(v90, (uint64_t)&__str);
    uint64_t v92 = *(void *)(v91 + 24);
    if (!v92) {
      operator new();
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v92 + 8), (uint64_t)" = ", 3);
    *(unsigned char *)(v92 + 17) = 0;
    uint64_t v93 = ImsResult::operator<<<std::string>(v91, (uint64_t)&v181);
    uint64_t v94 = ImsResult::operator<<<char [23]>(v93, " should be in section ");
    uint64_t v95 = ImsResult::operator<<<std::string>(v94, (uint64_t)v170);
    uint64_t v96 = ImsResult::operator<<<char [7]>(v95, ", not ");
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::size_type v97 = *(void *)(a2 + 8);
      if (v97)
      {
        std::string::__init_copy_ctor_external(&v173, *(const std::string::value_type **)a2, v97);
        goto LABEL_174;
      }
    }
    else if (*(unsigned char *)(a2 + 23))
    {
      std::string v173 = *(std::string *)a2;
LABEL_174:
      long long v98 = (std::string *)ImsResult::operator<<<std::string>(v96, (uint64_t)&v173);
      ImsPrefs::logVerificationFailure((ImsPrefs *)a1, v98);
      if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v173.__r_.__value_.__l.__data_);
      }
      ImsResult::~ImsResult((ImsResult *)&v175);
      std::string::operator=(&v174, (const std::string *)a2);
      if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v181.__r_.__value_.__l.__data_);
      }
LABEL_178:
      char v31 = 0;
      if ((v23 & 1) == 0)
      {
LABEL_110:
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          memset(&v173, 0, sizeof(v173));
          std::string::basic_string[abi:ne180100]<0>(&v173, (char *)[a5 UTF8String]);
          if (v31) {
            goto LABEL_214;
          }
          uint64_t v73 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v30 + 8))(v30);
          uint64_t v74 = v73[23];
          if ((v74 & 0x80u) == 0) {
            uint64_t v75 = v73[23];
          }
          else {
            uint64_t v75 = *((void *)v73 + 1);
          }
          if (v75 == 5)
          {
            if ((v74 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v73, "array", *((void *)v73 + 1))) {
                goto LABEL_186;
              }
            }
            else if (v73[23])
            {
              uint64_t v76 = "array";
              while (*v73 == *(unsigned __int8 *)v76)
              {
                ++v73;
                ++v76;
                if (!--v74) {
                  goto LABEL_207;
                }
              }
              goto LABEL_186;
            }
LABEL_207:
            operator new();
          }
LABEL_186:
          v110 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v30 + 8))(v30);
          uint64_t v111 = v110[23];
          if ((v111 & 0x80u) == 0) {
            uint64_t v112 = v110[23];
          }
          else {
            uint64_t v112 = *((void *)v110 + 1);
          }
          if (v112 == 4)
          {
            if ((v111 & 0x80) != 0)
            {
              int v119 = memcmp(*(const void **)v110, "enum", *((void *)v110 + 1));
              long long v114 = *(uint64_t (***)(void))v30;
              if (v119) {
                goto LABEL_197;
              }
            }
            else if (v110[23])
            {
              long long v113 = "enum";
              while (*v110 == *(unsigned __int8 *)v113)
              {
                ++v110;
                ++v113;
                if (!--v111) {
                  goto LABEL_209;
                }
              }
              goto LABEL_196;
            }
LABEL_209:
            if (v120)
            {
              uint64_t v121 = (uint64_t)v120;
              ims::chomp(&v173, "\r\n\t ", 3);
              memset(&v181, 0, sizeof(v181));
              v122 = ImsPrefs::valueForOldEnumValue(a1, v121, (void **)&v173.__r_.__value_.__l.__data_);
              if (*((char *)v122 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v181, *(const std::string::value_type **)v122, *((void *)v122 + 1));
              }
              else
              {
                long long v123 = *v122;
                v181.__r_.__value_.__r.__words[2] = *((void *)v122 + 2);
                *(_OWORD *)&v181.__r_.__value_.__l.__data_ = v123;
              }
              std::string::size_type v142 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
              if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v142 = v181.__r_.__value_.__l.__size_;
              }
              if (v142)
              {
                long long v176 = 0u;
                long long v177 = 0u;
                long long v178 = 0u;
                v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
                v175.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
                LODWORD(v175.__r_.__value_.__r.__words[2]) = 0x40000000;
                uint64_t v143 = ImsResult::operator<<<char [13]>((uint64_t)&v175, "Deprecated: ");
                uint64_t v144 = ImsResult::operator<<<std::string>(v143, (uint64_t)&__str);
                uint64_t v145 = ImsResult::operator<<<char [8]>(v144, " value ");
                uint64_t v146 = ImsResult::operator<<<std::string>(v145, (uint64_t)&v173);
                uint64_t v147 = ImsResult::operator<<<char [12]>(v146, " should be ");
                v148 = (std::string *)ImsResult::operator<<<std::string>(v147, (uint64_t)&v181);
                ImsPrefs::logVerificationFailure((ImsPrefs *)a1, v148);
                ImsResult::~ImsResult((ImsResult *)&v175);
                std::string::operator=(&v173, &v181);
              }
              v149 = (unsigned __int8 *)ImsPrefsKeyEnum::allowedValue(v121, (uint64_t)&v173);
              if (!v149)
              {
                long long v176 = 0u;
                long long v177 = 0u;
                long long v178 = 0u;
                v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
                v175.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
                LODWORD(v175.__r_.__value_.__r.__words[2]) = 0x40000000;
                uint64_t v158 = ImsResult::operator<<<char [16]>((uint64_t)&v175, "Invalid value: ");
                uint64_t v159 = ImsResult::operator<<<std::string>(v158, (uint64_t)&v173);
                uint64_t v160 = ImsResult::operator<<<char [35]>(v159, " is not an allowed value for pref ");
                uint64_t v161 = ImsResult::operator<<<std::string>(v160, (uint64_t)&__str);
                ImsResult::operator<<<char [22]>(v161, ". Allowed values are ");
                std::string::basic_string[abi:ne180100]<0>(&v172, ",");
                ims::join<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>();
              }
              v150 = (const std::string *)v149;
              if (!std::operator==[abi:ne180100]<std::allocator<char>>(v149, (unsigned __int8 *)&v173))
              {
                if (!*(unsigned char *)(a1 + 313))
                {
                  long long v176 = 0u;
                  long long v177 = 0u;
                  long long v178 = 0u;
                  v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
                  v175.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
                  LODWORD(v175.__r_.__value_.__r.__words[2]) = 0x40000000;
                  uint64_t v151 = ImsResult::operator<<<char [23]>((uint64_t)&v175, "Wrong case: replacing ");
                  uint64_t v152 = ImsResult::operator<<<std::string>(v151, (uint64_t)&__str);
                  uint64_t v153 = ImsResult::operator<<<char [9]>(v152, " value '");
                  uint64_t v154 = ImsResult::operator<<<std::string>(v153, (uint64_t)&v173);
                  uint64_t v155 = ImsResult::operator<<<char [9]>(v154, "' with '");
                  uint64_t v156 = ImsResult::operator<<<std::string>(v155, (uint64_t)v150);
                  v157 = (std::string *)ImsResult::operator<<<char [2]>(v156, "'");
                  ImsPrefs::logVerificationFailure((ImsPrefs *)a1, v157);
                  ImsResult::~ImsResult((ImsResult *)&v175);
                }
                std::string::operator=(&v173, v150);
              }
              if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v181.__r_.__value_.__l.__data_);
              }
            }
            goto LABEL_214;
          }
LABEL_196:
          long long v114 = *(uint64_t (***)(void))v30;
LABEL_197:
          long long v115 = (unsigned __int8 *)v114[1](v30);
          uint64_t v116 = v115[23];
          if ((v116 & 0x80u) == 0) {
            uint64_t v117 = v115[23];
          }
          else {
            uint64_t v117 = *((void *)v115 + 1);
          }
          if (v117 == 6)
          {
            if ((v116 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v115, "string", *((void *)v115 + 1))) {
                goto LABEL_214;
              }
            }
            else
            {
              if (!v115[23]) {
                goto LABEL_214;
              }
              std::string v118 = "string";
              while (*v115 == *(unsigned __int8 *)v118)
              {
                ++v115;
                ++v118;
                if (!--v116) {
                  goto LABEL_214;
                }
              }
            }
          }
          long long v176 = 0u;
          long long v177 = 0u;
          long long v178 = 0u;
          v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
          v175.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
          LODWORD(v175.__r_.__value_.__r.__words[2]) = 0x40000000;
          uint64_t v124 = ImsResult::operator<<<char [15]>((uint64_t)&v175, "Invalid type: ");
          uint64_t v125 = ImsResult::operator<<<std::string>(v124, (uint64_t)&__str);
          uint64_t v126 = ImsResult::operator<<<char [17]>(v125, " should be type ");
          uint64_t v127 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 8))(v30);
          uint64_t v128 = ImsResult::operator<<<std::string>(v126, v127);
          uint64_t v129 = ImsResult::operator<<<char [7]>(v128, ", not ");
          v130 = (std::string *)ImsResult::operator<<<std::string>(v129, (uint64_t)"string");
          ImsPrefs::logVerificationFailure((ImsPrefs *)a1, v130);
          ImsResult::~ImsResult((ImsResult *)&v175);
LABEL_214:
          operator new();
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [a5 intValue];
          if ((void *)*MEMORY[0x1E4F1CFD0] == a5 || *MEMORY[0x1E4F1CFC8] == (void)a5) {
            int v78 = (std::string *)"BOOL";
          }
          else {
            int v78 = (std::string *)"integer";
          }
          std::string v181 = *v78;
          if ((v31 & 1) == 0)
          {
            long long v79 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v30 + 8))(v30);
            uint64_t v80 = v79[23];
            if ((v80 & 0x80u) == 0) {
              uint64_t v81 = v79[23];
            }
            else {
              uint64_t v81 = *((void *)v79 + 1);
            }
            std::string::size_type v82 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
            if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v82 = v181.__r_.__value_.__l.__size_;
            }
            if (v81 == v82)
            {
              if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v83 = &v181;
              }
              else {
                long long v83 = (std::string *)v181.__r_.__value_.__r.__words[0];
              }
              if ((v80 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v79, v83, *((void *)v79 + 1))) {
                  goto LABEL_217;
                }
              }
              else
              {
                if (!v79[23]) {
                  goto LABEL_217;
                }
                while (*v79 == v83->__r_.__value_.__s.__data_[0])
                {
                  ++v79;
                  long long v83 = (std::string *)((char *)v83 + 1);
                  if (!--v80) {
                    goto LABEL_217;
                  }
                }
              }
            }
            long long v176 = 0u;
            long long v177 = 0u;
            long long v178 = 0u;
            v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
            v175.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
            LODWORD(v175.__r_.__value_.__r.__words[2]) = 0x40000000;
            uint64_t v131 = ImsResult::operator<<<char [15]>((uint64_t)&v175, "Invalid type: ");
            uint64_t v132 = ImsResult::operator<<<std::string>(v131, (uint64_t)&__str);
            uint64_t v133 = ImsResult::operator<<<char [17]>(v132, " should be type ");
            uint64_t v134 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 8))(v30);
            uint64_t v135 = ImsResult::operator<<<std::string>(v133, v134);
            uint64_t v136 = ImsResult::operator<<<char [7]>(v135, ", not ");
            v137 = (std::string *)ImsResult::operator<<<std::string>(v136, (uint64_t)&v181);
            ImsPrefs::logVerificationFailure((ImsPrefs *)a1, v137);
            ImsResult::~ImsResult((ImsResult *)&v175);
          }
LABEL_217:
          uint64_t v138 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
          if ((v181.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v139 = HIBYTE(v181.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v139 = v181.__r_.__value_.__l.__size_;
          }
          if (v139 != 4) {
            goto LABEL_228;
          }
          if ((*((unsigned char *)&v181.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (memcmp(v181.__r_.__value_.__l.__data_, "BOOL", v181.__r_.__value_.__l.__size_)) {
              goto LABEL_228;
            }
          }
          else if (*((unsigned char *)&v181.__r_.__value_.__s + 23))
          {
            v140 = &v181;
            v141 = "BOOL";
            while (v140->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v141)
            {
              v140 = (std::string *)((char *)v140 + 1);
              ++v141;
              if (!--v138) {
                goto LABEL_229;
              }
            }
LABEL_228:
            operator new();
          }
LABEL_229:
          operator new();
        }
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          if (v31) {
            goto LABEL_245;
          }
          std::string v84 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v30 + 8))(v30);
          uint64_t v85 = v84[23];
          if ((v85 & 0x80u) == 0) {
            uint64_t v86 = v84[23];
          }
          else {
            uint64_t v86 = *((void *)v84 + 1);
          }
          if (v86 == 5)
          {
            if ((v85 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v84, "array", *((void *)v84 + 1))) {
                goto LABEL_245;
              }
            }
            else
            {
              if (!v84[23]) {
                goto LABEL_245;
              }
              long long v87 = "array";
              while (*v84 == *(unsigned __int8 *)v87)
              {
                ++v84;
                ++v87;
                if (!--v85) {
                  goto LABEL_245;
                }
              }
            }
          }
          long long v176 = 0u;
          long long v177 = 0u;
          long long v178 = 0u;
          v175.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
          v175.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
          LODWORD(v175.__r_.__value_.__r.__words[2]) = 0x40000000;
          uint64_t v162 = ImsResult::operator<<<char [15]>((uint64_t)&v175, "Invalid type: ");
          uint64_t v163 = ImsResult::operator<<<std::string>(v162, (uint64_t)&__str);
          uint64_t v164 = ImsResult::operator<<<char [17]>(v163, " should be type ");
          uint64_t v165 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 8))(v30);
          uint64_t v166 = ImsResult::operator<<<std::string>(v164, v165);
          uint64_t v167 = ImsResult::operator<<<char [7]>(v166, ", not ");
          v168 = (std::string *)ImsResult::operator<<<std::string>(v167, (uint64_t)"array");
          ImsPrefs::logVerificationFailure((ImsPrefs *)a1, v168);
          ImsResult::~ImsResult((ImsResult *)&v175);
LABEL_245:
          operator new();
        }
        goto LABEL_246;
      }
LABEL_42:
      operator new();
    }
    std::string::basic_string[abi:ne180100]<0>(&v173, "[empty string]");
    goto LABEL_174;
  }
LABEL_248:
  if (SHIBYTE(v179.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v179.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C5643A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (*(char *)(v41 - 105) < 0) {
    operator delete(*(void **)(v41 - 128));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (*(char *)(v41 - 153) < 0) {
    operator delete(*(void **)(v41 - 176));
  }
  if (*(char *)(v41 - 129) < 0) {
    operator delete(*(void **)(v41 - 152));
  }
  _Unwind_Resume(exception_object);
}

void ims::join<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C5643E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ims::join<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  if ((void *)result != a2)
  {
    uint64_t v7 = (void *)result;
    char v8 = 1;
    do
    {
      if ((v8 & 1) == 0) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 32))(a3, a4);
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)a3 + 32))(a3, v7 + 4);
      uint64_t v9 = (void *)v7[1];
      if (v9)
      {
        do
        {
          unint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          unint64_t v10 = (void *)v7[2];
          BOOL v11 = *v10 == (void)v7;
          uint64_t v7 = v10;
        }
        while (!v11);
      }
      char v8 = 0;
      uint64_t v7 = v10;
    }
    while (v10 != a2);
  }
  return result;
}

_OWORD *std::__tree<std::__value_type<std::string,ImsPref *>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsPref *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsPref *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, _OWORD **a3)
{
  uint64_t v11 = 0;
  unint64_t v5 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x40uLL);
    char v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    uint64_t v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    void *v8 = 0;
    v8[1] = 0;
    uint64_t v8[2] = 0;
    *((void *)v6 + 7) = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
  }
  return v6;
}

void std::__tree<std::__value_type<std::string,std::vector<ImsPrefsKey const*>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ImsPrefsKey const*>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ImsPrefsKey const*>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<ImsPrefsKey const*>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ImsPrefsKey const*>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ImsPrefsKey const*>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<ImsPrefsKey const*>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<ImsPrefsKey const*>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<ImsPrefsKey const*>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<ImsPrefsKey const*>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<ImsPrefsKey const*>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__tree<std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsPrefs::RuntimeVar>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsPrefs::RuntimeVar>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsPrefs::RuntimeVar>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<SipLazuliManager::OutgoingMsrp,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,ImsPrefs::RuntimeVar>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ImsPrefs::RuntimeVar>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<SipLazuliManager::OutgoingMsrp,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<ImsPrefsKey const*>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<ImsPrefsKey const*>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<ImsPrefsKey const*>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsPrefs::RuntimeVar>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  unint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    char v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsPrefs::RuntimeVar>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,ImsPrefs::RuntimeVar>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ImsPrefs::RuntimeVar>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

double std::__tree<std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsPrefs::RuntimeVar>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsPrefs::RuntimeVar>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v6 = (char *)operator new(0x70uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  char v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 13) = 0;
  double result = 0.0;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  v6[104] = 1;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1C56442CC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,ImsPrefs::RuntimeVar>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,ImsPrefs::RuntimeVar>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ImsDictPref>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E65C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsDictPref>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E65C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<ImsDictPref>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t SDPTiming::toStream(SDPTiming *this, ImsOutStream *a2)
{
  BOOL v4 = (void *)*((void *)a2 + 1);
  char v12 = 116;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v12, 1);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v5 = (void *)*((void *)a2 + 1);
  char v13 = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v13, 1);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  unint64_t v6 = (void *)*((void *)a2 + 1);
  char v14 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v14, 1);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t result = std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  char v8 = (char *)this + 32;
  for (uint64_t i = *((void *)this + 5); (char *)i != v8; uint64_t i = *(void *)(v10 - 8))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r\n", 2);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t v11 = *(void *)(i + 16);
    uint64_t v10 = i + 16;
    uint64_t result = (*(uint64_t (**)(uint64_t, ImsOutStream *))(v11 + 16))(v10, a2);
  }
  return result;
}

uint64_t SDPRepeatTime::toStream(SDPRepeatTime *this, ImsOutStream *a2)
{
  BOOL v4 = (void *)*((void *)a2 + 1);
  char v10 = 114;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v10, 1);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v5 = (void *)*((void *)a2 + 1);
  char v11 = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v11, 1);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  unint64_t v6 = (void *)*((void *)a2 + 1);
  char v12 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v12, 1);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t result = std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  for (uint64_t i = (void *)*((void *)this + 5); i != (void *)((char *)this + 32); uint64_t i = (void *)i[1])
  {
    long long v9 = (void *)*((void *)a2 + 1);
    char v13 = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t result = std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
  }
  return result;
}

void *SDPTimeZone::toStream(SDPTimeZone *this, ImsOutStream *a2)
{
  BOOL v4 = (void *)*((void *)a2 + 1);
  char v10 = 122;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v10, 1);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v5 = (void *)*((void *)a2 + 1);
  char v11 = 61;
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v11, 1);
  *((unsigned char *)a2 + 17) = 0;
  for (uint64_t i = (void *)*((void *)this + 3); i != (void *)((char *)this + 16); uint64_t i = (void *)i[1])
  {
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    char v8 = (void *)*((void *)a2 + 1);
    char v12 = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v12, 1);
    *((unsigned char *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    long long v9 = (void *)*((void *)a2 + 1);
    char v13 = 32;
    uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
    *((unsigned char *)a2 + 17) = 0;
  }
  return result;
}

void SDPRepeatTime::~SDPRepeatTime(SDPRepeatTime *this)
{
  *(void *)this = &unk_1F20E67A8;
  std::__list_imp<unsigned long long>::clear((void *)this + 4);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20E67A8;
  std::__list_imp<unsigned long long>::clear((void *)this + 4);
  JUMPOUT(0x1C878E320);
}

void SDPTiming::~SDPTiming(SDPTiming *this)
{
  *(void *)this = &unk_1F20E67F0;
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)this + 4);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20E67F0;
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)this + 4);
  JUMPOUT(0x1C878E320);
}

void SDPTimeZone::~SDPTimeZone(SDPTimeZone *this)
{
  *(void *)this = &unk_1F20E6838;
  std::__list_imp<unsigned long long>::clear((void *)this + 2);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20E6838;
  std::__list_imp<unsigned long long>::clear((void *)this + 2);
  JUMPOUT(0x1C878E320);
}

std::string *SipTransactionState::SipTransactionState(std::string *a1, std::string::size_type *a2)
{
  uint64_t v4 = *(void *)(*a2 + 320);
  uint64_t v5 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v4 + 16));
  SipState::SipState((SipState *)a1, *(const SipUserAgent **)(*(void *)(v4 + 8) + 144));
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  a1[8].__r_.__value_.__r.__words[0] = 0;
  a1[8].__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E6880;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20E6900;
  a1[8].__r_.__value_.__r.__words[2] = 0;
  a1[9].__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v6 = *a2;
  std::string::size_type v7 = a2[1];
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
    int data = (std::__shared_weak_count *)a1[9].__r_.__value_.__l.__data_;
    a1[8].__r_.__value_.__r.__words[2] = v6;
    a1[9].__r_.__value_.__r.__words[0] = v7;
    if (data) {
      std::__shared_weak_count::__release_weak(data);
    }
  }
  else
  {
    a1[9].__r_.__value_.__r.__words[0] = 0;
    a1[8].__r_.__value_.__r.__words[2] = v6;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "sip.txn");
  uint64_t v9 = *(void *)(*a2 + 320);
  char v10 = *(std::__shared_weak_count **)(v9 + 16);
  if (v10)
  {
    char v11 = std::__shared_weak_count::lock(v10);
    if (v11) {
      uint64_t v12 = *(void *)(v9 + 8);
    }
    else {
      uint64_t v12 = 0;
    }
  }
  else
  {
    uint64_t v12 = 0;
    char v11 = 0;
  }
  if (*(char *)(v12 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v12 + 4160), *(void *)(v12 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v12 + 4160);
  }
  std::string::operator=(a1 + 3, &__str);
  std::string::operator=(a1 + 4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C56449FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*v22) {
    std::__shared_weak_count::__release_weak(*v22);
  }
  uint64_t v24 = (std::__shared_weak_count *)*((void *)v20 + 25);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  SipState::~SipState(v20);
  _Unwind_Resume(a1);
}

uint64_t SipTransactionState::stateMachine(SipTransactionState *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  if (*((void *)this + 26)
    && (uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 27)) != 0
    && (std::string::size_type v6 = std::__shared_weak_count::lock(v5)) != 0)
  {
    uint64_t v7 = *((void *)this + 26);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  if (*((void *)this + 26)
    && (uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 27)) != 0
    && (std::string::size_type v6 = std::__shared_weak_count::lock(v5)) != 0)
  {
    uint64_t v7 = *((void *)this + 26);
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

uint64_t SipTerminatedTransactionState::handleResponse(SipTerminatedTransactionState *this, const SipResponse *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *((void *)this + 26);
      if (v6)
      {
        uint64_t v8 = *(void *)(v6 + 176);
        uint64_t v7 = v6 + 176;
        uint64_t v9 = (*(uint64_t (**)(uint64_t))(v8 + 64))(v7);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"ignoring ", 9);
        *(unsigned char *)(v9 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v9 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" response", 9);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v9 + 17) = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return 0;
}

void sub_1C5644C80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipTransactionState::~SipTransactionState(SipTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipTerminatedTransactionState::~SipTerminatedTransactionState(SipTerminatedTransactionState *this)
{
  SipTransactionState::~SipTransactionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipTerminatedTransactionState::id(SipTerminatedTransactionState *this)
{
  return 7;
}

void non-virtual thunk to'SipTerminatedTransactionState::~SipTerminatedTransactionState(SipTerminatedTransactionState *this)
{
}

{
  uint64_t vars8;

  SipTransactionState::~SipTransactionState((SipTerminatedTransactionState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void *IMSNetworkPolicySession::IMSNetworkPolicySession(void *a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "ipsec");
  ImsLogContainer::ImsLogContainer((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_1F20E6A40;
  a1[13] = 0;
  a1[14] = a2;
  return a1;
}

void sub_1C5644E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSNetworkPolicySession::~IMSNetworkPolicySession(void **this)
{
  *this = &unk_1F20E6A40;
  IMSNetworkPolicySession::deinitialize((IMSNetworkPolicySession *)this);
  *this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  IMSNetworkPolicySession::~IMSNetworkPolicySession(this);
  JUMPOUT(0x1C878E320);
}

void IMSNetworkPolicySession::deinitialize(IMSNetworkPolicySession *this)
{
  if (*((void *)this + 13))
  {
    uint64_t v2 = (*(uint64_t (**)(IMSNetworkPolicySession *))(*(void *)this + 64))(this);
    (*(void (**)(IMSNetworkPolicySession *, uint64_t))(*(void *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"deinitializing network policy session", 37);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    PolicyDeleteAll(*((void *)this + 13));
    CFRelease(*((CFTypeRef *)this + 13));
    *((void *)this + 13) = 0;
  }
}

void IMSNetworkPolicySession::initialize(IMSNetworkPolicySession *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *((void *)this + 13);
  uint64_t v5 = (*(uint64_t (**)(IMSNetworkPolicySession *))(*(void *)this + 64))(this);
  (*(void (**)(IMSNetworkPolicySession *, uint64_t))(*(void *)this + 16))(this, v5);
  uint64_t v6 = *(void **)(v5 + 8);
  if (v4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"policy session already initialized", 34);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
LABEL_3:
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0;
    return;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"initializing network policy session", 35);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t Session = PolicyCreateSession(0, 0x1F20EB140, _callback, this);
  *((void *)this + 13) = Session;
  if (Session)
  {
    if (PolicySetSessionPriority(Session, @"High")) {
      goto LABEL_3;
    }
    IMSNetworkPolicySession::deinitialize(this);
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v12 = &unk_1F20B2680;
    char v13 = &_bambiDomain;
    int v14 = 0x40000000;
    uint64_t v8 = (ImsResult *)ImsResult::operator<<<char [34]>((uint64_t)&v12, "NEPolicySetSessionPriority failed");
    uint64_t v9 = ImsLogContainer::logResult(this, v8);
    ImsResult::ImsResult((ImsResult *)a2, (const std::string *)v9);
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v12 = &unk_1F20B2680;
    char v13 = &_bambiDomain;
    int v14 = 0x40000000;
    char v10 = (ImsResult *)ImsResult::operator<<<char [29]>((uint64_t)&v12, "NEPolicyCreateSession failed");
    char v11 = ImsLogContainer::logResult(this, v10);
    ImsResult::ImsResult((ImsResult *)a2, (const std::string *)v11);
  }
  ImsResult::~ImsResult((ImsResult *)&v12);
}

void sub_1C5645278(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void _callback()
{
  std::string::basic_string[abi:ne180100]<0>(v3, "ipsec");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v0 = ims::debug((uint64_t)v3, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v0 + 8), (uint64_t)"NEPolicyCallback called with itemID ", 36);
  *(unsigned char *)(v0 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v0 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v0 + 8), (uint64_t)", notificationType ", 19);
  *(unsigned char *)(v0 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v0 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v0 + 64))(v0, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v0 + 17) = 0;
  if (v2 < 0) {
    operator delete(__p[0]);
  }
  if (v4 < 0) {
    operator delete(v3[0]);
  }
}

void sub_1C56453A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSNetworkPolicySession::addPolicy(ImsLogContainer *a1@<X0>, char *a2@<X4>, ImsResult *a3@<X8>)
{
  if (*((void *)a1 + 13))
  {
    v9[0] = &unk_1F20B3050;
    v9[1] = 0;
    v8[0] = &unk_1F20B35C8;
    v8[1] = 0;
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v8, @"ConditionType", @"BoundInterface");
    ims::CFString::CFString(&__p, a2, 0x8000100u);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v8, @"InterfaceName", value);
    ims::CFType::~CFType((ims::CFType *)&__p);
    ims::CFMutableArray::appendValue((ims::CFMutableArray *)v9, (const ims::CFType *)v8);
    (*(void (**)(void *, void, void))(v8[0] + 48))(v8, 0, 0);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v8, @"ConditionType", @"LocalAddressSubnet");
    IpAddress::asString(&__p);
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  std::string __p = &unk_1F20B2680;
  value = &_bambiDomain;
  int v12 = 1073741826;
  uint64_t v6 = (ImsResult *)ImsResult::operator<<<char [33]>((uint64_t)&__p, "policy session isn't initialized");
  uint64_t v7 = ImsLogContainer::logResult(a1, v6);
  ImsResult::ImsResult(a3, (const std::string *)v7);
  ImsResult::~ImsResult((ImsResult *)&__p);
}

void sub_1C5645D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)&a15);
  ims::CFType::~CFType((ims::CFType *)&a17);
  ims::CFType::~CFType((ims::CFType *)&a19);
  _Unwind_Resume(a1);
}

void IMSNetworkPolicySession::applyPolicies(IMSNetworkPolicySession *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *((void *)this + 13);
  if (v4)
  {
    int v5 = PolicyApply(v4);
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = (v5 == 0) << 30;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0;
  }
  else
  {
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    v8[0] = &unk_1F20B2680;
    v8[1] = &_bambiDomain;
    int v9 = 1073741826;
    uint64_t v6 = (ImsResult *)ImsResult::operator<<<char [26]>((uint64_t)v8, "applyPolicies: no session");
    uint64_t v7 = ImsLogContainer::logResult(this, v6);
    ImsResult::ImsResult((ImsResult *)a2, (const std::string *)v7);
    ImsResult::~ImsResult((ImsResult *)v8);
  }
}

void sub_1C5645F9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void IMSNetworkPolicySession::deletePolicy(IMSNetworkPolicySession *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    if (*((void *)this + 13))
    {
      if (PolicyDelete())
      {
        uint64_t v5 = (*(uint64_t (**)(IMSNetworkPolicySession *))(*(void *)this + 64))(this);
        (*(void (**)(IMSNetworkPolicySession *, uint64_t))(*(void *)this + 16))(this, v5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"removed NEPolicy ", 17);
        *(unsigned char *)(v5 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v5 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v5 + 17) = 0;
        *(_OWORD *)(a3 + 24) = 0u;
        *(_OWORD *)(a3 + 40) = 0u;
        *(_OWORD *)(a3 + 56) = 0u;
        *(void *)a3 = &unk_1F20B2680;
        *(void *)(a3 + 8) = &_bambiDomain;
        *(_DWORD *)(a3 + 16) = 0;
        return;
      }
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v12 = &unk_1F20B2680;
      long long v13 = &_bambiDomain;
      int v14 = 0x40000000;
      long long v10 = (ImsResult *)ImsResult::operator<<<char [22]>((uint64_t)&v12, "NEPolicyDelete failed");
      long long v11 = ImsLogContainer::logResult(this, v10);
      ImsResult::ImsResult((ImsResult *)a3, (const std::string *)v11);
    }
    else
    {
      long long v15 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v12 = &unk_1F20B2680;
      long long v13 = &_bambiDomain;
      int v14 = 1073741826;
      uint64_t v8 = (ImsResult *)ImsResult::operator<<<char [33]>((uint64_t)&v12, "policy session isn't initialized");
      int v9 = ImsLogContainer::logResult(this, v8);
      ImsResult::ImsResult((ImsResult *)a3, (const std::string *)v9);
    }
  }
  else
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v12 = &unk_1F20B2680;
    long long v13 = &_bambiDomain;
    int v14 = 1073741825;
    uint64_t v6 = (ImsResult *)ImsResult::operator<<<char [18]>((uint64_t)&v12, "invalid policy ID");
    uint64_t v7 = ImsLogContainer::logResult(this, v6);
    ImsResult::ImsResult((ImsResult *)a3, (const std::string *)v7);
  }
  ImsResult::~ImsResult((ImsResult *)&v12);
}

void sub_1C5646244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void *IMSNetworkPolicySession::logPrefix(IMSNetworkPolicySession *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"NetworkPolicySession: ", 22);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void RTPActiveSessionSet::setActive(uint64_t a1, uint64_t *a2, int a3)
{
  int v12 = a3;
  uint64_t v5 = a1 + 8;
  uint64_t v6 = *(void *)(a1 + 8);
  if (!v6) {
    goto LABEL_11;
  }
  uint64_t v7 = a1 + 8;
  do
  {
    int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 < a3;
    if (v8 >= a3) {
      long long v10 = (uint64_t *)v6;
    }
    else {
      long long v10 = (uint64_t *)(v6 + 8);
    }
    if (!v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 == v5 || *(_DWORD *)(v7 + 32) > a3) {
LABEL_11:
  }
    uint64_t v7 = a1 + 8;
  if (a2)
  {
    if (v7 != v5)
    {
      long long v11 = *(uint64_t **)(v7 + 40);
      long long v13 = &v12;
      std::__tree<std::__value_type<SDPMedia::MediaType,unsigned long long>,std::__map_value_compare<SDPMedia::MediaType,std::__value_type<SDPMedia::MediaType,unsigned long long>,std::less<SDPMedia::MediaType>,true>,std::allocator<std::__value_type<SDPMedia::MediaType,unsigned long long>>>::__emplace_unique_key_args<SDPMedia::MediaType,std::piecewise_construct_t const&,std::tuple<SDPMedia::MediaType const&>,std::tuple<>>((uint64_t **)(a1 + 24), &v12, (uint64_t)&std::piecewise_construct, &v13)[5] = v11;
    }
    long long v13 = &v12;
    std::__tree<std::__value_type<SDPMedia::MediaType,unsigned long long>,std::__map_value_compare<SDPMedia::MediaType,std::__value_type<SDPMedia::MediaType,unsigned long long>,std::less<SDPMedia::MediaType>,true>,std::allocator<std::__value_type<SDPMedia::MediaType,unsigned long long>>>::__emplace_unique_key_args<SDPMedia::MediaType,std::piecewise_construct_t const&,std::tuple<SDPMedia::MediaType const&>,std::tuple<>>((uint64_t **)a1, &v12, (uint64_t)&std::piecewise_construct, &v13)[5] = a2;
  }
  else if (v7 != v5)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v7);
    operator delete((void *)v7);
  }
}

uint64_t *RTPActiveSessionSet::active(uint64_t *this, void *a2)
{
  this[2] = 0;
  this[1] = 0;
  *this = (uint64_t)(this + 1);
  char v2 = a2 + 1;
  uint64_t v3 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    uint64_t v4 = this;
    do
    {
      this = std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(v4, v3[5], v3[5]);
      uint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != v2);
  }
  return this;
}

void sub_1C564643C(_Unwind_Exception *a1)
{
  std::__tree<unsigned int>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t RTPManager::RTPManager(uint64_t a1, void *a2, dispatch_object_t *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F20C1128;
  *(void *)(a1 + 24) = &unk_1F20E6DA0;
  *(void *)(a1 + 32) = &unk_1F20E6DC0;
  *(void *)(a1 + 40) = &unk_1F20B6210;
  MediaSessionCollection::MediaSessionCollection((MediaSessionCollection *)(a1 + 48));
  *(void *)a1 = &unk_1F20E6AB8;
  *(void *)(a1 + 24) = &unk_1F20E6BB0;
  *(void *)(a1 + 32) = &unk_1F20E6BD0;
  *(void *)(a1 + 40) = &unk_1F20E6C10;
  *(void *)(a1 + 48) = &unk_1F20E6C48;
  *(void *)(a1 + 56) = &unk_1F20E6CB8;
  *(void *)(a1 + 64) = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 72) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  MediaSessionCollection::MediaSessionCollection((MediaSessionCollection *)(a1 + 136));
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = a1 + 152;
  *(void *)(a1 + 136) = &unk_1F20B63C8;
  *(void *)(a1 + 160) = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.collection");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"MediaSessionBaseCollection", 26);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 272) = a1 + 280;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = a1 + 320;
  *(void *)(a1 + 336) = 1;
  *(void *)(a1 + 344) = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 352) = a1 + 360;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 376), "UnknownStackID");
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 400), "");
  *(void *)(a1 + 424) = a1 + 432;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"RTPManager", 10);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  BOOL v9 = (std::__shared_weak_count *)a2[1];
  if (!v9 || (long long v10 = std::__shared_weak_count::lock(v9)) == 0)
  {
    long long v11 = 0;
    goto LABEL_18;
  }
  long long v11 = v10;
  if (!*a2)
  {
LABEL_18:
    long long v12 = 0uLL;
    goto LABEL_19;
  }
  (*(void (**)(void **__return_ptr))(*(void *)*a2 + 104))(v18);
  long long v12 = *(_OWORD *)v18;
LABEL_19:
  v18[0] = 0;
  v18[1] = 0;
  long long v13 = *(std::__shared_weak_count **)(a1 + 304);
  *(_OWORD *)(a1 + 296) = v12;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    if (v18[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v18[1]);
    }
  }
  int RadioVendor = TelephonyRadiosGetRadioVendor();
  if ((RadioVendor - 1) < 2) {
    *(_DWORD *)(a1 + 340) = RadioVendor;
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return a1;
}

void sub_1C5646914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MediaSessionBaseCollection *a10, MediaSessionCollection *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  std::string __p = (void *)(v23 + 448);
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::__tree<std::string>::destroy(v23 + 424, *(char **)(v23 + 432));
  if (*(char *)(v23 + 423) < 0) {
    operator delete(*v30);
  }
  if (*(char *)(v23 + 399) < 0) {
    operator delete(*v29);
  }
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*(void **)(v23 + 360));
  uint64_t v32 = *(NSObject **)(v23 + 344);
  if (v32) {
    dispatch_release(v32);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(v23 + 320));
  uint64_t v33 = *(std::__shared_weak_count **)(v23 + 304);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  std::__tree<unsigned int>::destroy(v28, *(void **)(v23 + 280));
  std::__tree<unsigned int>::destroy(v27, *(void **)(v23 + 256));
  std::__tree<unsigned int>::destroy(v26, *(void **)(v23 + 232));
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(*(void **)(v23 + 208));
  uint64_t v34 = *(std::__shared_weak_count **)(v23 + 192);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v23 + 176);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  MediaSessionBaseCollection::~MediaSessionBaseCollection(a10);
  RTPActiveSessionSet::~RTPActiveSessionSet(v25);
  uint64_t v36 = *(std::__shared_weak_count **)(v23 + 72);
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  MediaSessionCollection::~MediaSessionCollection(a11);
  int v37 = *(std::__shared_weak_count **)(v23 + 16);
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  _Unwind_Resume(a1);
}

void RTPActiveSessionSet::~RTPActiveSessionSet(RTPActiveSessionSet *this)
{
}

void RTPManager::~RTPManager(RTPManager *this)
{
  *(void *)this = &unk_1F20E6AB8;
  *((void *)this + 3) = &unk_1F20E6BB0;
  *((void *)this + 4) = &unk_1F20E6BD0;
  *((void *)this + 5) = &unk_1F20E6C10;
  char v2 = (RTPManager *)((char *)this + 48);
  *((void *)this + 6) = &unk_1F20E6C48;
  *((void *)this + 7) = &unk_1F20E6CB8;
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"~RTPManager", 11);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100]((uint64_t *)this + 56);
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(*((void **)this + 26));
  *((void *)this + 25) = (char *)this + 208;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  uint64_t v4 = (char *)*((void *)this + 44);
  uint64_t v5 = (char *)this + 360;
  if (v4 != (char *)this + 360)
  {
    do
    {
      uint64_t v6 = (void **)*((void *)v4 + 5);
      if (v6)
      {
        ImsPowerAssertion::~ImsPowerAssertion(v6);
        MEMORY[0x1C878E320]();
      }
      uint64_t v7 = (char *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != v5);
  }
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((void **)this + 45));
  *((void *)this + 45) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 44) = v5;
  v18[0] = (char *)this + 448;
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v18);
  std::__tree<std::string>::destroy((uint64_t)this + 424, *((char **)this + 54));
  if (*((char *)this + 423) < 0) {
    operator delete(*((void **)this + 50));
  }
  if (*((char *)this + 399) < 0) {
    operator delete(*((void **)this + 47));
  }
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((void **)this + 45));
  long long v10 = *((void *)this + 43);
  if (v10) {
    dispatch_release(v10);
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 40));
  long long v11 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__tree<unsigned int>::destroy((uint64_t)this + 272, *((void **)this + 35));
  std::__tree<unsigned int>::destroy((uint64_t)this + 248, *((void **)this + 32));
  std::__tree<unsigned int>::destroy((uint64_t)this + 224, *((void **)this + 29));
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(*((void **)this + 26));
  long long v12 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  long long v13 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  MediaSessionBaseCollection::~MediaSessionBaseCollection((RTPManager *)((char *)this + 136));
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((void **)this + 14));
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((void **)this + 11));
  int v14 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  MediaSessionCollection::~MediaSessionCollection(v2);
  long long v15 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
}

{
  uint64_t vars8;

  RTPManager::~RTPManager(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'RTPManager::~RTPManager(RTPManager *this)
{
}

{
  RTPManager::~RTPManager((RTPManager *)((char *)this - 48));
}

{
  RTPManager::~RTPManager((RTPManager *)((char *)this - 56));
}

{
  uint64_t vars8;

  RTPManager::~RTPManager((RTPManager *)((char *)this - 40));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  RTPManager::~RTPManager((RTPManager *)((char *)this - 48));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  RTPManager::~RTPManager((RTPManager *)((char *)this - 56));
  JUMPOUT(0x1C878E320);
}

uint64_t RTPManager::initialize(uint64_t a1, std::string *a2, int a3, int a4, uint64_t a5)
{
  std::string::basic_string[abi:ne180100]<0>(v75, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v10 = ims::debug((uint64_t)v75, (uint64_t)&__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v11 = v10;
  long long v12 = *(void **)(v10 + 8);
  size_t v13 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v13);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"initialize", 10);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v74 < 0) {
    operator delete(__p);
  }
  if (v76 < 0) {
    operator delete(v75[0]);
  }
  RTPManager::setRTPStackType(a1, a2, a3);
  RTPSharedPointerBase::getShared<MediaSessionCollectionIterator>(a1, v75);
  long long v14 = *(_OWORD *)v75;
  v75[0] = 0;
  v75[1] = 0;
  long long v15 = *(std::__shared_weak_count **)(a1 + 176);
  *(_OWORD *)(a1 + 168) = v14;
  if (v15)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    if (v75[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75[1]);
    }
  }
  if (a4) {
    std::string::operator=((std::string *)(a1 + 376), a2);
  }
  char v17 = (uint64_t *)(a1 + 208);
  uint64_t v16 = *(void *)(a1 + 208);
  uint64_t v18 = (uint64_t **)(a1 + 200);
  if (v16)
  {
    uint64_t v19 = a1 + 208;
    do
    {
      int v20 = *(_DWORD *)(v16 + 32);
      BOOL v21 = v20 < 2;
      if (v20 >= 2) {
        uint64_t v22 = (uint64_t *)v16;
      }
      else {
        uint64_t v22 = (uint64_t *)(v16 + 8);
      }
      if (!v21) {
        uint64_t v19 = v16;
      }
      uint64_t v16 = *v22;
    }
    while (*v22);
    if ((uint64_t *)v19 != v17 && *(int *)(v19 + 32) < 3) {
      goto LABEL_63;
    }
  }
  if (*(_DWORD *)(a1 + 340) == 2 && TelephonyRadiosGetRadioVendor() == 2)
  {
    std::string::basic_string[abi:ne180100]<0>(v75, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v23 = ims::debug((uint64_t)v75, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"Create IBI RTP Stack", 20);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v23 + 17) = 0;
    if (v74 < 0) {
      operator delete(__p);
    }
    if (v76 < 0) {
      operator delete(v75[0]);
    }
    RTPSharedPointerBase::getShared<RTPStackControllerDelegate>((void **)&v70, a1);
    RTPSharedPointerBase::getShared<RTPManager>(&v68, a1);
    std::string::size_type v25 = v70;
    uint64_t v24 = v71;
    uint64_t v26 = (std::__shared_weak_count *)operator new(0xB0uLL);
    uint64_t v27 = v26;
    v26->__shared_owners_ = 0;
    v26->__shared_weak_owners_ = 0;
    v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6E00;
    uint64_t v28 = (uint64_t *)&v26[1];
    v75[0] = v25;
    v75[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = v69;
    std::string __p = v68;
    uint64_t v73 = v69;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    IBIRTPStackController::IBIRTPStackController((uint64_t)&v26[1], (uint64_t *)v75, 2, (uint64_t *)&__p);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (v24) {
      std::__shared_weak_count::__release_weak(v24);
    }
    shared_weak_owners = (std::__shared_weak_count *)v27[1].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1) {
        goto LABEL_58;
      }
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v27[1].__shared_owners_ = (uint64_t)v28;
      v27[1].__shared_weak_owners_ = (uint64_t)v27;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    else
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v27[1].__shared_owners_ = (uint64_t)v28;
      v27[1].__shared_weak_owners_ = (uint64_t)v27;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
LABEL_58:
    LODWORD(v75[0]) = 2;
    int v42 = std::__tree<std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>,std::__map_value_compare<RTPStackType,std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>,std::less<RTPStackType>,true>,std::allocator<std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>>>::__emplace_unique_key_args<RTPStackType,std::piecewise_construct_t const&,std::tuple<RTPStackType&&>,std::tuple<>>((uint64_t **)(a1 + 200), 2, v75);
    BOOL v43 = (std::__shared_weak_count *)v42[6];
    v42[5] = v28;
    v42[6] = (uint64_t *)v27;
    if (v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
    if (v24)
    {
      uint64_t v41 = v24;
      goto LABEL_62;
    }
    goto LABEL_63;
  }
  if (TelephonyRadiosGetRadioVendor() != 1) {
    goto LABEL_63;
  }
  std::string::basic_string[abi:ne180100]<0>(v75, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v31 = ims::debug((uint64_t)v75, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"Create QMI RTP Stack", 20);
  *(unsigned char *)(v31 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v31 + 17) = 0;
  if (v74 < 0) {
    operator delete(__p);
  }
  if (v76 < 0) {
    operator delete(v75[0]);
  }
  RTPSharedPointerBase::getShared<RTPStackControllerDelegate>((void **)&v70, a1);
  RTPSharedPointerBase::getShared<RTPManager>(&v68, a1);
  uint64_t v33 = v70;
  uint64_t v32 = v71;
  uint64_t v34 = (std::__shared_weak_count *)operator new(0x190uLL);
  uint64_t v35 = v34;
  v34->__shared_owners_ = 0;
  v34->__shared_weak_owners_ = 0;
  v34->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6E50;
  uint64_t v36 = (uint64_t *)&v34[1];
  v75[0] = v33;
  v75[1] = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int v37 = v69;
  std::string __p = v68;
  uint64_t v73 = v69;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  QMIRTPStackController::QMIRTPStackController((uint64_t)&v34[1], (uint64_t *)v75, 2, a5, &__p, (long long *)a2);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  uint64_t v38 = (std::__shared_weak_count *)v35[1].__shared_weak_owners_;
  if (v38)
  {
    if (v38->__shared_owners_ != -1) {
      goto LABEL_52;
    }
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v35[1].__shared_owners_ = (uint64_t)v36;
    v35[1].__shared_weak_owners_ = (uint64_t)v35;
    std::__shared_weak_count::__release_weak(v38);
  }
  else
  {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v35[1].__shared_owners_ = (uint64_t)v36;
    v35[1].__shared_weak_owners_ = (uint64_t)v35;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v35);
LABEL_52:
  LODWORD(v75[0]) = 2;
  uint64_t v39 = std::__tree<std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>,std::__map_value_compare<RTPStackType,std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>,std::less<RTPStackType>,true>,std::allocator<std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>>>::__emplace_unique_key_args<RTPStackType,std::piecewise_construct_t const&,std::tuple<RTPStackType&&>,std::tuple<>>((uint64_t **)(a1 + 200), 2, v75);
  std::string::size_type v40 = (std::__shared_weak_count *)v39[6];
  v39[5] = v36;
  v39[6] = (uint64_t *)v35;
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (v32)
  {
    uint64_t v41 = v32;
LABEL_62:
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
LABEL_63:
  uint64_t v44 = *v17;
  if (!*v17) {
    goto LABEL_73;
  }
  uint64_t v45 = a1 + 208;
  do
  {
    int v46 = *(_DWORD *)(v44 + 32);
    BOOL v47 = v46 < 1;
    if (v46 >= 1) {
      uint64_t v48 = (uint64_t *)v44;
    }
    else {
      uint64_t v48 = (uint64_t *)(v44 + 8);
    }
    if (!v47) {
      uint64_t v45 = v44;
    }
    uint64_t v44 = *v48;
  }
  while (*v48);
  if ((uint64_t *)v45 == v17 || *(int *)(v45 + 32) >= 2)
  {
LABEL_73:
    std::string::basic_string[abi:ne180100]<0>(v75, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v49 = ims::debug((uint64_t)v75, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v49 + 8), (uint64_t)"Create AVC RTP Stack", 20);
    *(unsigned char *)(v49 + 17) = 0;
    uint64_t v50 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v49 + 17) = 0;
    if (v74 < 0) {
      operator delete(__p);
    }
    if (v76 < 0) {
      operator delete(v75[0]);
    }
    int v70 = 0;
    long long v71 = 0;
    IMSClientManager::instance(v50);
    IPTelephonyManager::getInstance((uint64_t *)v75);
    (*(void (**)(SipStack **__return_ptr))(**((void **)v75[0] + 21) + 192))(&v70);
    if (v75[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75[1]);
    }
    RTPSharedPointerBase::getShared<RTPStackControllerDelegate>(&v68, a1);
    RTPSharedPointerBase::getShared<RTPManager>(&v66, a1);
    if (v70)
    {
      uint64_t v51 = (ImsPrefs *)SipStack::prefs(v70);
      EnableAPOnlyModeKey = (void **)ImsPrefs::getEnableAPOnlyModeKey(v51);
      char v53 = ImsPrefs::BOOLValue(v51, EnableAPOnlyModeKey);
    }
    else
    {
      char v53 = 0;
    }
    uint64_t v55 = v68;
    uint64_t v54 = v69;
    uint64_t v56 = operator new(0xC0uLL);
    uint64_t v57 = v56;
    v56[1] = 0;
    v56[2] = 0;
    void *v56 = &unk_1F20E6EA0;
    long long v58 = v56 + 3;
    if (v54)
    {
      atomic_fetch_add_explicit(&v54->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v59 = v66;
      uint64_t v60 = v67;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      atomic_fetch_add_explicit(&v54->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (!v60) {
        goto LABEL_85;
      }
    }
    else
    {
      uint64_t v59 = v66;
      uint64_t v60 = v67;
      uint64_t v66 = 0;
      uint64_t v67 = 0;
      if (!v60)
      {
LABEL_85:
        v56[4] = 0;
        v56[5] = 0;
        v56[3] = &unk_1F20BC6F8;
        v56[6] = v55;
        v56[7] = v54;
        if (v54) {
          atomic_fetch_add_explicit(&v54->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        *((_DWORD *)v56 + 16) = 1;
        v56[9] = v59;
        v56[10] = v60;
        if (v60)
        {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
          *((_DWORD *)v56 + 22) = 0;
          std::__shared_weak_count::__release_shared[abi:ne180100](v60);
          if (!v54) {
            goto LABEL_90;
          }
        }
        else
        {
          *((_DWORD *)v56 + 22) = 0;
          if (!v54)
          {
LABEL_90:
            v57[16] = 0;
            v57[13] = 0;
            v57[3] = &unk_1F20D7920;
            v57[12] = v57 + 13;
            v57[17] = 0;
            v57[14] = 0;
            v57[15] = v57 + 16;
            *((_OWORD *)v57 + 9) = 0u;
            *((_OWORD *)v57 + 10) = 0u;
            *(_OWORD *)((char *)v57 + 169) = 0u;
            *((unsigned char *)v57 + 185) = v53;
            std::string::basic_string[abi:ne180100]<0>(v75, "avc.rtp.controller");
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            uint64_t v61 = ims::debug((uint64_t)v75, (uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)"AVCRTPStackController", 21);
            *(unsigned char *)(v61 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v61 + 17) = 0;
            if (v74 < 0) {
              operator delete(__p);
            }
            if (v76 < 0) {
              operator delete(v75[0]);
            }
            if (v60) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v60);
            }
            if (v54) {
              std::__shared_weak_count::__release_weak(v54);
            }
            long long v62 = (std::__shared_weak_count *)v57[5];
            if (v62)
            {
              if (v62->__shared_owners_ != -1)
              {
LABEL_107:
                LODWORD(v75[0]) = 1;
                long long v63 = std::__tree<std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>,std::__map_value_compare<RTPStackType,std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>,std::less<RTPStackType>,true>,std::allocator<std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>>>::__emplace_unique_key_args<RTPStackType,std::piecewise_construct_t const&,std::tuple<RTPStackType&&>,std::tuple<>>(v18, 1, v75);
                uint64_t v64 = (std::__shared_weak_count *)v63[6];
                v63[5] = v58;
                v63[6] = v57;
                if (v64) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v64);
                }
                if (v54) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v54);
                }
                if (v71) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v71);
                }
                return 1;
              }
              atomic_fetch_add_explicit(v57 + 1, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(v57 + 2, 1uLL, memory_order_relaxed);
              v57[4] = v58;
              v57[5] = v57;
              std::__shared_weak_count::__release_weak(v62);
            }
            else
            {
              atomic_fetch_add_explicit(v57 + 1, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(v57 + 2, 1uLL, memory_order_relaxed);
              v57[4] = v58;
              v57[5] = v57;
            }
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v57);
            goto LABEL_107;
          }
        }
        std::__shared_weak_count::__release_weak(v54);
        goto LABEL_90;
      }
    }
    atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_85;
  }
  return 1;
}

void sub_1C5647908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(a1);
}

void RTPManager::setRTPStackType(uint64_t a1, std::string *a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v33, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v33, (uint64_t)__p);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"setRTPStackType", 15);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 32))(v6, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" stackType=", 11);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" isDeinit=", 10);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  uint64_t v8 = (uint64_t **)(a1 + 312);
  BOOL v9 = *(void **)(a1 + 320);
  if (!v9) {
    goto LABEL_26;
  }
  uint64_t v10 = a1 + 320;
  do
  {
    char v11 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9 + 4, (void **)&a2->__r_.__value_.__l.__data_);
    if (v11 >= 0) {
      long long v12 = v9;
    }
    else {
      long long v12 = v9 + 1;
    }
    if (v11 >= 0) {
      uint64_t v10 = (uint64_t)v9;
    }
    BOOL v9 = (void *)*v12;
  }
  while (*v12);
  if (v10 == a1 + 320
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)(v10 + 32)) & 0x80) != 0
    || (v33[0] = (long long *)a2,
        !*((_DWORD *)std::__tree<std::__value_type<std::string,RTPStackType>,std::__map_value_compare<std::string,std::__value_type<std::string,RTPStackType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,RTPStackType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 312), (void **)&a2->__r_.__value_.__l.__data_, v33)+ 14)))
  {
LABEL_26:
    std::string::basic_string[abi:ne180100]<0>(v33, "rtp");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v16 = ims::debug((uint64_t)v33, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Initializing active stack type for ", 35);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v16 + 32))(v16, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" to ", 4);
    *(unsigned char *)(v16 + 17) = 0;
    char v17 = "Undefined RTP stack";
    if (a3 == 2) {
      char v17 = "kRTPStackTypeBaseband";
    }
    if (a3 == 1) {
      uint64_t v18 = "kRTPStackTypeAVC";
    }
    else {
      uint64_t v18 = (char *)v17;
    }
    std::string::basic_string[abi:ne180100]<0>(&v29, v18);
    LoggableString::LoggableString(&v30, &v29);
    (*(void (**)(uint64_t, std::string *))(*(void *)v16 + 40))(v16, &v30);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    v33[0] = (long long *)a2;
    *((_DWORD *)std::__tree<std::__value_type<std::string,RTPStackType>,std::__map_value_compare<std::string,std::__value_type<std::string,RTPStackType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,RTPStackType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (void **)&a2->__r_.__value_.__l.__data_, v33)+ 14) = a3;
  }
  else
  {
    v33[0] = (long long *)a2;
    if (*((_DWORD *)std::__tree<std::__value_type<std::string,RTPStackType>,std::__map_value_compare<std::string,std::__value_type<std::string,RTPStackType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,RTPStackType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 312), (void **)&a2->__r_.__value_.__l.__data_, v33)+ 14) == a3)
    {
      std::string::basic_string[abi:ne180100]<0>(v33, "rtp");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v13 = ims::debug((uint64_t)v33, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Not changing active stack type for ", 35);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 32))(v13, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)", leaving it as: ", 17);
      *(unsigned char *)(v13 + 17) = 0;
      long long v14 = "Undefined RTP stack";
      if (a3 == 2) {
        long long v14 = "kRTPStackTypeBaseband";
      }
      if (a3 == 1) {
        long long v15 = "kRTPStackTypeAVC";
      }
      else {
        long long v15 = (char *)v14;
      }
      std::string::basic_string[abi:ne180100]<0>(&v29, v15);
      LoggableString::LoggableString(&v30, &v29);
      (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 40))(v13, &v30);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      goto LABEL_68;
    }
    std::string::basic_string[abi:ne180100]<0>(v33, "rtp");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v19 = ims::debug((uint64_t)v33, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Changing active stack type for ", 31);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v19 + 32))(v19, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)", old: ", 7);
    *(unsigned char *)(v19 + 17) = 0;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    int v20 = *((_DWORD *)std::__tree<std::__value_type<std::string,RTPStackType>,std::__map_value_compare<std::string,std::__value_type<std::string,RTPStackType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,RTPStackType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 312), (void **)&a2->__r_.__value_.__l.__data_, (long long **)&v28)+ 14);
    if (v20 == 2) {
      BOOL v21 = "kRTPStackTypeBaseband";
    }
    else {
      BOOL v21 = "Undefined RTP stack";
    }
    if (v20 == 1) {
      uint64_t v22 = "kRTPStackTypeAVC";
    }
    else {
      uint64_t v22 = (char *)v21;
    }
    std::string::basic_string[abi:ne180100]<0>(&v29, v22);
    LoggableString::LoggableString(&v30, &v29);
    (*(void (**)(uint64_t, std::string *))(*(void *)v19 + 40))(v19, &v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" new: ", 6);
    *(unsigned char *)(v19 + 17) = 0;
    if (a3 == 2) {
      uint64_t v23 = "kRTPStackTypeBaseband";
    }
    else {
      uint64_t v23 = "Undefined RTP stack";
    }
    if (a3 == 1) {
      uint64_t v24 = "kRTPStackTypeAVC";
    }
    else {
      uint64_t v24 = (char *)v23;
    }
    std::string::basic_string[abi:ne180100]<0>(&v27, v24);
    LoggableString::LoggableString(&v28, &v27);
    (*(void (**)(uint64_t, std::string *))(*(void *)v19 + 40))(v19, &v28);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v29.__r_.__value_.__l.__data_);
    }
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    v33[0] = (long long *)a2;
    *((_DWORD *)std::__tree<std::__value_type<std::string,RTPStackType>,std::__map_value_compare<std::string,std::__value_type<std::string,RTPStackType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,RTPStackType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 312), (void **)&a2->__r_.__value_.__l.__data_, v33)+ 14) = a3;
    if (*(char *)(a1 + 423) < 0)
    {
      if (*(void *)(a1 + 408)) {
        goto LABEL_67;
      }
    }
    else if (*(unsigned char *)(a1 + 423))
    {
LABEL_67:
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 424), (void **)&a2->__r_.__value_.__l.__data_, (uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(v33, "rtp");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v25 = ims::debug((uint64_t)v33, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"A handover is already in progress on ", 37);
      *(unsigned char *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 32))(v25, a1 + 400);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)".  Deferring until current handover completes.", 46);
      *(unsigned char *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v25 + 17) = 0;
LABEL_68:
      if (v32 < 0) {
        operator delete(__p[0]);
      }
      if (v34 < 0) {
        operator delete(v33[0]);
      }
      return;
    }
    std::string::operator=((std::string *)(a1 + 400), a2);
    if (*(void *)(a1 + 184))
    {
      std::string::basic_string[abi:ne180100]<0>(v33, "rtp");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v26 = ims::debug((uint64_t)v33, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"SRVCC handover is already in progress. Deferring until SRVCC handover completes.", 80);
      *(unsigned char *)(v26 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v26 + 17) = 0;
      if (v32 < 0) {
        operator delete(__p[0]);
      }
      if (v34 < 0) {
        operator delete(v33[0]);
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 424), (void **)&a2->__r_.__value_.__l.__data_, (uint64_t)a2);
    }
    else
    {
      RTPManager::handoverStack(a1, (uint64_t)a2);
    }
  }
}

void sub_1C5648430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (*(char *)(v38 - 65) < 0) {
    operator delete(*(void **)(v38 - 88));
  }
  _Unwind_Resume(exception_object);
}

void RTPSharedPointerBase::getShared<RTPStackControllerDelegate>(void **p_lpsrc, uint64_t a2)
{
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (void *)(a2 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v6;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RTPManager::initializeApplicationId(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v32 = a4;
  std::string::basic_string[abi:ne180100]<0>(v30, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v30, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void **)(v8 + 8);
  size_t v11 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"initializeApplicationId", 23);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" appId=", 7);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  uint64_t v12 = *(void *)(a1 + 208);
  if (!v12) {
    goto LABEL_16;
  }
  uint64_t v13 = a1 + 208;
  do
  {
    int v14 = *(_DWORD *)(v12 + 32);
    BOOL v15 = v14 < a4;
    if (v14 >= a4) {
      uint64_t v16 = (uint64_t *)v12;
    }
    else {
      uint64_t v16 = (uint64_t *)(v12 + 8);
    }
    if (!v15) {
      uint64_t v13 = v12;
    }
    uint64_t v12 = *v16;
  }
  while (*v16);
  if (v13 != a1 + 208 && *(_DWORD *)(v13 + 32) <= a4)
  {
    *(_DWORD *)(a1 + 336) = a4;
    v30[0] = &v32;
    char v17 = std::__tree<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::__map_value_compare<ims::Services::ServiceType,std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::less<ims::Services::ServiceType>,true>,std::allocator<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>>>::__emplace_unique_key_args<ims::Services::ServiceType,std::piecewise_construct_t const&,std::tuple<ims::Services::ServiceType const&>,std::tuple<>>((uint64_t **)(a1 + 200), &v32, (uint64_t)&std::piecewise_construct, v30);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*v17[5] + 16))(v17[5], a2, a3);
  }
  else
  {
LABEL_16:
    uint64_t v26 = 0;
    std::string v27 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    v18[0] = &unk_1F20B2680;
    v18[1] = &_bambiDomain;
    int v19 = 0x40000000;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void *))(*(void *)a1 + 112))(a1, &v26, a2, a3, v18);
    ImsResult::~ImsResult((ImsResult *)v18);
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
  }
}

void sub_1C56488A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(a1);
}

void RTPManager::deinitializeSessions(uint64_t a1, unsigned __int8 **a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v48, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v48, (uint64_t)&__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"deinitializeSessions", 20);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 **))(*(void *)v5 + 32))(v5, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete(v48);
  }
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v8 = (uint64_t **)(a1 + 80);
  RTPActiveSessionSet::active((uint64_t *)&v48, (void *)(a1 + 80));
  uint64_t v9 = v48;
  if (v48 != &v49)
  {
    char v46 = 0;
    uint64_t v10 = (uint64_t *)(a1 + 88);
    while (1)
    {
      uint64_t v11 = v9[4];
      RTPManager::stackIdForSession((RTPManager *)a1, v11, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v13 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
      int v14 = (char)v13;
      if ((char)v13 < 0) {
        uint64_t v13 = a2[1];
      }
      if ((unsigned __int8 *)size != v13)
      {
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        goto LABEL_40;
      }
      if (v14 >= 0) {
        BOOL v15 = (unsigned __int8 *)a2;
      }
      else {
        BOOL v15 = *a2;
      }
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        uint64_t v20 = (void *)__p.__r_.__value_.__r.__words[0];
        int v21 = memcmp(__p.__r_.__value_.__l.__data_, v15, __p.__r_.__value_.__l.__size_);
        operator delete(v20);
        if (!v21) {
          goto LABEL_30;
        }
      }
      else
      {
        if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
          goto LABEL_30;
        }
        uint64_t v16 = 0;
        do
        {
          int v17 = __p.__r_.__value_.__s.__data_[v16];
          int v18 = v15[v16];
          BOOL v19 = v17 != v18 || HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 == v16++;
        }
        while (!v19);
        if (v17 == v18)
        {
LABEL_30:
          uint64_t v22 = *v8;
          if (*v8 != v10)
          {
            do
            {
              if (v22[5] == v11)
              {
                uint64_t v23 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer((uint64_t **)(a1 + 80), v22);
                operator delete(v22);
              }
              else
              {
                uint64_t v24 = (uint64_t *)v22[1];
                if (v24)
                {
                  do
                  {
                    uint64_t v23 = v24;
                    uint64_t v24 = (uint64_t *)*v24;
                  }
                  while (v24);
                }
                else
                {
                  do
                  {
                    uint64_t v23 = (uint64_t *)v22[2];
                    BOOL v19 = *v23 == (void)v22;
                    uint64_t v22 = v23;
                  }
                  while (!v19);
                }
              }
              uint64_t v22 = v23;
            }
            while (v23 != v10);
          }
          char v46 = 1;
        }
      }
LABEL_40:
      uint64_t v25 = (void *)v9[1];
      if (v25)
      {
        do
        {
          uint64_t v26 = (void **)v25;
          uint64_t v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v26 = (void **)v9[2];
          BOOL v19 = *v26 == v9;
          uint64_t v9 = v26;
        }
        while (!v19);
      }
      uint64_t v9 = v26;
      if (v26 == &v49) {
        goto LABEL_48;
      }
    }
  }
  char v46 = 0;
LABEL_48:
  uint64_t v27 = *(void *)(a1 + 128);
  if (!v27)
  {
    char v28 = v46;
    goto LABEL_73;
  }
  RTPManager::stackIdForSession((RTPManager *)a1, v27, &__p);
  char v28 = v46;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v29 = __p.__r_.__value_.__l.__size_;
  }
  std::string v30 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  int v31 = (char)v30;
  if ((char)v30 < 0) {
    std::string v30 = a2[1];
  }
  if ((unsigned __int8 *)v29 == v30)
  {
    if (v31 >= 0) {
      int v32 = (unsigned __int8 *)a2;
    }
    else {
      int v32 = *a2;
    }
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      int v37 = (void *)__p.__r_.__value_.__r.__words[0];
      int v38 = memcmp(__p.__r_.__value_.__l.__data_, v32, __p.__r_.__value_.__l.__size_);
      operator delete(v37);
      if (v38) {
        goto LABEL_73;
      }
    }
    else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
      uint64_t v33 = 0;
      do
      {
        int v34 = __p.__r_.__value_.__s.__data_[v33];
        int v35 = v32[v33];
      }
      while (v34 == v35 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v33++);
      if (v34 != v35) {
        goto LABEL_73;
      }
    }
    *(void *)(a1 + 128) = 0;
    char v28 = 1;
    goto LABEL_73;
  }
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_73:
  uint64_t v39 = *(void **)(a1 + 200);
  if (v39 != (void *)(a1 + 208))
  {
    do
    {
      uint64_t v40 = v39[5];
      if (v40) {
        (*(void (**)(uint64_t, unsigned __int8 **, uint64_t))(*(void *)v40 + 24))(v40, a2, 1);
      }
      uint64_t v41 = (void *)v39[1];
      if (v41)
      {
        do
        {
          int v42 = v41;
          uint64_t v41 = (void *)*v41;
        }
        while (v41);
      }
      else
      {
        do
        {
          int v42 = (void *)v39[2];
          BOOL v19 = *v42 == (void)v39;
          uint64_t v39 = v42;
        }
        while (!v19);
      }
      uint64_t v39 = v42;
    }
    while (v42 != (void *)(a1 + 208));
  }
  if (v28)
  {
    (*(void (**)(void))(**(void **)(a1 + 168) + 72))(*(void *)(a1 + 168));
    RTPSharedPointerBase::getShared<MediaSessionCollectionIterator>(a1, (void **)&__p.__r_.__value_.__l.__data_);
    long long v43 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v44 = *(std::__shared_weak_count **)(a1 + 176);
    *(_OWORD *)(a1 + 168) = v43;
    if (v44)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
    }
  }
  uint64_t v45 = (RTPTransportManager *)(*(uint64_t (**)(void))(**(void **)(a1 + 168) + 64))(*(void *)(a1 + 168));
  if (v45) {
    RTPTransportManager::clearAll(v45);
  }
  std::__tree<unsigned int>::destroy((uint64_t)&v48, v49);
}

void sub_1C5648E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, void *a18, int a19, __int16 a20,char a21,char a22)
{
}

void RTPManager::stackIdForSession(RTPManager *this@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  RTPManager::sdpSessionForSession(this, a2, &v10);
  uint64_t v4 = v10;
  if (v10)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(v10 + 128);
    if (v5)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v5);
      if (v6) {
        uint64_t v7 = *(void *)(v4 + 120);
      }
      else {
        uint64_t v7 = 0;
      }
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v6 = 0;
    }
    if (*(char *)(v7 + 4183) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v7 + 4160), *(void *)(v7 + 4168));
    }
    else
    {
      uint64_t v8 = (long long *)(v7 + 4160);
      long long v9 = *v8;
      a3->__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v9;
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_1C5648F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RTPManager::createSession(uint64_t a1@<X0>, void **a2@<X1>, RTPTransportManager *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::__shared_weak_count ***a7@<X6>, unsigned int a8@<W7>, uint64_t a9@<X8>, char a10, char a11, uint64_t a12, unsigned int a13, uint64_t a14)
{
  std::string::basic_string[abi:ne180100]<0>(&v104, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v21 = ims::debug((uint64_t)&v104, (uint64_t)&__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v22 = v21;
  uint64_t v23 = *(void **)(v21 + 8);
  size_t v24 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v24);
  *(unsigned char *)(v22 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v22 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"createSession", 13);
  *(unsigned char *)(v22 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v22 + 32))(v22, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" appId=", 7);
  *(unsigned char *)(v22 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v22 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" sessionId=", 11);
  *(unsigned char *)(v22 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v22 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" isRelayCall=", 13);
  *(unsigned char *)(v22 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v22 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v22 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v106) < 0) {
    operator delete(v104);
  }
  uint64_t v25 = (std::__shared_weak_count *)a7[1];
  if (v25)
  {
    uint64_t v26 = std::__shared_weak_count::lock(v25);
    if (v26)
    {
      uint64_t v27 = *a7;
      if (*a7)
      {
        if (a10) {
          std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t *)(a1 + 224), (unint64_t)a3, (uint64_t)a3);
        }
        if (a11) {
          std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t *)(a1 + 272), (unint64_t)a3, (uint64_t)a3);
        }
        uint64_t v106 = 0;
        uint64_t v107 = 0;
        uint64_t v111 = 0;
        uint64_t v112 = 0;
        uint64_t v109 = 0;
        uint64_t v110 = 0;
        uint64_t v104 = &unk_1F20B2680;
        uint64_t v105 = &_bambiDomain;
        uint64_t v108 = 0;
        int v103 = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
        int v28 = *((_DWORD *)std::__tree<std::__value_type<std::string,RTPStackType>,std::__map_value_compare<std::string,std::__value_type<std::string,RTPStackType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,RTPStackType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 312), a2, (long long **)&__p)+ 14);
        int v103 = v28;
        if (v28 == 2)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.mgr");
          std::string::basic_string[abi:ne180100]<0>(&v120, "");
          uint64_t v29 = ims::debug((uint64_t)&__p, (uint64_t)&v120);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"Update appId (if appropriate) to : ", 35);
          *(unsigned char *)(v29 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v29 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v29 + 17) = 0;
          if (v122 < 0) {
            operator delete(v120);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
          std::string v30 = std::__tree<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::__map_value_compare<ims::Services::ServiceType,std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::less<ims::Services::ServiceType>,true>,std::allocator<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>>>::__emplace_unique_key_args<ims::Services::ServiceType,std::piecewise_construct_t const&,std::tuple<ims::Services::ServiceType const&>,std::tuple<>>((uint64_t **)(a1 + 200), &v103, (uint64_t)&std::piecewise_construct, &__p);
          (*(void (**)(uint64_t *, void **, uint64_t))(*v30[5] + 56))(v30[5], a2, a4);
          int v28 = v103;
        }
        RTPSharedPointerBase::getShared<MediaSessionDelegate>(a1, &v101);
        int v31 = v101;
        int v32 = v102;
        if (v102) {
          atomic_fetch_add_explicit(&v102->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v123[0] = v28;
        std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.mgr");
        std::string::basic_string[abi:ne180100]<0>(&v120, "");
        char v74 = v31;
        uint64_t v33 = ims::debug((uint64_t)&__p, (uint64_t)&v120);
        size_t v34 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v34);
        *(unsigned char *)(v33 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v33 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"createSessionOnStack", 20);
        *(unsigned char *)(v33 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)" [sessionId=", 12);
        *(unsigned char *)(v33 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v33 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v33 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v33 + 17) = 0;
        if (v122 < 0) {
          operator delete(v120);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v75 = a5;
        char v76 = std::__shared_weak_count::lock(v26);
        if (!v76)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.mgr");
          std::string::basic_string[abi:ne180100]<0>(&v120, "");
          uint64_t v38 = ims::error((uint64_t)&__p, (uint64_t)&v120);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"SDPSession expired in RTPManager::createSessionOnStack", 54);
          *(unsigned char *)(v38 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v38 + 17) = 0;
          if (v122 < 0) {
            operator delete(v120);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v39 = 0;
          uint64_t v40 = 0;
LABEL_82:
          std::__shared_weak_count::__release_weak(v26);
          if (v32) {
            std::__shared_weak_count::__release_weak(v32);
          }
          if (v102) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v102);
          }
          if (!v40)
          {
            *(_OWORD *)(a9 + 24) = 0u;
            *(_OWORD *)(a9 + 40) = 0u;
            *(_OWORD *)(a9 + 56) = 0u;
            *(void *)a9 = &unk_1F20B2680;
            *(void *)(a9 + 8) = &_bambiDomain;
            *(_DWORD *)(a9 + 16) = 1073741825;
            if (!v39) {
              goto LABEL_146;
            }
            goto LABEL_145;
          }
          LODWORD(v117) = 0;
          uint64_t v116 = 0;
          char v53 = std::__shared_weak_count::lock(v27[16]);
          uint64_t v54 = v27[15];
          uint64_t shared_weak_owners = v54[6].__shared_weak_owners_;
          uint64_t v56 = (std::__shared_weak_count *)v54[7].__vftable;
          if (v56) {
            atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(void **__return_ptr))(*(void *)shared_weak_owners + 200))(&v116);
          if (v56) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v56);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v53);
          uint64_t v57 = v27[16];
          if (v57)
          {
            uint64_t v57 = std::__shared_weak_count::lock(v57);
            long long v58 = v57;
            if (v57) {
              uint64_t v57 = v27[15];
            }
          }
          else
          {
            long long v58 = 0;
          }
          uint64_t v59 = (ImsPrefs *)SipStack::prefs((SipStack *)v57);
          EnableAPOnlyModeKey = (void **)ImsPrefs::getEnableAPOnlyModeKey(v59);
          if (ImsPrefs::BOOLValue(v59, EnableAPOnlyModeKey))
          {
            int v61 = _os_feature_enabled_impl();
            if (v58) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v58);
            }
            if (v61)
            {
              SDPSession::localSdp((SDPSession *)v27, 0, &v95);
              RTPSharedPointerBase::getShared<RTPManager>(&v93, a1);
              long long v62 = 0;
              {
                atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
                long long v62 = v39;
              }
              uint64_t v91 = 0;
              uint64_t v92 = 0;
              long long v63 = v27[16];
              if (v63)
              {
                uint64_t v92 = std::__shared_weak_count::lock(v63);
                if (v92) {
                  uint64_t v91 = v27[15];
                }
              }
              RTPTransportManager::setupTransport((uint64_t)a3, a6, (uint64_t)&v95, a8, (uint64_t)&v93, (uint64_t)&__p, (uint64_t)&v91);
              ImsResult::operator=((uint64_t)&v104, (uint64_t)&__p);
              ImsResult::~ImsResult((ImsResult *)&__p);
              if (v92) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v92);
              }
              if (v62) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v62);
              }
              if (v94) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v94);
              }
              uint64_t v64 = v96;
              if (!v96) {
                goto LABEL_140;
              }
              goto LABEL_139;
            }
          }
          else if (v58)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          SDPSession::localSdp((SDPSession *)v27, 0, &v89);
          RTPSharedPointerBase::getShared<RTPManager>(&v87, a1);
          if (v65)
          {
            uint64_t v85 = v65;
            uint64_t v86 = v39;
            if (v39) {
              atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
            }
          }
          else
          {
            uint64_t v85 = 0;
            uint64_t v86 = 0;
          }
          long long v83 = 0;
          std::string v84 = 0;
          uint64_t v67 = v27[16];
          if (v67)
          {
            std::string v84 = std::__shared_weak_count::lock(v67);
            if (v84) {
              long long v83 = v27[15];
            }
          }
          RTPTransportManager::setupTransport(a3, a6, v75, (uint64_t)&v116, (uint64_t)&v89, a8, (uint64_t)&v87, (uint64_t)&v85, (uint64_t)&__p, (SipStack **)&v83);
          ImsResult::operator=((uint64_t)&v104, (uint64_t)&__p);
          ImsResult::~ImsResult((ImsResult *)&__p);
          if (v84) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v84);
          }
          if (v86) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v86);
          }
          if (v88) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v88);
          }
          uint64_t v64 = v90;
          if (!v90)
          {
LABEL_140:
            long long v98 = 0u;
            long long v99 = 0u;
            long long v100 = 0u;
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
            LODWORD(__p.__r_.__value_.__r.__words[2]) = 0;
            if (v105 == &_bambiDomain)
            {
              int v68 = v106;
              ImsResult::~ImsResult((ImsResult *)&__p);
              if (!v68)
              {
                uint64_t v70 = *(void *)(a1 + 168);
                uint64_t v81 = v40;
                std::string::size_type v82 = v39;
                if (v39) {
                  atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                (*(void (**)(std::string *__return_ptr))(*(void *)v70 + 16))(&__p);
                std::string::size_type size = __p.__r_.__value_.__l.__size_;
                std::string::size_type v71 = __p.__r_.__value_.__r.__words[0];
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
                if (v39)
                {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
                  if (__p.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                  }
                }
                if (v82) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v82);
                }
                uint64_t v72 = RTPManager::sessionMobileOriginated((RTPManager *)a1, (uint64_t)a3);
                RTPManager::awdCallIdForSession((RTPManager *)a1, (uint64_t)a3, &__p);
                long long v79 = v27;
                uint64_t v80 = v26;
                atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                (*(void (**)(std::string::size_type, uint64_t, uint64_t, uint64_t, std::string *, void, std::__shared_weak_count ***))(*(void *)v71 + 16))(v71, a6, v72, v75, &__p, a13, &v79);
                if (v80) {
                  std::__shared_weak_count::__release_weak(v80);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.mgr");
                std::string::basic_string[abi:ne180100]<0>(&v120, "");
                uint64_t v73 = ims::debug((uint64_t)&__p, (uint64_t)&v120);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v73 + 8), (uint64_t)"Created RTPMultiMediaSession with session ID: ", 46);
                *(unsigned char *)(v73 + 17) = 0;
                std::ostream::operator<<();
                *(unsigned char *)(v73 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v73 + 64))(v73, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v73 + 17) = 0;
                if (v122 < 0) {
                  operator delete(v120);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
LABEL_144:
                ImsResult::ImsResult(a9, (uint64_t)&v104);
                uint64_t v39 = (std::__shared_weak_count *)size;
                if (!size)
                {
LABEL_146:
                  ImsResult::~ImsResult((ImsResult *)&v104);
LABEL_147:
                  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
                  return;
                }
LABEL_145:
                std::__shared_weak_count::__release_shared[abi:ne180100](v39);
                goto LABEL_146;
              }
            }
            else
            {
              ImsResult::~ImsResult((ImsResult *)&__p);
            }
            std::string::size_type size = (std::string::size_type)v39;
            goto LABEL_144;
          }
LABEL_139:
          std::__shared_weak_count::__release_shared[abi:ne180100](v64);
          goto LABEL_140;
        }
        int v35 = v27[16];
        if (v35)
        {
          int v35 = std::__shared_weak_count::lock(v35);
          uint64_t v36 = v35;
          if (v35) {
            int v35 = v27[15];
          }
        }
        else
        {
          uint64_t v36 = 0;
        }
        uint64_t v41 = (ImsPrefs *)SipStack::prefs((SipStack *)v35);
        int v42 = (void **)ImsPrefs::getEnableAPOnlyModeKey(v41);
        int v43 = ImsPrefs::BOOLValue(v41, v42);
        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
        memset(&__p, 0, sizeof(__p));
        uint64_t v44 = v27[16];
        if (v44)
        {
          uint64_t v45 = std::__shared_weak_count::lock(v44);
          if (v45) {
            char v46 = v27[15];
          }
          else {
            char v46 = 0;
          }
        }
        else
        {
          char v46 = 0;
          uint64_t v45 = 0;
        }
        if (SHIBYTE(v46[174].__vftable) < 0) {
          std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v46[173].__shared_owners_, v46[173].__shared_weak_owners_);
        }
        else {
          std::string __p = *(std::string *)((char *)v46 + 4160);
        }
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
        v120 = v123;
        BOOL v47 = std::__tree<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::__map_value_compare<ims::Services::ServiceType,std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::less<ims::Services::ServiceType>,true>,std::allocator<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>>>::__emplace_unique_key_args<ims::Services::ServiceType,std::piecewise_construct_t const&,std::tuple<ims::Services::ServiceType const&>,std::tuple<>>((uint64_t **)(a1 + 200), v123, (uint64_t)&std::piecewise_construct, &v120);
        uint64_t v48 = v47[5];
        uint64_t v49 = (std::__shared_weak_count *)v47[6];
        if (v49) {
          atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v43)
        {
          LODWORD(v120) = 1;
          uint64_t v50 = std::__tree<std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>,std::__map_value_compare<RTPStackType,std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>,std::less<RTPStackType>,true>,std::allocator<std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>>>::__emplace_unique_key_args<RTPStackType,std::piecewise_construct_t const&,std::tuple<RTPStackType&&>,std::tuple<>>((uint64_t **)(a1 + 200), 1, &v120);
          uint64_t v48 = v50[5];
          uint64_t v51 = (std::__shared_weak_count *)v50[6];
          if (v51) {
            atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v49) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v49);
          }
          uint64_t v49 = v51;
        }
        if (a8 == 2)
        {
          uint64_t v116 = v74;
          uint64_t v117 = v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          long long v113 = v27;
          long long v114 = v76;
          atomic_fetch_add_explicit(&v76->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          (*(void (**)(int **__return_ptr, uint64_t *, void **, RTPTransportManager *, std::__shared_weak_count ***, uint64_t, std::string *, uint64_t))(*v48 + 40))(&v120, v48, &v116, a3, &v113, 2, &__p, a14);
        }
        else
        {
          if (a8 != 4)
          {
            std::string::basic_string[abi:ne180100]<0>(&v120, "rtp.mgr");
            std::string::basic_string[abi:ne180100]<0>(&v116, "");
            uint64_t v66 = ims::error((uint64_t)&v120, (uint64_t)&v116);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), (uint64_t)"Unable to create session for media type ", 40);
            *(unsigned char *)(v66 + 17) = 0;
            (*(void (**)(uint64_t, std::__shared_weak_count ***))(*(void *)v66 + 32))(v66, &v113);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v66 + 17) = 0;
            if (v115 < 0) {
              operator delete(v113);
            }
            if (v118 < 0) {
              operator delete(v116);
            }
            if (v122 < 0) {
              operator delete(v120);
            }
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            if (!v49) {
              goto LABEL_79;
            }
LABEL_78:
            std::__shared_weak_count::__release_shared[abi:ne180100](v49);
LABEL_79:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v76);
            goto LABEL_82;
          }
          int v119 = 1;
          time_t v52 = std::__tree<std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>,std::__map_value_compare<RTPStackType,std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>,std::less<RTPStackType>,true>,std::allocator<std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>>>::__emplace_unique_key_args<RTPStackType,std::piecewise_construct_t const&,std::tuple<RTPStackType&&>,std::tuple<>>((uint64_t **)(a1 + 200), 1, &v119)[5];
          uint64_t v116 = v74;
          uint64_t v117 = v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          long long v113 = v27;
          long long v114 = v76;
          atomic_fetch_add_explicit(&v76->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          (*(void (**)(int **__return_ptr))(*v52 + 40))(&v120);
        }
        uint64_t v39 = v121;
        if (v120) {
          uint64_t v40 = v120 + 6;
        }
        else {
          uint64_t v40 = 0;
        }
        v120 = 0;
        uint64_t v121 = 0;
        if (v114) {
          std::__shared_weak_count::__release_weak(v114);
        }
        if (v117) {
          std::__shared_weak_count::__release_weak(v117);
        }
        if (!v49) {
          goto LABEL_79;
        }
        goto LABEL_78;
      }
    }
  }
  else
  {
    uint64_t v26 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v104, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v37 = ims::error((uint64_t)&v104, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"SDPSession expired in RTPManager::createSession", 47);
  *(unsigned char *)(v37 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v37 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v106) < 0) {
    operator delete(v104);
  }
  *(_OWORD *)(a9 + 24) = 0u;
  *(_OWORD *)(a9 + 40) = 0u;
  *(_OWORD *)(a9 + 56) = 0u;
  *(void *)a9 = &unk_1F20B2680;
  *(void *)(a9 + 8) = &_bambiDomain;
  *(_DWORD *)(a9 + 16) = 1073741825;
  if (v26) {
    goto LABEL_147;
  }
}

void sub_1C5649FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  ImsResult::~ImsResult((ImsResult *)(v48 - 256));
  std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  _Unwind_Resume(a1);
}

uint64_t RTPManager::sessionMobileOriginated(RTPManager *this, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 9);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *((void *)this + 8);
  if (v7) {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 152))(v7, a2);
  }
  else {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void sub_1C564A3AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RTPManager::awdCallIdForSession(RTPManager *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v5)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *((void *)this + 8);
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 112))(v9, a2);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
}

void sub_1C564A480(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RTPManager::activateSessionWithId(uint64_t a1, uint64_t *a2, unsigned int a3, int a4)
{
  unsigned int v35 = a3;
  std::string::basic_string[abi:ne180100]<0>(v33, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  uint64_t v7 = ims::debug((uint64_t)v33, (uint64_t)v31);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void **)(v7 + 8);
  size_t v10 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v10);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"activateSessionWithId", 21);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" direction=", 11);
  *(unsigned char *)(v8 + 17) = 0;
  ims::toString<MediaDirection>(&v35, &v29);
  LoggableString::LoggableString(&__p, &v29);
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if ((v34 & 0x80000000) == 0)
  {
    if (!a4) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  operator delete(v33[0]);
  if (a4) {
LABEL_10:
  }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, a2);
LABEL_11:
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 168) + 24))(&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    int v11 = (*(uint64_t (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 104))(__p.__r_.__value_.__r.__words[0]);
    uint64_t v12 = *(void *)(a1 + 88);
    if (v12)
    {
      uint64_t v13 = a1 + 88;
      do
      {
        int v14 = *(_DWORD *)(v12 + 32);
        BOOL v15 = v14 < v11;
        if (v14 >= v11) {
          uint64_t v16 = (uint64_t *)v12;
        }
        else {
          uint64_t v16 = (uint64_t *)(v12 + 8);
        }
        if (!v15) {
          uint64_t v13 = v12;
        }
        uint64_t v12 = *v16;
      }
      while (*v16);
      if (v13 != a1 + 88 && *(_DWORD *)(v13 + 32) <= v11)
      {
        uint64_t v17 = *(void *)(v13 + 40);
        if (v17 && v17 != (void)a2)
        {
          std::string::basic_string[abi:ne180100]<0>(v33, "rtp.mgr");
          std::string::basic_string[abi:ne180100]<0>(v31, "");
          uint64_t v19 = ims::debug((uint64_t)v33, (uint64_t)v31);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Deactivating active session ", 28);
          *(unsigned char *)(v19 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v19 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" before activating session ", 27);
          *(unsigned char *)(v19 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v19 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v19 + 17) = 0;
          if (v32 < 0) {
            operator delete(v31[0]);
          }
          if (v34 < 0) {
            operator delete(v33[0]);
          }
          RTPManager::deactivateSessionWithId(a1, v17, 4u);
        }
      }
    }
    (*(void (**)(std::string::size_type, unsigned int *, void))(*(void *)__p.__r_.__value_.__l.__data_
                                                                           + 48))(__p.__r_.__value_.__r.__words[0], &v35, 0);
    std::string::basic_string[abi:ne180100]<0>(v33, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(v31, "");
    uint64_t v20 = ims::debug((uint64_t)v33, (uint64_t)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Automatically reconfiguring session if required: ", 49);
    *(unsigned char *)(v20 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v20 + 17) = 0;
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    std::string::size_type v21 = __p.__r_.__value_.__r.__words[0];
    if (*(unsigned char *)(__p.__r_.__value_.__r.__words[0] + 81))
    {
      *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + 81) = 0;
      (*(void (**)(std::string::size_type, void))(*(void *)v21 + 64))(v21, 0);
      std::string::size_type v21 = __p.__r_.__value_.__r.__words[0];
    }
    (*(void (**)(std::string::size_type, void))(*(void *)v21 + 32))(v21, 0);
    std::string::basic_string[abi:ne180100]<0>(v33, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(v31, "");
    uint64_t v22 = ims::debug((uint64_t)v33, (uint64_t)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Activating session ", 19);
    *(unsigned char *)(v22 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v22 + 17) = 0;
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    int v23 = (*(uint64_t (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 104))(__p.__r_.__value_.__r.__words[0]);
    RTPActiveSessionSet::setActive(a1 + 80, a2, v23);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v33, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(v31, "");
    uint64_t v24 = ims::error((uint64_t)v33, (uint64_t)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"Couldn't find session for id: ", 30);
    *(unsigned char *)(v24 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v24 + 17) = 0;
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    uint64_t v25 = *(std::__shared_weak_count **)(a1 + 72);
    if (v25)
    {
      uint64_t v26 = std::__shared_weak_count::lock(v25);
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v28 = *(void *)(a1 + 64);
        if (v28) {
          (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v28 + 24))(v28, a2, 9);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
    }
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
}

void sub_1C564ABB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, std::__shared_weak_count *a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void RTPManager::deactivateSessionWithId(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v26 = a3;
  std::string::basic_string[abi:ne180100]<0>(v24, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(v22, "");
  uint64_t v5 = ims::debug((uint64_t)v24, (uint64_t)v22);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(void **)(v5 + 8);
  size_t v8 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"deactivateSessionWithId", 23);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" direction=", 11);
  *(unsigned char *)(v6 + 17) = 0;
  ims::toString<MediaDirection>(&v26, &v20);
  LoggableString::LoggableString(&__p, &v20);
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 40))(v6, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v23 < 0) {
    operator delete(v22[0]);
  }
  if (v25 < 0) {
    operator delete(v24[0]);
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 168) + 24))(&__p);
  if (__p.__r_.__value_.__r.__words[0])
  {
    int v9 = (*(uint64_t (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 104))(__p.__r_.__value_.__r.__words[0]);
    uint64_t v10 = *(void *)(a1 + 88);
    if (!v10) {
      goto LABEL_21;
    }
    uint64_t v11 = a1 + 88;
    do
    {
      int v12 = *(_DWORD *)(v10 + 32);
      BOOL v13 = v12 < v9;
      if (v12 >= v9) {
        int v14 = (uint64_t *)v10;
      }
      else {
        int v14 = (uint64_t *)(v10 + 8);
      }
      if (!v13) {
        uint64_t v11 = v10;
      }
      uint64_t v10 = *v14;
    }
    while (*v14);
    if (v11 != a1 + 88 && *(_DWORD *)(v11 + 32) <= v9) {
      uint64_t v15 = *(void *)(v11 + 40);
    }
    else {
LABEL_21:
    }
      uint64_t v15 = 0;
    std::string::basic_string[abi:ne180100]<0>(v24, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    uint64_t v16 = ims::debug((uint64_t)v24, (uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Deactivating session ", 21);
    *(unsigned char *)(v16 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    (*(void (**)(std::string::size_type, unsigned int *, void))(*(void *)__p.__r_.__value_.__l.__data_
                                                                           + 48))(__p.__r_.__value_.__r.__words[0], &v26, 0);
    if (v26 == 4 && v15 == a2)
    {
      std::string::basic_string[abi:ne180100]<0>(v24, "rtp.mgr");
      std::string::basic_string[abi:ne180100]<0>(v22, "");
      uint64_t v17 = ims::debug((uint64_t)v24, (uint64_t)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Deactivating session ", 21);
      *(unsigned char *)(v17 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
      if (v23 < 0) {
        operator delete(v22[0]);
      }
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      int v18 = (*(uint64_t (**)(std::string::size_type))(*(void *)__p.__r_.__value_.__l.__data_ + 104))(__p.__r_.__value_.__r.__words[0]);
      RTPActiveSessionSet::setActive(a1 + 80, 0, v18);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    uint64_t v19 = ims::error((uint64_t)v24, (uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"RTPManager::deactivateSessionWithId could not find session id: ", 63);
    *(unsigned char *)(v19 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
}

void sub_1C564B1EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, std::__shared_weak_count *a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void RTPManager::reconfigureSession(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v70, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v70, (uint64_t)__p);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"reconfigureSession", 18);
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" session=", 9);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v73 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v71) < 0) {
    operator delete((void *)v70);
  }
  size_t v8 = *(void ***)a3;
  if (!*(void *)a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v70, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v51 = ims::error((uint64_t)&v70, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v51 + 8), (uint64_t)"Session is nil! This should never happen.", 41);
    *(unsigned char *)(v51 + 17) = 0;
    if (v73 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v71) < 0) {
      operator delete((void *)v70);
    }
    return;
  }
  int v9 = *(std::__shared_weak_count **)(a3 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v68 = v9;
  uint64_t v10 = (capabilities::radio *)(*((uint64_t (**)(void **))*v8 + 13))(v8);
  int v12 = (uint64_t *)(a1 + 88);
  uint64_t v11 = *(void *)(a1 + 88);
  if (!v11) {
    goto LABEL_20;
  }
  uint64_t v13 = a1 + 88;
  do
  {
    int v14 = *(_DWORD *)(v11 + 32);
    BOOL v15 = v14 < (int)v10;
    if (v14 >= (int)v10) {
      uint64_t v16 = (uint64_t *)v11;
    }
    else {
      uint64_t v16 = (uint64_t *)(v11 + 8);
    }
    if (!v15) {
      uint64_t v13 = v11;
    }
    uint64_t v11 = *v16;
  }
  while (*v16);
  if ((uint64_t *)v13 != v12 && *(_DWORD *)(v13 + 32) <= (int)v10 && (*(void *)&v69[4] = *(void *)(v13 + 40)) != 0)
  {
    *(_DWORD *)uint64_t v69 = 0;
  }
  else
  {
LABEL_20:
    uint64_t v10 = (capabilities::radio *)(*((uint64_t (**)(void **))*v8 + 13))(v8);
    uint64_t v17 = *(void *)(a1 + 112);
    if (!v17) {
      goto LABEL_30;
    }
    uint64_t v18 = a1 + 112;
    do
    {
      int v19 = *(_DWORD *)(v17 + 32);
      BOOL v20 = v19 < (int)v10;
      if (v19 >= (int)v10) {
        std::string::size_type v21 = (uint64_t *)v17;
      }
      else {
        std::string::size_type v21 = (uint64_t *)(v17 + 8);
      }
      if (!v20) {
        uint64_t v18 = v17;
      }
      uint64_t v17 = *v21;
    }
    while (*v21);
    if (v18 != a1 + 112 && *(_DWORD *)(v18 + 32) <= (int)v10) {
      uint64_t v22 = *(void *)(v18 + 40);
    }
    else {
LABEL_30:
    }
      uint64_t v22 = 0;
    *(_DWORD *)&v69[8] = 0;
    *(void *)uint64_t v69 = v22 != a2;
  }
  uint64_t v67 = (void *)a3;
  if (*(_DWORD *)(a1 + 340) == 1 && (capabilities::radio::mav20Plus(v10) & 1) == 0)
  {
    *(void *)&long long v70 = v8 + 7;
    if (*((_DWORD *)std::__tree<std::__value_type<std::string,RTPStackType>,std::__map_value_compare<std::string,std::__value_type<std::string,RTPStackType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,RTPStackType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 312), v8 + 7, (long long **)&v70)+ 14) == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v70, "rtp.mgr");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v23 = ims::debug((uint64_t)&v70, (uint64_t)__p);
      size_t v24 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v24);
      *(unsigned char *)(v23 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"::", 2);
      *(unsigned char *)(v23 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"canReconfigureSession", 21);
      *(unsigned char *)(v23 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" [sessionId=", 12);
      *(unsigned char *)(v23 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v23 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" notRecentlyDeactivated=", 24);
      *(unsigned char *)(v23 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v23 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" isActive=", 10);
      *(unsigned char *)(v23 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v23 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" _basebandType=kRTPStackQMI", 27);
      *(unsigned char *)(v23 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" _activeStackType=kRTPStackTypeBaseband]", 40);
      *(unsigned char *)(v23 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v23 + 17) = 0;
      if (v73 < 0) {
        operator delete(__p[0]);
      }
      if (SBYTE7(v71) < 0) {
        operator delete((void *)v70);
      }
      char v25 = v69[0];
      if (*(void *)&v69[4] == a2) {
        char v25 = 1;
      }
      if ((v25 & 1) == 0)
      {
        int v59 = 0;
        if (v9) {
          goto LABEL_114;
        }
        goto LABEL_115;
      }
    }
  }
  uint64_t v26 = (*(uint64_t (**)(void))(**(void **)(a1 + 168) + 56))(*(void *)(a1 + 168));
  *(void *)&long long v70 = v8 + 7;
  uint64_t v27 = std::__tree<std::__value_type<std::string,RTPStackType>,std::__map_value_compare<std::string,std::__value_type<std::string,RTPStackType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,RTPStackType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 312), v8 + 7, (long long **)&v70);
  uint64_t v66 = (uint64_t *)(a1 + 88);
  uint64_t v28 = *(void **)(a1 + 312);
  if (v28 == (void *)(a1 + 320))
  {
    int v50 = 1;
    goto LABEL_94;
  }
  uint64_t v65 = v26;
  int v29 = *((_DWORD *)v27 + 14);
  while (1)
  {
    long long v70 = 0u;
    long long v71 = 0u;
    if (*((char *)v28 + 55) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v70, (const std::string::value_type *)v28[4], v28[5]);
    }
    else
    {
      long long v70 = *((_OWORD *)v28 + 2);
      *(void *)&long long v71 = v28[6];
    }
    int v30 = *((_DWORD *)v28 + 14);
    DWORD2(v71) = v30;
    if ((SBYTE7(v71) & 0x80u) == 0) {
      int v31 = (void *)BYTE7(v71);
    }
    else {
      int v31 = (void *)*((void *)&v70 + 1);
    }
    char v32 = (void *)*((unsigned __int8 *)v8 + 79);
    int v33 = (char)v32;
    if ((char)v32 < 0) {
      char v32 = v8[8];
    }
    if (v31 != v32)
    {
      BOOL v43 = 0;
      goto LABEL_67;
    }
    char v34 = v33 >= 0 ? (char *)(v8 + 7) : (char *)v8[7];
    if ((BYTE7(v71) & 0x80) != 0) {
      break;
    }
    if (!BYTE7(v71)) {
      goto LABEL_80;
    }
    uint64_t v35 = BYTE7(v71) - 1;
    uint64_t v36 = (unsigned __int8 *)&v70;
    do
    {
      int v38 = *v36++;
      int v37 = v38;
      int v40 = *v34++;
      int v39 = v40;
      BOOL v42 = v35-- != 0;
      BOOL v47 = v37 == v39;
      BOOL v43 = v37 == v39;
    }
    while (v47 && v42);
LABEL_67:
    int v44 = v30 == v29 || v43;
    if ((BYTE7(v71) & 0x80) != 0)
    {
      operator delete((void *)v70);
      if ((v44 & 1) == 0) {
        goto LABEL_92;
      }
    }
    else if (!v44)
    {
      goto LABEL_92;
    }
LABEL_80:
    uint64_t v48 = (void *)v28[1];
    if (v48)
    {
      do
      {
        uint64_t v49 = v48;
        uint64_t v48 = (void *)*v48;
      }
      while (v48);
    }
    else
    {
      do
      {
        uint64_t v49 = (void *)v28[2];
        BOOL v47 = *v49 == (void)v28;
        uint64_t v28 = v49;
      }
      while (!v47);
    }
    uint64_t v28 = v49;
    if (v49 == (void *)(a1 + 320))
    {
      int v50 = 1;
      goto LABEL_93;
    }
  }
  uint64_t v45 = (void *)v70;
  int v46 = memcmp((const void *)v70, v34, *((size_t *)&v70 + 1));
  operator delete(v45);
  if (v46) {
    BOOL v47 = v30 == v29;
  }
  else {
    BOOL v47 = 1;
  }
  if (v47) {
    goto LABEL_80;
  }
LABEL_92:
  int v50 = 0;
LABEL_93:
  uint64_t v26 = v65;
LABEL_94:
  if (v52)
  {
    if (v68) {
      atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL isAutostartConfigurable = MediaSessionStateMachine::isAutostartConfigurable(v52);
    if (v68) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v68);
    }
  }
  else
  {
    BOOL isAutostartConfigurable = 1;
  }
  std::string::basic_string[abi:ne180100]<0>(&v70, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v54 = ims::debug((uint64_t)&v70, (uint64_t)__p);
  uint64_t v55 = (const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
  size_t v56 = strlen(v55);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)v55, v56);
  *(unsigned char *)(v54 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v54 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)"canReconfigureSession", 21);
  *(unsigned char *)(v54 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v54 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v54 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)" session=", 9);
  *(unsigned char *)(v54 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v54 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)" notRecentlyDeactivated=", 24);
  *(unsigned char *)(v54 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v54 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)" isActive=", 10);
  *(unsigned char *)(v54 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v54 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)" onlySession=", 13);
  *(unsigned char *)(v54 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v54 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)" onlyStack=", 11);
  *(unsigned char *)(v54 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v54 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)" isAutoStartConfigurable=", 25);
  *(unsigned char *)(v54 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v54 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v54 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v54 + 17) = 0;
  int v9 = v68;
  int v12 = v66;
  if (v73 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v71) < 0) {
    operator delete((void *)v70);
  }
  if (*(void *)&v69[4] == a2 || v26 == 1) {
    int v58 = 1;
  }
  else {
    int v58 = v50;
  }
  if (!isAutostartConfigurable | *(_DWORD *)v69) {
    int v59 = isAutostartConfigurable;
  }
  else {
    int v59 = v58;
  }
  if (v68) {
LABEL_114:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
LABEL_115:
  if (v59)
  {
    std::string::basic_string[abi:ne180100]<0>(&v70, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v60 = ims::debug((uint64_t)&v70, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v60 + 8), (uint64_t)"Reconfiguring session ", 22);
    *(unsigned char *)(v60 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v60 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v60 + 17) = 0;
    if (v73 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v71) < 0) {
      operator delete((void *)v70);
    }
    (*(void (**)(void, void))(*(void *)*v67 + 64))(*v67, 0);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v70, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v61 = ims::warn((uint64_t)&v70, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)"Unable to configure session ", 28);
    *(unsigned char *)(v61 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v61 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)" while session ", 15);
    *(unsigned char *)(v61 + 17) = 0;
    int v62 = (*(uint64_t (**)(void))(*(void *)*v67 + 104))();
    uint64_t v63 = *v12;
    if (*v12)
    {
      do
      {
        if (*(_DWORD *)(v63 + 32) >= v62) {
          uint64_t v64 = (uint64_t *)v63;
        }
        else {
          uint64_t v64 = (uint64_t *)(v63 + 8);
        }
        uint64_t v63 = *v64;
      }
      while (*v64);
    }
    std::ostream::operator<<();
    *(unsigned char *)(v61 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)" is the active session", 22);
    *(unsigned char *)(v61 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v61 + 17) = 0;
    if (v73 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v71) < 0) {
      operator delete((void *)v70);
    }
    *(unsigned char *)(*v67 + 81) = 1;
  }
}

void sub_1C564BECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void RTPManager::updateSdpForSession(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4)
{
  unsigned int v37 = a4;
  std::string::basic_string[abi:ne180100]<0>(v32, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v7 = ims::debug((uint64_t)v32, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v8 = v7;
  int v9 = *(void **)(v7 + 8);
  size_t v10 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v10);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"updateSdpForSession", 19);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" direction=", 11);
  *(unsigned char *)(v8 + 17) = 0;
  ims::toString<MediaDirection>(&v37, &v35);
  LoggableString::LoggableString(&v36, &v35);
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (v26 < 0) {
    operator delete(__p[0]);
  }
  if (v34 < 0) {
    operator delete(v32[0]);
  }
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = 0uLL;
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 168) + 24))(&v36);
  if (v36.__r_.__value_.__r.__words[0])
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v11 = ims::debug((uint64_t)v32, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Updating SDP for session ", 25);
    *(unsigned char *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v34 < 0) {
      operator delete(v32[0]);
    }
    (*(void (**)(std::string::size_type, unsigned int *, void))(*(void *)v36.__r_.__value_.__l.__data_
                                                                           + 48))(v36.__r_.__value_.__r.__words[0], &v37, 0);
    std::string::size_type v12 = v36.__r_.__value_.__r.__words[0];
    uint64_t v13 = (std::__shared_weak_count *)a3[1];
    uint64_t v30 = *a3;
    int v31 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void **__return_ptr))(*(void *)v12 + 56))(v32);
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    __p[0] = &unk_1F20B2680;
    __p[1] = &_bambiDomain;
    int v25 = 0;
    BOOL v15 = v32[1] == &_bambiDomain && v33 == 0;
    ImsResult::~ImsResult((ImsResult *)__p);
    ImsResult::~ImsResult((ImsResult *)v32);
    if (v31) {
      std::__shared_weak_count::__release_weak(v31);
    }
    if (v15)
    {
      std::string::basic_string[abi:ne180100]<0>(v32, "rtp.mgr");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v16 = ims::debug((uint64_t)v32, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Valid configuration given for session ", 38);
      *(unsigned char *)(v16 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (v34 < 0) {
        operator delete(v32[0]);
      }
      std::string::size_type size = (std::__shared_weak_count *)v36.__r_.__value_.__l.__size_;
      long long v23 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
      if (v36.__r_.__value_.__l.__size_) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v36.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
      }
      RTPManager::reconfigureSession(a1, a2, (uint64_t)&v23);
      if (!size) {
        goto LABEL_47;
      }
LABEL_42:
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
      goto LABEL_47;
    }
    std::string::basic_string[abi:ne180100]<0>(v32, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v22 = ims::debug((uint64_t)v32, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"setConfiguration failed for session ", 36);
    *(unsigned char *)(v22 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v22 + 17) = 0;
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v34 < 0) {
      operator delete(v32[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v32, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v18 = ims::error((uint64_t)v32, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"updateSdpForSession() got an invalid session id: ", 49);
    *(unsigned char *)(v18 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (v26 < 0) {
      operator delete(__p[0]);
    }
    if (v34 < 0) {
      operator delete(v32[0]);
    }
    int v19 = *(std::__shared_weak_count **)(a1 + 72);
    if (v19)
    {
      BOOL v20 = std::__shared_weak_count::lock(v19);
      if (v20)
      {
        std::string::size_type size = v20;
        uint64_t v21 = *(void *)(a1 + 64);
        if (v21) {
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v21 + 16))(v21, a2, 0);
        }
        goto LABEL_42;
      }
    }
  }
LABEL_47:
  if (v36.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v36.__r_.__value_.__l.__size_);
  }
}

void sub_1C564C60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  char v34 = *(std::__shared_weak_count **)(v32 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(a1);
}

void RTPManager::terminateSessionWithId(RTPManager *this, unint64_t a2)
{
  unint64_t v37 = a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(v35, "");
  uint64_t v3 = ims::debug((uint64_t)__p, (uint64_t)v35);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v4 = v3;
  uint64_t v5 = *(void **)(v3 + 8);
  size_t v6 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v6);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"terminateSessionWithId", 22);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v33 = 0;
  char v34 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 21) + 24))(&v33);
  if (v33)
  {
    (*(void (**)(RTPManager *, unint64_t))(*(void *)this + 48))(this, v37);
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 104))(v33);
    uint64_t v8 = (char *)*((void *)this + 11);
    if (!v8) {
      goto LABEL_17;
    }
    int v9 = (char *)this + 88;
    do
    {
      int v10 = *((_DWORD *)v8 + 8);
      BOOL v11 = v10 < v7;
      if (v10 >= v7) {
        std::string::size_type v12 = (char **)v8;
      }
      else {
        std::string::size_type v12 = (char **)(v8 + 8);
      }
      if (!v11) {
        int v9 = v8;
      }
      uint64_t v8 = *v12;
    }
    while (*v12);
    if (v9 != (char *)this + 88 && *((_DWORD *)v9 + 8) <= v7) {
      uint64_t v13 = *((void *)v9 + 5);
    }
    else {
LABEL_17:
    }
      uint64_t v13 = 0;
    if (v13 == v37)
    {
      int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v33 + 104))(v33);
      RTPActiveSessionSet::setActive((uint64_t)this + 80, 0, v14);
    }
    if (v33)
    {
      if (!ims::getValueFromMap<unsigned long long,ImsPowerAssertion *>((uint64_t)this + 352, &v37, 0))
      {
        uint64_t v32 = 0;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        long long v22 = 0u;
        long long v23 = 0u;
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v17 = 0u;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"com.apple.ipTelephony.terminateMedia.", 37);
        std::ostream::operator<<();
        operator new();
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "rtp.mgr");
      std::string::basic_string[abi:ne180100]<0>(v35, "");
      uint64_t v15 = ims::warn((uint64_t)__p, (uint64_t)v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"not terminating session, power assertion for this session already exists", 72);
      *(unsigned char *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "rtp.mgr");
      std::string::basic_string[abi:ne180100]<0>(v35, "");
      uint64_t v15 = ims::warn((uint64_t)__p, (uint64_t)v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"No session to terminate for id ", 31);
      *(unsigned char *)(v15 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(unsigned char *)(v15 + 17) = 0;
    if (v36 < 0) {
      operator delete(v35[0]);
    }
    if (SBYTE7(v17) < 0) {
      operator delete(__p[0]);
    }
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
}

void sub_1C564CDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v25 - 97) < 0) {
    operator delete(*(void **)(v25 - 120));
  }
  MEMORY[0x1C878E320](v24, 0x1012C405C87E9CELL);
  std::ostringstream::~ostringstream((uint64_t)&__p);
  long long v27 = *(std::__shared_weak_count **)(v25 - 128);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(a1);
}

uint64_t ims::getValueFromMap<unsigned long long,ImsPowerAssertion *>(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  size_t v6 = *(void **)(a1 + 8);
  uint64_t v4 = (void *)(a1 + 8);
  uint64_t v5 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  unint64_t v7 = *a2;
  uint64_t v8 = v4;
  do
  {
    unint64_t v9 = v5[4];
    BOOL v10 = v9 >= v7;
    if (v9 >= v7) {
      BOOL v11 = v5;
    }
    else {
      BOOL v11 = v5 + 1;
    }
    if (v10) {
      uint64_t v8 = v5;
    }
    uint64_t v5 = (void *)*v11;
  }
  while (*v11);
  if (v8 != v4 && v7 >= v8[4]) {
    return v8[5];
  }
LABEL_12:
  std::string::basic_string[abi:ne180100]<0>(v16, "rtp.util");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v12 = ims::debug((uint64_t)v16, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"getValueFromMap", 15);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" Object not found [key=", 23);
  *(unsigned char *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  return a3;
}

void sub_1C564CFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RTPManager::dtmfEventForASCIIChar(RTPManager *this)
{
  if (this == 42)
  {
    return 10;
  }
  else if (this == 35)
  {
    return 11;
  }
  else
  {
    unsigned __int8 v1 = (_BYTE)this - 48;
    if ((this - 48) >= 0xA)
    {
      std::string::basic_string[abi:ne180100]<0>(v6, "rtp.mgr");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v2 = ims::error((uint64_t)v6, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"RTPManager:: dtmfEventForASCIIChar got invalid input: ", 54);
      *(unsigned char *)(v2 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v2 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v2 + 17) = 0;
      if (v5 < 0) {
        operator delete(__p[0]);
      }
      if (v7 < 0) {
        operator delete(v6[0]);
      }
      return 16;
    }
  }
  return v1;
}

void sub_1C564D12C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RTPManager::setRelayMode(RTPManager *this, unint64_t a2, char a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v37, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v37, (uint64_t)&__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"setRelayMode", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" isRelayCall=", 13);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v36 < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v37);
  }
  BOOL v10 = (uint64_t *)((char *)this + 232);
  BOOL v11 = (void *)*((void *)this + 29);
  if (!v11) {
    goto LABEL_17;
  }
  uint64_t v12 = (uint64_t *)((char *)this + 232);
  uint64_t v13 = (void *)*((void *)this + 29);
  do
  {
    unint64_t v14 = v13[4];
    BOOL v15 = v14 >= a2;
    if (v14 >= a2) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    if (v15) {
      uint64_t v12 = v13;
    }
    uint64_t v13 = (void *)*v16;
  }
  while (*v16);
  if (v12 != v10 && v12[4] <= a2)
  {
    if (a3) {
      return;
    }
    uint64_t v24 = (uint64_t *)((char *)this + 232);
    do
    {
      unint64_t v25 = v11[4];
      BOOL v26 = v25 >= a2;
      if (v25 >= a2) {
        long long v27 = v11;
      }
      else {
        long long v27 = v11 + 1;
      }
      if (v26) {
        uint64_t v24 = v11;
      }
      BOOL v11 = (void *)*v27;
    }
    while (*v27);
    if (v24 != v10 && v24[4] <= a2)
    {
      std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer((uint64_t **)this + 28, v24);
      operator delete(v24);
    }
  }
  else
  {
LABEL_17:
    if ((a3 & 1) == 0) {
      return;
    }
    std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t *)this + 28, a2, a2);
  }
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 21) + 24))(&v32);
  if (v32)
  {
    char v17 = (std::__shared_weak_count *)*((void *)this + 9);
    if (v17)
    {
      long long v18 = std::__shared_weak_count::lock(v17);
      if (v18)
      {
        long long v19 = v18;
        uint64_t v20 = *((void *)this + 8);
        if (v20)
        {
          unint64_t v37 = 0;
          int v38 = 0;
          (*(void (**)(SipStack **__return_ptr))(*(void *)v20 + 192))(&v37);
          std::string __p = (void *)(v32 + 56);
          if (*((_DWORD *)std::__tree<std::__value_type<std::string,RTPStackType>,std::__map_value_compare<std::string,std::__value_type<std::string,RTPStackType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,RTPStackType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 39, (void **)(v32 + 56), (long long **)&__p)+ 14) == 1|| v37&& (long long v21 = (ImsPrefs *)SipStack::prefs(v37), EnableAPOnlyModeKey = (void **)ImsPrefs::getEnableAPOnlyModeKey(v21), ImsPrefs::BOOLValue(v21, EnableAPOnlyModeKey)))
          {
            std::string __p = 0;
            std::string v35 = 0;
            RTPManager::getStackControllerByType((uint64_t)this, 1, &v30);
            std::dynamic_pointer_cast[abi:ne180100]<AVCRTPStackController,RTPStackController>(&v30, &__p);
            if (v31) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v31);
            }
            if (__p) {
              AVCRTPStackController::setRelayMode((uint64_t)__p, (void **)(v32 + 56), a2, a3);
            }
            if (v35) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v35);
            }
            long long v23 = v33;
            v29[0] = v32;
            v29[1] = v33;
            if (v33) {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            RTPManager::reconfigureSession((uint64_t)this, a2, (uint64_t)v29);
            if (v23) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
            }
          }
          if (v38) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v38);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v37, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v28 = ims::error((uint64_t)&v37, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"Session not found [sessionId=", 29);
    *(unsigned char *)(v28 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v28 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v28 + 17) = 0;
    if (v36 < 0) {
      operator delete(__p);
    }
    if (v39 < 0) {
      operator delete(v37);
    }
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
}

void sub_1C564D600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20,void *__p,std::__shared_weak_count *a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

uint64_t RTPManager::getStackControllerByType@<X0>(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 208);
  uint64_t result = a1 + 208;
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = result;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      size_t v9 = (uint64_t *)v4;
    }
    else {
      size_t v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 != result && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v11 = *(void *)(v6 + 40);
    uint64_t v10 = *(void *)(v6 + 48);
    *a3 = v11;
    a3[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_11:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void RTPManager::setScreeningMode(RTPManager *this, unint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v37, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v37, (uint64_t)&__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  BOOL v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"setScreeningMode", 16);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" isScreeningCall=", 17);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v36 < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v37);
  }
  uint64_t v10 = (void *)*((void *)this + 32);
  if (!v10) {
    goto LABEL_17;
  }
  uint64_t v11 = (uint64_t *)((char *)this + 256);
  uint64_t v12 = (uint64_t *)((char *)this + 256);
  uint64_t v13 = (void *)*((void *)this + 32);
  do
  {
    unint64_t v14 = v13[4];
    BOOL v15 = v14 >= a2;
    if (v14 >= a2) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    if (v15) {
      uint64_t v12 = v13;
    }
    uint64_t v13 = (void *)*v16;
  }
  while (*v16);
  if (v12 != v11 && v12[4] <= a2)
  {
    if (a3) {
      return;
    }
    uint64_t v24 = (uint64_t *)((char *)this + 256);
    do
    {
      unint64_t v25 = v10[4];
      BOOL v26 = v25 >= a2;
      if (v25 >= a2) {
        long long v27 = v10;
      }
      else {
        long long v27 = v10 + 1;
      }
      if (v26) {
        uint64_t v24 = v10;
      }
      uint64_t v10 = (void *)*v27;
    }
    while (*v27);
    if (v24 != v11 && v24[4] <= a2)
    {
      std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer((uint64_t **)this + 31, v24);
      operator delete(v24);
    }
  }
  else
  {
LABEL_17:
    if ((a3 & 1) == 0) {
      return;
    }
    std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>((uint64_t *)this + 31, a2, a2);
  }
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 21) + 24))(&v32);
  if (v32)
  {
    char v17 = (std::__shared_weak_count *)*((void *)this + 9);
    if (v17)
    {
      long long v18 = std::__shared_weak_count::lock(v17);
      if (v18)
      {
        long long v19 = v18;
        uint64_t v20 = *((void *)this + 8);
        if (v20)
        {
          unint64_t v37 = 0;
          int v38 = 0;
          (*(void (**)(SipStack **__return_ptr))(*(void *)v20 + 192))(&v37);
          std::string __p = (void *)(v32 + 56);
          if (*((_DWORD *)std::__tree<std::__value_type<std::string,RTPStackType>,std::__map_value_compare<std::string,std::__value_type<std::string,RTPStackType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,RTPStackType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 39, (void **)(v32 + 56), (long long **)&__p)+ 14) == 1|| v37&& (long long v21 = (ImsPrefs *)SipStack::prefs(v37), EnableAPOnlyModeKey = (void **)ImsPrefs::getEnableAPOnlyModeKey(v21), ImsPrefs::BOOLValue(v21, EnableAPOnlyModeKey)))
          {
            std::string __p = 0;
            std::string v35 = 0;
            RTPManager::getStackControllerByType((uint64_t)this, 1, &v30);
            std::dynamic_pointer_cast[abi:ne180100]<AVCRTPStackController,RTPStackController>(&v30, &__p);
            if (v31) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v31);
            }
            if (__p) {
              AVCRTPStackController::setScreeningMode((uint64_t)__p, (void **)(v32 + 56), a2, a3);
            }
            if (v35) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v35);
            }
            long long v23 = v33;
            v29[0] = v32;
            v29[1] = v33;
            if (v33) {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            RTPManager::reconfigureSession((uint64_t)this, a2, (uint64_t)v29);
            if (v23) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v23);
            }
          }
          if (v38) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v38);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v37, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v28 = ims::error((uint64_t)&v37, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"Session not found [sessionId=", 29);
    *(unsigned char *)(v28 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v28 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v28 + 17) = 0;
    if (v36 < 0) {
      operator delete(__p);
    }
    if (v39 < 0) {
      operator delete(v37);
    }
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
}

void sub_1C564DBC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20,void *__p,std::__shared_weak_count *a22,int a23,__int16 a24,char a25,char a26)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void RTPManager::setMute(RTPManager *this)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v1 = ims::error((uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v1 + 8), (uint64_t)"RTPManager::setMuteVoiceCall called for non-OSX platform, ignoring", 66);
  *(unsigned char *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v1 + 17) = 0;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1C564DD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RTPManager::startSendingDTMF(RTPManager *this, RTPManager *a2)
{
  uint64_t v3 = *((void *)this + 11);
  if (v3)
  {
    do
    {
      if (*(int *)(v3 + 32) >= 2) {
        uint64_t v4 = (uint64_t *)v3;
      }
      else {
        uint64_t v4 = (uint64_t *)(v3 + 8);
      }
      uint64_t v3 = *v4;
    }
    while (*v4);
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 21) + 24))(&v11);
  if (v11 && RTPManager::dtmfEventForASCIIChar(a2) != 16)
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::debug((uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Long tone - Starting to send digit: ", 36);
    *(unsigned char *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" To Session: ", 13);
    *(unsigned char *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
    (*(void (**)(void **__return_ptr))(*(void *)v11 + 128))(v6);
    ImsResult::~ImsResult((ImsResult *)v6);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1C564DF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (*(char *)(v24 - 49) < 0) {
    operator delete(*(void **)(v24 - 72));
  }
  BOOL v26 = *(std::__shared_weak_count **)(v24 - 40);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

void RTPManager::stopSendingDTMF(RTPManager *this)
{
  uint64_t v1 = *((void *)this + 11);
  if (v1)
  {
    do
    {
      if (*(int *)(v1 + 32) >= 2) {
        uint64_t v2 = (uint64_t *)v1;
      }
      else {
        uint64_t v2 = (uint64_t *)(v1 + 8);
      }
      uint64_t v1 = *v2;
    }
    while (*v2);
  }
  uint64_t v9 = 0;
  char v10 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 21) + 24))(&v9);
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Long tone - Stopping to send digit Session: ", 44);
    *(unsigned char *)(v3 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    (*(void (**)(void **__return_ptr))(*(void *)v9 + 136))(v4);
    ImsResult::~ImsResult((ImsResult *)v4);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C564E154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  BOOL v26 = *(std::__shared_weak_count **)(v24 - 24);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

void RTPManager::sendDTMFDigits(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4 = *(void *)(a1 + 88);
  if (v4)
  {
    do
    {
      if (*(int *)(v4 + 32) >= 2) {
        uint64_t v5 = (uint64_t *)v4;
      }
      else {
        uint64_t v5 = (uint64_t *)(v4 + 8);
      }
      uint64_t v4 = *v5;
    }
    while (*v5);
  }
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 168) + 24))(&v47);
  uint64_t v6 = v47;
  if (v47)
  {
    int v44 = 0;
    uint64_t v45 = 0;
    int v46 = 0;
    uint64_t v7 = *a2;
    char v8 = a2[1];
    if (*a2 != v8)
    {
      do
      {
        uint64_t v9 = (RTPManager *)*v7;
        if (RTPManager::dtmfEventForASCIIChar(v9) != 16)
        {
          char v10 = RTPManager::dtmfEventForASCIIChar(v9);
          char v11 = v10;
          uint64_t v12 = v45;
          if (v45 >= v46)
          {
            unint64_t v14 = (unint64_t)v44;
            uint64_t v15 = v45 - v44;
            uint64_t v16 = v45 - v44 + 1;
            if (v16 < 0) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v17 = v46 - v44;
            if (2 * (v46 - v44) > (unint64_t)v16) {
              uint64_t v16 = 2 * v17;
            }
            if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v18 = v16;
            }
            if (v18) {
              long long v19 = (char *)operator new(v18);
            }
            else {
              long long v19 = 0;
            }
            uint64_t v20 = &v19[v15];
            long long v21 = &v19[v15];
            *long long v21 = v11;
            uint64_t v13 = v21 + 1;
            if (v12 != (char *)v14)
            {
              long long v22 = &v12[~v14];
              do
              {
                char v23 = *--v12;
                (v22--)[(void)v19] = v23;
              }
              while (v12 != (char *)v14);
              uint64_t v12 = v44;
              uint64_t v20 = v19;
            }
            int v44 = v20;
            uint64_t v45 = v13;
            int v46 = &v19[v18];
            if (v12) {
              operator delete(v12);
            }
          }
          else
          {
            *uint64_t v45 = v10;
            uint64_t v13 = v12 + 1;
          }
          uint64_t v45 = v13;
        }
        ++v7;
      }
      while (v7 != v8);
      uint64_t v6 = v47;
    }
    (*(void (**)(void **__return_ptr))(*(void *)v6 + 144))(v41);
    long long v38 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    __p[0] = &unk_1F20B2680;
    __p[1] = &_bambiDomain;
    int v36 = 0;
    uint64_t v24 = (uint64_t *)v41[1];
    int v25 = v42;
    ImsResult::~ImsResult((ImsResult *)__p);
    ImsResult::~ImsResult((ImsResult *)v41);
    if (v24 == &_bambiDomain && !v25)
    {
      BOOL v26 = *(std::__shared_weak_count **)(a1 + 72);
      if (v26)
      {
        long long v27 = std::__shared_weak_count::lock(v26);
        if (v27)
        {
          uint64_t v28 = v27;
          uint64_t v29 = *(void *)(a1 + 64);
          if (v29) {
            (*(void (**)(uint64_t))(*(void *)v29 + 48))(v29);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v41, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v30 = ims::debug((uint64_t)v41, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"Short tone - Sending digits: ", 29);
    *(unsigned char *)(v30 + 17) = 0;
    if (v37 < 0) {
      operator delete(__p[0]);
    }
    if (v43 < 0) {
      operator delete(v41[0]);
    }
    long long v31 = v44;
    for (uint64_t i = v45; v31 != i; ++v31)
    {
      std::string::basic_string[abi:ne180100]<0>(v41, "rtp.mgr");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v33 = ims::debug((uint64_t)v41, (uint64_t)__p);
      std::ostream::operator<<();
      *(unsigned char *)(v33 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)" ", 1);
      *(unsigned char *)(v33 + 17) = 0;
      if (v37 < 0) {
        operator delete(__p[0]);
      }
      if (v43 < 0) {
        operator delete(v41[0]);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v41, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v34 = ims::debug((uint64_t)v41, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"To Session: ", 12);
    *(unsigned char *)(v34 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v34 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v34 + 17) = 0;
    if (v37 < 0) {
      operator delete(__p[0]);
    }
    if (v43 < 0) {
      operator delete(v41[0]);
    }
    if (v44)
    {
      uint64_t v45 = v44;
      operator delete(v44);
    }
  }
  if (v48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
  }
}

void sub_1C564E628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  long long v31 = *(void **)(v29 - 128);
  if (v31)
  {
    *(void *)(v29 - 120) = v31;
    operator delete(v31);
  }
  uint64_t v32 = *(std::__shared_weak_count **)(v29 - 96);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(a1);
}

void RTPManager::startRingbackTone(RTPManager *this, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v36, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v36, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"startRingbackTone", 17);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 21) + 24))(&v32);
  if (v32)
  {
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 104))(v32);
    uint64_t v9 = (char *)*((void *)this + 11);
    if (!v9) {
      goto LABEL_17;
    }
    char v10 = (char *)this + 88;
    do
    {
      int v11 = *((_DWORD *)v9 + 8);
      BOOL v12 = v11 < v8;
      if (v11 >= v8) {
        uint64_t v13 = (char **)v9;
      }
      else {
        uint64_t v13 = (char **)(v9 + 8);
      }
      if (!v12) {
        char v10 = v9;
      }
      uint64_t v9 = *v13;
    }
    while (*v13);
    if (v10 != (char *)this + 88 && *((_DWORD *)v10 + 8) <= v8) {
      uint64_t v14 = *((void *)v10 + 5);
    }
    else {
LABEL_17:
    }
      uint64_t v14 = 0;
    uint64_t v30 = 0;
    long long v31 = 0;
    RTPManager::sdpSessionForSession(this, a2, &v30);
    uint64_t v15 = v30;
    if (!v30) {
      goto LABEL_31;
    }
    uint64_t v16 = *(std::__shared_weak_count **)(v30 + 128);
    if (v16)
    {
      uint64_t v16 = std::__shared_weak_count::lock(v16);
      unint64_t v17 = v16;
      if (v16) {
        uint64_t v16 = *(std::__shared_weak_count **)(v15 + 120);
      }
    }
    else
    {
      unint64_t v17 = 0;
    }
    long long v19 = (ImsPrefs *)SipStack::prefs((SipStack *)v16);
    UseRTPDetectionAutoStartKey = (void **)ImsPrefs::getUseRTPDetectionAutoStartKey(v19);
    if (ImsPrefs::BOOLValue(v19, UseRTPDetectionAutoStartKey) && v32)
    {
      int v21 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 80))(v32);
      if (!v17) {
        goto LABEL_30;
      }
    }
    else
    {
      int v21 = 0;
      if (!v17)
      {
LABEL_30:
        if (!v21) {
          goto LABEL_31;
        }
        goto LABEL_36;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    if ((v21 & 1) == 0)
    {
LABEL_31:
      if (v14 && v14 == a2)
      {
        int v22 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 104))(v32);
        RTPActiveSessionSet::setActive((uint64_t)this + 80, 0, v22);
        (*(void (**)(uint64_t, void))(*(void *)v32 + 40))(v32, 0);
LABEL_40:
        if (!*((void *)this + 16))
        {
          std::string::basic_string[abi:ne180100]<0>(v36, "rtp.mgr");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v25 = ims::debug((uint64_t)v36, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"starting local ringback tone", 28);
          *(unsigned char *)(v25 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v25 + 17) = 0;
          if (v35 < 0) {
            operator delete(__p[0]);
          }
          if (v37 < 0) {
            operator delete(v36[0]);
          }
          BOOL v26 = (std::__shared_weak_count *)*((void *)this + 9);
          if (v26)
          {
            long long v27 = std::__shared_weak_count::lock(v26);
            if (v27)
            {
              uint64_t v28 = v27;
              uint64_t v29 = *((void *)this + 8);
              if (v29) {
                (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v29 + 96))(v29, a2, 1);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v28);
            }
          }
          *((void *)this + 16) = a2;
          goto LABEL_57;
        }
        std::string::basic_string[abi:ne180100]<0>(v36, "rtp.mgr");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v24 = ims::error((uint64_t)v36, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"RTPManager::startRingbackTone already playing for session id: ", 62);
        *(unsigned char *)(v24 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v24 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" Received: ", 11);
        *(unsigned char *)(v24 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v24 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v24 + 17) = 0;
LABEL_42:
        if (v35 < 0) {
          operator delete(__p[0]);
        }
        if (v37 < 0) {
          operator delete(v36[0]);
        }
LABEL_57:
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        goto LABEL_59;
      }
      if (!v14) {
        goto LABEL_40;
      }
      std::string::basic_string[abi:ne180100]<0>(v36, "rtp.mgr");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v23 = ims::error((uint64_t)v36, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"RTPManager startRingbackTone will not be playing ringtone, called for session: ", 79);
      *(unsigned char *)(v23 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v23 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" while the active session is: ", 30);
      *(unsigned char *)(v23 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v23 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_39:
      *(unsigned char *)(v23 + 17) = 0;
      goto LABEL_42;
    }
LABEL_36:
    std::string::basic_string[abi:ne180100]<0>(v36, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v23 = ims::debug((uint64_t)v36, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"Ignoring startRingbackTone. A session with autostart feature has started on its own for session ", 96);
    *(unsigned char *)(v23 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_39;
  }
  std::string::basic_string[abi:ne180100]<0>(v36, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v18 = ims::error((uint64_t)v36, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Session is null", 15);
  *(unsigned char *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v18 + 17) = 0;
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if (v37 < 0) {
    operator delete(v36[0]);
  }
LABEL_59:
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
}

void sub_1C564EDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void RTPManager::sdpSessionForSession(RTPManager *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 9);
  if (!v5) {
    goto LABEL_8;
  }
  size_t v7 = std::__shared_weak_count::lock(v5);
  if (!v7) {
    goto LABEL_8;
  }
  int v8 = v7;
  uint64_t v9 = *((void *)this + 8);
  if (!v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_8:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 128))(v9, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
}

void sub_1C564EFA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RTPManager::stopRingbackTone(RTPManager *this, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v17, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v17, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"stopRingbackTone", 16);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0)
  {
    operator delete(v17[0]);
    if (!a2) {
      return;
    }
  }
  else if (!a2)
  {
    return;
  }
  uint64_t v8 = *((void *)this + 16);
  if (v8 == a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::debug((uint64_t)v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"stopping local ringback tone", 28);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    char v10 = (std::__shared_weak_count *)*((void *)this + 9);
    if (v10)
    {
      int v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        BOOL v12 = v11;
        uint64_t v13 = *((void *)this + 8);
        if (v13) {
          (*(void (**)(uint64_t, uint64_t, void))(*(void *)v13 + 96))(v13, a2, 0);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
    *((void *)this + 16) = 0;
  }
  else if (v8)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::debug((uint64_t)v17, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"stopRingbackTone Session id mismatch, expecting: ", 49);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" Received: ", 11);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
  }
}

void sub_1C564F330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void RTPManager::stackControllerInitialized(void *a1, uint64_t a2, std::string *a3, uint64_t a4, uint64_t a5)
{
  std::string::basic_string[abi:ne180100]<0>(v30, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v10 = ims::debug((uint64_t)v30, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v11 = v10;
  BOOL v12 = *(void **)(v10 + 8);
  size_t v13 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v13);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"stackControllerInitialized", 26);
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" [stackController=", 18);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" stackId=", 9);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" appId=", 7);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" result=", 8);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a5 + 16))(a5, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  uint64_t v14 = (std::__shared_weak_count *)a1[9];
  if (v14)
  {
    uint64_t v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      char v16 = v15;
      unint64_t v17 = (void (***)(void, uint64_t, void))a1[8];
      if (v17)
      {
        std::string::basic_string[abi:ne180100]<0>(v30, "rtp.mgr");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v18 = ims::debug((uint64_t)v30, (uint64_t)__p);
        long long v19 = "Undefined RTP stack";
        if (*(void *)a2)
        {
          int v20 = *(_DWORD *)(*(void *)a2 + 40);
          int v21 = "kRTPStackTypeBaseband";
          if (v20 != 2) {
            int v21 = "Undefined RTP stack";
          }
          if (v20 == 1) {
            long long v19 = "kRTPStackTypeAVC";
          }
          else {
            long long v19 = (char *)v21;
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v26, v19);
        LoggableString::LoggableString(&v27, &v26);
        (*(void (**)(uint64_t, std::string *))(*(void *)v18 + 40))(v18, &v27);
        if (*(void *)a2) {
          int v22 = " stack controller initialized!";
        }
        else {
          int v22 = " stack controller NOT initialized properly!";
        }
        if (*(void *)a2) {
          uint64_t v23 = 30;
        }
        else {
          uint64_t v23 = 43;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)v22, v23);
        *(unsigned char *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v18 + 17) = 0;
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
        if (v29 < 0) {
          operator delete(__p[0]);
        }
        if (v31 < 0) {
          operator delete(v30[0]);
        }
        if (*(void *)a2) {
          int v24 = *(_DWORD *)(*(void *)a2 + 40);
        }
        else {
          int v24 = 0;
        }
        RTPManager::setRTPStackType((uint64_t)a1, a3, v24);
        int v25 = (*(uint64_t (**)(void, void))(**(void **)(a5 + 8) + 24))(*(void *)(a5 + 8), *(unsigned int *)(a5 + 16));
        (**v17)(v17, a4, v25 ^ 1u);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
}

void sub_1C564F7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'RTPManager::stackControllerInitialized(uint64_t a1, uint64_t a2, std::string *a3, uint64_t a4, uint64_t a5)
{
}

void RTPManager::stackError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v17, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v17, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"stackError", 10);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [stackController=", 18);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 72);
  if (v10)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      BOOL v12 = v11;
      uint64_t v13 = *(void *)(a1 + 64);
      if (v13)
      {
        int v14 = *(_DWORD *)(*(void *)a2 + 40);
        if (v14 == *(_DWORD *)(a1 + 336) || v14 == 1 && RTPManager::kRTTSessionCount) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 56))(v13, a3);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void sub_1C564FAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'RTPManager::stackError(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void RTPManager::handleMediaSessionInitialized(void *a1, uint64_t a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v20, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleMediaSessionInitialized", 29);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)a2 + 176))();
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::debug((uint64_t)v20, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"handleMediaSessionInitialized ", 30);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" result: ", 9);
  *(unsigned char *)(v11 + 17) = 0;
  if (a3) {
    BOOL v12 = "failed!";
  }
  else {
    BOOL v12 = "success!";
  }
  if (a3) {
    uint64_t v13 = 7;
  }
  else {
    uint64_t v13 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v12, v13);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  int v14 = (std::__shared_weak_count *)a1[9];
  if (v14)
  {
    uint64_t v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      char v16 = v15;
      uint64_t v17 = a1[8];
      if (v17) {
        (*(void (**)(uint64_t, uint64_t, BOOL))(*(void *)v17 + 8))(v17, v10, a3 == 0);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
}

void sub_1C564FE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'RTPManager::handleMediaSessionInitialized(uint64_t a1, uint64_t a2, int a3)
{
}

void RTPManager::handleMediaSessionTerminated(uint64_t a1, void *a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v47, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v6 = ims::debug((uint64_t)v47, (uint64_t)&__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleMediaSessionTerminated", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(v47[0]);
  }
  if (*a2)
  {
    uint64_t v10 = (RTPTransportManager *)(*(uint64_t (**)(void))(*(void *)*a2 + 176))(*a2);
    memset(&__p, 0, sizeof(__p));
    uint64_t v11 = *a2;
    if (*(char *)(*a2 + 79) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v11 + 56), *(void *)(v11 + 64));
    }
    else {
      std::string __p = *(std::string *)(v11 + 56);
    }
    RTPManager::releaseTerminationAssertion((RTPManager *)a1, (unint64_t)v10);
    RTPTransportManager::removeTransport(v10);
    if (a3 == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v47, "rtp.mgr");
      std::string::basic_string[abi:ne180100]<0>(v44, "");
      uint64_t v12 = ims::debug((uint64_t)v47, (uint64_t)v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"handleMediaSessionTerminated called with kInvalidState", 54);
      *(unsigned char *)(v12 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v47, "rtp.mgr");
      std::string::basic_string[abi:ne180100]<0>(v44, "");
      uint64_t v12 = ims::debug((uint64_t)v47, (uint64_t)v44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"handleMediaSessionTerminated ", 29);
      *(unsigned char *)(v12 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v12 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" result: ", 9);
      *(unsigned char *)(v12 + 17) = 0;
      if (a3) {
        uint64_t v13 = "failed!";
      }
      else {
        uint64_t v13 = "success!";
      }
      if (a3) {
        uint64_t v14 = 7;
      }
      else {
        uint64_t v14 = 8;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)v13, v14);
      *(unsigned char *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(unsigned char *)(v12 + 17) = 0;
    if (v45 < 0) {
      operator delete(v44[0]);
    }
    if (SHIBYTE(v48) < 0) {
      operator delete(v47[0]);
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 168) + 32))(&v42);
    if (v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
    MediaSessionBaseCollection::remove((MediaSessionBaseCollection *)(a1 + 136), (unint64_t)v10, &v40);
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    uint64_t v15 = *(void **)(a1 + 232);
    if (v15)
    {
      char v16 = (uint64_t *)(a1 + 232);
      do
      {
        unint64_t v17 = v15[4];
        BOOL v18 = v17 >= (unint64_t)v10;
        if (v17 >= (unint64_t)v10) {
          char v19 = v15;
        }
        else {
          char v19 = v15 + 1;
        }
        if (v18) {
          char v16 = v15;
        }
        uint64_t v15 = (void *)*v19;
      }
      while (*v19);
      if (v16 != (uint64_t *)(a1 + 232) && (unint64_t)v10 >= v16[4])
      {
        std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer((uint64_t **)(a1 + 224), v16);
        operator delete(v16);
      }
    }
    int v20 = *(void **)(a1 + 256);
    if (v20)
    {
      char v21 = (uint64_t *)(a1 + 256);
      do
      {
        unint64_t v22 = v20[4];
        BOOL v23 = v22 >= (unint64_t)v10;
        if (v22 >= (unint64_t)v10) {
          int v24 = v20;
        }
        else {
          int v24 = v20 + 1;
        }
        if (v23) {
          char v21 = v20;
        }
        int v20 = (void *)*v24;
      }
      while (*v24);
      if (v21 != (uint64_t *)(a1 + 256) && (unint64_t)v10 >= v21[4])
      {
        std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer((uint64_t **)(a1 + 248), v21);
        operator delete(v21);
      }
    }
    int v25 = *(void **)(a1 + 280);
    if (v25)
    {
      std::string v26 = (uint64_t *)(a1 + 280);
      do
      {
        unint64_t v27 = v25[4];
        BOOL v28 = v27 >= (unint64_t)v10;
        if (v27 >= (unint64_t)v10) {
          char v29 = v25;
        }
        else {
          char v29 = v25 + 1;
        }
        if (v28) {
          std::string v26 = v25;
        }
        int v25 = (void *)*v29;
      }
      while (*v29);
      if (v26 != (uint64_t *)(a1 + 280) && (unint64_t)v10 >= v26[4])
      {
        std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer((uint64_t **)(a1 + 272), v26);
        operator delete(v26);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v44, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(v38, "");
    uint64_t v30 = ims::debug((uint64_t)v44, (uint64_t)v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"There are ", 10);
    *(unsigned char *)(v30 + 17) = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 168) + 80))(v47);
    std::__list_imp<unsigned long long>::clear(v47);
    std::ostream::operator<<();
    *(unsigned char *)(v30 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)" sessions remaining for stack ID ", 33);
    *(unsigned char *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v30 + 32))(v30, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v30 + 17) = 0;
    if (v39 < 0) {
      operator delete(v38[0]);
    }
    if (v45 < 0) {
      operator delete(v44[0]);
    }
    if (a3 != 13)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 168) + 80))(v47);
      uint64_t v31 = v48;
      std::__list_imp<unsigned long long>::clear(v47);
      if (!v31)
      {
        uint64_t v32 = *(void **)(a1 + 200);
        uint64_t v33 = (void *)(a1 + 208);
        if (v32 != v33)
        {
          do
          {
            uint64_t v34 = v32[5];
            if (v34) {
              (*(void (**)(uint64_t, std::string *, void))(*(void *)v34 + 24))(v34, &__p, 0);
            }
            char v35 = (void *)v32[1];
            if (v35)
            {
              do
              {
                int v36 = v35;
                char v35 = (void *)*v35;
              }
              while (v35);
            }
            else
            {
              do
              {
                int v36 = (void *)v32[2];
                BOOL v37 = *v36 == (void)v32;
                uint64_t v32 = v36;
              }
              while (!v37);
            }
            uint64_t v32 = v36;
          }
          while (v36 != v33);
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5650584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **RTPManager::releaseTerminationAssertion(RTPManager *this, unint64_t a2)
{
  unint64_t v5 = a2;
  uint64_t v2 = (char *)this + 352;
  uint64_t result = (void **)ims::getValueFromMap<unsigned long long,ImsPowerAssertion *>((uint64_t)this + 352, &v5, 0);
  if (result)
  {
    uint64_t v4 = result;
    std::__tree<std::__value_type<unsigned long long,ImsPowerAssertion *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ImsPowerAssertion *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ImsPowerAssertion *>>>::__erase_unique<unsigned long long>((uint64_t)v2, &v5);
    ImsPowerAssertion::~ImsPowerAssertion(v4);
    return (void **)MEMORY[0x1C878E320]();
  }
  return result;
}

void non-virtual thunk to'RTPManager::handleMediaSessionTerminated(uint64_t a1, void *a2, int a3)
{
}

void RTPManager::handleMediaSessionConfigured(void *a1, uint64_t a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v20, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleMediaSessionConfigured", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)a2 + 176))();
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::debug((uint64_t)v20, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"handleMediaSessionConfigured ", 29);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" result: ", 9);
  *(unsigned char *)(v11 + 17) = 0;
  if (a3) {
    uint64_t v12 = "failed!";
  }
  else {
    uint64_t v12 = "success!";
  }
  if (a3) {
    uint64_t v13 = 7;
  }
  else {
    uint64_t v13 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v12, v13);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v14 = (std::__shared_weak_count *)a1[9];
  if (v14)
  {
    uint64_t v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      char v16 = v15;
      uint64_t v17 = a1[8];
      if (v17) {
        (*(void (**)(uint64_t, uint64_t, BOOL))(*(void *)v17 + 16))(v17, v10, a3 == 0);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
}

void sub_1C56509DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'RTPManager::handleMediaSessionConfigured(uint64_t a1, uint64_t a2, int a3)
{
}

void RTPManager::handleMediaSessionActivated(void *a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v37, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v37, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleMediaSessionActivated", 27);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)a2 + 176))();
  std::string::basic_string[abi:ne180100]<0>(v37, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::debug((uint64_t)v37, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"handleMediaSessionActivated ", 28);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" result: ", 9);
  *(unsigned char *)(v11 + 17) = 0;
  if (a3) {
    uint64_t v12 = "failed!";
  }
  else {
    uint64_t v12 = "success!";
  }
  if (a3) {
    uint64_t v13 = 7;
  }
  else {
    uint64_t v13 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v12, v13);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
  if (a3)
  {
    int v14 = (*(uint64_t (**)(void))(**(void **)a2 + 104))();
    uint64_t v15 = a1[11];
    if (!v15) {
      goto LABEL_27;
    }
    char v16 = a1 + 11;
    do
    {
      int v17 = *(_DWORD *)(v15 + 32);
      BOOL v18 = v17 < v14;
      if (v17 >= v14) {
        char v19 = (uint64_t *)v15;
      }
      else {
        char v19 = (uint64_t *)(v15 + 8);
      }
      if (!v18) {
        char v16 = (void *)v15;
      }
      uint64_t v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 11 && *((_DWORD *)v16 + 8) <= v14) {
      uint64_t v20 = v16[5];
    }
    else {
LABEL_27:
    }
      uint64_t v20 = 0;
    if (v20 == v10)
    {
      int v21 = (*(uint64_t (**)(void))(**(void **)a2 + 104))();
      RTPActiveSessionSet::setActive((uint64_t)(a1 + 10), 0, v21);
    }
  }
  unint64_t v22 = (std::__shared_weak_count *)a1[9];
  if (v22)
  {
    BOOL v23 = std::__shared_weak_count::lock(v22);
    if (v23)
    {
      uint64_t v24 = a1[8];
      if (v24)
      {
        int v25 = (*(uint64_t (**)(void))(**(void **)a2 + 104))();
        uint64_t v28 = a1[11];
        unint64_t v27 = a1 + 11;
        uint64_t v26 = v28;
        if (!v28) {
          goto LABEL_43;
        }
        char v29 = v27;
        do
        {
          int v30 = *(_DWORD *)(v26 + 32);
          BOOL v31 = v30 < v25;
          if (v30 >= v25) {
            uint64_t v32 = (uint64_t *)v26;
          }
          else {
            uint64_t v32 = (uint64_t *)(v26 + 8);
          }
          if (!v31) {
            char v29 = (void *)v26;
          }
          uint64_t v26 = *v32;
        }
        while (*v32);
        if (v29 != v27 && *((_DWORD *)v29 + 8) <= v25)
        {
          uint64_t v33 = v29[5];
          if (a3) {
            goto LABEL_45;
          }
        }
        else
        {
LABEL_43:
          uint64_t v33 = 0;
          if (a3)
          {
LABEL_45:
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 24))(v24, v10, a3);
            goto LABEL_51;
          }
        }
        if (v10 == v33) {
          goto LABEL_45;
        }
      }
    }
  }
  else
  {
    BOOL v23 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v37, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v34 = ims::debug((uint64_t)v37, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"Not forwarding activated notification to delegate for session ", 62);
  *(unsigned char *)(v34 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v34 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v34 + 17) = 0;
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  if (v38 < 0) {
    operator delete(v37[0]);
  }
LABEL_51:
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
}

void sub_1C5650F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'RTPManager::handleMediaSessionActivated(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void RTPManager::handleMediaSessionDeactivated(void *a1, uint64_t a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v20, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleMediaSessionDeactivated", 29);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)a2 + 176))();
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v11 = ims::debug((uint64_t)v20, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"handleMediaSessionDeactivated ", 30);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" result: ", 9);
  *(unsigned char *)(v11 + 17) = 0;
  if (a3) {
    uint64_t v12 = "failed!";
  }
  else {
    uint64_t v12 = "success!";
  }
  if (a3) {
    uint64_t v13 = 7;
  }
  else {
    uint64_t v13 = 8;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v12, v13);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  int v14 = (std::__shared_weak_count *)a1[9];
  if (v14)
  {
    uint64_t v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      char v16 = v15;
      uint64_t v17 = a1[8];
      if (v17) {
        (*(void (**)(uint64_t, uint64_t, BOOL))(*(void *)v17 + 32))(v17, v10, a3 == 0);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
}

void sub_1C5651300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'RTPManager::handleMediaSessionDeactivated(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t RTPManager::handleMediaSessionMediaError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v14, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v14, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleMediaSessionMediaError", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  uint64_t v10 = (*(uint64_t (**)(void))(**(void **)a2 + 176))();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 104))(a1, v10, a3);
}

void sub_1C5651558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'RTPManager::handleMediaSessionMediaError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return RTPManager::handleMediaSessionMediaError(a1 - 32, a2, a3);
}

void RTPManager::handleMediaSessionMediaError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v13, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handleMediaSessionMediaError ", 29);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 72);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 64);
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 40))(v9, a2, a3);
LABEL_15:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return;
      }
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v13, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v10 = ims::error((uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"handleMediaSessionError() does not have a delegate", 50);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v13[0]);
  }
  if (v8) {
    goto LABEL_15;
  }
}

void sub_1C5651780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void RTPManager::sendInputFrequencyLevelUpdate(RTPManager *this, uint64_t a2, const __CFData *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *((void *)this + 8);
      if (v9) {
        (*(void (**)(uint64_t, uint64_t, const __CFData *))(*(void *)v9 + 72))(v9, a2, a3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C565189C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RTPManager::sendOutputFrequencyLevelUpdate(RTPManager *this, uint64_t a2, const __CFData *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *((void *)this + 8);
      if (v9) {
        (*(void (**)(uint64_t, uint64_t, const __CFData *))(*(void *)v9 + 80))(v9, a2, a3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C565194C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RTPManager::sendPortUpdate(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(v18, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v8 = ims::debug((uint64_t)v18, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void **)(v8 + 8);
  size_t v11 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v11);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"sendPortUpdate", 14);
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" port=", 6);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  char v12 = (std::__shared_weak_count *)a1[9];
  if (v12)
  {
    char v13 = std::__shared_weak_count::lock(v12);
    if (v13)
    {
      char v14 = v13;
      uint64_t v15 = a1[8];
      if (v15) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 88))(v15, a2, a3, a4);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
}

void sub_1C5651B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void RTPManager::handoverStack(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v105, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(v103, "");
  uint64_t v4 = ims::debug((uint64_t)&v105, (uint64_t)v103);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handoverStack", 13);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" isDeinit=", 10);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v104 < 0) {
    operator delete(v103[0]);
  }
  if (SHIBYTE(v107) < 0) {
    operator delete(v105);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 72);
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 64);
      if (v10)
      {
        uint64_t v101 = 0;
        uint64_t v102 = 0;
        (*(void (**)(SipStack **__return_ptr))(*(void *)v10 + 192))(&v101);
        if (!v101)
        {
          std::string::basic_string[abi:ne180100]<0>(&v105, "rtp.mgr");
          std::string::basic_string[abi:ne180100]<0>(v103, "");
          uint64_t v38 = ims::error((uint64_t)&v105, (uint64_t)v103);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"SipStack is null", 16);
          *(unsigned char *)(v38 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v38 + 17) = 0;
          if (v104 < 0) {
            operator delete(v103[0]);
          }
          if (SHIBYTE(v107) < 0) {
            operator delete(v105);
          }
LABEL_158:
          if (v102) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v102);
          }
          goto LABEL_160;
        }
        size_t v11 = (ImsPrefs *)SipStack::prefs(v101);
        MediaSessionHandoverTimeoutMillisecondsKey = (void **)ImsPrefs::getMediaSessionHandoverTimeoutMillisecondsKey(v11);
        int v88 = ImsPrefs::intValue(v11, MediaSessionHandoverTimeoutMillisecondsKey);
        uint64_t v98 = 0;
        long long v99 = 0;
        uint64_t v100 = 0;
        (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 168) + 80))(&v98);
        unsigned int v97 = 0;
        uint64_t v105 = (long long *)a2;
        char v13 = std::__tree<std::__value_type<std::string,RTPStackType>,std::__map_value_compare<std::string,std::__value_type<std::string,RTPStackType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,RTPStackType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 312), (void **)a2, &v105);
        uint64_t v14 = *((unsigned int *)v13 + 14);
        unsigned int v97 = *((_DWORD *)v13 + 14);
        if (v100)
        {
LABEL_83:
          std::string::basic_string[abi:ne180100]<0>(&v105, "rtp");
          std::string::basic_string[abi:ne180100]<0>(v103, "");
          uint64_t v47 = ims::debug((uint64_t)&v105, (uint64_t)v103);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)"Performing handover for media sessions to stack [stackId=", 57);
          *(unsigned char *)(v47 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v47 + 32))(v47, a2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)" sessionCountOnStack=", 21);
          *(unsigned char *)(v47 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v47 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)"]", 1);
          *(unsigned char *)(v47 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v47 + 17) = 0;
          if (v104 < 0) {
            operator delete(v103[0]);
          }
          if (SHIBYTE(v107) < 0) {
            operator delete(v105);
          }
          uint64_t v105 = (long long *)&v97;
          uint64_t v48 = std::__tree<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::__map_value_compare<ims::Services::ServiceType,std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>,std::less<ims::Services::ServiceType>,true>,std::allocator<std::__value_type<ims::Services::ServiceType,BambiAccessBarring::UacBackoff>>>::__emplace_unique_key_args<ims::Services::ServiceType,std::piecewise_construct_t const&,std::tuple<ims::Services::ServiceType const&>,std::tuple<>>((uint64_t **)(a1 + 200), (int *)&v97, (uint64_t)&std::piecewise_construct, (_DWORD **)&v105);
          uint64_t v49 = (std::__shared_weak_count *)v48[6];
          long long v87 = v48[5];
          if (v49) {
            atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v105 = 0;
          uint64_t v106 = 0;
          uint64_t v107 = 0;
          int v50 = v99;
          if (v99 != &v98)
          {
            uint64_t v86 = v49;
            std::string v84 = v9;
            uint64_t v85 = (uint64_t *)(a1 + 88);
            while (1)
            {
              uint64_t v51 = v50[2];
              uint64_t v95 = 0;
              uint64_t v96 = 0;
              (*(void (**)(void ***__return_ptr))(**(void **)(a1 + 168) + 24))(&v95);
              char v52 = (*((uint64_t (**)(void **))*v95 + 23))(v95);
              char v53 = (void (*)(void))*((void *)*v95 + 24);
              if (v52) {
                break;
              }
              v53();
              RTPManager::handoverComplete(a1, v51, 0, v97, (unsigned __int8 *)a2);
LABEL_148:
              if (v96) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v96);
              }
              int v50 = (uint64_t *)v50[1];
              if (v50 == &v98)
              {
                uint64_t v9 = v84;
                if (v105 != v106)
                {
                  std::string::size_type v82 = *(MediaSessionHandover **)v105;
                  uint64_t v83 = *((void *)v105 + 1);
                  if (v83) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
                  }
                  MediaSessionHandover::handover(v82);
                }
                goto LABEL_155;
              }
            }
            v53();
            RTPSharedPointerBase::getShared<RTPManager>((void **)&v93, a1);
            uint64_t v54 = v95;
            uint64_t v55 = v96;
            size_t v56 = (std::__shared_weak_count *)operator new(0x220uLL);
            uint64_t v57 = v56;
            v56->__shared_owners_ = 0;
            v56->__shared_weak_owners_ = 0;
            v56->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6EF0;
            v103[0] = v54;
            v103[1] = (void **)&v55->__vftable;
            if (v55) {
              atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v58 = (std::__shared_weak_count *)v94;
            v109[0] = v93;
            v109[1] = v94;
            uint64_t v93 = 0;
            uint64_t v94 = 0;
            v108[0] = v87;
            v108[1] = v49;
            if (v49) {
              atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v59 = &v56[1].__vftable;
            MediaSessionHandover::MediaSessionHandover((uint64_t)&v56[1], (uint64_t *)v103, v51, v109, v108, a2, (dispatch_object_t *)(a1 + 344), v88);
            if (v49) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v49);
            }
            if (v58) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v58);
            }
            if (v55) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v55);
            }
            uint64_t v60 = a2;
            uint64_t shared_weak_owners = (std::__shared_weak_count *)v57[1].__shared_weak_owners_;
            if (shared_weak_owners)
            {
              if (shared_weak_owners->__shared_owners_ != -1)
              {
LABEL_108:
                (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 168) + 32))(&v91);
                if (v92) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v92);
                }
                uint64_t v62 = *(void *)(a1 + 168);
                atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v62 + 16))(&v89);
                if (v90) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v90);
                }
                if (v57) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v57);
                }
                int v63 = (*((uint64_t (**)(void **))*v95 + 13))(v95);
                uint64_t v64 = *v85;
                if (!*v85) {
                  goto LABEL_124;
                }
                uint64_t v65 = a1 + 88;
                do
                {
                  int v66 = *(_DWORD *)(v64 + 32);
                  BOOL v67 = v66 < v63;
                  if (v66 >= v63) {
                    int v68 = (uint64_t *)v64;
                  }
                  else {
                    int v68 = (uint64_t *)(v64 + 8);
                  }
                  if (!v67) {
                    uint64_t v65 = v64;
                  }
                  uint64_t v64 = *v68;
                }
                while (*v68);
                if ((uint64_t *)v65 != v85 && *(_DWORD *)(v65 + 32) <= v63) {
                  uint64_t v69 = *(void *)(v65 + 40);
                }
                else {
LABEL_124:
                }
                  uint64_t v69 = 0;
                if (v51 != v69) {
                  MediaSessionHandover::handover((MediaSessionHandover *)&v57[1]);
                }
                long long v70 = v106;
                if (v106 >= v107)
                {
                  uint64_t v72 = v105;
                  uint64_t v73 = v106 - v105;
                  unint64_t v74 = v73 + 1;
                  if ((unint64_t)(v73 + 1) >> 60) {
                    std::vector<std::shared_ptr<MediaSessionHandover>>::__throw_length_error[abi:ne180100]();
                  }
                  uint64_t v75 = (char *)v107 - (char *)v105;
                  if (((char *)v107 - (char *)v105) >> 3 > v74) {
                    unint64_t v74 = v75 >> 3;
                  }
                  if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v76 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v76 = v74;
                  }
                  if (v76 >> 60) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  long long v77 = (char *)operator new(16 * v76);
                  int v78 = &v77[16 * v73];
                  *(void *)int v78 = v59;
                  *((void *)v78 + 1) = v57;
                  atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
                  long long v71 = (long long *)(v78 + 16);
                  if (v70 == v72)
                  {
                    uint64_t v105 = (long long *)v78;
                    uint64_t v106 = (long long *)(v78 + 16);
                    uint64_t v107 = (long long *)&v77[16 * v76];
                  }
                  else
                  {
                    do
                    {
                      long long v79 = *--v70;
                      *((_OWORD *)v78 - 1) = v79;
                      v78 -= 16;
                      *(void *)long long v70 = 0;
                      *((void *)v70 + 1) = 0;
                    }
                    while (v70 != v72);
                    long long v70 = v105;
                    uint64_t v80 = v106;
                    uint64_t v105 = (long long *)v78;
                    uint64_t v106 = v71;
                    uint64_t v107 = (long long *)&v77[16 * v76];
                    while (v80 != v70)
                    {
                      uint64_t v81 = (std::__shared_weak_count *)*((void *)v80 - 1);
                      if (v81) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v81);
                      }
                      --v80;
                    }
                  }
                  if (v70) {
                    operator delete(v70);
                  }
                }
                else
                {
                  *(void *)uint64_t v106 = v59;
                  *((void *)v70 + 1) = v57;
                  atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
                  long long v71 = v70 + 1;
                }
                uint64_t v106 = v71;
                std::__shared_weak_count::__release_shared[abi:ne180100](v57);
                a2 = v60;
                uint64_t v49 = v86;
                goto LABEL_148;
              }
              atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v57->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              v57[1].__shared_owners_ = (uint64_t)v59;
              v57[1].__shared_weak_owners_ = (uint64_t)v57;
              std::__shared_weak_count::__release_weak(shared_weak_owners);
            }
            else
            {
              atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v57->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              v57[1].__shared_owners_ = (uint64_t)v59;
              v57[1].__shared_weak_owners_ = (uint64_t)v57;
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v57);
            goto LABEL_108;
          }
LABEL_155:
          v103[0] = (void **)&v105;
          std::vector<std::shared_ptr<BambiCallAction>>::__destroy_vector::operator()[abi:ne180100](v103);
          if (v49) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v49);
          }
          std::__list_imp<unsigned long long>::clear(&v98);
          goto LABEL_158;
        }
        std::string::basic_string[abi:ne180100]<0>(&v105, "rtp");
        std::string::basic_string[abi:ne180100]<0>(v103, "");
        uint64_t v15 = ims::debug((uint64_t)&v105, (uint64_t)v103);
        size_t v16 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v16);
        *(unsigned char *)(v15 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v15 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"handoverComplete", 16);
        *(unsigned char *)(v15 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" Sending handover complete notification for stack type [stackId=", 64);
        *(unsigned char *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 32))(v15, a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)" stackType=", 11);
        *(unsigned char *)(v15 + 17) = 0;
        if (v14 == 2) {
          char v17 = "baseband";
        }
        else {
          char v17 = "avc";
        }
        if (v14 == 2) {
          uint64_t v18 = 8;
        }
        else {
          uint64_t v18 = 3;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)v17, v18);
        *(unsigned char *)(v15 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v15 + 17) = 0;
        if (v104 < 0) {
          operator delete(v103[0]);
        }
        if (SHIBYTE(v107) < 0) {
          operator delete(v105);
        }
        char v19 = *(std::__shared_weak_count **)(a1 + 72);
        if (v19)
        {
          uint64_t v20 = std::__shared_weak_count::lock(v19);
          if (v20)
          {
            char v21 = v20;
            uint64_t v22 = *(void *)(a1 + 64);
            if (v22)
            {
              uint64_t v23 = *(unsigned __int8 *)(a2 + 23);
              if ((v23 & 0x80u) == 0) {
                uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
              }
              else {
                uint64_t v24 = *(void *)(a2 + 8);
              }
              uint64_t v25 = *(unsigned __int8 *)(a1 + 399);
              int v26 = (char)v25;
              if ((v25 & 0x80u) != 0) {
                uint64_t v25 = *(void *)(a1 + 384);
              }
              if (v24 == v25)
              {
                if (v26 >= 0) {
                  unint64_t v27 = (unsigned __int8 *)(a1 + 376);
                }
                else {
                  unint64_t v27 = *(unsigned __int8 **)(a1 + 376);
                }
                if ((v23 & 0x80) != 0)
                {
                  BOOL v36 = memcmp(*(const void **)a2, v27, *(void *)(a2 + 8)) == 0;
                }
                else if (*(unsigned char *)(a2 + 23))
                {
                  uint64_t v28 = v23 - 1;
                  char v29 = (unsigned __int8 *)a2;
                  do
                  {
                    int v31 = *v29++;
                    int v30 = v31;
                    int v33 = *v27++;
                    int v32 = v33;
                    BOOL v35 = v28-- != 0;
                    BOOL v36 = v30 == v32;
                  }
                  while (v30 == v32 && v35);
                }
                else
                {
                  BOOL v36 = 1;
                }
              }
              else
              {
                BOOL v36 = 0;
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL))(*(void *)v22 + 64))(v22, a2, v14, v36);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
        }
        uint64_t v39 = *(unsigned __int8 *)(a2 + 23);
        if ((v39 & 0x80u) == 0) {
          uint64_t v40 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v40 = *(void *)(a2 + 8);
        }
        uint64_t v41 = *(unsigned __int8 *)(a1 + 423);
        int v42 = (char)v41;
        if ((v41 & 0x80u) != 0) {
          uint64_t v41 = *(void *)(a1 + 408);
        }
        if (v40 != v41) {
          goto LABEL_72;
        }
        if (v42 >= 0) {
          char v43 = (unsigned __int8 *)(a1 + 400);
        }
        else {
          char v43 = *(unsigned __int8 **)(a1 + 400);
        }
        if ((v39 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a2, v43, *(void *)(a2 + 8)))
          {
LABEL_72:
            std::string::basic_string[abi:ne180100]<0>(&v105, "rtp");
            std::string::basic_string[abi:ne180100]<0>(v103, "");
            uint64_t v45 = ims::error((uint64_t)&v105, (uint64_t)v103);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"Empty handover completed for stack ", 35);
            *(unsigned char *)(v45 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 32))(v45, a2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)" which is not currently being handed over ", 42);
            *(unsigned char *)(v45 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 32))(v45, a1 + 400);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v45 + 17) = 0;
LABEL_74:
            if (v104 < 0) {
              operator delete(v103[0]);
            }
            if (SHIBYTE(v107) < 0) {
              operator delete(v105);
            }
            if (*(void *)(a1 + 440))
            {
              std::string::operator=((std::string *)(a1 + 400), (const std::string *)(*(void *)(a1 + 424) + 32));
              std::__tree<std::string>::erase((uint64_t **)(a1 + 424), *(void *)(a1 + 424));
              RTPManager::handoverStack(a1, a1 + 400);
            }
            else if (*(char *)(a1 + 423) < 0)
            {
              **(unsigned char **)(a1 + 400) = 0;
              *(void *)(a1 + 408) = 0;
            }
            else
            {
              *(unsigned char *)(a1 + 400) = 0;
              *(unsigned char *)(a1 + 423) = 0;
            }
            goto LABEL_83;
          }
        }
        else if (*(unsigned char *)(a2 + 23))
        {
          int v44 = (unsigned __int8 *)a2;
          while (*v44 == *v43)
          {
            ++v44;
            ++v43;
            if (!--v39) {
              goto LABEL_73;
            }
          }
          goto LABEL_72;
        }
LABEL_73:
        std::string::basic_string[abi:ne180100]<0>(&v105, "rtp");
        std::string::basic_string[abi:ne180100]<0>(v103, "");
        uint64_t v46 = ims::debug((uint64_t)&v105, (uint64_t)v103);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)"Empty handover completed for ", 29);
        *(unsigned char *)(v46 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v46 + 32))(v46, a2);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v46 + 17) = 0;
        goto LABEL_74;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v105, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(v103, "");
  uint64_t v37 = ims::error((uint64_t)&v105, (uint64_t)v103);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"RTPManagerDelegate is null", 26);
  *(unsigned char *)(v37 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v37 + 17) = 0;
  if (v104 < 0) {
    operator delete(v103[0]);
  }
  if (SHIBYTE(v107) < 0) {
    operator delete(v105);
  }
LABEL_160:
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C5652AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  std::__list_imp<unsigned long long>::clear(&a27);
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(a1);
}

void RTPManager::handoverComplete(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int8 *a5)
{
  std::string::basic_string[abi:ne180100]<0>(&v117, "rtp");
  std::string::basic_string[abi:ne180100]<0>(v115, "");
  uint64_t v9 = ims::debug((uint64_t)&v117, (uint64_t)v115);
  uint64_t v97 = a2;
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v10 = v9;
  size_t v11 = *(void **)(v9 + 8);
  size_t v12 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v12);
  uint64_t v13 = a2;
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"handoverComplete", 16);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" Session completed handover [sessionId=", 39);
  *(unsigned char *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" stackId=", 9);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v10 + 32))(v10, a5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" stackType=", 11);
  *(unsigned char *)(v10 + 17) = 0;
  if (a4 == 2) {
    uint64_t v14 = "baseband";
  }
  else {
    uint64_t v14 = "avc";
  }
  if (a4 == 2) {
    uint64_t v15 = 8;
  }
  else {
    uint64_t v15 = 3;
  }
  uint64_t v93 = v15;
  uint64_t v94 = (uint64_t)v14;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)v14, v15);
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v116 < 0) {
    operator delete(v115[0]);
  }
  if (v119 < 0) {
    operator delete(v117);
  }
  long long v113 = 0;
  long long v114 = 0;
  (*(void (**)(char **__return_ptr))(**(void **)(a1 + 168) + 24))(&v117);
  if (v117
  {
    long long v113 = v16;
    long long v114 = v118;
    char v17 = &v117;
  }
  else
  {
    char v17 = (char **)&v113;
  }
  const char *v17 = 0;
  v17[1] = 0;
  if (v118) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v118);
  }
  uint64_t v18 = v113;
  if (v113)
  {
    char v19 = (std::__shared_weak_count *)v113[18];
    if (v19)
    {
      uint64_t v20 = v113[17];
      atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      char v21 = std::__shared_weak_count::lock(v19);
      if (v21) {
        uint64_t v22 = v20;
      }
      else {
        uint64_t v22 = 0;
      }
      std::__shared_weak_count::__release_weak(v19);
    }
    else
    {
      uint64_t v22 = 0;
      char v21 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 168) + 32))(&v111);
    if (v112) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v112);
    }
    if (v22)
    {
      RTPSharedPointerBase::getShared<RTPManager>((void **)&v117, a1);
      uint64_t v25 = v118;
      if (v117) {
        int v26 = v117 + 32;
      }
      else {
        int v26 = 0;
      }
      uint64_t v109 = v26;
      uint64_t v110 = v118;
      if (v118) {
        atomic_fetch_add_explicit(&v118->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, char **))(*(void *)v22 + 160))(v22, &v109);
      if (v110) {
        std::__shared_weak_count::__release_weak(v110);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      uint64_t v27 = *(void *)(a1 + 168);
      uint64_t v105 = v22;
      uint64_t v106 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v27 + 16))(&v107);
      if (v108) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v108);
      }
      if (v106) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v106);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v117, "rtp.mgr");
      std::string::basic_string[abi:ne180100]<0>(v115, "");
      uint64_t v28 = ims::warn((uint64_t)&v117, (uint64_t)v115);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"Session that completed handover does not have a valid queued interface [sessionId=", 82);
      *(unsigned char *)(v28 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v28 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v28 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v28 + 17) = 0;
      if (v116 < 0) {
        operator delete(v115[0]);
      }
      if (v119 < 0) {
        operator delete(v117);
      }
    }
    int v29 = (*(uint64_t (**)(void *))(*v18 + 104))(v18);
    uint64_t v30 = *(void *)(a1 + 88);
    if (!v30) {
      goto LABEL_61;
    }
    uint64_t v31 = a1 + 88;
    do
    {
      int v32 = *(_DWORD *)(v30 + 32);
      BOOL v33 = v32 < v29;
      if (v32 >= v29) {
        uint64_t v34 = (uint64_t *)v30;
      }
      else {
        uint64_t v34 = (uint64_t *)(v30 + 8);
      }
      if (!v33) {
        uint64_t v31 = v30;
      }
      uint64_t v30 = *v34;
    }
    while (*v34);
    if (v31 != a1 + 88 && *(_DWORD *)(v31 + 32) <= v29)
    {
      uint64_t v35 = *(void *)(v31 + 40);
      if (a3) {
        goto LABEL_69;
      }
    }
    else
    {
LABEL_61:
      uint64_t v35 = 0;
      if (a3) {
        goto LABEL_69;
      }
    }
    if (v35 != v97)
    {
      std::string::basic_string[abi:ne180100]<0>(&v117, "rtp.mgr");
      std::string::basic_string[abi:ne180100]<0>(v115, "");
      uint64_t v36 = ims::debug((uint64_t)&v117, (uint64_t)v115);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"Unblock queued actions for non-active session [sessionId=", 57);
      *(unsigned char *)(v36 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v36 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v36 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v36 + 17) = 0;
      if (v116 < 0) {
        operator delete(v115[0]);
      }
      if (v119 < 0) {
        operator delete(v117);
      }
      (*(void (**)(void *))(*v18 + 192))(v18);
      goto LABEL_73;
    }
LABEL_69:
    if (a3 == 12)
    {
      uint64_t v103 = v22;
      char v104 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 64))(a1, &v103, 12);
      uint64_t v37 = v104;
      goto LABEL_82;
    }
LABEL_73:
    uint64_t v38 = *(std::__shared_weak_count **)(a1 + 72);
    if (v38)
    {
      uint64_t v38 = std::__shared_weak_count::lock(v38);
      uint64_t v37 = v38;
      if (v38) {
        uint64_t v38 = *(std::__shared_weak_count **)(a1 + 64);
      }
      if (!a3) {
        goto LABEL_82;
      }
    }
    else
    {
      uint64_t v37 = 0;
      if (!a3)
      {
LABEL_82:
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        goto LABEL_86;
      }
    }
    if (a3 != 11 && v38) {
      ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))v38->__vftable[1].~__shared_weak_count)(v38, v97, a3);
    }
    goto LABEL_82;
  }
  std::string::basic_string[abi:ne180100]<0>(&v117, "rtp");
  std::string::basic_string[abi:ne180100]<0>(v115, "");
  uint64_t v23 = ims::warn((uint64_t)&v117, (uint64_t)v115);
  size_t v24 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v24);
  *(unsigned char *)(v23 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v23 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"handoverComplete", 16);
  *(unsigned char *)(v23 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" handover completed for non-handover session", 44);
  *(unsigned char *)(v23 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v23 + 17) = 0;
  uint64_t v13 = v97;
  if (v116 < 0) {
    operator delete(v115[0]);
  }
  if (v119 < 0) {
    operator delete(v117);
  }
LABEL_86:
  std::string::basic_string[abi:ne180100]<0>(&v117, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(v115, "");
  uint64_t v39 = ims::debug((uint64_t)&v117, (uint64_t)v115);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"Checking if all sessions have completed handover [stackId=", 58);
  *(unsigned char *)(v39 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v39 + 32))(v39, a5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v39 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v39 + 17) = 0;
  if (v116 < 0) {
    operator delete(v115[0]);
  }
  if (v119 < 0) {
    operator delete(v117);
  }
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v102 = 0;
  uint64_t v95 = a5;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 168) + 80))(&v100);
  uint64_t v40 = v101;
  if (v101 == &v100) {
    goto LABEL_110;
  }
  LOBYTE(v41) = 1;
  do
  {
    lpsrc = 0;
    long long v99 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 168) + 24))(&lpsrc);
    if (lpsrc
    {
      char v43 = v42;
      uint64_t v41 = v99;
      if (v99) {
        atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v117, "rtp.mgr");
      std::string::basic_string[abi:ne180100]<0>(v115, "");
      uint64_t v44 = ims::debug((uint64_t)&v117, (uint64_t)v115);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"Session has not completed handover yet [sessionId=", 50);
      *(unsigned char *)(v44 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v44 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v44 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v44 + 17) = 0;
      if (v116 < 0) {
        operator delete(v115[0]);
      }
      if (v119 < 0) {
        operator delete(v117);
      }
      BOOL v45 = *((unsigned char *)v43 + 504) == 0;
      if (*((unsigned char *)v43 + 504)) {
        MediaSessionHandover::cancelTimerForDelayedStackSwitch(v43, 1);
      }
      if (v41)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        LOBYTE(v41) = 0;
      }
    }
    else
    {
      BOOL v45 = 1;
    }
    if (v99) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v99);
    }
    if (!v45) {
      break;
    }
    uint64_t v40 = (uint64_t *)v40[1];
  }
  while (v40 != &v100);
  uint64_t v13 = v97;
  if (v41)
  {
LABEL_110:
    std::string::basic_string[abi:ne180100]<0>(&v117, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(v115, "");
    uint64_t v46 = ims::debug((uint64_t)&v117, (uint64_t)v115);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v46 + 8), (uint64_t)"All sessions completed handover", 31);
    *(unsigned char *)(v46 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v46 + 17) = 0;
    if (v116 < 0) {
      operator delete(v115[0]);
    }
    if (v119 < 0) {
      operator delete(v117);
    }
    uint64_t v47 = v113;
    if (v113)
    {
      int v48 = (*(uint64_t (**)(void *))(*v113 + 104))(v113);
      uint64_t v49 = *(void *)(a1 + 88);
      if (!v49) {
        goto LABEL_125;
      }
      uint64_t v50 = a1 + 88;
      do
      {
        int v51 = *(_DWORD *)(v49 + 32);
        BOOL v52 = v51 < v48;
        if (v51 >= v48) {
          char v53 = (uint64_t *)v49;
        }
        else {
          char v53 = (uint64_t *)(v49 + 8);
        }
        if (!v52) {
          uint64_t v50 = v49;
        }
        uint64_t v49 = *v53;
      }
      while (*v53);
      if (v50 != a1 + 88 && *(_DWORD *)(v50 + 32) <= v48) {
        uint64_t v54 = *(void *)(v50 + 40);
      }
      else {
LABEL_125:
      }
        uint64_t v54 = 0;
      if (v54 == v13)
      {
        std::string::basic_string[abi:ne180100]<0>(&v117, "rtp.mgr");
        std::string::basic_string[abi:ne180100]<0>(v115, "");
        uint64_t v55 = ims::debug((uint64_t)&v117, (uint64_t)v115);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"Unblock queued actions for active session [sessionId=", 53);
        *(unsigned char *)(v55 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v55 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v55 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v55 + 17) = 0;
        if (v116 < 0) {
          operator delete(v115[0]);
        }
        if (v119 < 0) {
          operator delete(v117);
        }
        (*(void (**)(void *))(*v47 + 192))(v47);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v117, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(v115, "");
    uint64_t v56 = ims::debug((uint64_t)&v117, (uint64_t)v115);
    size_t v57 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v56 + 8), *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v57);
    *(unsigned char *)(v56 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v56 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v56 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v56 + 8), (uint64_t)"cleanupNonActiveStackControllers", 32);
    *(unsigned char *)(v56 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v56 + 8), (uint64_t)" [stackId=", 10);
    *(unsigned char *)(v56 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v56 + 32))(v56, v95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v56 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v56 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v56 + 64))(v56, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v56 + 17) = 0;
    if (v116 < 0) {
      operator delete(v115[0]);
    }
    if (v119 < 0) {
      operator delete(v117);
    }
    int v58 = *(void **)(a1 + 200);
    if (v58 != (void *)(a1 + 208))
    {
      do
      {
        uint64_t v59 = v58[5];
        if (v59)
        {
          int v60 = *(_DWORD *)(v59 + 40);
          uint64_t v61 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 312, (void **)v95);
          int v62 = (void **)(a1 + 320) == v61 ? 0 : *((_DWORD *)v61 + 14);
          if (v60 != v62) {
            (*(void (**)(void, unsigned __int8 *))(*(void *)v58[5] + 32))(v58[5], v95);
          }
        }
        int v63 = (void *)v58[1];
        if (v63)
        {
          do
          {
            uint64_t v64 = v63;
            int v63 = (void *)*v63;
          }
          while (v63);
        }
        else
        {
          do
          {
            uint64_t v64 = (void *)v58[2];
            BOOL v65 = *v64 == (void)v58;
            int v58 = v64;
          }
          while (!v65);
        }
        int v58 = v64;
      }
      while (v64 != (void *)(a1 + 208));
    }
    std::string::basic_string[abi:ne180100]<0>(&v117, "rtp");
    std::string::basic_string[abi:ne180100]<0>(v115, "");
    uint64_t v66 = ims::debug((uint64_t)&v117, (uint64_t)v115);
    size_t v67 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v67);
    *(unsigned char *)(v66 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v66 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), (uint64_t)"handoverComplete", 16);
    *(unsigned char *)(v66 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), (uint64_t)" Sending handover complete notification for stack type [stackId=", 64);
    *(unsigned char *)(v66 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v66 + 32))(v66, v95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), (uint64_t)" stackType=", 11);
    *(unsigned char *)(v66 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), v94, v93);
    *(unsigned char *)(v66 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v66 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v66 + 17) = 0;
    if (v116 < 0) {
      operator delete(v115[0]);
    }
    if (v119 < 0) {
      operator delete(v117);
    }
    int v68 = *(std::__shared_weak_count **)(a1 + 72);
    if (v68)
    {
      uint64_t v69 = std::__shared_weak_count::lock(v68);
      if (v69)
      {
        long long v70 = v69;
        uint64_t v71 = *(void *)(a1 + 64);
        if (v71)
        {
          uint64_t v72 = v95[23];
          if ((v72 & 0x80u) == 0) {
            uint64_t v73 = v95[23];
          }
          else {
            uint64_t v73 = *((void *)v95 + 1);
          }
          uint64_t v74 = *(unsigned __int8 *)(a1 + 399);
          int v75 = (char)v74;
          if ((v74 & 0x80u) != 0) {
            uint64_t v74 = *(void *)(a1 + 384);
          }
          if (v73 == v74)
          {
            if (v75 >= 0) {
              unint64_t v76 = (unsigned __int8 *)(a1 + 376);
            }
            else {
              unint64_t v76 = *(unsigned __int8 **)(a1 + 376);
            }
            if ((v72 & 0x80) != 0)
            {
              BOOL v85 = memcmp(*(const void **)v95, v76, *((void *)v95 + 1)) == 0;
            }
            else if (v95[23])
            {
              uint64_t v77 = v72 - 1;
              int v78 = v95;
              do
              {
                int v80 = *v78++;
                int v79 = v80;
                int v82 = *v76++;
                int v81 = v82;
                BOOL v84 = v77-- != 0;
                BOOL v85 = v79 == v81;
              }
              while (v79 == v81 && v84);
            }
            else
            {
              BOOL v85 = 1;
            }
          }
          else
          {
            BOOL v85 = 0;
          }
          (*(void (**)(uint64_t, unsigned __int8 *, void, BOOL))(*(void *)v71 + 64))(v71, v95, a4, v85);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v70);
      }
    }
    uint64_t v86 = v95[23];
    if ((v86 & 0x80u) == 0) {
      uint64_t v87 = v95[23];
    }
    else {
      uint64_t v87 = *((void *)v95 + 1);
    }
    uint64_t v88 = *(unsigned __int8 *)(a1 + 423);
    int v89 = (char)v88;
    if ((v88 & 0x80u) != 0) {
      uint64_t v88 = *(void *)(a1 + 408);
    }
    if (v87 == v88)
    {
      if (v89 >= 0) {
        uint64_t v90 = (unsigned __int8 *)(a1 + 400);
      }
      else {
        uint64_t v90 = *(unsigned __int8 **)(a1 + 400);
      }
      if ((v86 & 0x80) == 0)
      {
        if (v95[23])
        {
          uint64_t v91 = v95;
          while (*v91 == *v90)
          {
            ++v91;
            ++v90;
            if (!--v86) {
              goto LABEL_197;
            }
          }
          goto LABEL_196;
        }
LABEL_197:
        std::string::basic_string[abi:ne180100]<0>(&v117, "rtp");
        std::string::basic_string[abi:ne180100]<0>(v115, "");
        uint64_t v92 = ims::debug((uint64_t)&v117, (uint64_t)v115);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v92 + 8), (uint64_t)"Handover completed for ", 23);
        *(unsigned char *)(v92 + 17) = 0;
        (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v92 + 32))(v92, v95);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v92 + 64))(v92, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_198;
      }
      if (!memcmp(*(const void **)v95, v90, *((void *)v95 + 1))) {
        goto LABEL_197;
      }
    }
LABEL_196:
    std::string::basic_string[abi:ne180100]<0>(&v117, "rtp");
    std::string::basic_string[abi:ne180100]<0>(v115, "");
    uint64_t v92 = ims::error((uint64_t)&v117, (uint64_t)v115);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v92 + 8), (uint64_t)"Handover completed for stack ", 29);
    *(unsigned char *)(v92 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v92 + 32))(v92, v95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v92 + 8), (uint64_t)" which is not currently being handed over ", 42);
    *(unsigned char *)(v92 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v92 + 32))(v92, a1 + 400);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v92 + 64))(v92, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_198:
    *(unsigned char *)(v92 + 17) = 0;
    if (v116 < 0) {
      operator delete(v115[0]);
    }
    if (v119 < 0) {
      operator delete(v117);
    }
    if (*(void *)(a1 + 440))
    {
      std::string::operator=((std::string *)(a1 + 400), (const std::string *)(*(void *)(a1 + 424) + 32));
      std::__tree<std::string>::erase((uint64_t **)(a1 + 424), *(void *)(a1 + 424));
      RTPManager::handoverStack(a1, a1 + 400);
    }
    else if (*(char *)(a1 + 423) < 0)
    {
      **(unsigned char **)(a1 + 400) = 0;
      *(void *)(a1 + 408) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 400) = 0;
      *(unsigned char *)(a1 + 423) = 0;
    }
  }
  std::__list_imp<unsigned long long>::clear(&v100);
  if (v114) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v114);
  }
}

void sub_1C5654194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  uint64_t v31 = *(std::__shared_weak_count **)(v29 - 144);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(exception_object);
}

void RTPSharedPointerBase::getShared<RTPManager>(void **p_lpsrc, uint64_t a2)
{
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (void *)(a2 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v6;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void RTPManager::processDataFromSocket(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "rtp");
  std::string::basic_string[abi:ne180100]<0>(&v24, "");
  uint64_t v6 = ims::warn((uint64_t)__p, (uint64_t)&v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"RTPManager::processDataFromSocket received unexpected data with ", 64);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" bytes from: ", 13);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(void, uint64_t))(*(void *)*a4 + 40))(*a4, v6);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
  if (SBYTE7(v16) < 0) {
    operator delete(__p[0]);
  }
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v24, "");
  if (a3 >= 0xC)
  {
    uint64_t v23 = 0;
    memset(v22, 0, sizeof(v22));
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    *(_OWORD *)char v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    *(_OWORD *)std::string __p = 0u;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    for (uint64_t i = 0; i != 12; ++i)
    {
      uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"0x", 2);
      *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
      uint64_t v9 = (void *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], v13);
    if (SHIBYTE(v25) < 0) {
      operator delete((void *)v24);
    }
    long long v24 = *(_OWORD *)v13;
    uint64_t v25 = v14;
    __p[0] = *(void **)MEMORY[0x1E4FBA418];
    *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
    __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C878E270](v22);
  }
  uint64_t v10 = HIBYTE(v25);
  char v11 = HIBYTE(v25);
  if (v25 < 0) {
    uint64_t v10 = *((void *)&v24 + 1);
  }
  if (v10)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "rtp");
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    uint64_t v12 = ims::warn((uint64_t)__p, (uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"First 12 Bytes: ", 16);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, long long *))(*(void *)v12 + 32))(v12, &v24);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    if (SHIBYTE(v14) < 0) {
      operator delete(v13[0]);
    }
    if (SBYTE7(v16) < 0) {
      operator delete(__p[0]);
    }
    char v11 = HIBYTE(v25);
  }
  if (v11 < 0) {
    operator delete((void *)v24);
  }
}

void sub_1C5654850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::ostringstream::~ostringstream((uint64_t)&__p);
  if (*(char *)(v21 - 73) < 0) {
    operator delete(*(void **)(v21 - 96));
  }
  _Unwind_Resume(a1);
}

void RTPManager::processDataFromNw(RTPManager *this)
{
  std::string::basic_string[abi:ne180100]<0>(v4, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v1 = ims::warn((uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v1 + 8), (uint64_t)"processDataFromNw", 17);
  *(unsigned char *)(v1 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v1 + 8), (uint64_t)" received unexpected data with ", 31);
  *(unsigned char *)(v1 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v1 + 17) = 0;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1C56549D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RTPManager::reportCodecForSessionId(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4)
  {
    size_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 64);
      if (v9)
      {
        if (*(char *)(a3 + 23) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
        }
        else {
          std::string __p = *(std::string *)a3;
        }
        (*(void (**)(uint64_t, uint64_t, std::string *))(*(void *)v9 + 160))(v9, a2, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C5654AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void RTPManager::interfaceForSession(RTPManager *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  char v3 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v3)
  {
    char v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 8);
      if (v7)
      {
        (*(void (**)(long long *__return_ptr))(*(void *)v7 + 136))(&v8);
        *(_OWORD *)a2 = v8;
        a2[2] = v9;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C5654BA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RTPManager::addressForSession(RTPManager *this@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  char v5 = (std::__shared_weak_count *)*((void *)this + 9);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v5);
  if (!v7) {
    goto LABEL_8;
  }
  long long v8 = v7;
  uint64_t v9 = *((void *)this + 8);
  if (!v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_8:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 144))(v9, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
}

void sub_1C5654C5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RTPManager::iterationComplete(void *a1@<X0>, void **a2@<X1>, void **a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v21, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v21, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  long long v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"iterationComplete", 17);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [collection=", 13);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  RTPSharedPointerBase::getShared<MediaSessionCollectionIterator>((uint64_t)a1, v21);
  uint64_t v10 = *a2;
  char v11 = v21[0];
  if (v21[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v21[1]);
  }
  if (v10 != v11)
  {
    RTPSharedPointerBase::getShared<MediaSessionCollectionIterator>((uint64_t)a1, v21);
    uint64_t v12 = (void *)a1[21];
    uint64_t v13 = v21[0];
    if (v21[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v21[1]);
    }
    if (v12 != v13)
    {
      uint64_t v14 = a1[21];
      uint64_t v15 = (std::__shared_weak_count *)a2[1];
      long long v18 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void **__return_ptr))(*(void *)v14 + 88))(v21);
      long long v16 = *(_OWORD *)v21;
      v21[0] = 0;
      v21[1] = 0;
      long long v17 = (std::__shared_weak_count *)a1[22];
      *(_OWORD *)(a1 + 21) = v16;
      if (v17)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        if (v21[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v21[1]);
        }
      }
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
    }
  }
  RTPSharedPointerBase::getShared<MediaSessionCollectionIterator>((uint64_t)a1, a3);
}

void sub_1C5654EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'RTPManager::iterationComplete(uint64_t a1@<X0>, void **a2@<X1>, void **a3@<X8>)
{
}

void RTPManager::performBlock(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  char v5 = *(std::__shared_weak_count **)(a1 + 72);
  if (v5)
  {
    size_t v9 = std::__shared_weak_count::lock(v5);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)(a1 + 64);
      if (v11)
      {
        uint64_t v12 = (std::__shared_weak_count *)a3[1];
        uint64_t v13 = *a3;
        uint64_t v14 = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v11 + 216))(v11, a2, &v13, a4);
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

void sub_1C5654FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void RTPManager::performUnprotectedBlock(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      long long v8 = v7;
      uint64_t v9 = *(void *)(a1 + 64);
      if (v9) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 208))(v9, a2, a3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C5655088(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t RTPManager::srvccHandoverStarted(uint64_t a1, unsigned __int8 *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v40, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v40, (uint64_t)&__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"srvccHandoverStarted", 20);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [stackId=", 10);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v5 + 32))(v5, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SHIBYTE(v38) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete(v40);
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 423);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 423);
  }
  else {
    uint64_t v9 = *(void *)(a1 + 408);
  }
  uint64_t v10 = a2[23];
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *((void *)a2 + 1);
  }
  if (v9 != v10) {
    goto LABEL_28;
  }
  uint64_t v12 = (const void **)(a1 + 400);
  if (v11 >= 0) {
    uint64_t v13 = a2;
  }
  else {
    uint64_t v13 = *(unsigned __int8 **)a2;
  }
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*v12, v13, *(void *)(a1 + 408))) {
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  if (!*(unsigned char *)(a1 + 423))
  {
LABEL_21:
    std::string::basic_string[abi:ne180100]<0>(&v40, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v14 = ims::warn((uint64_t)&v40, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" SRVCC handover started while RTP handover is in progress. Aborting RTP handover for [stackId=", 94);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v14 + 32))(v14, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (SHIBYTE(v38) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v42) < 0) {
      operator delete(v40);
    }
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 168) + 80))(&v40);
    for (uint64_t i = v41; i != &v40; uint64_t i = (void **)i[1])
    {
      uint64_t v16 = (uint64_t)i[2];
      std::string __p = a2;
      long long v17 = std::__tree<std::__value_type<std::string,RTPStackType>,std::__map_value_compare<std::string,std::__value_type<std::string,RTPStackType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,RTPStackType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 312), (void **)a2, (long long **)&__p);
      RTPManager::handoverComplete(a1, v16, 11, *((_DWORD *)v17 + 14), a2);
    }
    std::__list_imp<unsigned long long>::clear(&v40);
    goto LABEL_28;
  }
  while (*(unsigned __int8 *)v12 == *v13)
  {
    uint64_t v12 = (const void **)((char *)v12 + 1);
    ++v13;
    if (!--v8) {
      goto LABEL_21;
    }
  }
LABEL_28:
  long long v18 = (void *)(a1 + 80);
  if (*(_DWORD *)(a1 + 340) == 2)
  {
    RTPActiveSessionSet::active((uint64_t *)&__p, v18);
    RTPSharedPointerBase::getShared<RTPManager>((void **)&v35, a1);
    uint64_t v20 = *(void *)(a1 + 168);
    char v19 = *(std::__shared_weak_count **)(a1 + 176);
    uint64_t v21 = (std::__shared_weak_count *)operator new(0xD0uLL);
    char v22 = v21;
    v21->__shared_owners_ = 0;
    v21->__shared_weak_owners_ = 0;
    v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6F40;
    uint64_t v23 = &v21[1].__vftable;
    uint64_t v43 = v20;
    uint64_t v44 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = __p;
    uint64_t v41 = v37;
    uint64_t v42 = v38;
    if (v38)
    {
      v37[2] = &v41;
      std::string __p = &v37;
      uint64_t v37 = 0;
      uint64_t v38 = 0;
    }
    else
    {
      uint64_t v40 = &v41;
    }
    long long v39 = v35;
    long long v35 = 0uLL;
    MediaSessionSRVCCHandover::MediaSessionSRVCCHandover((uint64_t)&v21[1], &v43, &v40, (uint64_t)&v39, (uint64_t)a2, (dispatch_object_t *)(a1 + 344));
    int v26 = (std::__shared_weak_count *)*((void *)&v39 + 1);
    if (!*((void *)&v39 + 1)) {
      goto LABEL_44;
    }
LABEL_43:
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    goto LABEL_44;
  }
  RTPActiveSessionSet::active((uint64_t *)&__p, v18);
  RTPSharedPointerBase::getShared<RTPManager>((void **)&v35, a1);
  uint64_t v24 = *(void *)(a1 + 168);
  char v19 = *(std::__shared_weak_count **)(a1 + 176);
  uint64_t v25 = (std::__shared_weak_count *)operator new(0xD0uLL);
  char v22 = v25;
  v25->__shared_owners_ = 0;
  v25->__shared_weak_owners_ = 0;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6F90;
  uint64_t v23 = &v25[1].__vftable;
  uint64_t v43 = v24;
  uint64_t v44 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v40 = __p;
  uint64_t v41 = v37;
  uint64_t v42 = v38;
  if (v38)
  {
    v37[2] = &v41;
    std::string __p = &v37;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v40 = &v41;
  }
  uint64_t v27 = (std::__shared_weak_count *)*((void *)&v35 + 1);
  long long v39 = v35;
  long long v35 = 0uLL;
  MediaSessionQMISRVCCHandover::MediaSessionQMISRVCCHandover(&v25[1].__vftable, &v43, &v40, &v39, (uint64_t)a2, (dispatch_object_t *)(a1 + 344));
  if (v27)
  {
    int v26 = v27;
    goto LABEL_43;
  }
LABEL_44:
  std::__tree<unsigned int>::destroy((uint64_t)&v40, v41);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v22[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_51;
    }
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v22[1].__shared_owners_ = (uint64_t)v23;
    v22[1].__shared_weak_owners_ = (uint64_t)v22;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v22[1].__shared_owners_ = (uint64_t)v23;
    v22[1].__shared_weak_owners_ = (uint64_t)v22;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
LABEL_51:
  uint64_t v29 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v23;
  *(void *)(a1 + 192) = v22;
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  std::__tree<unsigned int>::destroy((uint64_t)&__p, v37);
  uint64_t v31 = *(void *)(a1 + 184);
  uint64_t v30 = *(void *)(a1 + 192);
  if (v31) {
    uint64_t v32 = v31 + 24;
  }
  else {
    uint64_t v32 = 0;
  }
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v33 = *(std::__shared_weak_count **)(a1 + 176);
  *(void *)(a1 + 168) = v32;
  *(void *)(a1 + 176) = v30;
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 184) + 96))(*(void *)(a1 + 184));
}

void sub_1C565569C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RTPManager::srvccHandoverFailed(RTPManager *this)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v10, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"srvccHandoverFailed", 19);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  uint64_t v6 = *((void *)this + 23);
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 104))(v6);
    size_t v7 = (std::__shared_weak_count *)*((void *)this + 24);
    *((void *)this + 23) = 0;
    *((void *)this + 24) = 0;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  if (*((void *)this + 55))
  {
    std::string::operator=((std::string *)((char *)this + 400), (const std::string *)(*((void *)this + 53) + 32));
    std::__tree<std::string>::erase((uint64_t **)this + 53, *((void *)this + 53));
    RTPManager::handoverStack((uint64_t)this, (uint64_t)this + 400);
  }
}

void sub_1C5655908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void RTPManager::srvccHandoverCompleted(RTPManager *this)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"RTPManager::srvccHandoverCompleted()", 36);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  uint64_t v3 = *((void *)this + 23);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 112))(v3);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 24);
    *((void *)this + 23) = 0;
    *((void *)this + 24) = 0;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  if (*((void *)this + 55))
  {
    std::string::operator=((std::string *)((char *)this + 400), (const std::string *)(*((void *)this + 53) + 32));
    std::__tree<std::string>::erase((uint64_t **)this + 53, *((void *)this + 53));
    dispatch_time_t v5 = dispatch_time(0, 200000000);
    uint64_t v6 = *((void *)this + 43);
    if (v6) {
      dispatch_retain(*((dispatch_object_t *)this + 43));
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZN10RTPManager22srvccHandoverCompletedEv_block_invoke;
    block[3] = &__block_descriptor_tmp_26;
    block[4] = this;
    dispatch_after(v5, v6, block);
    if (v6) {
      dispatch_release(v6);
    }
  }
}

void sub_1C5655AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 - 33) < 0) {
    operator delete(*(void **)(v20 - 56));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10RTPManager22srvccHandoverCompletedEv_block_invoke(uint64_t a1)
{
}

uint64_t RTPManager::logLocalRTCPSRPacket(uint64_t this, const RTCPSRPacket *a2)
{
  uint64_t v2 = *(void *)(this + 296);
  if (v2)
  {
    uint64_t v4 = *(void *)(v2 + 120);
    *(void *)(v4 + 544) = time(0);
    if (*(unsigned char *)(v4 + 144)) {
      uint64_t v5 = v4 + 320;
    }
    else {
      uint64_t v5 = v4 + 264;
    }
    return AnalyticsLogger::processRTCPSRPacket((void *)v4, (uint64_t)a2, v5);
  }
  return this;
}

void RTPManager::registerAudioReadyHandler(int64x2_t *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *a2;
      if (*a2)
      {
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        char v9 = (void *)a1[28].i64[1];
        unint64_t v8 = a1[29].u64[0];
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = a1[28].i64[0];
          uint64_t v12 = ((uint64_t)v9 - v11) >> 4;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 60) {
            std::vector<std::shared_ptr<MediaSessionHandover>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v14 = v8 - v11;
          if (v14 >> 3 > v13) {
            unint64_t v13 = v14 >> 3;
          }
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v13;
          }
          uint64_t v27 = a1 + 29;
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)a1[29].i64, v15);
          long long v18 = &v16[16 * v12];
          *(void *)long long v18 = v7;
          *((void *)v18 + 1) = v6;
          uint64_t v10 = v18 + 16;
          uint64_t v20 = (void *)a1[28].i64[0];
          char v19 = (void *)a1[28].i64[1];
          if (v19 == v20)
          {
            int64x2_t v22 = vdupq_n_s64((unint64_t)v19);
          }
          else
          {
            do
            {
              long long v21 = *((_OWORD *)v19 - 1);
              v19 -= 2;
              *((_OWORD *)v18 - 1) = v21;
              v18 -= 16;
              void *v19 = 0;
              v19[1] = 0;
            }
            while (v19 != v20);
            int64x2_t v22 = a1[28];
          }
          a1[28].i64[0] = (uint64_t)v18;
          a1[28].i64[1] = (uint64_t)v10;
          int64x2_t v25 = v22;
          uint64_t v23 = a1[29].i64[0];
          a1[29].i64[0] = (uint64_t)&v16[16 * v17];
          uint64_t v26 = v23;
          uint64_t v24 = v22.i64[0];
          std::__split_buffer<std::weak_ptr<BambiConferenceParticipant>>::~__split_buffer((void **)&v24);
        }
        else
        {
          void *v9 = v7;
          v9[1] = v5;
          uint64_t v10 = v9 + 2;
          a1[28].i64[1] = (uint64_t)(v9 + 2);
        }
        a1[28].i64[1] = (uint64_t)v10;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C5655CE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_weak(v1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RTPManager::handleAudioReadyEvent(RTPManager *this)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  LoggableString::LoggableString((LoggableString *)__p, "handleAudioReadyDeviceEvent");
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  _OWORD v4[2] = ___ZN10RTPManager21handleAudioReadyEventEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_135_0;
  _OWORD v4[4] = this;
  v4[5] = v3;
  uint64_t v5 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  RTPManager::performUnprotectedBlock((uint64_t)this, (uint64_t)__p, (uint64_t)v4);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1C5655DEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10RTPManager21handleAudioReadyEventEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4 && a1[5])
    {
      uint64_t v5 = *(uint64_t **)(v3 + 448);
      uint64_t v6 = *(uint64_t **)(v3 + 456);
      if (v5 == v6)
      {
        std::string::basic_string[abi:ne180100]<0>(v15, "rtp.mgr");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v7 = ims::warn((uint64_t)v15, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"No registered callbacks for AudioReady notification", 51);
        *(unsigned char *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v7 + 17) = 0;
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        uint64_t v5 = *(uint64_t **)(v3 + 448);
        uint64_t v6 = *(uint64_t **)(v3 + 456);
      }
      for (; v5 != v6; v5 += 2)
      {
        unint64_t v8 = (std::__shared_weak_count *)v5[1];
        if (v8)
        {
          uint64_t v9 = *v5;
          atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v10 = std::__shared_weak_count::lock(v8);
          if (v10)
          {
            uint64_t v11 = v10;
            if (v9) {
              (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      std::vector<std::weak_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100]((uint64_t *)(v3 + 448));
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(v15, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v12 = ims::warn((uint64_t)v15, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"RTP Manager expired before executing handleAudioReadyDeviceEvent block", 70);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }
LABEL_24:
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C5656074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20RTPSharedPointerBaseEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c45_ZTSNSt3__18weak_ptrI20RTPSharedPointerBaseEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void RTPManager::handleAudioStreamTokens(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 64);
      if (v9)
      {
        uint64_t v10 = *(const void **)(a3 + 8);
        v11[0] = &unk_1F20E38B0;
        v11[1] = v10;
        if (v10) {
          CFRetain(v10);
        }
        v11[0] = &unk_1F20E39B8;
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v9 + 176))(v9, a2, v11);
        ims::CFType::~CFType((ims::CFType *)v11);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C5656220(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RTPManager::handleTextStreamToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 64);
      if (v9)
      {
        uint64_t v10 = *(const void **)(a3 + 8);
        v11[0] = &unk_1F20E38B0;
        v11[1] = v10;
        if (v10) {
          CFRetain(v10);
        }
        v11[0] = &unk_1F20E3960;
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v9 + 168))(v9, a2, v11);
        ims::CFType::~CFType((ims::CFType *)v11);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C5656328(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void RTPManager::handleIncomingDtmf(RTPManager *this, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = *((void *)this + 8);
      if (v9) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 184))(v9, a2, a3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C56563E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t RTPManager::sessionsThatCanChangeMediaStack(uint64_t a1)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 168) + 80))(&v7);
  if (!v9 || (uint64_t v2 = v8, v8 == &v7))
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 168) + 24))(&v5);
      if (v5) {
        v3 += (*(unsigned int (**)(uint64_t))(*(void *)v5 + 184))(v5);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      uint64_t v2 = (uint64_t *)v2[1];
    }
    while (v2 != &v7);
  }
  std::__list_imp<unsigned long long>::clear(&v7);
  return v3;
}

void sub_1C5656510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  std::__list_imp<unsigned long long>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *RTPManager::setWifiHotspot(uint64_t a1, uint64_t a2, int a3)
{
  std::string::basic_string[abi:ne180100]<0>(&v36, "rtp.mgr");
  std::string::basic_string[abi:ne180100]<0>(&v33, "");
  uint64_t v6 = ims::debug((uint64_t)&v36, (uint64_t)&v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"RTPManager::setWifiHotspot [stackId=", 36);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"; enabled=",
    10);
  *(unsigned char *)(v6 + 17) = 0;
  if (a3) {
    uint64_t v7 = "true";
  }
  else {
    uint64_t v7 = "false";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v7);
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(v33);
  }
  if (SHIBYTE(v38) < 0) {
    operator delete(v36);
  }
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 168) + 80))(&v36);
  uint64_t v8 = *(void *)(a1 + 208);
  if (!v8) {
    goto LABEL_20;
  }
  uint64_t v9 = a1 + 208;
  do
  {
    int v10 = *(_DWORD *)(v8 + 32);
    BOOL v11 = v10 < 1;
    if (v10 >= 1) {
      uint64_t v12 = (uint64_t *)v8;
    }
    else {
      uint64_t v12 = (uint64_t *)(v8 + 8);
    }
    if (!v11) {
      uint64_t v9 = v8;
    }
    uint64_t v8 = *v12;
  }
  while (*v12);
  if (v9 == a1 + 208 || *(int *)(v9 + 32) >= 2)
  {
LABEL_20:
    std::string::basic_string[abi:ne180100]<0>(&v33, "rtp.mgr");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v13 = ims::debug((uint64_t)&v33, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"No AVC stack controller!", 24);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v33);
    }
    return std::__list_imp<unsigned long long>::clear(&v36);
  }
  char v14 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v14 || (unint64_t v15 = std::__shared_weak_count::lock(v14)) == 0)
  {
    uint64_t v22 = 0;
    goto LABEL_38;
  }
  char v16 = v15;
  uint64_t v17 = *(void *)(a1 + 64);
  if (v17)
  {
    BOOL v33 = 0;
    uint64_t v34 = 0;
    (*(void (**)(SipStack **__return_ptr))(*(void *)v17 + 192))(&v33);
    if (a3
      && (long long v18 = (ImsPrefs *)SipStack::prefs(v33),
          IgnoreWifiHotspotKey = (void **)ImsPrefs::getIgnoreWifiHotspotKey(v18),
          (ImsPrefs::BOOLValue(v18, IgnoreWifiHotspotKey) & 1) == 0))
    {
      uint64_t v30 = *((void *)v33 + 20);
      long long v21 = (std::__shared_weak_count *)*((void *)v33 + 21);
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v22 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(void *)v30 + 16))(v30) + 592);
      if (!v21) {
        goto LABEL_33;
      }
    }
    else
    {
      uint64_t v20 = *((void *)v33 + 20);
      long long v21 = (std::__shared_weak_count *)*((void *)v33 + 21);
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void **__return_ptr))(*(void *)v20 + 200))(__p);
      uint64_t v22 = HIDWORD(__p[0]);
      if (!v21) {
        goto LABEL_33;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
LABEL_33:
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    goto LABEL_37;
  }
  uint64_t v22 = 0;
LABEL_37:
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
LABEL_38:
  for (uint64_t i = v37; (void **)i != &v36; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v24 = *(void **)(i + 16);
    if ((*(uint64_t (**)(void, uint64_t, void *))(**(void **)(v9 + 40) + 96))(*(void *)(v9 + 40), a2, v24))
    {
      BOOL v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      RTPTransportManager::getTransports(v24, &v33);
      int64x2_t v25 = v33;
      uint64_t v26 = v34;
      while (v25 != (SipStack *)v26)
      {
        uint64_t v27 = *(void *)v25;
        uint64_t v28 = (std::__shared_weak_count *)*((void *)v25 + 1);
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v27) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 112))(v27, v22);
        }
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        int64x2_t v25 = (SipStack *)((char *)v25 + 16);
      }
      __p[0] = &v33;
      std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
  }
  return std::__list_imp<unsigned long long>::clear(&v36);
}

void sub_1C5656A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, std::__shared_weak_count *a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  std::__list_imp<unsigned long long>::clear(&a22);
  _Unwind_Resume(a1);
}

void RTPManager::add(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v4 = a3[1];
  uint64_t v5 = a1 + 136;
  v6.n128_u64[0] = *a3;
  v6.n128_u64[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  MediaSessionBaseCollection::add(v5, a2, &v6, a4);
  if (v6.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6.n128_u64[1]);
  }
}

void sub_1C5656B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void RTPManager::get(RTPManager *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
}

void RTPManager::remove(RTPManager *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
}

BOOL RTPManager::contains(RTPManager *this, unint64_t a2)
{
  return MediaSessionBaseCollection::contains((RTPManager *)((char *)this + 136), a2);
}

uint64_t RTPManager::contains(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 136);
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = MediaSessionBaseCollection::contains(v2, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v4;
}

void sub_1C5656BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t RTPManager::size(RTPManager *this)
{
  return *((void *)this + 20);
}

BOOL RTPManager::empty(RTPManager *this)
{
  return *((void *)this + 20) == 0;
}

void RTPManager::clear(RTPManager *this)
{
}

void RTPManager::sessionIdList(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

void non-virtual thunk to'RTPManager::add(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t *a3@<X2>, __n128 *a4@<X8>)
{
}

void non-virtual thunk to'RTPManager::get(RTPManager *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
}

void non-virtual thunk to'RTPManager::remove(RTPManager *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
}

BOOL non-virtual thunk to'RTPManager::contains(RTPManager *this, unint64_t a2)
{
  return MediaSessionBaseCollection::contains((RTPManager *)((char *)this + 88), a2);
}

uint64_t non-virtual thunk to'RTPManager::contains(uint64_t a1, uint64_t *a2)
{
  return RTPManager::contains(a1 - 48, a2);
}

uint64_t non-virtual thunk to'RTPManager::size(RTPManager *this)
{
  return *((void *)this + 14);
}

BOOL non-virtual thunk to'RTPManager::empty(RTPManager *this)
{
  return *((void *)this + 14) == 0;
}

void non-virtual thunk to'RTPManager::clear(RTPManager *this)
{
}

void non-virtual thunk to'RTPManager::sessionIdList(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
}

void std::vector<std::shared_ptr<MediaSessionHandover>>::__throw_length_error[abi:ne180100]()
{
}

uint64_t **std::__tree<std::__value_type<SDPMedia::MediaType,unsigned long long>,std::__map_value_compare<SDPMedia::MediaType,std::__value_type<SDPMedia::MediaType,unsigned long long>,std::less<SDPMedia::MediaType>,true>,std::allocator<std::__value_type<SDPMedia::MediaType,unsigned long long>>>::__emplace_unique_key_args<SDPMedia::MediaType,std::piecewise_construct_t const&,std::tuple<SDPMedia::MediaType const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<unsigned long long>::__emplace_unique_key_args<unsigned long long,unsigned long long const&>(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    v9[4] = a3;
    uint64_t *v9 = 0;
    v9[1] = 0;
    void v9[2] = (uint64_t)v7;
    *uint64_t v6 = v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      uint64_t *v4 = v10;
      BOOL v11 = *v6;
    }
    else
    {
      BOOL v11 = v9;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>,std::__map_value_compare<RTPStackType,std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>,std::less<RTPStackType>,true>,std::allocator<std::__value_type<RTPStackType,std::shared_ptr<RTPStackController>>>>::__emplace_unique_key_args<RTPStackType,std::piecewise_construct_t const&,std::tuple<RTPStackType&&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = operator new(0x38uLL);
    v9[8] = *a3;
    *((void *)v9 + 5) = 0;
    *((void *)v9 + 6) = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void std::__shared_ptr_emplace<IBIRTPStackController>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6E00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IBIRTPStackController>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6E00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<IBIRTPStackController>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<QMIRTPStackController>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6E50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIRTPStackController>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6E50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<QMIRTPStackController>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AVCRTPStackController>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6EA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AVCRTPStackController>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6EA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<AVCRTPStackController>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t *std::__tree<std::__value_type<std::string,RTPStackType>,std::__map_value_compare<std::string,std::__value_type<std::string,RTPStackType>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,RTPStackType>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, long long **a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    int v8 = a1 + 1;
LABEL_9:
    uint64_t v10 = *a3;
    BOOL v11 = (uint64_t *)operator new(0x40uLL);
    uint64_t v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v13 = *v10;
      v11[6] = *((void *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    *((_DWORD *)v11 + 14) = 0;
    *BOOL v11 = 0;
    v11[1] = 0;
    void v11[2] = (uint64_t)v8;
    *uint64_t v6 = v11;
    char v14 = (uint64_t *)**a1;
    unint64_t v15 = v11;
    if (v14)
    {
      *a1 = v14;
      unint64_t v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      int v8 = (uint64_t **)v5;
      uint64_t v9 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v8;
      uint64_t v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, a2) & 0x80) == 0) {
      break;
    }
    uint64_t v6 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  BOOL v11 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v11;
}

void sub_1C56571A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned long long,ImsPowerAssertion *>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,ImsPowerAssertion *>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,ImsPowerAssertion *>>>::__erase_unique<unsigned long long>(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      uint64_t v7 = v2;
    }
    else {
      uint64_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void std::__shared_ptr_emplace<MediaSessionHandover>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6EF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MediaSessionHandover>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6EF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<MediaSessionHandover>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<MediaSessionSRVCCHandover>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6F40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MediaSessionSRVCCHandover>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6F40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<MediaSessionSRVCCHandover>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<MediaSessionQMISRVCCHandover>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6F90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MediaSessionQMISRVCCHandover>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E6F90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<MediaSessionQMISRVCCHandover>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t IMSSMSManager::IMSSMSManager(uint64_t a1, void *a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &unk_1F20E6FE0;
  *(void *)(a1 + 8) = &unk_1F20E7080;
  *(void *)(a1 + 16) = &unk_1F20E70D0;
  *(void *)(a1 + 24) = &unk_1F20E7138;
  *(unsigned char *)(a1 + 48) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 56));
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(void *)(a1 + 232) = 0x40A7700000000000;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(void *)(a1 + 392) = a1 + 400;
  *(void *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 345) = 0u;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = a1 + 424;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = a1 + 448;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_DWORD *)(a1 + 496) = 1065353216;
  *(void *)(a1 + 504) = *a2;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 512) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 160) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "sms");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  std::string::operator=((std::string *)(a1 + 104), &__str);
  std::string::operator=((std::string *)(a1 + 128), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C56575E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  int64x2_t v25 = *(std::__shared_weak_count **)(v20 + 512);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v23);
  std::__tree<unsigned int>::destroy((uint64_t)(v22 + 30), *(void **)(v20 + 448));
  std::__tree<unsigned int>::destroy((uint64_t)(v22 + 27), *(void **)(v20 + 424));
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*(void **)(v20 + 400));
  std::vector<PendingSMS>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  uint64_t v26 = *(std::__shared_weak_count **)(v20 + 352);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  ims::LocationInfo::~LocationInfo(v22);
  SipTimerContainer::~SipTimerContainer(v21);
  uint64_t v27 = *(std::__shared_weak_count **)(v20 + 40);
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  _Unwind_Resume(a1);
}

void IMSSMSManager::~IMSSMSManager(IMSSMSManager *this)
{
  *(void *)this = &unk_1F20E6FE0;
  *((void *)this + 1) = &unk_1F20E7080;
  *((void *)this + 2) = &unk_1F20E70D0;
  *((void *)this + 3) = &unk_1F20E7138;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 64);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 464);
  std::__tree<unsigned int>::destroy((uint64_t)this + 440, *((void **)this + 56));
  std::__tree<unsigned int>::destroy((uint64_t)this + 416, *((void **)this + 53));
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((void **)this + 50));
  unint64_t v5 = (void **)((char *)this + 368);
  std::vector<PendingSMS>::__destroy_vector::operator()[abi:ne180100](&v5);
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 44);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 343) < 0) {
    operator delete(*((void **)this + 40));
  }
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }
  if (*((char *)this + 295) < 0) {
    operator delete(*((void **)this + 34));
  }
  if (*((char *)this + 271) < 0) {
    operator delete(*((void **)this + 31));
  }
  SipTimerContainer::~SipTimerContainer((IMSSMSManager *)((char *)this + 56));
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

{
  uint64_t vars8;

  IMSSMSManager::~IMSSMSManager(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'IMSSMSManager::~IMSSMSManager(IMSSMSManager *this)
{
}

{
  IMSSMSManager::~IMSSMSManager((IMSSMSManager *)((char *)this - 16));
}

{
  IMSSMSManager::~IMSSMSManager((IMSSMSManager *)((char *)this - 24));
}

{
  uint64_t vars8;

  IMSSMSManager::~IMSSMSManager((IMSSMSManager *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  IMSSMSManager::~IMSSMSManager((IMSSMSManager *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  IMSSMSManager::~IMSSMSManager((IMSSMSManager *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

uint64_t IMSSMSManager::sendSMS(uint64_t a1, uint64_t a2, std::string *a3, uint64_t a4, char **a5, long long *a6, char a7)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 504) + 168);
  if (v8)
  {
    uint64_t v83 = 0;
    BOOL v84 = 0;
    (*(void (**)(SipStack **__return_ptr, uint64_t, uint64_t))(*(void *)v8 + 192))(&v83, v8, a2);
    if (!v83)
    {
      std::string::basic_string[abi:ne180100]<0>(v50, "sms");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v17 = ims::error((uint64_t)v50, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"SIP stack not found", 19);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 32))(v17, a2);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
      if (SBYTE7(v58) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50[0].__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(v50, "SIP stack not found");
      IMSSMSManager::reportFailure((void **)a2, v50);
      goto LABEL_20;
    }
    if (BambiAccessBarring::isServiceBarred((uint64_t **)v83 + 366, 4))
    {
      std::string::basic_string[abi:ne180100]<0>(v50, "sms");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v15 = ims::debug((uint64_t)v50, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Service Barred", 14);
      *(unsigned char *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v15 + 17) = 0;
      if (SBYTE7(v58) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50[0].__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(v50, "Service Barred");
      IMSSMSManager::reportFailure((void **)a2, v50);
LABEL_20:
      if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50[0].__r_.__value_.__l.__data_);
      }
      goto LABEL_102;
    }
    if (SipStack::requiresLimitedAvailability(v83) && !*((unsigned char *)v83 + 4232))
    {
      std::string::basic_string[abi:ne180100]<0>(v50, "sms");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v24 = ims::debug((uint64_t)v50, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"Limited Connectivity", 20);
      *(unsigned char *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v24 + 17) = 0;
      if (SBYTE7(v58) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50[0].__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(v50, "Limited Connectivity");
      IMSSMSManager::reportFailure((void **)a2, v50);
      goto LABEL_20;
    }
    uint64_t v82 = 0;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long __p = 0u;
    SipUri::SipUri((SipUri *)&__p);
    if (isPhoneNumber((unsigned __int8 *)a3))
    {
      uint64_t v18 = *(void *)(a1 + 504);
      (*(void (**)(SipStack **__return_ptr, uint64_t, uint64_t))(*(void *)v8 + 192))(&v55, v8, a2);
      OutgoingUruint64_t i = IPTelephonyManager::makeOutgoingUri(v18, &v55, a3, (SipUri *)&__p);
      if (v56) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v56);
      }
      if ((OutgoingUri & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v50, "sms");
        std::string::basic_string[abi:ne180100]<0>(&v85, "");
        uint64_t v20 = ims::error((uint64_t)v50, (uint64_t)&v85);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Invalid URI", 11);
        *(unsigned char *)(v20 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)": ", 2);
        *(unsigned char *)(v20 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(void *)v20 + 32))(v20, a3);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v20 + 17) = 0;
        if ((v86[15] & 0x80000000) != 0) {
          operator delete(v85);
        }
        if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50[0].__r_.__value_.__l.__data_);
        }
LABEL_32:
        std::string::basic_string[abi:ne180100]<0>(v50, "Invalid URI");
        IMSSMSManager::reportFailure((void **)a2, v50);
LABEL_47:
        if ((SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_101:
          SipUri::~SipUri((SipUri *)&__p);
LABEL_102:
          if (v84) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v84);
          }
          return 1;
        }
        uint64_t v23 = (void *)v50[0].__r_.__value_.__r.__words[0];
LABEL_100:
        operator delete(v23);
        goto LABEL_101;
      }
    }
    else
    {
      SipUri::fromString((uint64_t)&__p, a3);
      if (!SipUri::isValidUri((SipUri *)&__p))
      {
        std::string::basic_string[abi:ne180100]<0>(v50, "sms");
        std::string::basic_string[abi:ne180100]<0>(&v85, "");
        uint64_t v21 = ims::error((uint64_t)v50, (uint64_t)&v85);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Invalid URI", 11);
        *(unsigned char *)(v21 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)": ", 2);
        *(unsigned char *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(void *)v21 + 32))(v21, a3);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v21 + 17) = 0;
        if ((v86[15] & 0x80000000) != 0) {
          operator delete(v85);
        }
        if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50[0].__r_.__value_.__l.__data_);
        }
        goto LABEL_32;
      }
    }
    {
      std::string::basic_string[abi:ne180100]<0>(v50, "sms");
      std::string::basic_string[abi:ne180100]<0>(&v85, "");
      uint64_t v22 = ims::error((uint64_t)v50, (uint64_t)&v85);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Invalid content type", 20);
      *(unsigned char *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, long long *))(*(void *)v22 + 32))(v22, a6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"  Cannot send SMS", 17);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v22 + 17) = 0;
      if ((v86[15] & 0x80000000) != 0) {
        operator delete(v85);
      }
      if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50[0].__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(v50, "Invalid content type");
      IMSSMSManager::reportFailure((void **)a2, v50);
      goto LABEL_47;
    }
    memset(&__s, 0, sizeof(__s));
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__s, *a5, a5[1], a5[1] - *a5);
    long long v52 = 0u;
    long long v53 = 0u;
    memset(v51, 0, sizeof(v51));
    memset(v50, 0, sizeof(v50));
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(v50, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      v50[0] = *(std::string *)a2;
    }
    SipUri::SipUri((SipUri *)&v50[1], (const SipUri *)&__p);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(v51, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
    }
    else {
      v51[0] = __s;
    }
    if (*(char *)(a4 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v51[1], *(const std::string::value_type **)a4, *(void *)(a4 + 8));
    }
    else {
      v51[1] = *(std::string *)a4;
    }
    int64x2_t v25 = (capabilities::radio *)&v52;
    if (*((char *)a6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v52, *(const std::string::value_type **)a6, *((void *)a6 + 1));
    }
    else
    {
      long long v52 = *a6;
      *(void *)&long long v53 = *((void *)a6 + 2);
    }
    BYTE8(v53) = a7;
    HIDWORD(v53) = 0;
    if (capabilities::radio::mav20Plus(v25)
      && ((uint64_t v26 = (ims::AccessNetwork *)((char *)v83 + 3160),
           ims::AccessNetwork::isLTE((ims::AccessNetwork *)((char *)v83 + 3160)))
       || ims::AccessNetwork::isNR(v26)))
    {
      std::string::basic_string[abi:ne180100]<0>(&v85, "sms");
      std::string::basic_string[abi:ne180100]<0>(v48, "");
      uint64_t v27 = ims::debug((uint64_t)&v85, (uint64_t)v48);
      uint64_t v28 = (unsigned char *)ImsOutStream::operator<<(v27, "Checking UAC before sending SMS message on ");
      (*(void (**)(unsigned char *, uint64_t))(*(void *)v28 + 32))(v28, a2);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v28[17] = 0;
      if (v49 < 0) {
        operator delete(v48[0]);
      }
      if ((v86[15] & 0x80000000) != 0) {
        operator delete(v85);
      }
      IPTelephonyManager::sendCallStatusRequest(*(void *)(a1 + 504), a2, 0, 4, 1, 0);
      HIDWORD(v53) = 1;
    }
    else
    {
      HIDWORD(v53) = 0;
      if (IMSSMSManager::prepareSMS((IMSSMSManager *)a1, v50))
      {
LABEL_90:
        if (SBYTE7(v53) < 0) {
          operator delete((void *)v52);
        }
        if (SHIBYTE(v51[1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v51[1].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v51[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v51[0].__r_.__value_.__l.__data_);
        }
        SipUri::~SipUri((SipUri *)&v50[1]);
        if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v50[0].__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_101;
        }
        uint64_t v23 = (void *)__s.__r_.__value_.__r.__words[0];
        goto LABEL_100;
      }
    }
    uint64_t v29 = (_OWORD *)(a1 + 376);
    unint64_t v31 = *(void *)(a1 + 376);
    unint64_t v30 = *(void *)(a1 + 384);
    if (v31 >= v30)
    {
      uint64_t v33 = *(void *)(a1 + 368);
      uint64_t v34 = (uint64_t)(v31 - v33) >> 9;
      if ((unint64_t)(v34 + 1) >> 55) {
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v35 = v30 - v33;
      uint64_t v36 = v35 >> 8;
      if (v35 >> 8 <= (unint64_t)(v34 + 1)) {
        uint64_t v36 = v34 + 1;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFE00) {
        unint64_t v37 = 0x7FFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      uint64_t v87 = a1 + 384;
      if (v37)
      {
        if (v37 >> 55) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v38 = (char *)operator new(v37 << 9);
      }
      else
      {
        uint64_t v38 = 0;
      }
      BOOL v85 = v38;
      *(void *)uint64_t v86 = &v38[512 * v34];
      *(void *)&v86[8] = *(void *)v86;
      *(void *)&v86[16] = &v38[512 * v37];
      PendingSMS::PendingSMS(*(std::string **)v86, (const PendingSMS *)v50);
      uint64_t v39 = 0;
      uint64_t v40 = *(void *)v86;
      *(void *)&v86[8] += 512;
      uint64_t v42 = *(void *)(a1 + 368);
      for (uint64_t i = *(void *)(a1 + 376);
            i + v39 != v42;
            PendingSMS::PendingSMS((std::string *)(v39 + v40), (const PendingSMS *)(v39 + i)))
      {
        v39 -= 512;
      }
      uint64_t v43 = *(void *)(a1 + 384);
      unint64_t v47 = *(void *)&v86[8];
      long long v44 = *(_OWORD *)&v86[8];
      long long v45 = *(_OWORD *)(a1 + 368);
      *(void *)(a1 + 368) = v40 + v39;
      *(_OWORD *)uint64_t v86 = v45;
      *uint64_t v29 = v44;
      *(void *)&v86[16] = v43;
      BOOL v85 = (void *)v45;
      std::__split_buffer<PendingSMS>::~__split_buffer((uint64_t)&v85);
      unint64_t v32 = v47;
    }
    else
    {
      PendingSMS::PendingSMS(*(std::string **)(a1 + 376), (const PendingSMS *)v50);
      unint64_t v32 = v31 + 512;
      *(void *)uint64_t v29 = v31 + 512;
    }
    *(void *)uint64_t v29 = v32;
    goto LABEL_90;
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "sms");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v16 = ims::error((uint64_t)v50, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"SIP client not found", 20);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  if (SBYTE7(v58) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50[0].__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(v50, "SIP client not found");
  IMSSMSManager::reportFailure((void **)a2, v50);
  if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50[0].__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C5658538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__split_buffer<PendingSMS>::~__split_buffer(v7 - 136);
  PendingSMS::~PendingSMS((void **)va);
  if (SLOBYTE(STACK[0x24F]) < 0) {
    operator delete((void *)STACK[0x238]);
  }
  SipUri::~SipUri((SipUri *)&STACK[0x260]);
  uint64_t v9 = *(std::__shared_weak_count **)(v7 - 144);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Unwind_Resume(a1);
}

void IMSSMSManager::reportFailure(void **a1, const std::string *a2)
{
  *(_OWORD *)long long __p = 0u;
  long long v8 = 0u;
  *(_OWORD *)unint64_t v5 = 0u;
  long long v6 = 0u;
  std::string::operator=((std::string *)&v5[1], a2);
  uint64_t v3 = IMSClientManager::delegateForStack(a1);
  (*(void (**)(uint64_t))(*(void *)(v3 + 48) + 16))(v3 + 48);
  uint64_t v4 = IMSClientManager::delegateForStack(a1);
  (*(void (**)(uint64_t))(*(void *)(v4 + 48) + 24))(v4 + 48);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[1]);
  }
}

void sub_1C5658830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t anonymous namespace'::isValidContentType(void **a1)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_29, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_29))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "application/vnd.3gpp.sms");
    std::string::basic_string[abi:ne180100]<0>((void *)&v9 + 1, "application/vnd.3gpp2.sms");
    std::string::basic_string[abi:ne180100]<0>(&v10, "text/plain");
    std::string::basic_string[abi:ne180100]<0>((void *)&v11 + 1, "message/cpim");
    std::string::basic_string[abi:ne180100]<0>(&v12, "application/im-iscomposing+xml");
    std::string::basic_string[abi:ne180100]<0>(v13, "application/vnd.gsma.rcsrevoke+xml");
    std::set<std::string>::set[abi:ne180100]((uint64_t *)__p, 6);
    for (uint64_t i = 0; i != -18; i -= 3)
    {
      if (SHIBYTE(v13[i + 2]) < 0) {
        operator delete((void *)v13[i]);
      }
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &qword_1EBBDC5E8, &dword_1C51D1000);
    __cxa_guard_release(&_MergedGlobals_29);
  }
  if (std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&qword_1EBBDC5E8, a1) == (void **)&qword_1EBBDC5F0)
  {
    long long v6 = 0u;
    long long v7 = 0u;
    *(_OWORD *)&v4[0].__locale_ = 0u;
    long long v5 = 0u;
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)v4, "multipart/mixed;boundary=\\d{2}",
      0);
  }
  return 1;
}

void sub_1C5658AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::locale a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  uint64_t v34 = 0;
  while (1)
  {
    if (*(char *)(v32 + v34 + 143) < 0) {
      operator delete(*(void **)(v32 + v34 + 120));
    }
    v34 -= 24;
    if (v34 == -144)
    {
      __cxa_guard_abort(&_MergedGlobals_29);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t IMSSMSManager::prepareSMS(IMSSMSManager *this, const std::string *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  long long v43 = 0u;
  long long v44 = 0u;
  *(_OWORD *)&v45[8] = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  memset(&v50, 0, sizeof(v50));
  *(void *)long long v45 = 0x40A7700000000000;
  uint64_t v4 = *(void *)(*((void *)this + 63) + 168);
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  (*(void (**)(SipStack **__return_ptr))(*(void *)v4 + 192))(&v41);
  if (!a2[21].__r_.__value_.__s.__data_[0])
  {
LABEL_44:
    ims::LocationInfo::LocationInfo((ims::LocationInfo *)v28, (const ims::LocationInfo *)&v43);
    IMSSMSManager::sendSMS((uint64_t)this, a2, v28);
    if (v35 < 0) {
      operator delete(v34);
    }
    if (v33 < 0) {
      operator delete(v32);
    }
    if (v31 < 0) {
      operator delete(v30);
    }
    if (v29 < 0) {
      operator delete(*(void **)&v28[6]);
    }
    uint64_t v5 = 1;
    goto LABEL_53;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v5 = *((void *)this + 5);
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "SMSEmergencyMode");
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  long long v52 = 0;
  long long v7 = operator new(0x20uLL);
  *long long v7 = &unk_1F20E71D8;
  v7[1] = this;
  uint64_t v7[2] = v6;
  v7[3] = v5;
  long long v52 = v7;
  long long v8 = (ImsPrefs *)SipStack::prefs(v41);
  EmergencySMSModeExpirationSecondsKey = (void **)ImsPrefs::getEmergencySMSModeExpirationSecondsKey(v8);
  ImsPrefs::intValue(v8, EmergencySMSModeExpirationSecondsKey);
  SipTimerContainer::startTimer((int8x8_t *)this + 7, (uint64_t)&__p);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v51);
  if (v40 < 0) {
    operator delete(__p);
  }
  if (*((unsigned char *)this + 48))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "sms");
    std::string::basic_string[abi:ne180100]<0>(v36, "");
    uint64_t v10 = ims::debug((uint64_t)&__p, (uint64_t)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Persisting pseudo-emergency mode for SMS", 40);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (v37 < 0) {
      operator delete(v36[0]);
    }
    if (v40 < 0) {
      operator delete(__p);
    }
    long long v11 = (ImsPrefs *)SipStack::prefs(v41);
    AddLocationToEmergencySMSKey = (void **)ImsPrefs::getAddLocationToEmergencySMSKey(v11);
    if (ImsPrefs::BOOLValue(v11, AddLocationToEmergencySMSKey)
      && *((void *)this + 43)
      && *((double *)this + 30) > 0.0)
    {
      long long v13 = *(_OWORD *)((char *)this + 216);
      long long v43 = *(_OWORD *)((char *)this + 200);
      long long v44 = v13;
      *(_OWORD *)long long v45 = *(_OWORD *)((char *)this + 232);
      std::string::operator=((std::string *)&v45[16], (const std::string *)((char *)this + 248));
      std::string::operator=((std::string *)&v47, (const std::string *)((char *)this + 272));
      std::string::operator=((std::string *)((char *)&v48 + 8), (const std::string *)((char *)this + 296));
      std::string::operator=(&v50, (const std::string *)((char *)this + 320));
    }
LABEL_42:
    if (v5)
    {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    }
    goto LABEL_44;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sms");
  std::string::basic_string[abi:ne180100]<0>(v36, "");
  uint64_t v14 = ims::debug((uint64_t)&__p, (uint64_t)v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Entering pseudo-emergency mode for SMS", 38);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  if (v37 < 0) {
    operator delete(v36[0]);
  }
  if (v40 < 0) {
    operator delete(__p);
  }
  *((unsigned char *)this + 48) = 1;
  uint64_t v15 = (ImsPrefs *)SipStack::prefs(v41);
  uint64_t v16 = (void **)ImsPrefs::getAddLocationToEmergencySMSKey(v15);
  if (!ImsPrefs::BOOLValue(v15, v16)) {
    goto LABEL_42;
  }
  uint64_t v18 = v41;
  uint64_t v17 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IMSSMSManager::clearLocation(this);
  char v19 = (std::__shared_weak_count *)operator new(0x88uLL);
  uint64_t v20 = v19;
  v19->__shared_owners_ = 0;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20B83C8;
  uint64_t v21 = &v19[1].__vftable;
  long long __p = v18;
  uint64_t v39 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ImsLocationSelector::ImsLocationSelector((uint64_t)&v19[1], (uint64_t)this + 24, (uint64_t *)&__p, 2);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v22 = (std::__shared_weak_count *)*((void *)this + 44);
  *((void *)this + 43) = v21;
  *((void *)this + 44) = v20;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 232) = xmmword_1C56D18C0;
  uint64_t v23 = (void **)((char *)this + 248);
  if (*((char *)this + 271) < 0) {
    operator delete(*v23);
  }
  uint64_t v24 = (void **)((char *)this + 272);
  *uint64_t v23 = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  if (*((char *)this + 295) < 0) {
    operator delete(*v24);
  }
  int64x2_t v25 = (void **)((char *)this + 296);
  *uint64_t v24 = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  if (*((char *)this + 319) < 0) {
    operator delete(*v25);
  }
  uint64_t v26 = (void **)((char *)this + 320);
  capabilities::radio *v25 = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  if (*((char *)this + 343) < 0) {
    operator delete(*v26);
  }
  ims::AccessNetwork *v26 = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  *((unsigned char *)this + 360) = 1;
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  HIDWORD(a2[21].__r_.__value_.__r.__words[0]) = 2;
  if (v5)
  {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v5);
    uint64_t v5 = 0;
  }
LABEL_53:
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(*((void **)&v48 + 1));
  }
  if (SBYTE7(v48) < 0) {
    operator delete((void *)v47);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(*(void **)&v45[16]);
  }
  return v5;
}

void sub_1C5659118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *__p,std::__shared_weak_count *a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,std::__shared_weak_count *a40,void *a41)
{
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  std::__shared_weak_count::~__shared_weak_count(v43);
  operator delete(v45);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  if (v41)
  {
    std::__shared_weak_count::__release_weak(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  ims::LocationInfo::~LocationInfo(&a41);
  _Unwind_Resume(a1);
}

void PendingSMS::~PendingSMS(void **this)
{
  if (*((char *)this + 503) < 0) {
    operator delete(this[60]);
  }
  if (*((char *)this + 479) < 0) {
    operator delete(this[57]);
  }
  if (*((char *)this + 455) < 0) {
    operator delete(this[54]);
  }
  SipUri::~SipUri((SipUri *)(this + 3));
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void IMSSMSManager::sendLazuli(IMSSMSManager *this, std::string *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "laz.mgr.send");
  uint64_t v4 = ims::debug((uint64_t)__p, (uint64_t)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"IMSSMSManager::sendLazuli", 25);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (SBYTE7(v47) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(BambiClient **)(*((void *)this + 63) + 168);
  uint64_t v71 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  *(_OWORD *)long long __p = 0u;
  SipUri::SipUri((SipUri *)__p);
  uint64_t v6 = *((void *)this + 63);
  (*(void (**)(SipStack **__return_ptr, BambiClient *, std::string *))(*(void *)v5 + 192))(&v44, v5, a2);
  OutgoingUruint64_t i = IPTelephonyManager::makeOutgoingUri(v6, &v44, a2 + 2, (SipUri *)__p);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (OutgoingUri)
  {
    {
      LODWORD(v41) = BambiClient::sendLazuli(v5, (const LazuliSendParams *)a2, (const SipUri *)__p);
      if (v41) {
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)this + 52, (unsigned int *)&v41, &v41);
      }
      goto LABEL_65;
    }
    std::string::basic_string[abi:ne180100]<0>(&v41, "laz.mgr.send");
    uint64_t v11 = ims::error((uint64_t)&v41, (uint64_t)a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Invalid content type", 20);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, a2 + 7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"  Cannot send message", 21);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v43 < 0) {
      operator delete(v41);
    }
    xpc_object_t v40 = 0;
    xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v13 = v12;
    if (v12)
    {
      xpc_object_t v40 = v12;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
      xpc_object_t v40 = v13;
      if (!v13)
      {
        xpc_object_t v15 = xpc_null_create();
        xpc_object_t v13 = 0;
        goto LABEL_46;
      }
    }
    if (MEMORY[0x1C878F160](v13) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v13);
LABEL_47:
      xpc_release(v13);
      xpc_object_t v29 = xpc_BOOL_create(0);
      if (!v29) {
        xpc_object_t v29 = xpc_null_create();
      }
      uint64_t v41 = &v40;
      uint64_t v42 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v41, &v29, &v30);
      xpc_release(v30);
      xpc_object_t v30 = 0;
      xpc_release(v29);
      xpc_object_t v29 = 0;
      xpc_object_t v27 = xpc_string_create("Invalid content type");
      if (!v27) {
        xpc_object_t v27 = xpc_null_create();
      }
      uint64_t v41 = &v40;
      uint64_t v42 = "kReason";
      xpc::dict::object_proxy::operator=((uint64_t)&v41, &v27, &v28);
      xpc_release(v28);
      xpc_object_t v28 = 0;
      xpc_release(v27);
      xpc_object_t v27 = 0;
      if ((a2[3].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int data = (const char *)&a2[3];
      }
      else {
        int data = a2[3].__r_.__value_.__l.__data_;
      }
      xpc_object_t v25 = xpc_string_create(data);
      if (!v25) {
        xpc_object_t v25 = xpc_null_create();
      }
      uint64_t v41 = &v40;
      uint64_t v42 = "kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v41, &v25, &v26);
      xpc_release(v26);
      xpc_object_t v26 = 0;
      xpc_release(v25);
      xpc_object_t v25 = 0;
      if ((a2[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v20 = (const char *)&a2[1];
      }
      else {
        uint64_t v20 = a2[1].__r_.__value_.__l.__data_;
      }
      xpc_object_t v23 = xpc_string_create(v20);
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
      uint64_t v41 = &v40;
      uint64_t v42 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v41, &v23, &v24);
      xpc_release(v24);
      xpc_object_t v24 = 0;
      xpc_release(v23);
      xpc_object_t v21 = v40;
      xpc_object_t v22 = v40;
      xpc_object_t v23 = 0;
      if (v40)
      {
        xpc_retain(v40);
      }
      else
      {
        xpc_object_t v21 = xpc_null_create();
        xpc_object_t v22 = v21;
      }
      IMSSMSManager::reportSendStatus((void **)&a2->__r_.__value_.__l.__data_, &v22);
      xpc_release(v21);
      xpc_object_t v22 = 0;
      xpc_release(v40);
      goto LABEL_65;
    }
    xpc_object_t v15 = xpc_null_create();
LABEL_46:
    xpc_object_t v40 = v15;
    goto LABEL_47;
  }
  std::string::basic_string[abi:ne180100]<0>(&v41, "laz.mgr.send");
  uint64_t v8 = ims::error((uint64_t)&v41, (uint64_t)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Invalid URI", 11);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, a2 + 1);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v43 < 0) {
    operator delete(v41);
  }
  xpc_object_t v40 = 0;
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v10 = v9;
  if (v9)
  {
    xpc_object_t v40 = v9;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v40 = v10;
    if (!v10)
    {
      xpc_object_t v14 = xpc_null_create();
      xpc_object_t v10 = 0;
      goto LABEL_26;
    }
  }
  if (MEMORY[0x1C878F160](v10) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v14 = xpc_null_create();
LABEL_26:
    xpc_object_t v40 = v14;
    goto LABEL_27;
  }
  xpc_retain(v10);
LABEL_27:
  xpc_release(v10);
  xpc_object_t v38 = xpc_BOOL_create(0);
  if (!v38) {
    xpc_object_t v38 = xpc_null_create();
  }
  uint64_t v41 = &v40;
  uint64_t v42 = "kIsSuccess";
  xpc::dict::object_proxy::operator=((uint64_t)&v41, &v38, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v38);
  xpc_object_t v38 = 0;
  xpc_object_t v36 = xpc_string_create("Invalid URI");
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  uint64_t v41 = &v40;
  uint64_t v42 = "kReason";
  xpc::dict::object_proxy::operator=((uint64_t)&v41, &v36, &v37);
  xpc_release(v37);
  xpc_object_t v37 = 0;
  xpc_release(v36);
  xpc_object_t v36 = 0;
  if ((a2[3].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v16 = (const char *)&a2[3];
  }
  else {
    uint64_t v16 = a2[3].__r_.__value_.__l.__data_;
  }
  xpc_object_t v34 = xpc_string_create(v16);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  uint64_t v41 = &v40;
  uint64_t v42 = "kConversationId";
  xpc::dict::object_proxy::operator=((uint64_t)&v41, &v34, &v35);
  xpc_release(v35);
  xpc_object_t v35 = 0;
  xpc_release(v34);
  xpc_object_t v34 = 0;
  if ((a2[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v17 = (const char *)&a2[1];
  }
  else {
    uint64_t v17 = a2[1].__r_.__value_.__l.__data_;
  }
  xpc_object_t v32 = xpc_string_create(v17);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  uint64_t v41 = &v40;
  uint64_t v42 = "kTransactionId";
  xpc::dict::object_proxy::operator=((uint64_t)&v41, &v32, &v33);
  xpc_release(v33);
  xpc_object_t v33 = 0;
  xpc_release(v32);
  xpc_object_t v18 = v40;
  xpc_object_t v31 = v40;
  xpc_object_t v32 = 0;
  if (v40)
  {
    xpc_retain(v40);
  }
  else
  {
    xpc_object_t v18 = xpc_null_create();
    xpc_object_t v31 = v18;
  }
  IMSSMSManager::reportSendStatus((void **)&a2->__r_.__value_.__l.__data_, &v31);
  xpc_release(v18);
  xpc_object_t v31 = 0;
  xpc_release(v40);
LABEL_65:
  SipUri::~SipUri((SipUri *)__p);
}

void sub_1C5659A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,xpc_object_t object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36)
{
  xpc_release(v36);
  xpc_release(object);
  SipUri::~SipUri((SipUri *)&a36);
  _Unwind_Resume(a1);
}

void sub_1C5659B4C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C5659B44);
}

void IMSSMSManager::reportSendStatus(void **a1, void **a2)
{
  uint64_t v6 = 0;
  long long v7 = 0;
  IMSClientManager::lazuliDelegateForStack(a1, &v6);
  uint64_t v3 = v6;
  if (v6)
  {
    uint64_t v4 = *a2;
    xpc_object_t object = v4;
    if (v4) {
      xpc_retain(v4);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    LazuliDelegate::handleMessageSend(v3, &object);
    xpc_release(object);
    xpc_object_t object = 0;
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C5659BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(a1);
}

void IMSSMSManager::addParticipant(IMSSMSManager *this, std::string *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "laz.mgr.addpart");
  uint64_t v4 = ims::debug((uint64_t)__p, (uint64_t)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"IMSSMSManager::addParticipant", 29);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (SBYTE7(v31) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(BambiClient **)(*((void *)this + 63) + 168);
  uint64_t v55 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)long long __p = 0u;
  SipUri::SipUri((SipUri *)__p);
  uint64_t v6 = *((void *)this + 63);
  (*(void (**)(SipStack **__return_ptr, BambiClient *, std::string *))(*(void *)v5 + 192))(&v28, v5, a2);
  OutgoingUruint64_t i = IPTelephonyManager::makeOutgoingUri(v6, &v28, a2 + 2, (SipUri *)__p);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (OutgoingUri)
  {
    BambiClient::addLazuliParticipant(v5, a2, (const SipUri *)__p);
    goto LABEL_42;
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "laz.mgr.addpart");
  uint64_t v8 = ims::error((uint64_t)&v25, (uint64_t)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Invalid URI", 11);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, a2 + 1);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v27 < 0) {
    operator delete(v25);
  }
  xpc_object_t v24 = 0;
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v10 = v9;
  if (v9)
  {
    xpc_object_t v24 = v9;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v24 = v10;
    if (!v10)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v10 = 0;
      goto LABEL_16;
    }
  }
  if (MEMORY[0x1C878F160](v10) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v11 = xpc_null_create();
LABEL_16:
    xpc_object_t v24 = v11;
    goto LABEL_17;
  }
  xpc_retain(v10);
LABEL_17:
  xpc_release(v10);
  xpc_object_t v22 = xpc_BOOL_create(0);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_object_t v25 = &v24;
  xpc_object_t v26 = (std::__shared_weak_count *)"kIsSuccess";
  xpc::dict::object_proxy::operator=((uint64_t)&v25, &v22, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v22);
  xpc_object_t v22 = 0;
  xpc_object_t v20 = xpc_string_create("Invalid URI");
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_object_t v25 = &v24;
  xpc_object_t v26 = (std::__shared_weak_count *)"kReason";
  xpc::dict::object_proxy::operator=((uint64_t)&v25, &v20, &v21);
  xpc_release(v21);
  xpc_object_t v21 = 0;
  xpc_release(v20);
  xpc_object_t v20 = 0;
  if ((a2[3].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int data = (const char *)&a2[3];
  }
  else {
    int data = a2[3].__r_.__value_.__l.__data_;
  }
  xpc_object_t v18 = xpc_string_create(data);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_object_t v25 = &v24;
  xpc_object_t v26 = (std::__shared_weak_count *)"kConversationId";
  xpc::dict::object_proxy::operator=((uint64_t)&v25, &v18, &v19);
  xpc_release(v19);
  xpc_object_t v19 = 0;
  xpc_release(v18);
  xpc_object_t v18 = 0;
  if ((a2[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v13 = (const char *)&a2[1];
  }
  else {
    xpc_object_t v13 = a2[1].__r_.__value_.__l.__data_;
  }
  xpc_object_t v16 = xpc_string_create(v13);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_object_t v25 = &v24;
  xpc_object_t v26 = (std::__shared_weak_count *)"kTransactionId";
  xpc::dict::object_proxy::operator=((uint64_t)&v25, &v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_object_t v14 = v24;
  if (v24) {
    xpc_retain(v24);
  }
  else {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_object_t v25 = 0;
  xpc_object_t v26 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)&a2->__r_.__value_.__l.__data_, &v25);
  xpc_object_t v15 = (LazuliDelegate *)v25;
  if (v25)
  {
    xpc_object_t v56 = v14;
    if (v14) {
      xpc_retain(v14);
    }
    else {
      xpc_object_t v56 = xpc_null_create();
    }
    LazuliDelegate::handleParticipantAdded(v15, &v56);
    xpc_release(v56);
    xpc_object_t v56 = 0;
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  xpc_release(v14);
  xpc_release(v24);
LABEL_42:
  SipUri::~SipUri((SipUri *)__p);
}

void sub_1C565A0C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t object, void *__p, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  xpc_release(*(xpc_object_t *)(v32 - 40));
  *(void *)(v32 - 40) = 0;
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  xpc_release(v31);
  xpc_release(object);
  SipUri::~SipUri((SipUri *)&a26);
  _Unwind_Resume(a1);
}

void IMSSMSManager::removeParticipant(IMSSMSManager *this, std::string *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "laz.mgr.rmpart");
  uint64_t v4 = ims::debug((uint64_t)__p, (uint64_t)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"IMSSMSManager::removeParticipant", 32);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (SBYTE7(v31) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(BambiClient **)(*((void *)this + 63) + 168);
  uint64_t v55 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)long long __p = 0u;
  SipUri::SipUri((SipUri *)__p);
  uint64_t v6 = *((void *)this + 63);
  (*(void (**)(SipStack **__return_ptr, BambiClient *, std::string *))(*(void *)v5 + 192))(&v28, v5, a2);
  OutgoingUruint64_t i = IPTelephonyManager::makeOutgoingUri(v6, &v28, a2 + 2, (SipUri *)__p);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (OutgoingUri)
  {
    BambiClient::removeLazuliParticipant(v5, a2, (const SipUri *)__p);
    goto LABEL_39;
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "laz.mgr.rmpart");
  uint64_t v8 = ims::error((uint64_t)&v25, (uint64_t)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Invalid URI", 11);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, a2 + 1);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v27 < 0) {
    operator delete(v25);
  }
  xpc_object_t v24 = 0;
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v10 = v9;
  if (v9)
  {
    xpc_object_t v24 = v9;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v24 = v10;
    if (!v10)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v10 = 0;
      goto LABEL_16;
    }
  }
  if (MEMORY[0x1C878F160](v10) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v11 = xpc_null_create();
LABEL_16:
    xpc_object_t v24 = v11;
    goto LABEL_17;
  }
  xpc_retain(v10);
LABEL_17:
  xpc_release(v10);
  xpc_object_t v22 = xpc_BOOL_create(0);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_object_t v25 = &v24;
  xpc_object_t v26 = (std::__shared_weak_count *)"kIsSuccess";
  xpc::dict::object_proxy::operator=((uint64_t)&v25, &v22, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v22);
  xpc_object_t v22 = 0;
  xpc_object_t v20 = xpc_string_create("Invalid URI");
  if (!v20) {
    xpc_object_t v20 = xpc_null_create();
  }
  xpc_object_t v25 = &v24;
  xpc_object_t v26 = (std::__shared_weak_count *)"kReason";
  xpc::dict::object_proxy::operator=((uint64_t)&v25, &v20, &v21);
  xpc_release(v21);
  xpc_object_t v21 = 0;
  xpc_release(v20);
  xpc_object_t v20 = 0;
  if ((a2[3].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int data = (const char *)&a2[3];
  }
  else {
    int data = a2[3].__r_.__value_.__l.__data_;
  }
  xpc_object_t v18 = xpc_string_create(data);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  xpc_object_t v25 = &v24;
  xpc_object_t v26 = (std::__shared_weak_count *)"kConversationId";
  xpc::dict::object_proxy::operator=((uint64_t)&v25, &v18, &v19);
  xpc_release(v19);
  xpc_object_t v19 = 0;
  xpc_release(v18);
  xpc_object_t v18 = 0;
  if ((a2[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v13 = (const char *)&a2[1];
  }
  else {
    xpc_object_t v13 = a2[1].__r_.__value_.__l.__data_;
  }
  xpc_object_t v16 = xpc_string_create(v13);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_object_t v25 = &v24;
  xpc_object_t v26 = (std::__shared_weak_count *)"kTransactionId";
  xpc::dict::object_proxy::operator=((uint64_t)&v25, &v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_object_t v25 = 0;
  xpc_object_t v26 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)&a2->__r_.__value_.__l.__data_, &v25);
  xpc_object_t v14 = (LazuliDelegate *)v25;
  if (v25)
  {
    xpc_object_t v15 = v24;
    if (v24) {
      xpc_retain(v24);
    }
    else {
      xpc_object_t v15 = xpc_null_create();
    }
    LazuliDelegate::handleParticipantRemoved(v14, &v15);
    xpc_release(v15);
    xpc_object_t v15 = 0;
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  xpc_release(v24);
LABEL_39:
  SipUri::~SipUri((SipUri *)__p);
}

void sub_1C565A654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t a19, void *__p,std::__shared_weak_count *a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  xpc_release(a19);
  SipUri::~SipUri((SipUri *)&a28);
  _Unwind_Resume(a1);
}

void IMSSMSManager::changeLazuliGroupInfo(IMSSMSManager *this, std::string *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "laz.mgr.changeLazuliGroupInfo");
  uint64_t v4 = ims::debug((uint64_t)__p, (uint64_t)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"IMSSMSManager::changeLazuliGroupInfo", 36);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (SBYTE7(v47) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(BambiClient **)(*((void *)this + 63) + 168);
  uint64_t v71 = 0;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  *(_OWORD *)long long __p = 0u;
  SipUri::SipUri((SipUri *)__p);
  uint64_t v6 = *((void *)this + 63);
  (*(void (**)(SipStack **__return_ptr, BambiClient *, std::string *))(*(void *)v5 + 192))(&v44, v5, a2);
  OutgoingUruint64_t i = IPTelephonyManager::makeOutgoingUri(v6, &v44, a2 + 2, (SipUri *)__p);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (OutgoingUri)
  {
    {
      LODWORD(v41) = BambiClient::changeLazuliGroupInfo(v5, (const LazuliSendParams *)a2, (const SipUri *)__p);
      if (v41) {
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)this + 52, (unsigned int *)&v41, &v41);
      }
      goto LABEL_65;
    }
    std::string::basic_string[abi:ne180100]<0>(&v41, "laz.mgr.send");
    uint64_t v11 = ims::error((uint64_t)&v41, (uint64_t)a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Invalid content type", 20);
    *(unsigned char *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 32))(v11, a2 + 7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"  Cannot send message", 21);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (v43 < 0) {
      operator delete(v41);
    }
    xpc_object_t v40 = 0;
    xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v13 = v12;
    if (v12)
    {
      xpc_object_t v40 = v12;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
      xpc_object_t v40 = v13;
      if (!v13)
      {
        xpc_object_t v15 = xpc_null_create();
        xpc_object_t v13 = 0;
        goto LABEL_46;
      }
    }
    if (MEMORY[0x1C878F160](v13) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v13);
LABEL_47:
      xpc_release(v13);
      xpc_object_t v29 = xpc_BOOL_create(0);
      if (!v29) {
        xpc_object_t v29 = xpc_null_create();
      }
      long long v41 = &v40;
      long long v42 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v41, &v29, &v30);
      xpc_release(v30);
      xpc_object_t v30 = 0;
      xpc_release(v29);
      xpc_object_t v29 = 0;
      xpc_object_t v27 = xpc_string_create("Invalid content type");
      if (!v27) {
        xpc_object_t v27 = xpc_null_create();
      }
      long long v41 = &v40;
      long long v42 = "kReason";
      xpc::dict::object_proxy::operator=((uint64_t)&v41, &v27, &v28);
      xpc_release(v28);
      xpc_object_t v28 = 0;
      xpc_release(v27);
      xpc_object_t v27 = 0;
      if ((a2[3].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int data = (const char *)&a2[3];
      }
      else {
        int data = a2[3].__r_.__value_.__l.__data_;
      }
      xpc_object_t v25 = xpc_string_create(data);
      if (!v25) {
        xpc_object_t v25 = xpc_null_create();
      }
      long long v41 = &v40;
      long long v42 = "kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v41, &v25, &v26);
      xpc_release(v26);
      xpc_object_t v26 = 0;
      xpc_release(v25);
      xpc_object_t v25 = 0;
      if ((a2[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        xpc_object_t v20 = (const char *)&a2[1];
      }
      else {
        xpc_object_t v20 = a2[1].__r_.__value_.__l.__data_;
      }
      xpc_object_t v23 = xpc_string_create(v20);
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
      long long v41 = &v40;
      long long v42 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v41, &v23, &v24);
      xpc_release(v24);
      xpc_object_t v24 = 0;
      xpc_release(v23);
      xpc_object_t v21 = v40;
      xpc_object_t v22 = v40;
      xpc_object_t v23 = 0;
      if (v40)
      {
        xpc_retain(v40);
      }
      else
      {
        xpc_object_t v21 = xpc_null_create();
        xpc_object_t v22 = v21;
      }
      IMSSMSManager::reportSendStatus((void **)&a2->__r_.__value_.__l.__data_, &v22);
      xpc_release(v21);
      xpc_object_t v22 = 0;
      xpc_release(v40);
      goto LABEL_65;
    }
    xpc_object_t v15 = xpc_null_create();
LABEL_46:
    xpc_object_t v40 = v15;
    goto LABEL_47;
  }
  std::string::basic_string[abi:ne180100]<0>(&v41, "laz.mgr.send");
  uint64_t v8 = ims::error((uint64_t)&v41, (uint64_t)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Invalid URI", 11);
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, a2 + 1);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v43 < 0) {
    operator delete(v41);
  }
  xpc_object_t v40 = 0;
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v10 = v9;
  if (v9)
  {
    xpc_object_t v40 = v9;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v40 = v10;
    if (!v10)
    {
      xpc_object_t v14 = xpc_null_create();
      xpc_object_t v10 = 0;
      goto LABEL_26;
    }
  }
  if (MEMORY[0x1C878F160](v10) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v14 = xpc_null_create();
LABEL_26:
    xpc_object_t v40 = v14;
    goto LABEL_27;
  }
  xpc_retain(v10);
LABEL_27:
  xpc_release(v10);
  xpc_object_t v38 = xpc_BOOL_create(0);
  if (!v38) {
    xpc_object_t v38 = xpc_null_create();
  }
  long long v41 = &v40;
  long long v42 = "kIsSuccess";
  xpc::dict::object_proxy::operator=((uint64_t)&v41, &v38, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v38);
  xpc_object_t v38 = 0;
  xpc_object_t v36 = xpc_string_create("Invalid URI");
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  long long v41 = &v40;
  long long v42 = "kReason";
  xpc::dict::object_proxy::operator=((uint64_t)&v41, &v36, &v37);
  xpc_release(v37);
  xpc_object_t v37 = 0;
  xpc_release(v36);
  xpc_object_t v36 = 0;
  if ((a2[3].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v16 = (const char *)&a2[3];
  }
  else {
    xpc_object_t v16 = a2[3].__r_.__value_.__l.__data_;
  }
  xpc_object_t v34 = xpc_string_create(v16);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  long long v41 = &v40;
  long long v42 = "kConversationId";
  xpc::dict::object_proxy::operator=((uint64_t)&v41, &v34, &v35);
  xpc_release(v35);
  xpc_object_t v35 = 0;
  xpc_release(v34);
  xpc_object_t v34 = 0;
  if ((a2[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v17 = (const char *)&a2[1];
  }
  else {
    xpc_object_t v17 = a2[1].__r_.__value_.__l.__data_;
  }
  xpc_object_t v32 = xpc_string_create(v17);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  long long v41 = &v40;
  long long v42 = "kTransactionId";
  xpc::dict::object_proxy::operator=((uint64_t)&v41, &v32, &v33);
  xpc_release(v33);
  xpc_object_t v33 = 0;
  xpc_release(v32);
  xpc_object_t v18 = v40;
  xpc_object_t v31 = v40;
  xpc_object_t v32 = 0;
  if (v40)
  {
    xpc_retain(v40);
  }
  else
  {
    xpc_object_t v18 = xpc_null_create();
    xpc_object_t v31 = v18;
  }
  IMSSMSManager::reportSendStatus((void **)&a2->__r_.__value_.__l.__data_, &v31);
  xpc_release(v18);
  xpc_object_t v31 = 0;
  xpc_release(v40);
LABEL_65:
  SipUri::~SipUri((SipUri *)__p);
}

void sub_1C565AEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,xpc_object_t object,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36)
{
  xpc_release(v36);
  xpc_release(object);
  SipUri::~SipUri((SipUri *)&a36);
  _Unwind_Resume(a1);
}

void sub_1C565B004(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C565AFFCLL);
}

void IMSSMSManager::reportLazuliSpam(uint64_t a1, uint64_t a2, uint64_t a3, std::string *a4, int a5, std::string *a6, uint64_t a7, void **a8, char **a9, uint64_t a10, char **a11)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.mgr.reportspam");
  uint64_t v19 = ims::debug((uint64_t)&__p, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"IMSSMSManager::reportLazuliSpam for ", 36);
  *(unsigned char *)(v19 + 17) = 0;
  if (a5) {
    xpc_object_t v20 = "Chatbot";
  }
  else {
    xpc_object_t v20 = "Contact";
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)v20, 7);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_object_t v21 = *(BambiClient **)(*(void *)(a1 + 504) + 168);
  uint64_t v55 = 0;
  memset(v54, 0, sizeof(v54));
  SipUri::SipUri((SipUri *)v54);
  uint64_t v53 = 0;
  memset(v52, 0, sizeof(v52));
  SipUri::SipUri((SipUri *)v52);
  memset(&v51, 0, sizeof(v51));
  memset(v50, 0, sizeof(v50));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(v50, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    v50[0] = *(std::string *)a2;
  }
  if (*(char *)(a7 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v50[1], *(const std::string::value_type **)a7, *(void *)(a7 + 8));
  }
  else {
    v50[1] = *(std::string *)a7;
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v51 = *(std::string *)a3;
  }
  if ((SipUri::fromString((uint64_t)v54, a4) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "laz.mgr.reportspam");
    uint64_t v24 = ims::error((uint64_t)&__p, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"Invalid URI", 11);
    *(unsigned char *)(v24 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)" (destination) : ", 17);
    *(unsigned char *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v24 + 32))(v24, a4);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v24 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_36;
  }
  if (SipUri::fromString((uint64_t)v52, a6)) {
    goto LABEL_21;
  }
  if ((a5 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "laz.mgr.reportspam");
    uint64_t v27 = ims::error((uint64_t)&__p, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"Invalid URI", 11);
    *(unsigned char *)(v27 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)" (spam reporting uri) : ", 24);
    *(unsigned char *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v27 + 32))(v27, a6);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v27 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_36:
    std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid URI");
    IMSSMSManager::reportLazuliSpam(std::string const&,std::string const&,std::string const&,BOOL,std::string,std::string const&,xpc::array const&,std::vector<unsigned char> const&,std::string const&,std::vector<unsigned char> const&)::$_0::operator()((uint64_t)v50, (uint64_t)&__p);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_94;
    }
    xpc_object_t v25 = (void *)__p.__r_.__value_.__r.__words[0];
    goto LABEL_93;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.mgr.reportspam");
  uint64_t v22 = ims::warn((uint64_t)&__p, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"spam reporting uri (", 20);
  *(unsigned char *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v22 + 32))(v22, a6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)") is invalid. Reporting chatbot spam to chatbot URI ", 52);
  *(unsigned char *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v22 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  SipUri::clear((SipUri *)v52);
LABEL_21:
  memset(&v49, 0, sizeof(v49));
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v49, *a11, a11[1], a11[1] - *a11);
  ims::escapeXMLString((uint64_t *)&v49, &__p);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  std::string v49 = __p;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0 && v49.__r_.__value_.__l.__size_ >= 0x1F5) {
    std::string::resize(&v49, 0x1F4uLL, 0);
  }
  memset(&v48, 0, sizeof(v48));
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v48, *a9, a9[1], a9[1] - *a9);
  ims::escapeXMLString((uint64_t *)&v48, &__p);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  std::string v48 = __p;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0 && v48.__r_.__value_.__l.__size_ >= 0x7D1) {
    std::string::resize(&v48, 0x7D0uLL, 0);
  }
  memset(&__sz, 0, sizeof(__sz));
  std::string::basic_string[abi:ne180100]<0>(&__sz, "");
  xpc_object_t v32 = 0;
  xpc_object_t v33 = 0;
  (*(void (**)(void **__return_ptr, BambiClient *, uint64_t))(*(void *)v21 + 192))(&v32, v21, a2);
  xpc_object_t v23 = v32;
  if (v32)
  {
    ImsUuid::generate((ImsUuid *)&__p);
    if (v37.__r_.__value_.__s.__data_[7] < 0)
    {
      std::string::__init_copy_ctor_external(&v46, (const std::string::value_type *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
      v46.__r_.__value_.__r.__words[2] = v37.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__sz.__r_.__value_.__l.__data_);
    }
    std::string __sz = v46;
    *((unsigned char *)&v46.__r_.__value_.__s + 23) = 0;
    v46.__r_.__value_.__s.__data_[0] = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3708;
    if (v37.__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__sz;
    xpc_object_t v28 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 464, (unsigned __int8 *)&__sz, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    std::string::operator=((std::string *)(v28 + 40), (const std::string *)a3);
    std::string::basic_string[abi:ne180100]<0>(&__p, "laz.mgr.reportspam");
    std::string::basic_string[abi:ne180100]<0>(&v46, "");
    uint64_t v29 = ims::debug((uint64_t)&__p, (uint64_t)&v46);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"Mapping callId: ", 16);
    *(unsigned char *)(v29 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v29 + 32))(v29, &__sz);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)" with ctTransId: ", 17);
    *(unsigned char *)(v29 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 32))(v29, a3);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v29 + 17) = 0;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    memset(&__p, 0, sizeof(__p));
    std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid IMS Stack");
    std::string::basic_string[abi:ne180100]<0>(&v46, "laz.mgr.reportspam");
    xpc_object_t v26 = (unsigned char *)ims::error((uint64_t)&v46, a2);
    (*(void (**)(unsigned char *, std::string *))(*(void *)v26 + 32))(v26, &__p);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v26[17] = 0;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v46.__r_.__value_.__l.__data_);
    }
    IMSSMSManager::reportLazuliSpam(std::string const&,std::string const&,std::string const&,BOOL,std::string,std::string const&,xpc::array const&,std::vector<unsigned char> const&,std::string const&,std::vector<unsigned char> const&)::$_0::operator()((uint64_t)v50, (uint64_t)&__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v23)
  {
    bzero(&__p, 0x3E8uLL);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v37 = *(std::string *)a3;
    }
    if (*(char *)(a7 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
    }
    else {
      std::string v38 = *(std::string *)a7;
    }
    if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v39, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
    }
    else {
      std::string v39 = __sz;
    }
    SipUri::SipUri((SipUri *)v40, (const SipUri *)v52);
    v40[408] = a5;
    SipUri::SipUri((SipUri *)&v41, (const SipUri *)v54);
    xpc_object_t v30 = *a8;
    xpc_object_t v42 = v30;
    if (v30) {
      xpc_retain(v30);
    }
    else {
      xpc_object_t v42 = xpc_null_create();
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v43, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
    }
    else {
      std::string v43 = v48;
    }
    if (*(char *)(a10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a10, *(void *)(a10 + 8));
    }
    else
    {
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)a10;
      v44.__r_.__value_.__r.__words[2] = *(void *)(a10 + 16);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v45, v49.__r_.__value_.__l.__data_, v49.__r_.__value_.__l.__size_);
    }
    else {
      std::string v45 = v49;
    }
    unsigned int v35 = 0;
    unsigned int v35 = BambiClient::reportLazuliSpam(v21, (const LazuliSpamReportParams *)&__p);
    if (v35)
    {
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(a1 + 440), &v35, &v35);
    }
    else
    {
      memset(&v46, 0, sizeof(v46));
      std::string::basic_string[abi:ne180100]<0>(&v46, "Invalid IMS Stack");
      std::string::basic_string[abi:ne180100]<0>(&v32, "laz.mgr.reportspam");
      xpc_object_t v31 = (unsigned char *)ims::error((uint64_t)&v32, a2);
      (*(void (**)(unsigned char *, std::string *))(*(void *)v31 + 32))(v31, &v46);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v31[17] = 0;
      if (v34 < 0) {
        operator delete(v32);
      }
      IMSSMSManager::reportLazuliSpam(std::string const&,std::string const&,std::string const&,BOOL,std::string,std::string const&,xpc::array const&,std::vector<unsigned char> const&,std::string const&,std::vector<unsigned char> const&)::$_0::operator()((uint64_t)v50, (uint64_t)&v46);
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
    }
    LazuliSpamReportParams::~LazuliSpamReportParams((void **)&__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__sz.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
  {
    xpc_object_t v25 = (void *)v49.__r_.__value_.__r.__words[0];
LABEL_93:
    operator delete(v25);
  }
LABEL_94:
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50[1].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50[0].__r_.__value_.__l.__data_);
  }
  SipUri::~SipUri((SipUri *)v52);
  SipUri::~SipUri((SipUri *)v54);
}

void sub_1C565BC5C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (SLOBYTE(STACK[0x427]) < 0) {
    operator delete((void *)STACK[0x410]);
  }
  LazuliSpamReportParams::~LazuliSpamReportParams((void **)va);
  if (SLOBYTE(STACK[0x447]) < 0) {
    operator delete((void *)STACK[0x430]);
  }
  if (SLOBYTE(STACK[0x467]) < 0) {
    operator delete((void *)STACK[0x450]);
  }
  if (SLOBYTE(STACK[0x487]) < 0) {
    operator delete((void *)STACK[0x470]);
  }
  SipLazuliManager::OutgoingMsrp::~OutgoingMsrp((void **)&STACK[0x490]);
  SipUri::~SipUri((SipUri *)&STACK[0x4E0]);
  SipUri::~SipUri((SipUri *)&STACK[0x680]);
  _Unwind_Resume(a1);
}

void sub_1C565BEF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C565BEF0);
}

void IMSSMSManager::reportLazuliSpam(std::string const&,std::string const&,std::string const&,BOOL,std::string,std::string const&,xpc::array const&,std::vector<unsigned char> const&,std::string const&,std::vector<unsigned char> const&)::$_0::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)a1, &v23);
  if (!v23) {
    goto LABEL_29;
  }
  xpc_object_t v22 = 0;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v22 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v22 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_9;
    }
  }
  if (MEMORY[0x1C878F160](v5) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v6 = xpc_null_create();
LABEL_9:
    xpc_object_t v22 = v6;
    goto LABEL_10;
  }
  xpc_retain(v5);
LABEL_10:
  xpc_release(v5);
  xpc_object_t object = xpc_BOOL_create(0);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v18 = &v22;
  uint64_t v19 = "kIsSuccess";
  xpc::dict::object_proxy::operator=((uint64_t)&v18, &object, &v21);
  xpc_release(v21);
  xpc_object_t v21 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  if (*(char *)(a2 + 23) >= 0) {
    long long v7 = (const char *)a2;
  }
  else {
    long long v7 = *(const char **)a2;
  }
  xpc_object_t v16 = xpc_string_create(v7);
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  xpc_object_t v18 = &v22;
  uint64_t v19 = "kReason";
  xpc::dict::object_proxy::operator=((uint64_t)&v18, &v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v16);
  xpc_object_t v16 = 0;
  uint64_t v8 = (const char *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v8 = *(const char **)v8;
  }
  xpc_object_t v14 = xpc_string_create(v8);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  xpc_object_t v18 = &v22;
  uint64_t v19 = "kConversationId";
  xpc::dict::object_proxy::operator=((uint64_t)&v18, &v14, &v15);
  xpc_release(v15);
  xpc_object_t v15 = 0;
  xpc_release(v14);
  xpc_object_t v14 = 0;
  xpc_object_t v9 = (const char *)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    xpc_object_t v9 = *(const char **)v9;
  }
  xpc_object_t v12 = xpc_string_create(v9);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_object_t v18 = &v22;
  uint64_t v19 = "kTransactionId";
  xpc::dict::object_proxy::operator=((uint64_t)&v18, &v12, &v13);
  xpc_release(v13);
  xpc_object_t v13 = 0;
  xpc_release(v12);
  uint64_t v10 = v23;
  xpc_object_t v11 = v22;
  xpc_object_t v12 = 0;
  if (v22) {
    xpc_retain(v22);
  }
  else {
    xpc_object_t v11 = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(*(void *)v10 + 120))(v10, &v11);
  xpc_release(v11);
  xpc_object_t v11 = 0;
  xpc_release(v22);
LABEL_29:
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_1C565C1B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v9 - 56));
  xpc_object_t v11 = *(std::__shared_weak_count **)(v9 - 40);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

void IMSSMSManager::handleLazuliSpamReportResponse(uint64_t a1, void **a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = std::string::basic_string[abi:ne180100]<0>(&v44, "laz.mgr.reportspam");
  uint64_t v9 = ims::debug((uint64_t)v8, (uint64_t)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"IMSSMSManager::handleLazuliSpamReportResponse - statusCode: ", 60);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  xpc_object_t v43 = 0;
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v11 = v10;
  if (v10)
  {
    xpc_object_t v43 = v10;
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v43 = v11;
    if (!v11)
    {
      xpc_object_t v12 = xpc_null_create();
      xpc_object_t v11 = 0;
      goto LABEL_10;
    }
  }
  if (MEMORY[0x1C878F160](v11) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v11);
    goto LABEL_11;
  }
  xpc_object_t v12 = xpc_null_create();
LABEL_10:
  xpc_object_t v43 = v12;
LABEL_11:
  xpc_release(v11);
  int64_t v13 = *(unsigned int *)(a4 + 16);
  if ((v13 - 200) > 0x63)
  {
    xpc_object_t v39 = xpc_BOOL_create(0);
    if (!v39) {
      xpc_object_t v39 = xpc_null_create();
    }
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
    v44.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsSuccess";
    xpc::dict::object_proxy::operator=((uint64_t)&v44, &v39, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v39);
    xpc_object_t v39 = 0;
  }
  else
  {
    xpc_object_t v41 = xpc_BOOL_create(1);
    if (!v41) {
      xpc_object_t v41 = xpc_null_create();
    }
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
    v44.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsSuccess";
    xpc::dict::object_proxy::operator=((uint64_t)&v44, &v41, &v42);
    xpc_release(v42);
    xpc_object_t v42 = 0;
    xpc_release(v41);
    xpc_object_t v41 = 0;
  }
  xpc_object_t v37 = xpc_int64_create(v13);
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
  v44.__r_.__value_.__l.__size_ = (std::string::size_type)"kErrorCode";
  xpc::dict::object_proxy::operator=((uint64_t)&v44, &v37, &v38);
  xpc_release(v38);
  xpc_object_t v38 = 0;
  xpc_release(v37);
  xpc_object_t v37 = 0;
  memset(&v44, 0, sizeof(v44));
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a4 + 24))(&__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v44, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v44 = __p;
  }
  std::string::size_type size = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  char v15 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v44.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a4 + 24))(&__p, a4);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v34 = xpc_string_create((const char *)p_p);
    if (!v34) {
      xpc_object_t v34 = xpc_null_create();
    }
    v33[0] = &v43;
    v33[1] = "kReason";
    xpc::dict::object_proxy::operator=((uint64_t)v33, &v34, &v35);
    xpc_release(v35);
    xpc_object_t v35 = 0;
    xpc_release(v34);
    xpc_object_t v34 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    char v15 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  if (v15 < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a4 + 71) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a4 + 48), *(void *)(a4 + 56));
  }
  else {
    std::string __p = *(std::string *)(a4 + 48);
  }
  xpc_object_t v17 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((void *)(a1 + 464), (unsigned __int8 *)&__p);
  xpc_object_t v18 = v17;
  if (v17)
  {
    uint64_t v19 = (const char *)(v17 + 40);
    if ((char)v18[63] < 0) {
      uint64_t v19 = *(const char **)v19;
    }
    xpc_object_t v31 = xpc_string_create(v19);
    if (!v31) {
      xpc_object_t v31 = xpc_null_create();
    }
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
    v44.__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
    xpc::dict::object_proxy::operator=((uint64_t)&v44, &v31, &v32);
    xpc_release(v32);
    xpc_object_t v32 = 0;
    xpc_release(v31);
    xpc_object_t v31 = 0;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::remove((void *)(a1 + 464), v18, (uint64_t)&v44);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)&v44, 0);
  }
  else
  {
    xpc_object_t v20 = std::string::basic_string[abi:ne180100]<0>(&v44, "laz.mgr.reportspam");
    uint64_t v21 = ims::warn((uint64_t)v20, (uint64_t)a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"IMSSMSManager::handleLazuliSpamReportResponse - unknown callId: ", 64);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v21 + 32))(v21, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v44.__r_.__value_.__l.__data_);
    }
  }
  *(_OWORD *)&v44.__r_.__value_.__l.__data_ = 0uLL;
  IMSClientManager::lazuliDelegateForStack(a2, &v44);
  std::string::size_type v22 = v44.__r_.__value_.__r.__words[0];
  if (v44.__r_.__value_.__r.__words[0])
  {
    xpc_object_t v30 = v43;
    if (v43) {
      xpc_retain(v43);
    }
    else {
      xpc_object_t v30 = xpc_null_create();
    }
    (*(void (**)(std::string::size_type, xpc_object_t *))(*(void *)v22 + 120))(v22, &v30);
    xpc_release(v30);
    xpc_object_t v30 = 0;
  }
  if (v44.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v44.__r_.__value_.__l.__size_);
  }
  uint64_t v23 = *(void *)(a1 + 448);
  if (v23)
  {
    uint64_t v24 = (uint64_t **)(a1 + 440);
    uint64_t v25 = a1 + 448;
    uint64_t v26 = a1 + 448;
    do
    {
      unsigned int v27 = *(_DWORD *)(v23 + 28);
      BOOL v28 = v27 >= a3;
      if (v27 >= a3) {
        uint64_t v29 = (uint64_t *)v23;
      }
      else {
        uint64_t v29 = (uint64_t *)(v23 + 8);
      }
      if (v28) {
        uint64_t v26 = v23;
      }
      uint64_t v23 = *v29;
    }
    while (*v29);
    if (v26 != v25 && *(_DWORD *)(v26 + 28) <= a3)
    {
      std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer(v24, (uint64_t *)v26);
      operator delete((void *)v26);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_release(v43);
}

void sub_1C565C808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v22 - 88));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSSMSManager::handleLazuliSpamReportResponse(uint64_t a1, void **a2, unsigned int a3, uint64_t a4)
{
}

void IMSSMSManager::getCapabilities(uint64_t a1, void **a2, uint64_t a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.mgr.cap");
  uint64_t v8 = ims::debug((uint64_t)&__p, (uint64_t)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"IMSSMSManager::getCapabilities", 30);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SBYTE7(v42) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v9 = *(void **)(*(void *)(a1 + 504) + 168);
  uint64_t v66 = 0;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long __p = 0u;
  SipUri::SipUri((SipUri *)&__p);
  uint64_t v10 = *(void *)(a1 + 504);
  (*(void (**)(SipStack **__return_ptr, void *, void **))(*v9 + 192))(&v39, v9, a2);
  OutgoingUruint64_t i = IPTelephonyManager::makeOutgoingUri(v10, &v39, (std::string *)a4, (SipUri *)&__p);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (OutgoingUri)
  {
    LODWORD(v36) = BambiClient::sendOptionsRequest(v9, (uint64_t)a2, a3, (const SipUri *)&__p);
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(a1 + 416), (unsigned int *)&v36, &v36);
    goto LABEL_45;
  }
  std::string::basic_string[abi:ne180100]<0>(&v36, "laz.mgr.cap");
  uint64_t v12 = ims::error((uint64_t)&v36, (uint64_t)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"Invalid URI", 11);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 32))(v12, a3);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v38 < 0) {
    operator delete(v36);
  }
  xpc_object_t v36 = 0;
  xpc_object_t v37 = 0;
  IMSClientManager::lazuliDelegateForStack(a2, &v36);
  if (v36)
  {
    xpc_object_t v35 = 0;
    xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v14 = v13;
    if (v13)
    {
      xpc_object_t v35 = v13;
    }
    else
    {
      xpc_object_t v14 = xpc_null_create();
      xpc_object_t v35 = v14;
      if (!v14)
      {
        xpc_object_t v15 = xpc_null_create();
        xpc_object_t v14 = 0;
        goto LABEL_17;
      }
    }
    if (MEMORY[0x1C878F160](v14) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v14);
LABEL_18:
      xpc_release(v14);
      xpc_object_t v33 = xpc_BOOL_create(0);
      if (!v33) {
        xpc_object_t v33 = xpc_null_create();
      }
      xpc_object_t v31 = &v35;
      xpc_object_t v32 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v31, &v33, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v33);
      xpc_object_t v33 = 0;
      xpc_object_t v29 = xpc_int64_create(0);
      if (!v29) {
        xpc_object_t v29 = xpc_null_create();
      }
      xpc_object_t v31 = &v35;
      xpc_object_t v32 = "kServiceMask";
      xpc::dict::object_proxy::operator=((uint64_t)&v31, &v29, &v30);
      xpc_release(v30);
      xpc_object_t v30 = 0;
      xpc_release(v29);
      xpc_object_t v29 = 0;
      xpc_object_t v27 = xpc_string_create("Invalid URI");
      if (!v27) {
        xpc_object_t v27 = xpc_null_create();
      }
      xpc_object_t v31 = &v35;
      xpc_object_t v32 = "kReason";
      xpc::dict::object_proxy::operator=((uint64_t)&v31, &v27, &v28);
      xpc_release(v28);
      xpc_object_t v28 = 0;
      xpc_release(v27);
      xpc_object_t v27 = 0;
      if (*(char *)(a3 + 23) >= 0) {
        xpc_object_t v16 = (const char *)a3;
      }
      else {
        xpc_object_t v16 = *(const char **)a3;
      }
      xpc_object_t v25 = xpc_string_create(v16);
      if (!v25) {
        xpc_object_t v25 = xpc_null_create();
      }
      xpc_object_t v31 = &v35;
      xpc_object_t v32 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v31, &v25, &v26);
      xpc_release(v26);
      xpc_object_t v26 = 0;
      xpc_release(v25);
      xpc_object_t v25 = 0;
      if (*(char *)(a4 + 23) >= 0) {
        xpc_object_t v17 = (const char *)a4;
      }
      else {
        xpc_object_t v17 = *(const char **)a4;
      }
      xpc_object_t v23 = xpc_string_create(v17);
      if (!v23) {
        xpc_object_t v23 = xpc_null_create();
      }
      xpc_object_t v31 = &v35;
      xpc_object_t v32 = "kRemoteUri";
      xpc::dict::object_proxy::operator=((uint64_t)&v31, &v23, &v24);
      xpc_release(v24);
      xpc_object_t v24 = 0;
      xpc_release(v23);
      xpc_object_t v23 = 0;
      if (*(char *)(a4 + 23) >= 0) {
        xpc_object_t v18 = (const char *)a4;
      }
      else {
        xpc_object_t v18 = *(const char **)a4;
      }
      xpc_object_t v21 = xpc_string_create(v18);
      if (!v21) {
        xpc_object_t v21 = xpc_null_create();
      }
      xpc_object_t v31 = &v35;
      xpc_object_t v32 = "kRemoteIdentity";
      xpc::dict::object_proxy::operator=((uint64_t)&v31, &v21, &v22);
      xpc_release(v22);
      xpc_object_t v22 = 0;
      xpc_release(v21);
      uint64_t v19 = v36;
      xpc_object_t v20 = v35;
      xpc_object_t v21 = 0;
      if (v35) {
        xpc_retain(v35);
      }
      else {
        xpc_object_t v20 = xpc_null_create();
      }
      (*(void (**)(void *, xpc_object_t *))(*(void *)v19 + 96))(v19, &v20);
      xpc_release(v20);
      xpc_object_t v20 = 0;
      xpc_release(v35);
      goto LABEL_43;
    }
    xpc_object_t v15 = xpc_null_create();
LABEL_17:
    xpc_object_t v35 = v15;
    goto LABEL_18;
  }
LABEL_43:
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
LABEL_45:
  SipUri::~SipUri((SipUri *)&__p);
}

void sub_1C565CEA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,xpc_object_t a25,void *__p,std::__shared_weak_count *a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  SipUri::~SipUri((SipUri *)&a34);
  _Unwind_Resume(a1);
}

void sub_1C565CF78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C565CF70);
}

void IMSSMSManager::handleIncomingLazuli(uint64_t a1, void **a2, uint64_t a3, const SipUri *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v67[4] = *MEMORY[0x1E4F143B8];
  v65[0] = 0;
  v65[1] = 0;
  uint64_t v66 = 0;
  SipUri::asString(a3, (uint64_t)v65);
  v63[0] = 0;
  v63[1] = 0;
  uint64_t v64 = 0;
  xpc_object_t v17 = (SipUri *)SipUri::anonymousUri(v16);
  if ((SipUri::equals(v17, a4, 1) & 1) == 0) {
    SipUri::asString((uint64_t)a4, (uint64_t)v63);
  }
  xpc_object_t v18 = std::string::basic_string[abi:ne180100]<0>(&v60, "laz.mgr.del");
  uint64_t v19 = ims::debug((uint64_t)v18, (uint64_t)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"incoming(stackId: ", 18);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v19 + 32))(v19, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" sender: ", 9);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v19 + 32))(v19, v65);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" remote identity: <", 19);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v19 + 32))(v19, v63);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"> Contribution-ID: [", 20);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 32))(v19, a6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"] body length:", 14);
  *(unsigned char *)(v19 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v19 + 17) = 0;
  xpc_object_t v20 = *(void **)(v19 + 8);
  LOBYTE(v40[0]) = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v40, 1);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (SHIBYTE(v62) < 0) {
    operator delete(v60);
  }
  xpc_object_t v59 = 0;
  xpc_object_t v21 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v22 = v21;
  if (v21)
  {
    xpc_object_t v59 = v21;
  }
  else
  {
    xpc_object_t v22 = xpc_null_create();
    xpc_object_t v59 = v22;
    if (!v22)
    {
      xpc_object_t v23 = xpc_null_create();
      xpc_object_t v22 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C878F160](v22) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v22);
    goto LABEL_13;
  }
  xpc_object_t v23 = xpc_null_create();
LABEL_12:
  xpc_object_t v59 = v23;
LABEL_13:
  xpc_release(v22);
  if (*(char *)(a5 + 23) >= 0) {
    xpc_object_t v24 = (const char *)a5;
  }
  else {
    xpc_object_t v24 = *(const char **)a5;
  }
  xpc_object_t v57 = xpc_string_create(v24);
  if (!v57) {
    xpc_object_t v57 = xpc_null_create();
  }
  long long v60 = &v59;
  long long v61 = "kConversationId";
  xpc::dict::object_proxy::operator=((uint64_t)&v60, &v57, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v57);
  xpc_object_t v57 = 0;
  if (*(char *)(a6 + 23) >= 0) {
    xpc_object_t v25 = (const char *)a6;
  }
  else {
    xpc_object_t v25 = *(const char **)a6;
  }
  xpc_object_t v55 = xpc_string_create(v25);
  if (!v55) {
    xpc_object_t v55 = xpc_null_create();
  }
  long long v60 = &v59;
  long long v61 = "kContributionId";
  xpc::dict::object_proxy::operator=((uint64_t)&v60, &v55, &v56);
  xpc_release(v56);
  xpc_object_t v56 = 0;
  xpc_release(v55);
  xpc_object_t v55 = 0;
  if (v66 >= 0) {
    xpc_object_t v26 = (const char *)v65;
  }
  else {
    xpc_object_t v26 = (const char *)v65[0];
  }
  xpc_object_t v53 = xpc_string_create(v26);
  if (!v53) {
    xpc_object_t v53 = xpc_null_create();
  }
  long long v60 = &v59;
  long long v61 = "kRemoteUri";
  xpc::dict::object_proxy::operator=((uint64_t)&v60, &v53, &v54);
  xpc_release(v54);
  xpc_object_t v54 = 0;
  xpc_release(v53);
  xpc_object_t v53 = 0;
  if (v64 >= 0) {
    xpc_object_t v27 = (const char *)v63;
  }
  else {
    xpc_object_t v27 = (const char *)v63[0];
  }
  xpc_object_t v51 = xpc_string_create(v27);
  if (!v51) {
    xpc_object_t v51 = xpc_null_create();
  }
  long long v60 = &v59;
  long long v61 = "kRemoteIdentity";
  xpc::dict::object_proxy::operator=((uint64_t)&v60, &v51, &v52);
  xpc_release(v52);
  xpc_object_t v52 = 0;
  xpc_release(v51);
  xpc_object_t v51 = 0;
  if (*(char *)(a7 + 23) >= 0) {
    xpc_object_t v28 = (const char *)a7;
  }
  else {
    xpc_object_t v28 = *(const char **)a7;
  }
  xpc_object_t v49 = xpc_string_create(v28);
  if (!v49) {
    xpc_object_t v49 = xpc_null_create();
  }
  long long v60 = &v59;
  long long v61 = "kInReplyToContributionId";
  xpc::dict::object_proxy::operator=((uint64_t)&v60, &v49, &v50);
  xpc_release(v50);
  xpc_object_t v50 = 0;
  xpc_release(v49);
  xpc_object_t v49 = 0;
  if (*(char *)(a9 + 23) >= 0) {
    xpc_object_t v29 = (const char *)a9;
  }
  else {
    xpc_object_t v29 = *(const char **)a9;
  }
  xpc_object_t v47 = xpc_string_create(v29);
  if (!v47) {
    xpc_object_t v47 = xpc_null_create();
  }
  long long v60 = &v59;
  long long v61 = "kContentType";
  xpc::dict::object_proxy::operator=((uint64_t)&v60, &v47, &v48);
  xpc_release(v48);
  xpc_object_t v48 = 0;
  xpc_release(v47);
  xpc_object_t v47 = 0;
  long long v60 = 0;
  long long v61 = 0;
  uint64_t v62 = 0;
  int v30 = *(char *)(a8 + 23);
  if (v30 >= 0) {
    xpc_object_t v31 = (char *)a8;
  }
  else {
    xpc_object_t v31 = *(char **)a8;
  }
  if (v30 >= 0) {
    size_t v32 = *(unsigned __int8 *)(a8 + 23);
  }
  else {
    size_t v32 = *(void *)(a8 + 8);
  }
  if (v32)
  {
    if ((v32 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    std::vector<unsigned char>::__vallocate[abi:ne180100](&v60, v32);
    xpc_object_t v33 = (char *)v61;
    do
    {
      char v34 = *v31++;
      *v33++ = v34;
      --v32;
    }
    while (v32);
    long long v61 = v33;
    xpc_object_t v35 = v60;
  }
  else
  {
    xpc_object_t v35 = 0;
    long long v61 = 0;
    xpc_object_t v33 = 0;
  }
  xpc_object_t v45 = xpc_data_create(v35, v33 - (char *)v35);
  if (!v45) {
    xpc_object_t v45 = xpc_null_create();
  }
  v40[0] = &v59;
  v40[1] = "kBody";
  xpc::dict::object_proxy::operator=((uint64_t)v40, &v45, &v46);
  xpc_release(v46);
  xpc_object_t v46 = 0;
  xpc_release(v45);
  long long v44 = 0;
  xpc_object_t v45 = 0;
  long long v43 = 0;
  IMSClientManager::lazuliDelegateForStack(a2, &v43);
  xpc_object_t v36 = v43;
  if (v43)
  {
    xpc_object_t v42 = v59;
    if (v59) {
      xpc_retain(v59);
    }
    else {
      xpc_object_t v42 = xpc_null_create();
    }
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v67, a10);
    LazuliDelegate::handleMessageReceivedWithCompletion(v36, &v42, (uint64_t)v67);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v67);
    xpc_release(v42);
    xpc_object_t v42 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v40, "laz.mgr.del");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v37 = ims::error((uint64_t)v40, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"No lazuli delegate set for stackId ", 35);
    *(unsigned char *)(v37 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v37 + 32))(v37, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v37 + 17) = 0;
    if (v39 < 0) {
      operator delete(__p[0]);
    }
    if (v41 < 0) {
      operator delete(v40[0]);
    }
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v60)
  {
    long long v61 = (const char *)v60;
    operator delete(v60);
  }
  xpc_release(v59);
  if (SHIBYTE(v64) < 0) {
    operator delete(v63[0]);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete(v65[0]);
  }
}

void sub_1C565D708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,xpc_object_t object)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  xpc_object_t v40 = *(void **)(v38 - 176);
  if (v40)
  {
    *(void *)(v38 - 168) = v40;
    operator delete(v40);
  }
  xpc_release(object);
  if (*(char *)(v38 - 129) < 0) {
    operator delete(*(void **)(v38 - 152));
  }
  if (*(char *)(v38 - 105) < 0) {
    operator delete(*(void **)(v38 - 128));
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSSMSManager::handleIncomingLazuli(uint64_t a1, void **a2, uint64_t a3, const SipUri *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void IMSSMSManager::handleLazuliError(uint64_t **a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = std::string::basic_string[abi:ne180100]<0>(&v54, "laz.mgr.del");
  uint64_t v11 = ims::debug((uint64_t)v10, (uint64_t)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"error(stackId: ", 15);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v11 + 32))(v11, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" messageSequence: ", 18);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" error: ", 8);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a5 + 16))(a5, v11);
  uint64_t v12 = *(void **)(v11 + 8);
  __p.__r_.__value_.__s.__data_[0] = 41;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&__p, 1);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  xpc_object_t v13 = a1[56];
  if (v13)
  {
    xpc_object_t v14 = a1 + 56;
    do
    {
      unsigned int v15 = *((_DWORD *)v13 + 7);
      BOOL v16 = v15 >= a3;
      if (v15 >= a3) {
        xpc_object_t v17 = (uint64_t **)v13;
      }
      else {
        xpc_object_t v17 = (uint64_t **)(v13 + 1);
      }
      if (v16) {
        xpc_object_t v14 = (uint64_t **)v13;
      }
      xpc_object_t v13 = *v17;
    }
    while (*v17);
    if (v14 != a1 + 56 && *((_DWORD *)v14 + 7) <= a3)
    {
      ((void (*)(uint64_t **, void **, uint64_t, uint64_t))(*a1)[11])(a1, a2, a3, a5);
      return;
    }
  }
  if (*(uint64_t **)(a5 + 8) != &SipResultDomain::_domain)
  {
    unsigned int v18 = 0;
LABEL_16:
    BOOL v19 = 0;
    goto LABEL_21;
  }
  unsigned int v18 = *(_DWORD *)(a5 + 16);
  if (v18 - 486 >= 2 && v18 != 408 && v18 != 380) {
    goto LABEL_16;
  }
  BOOL v19 = 1;
LABEL_21:
  xpc_object_t v53 = 0;
  xpc_object_t v20 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v21 = v20;
  if (v20)
  {
    xpc_object_t v53 = v20;
  }
  else
  {
    xpc_object_t v21 = xpc_null_create();
    xpc_object_t v53 = v21;
    if (!v21)
    {
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v21 = 0;
      goto LABEL_29;
    }
  }
  if (MEMORY[0x1C878F160](v21) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v21);
    goto LABEL_30;
  }
  xpc_object_t v22 = xpc_null_create();
LABEL_29:
  xpc_object_t v53 = v22;
LABEL_30:
  xpc_release(v21);
  xpc_object_t v51 = xpc_BOOL_create(0);
  if (!v51) {
    xpc_object_t v51 = xpc_null_create();
  }
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  v54.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsSuccess";
  xpc::dict::object_proxy::operator=((uint64_t)&v54, &v51, &v52);
  xpc_release(v52);
  xpc_object_t v52 = 0;
  xpc_release(v51);
  xpc_object_t v51 = 0;
  memset(&v54, 0, sizeof(v54));
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a5 + 24))(&__p, a5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v54, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string v54 = __p;
  }
  std::string::size_type size = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  char v24 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v54.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a5 + 24))(&__p, a5);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v48 = xpc_string_create((const char *)p_p);
    if (!v48) {
      xpc_object_t v48 = xpc_null_create();
    }
    v47[0] = &v53;
    v47[1] = "kReason";
    xpc::dict::object_proxy::operator=((uint64_t)v47, &v48, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v48);
    xpc_object_t v48 = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    char v24 = HIBYTE(v54.__r_.__value_.__r.__words[2]);
  }
  if ((v24 & 0x80) == 0)
  {
    if (!v18) {
      goto LABEL_54;
    }
LABEL_51:
    xpc_object_t v45 = xpc_int64_create(v18);
    if (!v45) {
      xpc_object_t v45 = xpc_null_create();
    }
    v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
    v54.__r_.__value_.__l.__size_ = (std::string::size_type)"kErrorCode";
    xpc::dict::object_proxy::operator=((uint64_t)&v54, &v45, &v46);
    xpc_release(v46);
    xpc_object_t v46 = 0;
    xpc_release(v45);
    xpc_object_t v45 = 0;
    goto LABEL_54;
  }
  operator delete(v54.__r_.__value_.__l.__data_);
  if (v18) {
    goto LABEL_51;
  }
LABEL_54:
  if (*(char *)(a4 + 23) >= 0) {
    xpc_object_t v26 = (const char *)a4;
  }
  else {
    xpc_object_t v26 = *(const char **)a4;
  }
  xpc_object_t v43 = xpc_string_create(v26);
  if (!v43) {
    xpc_object_t v43 = xpc_null_create();
  }
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  v54.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
  xpc::dict::object_proxy::operator=((uint64_t)&v54, &v43, &v44);
  xpc_release(v44);
  xpc_object_t v44 = 0;
  xpc_release(v43);
  xpc_object_t v43 = 0;
  if (*(char *)(a5 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v54, *(const std::string::value_type **)(a5 + 48), *(void *)(a5 + 56));
  }
  else {
    std::string v54 = *(std::string *)(a5 + 48);
  }
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    xpc_object_t v27 = &v54;
  }
  else {
    xpc_object_t v27 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v41 = xpc_string_create((const char *)v27);
  if (!v41) {
    xpc_object_t v41 = xpc_null_create();
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v41, &v42);
  xpc_release(v42);
  xpc_object_t v42 = 0;
  xpc_release(v41);
  xpc_object_t v41 = 0;
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  xpc_object_t v39 = xpc_BOOL_create(v19);
  if (!v39) {
    xpc_object_t v39 = xpc_null_create();
  }
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  v54.__r_.__value_.__l.__size_ = (std::string::size_type)"kFallbackNeeded";
  xpc::dict::object_proxy::operator=((uint64_t)&v54, &v39, &v40);
  xpc_release(v40);
  xpc_object_t v40 = 0;
  xpc_release(v39);
  xpc_object_t v39 = 0;
  xpc_object_t v37 = xpc_BOOL_create(0);
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
  v54.__r_.__value_.__l.__size_ = (std::string::size_type)"kChatbotConversationNeeded";
  xpc::dict::object_proxy::operator=((uint64_t)&v54, &v37, &v38);
  xpc_release(v38);
  xpc_object_t v38 = 0;
  xpc_release(v37);
  xpc_object_t v28 = v53;
  xpc_object_t v36 = v53;
  xpc_object_t v37 = 0;
  if (v53)
  {
    xpc_retain(v53);
  }
  else
  {
    xpc_object_t v28 = xpc_null_create();
    xpc_object_t v36 = v28;
  }
  IMSSMSManager::reportSendStatus(a2, &v36);
  xpc_release(v28);
  xpc_object_t v36 = 0;
  xpc_object_t v29 = a1[53];
  if (v29)
  {
    int v30 = a1 + 52;
    xpc_object_t v31 = (uint64_t *)(a1 + 53);
    size_t v32 = (uint64_t *)(a1 + 53);
    do
    {
      unsigned int v33 = *((_DWORD *)v29 + 7);
      BOOL v34 = v33 >= a3;
      if (v33 >= a3) {
        xpc_object_t v35 = (uint64_t **)v29;
      }
      else {
        xpc_object_t v35 = (uint64_t **)(v29 + 1);
      }
      if (v34) {
        size_t v32 = v29;
      }
      xpc_object_t v29 = *v35;
    }
    while (*v35);
    if (v32 != v31 && *((_DWORD *)v32 + 7) <= a3)
    {
      std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer(v30, v32);
      operator delete(v32);
    }
  }
  xpc_release(v53);
}

void sub_1C565DF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  xpc_release(*(xpc_object_t *)(v30 - 120));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSSMSManager::handleLazuliError(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void IMSSMSManager::handleLazuliSent(uint64_t **a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.mgr.del");
  uint64_t v10 = ims::debug((uint64_t)&__p, (uint64_t)a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"sent(stackId: ", 14);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v10 + 32))(v10, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" messageSequence:", 17);
  *(unsigned char *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" ctTransactionId:", 17);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (SHIBYTE(v41) < 0) {
    operator delete(__p);
  }
  uint64_t v11 = a1[56];
  if (v11)
  {
    uint64_t v12 = a1 + 56;
    do
    {
      unsigned int v13 = *((_DWORD *)v11 + 7);
      BOOL v14 = v13 >= a3;
      if (v13 >= a3) {
        unsigned int v15 = (uint64_t **)v11;
      }
      else {
        unsigned int v15 = (uint64_t **)(v11 + 1);
      }
      if (v14) {
        uint64_t v12 = (uint64_t **)v11;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
    if (v12 != a1 + 56 && *((_DWORD *)v12 + 7) <= a3)
    {
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      uint64_t v44 = 0;
      memset(&v45, 0, sizeof(v45));
      std::string __p = &unk_1F20B2680;
      xpc_object_t v40 = (const char *)&_bambiDomain;
      uint64_t v43 = 0;
      std::string::operator=(&v45, (const std::string *)a5);
      LODWORD(v41) = 200;
      ((void (*)(uint64_t **, void **, uint64_t, void **))(*a1)[11])(a1, a2, a3, &__p);
      ImsResult::~ImsResult((ImsResult *)&__p);
      return;
    }
  }
  BOOL v16 = a1[53];
  if (v16)
  {
    xpc_object_t v17 = a1 + 52;
    unsigned int v18 = (uint64_t *)(a1 + 53);
    BOOL v19 = (uint64_t *)(a1 + 53);
    do
    {
      unsigned int v20 = *((_DWORD *)v16 + 7);
      BOOL v21 = v20 >= a3;
      if (v20 >= a3) {
        xpc_object_t v22 = (uint64_t **)v16;
      }
      else {
        xpc_object_t v22 = (uint64_t **)(v16 + 1);
      }
      if (v21) {
        BOOL v19 = v16;
      }
      BOOL v16 = *v22;
    }
    while (*v22);
    if (v19 != v18 && *((_DWORD *)v19 + 7) <= a3)
    {
      std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer(v17, v19);
      operator delete(v19);
    }
  }
  xpc_object_t v38 = 0;
  xpc_object_t v23 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v24 = v23;
  if (v23)
  {
    xpc_object_t v38 = v23;
  }
  else
  {
    xpc_object_t v24 = xpc_null_create();
    xpc_object_t v38 = v24;
    if (!v24)
    {
      xpc_object_t v25 = xpc_null_create();
      xpc_object_t v24 = 0;
      goto LABEL_34;
    }
  }
  if (MEMORY[0x1C878F160](v24) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v25 = xpc_null_create();
LABEL_34:
    xpc_object_t v38 = v25;
    goto LABEL_35;
  }
  xpc_retain(v24);
LABEL_35:
  xpc_release(v24);
  xpc_object_t v36 = xpc_BOOL_create(1);
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  std::string __p = &v38;
  xpc_object_t v40 = "kIsSuccess";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v36, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v36);
  xpc_object_t v36 = 0;
  xpc_object_t v34 = xpc_int64_create(202);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  std::string __p = &v38;
  xpc_object_t v40 = "kErrorCode";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v34, &v35);
  xpc_release(v35);
  xpc_object_t v35 = 0;
  xpc_release(v34);
  xpc_object_t v34 = 0;
  if (*(char *)(a4 + 23) >= 0) {
    xpc_object_t v26 = (const char *)a4;
  }
  else {
    xpc_object_t v26 = *(const char **)a4;
  }
  xpc_object_t v32 = xpc_string_create(v26);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  std::string __p = &v38;
  xpc_object_t v40 = "kConversationId";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v32, &v33);
  xpc_release(v33);
  xpc_object_t v33 = 0;
  xpc_release(v32);
  xpc_object_t v32 = 0;
  if (*(char *)(a5 + 23) >= 0) {
    xpc_object_t v27 = (const char *)a5;
  }
  else {
    xpc_object_t v27 = *(const char **)a5;
  }
  xpc_object_t v30 = xpc_string_create(v27);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  std::string __p = &v38;
  xpc_object_t v40 = "kTransactionId";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v30, &v31);
  xpc_release(v31);
  xpc_object_t v31 = 0;
  xpc_release(v30);
  xpc_object_t v28 = v38;
  xpc_object_t v29 = v38;
  xpc_object_t v30 = 0;
  if (v38)
  {
    xpc_retain(v38);
  }
  else
  {
    xpc_object_t v28 = xpc_null_create();
    xpc_object_t v29 = v28;
  }
  IMSSMSManager::reportSendStatus(a2, &v29);
  xpc_release(v28);
  xpc_object_t v29 = 0;
  xpc_release(v38);
}

void sub_1C565E524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

void non-virtual thunk to'IMSSMSManager::handleLazuliSent(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void IMSSMSManager::handleLazuliCapabilitiesReceived(uint64_t a1, uint64_t a2, SipUri *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  xpc_object_t v11 = xpc_array_create(0, 0);
  if (v11 || (xpc_object_t v11 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C878F160](v11) == MEMORY[0x1E4F14568]) {
      xpc_retain(v11);
    }
    else {
      xpc_null_create();
    }
  }
  else
  {
    xpc_null_create();
    xpc_object_t v11 = 0;
  }
  xpc_release(v11);
  if (*(void *)a4 != *(void *)(a4 + 8)) {
    SipUri::getUriString(*(SipUri **)a4);
  }
  xpc_object_t v19 = 0;
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v13 = v12;
  if (v12)
  {
    xpc_object_t v19 = v12;
  }
  else
  {
    xpc_object_t v13 = xpc_null_create();
    xpc_object_t v19 = v13;
    if (!v13)
    {
      xpc_object_t v14 = xpc_null_create();
      xpc_object_t v13 = 0;
      goto LABEL_16;
    }
  }
  if (MEMORY[0x1C878F160](v13) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v13);
    goto LABEL_17;
  }
  xpc_object_t v14 = xpc_null_create();
LABEL_16:
  xpc_object_t v19 = v14;
LABEL_17:
  xpc_release(v13);
  xpc_object_t v17 = xpc_BOOL_create(1);
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  unsigned int v20 = &v19;
  BOOL v21 = "kIsSuccess";
  xpc::dict::object_proxy::operator=((uint64_t)&v20, &v17, &v18);
  xpc_release(v18);
  xpc_object_t v18 = 0;
  xpc_release(v17);
  xpc_object_t v17 = 0;
  if (a8)
  {
    xpc_object_t object = xpc_int64_create(a8);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    unsigned int v20 = &v19;
    BOOL v21 = "kErrorCode";
    xpc::dict::object_proxy::operator=((uint64_t)&v20, &object, &v16);
    xpc_release(v16);
    xpc_object_t v16 = 0;
    xpc_release(object);
    xpc_object_t object = 0;
  }
  SipUri::getUriString(a3);
}

void sub_1C565ECD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v19 - 89) < 0) {
    operator delete(*(void **)(v19 - 112));
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  xpc_release(*(xpc_object_t *)(v19 - 120));
  xpc_release(v18);
  _Unwind_Resume(a1);
}

void IMSSMSManager::handleLazuliCapabilitiesError(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, SipUri *a5, uint64_t a6)
{
  xpc_object_t v9 = xpc_array_create(0, 0);
  if (v9 || (xpc_object_t v9 = xpc_null_create()) != 0)
  {
    if (MEMORY[0x1C878F160](v9) == MEMORY[0x1E4F14568])
    {
      xpc_retain(v9);
      xpc_object_t v10 = v9;
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v9 = 0;
  }
  xpc_release(v9);
  if (*(void *)a6 != *(void *)(a6 + 8)) {
    SipUri::getUriString(*(SipUri **)a6);
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "laz.mgr.cap");
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  uint64_t v11 = ims::debug((uint64_t)v23, (uint64_t)&v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"IMSSMSManager::handleLazuliCapabilitiesError(stackId: ", 54);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v11 + 32))(v11, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  uint64_t v19 = 0;
  unsigned int v20 = 0;
  IMSClientManager::lazuliDelegateForStack(a2, &v19);
  if (v19)
  {
    xpc_object_t xdict = 0;
    xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v13 = v12;
    if (v12)
    {
      xpc_object_t xdict = v12;
    }
    else
    {
      xpc_object_t v13 = xpc_null_create();
      xpc_object_t xdict = v13;
      if (!v13)
      {
        xpc_object_t v15 = xpc_null_create();
        xpc_object_t v13 = 0;
        goto LABEL_25;
      }
    }
    if (MEMORY[0x1C878F160](v13) == MEMORY[0x1E4F14590])
    {
      xpc_retain(v13);
      goto LABEL_26;
    }
    xpc_object_t v15 = xpc_null_create();
LABEL_25:
    xpc_object_t xdict = v15;
LABEL_26:
    xpc_release(v13);
    xpc_object_t v16 = xpc_BOOL_create(1);
    if (!v16) {
      xpc_object_t v16 = xpc_null_create();
    }
    v23[0] = &xdict;
    v23[1] = "kIsSuccess";
    xpc::dict::object_proxy::operator=((uint64_t)v23, &v16, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v16);
    xpc_object_t v16 = 0;
    SipUri::getUriString(a5);
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "laz.mgr.cap");
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  uint64_t v14 = ims::error((uint64_t)v23, (uint64_t)&v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"No lazuli delegate set for stackId ", 35);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v14 + 32))(v14, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  xpc_release(v10);
}

void sub_1C565F5D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,xpc_object_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (*(char *)(v29 - 81) < 0) {
    operator delete(*(void **)(v29 - 104));
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  xpc_release(v28);
  _Unwind_Resume(a1);
}

void IMSSMSManager::handleIncomingMessage(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  memset(&__str, 0, sizeof(__str));
  uint64_t v42 = 0;
  size_t v43 = 0;
  uint64_t v44 = 0;
  memset(&v41, 0, sizeof(v41));
  SipUri::asString(a3, (uint64_t)&__str);
  (*(void (**)(uint64_t, void ***))(*(void *)a7 + 56))(a7, &v42);
  uint64_t v11 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)a7 + 40))(a7);
  std::string::operator=(&v41, v11);
  std::string::basic_string[abi:ne180100]<0>(v31, "sms");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v12 = ims::debug((uint64_t)v31, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"IMSSMSManager::handleIncomingMessage(stackId: ", 46);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v12 + 32))(v12, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)", sender:", 9);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v12 + 32))(v12, &__str);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)", body length:", 14);
  *(unsigned char *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v32) < 0) {
    operator delete(v31[0]);
  }
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a5 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
  }
  else {
    std::string __p = *(std::string *)a5;
  }
  *(_OWORD *)__dst = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  *(_OWORD *)xpc_object_t v37 = 0u;
  *(_OWORD *)xpc_object_t v34 = 0u;
  *(_OWORD *)xpc_object_t v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)xpc_object_t v31 = 0u;
  std::string::operator=((std::string *)v31, &__str);
  std::string::operator=((std::string *)&v35[1], &v41);
  std::string::operator=((std::string *)v37, &__p);
  if (v44 >= 0) {
    xpc_object_t v13 = (void **)&v42;
  }
  else {
    xpc_object_t v13 = v42;
  }
  if (v44 >= 0) {
    size_t v14 = HIBYTE(v44);
  }
  else {
    size_t v14 = v43;
  }
  unint64_t v15 = *((void *)&v39 + 1);
  xpc_object_t v16 = (char *)__dst[1];
  if (*((void *)&v39 + 1) - (unint64_t)__dst[1] >= v14)
  {
    uint64_t v21 = v39;
    size_t v22 = v39 - (unint64_t)__dst[1];
    if ((unint64_t)v39 - (unint64_t)__dst[1] >= v14)
    {
      if (v14) {
        memmove(__dst[1], v13, v14);
      }
      uint64_t v19 = &v16[v14];
    }
    else
    {
      xpc_object_t v23 = (char *)v13 + v22;
      if ((void *)v39 == __dst[1])
      {
        char v24 = (char *)__dst[1];
      }
      else
      {
        memmove(__dst[1], v13, v22);
        char v24 = (char *)v39;
      }
      xpc_object_t v25 = v24;
      if (v23 != (char *)v13 + v14)
      {
        xpc_object_t v26 = &v16[v14 - v21];
        xpc_object_t v25 = &v16[v14 + (void)v24 - v21];
        xpc_object_t v27 = v24;
        do
        {
          char v28 = *v23++;
          *v27++ = v28;
          --v26;
        }
        while (v26);
      }
      uint64_t v19 = v25;
    }
  }
  else
  {
    if (__dst[1])
    {
      *(void **)&long long v39 = __dst[1];
      operator delete(__dst[1]);
      unint64_t v15 = 0;
      __dst[1] = 0;
      long long v39 = 0uLL;
    }
    if ((v14 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = 2 * v15;
    if (2 * v15 <= v14) {
      uint64_t v17 = v14;
    }
    if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v18 = v17;
    }
    std::vector<unsigned char>::__vallocate[abi:ne180100](&__dst[1], v18);
    uint64_t v19 = (char *)v39;
    do
    {
      char v20 = *(unsigned char *)v13;
      xpc_object_t v13 = (void **)((char *)v13 + 1);
      *v19++ = v20;
      --v14;
    }
    while (v14);
  }
  *(void *)&long long v39 = v19;
  uint64_t v29 = IMSClientManager::delegateForStack(a2);
  xpc_object_t v30 = (capabilities::radio *)(*(uint64_t (**)(void))(*(void *)(v29 + 48) + 48))();
  if (capabilities::radio::mav20Plus(v30)) {
    IPTelephonyManager::sendCallStatusRequest(*(void *)(a1 + 504), (uint64_t)a2, 2, 4, 0, 0);
  }
  if (__dst[1])
  {
    *(void **)&long long v39 = __dst[1];
    operator delete(__dst[1]);
  }
  if (SHIBYTE(__dst[0]) < 0) {
    operator delete(v37[0]);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete(v35[1]);
  }
  if (SHIBYTE(v35[0]) < 0) {
    operator delete(v34[0]);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(*((void **)&v32 + 1));
  }
  if (SBYTE7(v32) < 0) {
    operator delete(v31[0]);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete(v42);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C565FC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v35 - 129) < 0) {
    operator delete(*(void **)(v35 - 152));
  }
  if (*(char *)(v35 - 105) < 0) {
    operator delete(*(void **)(v35 - 128));
  }
  if (*(char *)(v35 - 81) < 0) {
    operator delete(*(void **)(v35 - 104));
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IMSSMSManager::handleIncomingMessage(uint64_t a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void IMSSMSManager::handleMessageRequestReceived(capabilities::radio *a1, uint64_t a2)
{
  if (capabilities::radio::mav20Plus(a1))
  {
    uint64_t v4 = *((void *)a1 + 63);
    IPTelephonyManager::sendCallStatusRequest(v4, a2, 0, 4, 0, 0);
  }
}

void non-virtual thunk to'IMSSMSManager::handleMessageRequestReceived(uint64_t a1, uint64_t a2)
{
}

void IMSSMSManager::handleMessageRequestError(capabilities::radio *a1, uint64_t a2)
{
  if (capabilities::radio::mav20Plus(a1))
  {
    uint64_t v4 = *((void *)a1 + 63);
    IPTelephonyManager::sendCallStatusRequest(v4, a2, 2, 4, 0, 0);
  }
}

void non-virtual thunk to'IMSSMSManager::handleMessageRequestError(uint64_t a1, uint64_t a2)
{
}

void IMSSMSManager::handleMessageError(uint64_t a1, void **a2, unsigned int a3, uint64_t a4, char a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "sms");
  std::string::basic_string[abi:ne180100]<0>(&v34, "");
  uint64_t v10 = ims::debug((uint64_t)__p, (uint64_t)&v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"IMSSMSManager::handleMessageError(stackId: ", 43);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v10 + 32))(v10, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)", messageId: ", 13);
  *(unsigned char *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)", error: ", 9);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 16))(a4, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 504) + 168);
  uint64_t v32 = 0;
  long long v33 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v11 + 192))(&v32);
  uint64_t v12 = *(void *)(a1 + 504);
  uint64_t v13 = *(void *)(v12 + 288);
  size_t v14 = *(std::__shared_weak_count **)(v12 + 296);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v15 = v33;
  v31[0] = v32;
  v31[1] = v33;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IMSMetricsManager::logSmsSendCompletedEvent(v13, v31);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  BOOL isIMS = ims::AccessNetwork::isIMS((ims::AccessNetwork *)(v32 + 3160));
  if (isIMS && capabilities::radio::mav20Plus((capabilities::radio *)isIMS)) {
    IPTelephonyManager::sendCallStatusRequest(*(void *)(a1 + 504), (uint64_t)a2, 2, 4, 1, 0);
  }
  uint64_t v17 = *(void *)(a1 + 400);
  if (!v17) {
    goto LABEL_27;
  }
  size_t v18 = (uint64_t **)(a1 + 392);
  uint64_t v19 = a1 + 400;
  uint64_t v20 = a1 + 400;
  do
  {
    unsigned int v21 = *(_DWORD *)(v17 + 28);
    BOOL v22 = v21 >= a3;
    if (v21 >= a3) {
      xpc_object_t v23 = (uint64_t *)v17;
    }
    else {
      xpc_object_t v23 = (uint64_t *)(v17 + 8);
    }
    if (v22) {
      uint64_t v20 = v17;
    }
    uint64_t v17 = *v23;
  }
  while (*v23);
  if (v20 == v19 || *(_DWORD *)(v20 + 28) > a3)
  {
LABEL_27:
    std::string::basic_string[abi:ne180100]<0>(__p, "Unknown error / message ID");
    IMSSMSManager::reportFailure(a2, (const std::string *)__p);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0) {
      goto LABEL_47;
    }
    char v24 = __p[0];
    goto LABEL_29;
  }
  __p[0] = (void *)202;
  memset(&v30, 0, sizeof(v30));
  uint64_t v29 = 0;
  memset(&__p[1], 0, 24);
  BYTE4(__p[0]) = *(unsigned char *)(v20 + 33);
  BYTE5(__p[0]) = a5;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a4 + 24))(&v27, a4);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v34, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    std::string v34 = v27;
  }
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  *(std::string *)&__p[1] = v34;
  *((unsigned char *)&v34.__r_.__value_.__s + 23) = 0;
  v34.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a4 + 71) < 0) {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(a4 + 48), *(void *)(a4 + 56));
  }
  else {
    std::string v34 = *(std::string *)(a4 + 48);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  std::string v30 = v34;
  if (*(uint64_t **)(a4 + 8) == &SipResultDomain::_domain) {
    LODWORD(__p[0]) = *(_DWORD *)(a4 + 16);
  }
  uint64_t v25 = IMSClientManager::delegateForStack(a2);
  (*(void (**)(void))(*(void *)(v25 + 48) + 16))();
  uint64_t v26 = IMSClientManager::delegateForStack(a2);
  (*(void (**)(void))(*(void *)(v26 + 48) + 24))();
  std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer(v18, (uint64_t *)v20);
  operator delete((void *)v20);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p[3]) < 0)
  {
    char v24 = __p[1];
LABEL_29:
    operator delete(v24);
  }
LABEL_47:
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
}

void sub_1C5660230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'IMSSMSManager::handleMessageError(uint64_t a1, void **a2, unsigned int a3, uint64_t a4, char a5)
{
}

void IMSSMSManager::handleMessageSent(uint64_t a1, void **a2, unsigned int a3)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "sms");
  std::string::basic_string[abi:ne180100]<0>(&v32, "");
  uint64_t v6 = ims::debug((uint64_t)__p, (uint64_t)&v32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"IMSSMSManager::handleMessageSent(stackId: ", 42);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)", messageId:", 12);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v34 < 0) {
    operator delete(v32);
  }
  if (SBYTE7(v28) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + 504) + 168);
  uint64_t v32 = 0;
  long long v33 = 0;
  (*(void (**)(char **__return_ptr))(*(void *)v7 + 192))(&v32);
  uint64_t v8 = *(void *)(a1 + 504);
  uint64_t v9 = *(void *)(v8 + 288);
  uint64_t v10 = *(std::__shared_weak_count **)(v8 + 296);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = v33;
  v31[0] = v32;
  v31[1] = v33;
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  IMSMetricsManager::logSmsSendCompletedEvent(v9, v31);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  BOOL isIMS = ims::AccessNetwork::isIMS((ims::AccessNetwork *)(v32 + 3160));
  if (isIMS && capabilities::radio::mav20Plus((capabilities::radio *)isIMS)) {
    IPTelephonyManager::sendCallStatusRequest(*(void *)(a1 + 504), (uint64_t)a2, 2, 4, 1, 0);
  }
  *(_OWORD *)uint64_t v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v28 = 0u;
  LODWORD(__p[0]) = 202;
  uint64_t v13 = *(void *)(a1 + 400);
  if (v13)
  {
    size_t v14 = (uint64_t **)(a1 + 392);
    uint64_t v15 = a1 + 400;
    uint64_t v16 = a1 + 400;
    uint64_t v17 = *(void *)(a1 + 400);
    do
    {
      unsigned int v18 = *(_DWORD *)(v17 + 28);
      BOOL v19 = v18 >= a3;
      if (v18 >= a3) {
        uint64_t v20 = (uint64_t *)v17;
      }
      else {
        uint64_t v20 = (uint64_t *)(v17 + 8);
      }
      if (v19) {
        uint64_t v16 = v17;
      }
      uint64_t v17 = *v20;
    }
    while (*v20);
    if (v16 != v15 && *(_DWORD *)(v16 + 28) <= a3)
    {
      BYTE4(__p[0]) = *(unsigned char *)(v16 + 33);
      uint64_t v21 = a1 + 400;
      do
      {
        unsigned int v22 = *(_DWORD *)(v13 + 28);
        BOOL v23 = v22 >= a3;
        if (v22 >= a3) {
          char v24 = (uint64_t *)v13;
        }
        else {
          char v24 = (uint64_t *)(v13 + 8);
        }
        if (v23) {
          uint64_t v21 = v13;
        }
        uint64_t v13 = *v24;
      }
      while (*v24);
      if (v21 != v15 && *(_DWORD *)(v21 + 28) <= a3)
      {
        std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer(v14, (uint64_t *)v21);
        operator delete((void *)v21);
      }
    }
  }
  uint64_t v25 = IMSClientManager::delegateForStack(a2);
  (*(void (**)(uint64_t))(*(void *)(v25 + 48) + 32))(v25 + 48);
  uint64_t v26 = IMSClientManager::delegateForStack(a2);
  (*(void (**)(uint64_t))(*(void *)(v26 + 48) + 40))(v26 + 48);
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[1]);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[1]);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
}

void sub_1C5660628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 64);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IMSSMSManager::handleMessageSent(uint64_t a1, void **a2, unsigned int a3)
{
}

void IMSSMSManager::handleUacBarringResponse(IMSSMSManager *this, void **a2, unsigned int a3)
{
  if (!*(void *)(*((void *)this + 63) + 168))
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "sms");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::error((uint64_t)&v20, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"SIP client not found", 20);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v20, "SIP client not found");
    IMSSMSManager::reportFailure(a2, &v20);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v7 = *((void *)this + 46);
  uint64_t v8 = *((void *)this + 47);
  while (v7 != v8)
  {
    uint64_t v9 = *(unsigned __int8 *)(v7 + 23);
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = (void *)*(unsigned __int8 *)(v7 + 23);
    }
    else {
      uint64_t v10 = *(void **)(v7 + 8);
    }
    uint64_t v11 = (void *)*((unsigned __int8 *)a2 + 23);
    int v12 = (char)v11;
    if ((char)v11 < 0) {
      uint64_t v11 = a2[1];
    }
    if (v10 != v11) {
      goto LABEL_39;
    }
    if (v12 >= 0) {
      uint64_t v13 = (unsigned __int8 *)a2;
    }
    else {
      uint64_t v13 = (unsigned __int8 *)*a2;
    }
    if ((v9 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v7, v13, *(void *)(v7 + 8))) {
        goto LABEL_39;
      }
    }
    else if (*(unsigned char *)(v7 + 23))
    {
      uint64_t v14 = (unsigned __int8 *)v7;
      while (*v14 == *v13)
      {
        ++v14;
        ++v13;
        if (!--v9) {
          goto LABEL_25;
        }
      }
      goto LABEL_39;
    }
LABEL_25:
    if (*(_DWORD *)(v7 + 508) == 1)
    {
      if (a3)
      {
        if (a3 <= 2)
        {
          std::string::basic_string[abi:ne180100]<0>(&v20, "sms");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v15 = ims::error((uint64_t)&v20, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Unable to send SMS message: ", 28);
          *(unsigned char *)(v15 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Service Barred", 14);
          *(unsigned char *)(v15 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v15 + 17) = 0;
          if (v19 < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v20.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&v20, "Service Barred");
          IMSSMSManager::reportFailure(a2, &v20);
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v20.__r_.__value_.__l.__data_);
          }
          uint64_t v8 = *((void *)this + 47);
LABEL_36:
          uint64_t v8 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PendingSMS *,PendingSMS *,PendingSMS *>(v7 + 512, v8, v7);
          for (uint64_t i = *((void *)this + 47); i != v8; std::__destroy_at[abi:ne180100]<PendingSMS,0>(i))
            i -= 512;
          *((void *)this + 47) = v8;
          continue;
        }
      }
      else
      {
        char v16 = IMSSMSManager::prepareSMS(this, (const std::string *)v7);
        uint64_t v8 = *((void *)this + 47);
        if (v16) {
          goto LABEL_36;
        }
      }
    }
LABEL_39:
    v7 += 512;
  }
}

void sub_1C56609D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSSMSManager::clearLocation(IMSSMSManager *this)
{
  uint64_t v2 = (void *)((char *)this + 344);
  uint64_t v3 = *((void *)this + 43);
  if (v3) {
    *(void *)(v3 + 104) = 0;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 44);
  *uint64_t v2 = 0;
  v2[1] = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 232) = xmmword_1C56D18C0;
  xpc_object_t v5 = (void **)((char *)this + 248);
  if (*((char *)this + 271) < 0) {
    operator delete(*v5);
  }
  uint64_t v6 = (void **)((char *)this + 272);
  *xpc_object_t v5 = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  if (*((char *)this + 295) < 0) {
    operator delete(*v6);
  }
  uint64_t v7 = (void **)((char *)this + 296);
  *uint64_t v6 = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  if (*((char *)this + 319) < 0) {
    operator delete(*v7);
  }
  uint64_t v8 = (void **)((char *)this + 320);
  *uint64_t v7 = 0;
  *((void *)this + 38) = 0;
  *((void *)this + 39) = 0;
  if (*((char *)this + 343) < 0) {
    operator delete(*v8);
  }
  void *v8 = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  *((unsigned char *)this + 360) = 0;
}

void IMSSMSManager::sendSMS(uint64_t a1, const std::string *a2, double *a3)
{
  uint64_t v6 = *(void **)(*(void *)(a1 + 504) + 168);
  std::string::basic_string[abi:ne180100]<0>(v35, "sms");
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  uint64_t v7 = ims::debug((uint64_t)v35, (uint64_t)v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"IMSSMSManager::sendSMS(stackId: ", 32);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, const std::string *))(*(void *)v7 + 32))(v7, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", destination: ", 15);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(const std::string *, uint64_t))(a2[1].__r_.__value_.__r.__words[0] + 40))(a2 + 1, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", size: ", 8);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", content-type: ", 16);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, const std::string *))(*(void *)v7 + 32))(v7, a2 + 20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  uint64_t v8 = *(void *)(a1 + 504);
  uint64_t v10 = *(void *)(v8 + 288);
  uint64_t v9 = *(std::__shared_weak_count **)(v8 + 296);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr, void *, const std::string *))(*v6 + 192))(&v31, v6, a2);
  IMSMetricsManager::logSmsSendAttemptedEvent(v10, &v31);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  double v11 = a3[5];
  std::string::value_type v12 = a2[21].__r_.__value_.__s.__data_[0];
  ims::LocationInfo::LocationInfo((ims::LocationInfo *)v22, (const ims::LocationInfo *)a3);
  unsigned int v13 = BambiClient::sendMessage(v6, (uint64_t)a2, (const SipUri *)&a2[1], (uint64_t)&a2[19], (uint64_t)&a2[18], a2 + 20, (const ims::LocationInfo *)v22);
  if (v30 < 0) {
    operator delete(__p);
  }
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  std::string::basic_string[abi:ne180100]<0>(v35, "sms");
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  uint64_t v14 = ims::debug((uint64_t)v35, (uint64_t)v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"IMSSMSManager::sendSMS(stackId: ", 32);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, const std::string *))(*(void *)v14 + 32))(v14, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)", messageId:", 12);
  *(unsigned char *)(v14 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  if (v34 < 0) {
    operator delete(v33[0]);
  }
  if (v36 < 0) {
    operator delete(v35[0]);
  }
  uint64_t v15 = *(uint64_t **)(a1 + 400);
  if (v15)
  {
    while (1)
    {
      while (1)
      {
        char v16 = (uint64_t **)v15;
        unsigned int v17 = *((_DWORD *)v15 + 7);
        if (v17 <= v13) {
          break;
        }
        uint64_t v15 = *v16;
        unsigned int v18 = v16;
        if (!*v16) {
          goto LABEL_31;
        }
      }
      if (v17 >= v13) {
        break;
      }
      uint64_t v15 = v16[1];
      if (!v15)
      {
        unsigned int v18 = v16 + 1;
        goto LABEL_31;
      }
    }
  }
  else
  {
    unsigned int v18 = (uint64_t **)(a1 + 400);
    char v16 = (uint64_t **)(a1 + 400);
LABEL_31:
    char v19 = (uint64_t *)v16;
    char v16 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v16 + 7) = v13;
    *((_WORD *)v16 + 16) = 0;
    std::__shared_weak_count *v16 = 0;
    v16[1] = 0;
    uint64_t v16[2] = v19;
    *unsigned int v18 = (uint64_t *)v16;
    uint64_t v20 = **(void **)(a1 + 392);
    uint64_t v21 = (uint64_t *)v16;
    if (v20)
    {
      *(void *)(a1 + 392) = v20;
      uint64_t v21 = *v18;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 400), v21);
    ++*(void *)(a1 + 408);
  }
  *((unsigned char *)v16 + 32) = v12;
  *((unsigned char *)v16 + 33) = v11 > 0.0;
}

void sub_1C5660F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (*(char *)(v28 - 97) < 0) {
    operator delete(*(void **)(v28 - 120));
  }
  _Unwind_Resume(exception_object);
}

void IMSSMSManager::handleLocationUpdate(uint64_t a1, const std::string *a2)
{
  *(unsigned char *)(a1 + 360) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "sms");
  std::string::basic_string[abi:ne180100]<0>(v25, "");
  uint64_t v4 = ims::debug((uint64_t)__p, (uint64_t)v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Acquired updated location with ", 31);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)", ", 2);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (SBYTE7(v19[0]) < 0) {
    operator delete(__p[0]);
  }
  if (*(unsigned char *)(a1 + 48) && *(double *)&a2[1].__r_.__value_.__r.__words[2] > 0.0)
  {
    long long v5 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    long long v6 = *(_OWORD *)&a2->__r_.__value_.__r.__words[2];
    *(_OWORD *)(a1 + 232) = *(_OWORD *)&a2[1].__r_.__value_.__r.__words[1];
    *(_OWORD *)(a1 + 216) = v6;
    *(_OWORD *)(a1 + 200) = v5;
    std::string::operator=((std::string *)(a1 + 248), a2 + 2);
    std::string::operator=((std::string *)(a1 + 272), a2 + 3);
    std::string::operator=((std::string *)(a1 + 296), a2 + 4);
    std::string::operator=((std::string *)(a1 + 320), a2 + 5);
  }
  uint64_t v7 = *(const PendingSMS **)(a1 + 368);
  while (v7 != *(const PendingSMS **)(a1 + 376))
  {
    *(_OWORD *)BOOL v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)uint64_t v21 = 0u;
    long long v22 = 0u;
    *(_OWORD *)uint64_t v20 = 0u;
    *(_OWORD *)std::string __p = 0u;
    memset(v19, 0, sizeof(v19));
    PendingSMS::PendingSMS((std::string *)__p, v7);
    if (HIDWORD(v24) == 2)
    {
      ims::LocationInfo::LocationInfo((ims::LocationInfo *)v10, (const ims::LocationInfo *)a2);
      IMSSMSManager::sendSMS(a1, (const std::string *)__p, v10);
      if (v17 < 0) {
        operator delete(v16);
      }
      if (v15 < 0) {
        operator delete(v14);
      }
      if (v13 < 0) {
        operator delete(v12);
      }
      if (v11 < 0) {
        operator delete(*(void **)&v10[6]);
      }
      uint64_t v8 = std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PendingSMS *,PendingSMS *,PendingSMS *>((uint64_t)v7 + 512, *(void *)(a1 + 376), (uint64_t)v7);
      for (uint64_t i = *(void *)(a1 + 376); i != v8; std::__destroy_at[abi:ne180100]<PendingSMS,0>(i))
        i -= 512;
      *(void *)(a1 + 376) = v8;
    }
    else
    {
      uint64_t v7 = (const PendingSMS *)((char *)v7 + 512);
    }
    if (SBYTE7(v24) < 0) {
      operator delete(v23[0]);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[1]);
    }
    if (SHIBYTE(v21[0]) < 0) {
      operator delete(v20[0]);
    }
    SipUri::~SipUri((SipUri *)((char *)v19 + 8));
    if (SBYTE7(v19[0]) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C56612E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IMSSMSManager::handleLocationUpdate(uint64_t a1, const std::string *a2)
{
}

void std::vector<PendingSMS>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 512;
        std::__destroy_at[abi:ne180100]<PendingSMS,0>(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<PendingSMS,0>(uint64_t a1)
{
  if (*(char *)(a1 + 503) < 0) {
    operator delete(*(void **)(a1 + 480));
  }
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }
  SipUri::~SipUri((SipUri *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::set<std::string>::~set[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *result, uint64_t a2)
{
  qword_1EBBDC5F8 = 0;
  qword_1EBBDC5F0 = 0;
  qword_1EBBDC5E8 = (uint64_t)&qword_1EBBDC5F0;
  if (a2)
  {
    uint64_t v2 = (void **)result;
    uint64_t v3 = 24 * a2;
    do
    {
      uint64_t result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)&qword_1EBBDC5E8, (uint64_t)&qword_1EBBDC5F0, v2, (uint64_t)v2);
      v2 += 3;
      v3 -= 24;
    }
    while (v3);
  }
  return result;
}

void sub_1C56614E0(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<PendingSMS>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 512;
    std::__destroy_at[abi:ne180100]<PendingSMS,0>(i - 512);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void LazuliSpamReportParams::~LazuliSpamReportParams(void **this)
{
  if (*((char *)this + 999) < 0) {
    operator delete(this[122]);
  }
  if (*((char *)this + 975) < 0) {
    operator delete(this[119]);
  }
  if (*((char *)this + 951) < 0) {
    operator delete(this[116]);
  }
  xpc_release(this[115]);
  this[115] = 0;
  SipUri::~SipUri((SipUri *)(this + 64));
  SipUri::~SipUri((SipUri *)(this + 12));
  if (*((char *)this + 95) < 0) {
    operator delete(this[9]);
  }
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<PendingSMS *,PendingSMS *,PendingSMS *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      if (*(char *)(a3 + v6 + 23) < 0) {
        operator delete(*(void **)v7);
      }
      uint64_t v8 = a1 + v6;
      long long v9 = *(_OWORD *)(a1 + v6);
      *(void *)(v7 + 16) = *(void *)(a1 + v6 + 16);
      *(_OWORD *)uint64_t v7 = v9;
      *(unsigned char *)(a1 + v6 + 23) = 0;
      *(unsigned char *)(a1 + v6) = 0;
      SipUri::operator=((SipUri *)(v7 + 24), a1 + v6 + 24);
      uint64_t v10 = (void **)(v7 + 432);
      if (*(char *)(v7 + 455) < 0) {
        operator delete(*v10);
      }
      long long v11 = *(_OWORD *)(v8 + 432);
      *(void *)(v7 + 448) = *(void *)(v8 + 448);
      *(_OWORD *)uint64_t v10 = v11;
      *(unsigned char *)(v8 + 455) = 0;
      *(unsigned char *)(v8 + 432) = 0;
      uint64_t v12 = a3 + v6;
      char v13 = (void **)(a3 + v6 + 456);
      if (*(char *)(a3 + v6 + 479) < 0) {
        operator delete(*v13);
      }
      long long v14 = *(_OWORD *)(v8 + 456);
      *(void *)(a3 + v6 + 472) = *(void *)(v8 + 472);
      *(_OWORD *)char v13 = v14;
      *(unsigned char *)(v8 + 479) = 0;
      *(unsigned char *)(v8 + 456) = 0;
      char v15 = (void **)(v12 + 480);
      if (*(char *)(v12 + 503) < 0) {
        operator delete(*v15);
      }
      long long v16 = *(_OWORD *)(v8 + 480);
      *(void *)(v12 + 496) = *(void *)(v8 + 496);
      *(_OWORD *)char v15 = v16;
      *(unsigned char *)(v8 + 503) = 0;
      *(unsigned char *)(v8 + 480) = 0;
      *(void *)(a3 + v6 + 504) = *(void *)(v8 + 504);
      v6 += 512;
    }
    while (v8 + 512 != a2);
    a3 += v6;
  }
  return a3;
}

void PendingSMS::PendingSMS(std::string *this, const PendingSMS *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  SipUri::SipUri((SipUri *)&this[1], (const PendingSMS *)((char *)a2 + 24));
  if (*((char *)a2 + 455) < 0)
  {
    std::string::__init_copy_ctor_external(this + 18, *((const std::string::value_type **)a2 + 54), *((void *)a2 + 55));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 27);
    this[18].__r_.__value_.__r.__words[2] = *((void *)a2 + 56);
    *(_OWORD *)&this[18].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 479) < 0)
  {
    std::string::__init_copy_ctor_external(this + 19, *((const std::string::value_type **)a2 + 57), *((void *)a2 + 58));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 456);
    this[19].__r_.__value_.__r.__words[2] = *((void *)a2 + 59);
    *(_OWORD *)&this[19].__r_.__value_.__l.__data_ = v6;
  }
  uint64_t v7 = this + 20;
  if (*((char *)a2 + 503) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 60), *((void *)a2 + 61));
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 30);
    this[20].__r_.__value_.__r.__words[2] = *((void *)a2 + 62);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  this[21].__r_.__value_.__r.__words[0] = *((void *)a2 + 63);
}

void sub_1C5661838(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 479) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 455) < 0) {
    operator delete(*v3);
  }
  SipUri::~SipUri(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<IMSSMSManager::prepareSMS(PendingSMS &)::$_0,std::allocator<IMSSMSManager::prepareSMS(PendingSMS &)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E71D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<IMSSMSManager::prepareSMS(PendingSMS &)::$_0,std::allocator<IMSSMSManager::prepareSMS(PendingSMS &)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E71D8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<IMSSMSManager::prepareSMS(PendingSMS &)::$_0,std::allocator<IMSSMSManager::prepareSMS(PendingSMS &)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20E71D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<IMSSMSManager::prepareSMS(PendingSMS &)::$_0,std::allocator<IMSSMSManager::prepareSMS(PendingSMS &)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E71D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<IMSSMSManager::prepareSMS(PendingSMS &)::$_0,std::allocator<IMSSMSManager::prepareSMS(PendingSMS &)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<IMSSMSManager::prepareSMS(PendingSMS &)::$_0,std::allocator<IMSSMSManager::prepareSMS(PendingSMS &)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<IMSSMSManager::prepareSMS(PendingSMS &)::$_0,std::allocator<IMSSMSManager::prepareSMS(PendingSMS &)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    long long v5 = (IMSSMSManager *)a1[1];
    long long v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2])
      {
        uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
        int v9 = (char)v8;
        if ((v8 & 0x80u) != 0) {
          uint64_t v8 = *(void *)(a2 + 8);
        }
        if (v8 == 16)
        {
          uint64_t v10 = v9 >= 0 ? (uint64_t *)a2 : *(uint64_t **)a2;
          uint64_t v12 = *v10;
          uint64_t v11 = v10[1];
          if (v12 == 0x6772656D45534D53 && v11 == 0x65646F4D79636E65)
          {
            *((unsigned char *)v5 + 48) = 0;
            IMSSMSManager::clearLocation(v5);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

uint64_t std::__function::__func<IMSSMSManager::prepareSMS(PendingSMS &)::$_0,std::allocator<IMSSMSManager::prepareSMS(PendingSMS &)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<IMSSMSManager::prepareSMS(PendingSMS &)::$_0,std::allocator<IMSSMSManager::prepareSMS(PendingSMS &)::$_0>,void ()(std::string &)>::target_type()
{
}

void ims::analytics::MessageSessionEndEvent::create(unsigned int a1@<W0>, unsigned int a2@<W1>, BOOL a3@<W2>, BOOL a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  unsigned int v18 = operator new(0x90uLL);
  v18[1] = 0;
  void v18[2] = 0;
  *unsigned int v18 = &unk_1F20E7258;
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v28 = *(std::string *)a6;
  }
  if (*(char *)(a8 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a8, *(void *)(a8 + 8));
  }
  else {
    std::string v27 = *(std::string *)a8;
  }
  v18[3] = &unk_1F20E7390;
  std::string::basic_string[abi:ne180100]<0>(&v45, "ims.ca.sessionendevent");
  ImsLogContainer::ImsLogContainer((uint64_t)(v18 + 4), &v45);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  char v26 = a9;
  v18[3] = &unk_1F20E72A8;
  v18[4] = &unk_1F20E72E0;
  xpc_object_t v19 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v20 = v19;
  uint64_t v21 = v18 + 17;
  if (v19)
  {
    *uint64_t v21 = v19;
  }
  else
  {
    xpc_object_t v20 = xpc_null_create();
    *uint64_t v21 = v20;
    if (!v20)
    {
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v20 = 0;
      goto LABEL_16;
    }
  }
  if (MEMORY[0x1C878F160](v20) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v20);
    goto LABEL_17;
  }
  xpc_object_t v22 = xpc_null_create();
LABEL_16:
  *uint64_t v21 = v22;
LABEL_17:
  xpc_release(v20);
  xpc_object_t v43 = xpc_int64_create(a1);
  if (!v43) {
    xpc_object_t v43 = xpc_null_create();
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)"session_duration";
  xpc::dict::object_proxy::operator=((uint64_t)&v45, &v43, &v44);
  xpc_release(v44);
  xpc_object_t v44 = 0;
  xpc_release(v43);
  xpc_object_t v43 = 0;
  xpc_object_t v41 = xpc_int64_create(a2);
  if (!v41) {
    xpc_object_t v41 = xpc_null_create();
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)"total_messages";
  xpc::dict::object_proxy::operator=((uint64_t)&v45, &v41, &v42);
  xpc_release(v42);
  xpc_object_t v42 = 0;
  xpc_release(v41);
  xpc_object_t v41 = 0;
  xpc_object_t object = xpc_BOOL_create(a3);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)"is_group";
  xpc::dict::object_proxy::operator=((uint64_t)&v45, &object, &v40);
  xpc_release(v40);
  xpc_object_t v40 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_object_t v37 = xpc_BOOL_create(a4);
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)"is_chatbot";
  xpc::dict::object_proxy::operator=((uint64_t)&v45, &v37, &v38);
  xpc_release(v38);
  xpc_object_t v38 = 0;
  xpc_release(v37);
  xpc_object_t v37 = 0;
  if (a5)
  {
    xpc_object_t v35 = xpc_int64_create(a5);
    if (!v35) {
      xpc_object_t v35 = xpc_null_create();
    }
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
    v45.__r_.__value_.__l.__size_ = (std::string::size_type)"sip_error_code";
    xpc::dict::object_proxy::operator=((uint64_t)&v45, &v35, &v36);
    xpc_release(v36);
    xpc_object_t v36 = 0;
    xpc_release(v35);
    xpc_object_t v35 = 0;
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v28.__r_.__value_.__l.__size_) {
      goto LABEL_37;
    }
    BOOL v23 = (std::string *)v28.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&v28.__r_.__value_.__s + 23)) {
      goto LABEL_37;
    }
    BOOL v23 = &v28;
  }
  xpc_object_t v33 = xpc_string_create((const char *)v23);
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)"sip_end_reason";
  xpc::dict::object_proxy::operator=((uint64_t)&v45, &v33, &v34);
  xpc_release(v34);
  xpc_object_t v34 = 0;
  xpc_release(v33);
  xpc_object_t v33 = 0;
LABEL_37:
  if (a7)
  {
    xpc_object_t v31 = xpc_int64_create(a7);
    if (!v31) {
      xpc_object_t v31 = xpc_null_create();
    }
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
    v45.__r_.__value_.__l.__size_ = (std::string::size_type)"msrp_error_code";
    xpc::dict::object_proxy::operator=((uint64_t)&v45, &v31, &v32);
    xpc_release(v32);
    xpc_object_t v32 = 0;
    xpc_release(v31);
    xpc_object_t v31 = 0;
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v27.__r_.__value_.__l.__size_)
    {
      uint64_t v25 = v26;
LABEL_52:
      operator delete(v27.__r_.__value_.__l.__data_);
      goto LABEL_53;
    }
    long long v24 = (std::string *)v27.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&v27.__r_.__value_.__s + 23))
    {
      uint64_t v25 = v26;
      goto LABEL_53;
    }
    long long v24 = &v27;
  }
  xpc_object_t v29 = xpc_string_create((const char *)v24);
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)(v18 + 17);
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)"msrp_end_reason";
  xpc::dict::object_proxy::operator=((uint64_t)&v45, &v29, &v30);
  xpc_release(v30);
  xpc_object_t v30 = 0;
  xpc_release(v29);
  uint64_t v25 = v26;
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_52;
  }
LABEL_53:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  void *v25 = v18 + 3;
  v25[1] = v18;
}

void sub_1C566203C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v25);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<anonymous namespace'::MessageSessionEndEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E7258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::MessageSessionEndEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E7258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::MessageSessionEndEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::MessageSessionEndEventImpl::~MessageSessionEndEventImpl(_anonymous_namespace_::MessageSessionEndEventImpl *this)
{
  *(void *)this = &unk_1F20E72A8;
  *((void *)this + 1) = &unk_1F20E72E0;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20E72A8;
  *((void *)this + 1) = &unk_1F20E72E0;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  JUMPOUT(0x1C878E320);
}

xpc_object_t anonymous namespace'::MessageSessionEndEventImpl::getDict@<X0>(_anonymous_namespace_::MessageSessionEndEventImpl *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  *a2 = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void *anonymous namespace'::MessageSessionEndEventImpl::getName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "RCSMessageSessionEnd");
}

void non-virtual thunk to'anonymous namespace'::MessageSessionEndEventImpl::~MessageSessionEndEventImpl(_anonymous_namespace_::MessageSessionEndEventImpl *this)
{
  *((void *)this - 1) = &unk_1F20E72A8;
  *(void *)this = &unk_1F20E72E0;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *((void *)this - 1) = &unk_1F20E72A8;
  *(void *)this = &unk_1F20E72E0;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1C878E320);
}

void SipContributionIdHeader::~SipContributionIdHeader(void **this)
{
  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20B37F8;
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipContributionIdHeader::clone(SipContributionIdHeader *this)
{
}

void sub_1C5662628(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40EE8ABE80);
  _Unwind_Resume(a1);
}

void SipMessage::SipMessage(SipMessage *this, const SipMessage *a2)
{
  *(void *)this = &unk_1F20E7460;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  *((_DWORD *)this + 16) = 1065353216;
  *((void *)this + 10) = *((void *)a2 + 10);
  SipMessage::copyHeadersFromMessage(this, a2);
  uint64_t v4 = *((void *)a2 + 9);
  if (v4) {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  *((void *)this + 9) = v4;
}

void sub_1C56626F8(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  long long v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

SipHeader *SipMessage::copyHeadersFromMessage(SipHeader *this, const SipMessage *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  if (*((void *)a2 + 2) != v2)
  {
    uint64_t v4 = this;
    unint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      uint64_t v7 = (SipHeader *)(*(uint64_t (**)(void))(**(void **)(v2 + 8 * v5) + 32))(*(void *)(v2 + 8 * v5));
      this = SipMessage::addHeader(v4, v7, 0);
      unint64_t v5 = v6;
      uint64_t v2 = *((void *)a2 + 1);
      ++v6;
    }
    while (v5 < (*((void *)a2 + 2) - v2) >> 3);
  }
  return this;
}

void SipMessage::~SipMessage(SipMessage *this)
{
  *(void *)this = &unk_1F20E7460;
  uint64_t v2 = *((void *)this + 9);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v4 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  if (v3 != v4)
  {
    unint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      uint64_t v7 = *(void *)(v4 + 8 * v5);
      if (v7)
      {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        uint64_t v4 = *((void *)this + 1);
        uint64_t v3 = *((void *)this + 2);
      }
      unint64_t v5 = v6++;
    }
    while (v5 < (v3 - v4) >> 3);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 32);
  uint64_t v8 = (void *)*((void *)this + 1);
  if (v8)
  {
    *((void *)this + 2) = v8;
    operator delete(v8);
  }
}

SipHeader *SipMessage::addHeader(SipMessage *this, SipHeader *a2, int a3)
{
  uint64_t v71 = a2;
  if (!a2) {
    return 0;
  }
  uint64_t v4 = a2;
  if ((*(unsigned int (**)(SipHeader *))(*(void *)a2 + 80))(a2)
    && (!*(unsigned char *)(*((void *)this + 10) + 129)
     || !(*(unsigned int (**)(SipHeader *))(*(void *)v4 + 88))(v4)))
  {
    goto LABEL_36;
  }
  uint64_t v7 = *((void *)this + 1);
  uint64_t v6 = *((void *)this + 2);
  uint64_t v8 = v6 - v7;
  if (v6 == v7) {
    goto LABEL_36;
  }
  uint64_t v9 = 0;
  unint64_t v10 = v8 >> 3;
  unint64_t v11 = *((unsigned __int8 *)v4 + 31);
  unsigned int v12 = 1;
  while (1)
  {
    unint64_t v13 = v11;
    long long v14 = (char *)v4 + 8;
    if ((v11 & 0x80) != 0)
    {
      long long v14 = (const void *)*((void *)v4 + 1);
      unint64_t v13 = *((void *)v4 + 2);
    }
    uint64_t v15 = *(void *)(v7 + 8 * v9);
    uint64_t v18 = *(void *)(v15 + 8);
    uint64_t v16 = v15 + 8;
    uint64_t v17 = v18;
    int v19 = *(char *)(v16 + 23);
    unint64_t v20 = v19 >= 0 ? *(unsigned __int8 *)(v16 + 23) : *(void *)(v16 + 8);
    uint64_t v21 = (const void *)(v19 >= 0 ? v16 : v17);
    size_t v22 = v20 >= v13 ? v13 : v20;
    if (!memcmp(v14, v21, v22) && v20 == v13) {
      break;
    }
    uint64_t v9 = v12;
    if (v10 <= v12++) {
      goto LABEL_36;
    }
  }
  if (!v12) {
    goto LABEL_36;
  }
  signed int v26 = v12 - 1;
  if (!*(unsigned char *)(*((void *)this + 10) + 129)
    || ((v27 = (SipHeader **)(v7 + 8 * v26), !a3) ? (std::string v28 = v4) : (SipHeader *)(std::string v28 = *v27, v27 = &v71),
        uint64_t v25 = *v27,
        !(*(unsigned int (**)(SipHeader *, SipHeader *))(*(void *)*v27 + 96))(*v27, v28)))
  {
    if (((*(uint64_t (**)(SipHeader *))(*(void *)v4 + 80))(v4) & 1) == 0)
    {
      uint64_t v69 = *((void *)this + 1);
      uint64_t v70 = *(void *)(v69 + 8 * v26);
      if (v70)
      {
        (*(void (**)(uint64_t))(*(void *)v70 + 8))(v70);
        uint64_t v69 = *((void *)this + 1);
      }
      *(void *)(v69 + 8 * v26) = v4;
      uint64_t v66 = (char *)this + 32;
      long long v72 = (long long *)((char *)v4 + 8);
      long long v67 = (unsigned __int8 *)v4 + 8;
      goto LABEL_85;
    }
LABEL_36:
    xpc_object_t v29 = (SipHeader ***)((char *)this + 8);
    if (a3)
    {
      unint64_t v30 = *((void *)this + 3);
      xpc_object_t v32 = (SipHeader **)*((void *)this + 1);
      xpc_object_t v31 = (char *)*((void *)this + 2);
      if ((unint64_t)v31 < v30)
      {
        if (v32 != (SipHeader **)v31)
        {
          xpc_object_t v33 = (char *)(v32 + 1);
          xpc_object_t v34 = v31 - 8;
          xpc_object_t v35 = (void *)*((void *)this + 2);
          while (v34 < v31)
          {
            uint64_t v36 = *(void *)v34;
            v34 += 8;
            *v35++ = v36;
          }
          *((void *)this + 2) = v35;
          if (v31 != v33) {
            memmove(&v31[-8 * ((v31 - v33) >> 3)], v32, v31 - v33);
          }
          xpc_object_t v51 = &v71;
          if (v32 <= &v71) {
            xpc_object_t v51 = &v71 + (*((void *)this + 2) > (unint64_t)&v71);
          }
          std::__shared_weak_count *v32 = *v51;
          goto LABEL_84;
        }
        goto LABEL_43;
      }
      unint64_t v39 = ((v31 - (char *)v32) >> 3) + 1;
      if (!(v39 >> 61))
      {
        uint64_t v40 = v30 - (void)v32;
        if (v40 >> 2 > v39) {
          unint64_t v39 = v40 >> 2;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          xpc_object_t v42 = (SipHeader **)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)this + 24, v41);
          xpc_object_t v44 = v42;
          if (v43)
          {
            std::string v45 = &v42[v43];
LABEL_70:
            *xpc_object_t v44 = v71;
            std::string v54 = (char *)(v44 + 1);
            xpc_object_t v55 = *v29;
            if (*v29 != v32)
            {
              xpc_object_t v56 = v32;
              do
              {
                xpc_object_t v57 = *--v56;
                *--xpc_object_t v44 = v57;
              }
              while (v56 != v55);
            }
            long long v58 = (char *)*((void *)this + 2);
            int64_t v59 = v58 - (char *)v32;
            if (v58 != (char *)v32) {
              memmove(v54, v32, v58 - (char *)v32);
            }
            long long v60 = (void *)*((void *)this + 1);
            *((void *)this + 1) = v44;
            *((void *)this + 2) = &v54[v59];
            *((void *)this + 3) = v45;
            if (v60) {
              operator delete(v60);
            }
            goto LABEL_84;
          }
        }
        else
        {
          xpc_object_t v44 = 0;
        }
        xpc_object_t v52 = (SipHeader **)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)this + 24, 1uLL);
        std::string v45 = &v52[v53];
        if (v44) {
          operator delete(v44);
        }
        xpc_object_t v44 = v52;
        goto LABEL_70;
      }
    }
    else
    {
      unint64_t v37 = *((void *)this + 3);
      xpc_object_t v32 = (SipHeader **)*((void *)this + 2);
      if ((unint64_t)v32 < v37)
      {
LABEL_43:
        std::__shared_weak_count *v32 = v4;
        xpc_object_t v38 = v32 + 1;
LABEL_83:
        *((void *)this + 2) = v38;
LABEL_84:
        uint64_t v4 = v71;
        uint64_t v66 = (char *)this + 32;
        long long v67 = (unsigned __int8 *)v71 + 8;
        long long v72 = (long long *)((char *)v71 + 8);
LABEL_85:
        *((void *)std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v66, v67, (uint64_t)&std::piecewise_construct, &v72)+ 5) = v4;
        return v71;
      }
      uint64_t v46 = v32 - *v29;
      if (!((unint64_t)(v46 + 1) >> 61))
      {
        uint64_t v47 = v37 - (void)*v29;
        uint64_t v48 = v47 >> 2;
        if (v47 >> 2 <= (unint64_t)(v46 + 1)) {
          uint64_t v48 = v46 + 1;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v49 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49) {
          xpc_object_t v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)this + 24, v49);
        }
        else {
          xpc_object_t v50 = 0;
        }
        long long v61 = (SipHeader **)&v50[8 * v46];
        uint64_t v62 = &v50[8 * v49];
        const char *v61 = v4;
        xpc_object_t v38 = v61 + 1;
        uint64_t v64 = (SipHeader **)*((void *)this + 1);
        long long v63 = (SipHeader **)*((void *)this + 2);
        if (v63 != v64)
        {
          do
          {
            long long v65 = *--v63;
            *--long long v61 = v65;
          }
          while (v63 != v64);
          long long v63 = *v29;
        }
        *((void *)this + 1) = v61;
        *((void *)this + 2) = v38;
        *((void *)this + 3) = v62;
        if (v63) {
          operator delete(v63);
        }
        goto LABEL_83;
      }
    }
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  if (v25 == v4)
  {
    *(void *)(*((void *)this + 1) + 8 * v26) = v4;
    long long v72 = (long long *)((char *)v4 + 8);
    *((void *)std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)this + 32, (unsigned __int8 *)v4 + 8, (uint64_t)&std::piecewise_construct, &v72)+ 5) = v4;
  }
  if (v28) {
    (*(void (**)(SipHeader *))(*(void *)v28 + 8))(v28);
  }
  return v25;
}

void sub_1C5662D68(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipMessage::copyHeaderFromMessage(SipMessage *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3 != v4)
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    char v10 = 0;
    while (1)
    {
      uint64_t v11 = *(void *)(v4 + 8 * v8);
      uint64_t v12 = *(unsigned __int8 *)(v11 + 31);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = *(unsigned __int8 *)(v11 + 31);
      }
      else {
        uint64_t v13 = *(void *)(v11 + 16);
      }
      uint64_t v14 = *(unsigned __int8 *)(a3 + 23);
      int v15 = (char)v14;
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *(void *)(a3 + 8);
      }
      if (v13 != v14) {
        goto LABEL_19;
      }
      uint64_t v16 = (const void **)(v11 + 8);
      uint64_t v17 = v15 >= 0 ? (unsigned __int8 *)a3 : *(unsigned __int8 **)a3;
      if ((v12 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*v16, v17, *(void *)(v11 + 16))) {
        goto LABEL_18;
      }
LABEL_19:
      uint64_t v8 = ++v9;
      if (v9 >= (unint64_t)((v3 - v4) >> 3)) {
        return v10 & 1;
      }
    }
    if (*(unsigned char *)(v11 + 31))
    {
      while (*(unsigned __int8 *)v16 == *v17)
      {
        uint64_t v16 = (const void **)((char *)v16 + 1);
        ++v17;
        if (!--v12) {
          goto LABEL_18;
        }
      }
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v18 = (SipHeader *)(*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v11 + 32))(v11, v17);
    SipMessage::addHeader(a1, v18, 0);
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v3 = *(void *)(a2 + 16);
    char v10 = 1;
    goto LABEL_19;
  }
  char v10 = 0;
  return v10 & 1;
}

uint64_t SipMessage::addBody(uint64_t a1, const void *a2)
{
  uint64_t v3 = *(const void **)(a1 + 72);
  if (v3 != a2)
  {
    if (v3)
    {
      SipMultiPartBody::addPart();
    }
    *(void *)(a1 + 72) = a2;
  }
  return 0;
}

void sub_1C5662F98(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C401BA7B717);
  _Unwind_Resume(a1);
}

char *SipMessage::bodyWithContentType(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (char *)(a1 + 72);
  xpc_object_t result = *(char **)(a1 + 72);
  if (!result) {
    return result;
  }
  unint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(char *))(*(void *)result + 40))(result);
  uint64_t v6 = v5[23];
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = v5[23];
  }
  else {
    uint64_t v7 = *((void *)v5 + 1);
  }
  uint64_t v8 = a2[23];
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)a2 + 1);
  }
  if (v7 == v8)
  {
    if (v9 >= 0) {
      char v10 = a2;
    }
    else {
      char v10 = *(unsigned __int8 **)a2;
    }
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v5, v10, *((void *)v5 + 1))) {
        goto LABEL_17;
      }
    }
    else if (v5[23])
    {
      while (*v5 == *v10)
      {
        ++v5;
        ++v10;
        if (!--v6) {
          return *(char **)v3;
        }
      }
      goto LABEL_17;
    }
    return *(char **)v3;
  }
LABEL_17:
  xpc_object_t result = *(char **)v3;
  if (*(void *)v3)
  {
    if (result)
    {
      xpc_object_t result = (char *)SipMultiPartBody::partWithContentType((uint64_t)result, a2);
      if (result)
      {
        uint64_t v3 = result + 24;
        return *(char **)v3;
      }
    }
  }
  return result;
}

void SipMessage::setSdp()
{
}

char *SipMessage::body<SipSdpBody>(uint64_t a1)
{
  xpc_object_t result = SipMessage::bodyWithContentType(a1, "application/sdp");
  if (result)
  {
  }
  return result;
}

SipHeader *SipMessage::addHeader(SipMessage *a1, uint64_t a2, uint64_t a3, int a4)
{
  xpc_object_t result = (SipHeader *)*((void *)a1 + 10);
  if (result)
  {
    Header = (SipHeader *)SipMessageEncodingMap::createHeader((uint64_t)result, a2, a3);
    return SipMessage::addHeader(a1, Header, a4);
  }
  return result;
}

SipHeader *SipMessage::addHeader(SipMessage *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = *((void *)a1 + 10);
  if (!v4) {
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t Header = SipMessageEncodingMap::createHeader(v4, a2, (uint64_t)__p);
  char v10 = (const void *)Header;
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if (!v10)
    {
LABEL_9:
      std::string::basic_string[abi:ne180100]<0>(__p, "sip.message");
      std::string::basic_string[abi:ne180100]<0>(v15, "");
      uint64_t v13 = ims::error((uint64_t)__p, (uint64_t)v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Can't assign a uint to header of type ", 38);
      *(unsigned char *)(v13 + 17) = 0;
      if (!v10) {
        __cxa_bad_typeid();
      }
      size_t v14 = strlen((const char *)(*(void *)(*(void *)(*(void *)v10 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), *(void *)(*(void *)(*(void *)v10 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v14);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (v16 < 0) {
        operator delete(v15[0]);
      }
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      (*(void (**)(const void *))(*(void *)v10 + 8))(v10);
      return 0;
    }
  }
  else if (!Header)
  {
    goto LABEL_9;
  }
  if (!v11) {
    goto LABEL_9;
  }
  *((_DWORD *)v11 + 15) = a3;
  xpc_object_t result = SipMessage::addHeader(a1, v11, a4);
  if (result) {
  return result;
  }
}

void sub_1C56634D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

SipHeader *SipMessage::headerWithName(SipMessage *a1, unsigned __int8 *a2, int a3)
{
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((void *)a1 + 4, a2);
  if (v6) {
    return (SipHeader *)*((void *)v6 + 5);
  }
  if (!a3) {
    return 0;
  }
  return SipMessage::addHeader(a1, (uint64_t)a2, (uint64_t)&ims::kEmptyString, 0);
}

SipHeader *SipMessage::firstHeaderWithName(SipMessage *a1, uint64_t a2, int a3)
{
  uint64_t v7 = *((void *)a1 + 1);
  uint64_t v6 = *((void *)a1 + 2);
  uint64_t v8 = v6 - v7;
  if (v6 != v7)
  {
    uint64_t v9 = 0;
    unint64_t v10 = v8 >> 3;
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      unint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      unint64_t v12 = *(void *)(a2 + 8);
    }
    if (v11 >= 0) {
      uint64_t v13 = (const void *)a2;
    }
    else {
      uint64_t v13 = *(const void **)a2;
    }
    unsigned int v14 = 1;
    do
    {
      uint64_t v15 = *(void *)(v7 + 8 * v9);
      if (*(char *)(v15 + 31) < 0)
      {
        char v16 = *(const void **)(v15 + 8);
        unint64_t v17 = *(void *)(v15 + 16);
      }
      else
      {
        char v16 = (const void *)(v15 + 8);
        unint64_t v17 = *(unsigned __int8 *)(v15 + 31);
      }
      size_t v18 = v12 >= v17 ? v17 : v12;
      if (!memcmp(v16, v13, v18) && v12 == v17) {
        return (SipHeader *)v15;
      }
      uint64_t v9 = v14;
    }
    while (v10 > v14++);
  }
  if (!a3) {
    return 0;
  }
  return SipMessage::addHeader(a1, a2, (uint64_t)&ims::kEmptyString, 0);
}

uint64_t SipMessage::firstHeaderWithName(uint64_t a1, const void **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v4 = v2 - v3;
  if (v2 == v3) {
    return 0;
  }
  uint64_t v5 = 0;
  unint64_t v6 = v4 >> 3;
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (const void *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    uint64_t v8 = a2[1];
  }
  if (v7 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = *a2;
  }
  unsigned int v10 = 1;
  while (1)
  {
    uint64_t v11 = *(void *)(v3 + 8 * v5);
    if (*(char *)(v11 + 31) < 0)
    {
      unint64_t v12 = *(const void **)(v11 + 8);
      unint64_t v13 = *(void *)(v11 + 16);
    }
    else
    {
      unint64_t v12 = (const void *)(v11 + 8);
      unint64_t v13 = *(unsigned __int8 *)(v11 + 31);
    }
    size_t v14 = (unint64_t)v8 >= v13 ? v13 : (size_t)v8;
    if (!memcmp(v12, v9, v14) && v8 == (const void *)v13) {
      break;
    }
    uint64_t v5 = v10;
    if (v6 <= v10++) {
      return 0;
    }
  }
  return v11;
}

void SipMessage::transactionId(SipMessage *this@<X0>, std::string *a2@<X8>)
{
  HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>((uint64_t)this);
  if (HeaderWith && (uint64_t v4 = (SipViaHop **)*((void *)HeaderWith + 8), v4 != *((SipViaHop ***)HeaderWith + 9)) && *v4)
  {
    uint64_t v5 = SipViaHop::branch(*v4);
    if (*((char *)v5 + 23) < 0)
    {
      int v7 = *(const std::string::value_type **)v5;
      std::string::size_type v8 = *((void *)v5 + 1);
      std::string::__init_copy_ctor_external(a2, v7, v8);
    }
    else
    {
      long long v6 = *v5;
      a2->__r_.__value_.__r.__words[2] = *((void *)v5 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v6;
    }
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
}

SipHeader *SipMessage::firstHeaderWithType<SipViaHeader>(SipMessage *a1, int a2)
{
  xpc_object_t result = SipMessage::firstHeaderWithName(a1, (uint64_t)&SipHeader::kHeaderVia, a2);
  if (result)
  {
  }
  return result;
}

void *SipMessage::firstHeaderWithType<SipViaHeader>(uint64_t a1)
{
  xpc_object_t result = (void *)SipMessage::firstHeaderWithName(a1, (const void **)SipHeader::kHeaderVia);
  if (result)
  {
  }
  return result;
}

void SipMessage::addRouteHop(SipMessage *this, const SipUri *a2, BOOL a3, BOOL a4)
{
  int v7 = SipMessage::header<SipRouteHeader>(this, 1);
  v9[0] = 0;
  v9[1] = 0;
  v8[0] = &unk_1F20B37B0;
  v8[1] = v9;
  __int16 v10 = 256;
  SipRouteSet::addHop((SipHeader *)((char *)v7 + 64), a2, a3, a4, (const SipParameterMap *)v8);
}

void sub_1C566396C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v12, a12);
  _Unwind_Resume(a1);
}

SipHeader *SipMessage::header<SipRouteHeader>(SipMessage *a1, int a2)
{
  xpc_object_t result = SipMessage::headerWithName(a1, "Route", a2);
  if (result)
  {
  }
  return result;
}

BOOL SipMessage::allHeadersWithName(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v3 = *(void **)a3;
  *(void *)(a3 + 8) = *(void *)a3;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5 == v4)
  {
    std::string v28 = v3;
  }
  else
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(v4 + 8 * v8);
      if (*(char *)(v10 + 31) < 0)
      {
        uint64_t v11 = *(const void **)(v10 + 8);
        size_t v12 = *(void *)(v10 + 16);
      }
      else
      {
        uint64_t v11 = (const void *)(v10 + 8);
        size_t v12 = *(unsigned __int8 *)(v10 + 31);
      }
      int v13 = *((char *)a2 + 23);
      if (v13 >= 0) {
        size_t v14 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v14 = (size_t)a2[1];
      }
      if (v13 >= 0) {
        uint64_t v15 = a2;
      }
      else {
        uint64_t v15 = *a2;
      }
      if (v14 >= v12) {
        size_t v16 = v12;
      }
      else {
        size_t v16 = v14;
      }
      if (!memcmp(v11, v15, v16) && v14 == v12)
      {
        unint64_t v18 = *(void *)(a3 + 16);
        if ((unint64_t)v3 >= v18)
        {
          unint64_t v20 = *(void **)a3;
          uint64_t v21 = ((uint64_t)v3 - *(void *)a3) >> 3;
          unint64_t v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61) {
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v23 = v18 - (void)v20;
          if (v23 >> 2 > v22) {
            unint64_t v22 = v23 >> 2;
          }
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v24 = v22;
          }
          if (v24)
          {
            if (v24 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v25 = (char *)operator new(8 * v24);
            uint64_t v10 = *(void *)(v4 + 8 * v8);
          }
          else
          {
            uint64_t v25 = 0;
          }
          signed int v26 = &v25[8 * v21];
          *(void *)signed int v26 = v10;
          int v19 = v26 + 8;
          if (v3 != v20)
          {
            do
            {
              uint64_t v27 = *--v3;
              *((void *)v26 - 1) = v27;
              v26 -= 8;
            }
            while (v3 != v20);
            uint64_t v3 = *(void **)a3;
          }
          *(void *)a3 = v26;
          *(void *)(a3 + 8) = v19;
          *(void *)(a3 + 16) = &v25[8 * v24];
          if (v3) {
            operator delete(v3);
          }
        }
        else
        {
          void *v3 = v10;
          int v19 = v3 + 1;
        }
        *(void *)(a3 + 8) = v19;
        uint64_t v3 = v19;
        uint64_t v4 = *(void *)(a1 + 8);
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v8 = ++v9;
    }
    while (v9 < (unint64_t)((v5 - v4) >> 3));
    std::string v28 = *(void **)a3;
  }
  return v28 != v3;
}

uint64_t *SipMessage::removeHeadersWithName(void *a1, unsigned __int8 *a2)
{
  uint64_t v4 = (const void ***)a1[1];
  if (v4 == (const void ***)a1[2]) {
    goto LABEL_25;
  }
  uint64_t v5 = (const void ***)a1[1];
  do
  {
    long long v6 = *v4;
    uint64_t v7 = *((unsigned __int8 *)*v4 + 31);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)*v4 + 31);
    }
    else {
      uint64_t v8 = (unsigned __int8 *)(*v4)[2];
    }
    unsigned int v9 = (unsigned __int8 *)a2[23];
    int v10 = (char)v9;
    if ((char)v9 < 0) {
      unsigned int v9 = (unsigned __int8 *)*((void *)a2 + 1);
    }
    if (v8 != v9) {
      goto LABEL_20;
    }
    if (v10 >= 0) {
      uint64_t v11 = a2;
    }
    else {
      uint64_t v11 = *(unsigned __int8 **)a2;
    }
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(v6[1], v11, (size_t)(*v4)[2])) {
        goto LABEL_20;
      }
    }
    else if (*((unsigned char *)*v4 + 31))
    {
      uint64_t v12 = 0;
      while (*((unsigned __int8 *)v6 + v12 + 8) == v11[v12])
      {
        if (v7 == ++v12)
        {
          if (v6) {
            goto LABEL_21;
          }
          goto LABEL_22;
        }
      }
LABEL_20:
      *v5++ = v6;
      goto LABEL_22;
    }
LABEL_21:
    (*((void (**)(const void **, unsigned __int8 *))*v6 + 1))(v6, v11);
LABEL_22:
    ++v4;
  }
  while (v4 != (const void ***)a1[2]);
  if (v5 != v4) {
    a1[2] = v5;
  }
LABEL_25:
  return std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::__erase_unique<std::string>(a1 + 4, a2);
}

uint64_t SipMessage::headerValueAsString(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), a2);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *((void *)v2 + 5);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 40);
  return v4();
}

uint64_t SipMessage::headerValueAsUint32(uint64_t a1, unsigned __int8 *a2, _DWORD *a3)
{
  long long v6 = SipMessage::headerWithName<SipUint32Header>(a1, a2);
  if (v6)
  {
    *a3 = v6[15];
    return 1;
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = 0;
    uint64_t v7 = SipMessage::headerValueAsString(a1, a2);
    if (v7)
    {
      if (v11 >= 0) {
        uint64_t v8 = __p;
      }
      else {
        uint64_t v8 = (void **)__p[0];
      }
      *a3 = strtoul((const char *)v8, 0, 10);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
  }
  return v7;
}

void sub_1C5663E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *SipMessage::headerWithName<SipUint32Header>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), a2);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (const void *)*((void *)v2 + 5);
  if (!v3) {
    return 0;
  }
}

void SipMessage::encodeToString()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C5663F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)va);
  _Unwind_Resume(a1);
}

void SipMessage::encode(SipMessage *this, ImsOutStream *a2)
{
  (*(void (**)(SipMessage *))(*(void *)this + 104))(this);
  if (((*(uint64_t (**)(ImsOutStream *))(*(void *)a2 + 16))(a2) & 1) == 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r", 1);
    *((unsigned char *)a2 + 17) = 0;
  }
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  SipMessage::encodeHeaders(this, a2);
  uint64_t v4 = *((void *)this + 9);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  if (v6)
  {
    uint64_t v16 = 0;
    *(_OWORD *)size_t v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    memset(v10, 0, sizeof(v10));
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    SipStringParameterHeader::SipStringParameterHeader((uint64_t)v10, (const std::string *)"Content-Type", &__p);
    *(void *)&v10[0] = &unk_1F20D2D10;
    BYTE8(v11) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    (*(void (**)(void, _OWORD *))(**((void **)this + 9) + 32))(*((void *)this + 9), v10);
    SipHeader::encode((SipHeader *)v10, a2, *(unsigned __int8 *)(*((void *)this + 10) + 128));
    SipParameterMap::toStream((SipParameterMap *)&v12, a2, 0, 0, 0, 0);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r", 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Content-Length: ", 16);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(void))(**((void **)this + 9) + 48))(*((void *)this + 9));
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r", 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r", 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t v7 = *((void *)this + 9);
    uint64_t v8 = (*(uint64_t (**)(ImsOutStream *))(*(void *)a2 + 16))(a2);
    (*(void (**)(uint64_t, ImsOutStream *, uint64_t))(*(void *)v7 + 64))(v7, a2, v8);
    *(void *)&v10[0] = &unk_1F20C0A78;
    if (SHIBYTE(v15) < 0) {
      operator delete(v14[1]);
    }
    *(void *)&v10[0] = &unk_1F20DEB80;
    *(void *)&long long v12 = &unk_1F20B37B0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v12 + 8, (void *)v13);
    SipHeader::~SipHeader((void **)v10);
  }
  else
  {
LABEL_12:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Content-Length: 0\r", 18);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r", 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
}

void sub_1C5664464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *SipMessage::encodeHeaders(void *this, ImsOutStream *a2)
{
  uint64_t v2 = this[1];
  if (this[2] != v2)
  {
    uint64_t v4 = this;
    unint64_t v5 = 0;
    unsigned int v6 = 1;
    do
    {
      (*(void (**)(void, ImsOutStream *, void))(**(void **)(v2 + 8 * v5) + 104))(*(void *)(v2 + 8 * v5), a2, *(unsigned __int8 *)(v4[10] + 128));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r", 1);
      *((unsigned char *)a2 + 17) = 0;
      this = (void *)(*(uint64_t (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      unint64_t v5 = v6;
      uint64_t v2 = v4[1];
      ++v6;
    }
    while (v5 < (v4[2] - v2) >> 3);
  }
  return this;
}

void SipMessage::encodeBody(SipMessage *this, ImsOutStream *a2)
{
  uint64_t v4 = *((void *)this + 9);
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(v5 + 8);
  }
  if (v6)
  {
    uint64_t v16 = 0;
    *(_OWORD *)size_t v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    memset(v10, 0, sizeof(v10));
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    SipStringParameterHeader::SipStringParameterHeader((uint64_t)v10, (const std::string *)"Content-Type", &__p);
    *(void *)&v10[0] = &unk_1F20D2D10;
    BYTE8(v11) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    (*(void (**)(void, _OWORD *))(**((void **)this + 9) + 32))(*((void *)this + 9), v10);
    SipHeader::encode((SipHeader *)v10, a2, *(unsigned __int8 *)(*((void *)this + 10) + 128));
    SipParameterMap::toStream((SipParameterMap *)&v12, a2, 0, 0, 0, 0);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r", 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Content-Length: ", 16);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(void))(**((void **)this + 9) + 48))(*((void *)this + 9));
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r", 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r", 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t v7 = *((void *)this + 9);
    uint64_t v8 = (*(uint64_t (**)(ImsOutStream *))(*(void *)a2 + 16))(a2);
    (*(void (**)(uint64_t, ImsOutStream *, uint64_t))(*(void *)v7 + 64))(v7, a2, v8);
    *(void *)&v10[0] = &unk_1F20C0A78;
    if (SHIBYTE(v15) < 0) {
      operator delete(v14[1]);
    }
    *(void *)&v10[0] = &unk_1F20DEB80;
    *(void *)&long long v12 = &unk_1F20B37B0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v12 + 8, (void *)v13);
    SipHeader::~SipHeader((void **)v10);
  }
  else
  {
LABEL_10:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Content-Length: 0\r", 18);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\r", 1);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
}

void sub_1C5664988(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipMessage::supportsOption(uint64_t a1, void **a2)
{
  std::string __p = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  SipMessage::allHeadersWithType<SipSupportedHeader>(a1, (uint64_t)&__p);
  uint64_t v4 = __p;
  if (v10 == __p)
  {
LABEL_5:
    BOOL v7 = SipMessage::requiresOption(a1, a2);
  }
  else
  {
    unint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = v4[v5];
      if ((void **)(v6 + 72) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v6 + 64, a2))break; {
      ++v5;
      }
      uint64_t v4 = __p;
      if (v5 >= (v10 - (unsigned char *)__p) >> 3) {
        goto LABEL_5;
      }
    }
    BOOL v7 = 1;
  }
  if (__p)
  {
    int v10 = __p;
    operator delete(__p);
  }
  return v7;
}

void sub_1C5664A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipMessage::allHeadersWithType<SipSupportedHeader>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == v3)
  {
    signed int v26 = v2;
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    do
    {
      unsigned int v9 = *(unsigned __int8 **)(v3 + 8 * v7);
      if ((char)v9[31] < 0)
      {
        int v10 = (const void *)*((void *)v9 + 1);
        unint64_t v11 = *((void *)v9 + 2);
      }
      else
      {
        int v10 = v9 + 8;
        unint64_t v11 = v9[31];
      }
      if (v11 >= 9) {
        size_t v12 = 9;
      }
      else {
        size_t v12 = v11;
      }
      if (!memcmp(v10, "Supported", v12) && v11 == 9)
      {
        long long v15 = v14;
        unint64_t v16 = *(void *)(a2 + 16);
        if ((unint64_t)v2 >= v16)
        {
          unint64_t v18 = *(void **)a2;
          uint64_t v19 = ((uint64_t)v2 - *(void *)a2) >> 3;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61) {
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v21 = v16 - (void)v18;
          if (v21 >> 2 > v20) {
            unint64_t v20 = v21 >> 2;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            if (v22 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v23 = (char *)operator new(8 * v22);
          }
          else
          {
            uint64_t v23 = 0;
          }
          unint64_t v24 = &v23[8 * v19];
          *(void *)unint64_t v24 = v15;
          unint64_t v17 = v24 + 8;
          if (v2 != v18)
          {
            do
            {
              uint64_t v25 = *--v2;
              *((void *)v24 - 1) = v25;
              v24 -= 8;
            }
            while (v2 != v18);
            uint64_t v2 = *(void **)a2;
          }
          *(void *)a2 = v24;
          *(void *)(a2 + 8) = v17;
          *(void *)(a2 + 16) = &v23[8 * v22];
          if (v2) {
            operator delete(v2);
          }
        }
        else
        {
          *uint64_t v2 = v14;
          unint64_t v17 = v2 + 1;
        }
        *(void *)(a2 + 8) = v17;
        uint64_t v2 = v17;
        uint64_t v3 = *(void *)(a1 + 8);
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v7 = ++v8;
    }
    while (v8 < (unint64_t)((v4 - v3) >> 3));
    signed int v26 = *(void **)a2;
  }
  return v26 != v2;
}

BOOL SipMessage::requiresOption(uint64_t a1, void **a2)
{
  std::string __p = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  SipMessage::allHeadersWithType<SipRequireHeader>(a1, (uint64_t)&__p);
  uint64_t v3 = v11;
  if (v11 == __p)
  {
    BOOL v8 = 0;
    if (!v11) {
      return v8;
    }
    goto LABEL_7;
  }
  unint64_t v4 = 0;
  uint64_t v3 = __p;
  do
  {
    uint64_t v5 = v3[v4];
    uint64_t v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v5 + 64, a2);
    uint64_t v3 = __p;
    BOOL v7 = v5 + 72 == (void)v6;
    BOOL v8 = v5 + 72 != (void)v6;
    if (!v7) {
      break;
    }
    ++v4;
  }
  while (v4 < ((char *)v11 - (unsigned char *)__p) >> 3);
  if (__p)
  {
LABEL_7:
    unint64_t v11 = v3;
    operator delete(v3);
  }
  return v8;
}

void sub_1C5664D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipMessage::addSupportedOption(SipMessage *a1, void **a2)
{
  std::string __p = 0;
  unsigned int v9 = 0;
  uint64_t v10 = 0;
  SipMessage::allHeadersWithType<SipSupportedHeader>((uint64_t)a1, (uint64_t)&__p);
  unint64_t v4 = __p;
  if (v9 == __p)
  {
LABEL_7:
    BOOL v7 = (uint64_t **)SipMessage::addHeader<SipSupportedHeader>(a1, 0);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v7 + 8, a2, (uint64_t)a2);
  }
  else
  {
    unint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = v4[v5];
      if ((void **)(v6 + 72) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v6 + 64, a2))break; {
      ++v5;
      }
      unint64_t v4 = __p;
      if (v5 >= (v9 - (unsigned char *)__p) >> 3)
      {
        if (__p == v9) {
          goto LABEL_7;
        }
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(*(void *)__p + 64), a2, (uint64_t)a2);
        break;
      }
    }
  }
  if (__p)
  {
    unsigned int v9 = __p;
    operator delete(__p);
  }
}

void sub_1C5664DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *SipMessage::addHeader<SipSupportedHeader>(SipMessage *a1, int a2)
{
  unint64_t v4 = SipMessageEncodingMap::headerPrototype<SipSupportedHeader>(*((void **)a1 + 10));
  if (!v4) {
    return 0;
  }
  unint64_t v5 = (SipHeader *)(*(uint64_t (**)(void *))(*(void *)v4 + 32))(v4);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = SipMessage::addHeader(a1, v5, a2);
  if (!v6) {
    return 0;
  }
}

BOOL SipMessage::allHeadersWithType<SipRequireHeader>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == v3)
  {
    signed int v26 = v2;
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    do
    {
      unsigned int v9 = *(unsigned __int8 **)(v3 + 8 * v7);
      if ((char)v9[31] < 0)
      {
        uint64_t v10 = (const void *)*((void *)v9 + 1);
        unint64_t v11 = *((void *)v9 + 2);
      }
      else
      {
        uint64_t v10 = v9 + 8;
        unint64_t v11 = v9[31];
      }
      if (v11 >= 7) {
        size_t v12 = 7;
      }
      else {
        size_t v12 = v11;
      }
      if (!memcmp(v10, "Require", v12) && v11 == 7)
      {
        long long v15 = v14;
        unint64_t v16 = *(void *)(a2 + 16);
        if ((unint64_t)v2 >= v16)
        {
          unint64_t v18 = *(void **)a2;
          uint64_t v19 = ((uint64_t)v2 - *(void *)a2) >> 3;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61) {
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v21 = v16 - (void)v18;
          if (v21 >> 2 > v20) {
            unint64_t v20 = v21 >> 2;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            if (v22 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v23 = (char *)operator new(8 * v22);
          }
          else
          {
            uint64_t v23 = 0;
          }
          unint64_t v24 = &v23[8 * v19];
          *(void *)unint64_t v24 = v15;
          unint64_t v17 = v24 + 8;
          if (v2 != v18)
          {
            do
            {
              uint64_t v25 = *--v2;
              *((void *)v24 - 1) = v25;
              v24 -= 8;
            }
            while (v2 != v18);
            uint64_t v2 = *(void **)a2;
          }
          *(void *)a2 = v24;
          *(void *)(a2 + 8) = v17;
          *(void *)(a2 + 16) = &v23[8 * v22];
          if (v2) {
            operator delete(v2);
          }
        }
        else
        {
          *uint64_t v2 = v14;
          unint64_t v17 = v2 + 1;
        }
        *(void *)(a2 + 8) = v17;
        uint64_t v2 = v17;
        uint64_t v3 = *(void *)(a1 + 8);
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v7 = ++v8;
    }
    while (v8 < (unint64_t)((v4 - v3) >> 3));
    signed int v26 = *(void **)a2;
  }
  return v26 != v2;
}

void SipMessage::addRequiredOption(SipMessage *a1, void **a2)
{
  std::string __p = 0;
  unsigned int v9 = 0;
  uint64_t v10 = 0;
  SipMessage::allHeadersWithType<SipRequireHeader>((uint64_t)a1, (uint64_t)&__p);
  uint64_t v4 = __p;
  if (v9 == __p)
  {
LABEL_7:
    uint64_t v7 = (uint64_t **)SipMessage::addHeader<SipRequireHeader>(a1, 0);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v7 + 8, a2, (uint64_t)a2);
  }
  else
  {
    unint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = v4[v5];
      if ((void **)(v6 + 72) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v6 + 64, a2))break; {
      ++v5;
      }
      uint64_t v4 = __p;
      if (v5 >= (v9 - (unsigned char *)__p) >> 3)
      {
        if (__p == v9) {
          goto LABEL_7;
        }
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(*(void *)__p + 64), a2, (uint64_t)a2);
        break;
      }
    }
  }
  if (__p)
  {
    unsigned int v9 = __p;
    operator delete(__p);
  }
}

void sub_1C5665184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *SipMessage::addHeader<SipRequireHeader>(SipMessage *a1, int a2)
{
  uint64_t v4 = SipMessageEncodingMap::headerPrototype<SipRequireHeader>(*((void **)a1 + 10));
  if (!v4) {
    return 0;
  }
  unint64_t v5 = (SipHeader *)(*(uint64_t (**)(void *))(*(void *)v4 + 32))(v4);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = SipMessage::addHeader(a1, v5, a2);
  if (!v6) {
    return 0;
  }
}

void SipMessage::addProxyRequiredOption(SipMessage *a1, void **a2)
{
  std::string __p = 0;
  unsigned int v9 = 0;
  uint64_t v10 = 0;
  SipMessage::allHeadersWithType<SipProxyRequireHeader>((uint64_t)a1, (uint64_t)&__p);
  uint64_t v4 = __p;
  if (v9 == __p)
  {
LABEL_7:
    uint64_t v7 = (uint64_t **)SipMessage::addHeader<SipProxyRequireHeader>(a1, 0);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v7 + 8, a2, (uint64_t)a2);
  }
  else
  {
    unint64_t v5 = 0;
    while (1)
    {
      uint64_t v6 = v4[v5];
      if ((void **)(v6 + 72) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v6 + 64, a2))break; {
      ++v5;
      }
      uint64_t v4 = __p;
      if (v5 >= (v9 - (unsigned char *)__p) >> 3)
      {
        if (__p == v9) {
          goto LABEL_7;
        }
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(*(void *)__p + 64), a2, (uint64_t)a2);
        break;
      }
    }
  }
  if (__p)
  {
    unsigned int v9 = __p;
    operator delete(__p);
  }
}

void sub_1C5665340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipMessage::allHeadersWithType<SipProxyRequireHeader>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4 == v3)
  {
    signed int v26 = v2;
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    do
    {
      unsigned int v9 = *(unsigned __int8 **)(v3 + 8 * v7);
      if ((char)v9[31] < 0)
      {
        uint64_t v10 = (const void *)*((void *)v9 + 1);
        unint64_t v11 = *((void *)v9 + 2);
      }
      else
      {
        uint64_t v10 = v9 + 8;
        unint64_t v11 = v9[31];
      }
      if (v11 >= 0xD) {
        size_t v12 = 13;
      }
      else {
        size_t v12 = v11;
      }
      if (!memcmp(v10, "Proxy-Require", v12) && v11 == 13)
      {
        long long v15 = v14;
        unint64_t v16 = *(void *)(a2 + 16);
        if ((unint64_t)v2 >= v16)
        {
          unint64_t v18 = *(void **)a2;
          uint64_t v19 = ((uint64_t)v2 - *(void *)a2) >> 3;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 61) {
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v21 = v16 - (void)v18;
          if (v21 >> 2 > v20) {
            unint64_t v20 = v21 >> 2;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            if (v22 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            uint64_t v23 = (char *)operator new(8 * v22);
          }
          else
          {
            uint64_t v23 = 0;
          }
          unint64_t v24 = &v23[8 * v19];
          *(void *)unint64_t v24 = v15;
          unint64_t v17 = v24 + 8;
          if (v2 != v18)
          {
            do
            {
              uint64_t v25 = *--v2;
              *((void *)v24 - 1) = v25;
              v24 -= 8;
            }
            while (v2 != v18);
            uint64_t v2 = *(void **)a2;
          }
          *(void *)a2 = v24;
          *(void *)(a2 + 8) = v17;
          *(void *)(a2 + 16) = &v23[8 * v22];
          if (v2) {
            operator delete(v2);
          }
        }
        else
        {
          *uint64_t v2 = v14;
          unint64_t v17 = v2 + 1;
        }
        *(void *)(a2 + 8) = v17;
        uint64_t v2 = v17;
        uint64_t v3 = *(void *)(a1 + 8);
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v7 = ++v8;
    }
    while (v8 < (unint64_t)((v4 - v3) >> 3));
    signed int v26 = *(void **)a2;
  }
  return v26 != v2;
}

void *SipMessage::addHeader<SipProxyRequireHeader>(SipMessage *a1, int a2)
{
  uint64_t v4 = SipMessageEncodingMap::headerPrototype<SipProxyRequireHeader>(*((void **)a1 + 10));
  if (!v4) {
    return 0;
  }
  unint64_t v5 = (SipHeader *)(*(uint64_t (**)(void *))(*(void *)v4 + 32))(v4);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = SipMessage::addHeader(a1, v5, a2);
  if (!v6) {
    return 0;
  }
}

void *SipMessage::header<SipCallIdHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "Call-ID");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

void *SipMessage::header<SipConversationIdHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "Conversation-ID");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

void *SipMessage::header<SipContributionIdHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "Contribution-ID");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

void *SipMessage::header<SipInReplyToContributionIdHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), SipHeader::kInReplyToContributionId);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

void SipMessage::reasonText(SipMessage *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (SipReasonHeader *)SipMessage::header<SipReasonHeader>((uint64_t)this);
  if (v3 && (uint64_t v4 = SipReasonHeader::bestReason(v3)) != 0)
  {
    SipReason::text((SipReason *)v4, a2);
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
}

void SipMessage::reasonProtocol(SipMessage *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (SipReasonHeader *)SipMessage::header<SipReasonHeader>((uint64_t)this);
  if (v3 && (uint64_t v4 = SipReasonHeader::bestReason(v3)) != 0)
  {
    if ((char)v4[23] < 0)
    {
      uint64_t v6 = *(const std::string::value_type **)v4;
      std::string::size_type v7 = *((void *)v4 + 1);
      std::string::__init_copy_ctor_external(a2, v6, v7);
    }
    else
    {
      long long v5 = *(_OWORD *)v4;
      a2->__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
    }
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
}

unint64_t SipMessage::reasonCause(SipMessage *this)
{
  uint64_t v1 = (SipReasonHeader *)SipMessage::header<SipReasonHeader>((uint64_t)this);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = SipReasonHeader::bestReason(v1);
  if (!v2) {
    return 0;
  }
  return SipReason::cause((SipReason *)v2);
}

SipHeader *SipMessage::header<SipCallIdHeader>(SipMessage *a1, int a2)
{
  xpc_object_t result = SipMessage::headerWithName(a1, "Call-ID", a2);
  if (result)
  {
  }
  return result;
}

void *SipMessage::header<SipSessionIdHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "Session-ID");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

SipHeader *SipMessage::header<SipConversationIdHeader>(SipMessage *a1, int a2)
{
  xpc_object_t result = SipMessage::headerWithName(a1, "Conversation-ID", a2);
  if (result)
  {
  }
  return result;
}

SipHeader *SipMessage::header<SipContributionIdHeader>(SipMessage *a1, int a2)
{
  xpc_object_t result = SipMessage::headerWithName(a1, "Contribution-ID", a2);
  if (result)
  {
  }
  return result;
}

SipHeader *SipMessage::header<SipInReplyToContributionIdHeader>(SipMessage *a1, int a2)
{
  xpc_object_t result = SipMessage::headerWithName(a1, SipHeader::kInReplyToContributionId, a2);
  if (result)
  {
  }
  return result;
}

SipHeader *SipMessage::header<SipSessionIdHeader>(SipMessage *a1, int a2)
{
  xpc_object_t result = SipMessage::headerWithName(a1, "Session-ID", a2);
  if (result)
  {
  }
  return result;
}

SipHeader *SipMessage::header<SipUserAgentHeader>(SipMessage *a1, int a2)
{
  xpc_object_t result = SipMessage::headerWithName(a1, "User-Agent", a2);
  if (result)
  {
  }
  return result;
}

SipHeader *SipMessage::header<SipFromHeader>(SipMessage *a1, int a2)
{
  xpc_object_t result = SipMessage::headerWithName(a1, "From", a2);
  if (result)
  {
  }
  return result;
}

long long *SipMessage::toTag(SipMessage *this)
{
  uint64_t v1 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)this);
  if (!v1) {
    return &ims::kEmptyString;
  }
  return SipUriHeader::tag(v1);
}

SipHeader *SipMessage::header<SipToHeader>(SipMessage *a1, int a2)
{
  xpc_object_t result = SipMessage::headerWithName(a1, SipHeader::kHeaderTo, a2);
  if (result)
  {
  }
  return result;
}

void *SipMessage::header<SipSubjectHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "Subject");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

void SipMessage::referredBy(SipMessage *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (char *)SipMessage::header<SipReferredByHeader>((uint64_t)this);
  if (v3)
  {
    uint64_t v4 = (SipUri *)(v3 + 104);
    SipUri::normalizedPhoneNumber(v4, a2);
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
}

void *SipMessage::header<SipReferredByHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "Referred-By");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

SipHeader *SipMessage::header<SipSubjectHeader>(SipMessage *a1, int a2)
{
  xpc_object_t result = SipMessage::headerWithName(a1, "Subject", a2);
  if (result)
  {
  }
  return result;
}

void SipMessage::validate(SipMessage *this@<X0>, uint64_t a2@<X8>)
{
  HeaderWith = SipMessage::firstHeaderWithType<SipViaHeader>((uint64_t)this);
  if (!HeaderWith || (long long v5 = (void *)HeaderWith[8], v5 == (void *)HeaderWith[9]) || !*v5)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    size_t v14 = &unk_1F20B2680;
    long long v15 = &_bambiDomain;
    int v16 = 1073741828;
    unsigned int v9 = (const std::string *)ImsResult::operator<<<char [19]>((uint64_t)&v14, "invalid Via header");
    ImsResult::ImsResult((ImsResult *)a2, v9);
    goto LABEL_14;
  }
  if (!SipMessage::header<SipToHeader>((uint64_t)this))
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    size_t v14 = &unk_1F20B2680;
    long long v15 = &_bambiDomain;
    int v16 = 1073741828;
    uint64_t v10 = (const std::string *)ImsResult::operator<<<char [19]>((uint64_t)&v14, "missing To: header");
    ImsResult::ImsResult((ImsResult *)a2, v10);
    goto LABEL_14;
  }
  if (!SipMessage::header<SipFromHeader>((uint64_t)this))
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    size_t v14 = &unk_1F20B2680;
    long long v15 = &_bambiDomain;
    int v16 = 1073741828;
    unint64_t v11 = (const std::string *)ImsResult::operator<<<char [21]>((uint64_t)&v14, "missing From: header");
    ImsResult::ImsResult((ImsResult *)a2, v11);
    goto LABEL_14;
  }
  uint64_t v6 = (char *)SipMessage::header<SipCallIdHeader>((uint64_t)this);
  std::string::size_type v7 = (long long *)(v6 + 64);
  if (!v6) {
    std::string::size_type v7 = &ims::kEmptyString;
  }
  if ((*((char *)v7 + 23) & 0x80000000) == 0)
  {
    if (*((unsigned char *)v7 + 23)) {
      goto LABEL_10;
    }
LABEL_20:
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    size_t v14 = &unk_1F20B2680;
    long long v15 = &_bambiDomain;
    int v16 = 1073741828;
    long long v13 = (const std::string *)ImsResult::operator<<<char [23]>((uint64_t)&v14, "missing Call-ID header");
    ImsResult::ImsResult((ImsResult *)a2, v13);
    goto LABEL_14;
  }
  if (!*((void *)v7 + 1)) {
    goto LABEL_20;
  }
LABEL_10:
  unsigned int v8 = SipMessage::header<SipCSeqHeader>((uint64_t)this);
  if (v8 && v8[15])
  {
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0;
    return;
  }
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  size_t v14 = &unk_1F20B2680;
  long long v15 = &_bambiDomain;
  int v16 = 1073741828;
  size_t v12 = (const std::string *)ImsResult::operator<<<char [13]>((uint64_t)&v14, "invalid CSeq");
  ImsResult::ImsResult((ImsResult *)a2, v12);
LABEL_14:
  ImsResult::~ImsResult((ImsResult *)&v14);
}

void sub_1C566627C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

SipHeader *SipMessage::header<SipReasonHeader>(SipMessage *a1, int a2)
{
  xpc_object_t result = SipMessage::headerWithName(a1, "Reason", a2);
  if (result)
  {
  }
  return result;
}

void SipMessage::addReasonWithParams(SipMessage *a1, int a2, const SipParameterMap **a3, uint64_t a4, const std::string *a5)
{
  unsigned int v9 = SipMessage::header<SipReasonHeader>(a1, 1);
  *(_OWORD *)std::string __p = 0u;
  memset(v11, 0, sizeof(v11));
  SipReason::SipReason((unsigned __int8 *)__p, a5, a2, a4);
  if (*a3) {
    SipParameterMap::addParameters((std::string *)((char *)v11 + 8), *a3);
  }
  SipReasonHeader::addReason(v9, (const SipReason *)__p);
}

void sub_1C56663EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

SipHeader *SipMessage::header<SipContactHeader>(SipMessage *a1, int a2)
{
  xpc_object_t result = SipMessage::headerWithName(a1, "Contact", a2);
  if (result)
  {
  }
  return result;
}

uint64_t SipMessage::setContact(SipMessage *this, const SipContactParam *a2)
{
  uint64_t v3 = SipMessage::header<SipContactHeader>(this, 1);
  long long v5 = (void (***)(void))*((void *)v3 + 9);
  uint64_t v4 = (void (***)(void))*((void *)v3 + 10);
  if (v4 != v5)
  {
    uint64_t v6 = v4 - 61;
    std::string::size_type v7 = v4 - 61;
    do
    {
      (**v7)(v7);
      v6 -= 61;
      BOOL v8 = v7 == v5;
      v7 -= 61;
    }
    while (!v8);
  }
  *((void *)v3 + 10) = v5;
  return SipContactParamList::addContact((SipHeader *)((char *)v3 + 64), a2);
}

char *SipMessage::body<SipCallWaitingInfoBody>(uint64_t a1)
{
  xpc_object_t result = SipMessage::bodyWithContentType(a1, SipCallWaitingInfoBody::kContentType);
  if (result)
  {
  }
  return result;
}

BOOL SipMessage::hasPreconditions(SipMessage *this)
{
  uint64_t v1 = SipMessage::body<SipSdpBody>((uint64_t)this);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = v1;
  uint64_t v3 = (SDPModel *)*((void *)v1 + 1);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 2);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v3)
  {
    BOOL hasPreconditions = SDPModel::hasPreconditions(v3);
    if (!v4) {
      return hasPreconditions;
    }
    goto LABEL_9;
  }
  BOOL hasPreconditions = 0;
  if (v4) {
LABEL_9:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return hasPreconditions;
}

void sub_1C566660C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

char *SipMessage::assertedIdentity(uint64_t a1, int a2)
{
  if (a2 == 3)
  {
    uint64_t v4 = (char *)SipMessage::header<SipFromHeader>(a1);
    if (v4) {
      return v4 + 104;
    }
  }
  std::string __p = 0;
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  isSipUruint64_t i = SipMessage::allHeadersWithType<SipPAssertedIdentityHeader>(a1, (uint64_t)&__p);
  std::string::size_type v7 = __p;
  BOOL v8 = v20;
  if (__p == v20) {
    goto LABEL_26;
  }
  unsigned int v9 = 0;
  uint64_t v5 = 0;
  do
  {
    uint64_t v10 = *v7 + 64;
    int v16 = 0;
    long long v17 = 0;
    uint64_t v18 = 0;
    SipRouteSet::allHops(v10, &v16);
    unint64_t v11 = (SipUri **)v16;
    size_t v12 = v17;
    if (v16 == v17)
    {
      char v14 = 1;
      if (v16) {
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    while (1)
    {
      long long v13 = *v11;
      if (!v5) {
        uint64_t v5 = (uint64_t)*v11;
      }
      if (a2 == 1)
      {
        isSipUruint64_t i = SipUri::isSipUri(*v11);
        goto LABEL_15;
      }
      if (a2 == 2) {
        break;
      }
      if (!a2) {
        goto LABEL_20;
      }
LABEL_16:
      if (++v11 == (SipUri **)v12)
      {
        char v14 = 1;
        long long v13 = v9;
        goto LABEL_21;
      }
    }
    isSipUruint64_t i = SipUri::isTelUri(*v11);
LABEL_15:
    if (!isSipUri) {
      goto LABEL_16;
    }
LABEL_20:
    char v14 = 0;
LABEL_21:
    unint64_t v11 = (SipUri **)v16;
    unsigned int v9 = v13;
    if (v16)
    {
LABEL_22:
      long long v17 = (char *)v11;
      operator delete(v11);
    }
LABEL_23:
    if ((v14 & 1) == 0)
    {
      uint64_t v5 = (uint64_t)v9;
      goto LABEL_28;
    }
    ++v7;
  }
  while (v7 != v8);
  if (!v5) {
LABEL_26:
  }
    uint64_t v5 = SipUri::anonymousUri((SipUri *)isSipUri);
LABEL_28:
  if (__p)
  {
    unint64_t v20 = __p;
    operator delete(__p);
  }
  return (char *)v5;
}

void sub_1C5666784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipMessage::assertedIdentityList(SipMessage *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::string __p = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v3 = SipMessage::allHeadersWithType<SipPAssertedIdentityHeader>((uint64_t)this, (uint64_t)&__p);
  uint64_t v4 = __p;
  uint64_t v5 = v18;
  while (v4 != v5)
  {
    uint64_t v6 = *v4 + 64;
    char v14 = 0;
    long long v15 = 0;
    uint64_t v16 = 0;
    SipRouteSet::allHops(v6, &v14);
    std::string::size_type v7 = v14;
    BOOL v8 = v15;
    if (v14 != v15)
    {
      unsigned int v9 = *(SipUri **)(a2 + 8);
      do
      {
        uint64_t v10 = *(const SipUri **)v7;
        if ((unint64_t)v9 >= *(void *)(a2 + 16))
        {
          uint64_t v3 = std::vector<SipUri>::__emplace_back_slow_path<SipUri const&>((uint64_t *)a2, v10);
          unsigned int v9 = (SipUri *)v3;
        }
        else
        {
          SipUri::SipUri(v9, v10);
          unsigned int v9 = (SipUri *)((char *)v9 + 408);
          *(void *)(a2 + 8) = v9;
        }
        *(void *)(a2 + 8) = v9;
        v7 += 8;
      }
      while (v7 != v8);
      std::string::size_type v7 = v14;
    }
    if (v7)
    {
      long long v15 = v7;
      operator delete(v7);
    }
    ++v4;
  }
  if (*(void *)a2 == *(void *)(a2 + 8))
  {
    unint64_t v11 = (const SipUri *)SipUri::anonymousUri((SipUri *)v3);
    unint64_t v12 = *(void *)(a2 + 8);
    if (v12 >= *(void *)(a2 + 16))
    {
      uint64_t v13 = std::vector<SipUri>::__emplace_back_slow_path<SipUri const&>((uint64_t *)a2, v11);
    }
    else
    {
      SipUri::SipUri(*(SipUri **)(a2 + 8), v11);
      uint64_t v13 = v12 + 408;
      *(void *)(a2 + 8) = v12 + 408;
    }
    *(void *)(a2 + 8) = v13;
  }
  if (__p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
}

void sub_1C56668EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  v13[1] = v14;
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  std::string __p = v13;
  std::vector<SipUri>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SipUri>::__emplace_back_slow_path<SipUri const&>(uint64_t *a1, const SipUri *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xFAFAFAFAFAFAFAFBLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xA0A0A0A0A0A0A0) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xFAFAFAFAFAFAFAFBLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x50505050505050) {
    unint64_t v9 = 0xA0A0A0A0A0A0A0;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipUri>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = (SipUri *)&v10[408 * v4];
  uint64_t v16 = &v10[408 * v9];
  SipUri::SipUri(v14, a2);
  long long v15 = (char *)v14 + 408;
  std::vector<SipUri>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<SipUri>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1C5666A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SipUri>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  xpc_object_t result = (uint64_t *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (void **)__p;
  std::string __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void *SipMessageEncodingMap::headerPrototype<SipSupportedHeader>(void *a1)
{
  xpc_object_t result = (void *)SipMessageEncodingMap::headerPrototypeWithName(a1, (uint64_t)"Supported");
  if (result)
  {
  }
  return result;
}

void *SipMessageEncodingMap::headerPrototype<SipRequireHeader>(void *a1)
{
  xpc_object_t result = (void *)SipMessageEncodingMap::headerPrototypeWithName(a1, (uint64_t)"Require");
  if (result)
  {
  }
  return result;
}

void *SipMessageEncodingMap::headerPrototype<SipProxyRequireHeader>(void *a1)
{
  xpc_object_t result = (void *)SipMessageEncodingMap::headerPrototypeWithName(a1, (uint64_t)"Proxy-Require");
  if (result)
  {
  }
  return result;
}

void SDPParser::parseSessionSendRecvAttribute(uint64_t *a1)
{
}

void SDPParser::parseSessionSendOnlyAttribute(uint64_t *a1)
{
}

void SDPParser::parseSessionRecvOnlyAttribute(uint64_t *a1)
{
}

void SDPParser::parseSessionInactiveAttribute(uint64_t *a1)
{
}

void IMSSecureNetworkSession::deinitialize(IMSSecureNetworkSession *this)
{
  if (*(void *)this)
  {
    IPSecDBInvalidateSession();
    CFRelease(*(CFTypeRef *)this);
    *(void *)this = 0;
  }
}

uint64_t IMSSecureNetworkSession::initialize(IMSSecureNetworkSession *this)
{
  if (*(void *)this) {
    return 1;
  }
  if (isIPSecLibraryLoaded()) {
    goto LABEL_10;
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "ipsec");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"initializing IPSec library", 26);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (qword_1EBBDC638 != -1) {
    dispatch_once(&qword_1EBBDC638, &__block_literal_global_10);
  }
  if (isIPSecLibraryLoaded())
  {
LABEL_10:
    uint64_t v3 = _MergedGlobals_30(0, @"com.apple.ipTelephony", IPSecDBCallBack, this);
    *(void *)this = v3;
    if (v3) {
      return 1;
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "ipsec");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::error((uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"unable to create IPSec DB", 25);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "ipsec");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v5 = ims::error((uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"unable to load IPSec library.  IPSec won't be working.", 54);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v5 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  return 0;
}

void sub_1C5666F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL isIPSecLibraryLoaded(void)
{
  BOOL result = 0;
  if (VirtualInterfaceAddAddress)
  {
    if (VirtualInterfaceCopyName)
    {
      if (VirtualInterfaceCreateNexus)
      {
        if (VirtualInterfaceUpdateAdHocService)
        {
          if (VirtualInterfaceSetDelegateInterface)
          {
            if (VirtualInterfaceInvalidate)
            {
              if (PolicyAdd)
              {
                if (PolicyDelete)
                {
                  if (PolicyDeleteAll)
                  {
                    if (PolicySetSessionPriority)
                    {
                      if (PolicyCreateSession)
                      {
                        if (PolicyApply)
                        {
                          BOOL result = 0;
                          if (_MergedGlobals_30)
                          {
                            if (off_1EBBDC608
                              && IPSecDBInvalidateSession
                              && qword_1EBBDC610
                              && qword_1EBBDC618
                              && IPSecDBAddLarvalSA
                              && IPSecDBAddSA
                              && IPSecDBUpdateSA
                              && IPSecDBDeleteSA
                              && qword_1EBBDC620)
                            {
                              if (IPSecDBAddPolicy) {
                                return qword_1EBBDC628 != 0;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void IPSecDBCallBack()
{
  std::string::basic_string[abi:ne180100]<0>(v4, "ipsec");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v0 = ims::debug((uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v0 + 8), (uint64_t)"IPSecDBCallBack", 15);
  *(unsigned char *)(v0 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v0 + 64))(v0, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v0 + 17) = 0;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v4, "ipsec");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v1 = ims::debug((uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v1 + 8), (uint64_t)"itemID=", 7);
  *(unsigned char *)(v1 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v1 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v1 + 8), (uint64_t)" notificationType=", 18);
  *(unsigned char *)(v1 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v1 + 17) = 0;
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1C5667258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IMSSecureNetworkSession::flush(IMSSecureNetworkSession *this)
{
  if (!*(void *)this || off_1EBBDC608()) {
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(v5, "ipsec");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::error((uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"flush failed", 12);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  return 0;
}

void sub_1C5667380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZL16loadIPSecLibraryv_block_invoke()
{
  uint64_t v0 = dlopen("/System/Library/Frameworks/NetworkExtension.framework/NetworkExtension", 1);
  if (v0)
  {
    uint64_t v1 = v0;
    std::string::basic_string[abi:ne180100]<0>(v7, "ipsec");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v2 = ims::debug((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"loading IPSec functions", 23);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    _MergedGlobals_30 = dlsym(v1, "NEIPSecDBCreateSession");
    off_1EBBDC608 = dlsym(v1, "NEIPSecDBFlushAll");
    IPSecDBInvalidateuint64_t Session = dlsym(v1, "NEIPSecDBInvalidateSession");
    qword_1EBBDC610 = (uint64_t)dlsym(v1, "NEIPSecDBScheduleWithRunLoop");
    qword_1EBBDC618 = (uint64_t)dlsym(v1, "NEIPSecDBUnScheduleWithRunLoop");
    IPSecDBAddLarvalSA = dlsym(v1, "NEIPSecDBAddLarvalSA");
    IPSecDBAddSA = dlsym(v1, "NEIPSecDBAddSA");
    IPSecDBUpdateSA = dlsym(v1, "NEIPSecDBUpdateSA");
    IPSecDBDeleteSA = (uint64_t (*)(void))dlsym(v1, "NEIPSecDBDeleteSA");
    qword_1EBBDC620 = (uint64_t)dlsym(v1, "NEIPSecDBFlushSAs");
    IPSecDBAddPolicy = dlsym(v1, "NEIPSecDBAddPolicy");
    qword_1EBBDC628 = (uint64_t)dlsym(v1, "NEIPSecDBDeletePolicy");
    VirtualInterfaceAddAddress = dlsym(v1, "NEVirtualInterfaceAddAddress");
    VirtualInterfaceCopyName = dlsym(v1, "NEVirtualInterfaceCopyName");
    VirtualInterfaceCreateNexus = dlsym(v1, "NEVirtualInterfaceCreateNexus");
    VirtualInterfaceUpdateAdHocService = dlsym(v1, "NEVirtualInterfaceUpdateAdHocService");
    VirtualInterfaceSetDelegateInterface = dlsym(v1, "NEVirtualInterfaceSetDelegateInterface");
    VirtualInterfaceSetRankNever = dlsym(v1, "NEVirtualInterfaceSetRankNever");
    VirtualInterfaceInvalidate = (uint64_t (*)(void))dlsym(v1, "NEVirtualInterfaceInvalidate");
    VirtualInterfaceSetMTU = dlsym(v1, "NEVirtualInterfaceSetMTU");
    PolicyAdd = dlsym(v1, "NEPolicyAdd");
    PolicyDelete = dlsym(v1, "NEPolicyDelete");
    PolicyDeleteAll = (uint64_t (*)(void))dlsym(v1, "NEPolicyDeleteAll");
    PolicySetSessionPriority = dlsym(v1, "NEPolicySetSessionPriority");
    PolicyCreateuint64_t Session = dlsym(v1, "NEPolicyCreateSession");
    PolicyApply = (uint64_t (*)(void))dlsym(v1, "NEPolicyApply");
    qword_1EBBDC630 = (uint64_t)dlsym(v1, "NEPolicyLockSessionToProcess");
    std::string::basic_string[abi:ne180100]<0>(v7, "ipsec");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v3 = ims::debug((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"loading IPSec functions -- done!", 32);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    dlclose(v1);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "ipsec");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::error((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"unable to load IPSec library", 28);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_1C566785C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaRTPMap::value@<X0>(SDPMediaRTPMap *this@<X0>, void *a2@<X8>)
{
  uint64_t v15 = 0;
  long long v13 = 0u;
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  memset(v10, 0, sizeof(v10));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  uint64_t v4 = (void *)std::ostream::operator<<();
  char v16 = 32;
  char v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v16, 1);
  int v6 = *((char *)this + 71);
  if (v6 >= 0) {
    char v7 = (char *)this + 48;
  }
  else {
    char v7 = (char *)*((void *)this + 6);
  }
  if (v6 >= 0) {
    uint64_t v8 = *((unsigned __int8 *)this + 71);
  }
  else {
    uint64_t v8 = *((void *)this + 7);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
  if (*((_WORD *)this + 36))
  {
    char v16 = 47;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v16, 1);
    std::ostream::operator<<();
  }
  if (*((unsigned __int16 *)this + 37) >= 2u)
  {
    char v16 = 47;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&v16, 1);
    std::ostream::operator<<();
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10 + 8, a2);
  *(void *)&v10[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v10 + *(void *)(*(void *)&v10[0] - 2std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((void **)this + 4)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v10[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v14);
}

void sub_1C5667A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL SDPMediaRTPMap::valid(SDPMediaRTPMap *this)
{
  if (*((char *)this + 71) < 0) {
    uint64_t v1 = *((void *)this + 7);
  }
  else {
    uint64_t v1 = *((unsigned __int8 *)this + 71);
  }
  return v1 != 0;
}

uint64_t SipAckRetransmitHandler::SipAckRetransmitHandler(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F20DBE78;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.session");
  ImsLogContainer::ImsLogContainer(a1 + 24, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)a1 = &unk_1F20E7570;
  *(void *)(a1 + 24) = &unk_1F20E75D0;
  *(void *)(a1 + 128) = &unk_1F20E7630;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 192));
  *(unsigned char *)(a1 + 336) = 0;
  *(void *)(a1 + 184) = 0;
  char v7 = *(std::__shared_weak_count **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 160);
  *(void *)(a1 + 152) = v7;
  *(void *)(a1 + 160) = v6;
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v10 = *a3;
  uint64_t v9 = a3[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 176);
  *(void *)(a1 + 168) = v10;
  *(void *)(a1 + 176) = v9;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  *(void *)(a1 + 296) = a1 + 128;
  SipSessionInterface::stack(*(std::__shared_weak_count **)a2, &__p);
  *(void *)(a1 + 328) = SipUserAgent::config(*(SipUserAgent **)(__p.__r_.__value_.__r.__words[0] + 144)) + 512;
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  uint64_t v12 = *a3;
  if (*a3)
  {
    long long v13 = *(std::__shared_weak_count **)(v12 + 88);
    if (v13)
    {
      uint64_t v14 = *(void *)(v12 + 80);
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v16 = 0;
      long long v17 = std::__shared_weak_count::lock(v13);
      if (v17) {
        uint64_t v16 = v14;
      }
    }
    else
    {
      uint64_t v16 = 0;
      long long v17 = 0;
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a1 + 48))(a1, &v16, 1);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return a1;
}

void sub_1C5667D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  SipTimerContainer::~SipTimerContainer(v19);
  unint64_t v22 = (std::__shared_weak_count *)*((void *)v17 + 22);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v23 = (std::__shared_weak_count *)*((void *)v17 + 20);
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  unint64_t v24 = (std::__shared_weak_count *)*((void *)v17 + 18);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  ImsLogContainer::~ImsLogContainer(v18);
  SipConnectionUser::~SipConnectionUser(v17);
  _Unwind_Resume(a1);
}

void SipAckRetransmitHandler::~SipAckRetransmitHandler(SipAckRetransmitHandler *this)
{
  *(void *)this = &unk_1F20E7570;
  *((void *)this + 3) = &unk_1F20E75D0;
  *((void *)this + 16) = &unk_1F20E7630;
  uint64_t v2 = (SipAckRetransmitHandler *)((char *)this + 192);
  SipTimerContainer::cancelAllTimers((SipAckRetransmitHandler *)((char *)this + 192));
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  (*(void (**)(SipAckRetransmitHandler *, uint64_t *, uint64_t))(*(void *)this + 48))(this, &v7, 1);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v3 = *((void *)this + 23);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  SipTimerContainer::~SipTimerContainer(v2);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  char v5 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  *((void *)this + 3) = &unk_1F20C9CA0;
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  SipConnectionUser::~SipConnectionUser(this);
}

{
  uint64_t vars8;

  SipAckRetransmitHandler::~SipAckRetransmitHandler(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipAckRetransmitHandler::~SipAckRetransmitHandler(SipAckRetransmitHandler *this)
{
}

{
  SipAckRetransmitHandler::~SipAckRetransmitHandler((SipAckRetransmitHandler *)((char *)this - 128));
}

{
  uint64_t vars8;

  SipAckRetransmitHandler::~SipAckRetransmitHandler((SipAckRetransmitHandler *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipAckRetransmitHandler::~SipAckRetransmitHandler((SipAckRetransmitHandler *)((char *)this - 128));
  JUMPOUT(0x1C878E320);
}

void SipAckRetransmitHandler::loggableName(SipAckRetransmitHandler *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C56681D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a18);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipAckRetransmitHandler::loggableName(SipAckRetransmitHandler *this)
{
}

void SipAckRetransmitHandler::logPrefix(SipAckRetransmitHandler *this, ImsOutStream *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 72))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C56682E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipAckRetransmitHandler::logPrefix(SipAckRetransmitHandler *this, ImsOutStream *a2)
{
}

uint64_t SipAckRetransmitHandler::initialize(int8x8_t *a1, const SipResponse *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int8x8_t v4 = a1[21];
  if (v4)
  {
    if ((*(unsigned int (**)(int8x8_t))(**(void **)&v4 + 24))(v4) == 5)
    {
      uint64_t v7 = (std::__shared_weak_count *)a1[20];
      if (v7)
      {
        uint64_t v8 = std::__shared_weak_count::lock(v7);
        if (v8)
        {
          uint64_t v9 = (void *)a1[19];
          if (v9)
          {
            uint64_t v10 = v9[31];
            if (v10 && (uint64_t v11 = *(void *)(v10 + 216)) != 0) {
              uint64_t v12 = *(SipUserAgent **)(v11 + 136);
            }
            else {
              uint64_t v12 = 0;
            }
            if (*(unsigned char *)(SipUserAgent::config(v12) + 858))
            {
              uint64_t v28 = v9[31];
              uint64_t v29 = v9[32];
              if (v29) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
              }
              SipDialog::createRequestInDialog(v28);
            }
            MatchingAckForResponse = SipRequest::createMatchingAckForResponse(*(SipRequest **)(*(void *)&a1[21] + 296), a2);
            a1[23] = (int8x8_t)MatchingAckForResponse;
            if (MatchingAckForResponse)
            {
              if (*a3) {
                operator new();
              }
              xpc_object_t v31 = (std::__shared_weak_count *)a1[22];
              int8x8_t v30 = a1[23];
              int8x8_t v40 = a1[21];
              unint64_t v41 = v31;
              if (v31) {
                atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              (*(void (**)(void *__return_ptr, void *, int8x8_t, int8x8_t *, void))(*v9 + 96))(v42, v9, v30, &v40, 0);
              ImsLogContainer::logResult((uint64_t)&a1[3], (uint64_t)v42, (uint64_t)v43);
              ImsResult::~ImsResult((ImsResult *)v43);
              ImsResult::~ImsResult((ImsResult *)v42);
              if (v41) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v41);
              }
              int8x8_t v33 = a1[17];
              xpc_object_t v32 = (std::__shared_weak_count *)a1[18];
              if (v32)
              {
                atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              std::string v45 = 0;
              xpc_object_t v34 = operator new(0x20uLL);
              void *v34 = &unk_1F20E76C8;
              v34[1] = a1;
              v34[2] = v33;
              v34[3] = v32;
              std::string v45 = v34;
              SipTimerContainer::startSipTimer(a1 + 24, (uint64_t)&SipTimers::kTimerAckRetransmitTimeout, (uint64_t)v44, 0);
              std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v44);
              a1[42].i8[0] = 0;
              if (v32)
              {
                std::__shared_weak_count::__release_weak(v32);
                std::__shared_weak_count::__release_weak(v32);
              }
              uint64_t v24 = 1;
            }
            else
            {
              int8x8_t v37 = a1[3];
              uint64_t v36 = a1 + 3;
              uint64_t v38 = (*(uint64_t (**)(int8x8_t *))(*(void *)&v37 + 56))(v36);
              (*(void (**)(int8x8_t *, uint64_t))(*(void *)v36 + 16))(v36, v38);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"couldn't create ACK", 19);
              *(unsigned char *)(v38 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              uint64_t v24 = 0;
              *(unsigned char *)(v38 + 17) = 0;
            }
LABEL_33:
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
            return v24;
          }
        }
      }
      else
      {
        uint64_t v8 = 0;
      }
      int8x8_t v26 = a1[3];
      uint64_t v25 = a1 + 3;
      uint64_t v27 = (*(uint64_t (**)(int8x8_t *))(*(void *)&v26 + 56))(v25);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)v25 + 16))(v25, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"no session specified", 20);
      *(unsigned char *)(v27 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      uint64_t v24 = 0;
      *(unsigned char *)(v27 + 17) = 0;
      if (!v8) {
        return v24;
      }
      goto LABEL_33;
    }
    int8x8_t v20 = a1[3];
    uint64_t v19 = a1 + 3;
    uint64_t v15 = (*(uint64_t (**)(int8x8_t *))(*(void *)&v20 + 56))(v19);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v19 + 16))(v19, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"transaction is in state ", 24);
    *(unsigned char *)(v15 + 17) = 0;
    int8x8_t v21 = v19[18];
    uint64_t v22 = (*(uint64_t (**)(int8x8_t))(**(void **)&v21 + 24))(v21);
    uint64_t v23 = (*(uint64_t (**)(int8x8_t, uint64_t))(**(void **)&v21 + 16))(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 32))(v15, v23);
    uint64_t v16 = *(void **)(v15 + 8);
    long long v17 = ", not in TerminationPending state";
    uint64_t v18 = 33;
  }
  else
  {
    int8x8_t v14 = a1[3];
    long long v13 = a1 + 3;
    uint64_t v15 = (*(uint64_t (**)(int8x8_t *))(*(void *)&v14 + 56))(v13);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v13 + 16))(v13, v15);
    uint64_t v16 = *(void **)(v15 + 8);
    long long v17 = "no transaction specified";
    uint64_t v18 = 24;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
  *(unsigned char *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  uint64_t v24 = 0;
  *(unsigned char *)(v15 + 17) = 0;
  return v24;
}

void sub_1C5668918(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipAckRetransmitHandler::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = operator==(a2, (uint64_t)&SipTimers::kTimerAckRetransmitTimeout);
  if (result)
  {
    *(unsigned char *)(a1 + 336) = 1;
    uint64_t result = *(void *)(a1 + 168);
    if (result)
    {
      int8x8_t v4 = *(uint64_t (**)(void))(*(void *)result + 32);
      return v4();
    }
  }
  return result;
}

uint64_t SipAckRetransmitHandler::retransmitAck(SipAckRetransmitHandler *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  int8x8_t v4 = v3;
  uint64_t v5 = 0;
  if (*((void *)this + 21))
  {
    uint64_t v6 = *((void *)this + 19);
    if (v6)
    {
      uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 22);
      uint64_t v9 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *__return_ptr))(*(void *)v6 + 96))(v10);
      ImsLogContainer::logResult((uint64_t)this + 24, (uint64_t)v10, (uint64_t)v11);
      uint64_t v5 = (*(unsigned int (**)(uint64_t, void))(*(void *)v12 + 24))(v12, v13) ^ 1;
      ImsResult::~ImsResult((ImsResult *)v11);
      ImsResult::~ImsResult((ImsResult *)v10);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v5;
}

void sub_1C5668B40(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  ImsResult::~ImsResult((ImsResult *)va1);
  ImsResult::~ImsResult((ImsResult *)va);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

uint64_t SipAckRetransmitHandler::userName(SipAckRetransmitHandler *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 72))();
}

uint64_t SipAckRetransmitHandler::completed(SipAckRetransmitHandler *this)
{
  return *((unsigned __int8 *)this + 336);
}

void *std::__function::__func<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0,std::allocator<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E76C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0,std::allocator<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20E76C8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0,std::allocator<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20E76C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0,std::allocator<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20E76C8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0,std::allocator<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0,std::allocator<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0,std::allocator<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 56))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5668DFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0,std::allocator<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0,std::allocator<SipAckRetransmitHandler::initialize(SipResponse const&,std::shared_ptr<SDPModel>)::$_0>,void ()(std::string &)>::target_type()
{
}

void SDPOrigin::toStream(SDPOrigin *this, ImsOutStream *a2)
{
  int8x8_t v4 = (void *)*((void *)a2 + 1);
  char v9 = 111;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v9, 1);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v5 = (void *)*((void *)a2 + 1);
  char v10 = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v10, 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 72);
  uint64_t v6 = (void *)*((void *)a2 + 1);
  char v11 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v11, 1);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v7 = (void *)*((void *)a2 + 1);
  char v12 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v12, 1);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v8 = (void *)*((void *)a2 + 1);
  char v13 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v13, 1);
  *((unsigned char *)a2 + 17) = 0;
  SDPConnection::valueToStream((SDPOrigin *)((char *)this + 16), a2);
}

BOOL SDPOrigin::valid(SDPOrigin *this)
{
  if (!*((unsigned char *)this + 8)) {
    return 0;
  }
  uint64_t v1 = *((unsigned __int8 *)this + 95);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *((void *)this + 10);
  }
  if (!v1) {
    return 0;
  }
  if (*((char *)this + 63) < 0)
  {
    if (!*((void *)this + 6)) {
      return 0;
    }
  }
  else if (!*((unsigned char *)this + 63))
  {
    return 0;
  }
  if (*((_DWORD *)this + 8)) {
    return *((_DWORD *)this + 7) != 0;
  }
  return 0;
}

void SipContactParam::clear(SipContactParam *this)
{
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  *((void *)this + 53) = (char *)this + 432;
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 464, *((void **)this + 59));
  *((void *)this + 59) = 0;
  *((void *)this + 60) = 0;
  *((void *)this + 58) = (char *)this + 472;
}

void SipContactParam::setAdditionalFeatureTagsForService(uint64_t a1, long long *a2, CFTypeRef cf)
{
  v12[0] = &unk_1F20E38B0;
  v12[1] = cf;
  if (cf) {
    CFRetain(cf);
  }
  v12[0] = &unk_1F20E3A10;
  long long v11 = 0uLL;
  char v10 = &v11;
  ims::CFDictionary::asStringMap((uint64_t)v12, (uint64_t)&v10, (uint64_t)&v7);
  char v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)v8 + 24))(v8, v9);
  ImsResult::~ImsResult((ImsResult *)&v7);
  if ((v5 & 1) == 0)
  {
    uint64_t v7 = a2;
    uint64_t v6 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 464), (void **)a2, (uint64_t)&std::piecewise_construct, &v7)+ 7);
    if (v6 != (uint64_t **)&v10) {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v6, v10, &v11);
    }
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v10, (void *)v11);
  ims::CFType::~CFType((ims::CFType *)v12);
}

void sub_1C5669184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a19, a20);
  ims::CFType::~CFType((ims::CFType *)(v20 - 56));
  _Unwind_Resume(a1);
}

void SipContactParam::setAdditionalFeatureTags(SipContactParam *this, CFTypeRef cf)
{
  v10[0] = &unk_1F20E38B0;
  v10[1] = cf;
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v9 = 0;
  v10[0] = &unk_1F20E3A10;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  ims::CFDictionary::keysAsStrings((uint64_t)v10, (uint64_t)&v7, (const void *)0x8000100);
  uint64_t v3 = v7;
  for (i = v8; v3 != i; uint64_t v3 = (long long *)((char *)v3 + 24))
  {
    char v5 = (long long **)&unk_1F20E3A10;
    CFTypeRef cfa = 0;
    if (ims::CFDictionary::getValue<ims::CFDictionary>((uint64_t)v10, (char *)v3, (uint64_t)&v5)) {
      SipContactParam::setAdditionalFeatureTagsForService((uint64_t)this, v3, cfa);
    }
    ims::CFType::~CFType((ims::CFType *)&v5);
  }
  char v5 = &v7;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v5);
  ims::CFType::~CFType((ims::CFType *)v10);
}

void sub_1C56692C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  va_copy((va_list)v3, va1);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  ims::CFType::~CFType((ims::CFType *)va2);
  _Unwind_Resume(a1);
}

uint64_t ims::CFDictionary::getValue<ims::CFDictionary>(uint64_t a1, char *a2, uint64_t a3)
{
  ims::CFString::CFString(v7, a2, 1u);
  uint64_t v5 = ims::CFDictionary::getValue<ims::CFDictionary>(a1, (uint64_t)v7, a3);
  ims::CFType::~CFType((ims::CFType *)v7);
  return v5;
}

void sub_1C5669354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

ImsOutStream *SipContactParam::toStream(SipContactParam *this, ImsOutStream *a2)
{
  long long v20 = 0u;
  long long v19 = 0u;
  uint64_t v18 = (void (**)(void **, ImsOutStream *))&unk_1F20B37B0;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)&v19, *((void ***)this + 53), (void **)this + 54);
  BYTE9(v20) = 1;
  BYTE8(v20) = *((unsigned char *)this + 448);
  BambiServices::addServiceParameters((BambiServices *)*((unsigned int *)this + 114), (uint64_t)&v18, v4);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  BambiServices::nameArrayForServiceMask(*((_DWORD *)this + 114), (uint64_t)&v15);
  uint64_t v5 = v15;
  for (uint64_t i = v16; v5 != i; v5 += 3)
  {
    uint64_t v7 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)this + 464, v5);
    if ((void **)((char *)this + 472) != v7)
    {
      uint64_t v8 = (void **)v7[7];
      uint64_t v9 = v7 + 8;
      if (v8 != v7 + 8)
      {
        do
        {
          int8x8_t v21 = (void ***)(v8 + 4);
          char v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v19, v8 + 4, (uint64_t)&std::piecewise_construct, (long long **)&v21);
          std::string::operator=((std::string *)(v10 + 7), (const std::string *)(v8 + 7));
          long long v11 = (void **)v8[1];
          if (v11)
          {
            do
            {
              char v12 = v11;
              long long v11 = (void **)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              char v12 = (void **)v8[2];
              BOOL v13 = *v12 == v8;
              uint64_t v8 = v12;
            }
            while (!v13);
          }
          uint64_t v8 = v12;
        }
        while (v12 != v9);
      }
    }
  }
  SipUri::toStream((uint64_t)this + 8, (uint64_t)a2, 2 * ((void)v20 == 0));
  v18[2]((void **)&v18, a2);
  int8x8_t v21 = &v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  uint64_t v18 = (void (**)(void **, ImsOutStream *))&unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v19, *((void **)&v19 + 1));
  return a2;
}

void sub_1C566954C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v15, a15);
  _Unwind_Resume(a1);
}

ImsOutStream *SipContactParamList::toStream(SipContactParamList *this, ImsOutStream *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (*((void *)this + 2) != v3)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      if (v6)
      {
        uint64_t v7 = (void *)*((void *)a2 + 1);
        char v9 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v9, 1);
        *((unsigned char *)a2 + 17) = 0;
        uint64_t v3 = *((void *)this + 1);
      }
      (*(void (**)(uint64_t, ImsOutStream *))(*(void *)(v3 + v5) + 16))(v3 + v5, a2);
      ++v6;
      uint64_t v3 = *((void *)this + 1);
      v5 += 488;
    }
    while (v6 < 0x4FBCDA3AC10C9715 * ((*((void *)this + 2) - v3) >> 3));
  }
  return a2;
}

BOOL SipContactParamList::fromString(uint64_t *a1, std::string *a2)
{
  std::string::size_type v3 = 0;
  memset(&__str, 0, sizeof(__str));
  long long v11 = a1 + 1;
  while (1)
  {
    std::string::size_type v3 = ims::nextTokenQ(a2, v3, &__str, 0x2Cu);
    if (v3 == -1) {
      break;
    }
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v15 = 0u;
    memset(v14, 0, sizeof(v14));
    BOOL v13 = &unk_1F20C3100;
    SipUri::SipUri((SipUri *)v14);
    *((void *)&v16 + 1) = 0;
    *(void *)&long long v17 = 0;
    *((void *)&v15 + 1) = &unk_1F20B37B0;
    *(void *)&long long v16 = (char *)&v16 + 8;
    WORD4(v17) = 256;
    long long v19 = 0uLL;
    *((void *)&v18 + 1) = &v19;
    LODWORD(v18) = 0;
    std::string::size_type UriHeaderParameterMarker = SipUriHeader::findUriHeaderParameterMarker(&__str);
    if (UriHeaderParameterMarker == -1)
    {
      if ((SipUri::fromString((uint64_t)v14, &__str) & 1) == 0) {
        goto LABEL_16;
      }
    }
    else
    {
      std::string::basic_string(&v21, &__str, 0, UriHeaderParameterMarker, (std::allocator<char> *)v22);
      char v5 = SipUri::fromString((uint64_t)v14, &v21);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if ((v5 & 1) == 0) {
        goto LABEL_16;
      }
      std::string::basic_string(&v21, &__str, UriHeaderParameterMarker + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v22);
      char v7 = SipParameterMap::fromString((uint64_t)&v15 + 8, &v21, 0, 0);
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if ((v7 & 1) == 0)
      {
LABEL_16:
        BOOL v13 = &unk_1F20C3100;
        std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)&v18 + 8, (void *)v19);
        *((void *)&v15 + 1) = &unk_1F20B37B0;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v16, *((void **)&v16 + 1));
        SipUri::~SipUri((SipUri *)v14);
        break;
      }
      LODWORD(v18) = BambiServices::serviceMaskFromParameters((BambiServices *)((char *)&v15 + 8), v6);
    }
    unint64_t v8 = a1[2];
    if (v8 >= a1[3])
    {
      uint64_t v9 = std::vector<SipContactParam>::__push_back_slow_path<SipContactParam const&>(v11, (uint64_t)&v13);
    }
    else
    {
      std::construct_at[abi:ne180100]<SipContactParam,SipContactParam const&,SipContactParam*>(a1[2], (uint64_t)&v13);
      uint64_t v9 = v8 + 488;
      a1[2] = v8 + 488;
    }
    a1[2] = v9;
    BOOL v13 = &unk_1F20C3100;
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)&v18 + 8, (void *)v19);
    *((void *)&v15 + 1) = &unk_1F20B37B0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v16, *((void **)&v16 + 1));
    SipUri::~SipUri((SipUri *)v14);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v3 == -1;
}

void sub_1C56698F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *(void *)(v6 + 16) = v7;
  SipContactParam::~SipContactParam((SipContactParam *)va);
  if (*(char *)(v8 - 121) < 0) {
    operator delete(*(void **)(v8 - 144));
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<SipContactParam>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SipContactParam const*>,std::__wrap_iter<SipContactParam const*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = (a2 - *a1) / 488;
  uint64_t v7 = *a1 + 488 * v6;
  if (a5 <= 0) {
    return v7;
  }
  uint64_t v9 = a3;
  uint64_t v12 = (uint64_t)(a1 + 2);
  uint64_t v11 = a1[2];
  unint64_t v13 = a1[1];
  if (0x4FBCDA3AC10C9715 * ((uint64_t)(v11 - v13) >> 3) >= a5)
  {
    uint64_t v49 = (a2 - *a1) / 488;
    if (0x4FBCDA3AC10C9715 * ((uint64_t)(v13 - v7) >> 3) >= a5)
    {
      uint64_t v48 = a3 + 488 * a5;
      uint64_t v21 = a1[1];
LABEL_28:
      uint64_t v31 = 488 * a5;
      unint64_t v32 = v21 - 488 * a5;
      uint64_t v33 = v21;
      if (v32 < v13)
      {
        unint64_t v34 = v32;
        uint64_t v33 = v21;
        do
        {
          std::construct_at[abi:ne180100]<SipContactParam,SipContactParam,SipContactParam*>(v33, v34);
          v34 += 488;
          v33 += 488;
        }
        while (v34 < v13);
      }
      a1[1] = v33;
      if (v21 != v7 + v31)
      {
        uint64_t v35 = 0;
        uint64_t v36 = -8 * ((v21 - (v7 + v31)) >> 3);
        uint64_t v37 = v5 + 488 * v49 + 8 * ((v21 - (v7 + v31)) >> 3);
        uint64_t v50 = v5 + 8 * ((v21 - (v7 + v31)) >> 3) + 488 * v49 - 56;
        do
        {
          uint64_t v38 = v21 + v35;
          uint64_t v39 = v32 + v35;
          SipUri::operator=((SipUri *)(v21 + v35 - 480), v32 + v35 - 480);
          if (v32 != v21) {
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(v38 - 64), *(long long **)(v39 - 64), (long long *)(v50 + v35));
          }
          unint64_t v41 = *(void **)(v38 - 16);
          int8x8_t v40 = (void *)(v38 - 16);
          *((unsigned char *)v40 - 24) = *(unsigned char *)(v39 - 40);
          *((_DWORD *)v40 - 4) = *(_DWORD *)(v39 - 32);
          std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)(v40 - 1), v41);
          *(v40 - 1) = *(void *)(v39 - 24);
          uint64_t v42 = *(void *)(v37 + v35 - 16);
          *int8x8_t v40 = v42;
          uint64_t v43 = *(void *)(v37 + v35 - 8);
          v40[1] = v43;
          if (v43)
          {
            *(void *)(v42 + 16) = v40;
            *(void *)(v39 - 24) = v39 - 16;
            *(void *)(v37 + v35 - 16) = 0;
            *(void *)(v37 + v35 - 8) = 0;
          }
          else
          {
            *(v40 - 1) = v40;
          }
          v35 -= 488;
        }
        while (v36 != v35);
      }
      if (v48 != v9)
      {
        uint64_t v44 = 0;
        do
        {
          uint64_t v45 = v7 + v44;
          uint64_t v46 = v9 + v44;
          SipUri::operator=((SipUri *)(v7 + v44 + 8), v9 + v44 + 8);
          if (v9 != v7)
          {
            std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(v45 + 424), *(long long **)(v46 + 424), (long long *)(v46 + 432));
            *(unsigned char *)(v45 + 448) = *(unsigned char *)(v46 + 448);
            *(_DWORD *)(v45 + 456) = *(_DWORD *)(v46 + 456);
            std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,std::string>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *> *,long>>((uint64_t **)(v45 + 464), *(long long **)(v46 + 464), (long long *)(v46 + 472));
          }
          v44 += 488;
        }
        while (v9 + v44 != v48);
      }
      return v7;
    }
    uint64_t v19 = a3 + 8 * ((uint64_t)(v13 - v7) >> 3);
    if (v19 == a4)
    {
      uint64_t v21 = a1[1];
    }
    else
    {
      uint64_t v20 = 0;
      do
      {
        std::construct_at[abi:ne180100]<SipContactParam,SipContactParam const&,SipContactParam*>(v13 + v20, v19 + v20);
        v20 += 488;
      }
      while (v19 + v20 != a4);
      uint64_t v21 = v13 + v20;
    }
    a1[1] = v21;
    if ((uint64_t)(v13 - v7) >= 1)
    {
      uint64_t v48 = v19;
      goto LABEL_28;
    }
    return v7;
  }
  unint64_t v14 = a5 + 0x4FBCDA3AC10C9715 * ((uint64_t)(v13 - v5) >> 3);
  if (v14 > 0x864B8A7DE6D1D6) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v15 = 0x4FBCDA3AC10C9715 * ((v11 - v5) >> 3);
  if (2 * v15 > v14) {
    unint64_t v14 = 2 * v15;
  }
  if (v15 >= 0x4325C53EF368EBLL) {
    unint64_t v16 = 0x864B8A7DE6D1D6;
  }
  else {
    unint64_t v16 = v14;
  }
  xpc_object_t v55 = a1 + 2;
  if (v16) {
    long long v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipContactParam>>((uint64_t)(a1 + 2), v16);
  }
  else {
    long long v17 = 0;
  }
  uint64_t v22 = (uint64_t)&v17[488 * v6];
  xpc_object_t v51 = v17;
  uint64_t v52 = v22;
  uint64_t v53 = v22;
  std::string v54 = &v17[488 * v16];
  uint64_t v23 = 488 * a5;
  uint64_t v24 = v22 + 488 * a5;
  do
  {
    std::construct_at[abi:ne180100]<SipContactParam,SipContactParam const&,SipContactParam*>(v22, v9);
    v22 += 488;
    v9 += 488;
    v23 -= 488;
  }
  while (v23);
  uint64_t v53 = v24;
  uint64_t v25 = v52;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipContactParam>,std::reverse_iterator<SipContactParam*>,std::reverse_iterator<SipContactParam*>,std::reverse_iterator<SipContactParam*>>(v12, v7, v7, *a1, *a1, v52, v52);
  uint64_t v52 = v26;
  uint64_t v27 = a1[1];
  if (v27 != v7)
  {
    uint64_t v28 = 0;
    do
    {
      std::construct_at[abi:ne180100]<SipContactParam,SipContactParam const&,SipContactParam*>(v24 + v28, v7 + v28);
      v28 += 488;
    }
    while (v7 + v28 != v27);
    uint64_t v26 = v52;
    uint64_t v7 = a1[1];
    v24 += v28;
  }
  uint64_t v29 = *a1;
  *a1 = v26;
  a1[1] = v24;
  uint64_t v30 = a1[2];
  a1[2] = (uint64_t)v54;
  uint64_t v53 = v7;
  std::string v54 = (char *)v30;
  xpc_object_t v51 = (char *)v29;
  uint64_t v52 = v29;
  std::__split_buffer<SipContactParam>::~__split_buffer((uint64_t)&v51);
  return v25;
}

void sub_1C5669D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<SipContactParam>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C5669F60(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t ims::CFDictionary::getValue<ims::CFDictionary>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFDictionaryRef v3 = *(const __CFDictionary **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  Value = CFDictionaryGetValue(v3, *(const void **)(a2 + 8));
  if (!Value) {
    return 0;
  }
  uint64_t v6 = Value;
  CFTypeID v7 = CFGetTypeID(Value);
  if (v7 != (*(uint64_t (**)(uint64_t))(*(void *)a3 + 32))(a3)) {
    return 0;
  }
  uint64_t v8 = 1;
  (*(void (**)(uint64_t, const void *, uint64_t))(*(void *)a3 + 48))(a3, v6, 1);
  return v8;
}

void ims::analytics::MessageSipOptionsEvent::create(uint64_t a1@<X0>, void *a2@<X8>)
{
  int8x8_t v4 = operator new(0x90uLL);
  v4[1] = 0;
  std::locale v4[2] = 0;
  void *v4 = &unk_1F20E7790;
  v4[3] = &unk_1F20E78C8;
  std::string::basic_string[abi:ne180100]<0>(&v55, "ims.ca.messagesipoptionsevent");
  ImsLogContainer::ImsLogContainer((uint64_t)(v4 + 4), &v55);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  v4[3] = &unk_1F20E77E0;
  _OWORD v4[4] = &unk_1F20E7818;
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v6 = v5;
  CFTypeID v7 = v4 + 17;
  if (v5)
  {
    *CFTypeID v7 = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    *CFTypeID v7 = v6;
    if (!v6)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_10;
    }
  }
  if (MEMORY[0x1C878F160](v6) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v6);
    goto LABEL_11;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_10:
  *CFTypeID v7 = v8;
LABEL_11:
  xpc_release(v6);
  xpc_object_t v53 = xpc_BOOL_create(*(unsigned char *)a1);
  if (!v53) {
    xpc_object_t v53 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_StandaloneMsg";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v53, &v54);
  xpc_release(v54);
  xpc_object_t v54 = 0;
  xpc_release(v53);
  xpc_object_t v53 = 0;
  xpc_object_t v51 = xpc_BOOL_create(*(unsigned char *)(a1 + 1));
  if (!v51) {
    xpc_object_t v51 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_StandaloneLargeMsg";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v51, &v52);
  xpc_release(v52);
  xpc_object_t v52 = 0;
  xpc_release(v51);
  xpc_object_t v51 = 0;
  xpc_object_t v49 = xpc_BOOL_create(*(unsigned char *)(a1 + 2));
  if (!v49) {
    xpc_object_t v49 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_StandaloneDeferred";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v49, &v50);
  xpc_release(v50);
  xpc_object_t v50 = 0;
  xpc_release(v49);
  xpc_object_t v49 = 0;
  xpc_object_t v47 = xpc_BOOL_create(*(unsigned char *)(a1 + 3));
  if (!v47) {
    xpc_object_t v47 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_StandalonePagerLarge";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v47, &v48);
  xpc_release(v48);
  xpc_object_t v48 = 0;
  xpc_release(v47);
  xpc_object_t v47 = 0;
  xpc_object_t v45 = xpc_BOOL_create(*(unsigned char *)(a1 + 4));
  if (!v45) {
    xpc_object_t v45 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_ChatSession";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v45, &v46);
  xpc_release(v46);
  xpc_object_t v46 = 0;
  xpc_release(v45);
  xpc_object_t v45 = 0;
  xpc_object_t v43 = xpc_BOOL_create(*(unsigned char *)(a1 + 5));
  if (!v43) {
    xpc_object_t v43 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_FiletransferFtsms";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v43, &v44);
  xpc_release(v44);
  xpc_object_t v44 = 0;
  xpc_release(v43);
  xpc_object_t v43 = 0;
  xpc_object_t v41 = xpc_BOOL_create(*(unsigned char *)(a1 + 6));
  if (!v41) {
    xpc_object_t v41 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_FiletransferFtHTTP";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v41, &v42);
  xpc_release(v42);
  xpc_object_t v42 = 0;
  xpc_release(v41);
  xpc_object_t v41 = 0;
  xpc_object_t v39 = xpc_BOOL_create(*(unsigned char *)(a1 + 7));
  if (!v39) {
    xpc_object_t v39 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_Geopush";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v39, &v40);
  xpc_release(v40);
  xpc_object_t v40 = 0;
  xpc_release(v39);
  xpc_object_t v39 = 0;
  xpc_object_t v37 = xpc_BOOL_create(*(unsigned char *)(a1 + 8));
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_Geosms";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v37, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v37);
  xpc_object_t v37 = 0;
  xpc_object_t v35 = xpc_BOOL_create(*(unsigned char *)(a1 + 9));
  if (!v35) {
    xpc_object_t v35 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_GeoHTTP";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v35, &v36);
  xpc_release(v36);
  xpc_object_t v36 = 0;
  xpc_release(v35);
  xpc_object_t v35 = 0;
  xpc_object_t v33 = xpc_BOOL_create(*(unsigned char *)(a1 + 10));
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_Chatbot";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v33, &v34);
  xpc_release(v34);
  xpc_object_t v34 = 0;
  xpc_release(v33);
  xpc_object_t v33 = 0;
  xpc_object_t v31 = xpc_BOOL_create(*(unsigned char *)(a1 + 11));
  if (!v31) {
    xpc_object_t v31 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_ChatbotSA";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v31, &v32);
  xpc_release(v32);
  xpc_object_t v32 = 0;
  xpc_release(v31);
  xpc_object_t v31 = 0;
  xpc_object_t v29 = xpc_BOOL_create(*(unsigned char *)(a1 + 12));
  if (!v29) {
    xpc_object_t v29 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_Cpimext";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v29, &v30);
  xpc_release(v30);
  xpc_object_t v30 = 0;
  xpc_release(v29);
  xpc_object_t v29 = 0;
  long long v9 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_45;
    }
    long long v9 = *(const char **)v9;
  }
  else if (!*(unsigned char *)(a1 + 39))
  {
    goto LABEL_45;
  }
  xpc_object_t v27 = xpc_string_create(v9);
  if (!v27) {
    xpc_object_t v27 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"chatbotversion";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v27, &v28);
  xpc_release(v28);
  xpc_object_t v28 = 0;
  xpc_release(v27);
  xpc_object_t v27 = 0;
LABEL_45:
  xpc_object_t v25 = xpc_BOOL_create(*(unsigned char *)(a1 + 40));
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_DataOff";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v25, &v26);
  xpc_release(v26);
  xpc_object_t v26 = 0;
  xpc_release(v25);
  xpc_object_t v25 = 0;
  xpc_object_t v23 = xpc_BOOL_create(*(unsigned char *)(a1 + 41));
  if (!v23) {
    xpc_object_t v23 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_success";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v23, &v24);
  xpc_release(v24);
  xpc_object_t v24 = 0;
  xpc_release(v23);
  xpc_object_t v23 = 0;
  int64_t v10 = *(unsigned int *)(a1 + 44);
  if (v10)
  {
    xpc_object_t v21 = xpc_int64_create(v10);
    if (!v21) {
      xpc_object_t v21 = xpc_null_create();
    }
    v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
    v55.__r_.__value_.__l.__size_ = (std::string::size_type)"sip_error_code";
    xpc::dict::object_proxy::operator=((uint64_t)&v55, &v21, &v22);
    xpc_release(v22);
    xpc_object_t v22 = 0;
    xpc_release(v21);
    xpc_object_t v21 = 0;
  }
  xpc_object_t v19 = xpc_int64_create(*(unsigned int *)(a1 + 48));
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"delay";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v19, &v20);
  xpc_release(v20);
  xpc_object_t v20 = 0;
  xpc_release(v19);
  xpc_object_t v19 = 0;
  xpc_object_t v17 = xpc_int64_create(*(unsigned int *)(a1 + 48));
  if (!v17) {
    xpc_object_t v17 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"delay";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v17, &v18);
  xpc_release(v18);
  xpc_object_t v18 = 0;
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_object_t v15 = xpc_BOOL_create(*(unsigned char *)(a1 + 52));
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_push";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v15, &v16);
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_release(v15);
  xpc_object_t v15 = 0;
  xpc_object_t v13 = xpc_BOOL_create(*(unsigned char *)(a1 + 53));
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
  v55.__r_.__value_.__l.__size_ = (std::string::size_type)"is_ChatbotRole";
  xpc::dict::object_proxy::operator=((uint64_t)&v55, &v13, &v14);
  xpc_release(v14);
  xpc_object_t v14 = 0;
  xpc_release(v13);
  xpc_object_t v13 = 0;
  if (*(unsigned char *)(a1 + 60))
  {
    xpc_object_t v11 = xpc_int64_create(*(unsigned int *)(a1 + 56));
    if (!v11) {
      xpc_object_t v11 = xpc_null_create();
    }
    v55.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 17);
    v55.__r_.__value_.__l.__size_ = (std::string::size_type)"retry_after";
    xpc::dict::object_proxy::operator=((uint64_t)&v55, &v11, &v12);
    xpc_release(v12);
    xpc_object_t v12 = 0;
    xpc_release(v11);
  }
  *a2 = v4 + 3;
  a2[1] = v4;
}

void sub_1C566A9B0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 65) < 0) {
    operator delete(*(void **)(v2 - 88));
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<anonymous namespace'::MessageSipOptionsEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E7790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::MessageSipOptionsEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E7790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::MessageSipOptionsEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::MessageSipOptionsEventImpl::~MessageSipOptionsEventImpl(_anonymous_namespace_::MessageSipOptionsEventImpl *this)
{
  *(void *)this = &unk_1F20E77E0;
  *((void *)this + 1) = &unk_1F20E7818;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20E77E0;
  *((void *)this + 1) = &unk_1F20E7818;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  JUMPOUT(0x1C878E320);
}

xpc_object_t anonymous namespace'::MessageSipOptionsEventImpl::getDict@<X0>(_anonymous_namespace_::MessageSipOptionsEventImpl *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  *a2 = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void *anonymous namespace'::MessageSipOptionsEventImpl::getName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "RCSMessageSIPOptions");
}

void non-virtual thunk to'anonymous namespace'::MessageSipOptionsEventImpl::~MessageSipOptionsEventImpl(_anonymous_namespace_::MessageSipOptionsEventImpl *this)
{
  *((void *)this - 1) = &unk_1F20E77E0;
  *(void *)this = &unk_1F20E7818;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *((void *)this - 1) = &unk_1F20E77E0;
  *(void *)this = &unk_1F20E7818;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1C878E320);
}

void *anonymous namespace'::sRegistrationStateNames(_anonymous_namespace_ *this)
{
  {
  }
}

void sub_1C566AE54(_Unwind_Exception *a1)
{
}

_anonymous_namespace_ *operator<<(_anonymous_namespace_ *a1, unsigned int *a2)
{
  (*(void (**)(_anonymous_namespace_ *, std::string *))(*(void *)a1 + 40))(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_1C566AEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_anonymous_namespace_ *SipRegistrationState::stateWithName(_anonymous_namespace_ *result, unsigned __int8 *a2)
{
  CFDictionaryRef v3 = (unsigned int *)result;
  for (unsigned int i = 0; ; ++i)
  {
    if (*((char *)v5 + 23) < 0) {
      break;
    }
    if (!*((unsigned char *)v5 + 23)) {
      goto LABEL_23;
    }
LABEL_6:
    uint64_t v6 = a2[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = a2[23];
    }
    else {
      uint64_t v7 = *((void *)a2 + 1);
    }
    uint64_t v8 = *((unsigned __int8 *)v5 + 23);
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = v5[1];
    }
    if (v7 == v8)
    {
      if (v9 >= 0) {
      else
      }
        int64_t v10 = (unsigned __int8 *)*v5;
      if ((v6 & 0x80) != 0)
      {
        xpc_object_t result = (_anonymous_namespace_ *)memcmp(*(const void **)a2, v10, *((void *)a2 + 1));
        if (!result) {
          goto LABEL_24;
        }
      }
      else
      {
        if (!a2[23]) {
          goto LABEL_24;
        }
        xpc_object_t v11 = a2;
        while (*v11 == *v10)
        {
          ++v11;
          ++v10;
          if (!--v6) {
            goto LABEL_24;
          }
        }
      }
    }
  }
  if (v5[1]) {
    goto LABEL_6;
  }
LABEL_23:
  unsigned int i = 0;
LABEL_24:
  unsigned int *v3 = i;
  return result;
}

uint64_t SipContact::SipContact(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F20E7900;
  *(void *)(a1 + 12) = 0;
  int8x8_t v4 = (_DWORD *)(a1 + 12);
  *(void *)(a1 + 28) = 0;
  *(void *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  SipUri::SipUri((SipUri *)(a1 + 40));
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 464) = &unk_1F20B37B0;
  *(void *)(a1 + 472) = a1 + 480;
  *(_WORD *)(a1 + 496) = 256;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 448) = a2;
  if (v4 != (_DWORD *)&SipRegistrationState::kStateUnknown) {
    _DWORD *v4 = 0;
  }
  *(_DWORD *)(a1 + 456) = -1;
  *(_DWORD *)(a1 + 504) = 0;
  return a1;
}

void sub_1C566B0C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*(void **)(v1 + 16));
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipContact::SipContact(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 12) = 0;
  uint64_t v6 = (_DWORD *)(a1 + 12);
  *(void *)a1 = &unk_1F20E7900;
  *(void *)(a1 + 28) = 0;
  uint64_t v7 = (std::string *)(a1 + 16);
  uint64_t v8 = (SipUri *)(a1 + 40);
  *(void *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  SipUri::SipUri((SipUri *)(a1 + 40));
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 464) = &unk_1F20B37B0;
  *(void *)(a1 + 472) = a1 + 480;
  *(_WORD *)(a1 + 496) = 256;
  *(void *)(a1 + 448) = a3;
  SipUri::operator=(v8, a2 + 40);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (a1 != a2) {
    *uint64_t v6 = *(_DWORD *)(a2 + 12);
  }
  std::string::operator=(v7, (const std::string *)(a2 + 16));
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  if (a1 != a2) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t **)(a1 + 472), *(long long **)(a2 + 472), (long long *)(a2 + 480));
  }
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  *(_DWORD *)(a1 + 504) = *(_DWORD *)(a2 + 504);
  return a1;
}

void sub_1C566B20C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *SipContact::log(SipContact *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  ", 2);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(char *, ImsOutStream *))(*((void *)this + 5) + 40))((char *)this + 40, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" id=", 4);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" state=", 7);
  *((unsigned char *)a2 + 17) = 0;
  operator<<(a2, (unsigned int *)this + 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" expires=", 9);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  if (*((void *)this + 61))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" params=", 8);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(char *, ImsOutStream *))(*((void *)this + 58) + 16))((char *)this + 464, a2);
  }
  if (*((_DWORD *)this + 126))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" services=", 10);
    *((unsigned char *)a2 + 17) = 0;
    int v4 = *((_DWORD *)this + 126);
    std::string::basic_string[abi:ne180100]<0>(&v6, ",");
    BambiServices::namesForServiceMask(v4, __p);
    (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 32))(a2, __p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (v7 < 0) {
      operator delete(v6);
    }
  }
  return a2;
}

void sub_1C566B41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

std::string *SipContact::setAttribute(std::string *result, uint64_t *a2, std::string *__str)
{
  CFDictionaryRef v3 = result;
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  switch(v4)
  {
    case 7:
      if (v5 >= 0) {
        uint64_t v8 = (int *)a2;
      }
      else {
        uint64_t v8 = (int *)*a2;
      }
      int v9 = *v8;
      int v10 = *(int *)((char *)v8 + 3);
      if (v9 == 1768978533 && v10 == 1936028265)
      {
        if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          xpc_object_t v12 = __str;
        }
        else {
          xpc_object_t v12 = (std::string *)__str->__r_.__value_.__r.__words[0];
        }
        xpc_object_t result = (std::string *)strtoul((const char *)v12, 0, 10);
        LODWORD(v3[19].__r_.__value_.__l.__data_) = result;
      }
      break;
    case 5:
      if (v5 >= 0) {
        xpc_object_t v13 = (int *)a2;
      }
      else {
        xpc_object_t v13 = (int *)*a2;
      }
      if (*v13 == 1952543859 && *((unsigned char *)v13 + 4) == 101)
      {
        xpc_object_t result = (std::string *)SipRegistrationState::stateWithName((_anonymous_namespace_ *)&v19, (unsigned __int8 *)__str);
        HIDWORD(v3->__r_.__value_.__r.__words[1]) = v19;
      }
      else
      {
        int v15 = *v13;
        int v16 = *((unsigned __int8 *)v13 + 4);
        if (v15 == 1852143205 && v16 == 116)
        {
          xpc_object_t v18 = (std::string *)&result->__r_.__value_.__r.__words[2];
          return std::string::operator=(v18, __str);
        }
      }
      break;
    case 2:
      uint64_t v6 = v5 >= 0 ? a2 : (uint64_t *)*a2;
      if (*(_WORD *)v6 == 25705)
      {
        if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v7 = __str;
        }
        else {
          char v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
        }
        xpc_object_t result = (std::string *)strtoul((const char *)v7, 0, 10);
        LODWORD(v3->__r_.__value_.__r.__words[1]) = result;
      }
      break;
  }
  return result;
}

void SipContact::parseChild(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4 == 13)
  {
    if (v5 >= 0) {
      xpc_object_t v11 = (uint64_t *)a2;
    }
    else {
      xpc_object_t v11 = *(uint64_t **)a2;
    }
    uint64_t v12 = *v11;
    uint64_t v13 = *(uint64_t *)((char *)v11 + 5);
    if (v12 != 0x2D6E776F6E6B6E75 || v13 != 0x6D617261702D6E77) {
      goto LABEL_23;
    }
    int v19 = &unk_1F20E7A70;
    *(_OWORD *)xpc_object_t v20 = 0u;
    *(_OWORD *)xpc_object_t v21 = 0u;
    long long v22 = 0u;
    bambi::XmlParser::parseNode((uint64_t)&v19, a3, 0);
    int v15 = (void *)HIBYTE(v21[0]);
    if (SHIBYTE(v21[0]) < 0) {
      int v15 = v20[1];
    }
    if (v15)
    {
      ims::removeQuotes((uint64_t)v20, &__p);
      ims::removeQuotes((uint64_t)&v21[1], &__str);
      p_p = &__p;
      int v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 59, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
      std::string::operator=((std::string *)(v16 + 7), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    int v19 = &unk_1F20E7A70;
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[1]);
    }
    if (SHIBYTE(v21[0]) < 0) {
      operator delete(v20[0]);
    }
  }
  else
  {
    if (v4 != 3
      || (v5 >= 0 ? (uint64_t v6 = (unsigned __int16 *)a2) : (uint64_t v6 = *(unsigned __int16 **)a2),
          (int v7 = *v6, v8 = *((unsigned __int8 *)v6 + 2), v7 == 29301) ? (v9 = v8 == 105) : (v9 = 0),
          !v9))
    {
LABEL_23:
      bambi::XmlParserItem::parseChild((uint64_t)a1, a2, a3);
      return;
    }
    int v10 = (void (*)(void))(*a1)[11];
    v10();
  }
}

void sub_1C566B7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  SipParamItem::~SipParamItem(&a22);
  _Unwind_Resume(a1);
}

void SipParamItem::setText(uint64_t a1, int a2, std::string *__str)
{
  CFDictionaryRef v3 = (std::string *)(a1 + 32);
  std::string::operator=((std::string *)(a1 + 32), __str);
  ims::chomp(v3, "\r\n\t ", 3);
}

std::string *SipParamItem::setAttribute(std::string *result, uint64_t a2, std::string *__str)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3 == 4)
  {
    if (v4 >= 0) {
      int v5 = (_DWORD *)a2;
    }
    else {
      int v5 = *(_DWORD **)a2;
    }
    if (*v5 == 1701667182) {
      return std::string::operator=((std::string *)&result->__r_.__value_.__r.__words[1], __str);
    }
  }
  return result;
}

void SipParamItem::~SipParamItem(void **this)
{
  *this = &unk_1F20E7A70;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20E7A70;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipContact::parseCompleted(uint64_t a1, const SipParameterMap *a2)
{
  *(_DWORD *)(a1 + 504) = BambiServices::serviceMaskFromParameters((BambiServices *)(a1 + 464), a2);
  uint64_t v3 = *(void **)(a1 + 448);
  if (v3)
  {
    int v5 = (void *)v3[57];
    unint64_t v4 = v3[58];
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v7 = v3[56];
      uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
      if ((unint64_t)(v8 + 1) >> 61) {
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v4 - v7;
      uint64_t v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
        uint64_t v10 = v8 + 1;
      }
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11) {
        unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v11);
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v13 = (void *)(v11 + 8 * v8);
      unint64_t v14 = v11 + 8 * v12;
      void *v13 = a1;
      uint64_t v6 = v13 + 1;
      int v16 = (char *)v3[56];
      int v15 = (char *)v3[57];
      if (v15 != v16)
      {
        do
        {
          uint64_t v17 = *((void *)v15 - 1);
          v15 -= 8;
          *--uint64_t v13 = v17;
        }
        while (v15 != v16);
        int v15 = (char *)v3[56];
      }
      v3[56] = v13;
      v3[57] = v6;
      v3[58] = v14;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *int v5 = a1;
      uint64_t v6 = v5 + 1;
    }
    v3[57] = v6;
  }
}

void SipRegistration::~SipRegistration(SipRegistration *this)
{
  *(void *)this = &unk_1F20E7970;
  unint64_t v4 = (char *)this + 448;
  uint64_t v2 = (void *)*((void *)this + 56);
  uint64_t v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (v3)
    {
LABEL_7:
      *((void *)this + 57) = v2;
      operator delete(v2);
    }
  }
  else
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t v6 = *((void *)v2 + v5);
      if (v6)
      {
        (*(void (**)(void))(*(void *)v6 + 8))(*((void *)v2 + v5));
        uint64_t v2 = (void *)*((void *)this + 56);
        uint64_t v3 = (void *)*((void *)this + 57);
      }
      ++v5;
    }
    while (v5 < ((unsigned char *)v3 - (unsigned char *)v2) >> 3);
    if (v2) {
      goto LABEL_7;
    }
  }
  if (*((char *)this + 439) < 0) {
    operator delete(*((void **)this + 52));
  }
  SipUri::~SipUri((SipRegistration *)((char *)this + 8));
}

{
  uint64_t vars8;

  SipRegistration::~SipRegistration(this);
  JUMPOUT(0x1C878E320);
}

std::string *SipRegistration::setAttribute(std::string *result, uint64_t *a2, std::string *__str)
{
  uint64_t v3 = (uint64_t)result;
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  switch(v4)
  {
    case 2:
      if (v5 >= 0) {
        unint64_t v11 = a2;
      }
      else {
        unint64_t v11 = (_WORD *)*a2;
      }
      if (*v11 == 25705)
      {
        uint64_t v12 = (std::string *)((char *)result + 416);
        return std::string::operator=(v12, __str);
      }
      break;
    case 5:
      if (v5 >= 0) {
        uint64_t v13 = (int *)a2;
      }
      else {
        uint64_t v13 = (int *)*a2;
      }
      int v14 = *v13;
      int v15 = *((unsigned __int8 *)v13 + 4);
      if (v14 == 1952543859 && v15 == 101)
      {
        xpc_object_t result = (std::string *)SipRegistrationState::stateWithName((_anonymous_namespace_ *)&v17, (unsigned __int8 *)a2);
        *(_DWORD *)(v3 + 440) = v17;
      }
      break;
    case 3:
      uint64_t v6 = v5 >= 0 ? (unsigned __int16 *)a2 : (unsigned __int16 *)*a2;
      int v7 = *v6;
      int v8 = *((unsigned __int8 *)v6 + 2);
      if (v7 == 28513 && v8 == 114)
      {
        p_std::string::size_type size = (uint64_t)&result->__r_.__value_.__l.__size_;
        return (std::string *)SipUri::fromString(p_size, __str);
      }
      break;
  }
  return result;
}

uint64_t SipRegistration::createChild(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2 == 7)
  {
    if (v3 >= 0) {
      uint64_t v4 = (int *)a2;
    }
    else {
      uint64_t v4 = *(int **)a2;
    }
    int v5 = *v4;
    int v6 = *(int *)((char *)v4 + 3);
    if (v5 == 1953394531 && v6 == 1952670068) {
      operator new();
    }
  }
  return 0;
}

void sub_1C566BCB8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40A119BF27);
  _Unwind_Resume(a1);
}

uint64_t SipRegistration::parseCompleted(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 472);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 96))(result, a1);
  }
  return result;
}

uint64_t SipRegistration::contactForParam(uint64_t a1, void **a2, unsigned __int8 *a3)
{
  int v3 = *(uint64_t **)(a1 + 448);
  for (unsigned int i = *(uint64_t **)(a1 + 456); v3 != i; ++v3)
  {
    uint64_t v7 = *v3;
    int v8 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(*v3 + 472, a2);
    if ((void **)(v7 + 480) == v8) {
      uint64_t v9 = &ims::kEmptyString;
    }
    else {
      uint64_t v9 = (long long *)(v8 + 7);
    }
    uint64_t v10 = *((unsigned __int8 *)v9 + 23);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = *((unsigned __int8 *)v9 + 23);
    }
    else {
      uint64_t v11 = *((void *)v9 + 1);
    }
    uint64_t v12 = a3[23];
    int v13 = (char)v12;
    if ((v12 & 0x80u) != 0) {
      uint64_t v12 = *((void *)a3 + 1);
    }
    if (v11 == v12)
    {
      if (v13 >= 0) {
        int v14 = a3;
      }
      else {
        int v14 = *(unsigned __int8 **)a3;
      }
      if ((v10 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v9, v14, *((void *)v9 + 1))) {
          return v7;
        }
      }
      else
      {
        if (!*((unsigned char *)v9 + 23)) {
          return v7;
        }
        while (*(unsigned __int8 *)v9 == *v14)
        {
          uint64_t v9 = (long long *)((char *)v9 + 1);
          ++v14;
          if (!--v10) {
            return v7;
          }
        }
      }
    }
  }
  return 0;
}

void SipRegistrationInfo::SipRegistrationInfo(SipRegistrationInfo *this, const SipRegistrationInfo *a2)
{
  *(void *)this = &unk_1F20E79E0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 5) = *((void *)a2 + 5);
  if (*((void *)a2 + 3) != *((void *)a2 + 2)) {
    operator new();
  }
}

void sub_1C566C124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12)
{
  int v13 = *a10;
  if (*a10)
  {
    *(void *)(a12 + 24) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationInfo::~SipRegistrationInfo(SipRegistrationInfo *this)
{
  *(void *)this = &unk_1F20E79E0;
  uint64_t v4 = (char *)this + 16;
  uint64_t v2 = (void *)*((void *)this + 2);
  int v3 = (void *)*((void *)v4 + 1);
  if (v3 == v2)
  {
    uint64_t v2 = v3;
    if (!v3) {
      return;
    }
    goto LABEL_7;
  }
  unint64_t v5 = 0;
  do
  {
    uint64_t v6 = v2[v5];
    if (v6)
    {
      (*(void (**)(void))(*(void *)v6 + 8))(v2[v5]);
      uint64_t v2 = (void *)*((void *)this + 2);
      int v3 = (void *)*((void *)this + 3);
    }
    ++v5;
  }
  while (v5 < v3 - v2);
  if (v2)
  {
LABEL_7:
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  SipRegistrationInfo::~SipRegistrationInfo(this);
  JUMPOUT(0x1C878E320);
}

unint64_t SipRegistrationInfo::setAttribute(unint64_t result, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = result;
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  if (v4 == 5)
  {
    if (v5 >= 0) {
      uint64_t v11 = (int *)a2;
    }
    else {
      uint64_t v11 = (int *)*a2;
    }
    int v12 = *v11;
    int v13 = *((unsigned __int8 *)v11 + 4);
    if (v12 == 1952543859 && v13 == 101)
    {
      uint64_t v15 = *(unsigned __int8 *)(a3 + 23);
      int v16 = (char)v15;
      if ((v15 & 0x80u) != 0) {
        uint64_t v15 = *(void *)(a3 + 8);
      }
      if (v15 == 4 && (v16 >= 0 ? (int v17 = (_DWORD *)a3) : (int v17 = *(_DWORD **)a3), *v17 == 1819047270)) {
        int v18 = 1;
      }
      else {
        int v18 = 2;
      }
      *(_DWORD *)(result + 8) = v18;
    }
  }
  else if (v4 == 7)
  {
    uint64_t v6 = v5 >= 0 ? (int *)a2 : (int *)*a2;
    int v7 = *v6;
    int v8 = *(int *)((char *)v6 + 3);
    if (v7 == 1936876918 && v8 == 1852795251)
    {
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v10 = (const char *)a3;
      }
      else {
        uint64_t v10 = *(const char **)a3;
      }
      uint64_t result = strtoul(v10, 0, 10);
      *(_DWORD *)(v3 + 12) = result;
    }
  }
  return result;
}

uint64_t SipRegistrationInfo::createChild(uint64_t a1, uint64_t **a2)
{
  uint64_t v2 = (uint64_t *)*((unsigned __int8 *)a2 + 23);
  int v3 = (char)v2;
  if ((char)v2 < 0) {
    uint64_t v2 = a2[1];
  }
  if (v2 == (uint64_t *)12)
  {
    if (v3 >= 0) {
      uint64_t v4 = (uint64_t *)a2;
    }
    else {
      uint64_t v4 = *a2;
    }
    uint64_t v5 = *v4;
    int v6 = *((_DWORD *)v4 + 2);
    if (v5 == 0x6172747369676572 && v6 == 1852795252) {
      operator new();
    }
  }
  return 0;
}

void sub_1C566C494(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40B0A97B0BLL);
  _Unwind_Resume(a1);
}

void SipRegistrationInfo::addRegistration(void *a1, uint64_t a2)
{
  uint64_t v5 = (void *)a1[3];
  unint64_t v4 = a1[4];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = a1[2];
    uint64_t v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v7;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    int v13 = (void *)(v11 + 8 * v8);
    unint64_t v14 = v11 + 8 * v12;
    void *v13 = a2;
    int v6 = v13 + 1;
    int v16 = (char *)a1[2];
    uint64_t v15 = (char *)a1[3];
    if (v15 != v16)
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *--int v13 = v17;
      }
      while (v15 != v16);
      uint64_t v15 = (char *)a1[2];
    }
    a1[2] = v13;
    a1[3] = v6;
    a1[4] = v14;
    if (v15) {
      operator delete(v15);
    }
  }
  else
  {
    *uint64_t v5 = a2;
    int v6 = v5 + 1;
  }
  a1[3] = v6;
}

void *ctu::NeverDestroyed<std::array<std::string,6ul>>::NeverDestroyed<char const(&)[8],char const(&)[5],char const(&)[7],char const(&)[11],char const(&)[6],char const(&)[1]>(void *a1, char *a2, char *a3, char *a4, char *a5, char *a6, char *a7)
{
  int v13 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v13 + 3, a3);
  std::string::basic_string[abi:ne180100]<0>(a1 + 6, a4);
  std::string::basic_string[abi:ne180100]<0>(a1 + 9, a5);
  std::string::basic_string[abi:ne180100]<0>(a1 + 12, a6);
  std::string::basic_string[abi:ne180100]<0>(a1 + 15, a7);
  return a1;
}

void sub_1C566C6E8(_Unwind_Exception *exception_object)
{
  while (1)
  {
    if (*(char *)(v2 - 1) < 0) {
      operator delete(*(void **)(v2 - 24));
    }
    v2 -= 24;
    if (v2 == v1) {
      _Unwind_Resume(exception_object);
    }
  }
}

void SipEventPackage::~SipEventPackage(SipEventPackage *this)
{
  *(void *)this = &unk_1F20E7B28;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void SipEventPackage::terminateWithoutUnsubscribing(SipEventPackage *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      unint64_t v4 = v3;
      uint64_t v5 = (SipSubscription *)*((void *)this + 2);
      if (v5) {
        SipSubscription::terminateWithoutUnsubscribing(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C566C7F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

std::string *SipEventPackage::setSubscriptionParameter(uint64_t a1, long long *a2, const std::string *a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4) {
    operator new();
  }
  uint64_t v7 = a2;
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v4 + 8), (void **)a2, (uint64_t)&std::piecewise_construct, &v7);
  return std::string::operator=((std::string *)(v5 + 7), a3);
}

void Sip3gppImsInfoBody::Sip3gppImsInfoBody(Sip3gppImsInfoBody *this, const Sip3gppImsInfoBody *a2)
{
  int v3 = SipXmlBody::SipXmlBody(this, (uint64_t)a2);
  void *v3 = &unk_1F20C84E8;
  Sip3gppImsInfo::Sip3gppImsInfo((Sip3gppImsInfo *)(v3 + 4), (const Sip3gppImsInfoBody *)((char *)a2 + 32));
}

void sub_1C566C910(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F20CC498;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_Sip3gppImsInfoBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(Sip3gppImsInfoBody::kContentType, "application/3gpp-ims+xml");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, Sip3gppImsInfoBody::kContentType, &dword_1C51D1000);
}

void BambiCallDelegate::handleEvent(BambiCallDelegate *this, std::__shared_weak_count **lpsrc)
{
  switch(*((_DWORD *)lpsrc + 2))
  {
    case 0:
      return;
    case 1:
      uint64_t v4 = *(void (**)(void))(*(void *)this + 24);
      goto LABEL_94;
    case 2:
      if (!v5) {
        return;
      }
      int v6 = v5;
      uint64_t v7 = *(void (**)(BambiCallDelegate *, void *))(*(void *)this + 40);
      uint64_t v8 = this;
      goto LABEL_76;
    case 4:
      if (!v9) {
        return;
      }
      int v6 = v9;
      uint64_t v7 = *(void (**)(BambiCallDelegate *, void *))(*(void *)this + 48);
      uint64_t v8 = this;
      goto LABEL_76;
    case 5:
      uint64_t v10 = *(void (**)(void))(*(void *)this + 56);
      goto LABEL_18;
    case 6:
      uint64_t v10 = *(void (**)(void))(*(void *)this + 56);
LABEL_18:
      goto LABEL_20;
    case 8:
      if (!v11) {
        return;
      }
      int v6 = v11;
      uint64_t v7 = *(void (**)(BambiCallDelegate *, void *))(*(void *)this + 72);
      uint64_t v8 = this;
      goto LABEL_76;
    case 9:
      if (!v12) {
        return;
      }
      int v6 = v12;
      uint64_t v7 = *(void (**)(BambiCallDelegate *, void *))(*(void *)this + 80);
      uint64_t v8 = this;
      goto LABEL_76;
    case 0xA:
      uint64_t v4 = *(void (**)(void))(*(void *)this + 104);
      goto LABEL_94;
    case 0xB:
      uint64_t v4 = *(void (**)(void))(*(void *)this + 112);
      goto LABEL_94;
    case 0xC:
      int v13 = lpsrc[3];
      if (v13)
      {
        unint64_t v14 = lpsrc[2];
        atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v15 = std::__shared_weak_count::lock(v13);
        std::__shared_weak_count::__release_weak(v13);
        if (v15)
        {
          if (v14 && (v14[18].__shared_weak_owners_ & 0xFFFFFFFE) == 2) {
            (*(void (**)(BambiCallDelegate *, std::__shared_weak_count **))(*(void *)this + 120))(this, lpsrc);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
      }
      return;
    case 0xE:
      if (!v16) {
        return;
      }
      int v6 = v16;
      uint64_t v7 = *(void (**)(BambiCallDelegate *, void *))(*(void *)this + 88);
      uint64_t v8 = this;
      goto LABEL_76;
    case 0xF:
      if (!v17) {
        return;
      }
      int v6 = v17;
      uint64_t v7 = *(void (**)(BambiCallDelegate *, void *))(*(void *)this + 96);
      uint64_t v8 = this;
      goto LABEL_76;
    case 0x10:
      uint64_t v4 = *(void (**)(void))(*(void *)this + 144);
      goto LABEL_94;
    case 0x11:
      uint64_t v4 = *(void (**)(void))(*(void *)this + 152);
      goto LABEL_94;
    case 0x12:
      if (!v18) {
        return;
      }
      int v6 = v18;
      uint64_t v7 = *(void (**)(BambiCallDelegate *, void *))(*(void *)this + 176);
      uint64_t v8 = this;
      goto LABEL_76;
    case 0x13:
      if (!v19) {
        return;
      }
      int v6 = v19;
      uint64_t v7 = *(void (**)(BambiCallDelegate *, void *))(*(void *)this + 184);
      uint64_t v8 = this;
      goto LABEL_76;
    case 0x14:
      if (!v20) {
        return;
      }
      int v6 = v20;
      uint64_t v7 = *(void (**)(BambiCallDelegate *, void *))(*(void *)this + 128);
      uint64_t v8 = this;
      goto LABEL_76;
    case 0x15:
      if (!v21) {
        return;
      }
      int v6 = v21;
      uint64_t v7 = *(void (**)(BambiCallDelegate *, void *))(*(void *)this + 136);
      uint64_t v8 = this;
      goto LABEL_76;
    case 0x17:
      if (!v22) {
        return;
      }
      int v6 = v22;
      uint64_t v7 = *(void (**)(BambiCallDelegate *, void *))(*(void *)this + 32);
      uint64_t v8 = this;
LABEL_76:
      v7(v8, v6);
      return;
    case 0x18:
      uint64_t v4 = *(void (**)(void))(*(void *)this + 264);
      goto LABEL_94;
    case 0x19:
      uint64_t v10 = *(void (**)(void))(*(void *)this + 272);
      goto LABEL_83;
    case 0x1A:
      uint64_t v10 = *(void (**)(void))(*(void *)this + 272);
LABEL_83:
LABEL_20:
      v10();
      return;
    case 0x1D:
      uint64_t v4 = *(void (**)(void))(*(void *)this + 64);
      goto LABEL_94;
    case 0x1E:
      uint64_t v4 = *(void (**)(void))(*(void *)this + 160);
      goto LABEL_94;
    case 0x1F:
      uint64_t v4 = *(void (**)(void))(*(void *)this + 168);
      goto LABEL_94;
    default:
      uint64_t v4 = *(void (**)(void))(*(void *)this + 280);
LABEL_94:
      v4();
      return;
  }
}

void sub_1C566D504(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipDigestAuthResponse::SipDigestAuthResponse(SipDigestAuthResponse *this, SipStandardDigestAuthScheme *a2)
{
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F20E7CE0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 9) = &unk_1F20B2680;
  *((void *)this + 10) = &_bambiDomain;
  *((_DWORD *)this + 22) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  if (!a2) {
    operator new();
  }
  *((void *)this + 8) = a2;
}

void sub_1C566D6B8(_Unwind_Exception *a1)
{
  ImsResult::~ImsResult(v2);
  SipAuthResponse::~SipAuthResponse(v1);
  _Unwind_Resume(a1);
}

void SipDigestAuthResponse::SipDigestAuthResponse(SipDigestAuthResponse *this, const SipDigestAuthChallenge *a2)
{
  uint64_t v4 = SipAuthResponse::SipAuthResponse((uint64_t)this, (uint64_t)a2);
  *(void *)uint64_t v4 = &unk_1F20E7CE0;
  *(void *)(v4 + 128) = 0;
  *(void *)(v4 + 136) = 0;
  *(void *)(v4 + 72) = &unk_1F20B2680;
  *(void *)(v4 + 80) = &_bambiDomain;
  *(_DWORD *)(v4 + 88) = 0;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = 0;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 104) = 0;
  uint64_t v5 = (*(uint64_t (**)(const SipDigestAuthChallenge *))(*(void *)a2 + 32))(a2);
  *((void *)this + 8) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
}

void sub_1C566D7AC(_Unwind_Exception *a1)
{
  ImsResult::~ImsResult(v2);
  SipAuthResponse::~SipAuthResponse(v1);
  _Unwind_Resume(a1);
}

void SipDigestAuthResponse::~SipDigestAuthResponse(SipDigestAuthResponse *this)
{
  *(void *)this = &unk_1F20E7CE0;
  uint64_t v2 = *((void *)this + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  ImsResult::~ImsResult((SipDigestAuthResponse *)((char *)this + 72));
  SipAuthResponse::~SipAuthResponse((void **)this);
}

{
  uint64_t vars8;

  SipDigestAuthResponse::~SipDigestAuthResponse(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipDigestAuthResponse::scheme(SipDigestAuthResponse *this)
{
  return *((void *)this + 8);
}

{
  return *((void *)this + 8);
}

uint64_t SipDigestAuthResponse::computeResponse(SipDigestAuthResponse *this, const SipRequest *a2)
{
  return (*(uint64_t (**)(void, const SipRequest *))(**((void **)this + 8) + 136))(*((void *)this + 8), a2);
}

uint64_t SipDigestAuthResponse::computeResponse(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 152))();
}

void SipDigestAuthResponse::clone(SipDigestAuthResponse *this)
{
}

void sub_1C566D9C4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C405BF2102ELL);
  _Unwind_Resume(a1);
}

void SipDigestAuthResponse::result(const std::string *this@<X0>, ImsResult *a2@<X8>)
{
}

uint64_t mavims::tlv::writeField(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(_WORD *)(a1 + 3) = *(_WORD *)(a2 + 4);
  *(unsigned char *)(a1 + 5) = *(unsigned char *)(a2 + 6);
  *(unsigned char *)(a1 + 6) = *(unsigned char *)(a2 + 7);
  *(unsigned char *)(a1 + 7) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 12);
  uint64_t v3 = a1 + 10;
  memcpy((void *)(a1 + 10), *(const void **)(a2 + 16), *(void *)(a2 + 24) - *(void *)(a2 + 16));
  return v3 + *(void *)(a2 + 24) - *(void *)(a2 + 16);
}

void *tlv::writeV<mavims::tlv::IncomingCallInfo>(unsigned char **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unsigned char *v4 = *(_DWORD *)a2;
  v4[1] = *(_DWORD *)(a2 + 4);
  std::locale v4[2] = *(unsigned char *)(a2 + 8);
  v4[3] = *(_DWORD *)(a2 + 12);
  _OWORD v4[4] = *(_DWORD *)(a2 + 16);
  v4[5] = *(_DWORD *)(a2 + 20);
  uint64_t v5 = v4 + 7;
  void v4[6] = *(unsigned char *)(a2 + 24);
  uint64_t result = memcpy(v4 + 7, *(const void **)(a2 + 32), *(void *)(a2 + 40) - *(void *)(a2 + 32));
  *a1 = &v5[*(void *)(a2 + 40) - *(void *)(a2 + 32)];
  return result;
}

uint64_t tlv::parseV<mavims::tlv::IncomingCallBasebandCallId>(tlv **a1, int a2)
{
  uint64_t v3 = *a1;
  tlv::throwIfNotEnoughBytes(*a1, (const unsigned __int8 *)*a1 + a2, (const unsigned __int8 *)1);
  uint64_t result = *(unsigned __int8 *)v3;
  *a1 = (tlv *)((char *)v3 + 1);
  return result;
}

void sub_1C566DB5C(void *a1)
{
  __cxa_begin_catch(a1);
  *uint64_t v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1C566DB50);
}

BOOL SipDialogEventPackage::handleNotification(SipDialogEventClient **this, const SipRequest *a2, SipResponse *a3)
{
  uint64_t v5 = SipMessage::bodyWithContentType((uint64_t)a2, (unsigned __int8 *)&SipDialogInfoBody::kContentType);
  if (v5
  {
    uint64_t v7 = v6;
    v19[0] = 0;
    v19[1] = 0;
    uint64_t v20 = 0;
    (*(void (**)(const SipDialogInfoBody *, void **))(*(void *)v6 + 56))(v6, v19);
    std::string::basic_string[abi:ne180100]<0>(v17, "sip.dialog-event");
    std::string::basic_string[abi:ne180100]<0>(&v16, "");
    uint64_t v8 = (unsigned char *)ims::debug((uint64_t)v17, (uint64_t)&v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v8 + 1), (uint64_t)"handleNotification", 18);
    v8[17] = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v8 + 1), (uint64_t)" : content type = ", 18);
    v8[17] = 0;
    uint64_t v9 = (const std::string *)(*(uint64_t (**)(const SipDialogInfoBody *))(*(void *)v7 + 40))(v7);
    LoggableString::LoggableString(&__p, v9);
    (*(void (**)(unsigned char *, std::string *))(*(void *)v8 + 40))(v8, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v8 + 1), (uint64_t)", content = \n", 13);
    v8[17] = 0;
    (*(void (**)(unsigned char *, void **))(*(void *)v8 + 32))(v8, v19);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v8[17] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    BOOL v10 = SipDialogEventClient::handleNotification(this[4], v7);
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v19, "sip.dialog-event");
    std::string::basic_string[abi:ne180100]<0>(v17, "");
    uint64_t v11 = ims::debug((uint64_t)v19, (uint64_t)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Received empty dialog events notification of type ", 50);
    *(unsigned char *)(v11 + 17) = 0;
    uint64_t v12 = *((void *)a2 + 9);
    if (v12) {
      int v13 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12);
    }
    else {
      int v13 = (const std::string *)&SipBody::kGenericContentType;
    }
    LoggableString::LoggableString(&v16, v13);
    (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 40))(v11, &v16);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(v19[0]);
    }
    return 0;
  }
  return v10;
}

void sub_1C566DEF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v23 - 33) < 0) {
    operator delete(*(void **)(v23 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_1C566DF54(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1C566DF14);
}

uint64_t SipDialogEventPackage::handleSubscriptionFailed(SipDialogEventClient **this, ImsResult *a2)
{
  return SipDialogEventClient::dialogEventSubscriptionFailed(this[4], (SipDialogEventPackage *)this, a2);
}

void SipDialogEventPackage::handleSubscriptionTerminated(SipDialogEventClient **this)
{
}

uint64_t SipDialogEventPackage::desiredExpirationInterval(SipDialogEventPackage *this)
{
  return *((unsigned int *)this + 10);
}

void SipDialogEventPackage::acceptedContentTypes(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    unint64_t v3 = a2[1];
    if (v3 >= a2[2])
    {
      uint64_t v4 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, &SipDialogEventPackage::kContentType);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, &SipDialogEventPackage::kContentType);
      uint64_t v4 = v3 + 24;
    }
    a2[1] = v4;
  }
}

BOOL SipDialogEventPackage::subscribe(SipDialogEventPackage *this, int a2)
{
  if (a2) {
    *((_DWORD *)this + 10) = a2;
  }
  unint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = (SipSubscription *)*((void *)this + 2);
      if (v5)
      {
        if (SipSubscription::subscribeWithExpiration(v5))
        {
          BOOL v6 = 1;
LABEL_16:
          std::__shared_weak_count::__release_shared[abi:ne180100](v4);
          return v6;
        }
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t v7 = (const SipUri *)SipUserAgent::publicUri(*(SipUserAgent **)(*((void *)this + 4) + 128));
  uint64_t v12 = 0;
  int v13 = 0;
  uint64_t v8 = *(void *)(*((void *)this + 4) + 128);
  uint64_t v9 = *(SipDialogManager **)(v8 + 176);
  BOOL v10 = *(std::__shared_weak_count **)(v8 + 184);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipDialogManager::subscribeToEventPackage(v9, this, v7, &v12);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  BOOL v6 = v12 != 0;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v4) {
    goto LABEL_16;
  }
  return v6;
}

void sub_1C566E0C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipDialogEventPackage::unsubscribe(SipDialogEventPackage *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2)
  {
    unint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (SipSubscription *)*((void *)this + 2);
      if (v5) {
        SipSubscription::unsubscribe(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C566E158(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipDialogEventPackage::~SipDialogEventPackage(SipDialogEventPackage *this)
{
  SipEventPackage::~SipEventPackage(this);
  JUMPOUT(0x1C878E320);
}

const char *SipDialogEventPackage::name(SipDialogEventPackage *this)
{
  return "dialog";
}

uint64_t SipDialogEventPackage::determineIncomingMessageCategory(SipDialogEventPackage *this, const SipRequest *a2)
{
  return 2;
}

uint64_t _GLOBAL__sub_I_SipDialogEventPackage_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&SipDialogEventPackage::kContentType, "application/dialog-info+xml");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &SipDialogEventPackage::kContentType, &dword_1C51D1000);
}

void ims::analytics::LazuliReferEvent::create(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL a3@<W2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  unint64_t v14 = operator new(0x90uLL);
  v14[1] = 0;
  void v14[2] = 0;
  *unint64_t v14 = &unk_1F20E7DD8;
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v23 = *(std::string *)a2;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v22 = *(std::string *)a6;
  }
  uint64_t v14[3] = &unk_1F20E7F10;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.ca.refer");
  ImsLogContainer::ImsLogContainer((uint64_t)(v14 + 4), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v14[3] = &unk_1F20E7E28;
  v14[4] = &unk_1F20E7E60;
  xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v17 = v16;
  char v18 = v14 + 17;
  if (v16)
  {
    *char v18 = v16;
  }
  else
  {
    xpc_object_t v17 = xpc_null_create();
    *char v18 = v17;
    if (!v17)
    {
      xpc_object_t v19 = xpc_null_create();
      xpc_object_t v17 = 0;
      goto LABEL_18;
    }
  }
  if (MEMORY[0x1C878F160](v17) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v17);
    goto LABEL_19;
  }
  xpc_object_t v19 = xpc_null_create();
LABEL_18:
  *char v18 = v19;
LABEL_19:
  xpc_release(v17);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v23;
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v24, v22.__r_.__value_.__l.__data_, v22.__r_.__value_.__l.__size_);
  }
  else {
    std::string v24 = v22;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v36 = xpc_string_create((const char *)p_p);
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  xpc_object_t v34 = v14 + 17;
  xpc_object_t v35 = "method";
  xpc::dict::object_proxy::operator=((uint64_t)&v34, &v36, &v37);
  xpc_release(v37);
  xpc_object_t v37 = 0;
  xpc_release(v36);
  xpc_object_t v36 = 0;
  xpc_object_t v32 = xpc_BOOL_create(a3);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  xpc_object_t v34 = v14 + 17;
  xpc_object_t v35 = "is_success";
  xpc::dict::object_proxy::operator=((uint64_t)&v34, &v32, &v33);
  xpc_release(v33);
  xpc_object_t v33 = 0;
  xpc_release(v32);
  xpc_object_t v32 = 0;
  xpc_object_t object = xpc_int64_create(a4);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v34 = v14 + 17;
  xpc_object_t v35 = "latency";
  xpc::dict::object_proxy::operator=((uint64_t)&v34, &object, &v31);
  xpc_release(v31);
  xpc_object_t v31 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  if (a5)
  {
    xpc_object_t v28 = xpc_int64_create(a5);
    if (!v28) {
      xpc_object_t v28 = xpc_null_create();
    }
    xpc_object_t v34 = v14 + 17;
    xpc_object_t v35 = "sip_error_code";
    xpc::dict::object_proxy::operator=((uint64_t)&v34, &v28, &v29);
    xpc_release(v29);
    xpc_object_t v29 = 0;
    xpc_release(v28);
    xpc_object_t v28 = 0;
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v24.__r_.__value_.__l.__size_)
    {
LABEL_48:
      operator delete(v24.__r_.__value_.__l.__data_);
      goto LABEL_49;
    }
    xpc_object_t v21 = (std::string *)v24.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&v24.__r_.__value_.__s + 23)) {
      goto LABEL_49;
    }
    xpc_object_t v21 = &v24;
  }
  xpc_object_t v26 = xpc_string_create((const char *)v21);
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  xpc_object_t v34 = v14 + 17;
  xpc_object_t v35 = "failure_reason";
  xpc::dict::object_proxy::operator=((uint64_t)&v34, &v26, &v27);
  xpc_release(v27);
  xpc_object_t v27 = 0;
  xpc_release(v26);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_48;
  }
LABEL_49:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  *a7 = v14 + 3;
  a7[1] = v14;
}

void sub_1C566E680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  xpc_release(*v34);
  *(void *)(v32 + 136) = 0;
  *(void *)(v32 + 32) = &unk_1F20C9CA0;
  if (*(char *)(v32 + 87) < 0) {
    operator delete(*(void **)(v32 + 64));
  }
  if (*(char *)(v32 + 63) < 0) {
    operator delete(*(void **)(v32 + 40));
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v32);
  operator delete(v36);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<anonymous namespace'::LazuliReferEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E7DD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::LazuliReferEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E7DD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::LazuliReferEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::LazuliReferEventImpl::~LazuliReferEventImpl(_anonymous_namespace_::LazuliReferEventImpl *this)
{
  *(void *)this = &unk_1F20E7E28;
  *((void *)this + 1) = &unk_1F20E7E60;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20E7E28;
  *((void *)this + 1) = &unk_1F20E7E60;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  JUMPOUT(0x1C878E320);
}

xpc_object_t anonymous namespace'::LazuliReferEventImpl::getDict@<X0>(_anonymous_namespace_::LazuliReferEventImpl *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  *a2 = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void *anonymous namespace'::LazuliReferEventImpl::getName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "RCSSIPRefer");
}

void non-virtual thunk to'anonymous namespace'::LazuliReferEventImpl::~LazuliReferEventImpl(_anonymous_namespace_::LazuliReferEventImpl *this)
{
  *((void *)this - 1) = &unk_1F20E7E28;
  *(void *)this = &unk_1F20E7E60;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *((void *)this - 1) = &unk_1F20E7E28;
  *(void *)this = &unk_1F20E7E60;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1C878E320);
}

void LazuliRouteSet::LazuliRouteSet(LazuliRouteSet *this, const LazuliRouteSet *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_1F20E7F48;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  uint64_t v2 = (const LazuliUri **)*((void *)a2 + 1);
  if (*((const LazuliUri ***)a2 + 2) != v2) {
    LazuliRouteSet::addHop(this, *v2, 0, 0, **((const SipParameterMap ***)a2 + 4));
  }
}

void sub_1C566EC2C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    _OWORD v1[2] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void LazuliRouteSet::addHop(LazuliRouteSet *this, const LazuliUri *a2, BOOL a3, BOOL a4, const SipParameterMap *a5)
{
}

void sub_1C566F074(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

LazuliRouteSet *LazuliRouteSet::operator=(LazuliRouteSet *a1, const LazuliUri ***a2)
{
  LazuliRouteSet::clear(a1);
  uint64_t v4 = a2[1];
  if (a2[2] != v4) {
    LazuliRouteSet::addHop(a1, *v4, 0, 0, *a2[4]);
  }
  return a1;
}

void *LazuliRouteSet::clear(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = this[2];
  if (v2 != this[1])
  {
    unint64_t v3 = 0;
    uint64_t v2 = this[1];
    do
    {
      uint64_t v4 = *(void *)(v2 + 8 * v3);
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      this = *(void **)(v1[4] + 8 * v3);
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
      ++v3;
      uint64_t v2 = v1[1];
    }
    while (v3 < (v1[2] - v2) >> 3);
  }
  _OWORD v1[2] = v2;
  v1[5] = v1[4];
  return this;
}

void LazuliRouteSet::~LazuliRouteSet(LazuliRouteSet *this)
{
  *(void *)this = &unk_1F20E7F48;
  LazuliRouteSet::clear(this);
  uint64_t v2 = (void *)*((void *)this + 4);
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

{
  uint64_t vars8;

  LazuliRouteSet::~LazuliRouteSet(this);
  JUMPOUT(0x1C878E320);
}

ImsOutStream *LazuliRouteSet::toStream(LazuliRouteSet *this, ImsOutStream *a2)
{
  uint64_t v3 = *((void *)this + 1);
  if (*((void *)this + 2) != v3)
  {
    unint64_t v5 = 0;
    do
    {
      if (v5)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)", ", 2);
        *((unsigned char *)a2 + 17) = 0;
        uint64_t v3 = *((void *)this + 1);
      }
      (*(void (**)(void, ImsOutStream *))(**(void **)(v3 + 8 * v5) + 48))(*(void *)(v3 + 8 * v5), a2);
      uint64_t v6 = *(void *)(*((void *)this + 4) + 8 * v5);
      (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v6 + 16))(v6, a2);
      ++v5;
      uint64_t v3 = *((void *)this + 1);
    }
    while (v5 < (*((void *)this + 2) - v3) >> 3);
  }
  return a2;
}

BOOL LazuliRouteSet::fromString(LazuliRouteSet *a1, std::string *a2)
{
  LazuliRouteSet::clear(a1);
  std::string::basic_string[abi:ne180100]<0>(&v19, "LazuliRouteSet");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v19, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"LazuliRouteSet::fromString ", 27);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 32))(v4, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (SHIBYTE(v18[0]) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(v19);
  }
  memset(&__str, 0, sizeof(__str));
  uint64_t v27 = 0;
  long long v33 = 0u;
  uint64_t v34 = 0;
  xpc_object_t v19 = &unk_1F20D4930;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  std::string v23 = &unk_1F20CA780;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v32 = 0;
  *(void *)&long long v33 = 0;
  xpc_object_t v30 = &unk_1F20B37B0;
  xpc_object_t v31 = &v32;
  BYTE9(v33) = 1;
  v18[1] = 0;
  void v18[2] = (void *)256;
  std::string __p = &unk_1F20B37B0;
  xpc_object_t v17 = v18;
  v18[0] = 0;
  std::string::size_type v5 = ims::nextTokenQ(a2, 0, &__str, 0x2Cu);
  if (v5 != -1)
  {
    std::string::size_type v6 = std::string::find(a2, 59, v5);
    std::string::basic_string[abi:ne180100]<0>(&v11, "LazuliRouteSet");
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    uint64_t v7 = ims::debug((uint64_t)&v11, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"LazuliRouteSet token ", 21);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 32))(v7, &__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" semicolon ", 11);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v11.__r_.__value_.__l.__data_);
    }
    if (v6 == -1)
    {
      if (LazuliUri::fromString((uint64_t)&v19, (uint64_t)&__str))
      {
        v11.__r_.__value_.__r.__words[2] = 0;
        uint64_t v12 = 0;
        v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B37B0;
        v11.__r_.__value_.__l.__size_ = (std::string::size_type)&v11.__r_.__value_.__r.__words[2];
        __int16 v13 = 256;
        LazuliRouteSet::addHop(a1, (const LazuliUri *)&v19, 0, 0, (const SipParameterMap *)&v11);
      }
    }
    else
    {
      std::string::basic_string(&v11, &__str, 0, v6, (std::allocator<char> *)v14);
      char v8 = LazuliUri::fromString((uint64_t)&v19, (uint64_t)&v11);
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      if (v8)
      {
        std::string::basic_string(&v11, &__str, v6 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v14);
        char v9 = SipParameterMap::fromString((uint64_t)&__p, &v11, 0, 0);
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v11.__r_.__value_.__l.__data_);
        }
        if (v9) {
          LazuliRouteSet::addHop(a1, (const LazuliUri *)&v19, 0, 0, (const SipParameterMap *)&__p);
        }
      }
    }
  }
  std::string __p = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v17, v18[0]);
  LazuliUri::~LazuliUri((LazuliUri *)&v19);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return v5 == -1;
}

void sub_1C566F804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t LazuliRouteSet::operator==(void *a1, void *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 - v2 != a2[2] - a2[1]) {
    return 0;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  if (v7 - v6 != a2[5] - a2[4]) {
    return 0;
  }
  if (v3 != v2)
  {
    unint64_t v8 = 0;
    while ((LazuliUri::operator==(*(void *)(v2 + 8 * v8), *(void *)(a2[1] + 8 * v8)) & 1) != 0)
    {
      ++v8;
      uint64_t v2 = a1[1];
      if (v8 >= (a1[2] - v2) >> 3)
      {
        uint64_t v6 = a1[4];
        uint64_t v7 = a1[5];
        goto LABEL_8;
      }
    }
    return 0;
  }
LABEL_8:
  if (v7 == v6) {
    return 1;
  }
  unint64_t v9 = 0;
  do
  {
    uint64_t result = SipParameterMap::operator==(*(void **)(v6 + 8 * v9), *(void *)(a2[4] + 8 * v9));
    if ((result & 1) == 0) {
      break;
    }
    ++v9;
    uint64_t v6 = a1[4];
  }
  while (v9 < (a1[5] - v6) >> 3);
  return result;
}

uint64_t IPSecurityManager::IPSecurityManager(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = &unk_1F20E8108;
  *(void *)(a1 + 8) = &unk_1F20E8180;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ipsec");
  ImsLogContainer::ImsLogContainer(a1 + 16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F20E7F78;
  *(void *)(a1 + 8) = &unk_1F20E8008;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 16) = &unk_1F20E8028;
  *(_DWORD *)(a1 + 128) = 1;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 176) = 0;
  IMSNetworkPolicySession::IMSNetworkPolicySession((void *)(a1 + 200), a1);
  *(void *)(a1 + 320) = 0;
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v5;
  *(void *)(a1 + 192) = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

void sub_1C566FB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  long long v22 = *(std::__shared_weak_count **)(v15 + 192);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__tree<std::string>::destroy(v18, *v20);
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*v19);
  IMSSecureNetworkSession::deinitialize(v17);
  ImsLogContainer::~ImsLogContainer(v16);
  _Unwind_Resume(a1);
}

void IPSecurityManager::~IPSecurityManager(IPSecurityManager *this)
{
  *(void *)this = &unk_1F20E7F78;
  *((void *)this + 1) = &unk_1F20E8008;
  *((void *)this + 2) = &unk_1F20E8028;
  IPSecurityManager::deinitializePolicies(this);
  IMSNetworkPolicySession::~IMSNetworkPolicySession((void **)this + 25);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__tree<std::string>::destroy((uint64_t)this + 160, *((char **)this + 21));
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((void **)this + 18));
  IMSSecureNetworkSession::deinitialize((IPSecurityManager *)((char *)this + 120));
  *((void *)this + 2) = &unk_1F20C9CA0;
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t vars8;

  IPSecurityManager::~IPSecurityManager(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'IPSecurityManager::~IPSecurityManager(IPSecurityManager *this)
{
}

{
  uint64_t vars8;

  IPSecurityManager::~IPSecurityManager((IPSecurityManager *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

uint64_t IPSecurityManager::initializePolicies(IPSecurityManager *this)
{
  uint64_t v3 = *((void *)this + 15);
  uint64_t v2 = (IPSecurityManager *)((char *)this + 120);
  if (v3) {
    return 1;
  }
  if (IMSSecureNetworkSession::initialize(v2))
  {
    uint64_t v16 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    IMSNetworkPolicySession::initialize((IPSecurityManager *)((char *)this + 200), (uint64_t)&v12);
    uint64_t v4 = (*(unsigned int (**)(void, void))(**((void **)&v12 + 1) + 24))(*((void *)&v12 + 1), v13) ^ 1;
    if (v4)
    {
      if (!*((void *)this + 40)) {
        operator new();
      }
      uint64_t v9 = *((void *)this + 2);
      unint64_t v8 = (char *)this + 16;
      uint64_t v10 = (*(uint64_t (**)(char *))(v9 + 64))(v8);
      (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))(v8, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"initialized!", 12);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
    }
    else
    {
      ImsLogContainer::logResult((IPSecurityManager *)((char *)this + 16), (ImsResult *)&v12);
    }
    ImsResult::~ImsResult((ImsResult *)&v12);
  }
  else
  {
    uint64_t v6 = *((void *)this + 2);
    uint64_t v5 = (char *)this + 16;
    uint64_t v7 = (*(uint64_t (**)(char *))(v6 + 56))(v5);
    (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))(v5, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"unable to create secure networking session", 42);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v4 = 0;
    *(unsigned char *)(v7 + 17) = 0;
  }
  return v4;
}

void sub_1C566FF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void IPSecurityManager::applyChanges(IPSecurityManager *this)
{
  if (*((void *)this + 38))
  {
    IMSNetworkPolicySession::applyPolicies((IPSecurityManager *)((char *)this + 200), (uint64_t)v3);
    ImsResult::~ImsResult((ImsResult *)v3);
  }
  uint64_t v2 = (void *)*((void *)this + 40);
  if (v2)
  {
    if (v2[3] != v2[4]) {
      PolicyApply(v2[9]);
    }
  }
}

IMSSecurityPolicyManager *IPSecurityManager::deinitializePolicies(IPSecurityManager *this)
{
  uint64_t v2 = (char *)*((void *)this + 17);
  uint64_t v3 = (char *)this + 144;
  if (v2 != (char *)this + 144)
  {
    do
    {
      uint64_t v4 = (void **)*((void *)v2 + 5);
      if (v4)
      {
        IMSSecurityAssociationPair::~IMSSecurityAssociationPair(v4);
        MEMORY[0x1C878E320]();
      }
      uint64_t v5 = (char *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (char *)*((void *)v2 + 2);
          BOOL v7 = *(void *)v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((void **)this + 18));
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 17) = v3;
  IMSSecureNetworkSession::deinitialize((IPSecurityManager *)((char *)this + 120));
  std::__tree<std::string>::destroy((uint64_t)this + 160, *((char **)this + 21));
  *((void *)this + 20) = (char *)this + 168;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  IMSNetworkPolicySession::deinitialize((IPSecurityManager *)((char *)this + 200));
  uint64_t result = (IMSSecurityPolicyManager *)*((void *)this + 40);
  if (result)
  {
    IMSSecurityPolicyManager::~IMSSecurityPolicyManager(result);
    uint64_t result = (IMSSecurityPolicyManager *)MEMORY[0x1C878E320]();
  }
  *((void *)this + 40) = 0;
  return result;
}

BOOL IPSecurityManager::isSecurityTypeImplemented(uint64_t a1, int a2)
{
  return a2 == 1 && *(void *)(a1 + 120) != 0;
}

void *IPSecurityManager::logPrefix(IPSecurityManager *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"IPSecurityManager: ", 19);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

uint64_t *IPSecurityManager::removeSecurityAssociationPairWithInboundSpi(IPSecurityManager *this, unsigned int a2)
{
  uint64_t v4 = (char *)this + 144;
  uint64_t result = (uint64_t *)*((void *)this + 18);
  if (result)
  {
    uint64_t v5 = (uint64_t *)v4;
    uint64_t v6 = result;
    do
    {
      unsigned int v7 = *((_DWORD *)v6 + 8);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = v6;
      }
      else {
        uint64_t v9 = v6 + 1;
      }
      if (v8) {
        uint64_t v5 = v6;
      }
      uint64_t v6 = (uint64_t *)*v9;
    }
    while (*v9);
    if (v5 != (uint64_t *)v4 && *((_DWORD *)v5 + 8) <= a2)
    {
      uint64_t v10 = (void **)v5[5];
      if (v10)
      {
        std::string v11 = (uint64_t *)v4;
        long long v12 = result;
        while (1)
        {
          unsigned int v13 = *((_DWORD *)v12 + 8);
          BOOL v14 = v13 >= a2;
          if (v13 >= a2) {
            long long v15 = v12;
          }
          else {
            long long v15 = v12 + 1;
          }
          if (v14) {
            std::string v11 = v12;
          }
          long long v12 = (uint64_t *)*v15;
          if (!*v15)
          {
            if (v11 != (uint64_t *)v4 && *((_DWORD *)v11 + 8) <= a2)
            {
              uint64_t v16 = (uint64_t *)v11[1];
              if (v16)
              {
                do
                {
                  xpc_object_t v17 = v16;
                  uint64_t v16 = (uint64_t *)*v16;
                }
                while (v16);
              }
              else
              {
                uint64_t v18 = v11;
                do
                {
                  xpc_object_t v17 = (uint64_t *)v18[2];
                  BOOL v19 = *v17 == (void)v18;
                  uint64_t v18 = v17;
                }
                while (!v19);
              }
              if (*((uint64_t **)this + 17) == v11) {
                *((void *)this + 17) = v17;
              }
              --*((void *)this + 19);
              std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(result, v11);
              operator delete(v11);
            }
            IMSSecurityAssociationPair::~IMSSecurityAssociationPair(v10);
            JUMPOUT(0x1C878E320);
          }
        }
      }
    }
  }
  return result;
}

void IPSecurityManager::createTemporarySecurityAssociationPair(uint64_t a1@<X0>, ImsResult *a2@<X8>)
{
  if (*(void *)(a1 + 120)) {
    operator new();
  }
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  v4[0] = &unk_1F20B2680;
  v4[1] = &_bambiDomain;
  int v5 = 1073741826;
  uint64_t v3 = (const std::string *)ImsResult::operator<<<char [24]>((uint64_t)v4, "session not initialized");
  ImsResult::ImsResult(a2, v3);
  ImsResult::~ImsResult((ImsResult *)v4);
}

void sub_1C5670738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void *IPSecurityManager::addPolicyForInterface@<X0>(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  a3[2] = 0;
  a3[3] = 0;
  a3[7] = 0;
  a3[8] = 0;
  a3[6] = 0;
  *a3 = &unk_1F20B2680;
  a3[1] = &_bambiDomain;
  a3[4] = 0;
  a3[5] = 0;
  uint64_t result = *(void **)(a1 + 320);
  if (result)
  {
    if (result[3] == result[4])
    {
      IMSSecurityPolicyManager::addSkipPolicy(result, (uint64_t)&ims::kEmptyString, v8);
      ImsResult::~ImsResult((ImsResult *)v8);
      uint64_t result = *(void **)(a1 + 320);
    }
    IMSSecurityPolicyManager::addPolicyForInterface(result, a2, (uint64_t)v7);
    ImsResult::operator=((uint64_t)a3, (uint64_t)v7);
    ImsResult::~ImsResult((ImsResult *)v7);
    return (void *)PolicyApply(*(void *)(*(void *)(a1 + 320) + 72));
  }
  return result;
}

void sub_1C5670854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  ImsResult::~ImsResult(v9);
  _Unwind_Resume(a1);
}

IMSSecurityPolicyManager *IPSecurityManager::addPolicyForInterface@<X0>(IPSecurityManager *this@<X0>, NetworkInterface *a2@<X1>, void *a3@<X8>)
{
  a3[2] = 0;
  a3[3] = 0;
  a3[7] = 0;
  a3[8] = 0;
  a3[6] = 0;
  *a3 = &unk_1F20B2680;
  a3[1] = &_bambiDomain;
  a3[4] = 0;
  a3[5] = 0;
  uint64_t result = (IMSSecurityPolicyManager *)*((void *)this + 40);
  if (result)
  {
    if (*((void *)result + 3) == *((void *)result + 4))
    {
      IMSSecurityPolicyManager::addSkipPolicy(result, (uint64_t)&ims::kEmptyString, v8);
      ImsResult::~ImsResult((ImsResult *)v8);
      uint64_t result = (IMSSecurityPolicyManager *)*((void *)this + 40);
    }
    IMSSecurityPolicyManager::addPolicyForInterface(result, a2, (uint64_t)v7);
    ImsResult::operator=((uint64_t)a3, (uint64_t)v7);
    ImsResult::~ImsResult((ImsResult *)v7);
    return (IMSSecurityPolicyManager *)PolicyApply(*(void *)(*((void *)this + 40) + 72));
  }
  return result;
}

void sub_1C567094C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  ImsResult::~ImsResult(v9);
  _Unwind_Resume(a1);
}

void IPSecurityManager::removePolicyForInterface(uint64_t a1, std::string *a2)
{
  uint64_t v2 = *(void **)(a1 + 320);
  if (v2) {
    IMSSecurityPolicyManager::removePolicyForInterface(v2, a2);
  }
}

void IPSecurityManager::updateSecurityAssociationPair(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X4>, const unsigned __int8 (*a5)[16]@<X5>, unsigned __int8 (*a6)[16]@<X6>, void *a7@<X7>, ImsResult *a8@<X8>)
{
  unsigned int v26 = a2;
  if (!*(void *)(a1 + 120))
  {
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v20 = &unk_1F20B2680;
    long long v21 = &_bambiDomain;
    int v22 = 1073741826;
    BOOL v19 = (const std::string *)ImsResult::operator<<<char [24]>((uint64_t)&v20, "library not initialized");
    ImsResult::ImsResult(a8, v19);
    goto LABEL_19;
  }
  uint64_t v11 = *(void *)(a1 + 144);
  uint64_t v9 = a1 + 144;
  uint64_t v10 = v11;
  if (!v11) {
    goto LABEL_17;
  }
  uint64_t v12 = v9;
  do
  {
    unsigned int v13 = *(_DWORD *)(v10 + 32);
    BOOL v14 = v13 >= a2;
    if (v13 >= a2) {
      long long v15 = (uint64_t *)v10;
    }
    else {
      long long v15 = (uint64_t *)(v10 + 8);
    }
    if (v14) {
      uint64_t v12 = v10;
    }
    uint64_t v10 = *v15;
  }
  while (*v15);
  if (v12 == v9 || *(_DWORD *)(v12 + 32) > a2 || (uint64_t v16 = *(void *)(v12 + 40)) == 0)
  {
LABEL_17:
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v20 = &unk_1F20B2680;
    long long v21 = &_bambiDomain;
    int v22 = 1073741825;
    uint64_t v17 = ImsResult::operator<<<char [37]>((uint64_t)&v20, "can't find SA pair with inbound SPI ");
    uint64_t v18 = (const std::string *)ImsResult::operator<<<unsigned int>(v17);
    ImsResult::ImsResult(a8, v18);
LABEL_19:
    ImsResult::~ImsResult((ImsResult *)&v20);
    return;
  }
  IMSSecurityAssociationPair::update(v16, a3, a4, a5, a6, a7, a8);
}

void sub_1C5670B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void printInterfaces(const std::string *a1, uint64_t *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v11, "policy");
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  uint64_t v4 = ims::debug((uint64_t)v11, (uint64_t)v9);
  LoggableString::LoggableString(&__p, a1);
  (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 40))(v4, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" (", 2);
  *(unsigned char *)(v4 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  uint64_t v5 = *a2;
  std::string::basic_string[abi:ne180100]<0>(v11, "policy");
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  uint64_t v6 = ims::debug((uint64_t)v11, (uint64_t)v9);
  std::string::basic_string[abi:ne180100]<0>(&__p, " ");
  ims::join<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v5, a2 + 1, v6, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v11, "policy");
  std::string::basic_string[abi:ne180100]<0>(v9, "");
  uint64_t v7 = ims::debug((uint64_t)v11, (uint64_t)v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
}

void sub_1C5670D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double BambiSecurityDelegate::addPolicyForInterface@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0x40000000;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0x40000000;
  return result;
}

uint64_t BambiSecurityDelegate::initializePolicies(BambiSecurityDelegate *this)
{
  return 0;
}

uint64_t Rfc5626RegistrationPolicy::Rfc5626RegistrationPolicy(uint64_t a1, uint64_t *a2, std::__shared_weak_count **a3)
{
  uint64_t v5 = a3[1];
  long long v8 = *a3;
  uint64_t v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  SipRegistrationPolicy::SipRegistrationPolicy(a1, a2 + 1, &v8);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + 104) = a2[6];
  *(void *)(a1 + *(void *)(v6 - 2std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((void **)this + 4)) = a2[7];
  *(void *)(a1 + 184) = &unk_1F20E8458;
  *(_DWORD *)(a1 + 2360) = 0;
  return a1;
}

void sub_1C5670F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Rfc5626RegistrationPolicy::Rfc5626RegistrationPolicy(uint64_t a1, std::__shared_weak_count **a2)
{
  *(void *)(a1 + 104) = &unk_1F20B2FA8;
  uint64_t v3 = a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  SipRegistrationPolicy::SipRegistrationPolicy(a1, (uint64_t *)&off_1F20E8468, &v5);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  *(void *)a1 = &unk_1F20E81A8;
  *(void *)(a1 + 104) = &unk_1F20E8410;
  *(void *)(a1 + 184) = &unk_1F20E8458;
  *(_DWORD *)(a1 + 2360) = 0;
  return a1;
}

void sub_1C5671078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void Rfc5626RegistrationPolicy::clearFailureFlags(Rfc5626RegistrationPolicy *this)
{
  *((_DWORD *)this + 590) = 0;
}

time_t Rfc5626RegistrationPolicy::performActualWaitTime(Rfc5626RegistrationPolicy *this, const ImsResult *a2, unsigned int a3)
{
  return SipRegistrationPolicy::scheduleRetry(this, a2, a3, 0);
}

uint64_t Rfc5626RegistrationPolicy::maxRetryInterval(Rfc5626RegistrationPolicy *this)
{
  return *((unsigned int *)this + 460);
}

uint64_t Rfc5626RegistrationPolicy::computeRetryInterval(Rfc5626RegistrationPolicy *this)
{
  int v2 = *((_DWORD *)this + 590) + 1;
  *((_DWORD *)this + 590) = v2;
  unsigned int v3 = *((_DWORD *)this + 461);
  unsigned int v4 = (*((_DWORD *)this + 460) / v3) >> v2;
  int v5 = v3 << v2;
  if (v4) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = *((_DWORD *)this + 460);
  }
  uint64_t v7 = (random() % (v6 >> 1)) + (v6 >> 1);
  uint64_t v8 = (*(uint64_t (**)(Rfc5626RegistrationPolicy *))(*(void *)this + 64))(this);
  (*(void (**)(Rfc5626RegistrationPolicy *, uint64_t))(*(void *)this + 16))(this, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"choosing actual wait time in range [", 36);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)", ", 2);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"] = ", 4);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"s", 1);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  return v7;
}

uint64_t Rfc5626RegistrationPolicy::handleGeneralErrorFromAllProxies(Rfc5626RegistrationPolicy *this, const ImsResult *a2)
{
  SipRegistrationPolicy::setProxyOffset(this, 0);
  SipRegistrationPolicy::clearLastProxyErrors(this);
  uint64_t v4 = SipRegistrationPolicy::retryTimeFromResult(this, a2);
  if (v4 == -1) {
    uint64_t v4 = Rfc5626RegistrationPolicy::computeRetryInterval(this);
  }
  int v5 = *(uint64_t (**)(Rfc5626RegistrationPolicy *, const ImsResult *, uint64_t))(*(void *)this + 560);
  return v5(this, a2, v4);
}

void SipLocationDiscoveryBody::SipLocationDiscoveryBody(SipLocationDiscoveryBody *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1F20E87E0;
  SipLocationDiscoveryData::SipLocationDiscoveryData((SipLocationDiscoveryBody *)((char *)this + 32));
}

void sub_1C5671350(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F20CC498;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void SipLocationDiscoveryBody::generateXml(SipLocationDiscoveryBody *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  SipLocationDiscoveryData::SipLocationDiscoveryData((SipLocationDiscoveryData *)v3, (SipLocationDiscoveryBody *)((char *)this + 32));
  bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)((char *)v3 + 8), 0, 1, a2);
  bambi::XmlTreeItem::~XmlTreeItem((void **)v3 + 1);
}

void sub_1C56713F0(_Unwind_Exception *a1)
{
  bambi::XmlTreeItem::~XmlTreeItem(v1);
  _Unwind_Resume(a1);
}

void SipLocationDiscoveryBody::~SipLocationDiscoveryBody(void **this)
{
  SipLocationDiscoveryBody::~SipLocationDiscoveryBody(this);
  JUMPOUT(0x1C878E320);
}

{
  *this = &unk_1F20E87E0;
  bambi::XmlTreeItem::~XmlTreeItem(this + 5);
  *this = &unk_1F20CC498;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void SipLocationDiscoveryBody::clone(SipLocationDiscoveryBody *this)
{
}

void sub_1C56714B0(_Unwind_Exception *a1)
{
  *(void *)uint64_t v1 = &unk_1F20CC498;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  MEMORY[0x1C878E320](v1, 0x10B3C405772A826);
  _Unwind_Resume(a1);
}

void *SipLocationDiscoveryBody::contentType(SipLocationDiscoveryBody *this)
{
  return &SipLocationDiscoveryBody::kContentType;
}

uint64_t SipLocationDiscoveryBody::rootItem(SipLocationDiscoveryBody *this)
{
  return (uint64_t)this + 32;
}

uint64_t _GLOBAL__sub_I_SipLocationDiscoveryBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(SipLocationDiscoveryBody::kContentType, "application/vnd.3gpp.current-location-discovery+xml");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, SipLocationDiscoveryBody::kContentType, &dword_1C51D1000);
}

void SipReferToHeader::~SipReferToHeader(SipReferToHeader *this)
{
  *(void *)this = &unk_1F20D5808;
  SipUri::~SipUri((SipReferToHeader *)((char *)this + 104));
  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20D5808;
  SipUri::~SipUri((SipReferToHeader *)((char *)this + 104));
  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipReferToHeader::clone(SipReferToHeader *this)
{
}

void sub_1C567179C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4072661F37);
  _Unwind_Resume(a1);
}

void ImsNetworkPathManager::~ImsNetworkPathManager(dispatch_object_t *this)
{
  *this = (dispatch_object_t)&unk_1F20E8908;
  dispatch_release(this[4]);
  std::__tree<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::__map_value_compare<ImsNetworkPathDelegate *,std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::less<ImsNetworkPathDelegate *>,true>,std::allocator<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>>>::destroy((uint64_t)(this + 1), this[2]);
}

void ImsNetworkPathManager::interfaceAvailable(uint64_t a1, uint64_t a2)
{
  memset(&v6, 0, sizeof(v6));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  unsigned int v3 = *(NSObject **)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  void v4[2] = ___ZN21ImsNetworkPathManager18interfaceAvailableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_61;
  _OWORD v4[4] = a1;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  dispatch_async(v3, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C5671910(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 25) < 0) {
    operator delete(*(void **)(v1 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21ImsNetworkPathManager18interfaceAvailableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v27, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v27, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"inteface ", 9);
  uint64_t v4 = (void **)(a1 + 40);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 32))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" path satisified", 16);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v34 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  int v5 = *(void **)(v2 + 8);
  long long v24 = (void *)(v2 + 8);
  unsigned int v26 = (void *)(v2 + 16);
  if (v5 != (void *)(v2 + 16))
  {
    do
    {
      std::string v6 = v5 + 6;
      uint64_t v7 = (void *)v5[6];
      if (!v7) {
        goto LABEL_40;
      }
      long long v25 = (uint64_t **)(v5 + 5);
      uint64_t v8 = (void **)(v5 + 6);
      do
      {
        char v9 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, v4);
        if (v9 >= 0) {
          char v10 = v7;
        }
        else {
          char v10 = v7 + 1;
        }
        if (v9 >= 0) {
          uint64_t v8 = (void **)v7;
        }
        uint64_t v7 = (void *)*v10;
      }
      while (*v10);
      if (v8 == (void **)v6
        || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, v8 + 4) & 0x80) != 0)
      {
        goto LABEL_40;
      }
      __p[0] = v4;
      *((unsigned char *)std::__tree<std::__value_type<std::string,ImsNetworkPathManager::Interface>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsNetworkPathManager::Interface>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsNetworkPathManager::Interface>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v25, v4, (long long **)__p)+ 64) = 1;
      uint64_t v11 = *v25;
      if (*v25 == v6) {
        goto LABEL_35;
      }
      int v12 = 1;
      do
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "net");
        std::string::basic_string[abi:ne180100]<0>(v31, "");
        uint64_t v13 = ims::spam((uint64_t)__p, (uint64_t)v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"interface ", 10);
        *(unsigned char *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v13 + 32))(v13, v11 + 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" is ", 4);
        *(unsigned char *)(v13 + 17) = 0;
        if (*((unsigned char *)v11 + 64)) {
          BOOL v14 = "satisfied";
        }
        else {
          BOOL v14 = "UNsatisfied";
        }
        if (*((unsigned char *)v11 + 64)) {
          uint64_t v15 = 9;
        }
        else {
          uint64_t v15 = 11;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)v14, v15);
        *(unsigned char *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v13 + 17) = 0;
        if (v32 < 0) {
          operator delete(v31[0]);
        }
        if (v34 < 0) {
          operator delete(__p[0]);
        }
        BOOL v16 = *((unsigned char *)v11 + 64) != 0;
        uint64_t v17 = (uint64_t *)v11[1];
        if (v17)
        {
          do
          {
            uint64_t v18 = v17;
            uint64_t v17 = (uint64_t *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            uint64_t v18 = (uint64_t *)v11[2];
            BOOL v19 = *v18 == (void)v11;
            uint64_t v11 = v18;
          }
          while (!v19);
        }
        v12 &= v16;
        uint64_t v11 = v18;
      }
      while (v18 != v6);
      if (v12)
      {
LABEL_35:
        uint64_t v20 = v5[4];
        std::string::basic_string[abi:ne180100]<0>(__p, "net");
        std::string::basic_string[abi:ne180100]<0>(v31, "");
        uint64_t v21 = ims::debug((uint64_t)__p, (uint64_t)v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"All interface paths satisfied for delegate!", 43);
        *(unsigned char *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v21 + 17) = 0;
        if (v32 < 0) {
          operator delete(v31[0]);
        }
        if (v34 < 0) {
          operator delete(__p[0]);
        }
        v27[0] = (void *)MEMORY[0x1E4F143A8];
        v27[1] = (void *)0x40000000;
        uint64_t v28 = ___ZN21ImsNetworkPathManager24handleInterfaceAvailableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        uint64_t v29 = &__block_descriptor_tmp_10;
        uint64_t v30 = v20;
        ims::performBlock((IMSClientManager *)v27);
        ImsNetworkPathManager::Evaluation::cleanup(v25);
        int v22 = std::__tree<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::__map_value_compare<ImsNetworkPathDelegate *,std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::less<ImsNetworkPathDelegate *>,true>,std::allocator<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>>>::erase(v24, (uint64_t)v5);
      }
      else
      {
LABEL_40:
        long long v23 = (void *)v5[1];
        if (v23)
        {
          do
          {
            int v22 = v23;
            long long v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            int v22 = (void *)v5[2];
            BOOL v19 = *v22 == (void)v5;
            int v5 = v22;
          }
          while (!v19);
        }
      }
      int v5 = v22;
    }
    while (v22 != v26);
  }
}

void sub_1C5671DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ImsNetworkPathManager::interfaceUnavailable(uint64_t a1, uint64_t a2)
{
  memset(&v6, 0, sizeof(v6));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  uint64_t v3 = *(NSObject **)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 1174405120;
  void v4[2] = ___ZN21ImsNetworkPathManager20interfaceUnavailableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  v4[3] = &__block_descriptor_tmp_4_3;
  _OWORD v4[4] = a1;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v6;
  }
  dispatch_async(v3, v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_1C5671F30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 25) < 0) {
    operator delete(*(void **)(v1 - 48));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN21ImsNetworkPathManager20interfaceUnavailableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v15, "net");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v3 = ims::error((uint64_t)v15, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"inteface ", 9);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 32))(v3, a1 + 40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" path failed!", 13);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
  std::string v6 = *(void **)(v2 + 8);
  uint64_t v4 = (void *)(v2 + 8);
  int v5 = v6;
  if (v6 != v4 + 1)
  {
    do
    {
      uint64_t v7 = (void *)v5[6];
      if (!v7) {
        goto LABEL_18;
      }
      uint64_t v8 = (void **)(v5 + 6);
      do
      {
        char v9 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, (void **)(a1 + 40));
        if (v9 >= 0) {
          char v10 = v7;
        }
        else {
          char v10 = v7 + 1;
        }
        if (v9 >= 0) {
          uint64_t v8 = (void **)v7;
        }
        uint64_t v7 = (void *)*v10;
      }
      while (*v10);
      if (v8 == v5 + 6
        || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 40), v8 + 4) & 0x80) != 0)
      {
LABEL_18:
        int v12 = (void *)v5[1];
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            int v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v13 = (void *)v5[2];
            BOOL v14 = *v13 == (void)v5;
            int v5 = v13;
          }
          while (!v14);
        }
      }
      else
      {
        uint64_t v11 = v5[4];
        memset(&__p, 0, sizeof(__p));
        if (*(char *)(a1 + 63) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 40), *(void *)(a1 + 48));
        }
        else {
          std::string __p = *(std::string *)(a1 + 40);
        }
        v15[0] = (void *)MEMORY[0x1E4F143A8];
        v15[1] = (void *)1174405120;
        BOOL v16 = ___ZN21ImsNetworkPathManager26handleInterfaceUnavailableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
        uint64_t v17 = &__block_descriptor_tmp_14_3;
        uint64_t v18 = v11;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v19, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string v19 = __p;
        }
        ims::performBlock((IMSClientManager *)v15);
        ImsNetworkPathManager::Evaluation::cleanup(v5 + 5);
        uint64_t v13 = std::__tree<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::__map_value_compare<ImsNetworkPathDelegate *,std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::less<ImsNetworkPathDelegate *>,true>,std::allocator<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>>>::erase(v4, (uint64_t)v5);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v19.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      int v5 = v13;
    }
    while (v13 != v4 + 1);
  }
}

void sub_1C5672220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (***___ZN21ImsNetworkPathManager24handleInterfaceAvailableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1))(void)
{
  double result = *(uint64_t (****)(void))(a1 + 32);
  if (result) {
    return (uint64_t (***)(void))(**result)(result);
  }
  return result;
}

void *ImsNetworkPathManager::Evaluation::cleanup(void *this)
{
  uint64_t v1 = this + 1;
  uint64_t v2 = (void *)*this;
  if ((void *)*this != this + 1)
  {
    do
    {
      this = (void *)v2[7];
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 24))(this);
      }
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v1);
  }
  return this;
}

uint64_t ___ZN21ImsNetworkPathManager26handleInterfaceUnavailableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 8))(result, a1 + 40);
  }
  return result;
}

void ImsNetworkPathManager::evaluateInterface(uint64_t a1, uint64_t a2, long long **a3)
{
  memset(&v7, 0, sizeof(v7));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v7, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  std::string::basic_string[abi:ne180100]<0>(v6, "net");
  std::string::basic_string[abi:ne180100]<0>(v5, "");
  uint64_t v3 = ims::debug((uint64_t)v6, (uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Attempting to evaluate interfaces ", 34);
  *(unsigned char *)(v3 + 17) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v4, " ");
  ims::join<std::__wrap_iter<std::string const*>>();
}

void sub_1C567258C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  *(void *)(v29 - 80) = v29 - 56;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v29 - 80));
  _Unwind_Resume(a1);
}

void ___ZN21ImsNetworkPathManager17evaluateInterfaceEP22ImsNetworkPathDelegateRKNSt3__16vectorINS2_12basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS7_IS9_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  ImsNetworkPathManager::abort_sync((ImsNetworkPathManager *)v2, *(ImsNetworkPathDelegate **)(a1 + 40));
  v19[0] = 0;
  v19[1] = 0;
  uint64_t v18 = v19;
  uint64_t v3 = *(long long **)(a1 + 48);
  if (v3 != *(long long **)(a1 + 56))
  {
    memset(&__p, 0, sizeof(__p));
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v3, *((void *)v3 + 1));
    }
    else
    {
      long long v4 = *v3;
      __p.__r_.__value_.__r.__words[2] = *((void *)v3 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
    }
    operator new();
  }
  std::string::size_type v5 = *(void *)(a1 + 40);
  __p.__r_.__value_.__r.__words[2] = 0;
  uint64_t v17 = 0;
  __p.__r_.__value_.__r.__words[0] = v5;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
  std::string v7 = (uint64_t **)(v2 + 16);
  std::string v6 = *(uint64_t **)(v2 + 16);
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v6;
        std::string::size_type v9 = v6[4];
        if (v9 <= v5) {
          break;
        }
        std::string v6 = *v8;
        std::string v7 = v8;
        if (!*v8) {
          goto LABEL_14;
        }
      }
      if (v9 >= v5) {
        break;
      }
      std::string v6 = v8[1];
      if (!v6)
      {
        std::string v7 = v8 + 1;
        goto LABEL_14;
      }
    }
  }
  else
  {
    uint64_t v8 = (uint64_t **)(v2 + 16);
LABEL_14:
    char v10 = (uint64_t *)operator new(0x40uLL);
    uint64_t v11 = v10;
    long long v12 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
    v10[6] = __p.__r_.__value_.__r.__words[2];
    uint64_t v13 = v10 + 6;
    _OWORD v10[4] = v5;
    _OWORD v10[5] = v12;
    uint64_t v14 = v17;
    v10[7] = v17;
    if (v14)
    {
      *(void *)(*((void *)&v12 + 1) + 16) = v13;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&__p.__r_.__value_.__r.__words[2];
      __p.__r_.__value_.__r.__words[2] = 0;
      uint64_t v17 = 0;
    }
    else
    {
      _OWORD v10[5] = (uint64_t)v13;
    }
    uint64_t *v10 = 0;
    v10[1] = 0;
    void v10[2] = (uint64_t)v8;
    *std::string v7 = v10;
    uint64_t v15 = **(void **)(v2 + 8);
    if (v15)
    {
      *(void *)(v2 + 8) = v15;
      uint64_t v11 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v2 + 16), v11);
    ++*(void *)(v2 + 24);
  }
  std::__tree<std::string>::destroy((uint64_t)&__p.__r_.__value_.__l.__size_, (char *)__p.__r_.__value_.__r.__words[2]);
  std::__tree<std::string>::destroy((uint64_t)&v18, v19[0]);
}

void sub_1C567296C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, char *a11, uint64_t a12, char a13, char *a14)
{
  std::__tree<std::string>::destroy(v14, a11);
  std::__tree<std::string>::destroy((uint64_t)&a13, a14);
  _Unwind_Resume(a1);
}

void *ImsNetworkPathManager::abort_sync(ImsNetworkPathManager *this, ImsNetworkPathDelegate *a2)
{
  long long v4 = (void *)*((void *)this + 2);
  uint64_t result = (void *)((char *)this + 16);
  uint64_t v3 = v4;
  if (v4)
  {
    std::string::size_type v5 = result - 1;
    uint64_t v6 = (uint64_t)result;
    do
    {
      unint64_t v7 = v3[4];
      BOOL v8 = v7 >= (unint64_t)a2;
      if (v7 >= (unint64_t)a2) {
        std::string::size_type v9 = v3;
      }
      else {
        std::string::size_type v9 = v3 + 1;
      }
      if (v8) {
        uint64_t v6 = (uint64_t)v3;
      }
      uint64_t v3 = (void *)*v9;
    }
    while (*v9);
    if ((void *)v6 != result && *(void *)(v6 + 32) <= (unint64_t)a2)
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v10 = ims::error((uint64_t)v13, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Aborting path evaluation for old interfaces", 43);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (v14 < 0) {
        operator delete(v13[0]);
      }
      ImsNetworkPathManager::Evaluation::cleanup((void *)(v6 + 40));
      return std::__tree<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::__map_value_compare<ImsNetworkPathDelegate *,std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::less<ImsNetworkPathDelegate *>,true>,std::allocator<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>>>::erase(v5, v6);
    }
  }
  return result;
}

void sub_1C5672B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *__copy_helper_block_e8_48c89_ZTSNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEE(std::string *a1, uint64_t a2)
{
  a1[2].__r_.__value_.__r.__words[0] = 0;
  a1[2].__r_.__value_.__l.__size_ = 0;
  uint64_t v2 = a1 + 2;
  v2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v2, *(long long **)(a2 + 48), *(long long **)(a2 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 3));
}

void __destroy_helper_block_e8_48c89_ZTSNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEE(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void *___ZN21ImsNetworkPathManager5abortEP22ImsNetworkPathDelegate_block_invoke(uint64_t a1)
{
  return ImsNetworkPathManager::abort_sync(*(ImsNetworkPathManager **)(a1 + 32), *(ImsNetworkPathDelegate **)(a1 + 40));
}

uint64_t *std::__tree<std::__value_type<std::string,ImsNetworkPathManager::Interface>,std::__map_value_compare<std::string,std::__value_type<std::string,ImsNetworkPathManager::Interface>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ImsNetworkPathManager::Interface>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, long long **a3)
{
  uint64_t v12 = 0;
  std::string::size_type v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = v5;
    BOOL v8 = *a3;
    uint64_t v6 = (uint64_t *)operator new(0x48uLL);
    std::string::size_type v9 = (std::string *)(v6 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v10 = *v8;
      v6[6] = *((void *)v8 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, v12, v7, v6);
  }
  return v6;
}

void sub_1C5672C44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::__map_value_compare<ImsNetworkPathDelegate *,std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::less<ImsNetworkPathDelegate *>,true>,std::allocator<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::__map_value_compare<ImsNetworkPathDelegate *,std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::less<ImsNetworkPathDelegate *>,true>,std::allocator<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::__map_value_compare<ImsNetworkPathDelegate *,std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::less<ImsNetworkPathDelegate *>,true>,std::allocator<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>>>::destroy(a1, a2[1]);
    std::__tree<std::string>::destroy((uint64_t)(a2 + 5), (char *)a2[6]);
    operator delete(a2);
  }
}

void *std::__tree<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::__map_value_compare<ImsNetworkPathDelegate *,std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>,std::less<ImsNetworkPathDelegate *>,true>,std::allocator<std::__value_type<ImsNetworkPathDelegate *,ImsNetworkPathManager::Evaluation>>>::erase(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  if (v3)
  {
    do
    {
      long long v4 = v3;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  else
  {
    std::string::size_type v5 = (void *)a2;
    do
    {
      long long v4 = (void *)v5[2];
      BOOL v6 = *v4 == (void)v5;
      std::string::size_type v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2) {
    *a1 = v4;
  }
  unint64_t v7 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v7, (uint64_t *)a2);
  std::__tree<std::string>::destroy(a2 + 40, *(char **)(a2 + 48));
  operator delete((void *)a2);
  return v4;
}

void sub_1C5672DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void __cxx_global_array_dtor_5()
{
  for (uint64_t i = 0; i != -120; i -= 24)
  {
    if (registrationModeNames[i + 119] < 0) {
      operator delete(*(void **)&registrationModeNames[i + 96]);
    }
  }
}

uint64_t _GLOBAL__sub_I_SipRegistrationMode_cpp()
{
  uint64_t result = __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_5, 0, &dword_1C51D1000);
  SipRegistrationMode::kModeNormal = 0;
  SipRegistrationMode::kModeLimitedAccess = 1;
  SipRegistrationMode::kModeEmergency = 2;
  SipRegistrationMode::kModeDisabled = 3;
  SipRegistrationMode::kModeDisabledCountry = 4;
  return result;
}

uint64_t SipRegistrationNotification::SipRegistrationNotification(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F20E8B48;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
    unint64_t v7 = *(std::__shared_weak_count **)(a1 + 40);
    *(void *)(a1 + 32) = v5;
    *(void *)(a1 + 40) = v6;
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 32) = v5;
  }
  time_t v8 = time(0);
  if ((unint64_t)(a3 + 1) >= 2) {
    time_t v9 = v8;
  }
  else {
    time_t v9 = 0;
  }
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9 + a3;
  return a1;
}

void sub_1C5672F48(_Unwind_Exception *exception_object)
{
  if (*v1) {
    std::__shared_weak_count::__release_weak(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationNotification::SipRegistrationNotification(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F20E8B48;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 40);
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = v5;
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(void *)(a1 + 32) = v4;
    *(void *)(a1 + 40) = 0;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

time_t SipRegistrationNotification::secondsUntilNextRetry(SipRegistrationNotification *this)
{
  time_t result = *((void *)this + 2);
  if ((unint64_t)(result + 1) >= 2)
  {
    time_t v3 = time(0);
    time_t v4 = *((void *)this + 2);
    BOOL v5 = v4 < v3;
    time_t v6 = v4 - v3;
    if (v5) {
      return 0;
    }
    else {
      return v6;
    }
  }
  return result;
}

uint64_t SipRegistrationNotification::isEmergency(SipRegistrationNotification *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2) {
    return 0;
  }
  time_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  time_t v4 = v3;
  uint64_t v5 = *((void *)this + 4);
  if (v5) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 248))(v5);
  }
  else {
    uint64_t v6 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

void sub_1C56730A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BOOL SipRegistrationNotification::isInitialRegistration(SipRegistrationNotification *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (!v2) {
    return 0;
  }
  time_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 4);
  BOOL v6 = v4 && (v5 = *(void *)(v4 + 3632)) != 0 && *(unsigned __int8 *)(v5 + 228) != 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v6;
}

void SipRegistrationStateNotification::SipRegistrationStateNotification(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipRegistrationNotification::SipRegistrationNotification((uint64_t)a1, v5, a3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *a1 = &unk_1F20E8A10;
  operator new();
}

void sub_1C56731D0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v2, 0x10B3C40A119BF27);
  *uint64_t v1 = &unk_1F20E8B48;
  uint64_t v4 = (std::__shared_weak_count *)v1[5];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void SipRegistrationStateNotification::SipRegistrationStateNotification(SipRegistrationStateNotification *this, const SipRegistrationStateNotification *a2)
{
  *(void *)SipRegistrationNotification::SipRegistrationNotification((uint64_t)this, (uint64_t)a2) = &unk_1F20E8A10;
  operator new();
}

void sub_1C56732B4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v2, 0x10B3C40A119BF27);
  *uint64_t v1 = &unk_1F20E8B48;
  uint64_t v4 = (std::__shared_weak_count *)v1[5];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void SipRegistrationStateNotification::~SipRegistrationStateNotification(SipRegistrationStateNotification *this)
{
  *(void *)this = &unk_1F20E8A10;
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = &unk_1F20E8B48;
  time_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void SipRegistrationActiveNotification::SipRegistrationActiveNotification(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  v3[0] = *a2;
  v3[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  SipRegistrationStateNotification::SipRegistrationStateNotification(a1, v3, 0);
}

void sub_1C56734D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationActiveNotification::notifyDelegate(SipRegistrationActiveNotification *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2)
  {
    time_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = (SipRegistrationClient *)*((void *)this + 4);
      if (v5) {
        SipRegistrationClient::notifyDelegateOfRegistrationActive(v5, this);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5673568(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipRegistrationTerminatedNotification::SipRegistrationTerminatedNotification(void *a1, uint64_t *a2)
{
  uint64_t v2 = a2[1];
  v3[0] = *a2;
  v3[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  SipRegistrationStateNotification::SipRegistrationStateNotification(a1, v3, -1);
}

void sub_1C5673628(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipRegistrationTerminatedNotification::networkInitiated(SipRegistrationTerminatedNotification *this)
{
  return (*((_DWORD *)this + 14) < 0x19u) & (0x1808007u >> *((_DWORD *)this + 14));
}

void SipRegistrationTerminatedNotification::notifyDelegate(SipRegistrationTerminatedNotification *this, char a2)
{
  time_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      BOOL v6 = v5;
      unint64_t v7 = (SipRegistrationClient *)*((void *)this + 4);
      if (v7) {
        SipRegistrationClient::notifyDelegateOfRegistrationTermination(v7, this, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C56736D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipRegistrationErrorNotification::SipRegistrationErrorNotification(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  BOOL v6 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipRegistrationNotification::SipRegistrationNotification(a1, v9, a3);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *(void *)a1 = &unk_1F20E8B10;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = &unk_1F20B2680;
  *(void *)(a1 + 72) = &_bambiDomain;
  *(_DWORD *)(a1 + 80) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(_WORD *)(a1 + 138) = 0;
  *(unsigned char *)(a1 + 140) = 0;
  *(void *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)a4;
  ImsResult::operator=(a1 + 64, a4 + 16);
  int v7 = *(_DWORD *)(a4 + 88);
  *(unsigned char *)(a1 + 140) = *(unsigned char *)(a4 + 92);
  *(_DWORD *)(a1 + 136) = v7;
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a4 + 96));
  *(void *)(a1 + 168) = *(void *)(a4 + 120);
  return a1;
}

void sub_1C5673804(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipRegistrationErrorNotification::SipRegistrationErrorNotification(SipRegistrationErrorNotification *this, const SipRegistrationErrorNotification *a2)
{
  uint64_t v4 = (void *)SipRegistrationNotification::SipRegistrationNotification((uint64_t)this, (uint64_t)a2);
  void *v4 = &unk_1F20E8B10;
  void v4[6] = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = &unk_1F20B2680;
  *((void *)this + 9) = &_bambiDomain;
  *((_DWORD *)this + 20) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((_WORD *)this + 69) = 0;
  *((unsigned char *)this + 140) = 0;
  *((void *)this + 18) = 0;
  *((_DWORD *)this + 43) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 20) = 0;
  *((unsigned char *)this + 168) = 0;
  *((_OWORD *)v4 + 3) = *((_OWORD *)a2 + 3);
  ImsResult::operator=((uint64_t)(v4 + 8), (uint64_t)a2 + 64);
  int v5 = *((_DWORD *)a2 + 34);
  *((unsigned char *)this + 140) = *((unsigned char *)a2 + 140);
  *((_DWORD *)this + 34) = v5;
  std::string::operator=((std::string *)this + 6, (const std::string *)a2 + 6);
  *((void *)this + 21) = *((void *)a2 + 21);
}

void sub_1C5673938(_Unwind_Exception *a1)
{
  SipRegistrationMetrics::~SipRegistrationMetrics(v2);
  *uint64_t v1 = &unk_1F20E8B48;
  uint64_t v4 = (std::__shared_weak_count *)v1[5];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void SipRegistrationErrorNotification::notifyDelegate(SipRegistrationErrorNotification *this, char a2)
{
  time_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v3)
  {
    int v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      BOOL v6 = v5;
      int v7 = (SipRegistrationClient *)*((void *)this + 4);
      if (v7) {
        SipRegistrationClient::notifyDelegateOfRegistrationError(v7, this, a2, 0);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C56739F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipRegistrationActiveNotification::clone(SipRegistrationActiveNotification *this)
{
}

void sub_1C5673B80(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C4029BB2271);
  _Unwind_Resume(a1);
}

void *SipRegistrationActiveNotification::state(SipRegistrationActiveNotification *this)
{
  return &SipRegistrationState::kStateActive;
}

uint64_t SipRegistrationActiveNotification::networkInitiated(SipRegistrationActiveNotification *this)
{
  return *((unsigned __int8 *)this + 184);
}

void SipRegistrationTerminatedNotification::~SipRegistrationTerminatedNotification(SipRegistrationTerminatedNotification *this)
{
  SipRegistrationStateNotification::~SipRegistrationStateNotification(this);
  JUMPOUT(0x1C878E320);
}

void SipRegistrationTerminatedNotification::clone(SipRegistrationTerminatedNotification *this)
{
}

void sub_1C5673C7C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C409080A61CLL);
  _Unwind_Resume(a1);
}

void *SipRegistrationTerminatedNotification::state(SipRegistrationTerminatedNotification *this)
{
  return &SipRegistrationState::kStateTerminated;
}

void SipRegistrationErrorNotification::clone(SipRegistrationErrorNotification *this)
{
}

void sub_1C5673D94(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C40A28041C4);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_SipRegistrationNotification_cpp()
{
  *(void *)&long long v28 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v2, "RegistrationExpired");
  std::string::basic_string[abi:ne180100]<0>(v3, "NotifyRequest");
  std::string::basic_string[abi:ne180100]<0>(v4, "PcscfRestoration");
  std::string::basic_string[abi:ne180100]<0>(v5, "SuccessfulDeregistration");
  std::string::basic_string[abi:ne180100]<0>(v6, "FailedDeregistration");
  std::string::basic_string[abi:ne180100]<0>(v7, "TransactionErrorRequiringRegistration");
  std::string::basic_string[abi:ne180100]<0>(v8, "TransactionErrorRequiringCSFB");
  std::string::basic_string[abi:ne180100]<0>(v9, "SRVCC");
  std::string::basic_string[abi:ne180100]<0>(v10, "RegistrationTimeoutOverIPSec");
  std::string::basic_string[abi:ne180100]<0>(v11, "ServiceUnavailable");
  std::string::basic_string[abi:ne180100]<0>(v12, "LimitedAccessMode");
  std::string::basic_string[abi:ne180100]<0>(v13, "DisabledMode");
  std::string::basic_string[abi:ne180100]<0>(v14, "SystemClockChange");
  std::string::basic_string[abi:ne180100]<0>(v15, "DisabledCountryMode");
  std::string::basic_string[abi:ne180100]<0>(v16, "AirplaneModeToggled");
  std::string::basic_string[abi:ne180100]<0>(v17, "TlsConnectionLost");
  std::string::basic_string[abi:ne180100]<0>(v18, "IPSecTransportExpiration");
  std::string::basic_string[abi:ne180100]<0>(v19, "ConnectivityReset");
  std::string::basic_string[abi:ne180100]<0>(v20, "CallFailure");
  std::string::basic_string[abi:ne180100]<0>(v21, "ProxyRedirect");
  std::string::basic_string[abi:ne180100]<0>(v22, "EmergencyRedial");
  std::string::basic_string[abi:ne180100]<0>(v23, "NoLegacyFallback");
  std::string::basic_string[abi:ne180100]<0>(v24, "OutOfServiceExpiration");
  std::string::basic_string[abi:ne180100]<0>(v25, "LazuliTlsConnectionLost");
  std::string::basic_string[abi:ne180100]<0>(v26, "LazuliTcpConnectionLost");
  std::string::basic_string[abi:ne180100]<0>(v27, "CrlfPingPongTimeout");
  _terminationReasonStrings = 0;
  qword_1EBBDAFA0 = 0;
  qword_1EBBDAFA8 = 0;
  _terminationReasonStrings = (uint64_t)operator new(0x270uLL);
  qword_1EBBDAFA0 = _terminationReasonStrings;
  qword_1EBBDAFA8 = _terminationReasonStrings + 624;
  qword_1EBBDAFA0 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&qword_1EBBDAFA8, &v2, &v28, (std::string *)_terminationReasonStrings);
  uint64_t v0 = 78;
  do
  {
    if (*((char *)&v3[v0 - 1] - 1) < 0) {
      operator delete((void *)v3[v0 - 4]);
    }
    v0 -= 3;
  }
  while (v0 * 8);
  return __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &_terminationReasonStrings, &dword_1C51D1000);
}

void sub_1C56740D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  uint64_t v13 = v12;
  qword_1EBBDAFA0 = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v15 = 624;
  while (1)
  {
    if (*(&a12 + v15 - 1) < 0) {
      operator delete(*(void **)(&a12 + v15 - 24));
    }
    v15 -= 24;
    if (!v15) {
      _Unwind_Resume(a1);
    }
  }
}

const char *audio::asString(unsigned int a1)
{
  if (a1 > 0x13) {
    return "???";
  }
  else {
    return off_1E6512448[(char)a1];
  }
}

void XcapCallForwardManager::_fetchCallForward(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 360) || a2 <= 6 && ((1 << a2) & 0x64) != 0) {
    operator new();
  }
  std::__tree<std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>,std::__map_value_compare<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>,std::less<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>>,true>,std::allocator<std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>>>::find<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>>(a1 + 384, a2, 0);
  operator new();
}

void sub_1C56742F4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B2C409DA9FE99);
  _Unwind_Resume(a1);
}

void XcapCallForwardManager::setCallForward(uint64_t a1, uint64_t a2, int a3, std::string *a4, int a5)
{
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  SipUri::SipUri((uint64_t)v17, a4);
  if (SipUri::needsPhoneContext((SipUri *)v17)) {
    SipUri::setPhoneContext((uint64_t **)v17, a1 + 64);
  }
  if (!*(void *)(a1 + 400))
  {
    std::string::basic_string[abi:ne180100]<0>(v15, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::info((uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"No Rule-Ids. Perform GET before PUT", 35);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0) {
      operator delete(v15[0]);
    }
    char v11 = a2;
    char v12 = a3;
    SipUri::SipUri((SipUri *)v10, (const SipUri *)v17);
    v10[102] = a5;
    XcapCallForwardManager::_fetchCallForward(a1, 5u);
  }
  XcapCallForwardManager::_setCallForward(a1, a2, a3, (uint64_t)v17, a5);
  SipUri::~SipUri((SipUri *)v17);
}

void sub_1C5674544(_Unwind_Exception *a1)
{
  SipUri::~SipUri(v1);
  SipUri::~SipUri((SipUri *)&STACK[0x200]);
  _Unwind_Resume(a1);
}

void ___ZN22XcapCallForwardManager14setCallForwardEbN15XcapCDCondition9ConditionERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEiU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1)
{
}

void XcapCallForwardManager::_setCallForward(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  time_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  XcapCallForwardManager::CallForwardInfo::fetchMappedConditions(&v8, (void *)(a1 + 376), a3);
  if (*(unsigned char *)(a1 + 361) || !*(void *)(a1 + 400))
  {
    memset(v7, 0, sizeof(v7));
    std::vector<XcapCDCondition::Condition>::__init_with_size[abi:ne180100]<XcapCDCondition::Condition*,XcapCDCondition::Condition*>(v7, v8, (uint64_t)v9, v9 - v8);
    *(void *)&long long v12 = 0;
    memset(v11, 0, sizeof(v11));
    XcapCallForwardManager::_generateNodeSelectorForCFDoc((XcapCallForwardManager *)v11);
  }
  if (v8 != v9)
  {
    uint64_t v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
    XcapCallForwardManager::_generateNodeSelectorForCFRule((uint64_t)&v13);
  }
  if (a5)
  {
    uint64_t v15 = 0;
    long long v13 = 0u;
    long long v14 = 0u;
    XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)&v13);
  }
  if (v8) {
    operator delete(v8);
  }
}

void sub_1C5674BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42,void *a43)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C878E320](v43, 0x10B2C409DA9FE99);
  bambi::XmlTreeItem::~XmlTreeItem(&a43);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)(v44 - 144));
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_48c11_ZTS6SipUri(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_e8_48c11_ZTS6SipUri(uint64_t a1)
{
}

void XcapCallForwardManager::activateCallForward(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(void *)(a1 + 400))
  {
    std::string::basic_string[abi:ne180100]<0>(v7, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::info((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"No Rule-Ids. Perform GET before PUT", 35);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
    XcapCallForwardManager::_fetchCallForward(a1, 5u);
  }
  XcapCallForwardManager::_setCallForwardActivationMode(a1, a3);
}

void sub_1C5674F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v22 - 49) < 0) {
    operator delete(*(void **)(v22 - 72));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN22XcapCallForwardManager19activateCallForwardEbN15XcapCDCondition9ConditionEU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1)
{
}

void XcapCallForwardManager::_setCallForwardActivationMode(uint64_t a1, int a2)
{
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  XcapCallForwardManager::CallForwardInfo::fetchMappedConditions(&v4, (void *)(a1 + 376), a2);
  if (*(unsigned char *)(a1 + 361) || !*(void *)(a1 + 400))
  {
    memset(v3, 0, sizeof(v3));
    std::vector<XcapCDCondition::Condition>::__init_with_size[abi:ne180100]<XcapCDCondition::Condition*,XcapCDCondition::Condition*>(v3, v4, (uint64_t)v5, v5 - v4);
    uint64_t v9 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    XcapCallForwardManager::_generateNodeSelectorForCFDoc((XcapCallForwardManager *)&v7);
  }
  if (v4 != v5)
  {
    uint64_t v9 = 0;
    long long v7 = 0u;
    long long v8 = 0u;
    XcapCallForwardManager::_generateNodeSelectorForCFRule((uint64_t)&v7);
  }
  if (v4) {
    operator delete(v4);
  }
}

void sub_1C56753EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,std::__shared_weak_count *a39)
{
  MEMORY[0x1C878E320](v39, 0x10B2C409DA9FE99);
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)(v40 - 160));
  if (a12) {
    operator delete(a12);
  }
  if (a10) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

void XcapCallForwardManager::_generateNodeSelectorForCFDoc(XcapCallForwardManager *this)
{
  *((void *)this + 4) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  XcapNodeSelector::XcapNodeSelector(this);
}

void sub_1C5675598(_Unwind_Exception *a1)
{
  XcapNodeSelector::~XcapNodeSelector(v1);
  _Unwind_Resume(a1);
}

void XcapCallForwardManager::_generateNodeSelectorForCFRule(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)a1);
}

void sub_1C5675664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  XcapNodeSelector::~XcapNodeSelector(v15);
  _Unwind_Resume(a1);
}

void ___ZN22XcapCallForwardManager17_fetchCallForwardEN15XcapCDCondition9ConditionEU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, uint64_t a2)
{
  if (((*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16)) & 1) == 0)operator new(); {
  uint64_t v4 = *(void *)(a1 + 32);
  }
  ImsResult::ImsResult((ImsResult *)v5, (const std::string *)a2);
  (*(void (**)(uint64_t, unsigned char *, void))(v4 + 16))(v4, v5, 0);
  ImsResult::~ImsResult((ImsResult *)v5);
}

void sub_1C5675C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  MEMORY[0x1C878E320](v38, 0x10F3C403C81E1ECLL);
  _Unwind_Resume(a1);
}

void XcapCallForwardManager::CallForwardInfo::fetchMappedConditions(void *a1, void *a2, int a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if ((a3 - 5) > 1)
  {
    long long v25 = operator new(1uLL);
    unsigned char *v25 = a3;
    a1[1] = v25 + 1;
    a1[2] = v25 + 1;
    *a1 = v25;
    if (a3 != 3) {
      return;
    }
    unsigned int v26 = v25;
    uint64_t v27 = (uint64_t)(a2 + 1);
    uint64_t v28 = std::__tree<std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>,std::__map_value_compare<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>,std::less<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>>,true>,std::allocator<std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>>>::find<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>>((uint64_t)(a2 + 1), 3u, 0);
    uint64_t v29 = a2 + 2;
    if (v29 == (void *)v28
      || v29 == (void *)std::__tree<std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>,std::__map_value_compare<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>,std::less<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>>,true>,std::allocator<std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>>>::find<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>>(v27, 4u, 0))
    {
      return;
    }
    uint64_t v30 = operator new(2uLL);
    _WORD *v30 = 1027;
    xpc_object_t v31 = v30 + 1;
    *a1 = v30;
    a1[2] = v30 + 1;
LABEL_44:
    operator delete(v26);
    a1[1] = v31;
    return;
  }
  if (!a2[3])
  {
    char v32 = operator new(1uLL);
    unsigned char *v32 = 1;
    a1[1] = v32 + 1;
    a1[2] = v32 + 1;
    *a1 = v32;
    long long v33 = operator new(2uLL);
    _WORD *v33 = 513;
    *a1 = v33;
    a1[2] = v33 + 1;
    operator delete(v32);
    a1[1] = v33 + 1;
    unsigned int v26 = operator new(4uLL);
    v26[2] = 3;
    *(_WORD *)unsigned int v26 = *v33;
    *a1 = v26;
    a1[2] = v26 + 4;
    operator delete(v33);
    void v26[3] = 4;
    a1[1] = v26 + 4;
    if (a3 != 5) {
      return;
    }
    char v34 = operator new(8uLL);
    v34[4] = 0;
    xpc_object_t v31 = v34 + 5;
    *(_DWORD *)char v34 = *(_DWORD *)v26;
    *a1 = v34;
    a1[2] = v34 + 8;
    goto LABEL_44;
  }
  uint64_t v6 = (void *)a2[1];
  long long v7 = a2 + 2;
  if (v6 != a2 + 2)
  {
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    xpc_object_t v35 = a2 + 2;
    do
    {
      memset(__p, 0, sizeof(__p));
      __int16 v11 = *((_WORD *)v6 + 16);
      LOBYTE(__p[0]) = v11;
      if (*((char *)v6 + 63) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)v6[5], v6[6]);
        int v12 = LOBYTE(__p[0]);
      }
      else
      {
        int v12 = v11;
        *(_OWORD *)&__p[1] = *(_OWORD *)(v6 + 5);
        __p[3] = *((void **)v6 + 7);
      }
      if (a3 != 6 || v12)
      {
        if (v10 >= v9)
        {
          long long v14 = &v10[-v8];
          uint64_t v15 = (uint64_t)&v10[-v8 + 1];
          if (v15 < 0) {
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          }
          if (2 * (uint64_t)&v9[-v8] > (unint64_t)v15) {
            uint64_t v15 = 2 * (void)&v9[-v8];
          }
          if ((unint64_t)&v9[-v8] >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v16 = v15;
          }
          if (v16) {
            uint64_t v17 = (char *)operator new(v16);
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = &v14[(void)v17];
          std::string v19 = &v14[(void)v17];
          char *v19 = v12;
          long long v13 = v19 + 1;
          if (v10 != (char *)v8)
          {
            uint64_t v20 = &v10[~v8];
            do
            {
              char v21 = *--v10;
              (v20--)[(void)v17] = v21;
            }
            while (v10 != (char *)v8);
            uint64_t v18 = v17;
          }
          uint64_t v9 = &v17[v16];
          *a1 = v18;
          a1[1] = v13;
          a1[2] = v9;
          if (v8) {
            operator delete((void *)v8);
          }
          unint64_t v8 = (unint64_t)v18;
          long long v7 = v35;
        }
        else
        {
          char *v10 = v12;
          long long v13 = v10 + 1;
        }
        a1[1] = v13;
        uint64_t v10 = v13;
      }
      if (SHIBYTE(__p[3]) < 0) {
        operator delete(__p[1]);
      }
      uint64_t v22 = (void *)v6[1];
      if (v22)
      {
        do
        {
          long long v23 = v22;
          uint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          long long v23 = (void *)v6[2];
          BOOL v24 = *v23 == (void)v6;
          uint64_t v6 = v23;
        }
        while (!v24);
      }
      uint64_t v6 = v23;
    }
    while (v23 != v7);
  }
}

void sub_1C5676060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  *(void *)(v17 + 8) = v18;
  operator delete(v18);
  _Unwind_Resume(a1);
}

void XcapCallForwardManager::_createCDRule()
{
}

void sub_1C5676180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN22XcapCallForwardManager21_setCallForwardForDocEbNSt3__16vectorIN15XcapCDCondition9ConditionENS0_9allocatorIS3_EEEERK6SipUriiU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const std::string *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, unsigned char *, void))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1C5676220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN22XcapCallForwardManager22_setCallForwardForRuleEbN15XcapCDCondition9ConditionERK6SipUriU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const std::string *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, unsigned char *, void))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1C5676284(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN22XcapCallForwardManager35_setCallForwardActivationModeForDocENSt3__16vectorIN15XcapCDCondition9ConditionENS0_9allocatorIS3_EEEEbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const std::string *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, unsigned char *, void))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1C56762E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN22XcapCallForwardManager36_setCallForwardActivationModeForRuleEN15XcapCDCondition9ConditionEbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const std::string *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, unsigned char *, void))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1C567634C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void ___ZN22XcapCallForwardManager27_setCallForwardNoReplyTimerEiU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const std::string *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, unsigned char *, void))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1C56763B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void XcapCallForwardManager::CallForwardInfo::fetchRuleIdOrDefaultForCondition(std::string *a1, uint64_t a2, __int16 a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  uint64_t v6 = a2 + 8;
  uint64_t v7 = std::__tree<std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>,std::__map_value_compare<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>,std::less<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>>,true>,std::allocator<std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>>>::find<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>>(a2 + 8, a3, HIBYTE(a3));
  if (a2 + 16 == v7)
  {
    if (*(void *)(a2 + 24))
    {
      std::string::operator=(a1, (const std::string *)(*(void *)v6 + 40));
      std::string::basic_string[abi:ne180100]<0>(v26, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v8 = ims::error((uint64_t)v26, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v8 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Rule not exist. Choose the first one - ", 39);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, a1);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      uint64_t v9 = qword_1EBBDB0A0;
      if (!qword_1EBBDB0A0) {
        goto LABEL_34;
      }
      uint64_t v10 = &qword_1EBBDB0A0;
      do
      {
        unsigned int v11 = *(unsigned __int8 *)(v9 + 32);
        BOOL v12 = v11 == a3;
        if (v11 >= a3) {
          char v13 = 1;
        }
        else {
          char v13 = -1;
        }
        if (v12)
        {
          unsigned int v14 = *(unsigned __int8 *)(v9 + 33);
          BOOL v15 = v14 == HIBYTE(a3);
          char v13 = v14 >= HIBYTE(a3) ? 1 : -1;
          if (v15) {
            char v13 = 0;
          }
        }
        BOOL v16 = (v13 & 0x80) == 0;
        if (v13 < 0) {
          uint64_t v17 = (uint64_t *)(v9 + 8);
        }
        else {
          uint64_t v17 = (uint64_t *)v9;
        }
        if (v16) {
          uint64_t v10 = (uint64_t *)v9;
        }
        uint64_t v9 = *v17;
      }
      while (*v17);
      if (v10 == &qword_1EBBDB0A0) {
        goto LABEL_34;
      }
      unsigned int v18 = *((unsigned __int8 *)v10 + 32);
      BOOL v19 = v18 == a3;
      BOOL v20 = v18 > a3;
      char v21 = -1;
      if (!v20) {
        char v21 = 1;
      }
      if (v19)
      {
        unsigned int v22 = *((unsigned __int8 *)v10 + 33);
        char v23 = -1;
        if (v22 <= HIBYTE(a3)) {
          char v23 = 1;
        }
        if (v22 == HIBYTE(a3)) {
          char v21 = 0;
        }
        else {
          char v21 = v23;
        }
      }
      if (v21 < 0) {
LABEL_34:
      }
        uint64_t v10 = &qword_1EBBDB0A0;
      std::string::operator=(a1, (const std::string *)(v10 + 5));
      std::string::basic_string[abi:ne180100]<0>(v26, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v8 = ims::error((uint64_t)v26, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
      *(unsigned char *)(v8 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Rule not exist. Choose from the default rules - ", 48);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 32))(v8, a1);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(unsigned char *)(v8 + 17) = 0;
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
  }
  else
  {
    std::string::operator=(a1, (const std::string *)(v7 + 40));
  }
}

void sub_1C567669C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  _Unwind_Resume(exception_object);
}

void XcapCallForwardManager::~XcapCallForwardManager(XcapCallForwardManager *this)
{
  *(void *)this = &unk_1F20E8BC8;
  std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(*((char **)this + 49));
  *(void *)this = &unk_1F20BBE38;
  XcapConfig::~XcapConfig((void **)this + 1);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20E8BC8;
  std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(*((char **)this + 49));
  *(void *)this = &unk_1F20BBE38;
  XcapConfig::~XcapConfig((void **)this + 1);
  JUMPOUT(0x1C878E320);
}

void *std::vector<XcapCDCondition::Condition>::__init_with_size[abi:ne180100]<XcapCDCondition::Condition*,XcapCDCondition::Condition*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    int v5 = result;
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    time_t result = operator new(__sz);
    uint64_t v8 = (char *)result;
    *int v5 = result;
    v5[1] = result;
    uint64_t v5[2] = (char *)result + __sz;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      time_t result = memcpy(result, a2, v9);
    }
    v5[1] = &v8[v9];
  }
  return result;
}

void sub_1C567687C(_Unwind_Exception *exception_object)
{
  time_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void _ZNSt3__115allocate_sharedB8ne180100I25XcapDocumentCommDiversionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(void *a1)
{
  uint64_t v2 = operator new(0xD0uLL);
  v2[1] = 0;
  _OWORD v2[2] = 0;
  *uint64_t v2 = &unk_1F20E8C38;
  XcapDocumentCommDiversion::XcapDocumentCommDiversion((XcapDocumentCommDiversion *)(v2 + 3));
  *a1 = v3;
  a1[1] = v2;
}

void sub_1C56768EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<XcapDocumentCommDiversion>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E8C38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<XcapDocumentCommDiversion>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E8C38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<XcapDocumentCommDiversion>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::shared_ptr<XcapCDRule>::shared_ptr[abi:ne180100]<XcapCDRule,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1C5676A08(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<XcapCDRule *,std::shared_ptr<XcapCDRule>::__shared_ptr_default_delete<XcapCDRule,XcapCDRule>,std::allocator<XcapCDRule>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<XcapCDRule *,std::shared_ptr<XcapCDRule>::__shared_ptr_default_delete<XcapCDRule,XcapCDRule>,std::allocator<XcapCDRule>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<XcapCDRule *,std::shared_ptr<XcapCDRule>::__shared_ptr_default_delete<XcapCDRule,XcapCDRule>,std::allocator<XcapCDRule>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *std::__tree<std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>,std::__map_value_compare<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>,std::less<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>>,true>,std::allocator<std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>>>::__emplace_unique_key_args<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::piecewise_construct_t const&,std::tuple<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>&&>,std::tuple<>>(uint64_t **a1, unsigned __int8 a2, unsigned __int8 a3, _WORD *a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = (unsigned __int8 *)a1[1];
  if (!v6)
  {
    uint64_t v8 = a1 + 1;
    goto LABEL_21;
  }
  do
  {
    while (1)
    {
      uint64_t v8 = v6;
      unsigned int v9 = v6[32];
      if (v9 == a2) {
        break;
      }
      if (v9 <= a2)
      {
        if (v9 >= a2) {
          char v13 = 1;
        }
        else {
          char v13 = -1;
        }
        if ((v13 & 0x80) == 0) {
          return v8;
        }
        goto LABEL_18;
      }
LABEL_12:
      uint64_t v6 = (unsigned __int8 *)*v8;
      uint64_t v7 = (uint64_t **)v8;
      if (!*v8) {
        goto LABEL_21;
      }
    }
    unsigned int v10 = *((unsigned __int8 *)v8 + 33);
    BOOL v11 = v10 == a3;
    if (v10 > a3) {
      goto LABEL_12;
    }
    if (v10 >= a3) {
      char v12 = 1;
    }
    else {
      char v12 = -1;
    }
    if (v11) {
      char v12 = 0;
    }
    if ((v12 & 0x80) == 0) {
      return v8;
    }
LABEL_18:
    uint64_t v6 = (unsigned __int8 *)v8[1];
  }
  while (v6);
  uint64_t v7 = (uint64_t **)(v8 + 1);
LABEL_21:
  unsigned int v14 = v8;
  uint64_t v8 = operator new(0x40uLL);
  *((_WORD *)v8 + 16) = *a4;
  void v8[6] = 0;
  v8[7] = 0;
  v8[5] = 0;
  void *v8 = 0;
  v8[1] = 0;
  void v8[2] = v14;
  *uint64_t v7 = v8;
  BOOL v15 = (uint64_t *)**a1;
  BOOL v16 = v8;
  if (v15)
  {
    *a1 = v15;
    BOOL v16 = *v7;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

uint64_t std::__tree<std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>,std::__map_value_compare<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>,std::less<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>>,true>,std::allocator<std::__value_type<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>,std::string>>>::find<std::pair<XcapCDCondition::Condition,XcapCDCondition::Media>>(uint64_t a1, unsigned __int8 a2, unsigned __int8 a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return v3;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(unsigned __int8 *)(v4 + 32);
    BOOL v8 = v7 == a2;
    if (v7 >= a2) {
      char v9 = 1;
    }
    else {
      char v9 = -1;
    }
    if (v8)
    {
      unsigned int v10 = *(unsigned __int8 *)(v4 + 33);
      BOOL v11 = v10 == a3;
      char v9 = v10 >= a3 ? 1 : -1;
      if (v11) {
        char v9 = 0;
      }
    }
    BOOL v12 = (v9 & 0x80) == 0;
    if (v9 < 0) {
      char v13 = (uint64_t *)(v4 + 8);
    }
    else {
      char v13 = (uint64_t *)v4;
    }
    if (v12) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v13;
  }
  while (*v13);
  if (v3 == v6) {
    return v3;
  }
  unsigned int v14 = *(unsigned __int8 *)(v6 + 32);
  if (v14 <= a2) {
    char v15 = 1;
  }
  else {
    char v15 = -1;
  }
  if (v14 == a2)
  {
    unsigned int v16 = *(unsigned __int8 *)(v6 + 33);
    char v17 = -1;
    if (v16 <= a3) {
      char v17 = 1;
    }
    if (v16 == a3) {
      char v15 = 0;
    }
    else {
      char v15 = v17;
    }
  }
  if (v15 < 0) {
    return v3;
  }
  return v6;
}

void sub_1C5676D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1C5676F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_1C567702C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)ImsNetworkPath;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1C5677124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ImsNetworkPathEvaluator::ImsNetworkPathEvaluator(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_1F20E8D00;
  a1[1] = 0;
  a1[2] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v9, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v9, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"creating path evaluator for ", 28);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  a1[2] = a3;
  operator new();
}

void sub_1C5677374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }

  MEMORY[0x1C878E320](v21, 0x80C40B8603338);
  _Unwind_Resume(a1);
}

void ImsNetworkPathEvaluator::~ImsNetworkPathEvaluator(ImsNetworkPathEvaluator *this)
{
  *(void *)this = &unk_1F20E8D00;
  uint64_t v1 = (id *)*((void *)this + 1);
  if (v1)
  {

    MEMORY[0x1C878E320](v1, 0x80C40B8603338);
  }
}

{
  uint64_t vars8;

  ImsNetworkPathEvaluator::~ImsNetworkPathEvaluator(this);
  JUMPOUT(0x1C878E320);
}

void ImsNetworkPathEvaluator::handlePathSatisfied(ImsNetworkPathEvaluator *this)
{
  uint64_t v1 = (void (***)(void, void **))*((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = (id *)*((void *)this + 1);
    if (v2)
    {
      if (*v2)
      {
        [*v2 ifaceName];
      }
      else
      {
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v4 = 0;
      }
      (**v1)(v1, __p);
      if (SHIBYTE(v4) < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_1C5677518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsNetworkPathEvaluator::handlePathFailed(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t LazuliStringParameterHeader::LazuliStringParameterHeader(uint64_t a1, const std::string *a2, uint64_t a3)
{
  uint64_t v5 = LazuliHeader::LazuliHeader((std::string *)a1, a2);
  v5[3].__r_.__value_.__l.__size_ = 0;
  v5[3].__r_.__value_.__r.__words[0] = 0;
  v5[2].__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1F20B37B0;
  v5[2].__r_.__value_.__r.__words[2] = (std::string::size_type)&v5[3];
  LOWORD(v5[3].__r_.__value_.__r.__words[2]) = 256;
  v5->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E8D48;
  v5[4].__r_.__value_.__r.__words[0] = 0;
  p_int data = (void **)&v5[4].__r_.__value_.__l.__data_;
  v5[4].__r_.__value_.__l.__size_ = 0;
  v5[4].__r_.__value_.__r.__words[2] = 0;
  ims::chomp("\r\n\t ", a3, 3, &v8);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*p_data);
  }
  *(std::string *)p_int data = v8;
  return a1;
}

void sub_1C5677634(_Unwind_Exception *a1)
{
  if (v1[119] < 0) {
    operator delete(*v2);
  }
  LazuliParameterHeader::~LazuliParameterHeader((LazuliParameterHeader *)v1);
  _Unwind_Resume(a1);
}

void LazuliParameterHeader::~LazuliParameterHeader(LazuliParameterHeader *this)
{
  *(void *)this = &unk_1F20BAA80;
  *((void *)this + 7) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 64, *((void **)this + 9));
  LazuliHeader::~LazuliHeader((void **)this);
}

void LazuliStringParameterHeader::LazuliStringParameterHeader(LazuliStringParameterHeader *this, const LazuliStringParameterHeader *a2)
{
  LazuliParameterHeader::LazuliParameterHeader(this, a2);
  v3->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20E8D48;
  uint64_t v4 = v3 + 4;
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 6);
    v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 14);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C5677744(_Unwind_Exception *a1)
{
  LazuliParameterHeader::~LazuliParameterHeader(v1);
  _Unwind_Resume(a1);
}

uint64_t LazuliStringParameterHeader::encodeValue(LazuliStringParameterHeader *this, ImsOutStream *a2)
{
  return 1;
}

uint64_t LazuliStringParameterHeader::valueAsString(const std::string *a1, std::string *this)
{
  std::string::operator=(this, a1 + 4);
  return 1;
}

uint64_t LazuliStringParameterHeader::setValueFromString(uint64_t a1, uint64_t a2)
{
  ims::chomp("\r\n\t ", a2, 3, &v5);
  uint64_t v3 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v3);
  }
  *(_OWORD *)uint64_t v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(void *)(a1 + 112) = *((void *)&v5.__r_.__value_.__l + 2);
  return 1;
}

void LazuliStringParameterHeader::~LazuliStringParameterHeader(void **this)
{
  *this = &unk_1F20E8D48;
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  *this = &unk_1F20BAA80;
  this[7] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 8), this[9]);
  LazuliHeader::~LazuliHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20E8D48;
  if (*((char *)this + 119) < 0) {
    operator delete(this[12]);
  }
  *this = &unk_1F20BAA80;
  this[7] = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 8), this[9]);
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C878E320);
}

void LazuliStringParameterHeader::clone(LazuliStringParameterHeader *this@<X0>, std::__shared_weak_count **a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)operator new(0x90uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E8DD0;
  std::string v5 = v4 + 1;
  LazuliStringParameterHeader::LazuliStringParameterHeader((LazuliStringParameterHeader *)&v4[1], this);
  uint64_t shared_weak_owners = (std::__shared_weak_count *)v4[1].__shared_weak_owners_;
  if (!shared_weak_owners)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = (uint64_t)v5;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    goto LABEL_5;
  }
  if (shared_weak_owners->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v4[1].__shared_owners_ = (uint64_t)v5;
    v4[1].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
LABEL_5:
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *a2 = v5;
  a2[1] = v4;
}

void sub_1C5677A58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliStringParameterHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E8DD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliStringParameterHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E8DD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliStringParameterHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void SipPEarlyMediaHeader::~SipPEarlyMediaHeader(char **this)
{
  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipPEarlyMediaHeader::clone(SipPEarlyMediaHeader *this)
{
}

void sub_1C5677C38(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

uint64_t ImsUdpNw::ImsUdpNw(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F20E8EA0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 79) = 0;
  uint64_t v6 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  *(void *)(a1 + 88) = dispatch_queue_create("com.apple.ipTelephony.nwlistener", v6);
  unsigned int v7 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  *(void *)(a1 + 96) = dispatch_queue_create("com.apple.ipTelephony.nwconnection", v7);
  *(void *)(a1 + 104) = a3;
  uint64_t v8 = a2[1];
  *(void *)(a1 + 112) = *a2;
  *(void *)(a1 + 120) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void ImsUdpNw::~ImsUdpNw(ImsUdpNw *this)
{
  *(void *)this = &unk_1F20E8EA0;
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    nw_listener_cancel(v2);
    nw_release(*((void **)this + 5));
    *((void *)this + 5) = 0;
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    nw_release(v3);
    *((void *)this + 3) = 0;
  }
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    nw_release(v4);
    *((void *)this + 4) = 0;
  }
  std::string v5 = (void *)*((void *)this + 6);
  if (v5)
  {
    nw_release(v5);
    *((void *)this + 6) = 0;
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  unsigned int v7 = *((void *)this + 12);
  if (v7) {
    dispatch_release(v7);
  }
  uint64_t v8 = *((void *)this + 11);
  if (v8) {
    dispatch_release(v8);
  }
  std::string v9 = *((void *)this + 9);
  if (v9) {
    dispatch_release(v9);
  }
  unsigned int v10 = *((void *)this + 8);
  if (v10) {
    dispatch_release(v10);
  }
  BOOL v11 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
}

{
  uint64_t vars8;

  ImsUdpNw::~ImsUdpNw(this);
  JUMPOUT(0x1C878E320);
}

void ImsUdpNw::initializeNwListener(ImsUdpNw *this@<X0>, nw_parameters *obj@<X1>, NSObject *a3@<X2>, uint32_t a4@<W3>, uint64_t a5@<X8>)
{
  unsigned int v10 = (void *)*((void *)this + 4);
  if (v10) {
    nw_release(v10);
  }
  BOOL v11 = (void *)*((void *)this + 3);
  if (v11) {
    nw_release(v11);
  }
  *((void *)this + 3) = a3;
  *((void *)this + 4) = obj;
  nw_retain(obj);
  nw_retain(*((void **)this + 3));
  BOOL v12 = (AVCRTPStackController *)dispatch_semaphore_create(0);
  AVCRTPStackController::getClientUniquePIDStatic(v12);
  nw_parameters_set_delegated_unique_pid();
  std::string::basic_string[abi:ne180100]<0>(&v32, "net.udpnw");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v13 = ims::debug((uint64_t)&v32, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"set PID to ", 11);
  *(unsigned char *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
  unsigned int v14 = *((void *)this + 5);
  if (v14)
  {
    nw_listener_cancel(v14);
    nw_release(*((void **)this + 5));
  }
  *((void *)this + 5) = nw_listener_create(*((nw_parameters_t *)this + 4));
  nw_parameters_allow_sharing_port_with_listener();
  nw_listener_set_new_connection_limit(*((nw_listener_t *)this + 5), a4);
  char v32 = 0;
  long long v33 = &v32;
  uint64_t v34 = 0x2000000000;
  char v35 = 0;
  __p[0] = 0;
  __p[1] = __p;
  uint64_t v30 = 0x2000000000;
  uint16_t port = 0;
  uint16_t port = nw_endpoint_get_port(a3);
  char v15 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v15 || (uint64_t v16 = *((void *)this + 1), (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unsigned int v18 = v17;
  p_uint64_t shared_weak_owners = &v17->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  uint64_t v20 = *((void *)this + 5);
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN8ImsUdpNw20initializeNwListenerEP13nw_parametersP11nw_endpointb_block_invoke;
  handler[3] = &unk_1F20E8EC8;
  handler[6] = this;
  handler[7] = v16;
  char v27 = v18;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  handler[4] = &v32;
  dispatch_object_t object = (dispatch_object_t)v12;
  if (v12) {
    dispatch_retain((dispatch_object_t)v12);
  }
  handler[5] = __p;
  nw_listener_set_state_changed_handler(v20, handler);
  char v21 = *((void *)this + 5);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 1174405120;
  void v23[2] = ___ZN8ImsUdpNw20initializeNwListenerEP13nw_parametersP11nw_endpointb_block_invoke_11;
  void v23[3] = &__block_descriptor_tmp_16_1;
  v23[4] = this;
  v23[5] = v16;
  BOOL v24 = v18;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v25 = a4;
  nw_listener_set_new_connection_handler(v21, v23);
  *((unsigned char *)this + 80) = 0;
  nw_listener_set_queue(*((nw_listener_t *)this + 5), *((dispatch_queue_t *)this + 11));
  nw_listener_start(*((nw_listener_t *)this + 5));
  dispatch_semaphore_wait((dispatch_semaphore_t)v12, 0xFFFFFFFFFFFFFFFFLL);
  if (*((unsigned char *)v33 + 24))
  {
    int v22 = 0;
  }
  else
  {
    if (!*((unsigned char *)this + 80)) {
      nw_listener_cancel(*((nw_listener_t *)this + 5));
    }
    int v22 = 0x40000000;
  }
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(void *)a5 = &unk_1F20B2680;
  *(void *)(a5 + 8) = &_bambiDomain;
  *(_DWORD *)(a5 + 16) = v22;
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  std::__shared_weak_count::__release_weak(v18);
  _Block_object_dispose(__p, 8);
  _Block_object_dispose(&v32, 8);
  if (v12) {
    dispatch_release((dispatch_object_t)v12);
  }
}

void sub_1C56781E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,dispatch_object_t object,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  std::__shared_weak_count::__release_weak(v33);
  _Block_object_dispose(&__p, 8);
  _Block_object_dispose((const void *)(v34 - 128), 8);
  if (v32) {
    dispatch_release(v32);
  }
  _Unwind_Resume(a1);
}

void ___ZN8ImsUdpNw20initializeNwListenerEP13nw_parametersP11nw_endpointb_block_invoke(uint64_t a1, int a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      unsigned int v7 = v6;
      if (!*(void *)(a1 + 56))
      {
LABEL_26:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
      switch(a2)
      {
        case 4:
          std::string::basic_string[abi:ne180100]<0>(v13, "net.udpnw");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v9 = ims::debug((uint64_t)v13, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"NW listener cancelled", 21);
          *(unsigned char *)(v9 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v9 + 17) = 0;
          if (v12 < 0) {
            operator delete(__p[0]);
          }
          if (v14 < 0) {
            operator delete(v13[0]);
          }
          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
          *(unsigned char *)(v5 + 80) = 1;
          if (*(unsigned char *)(v5 + 81)) {
            dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v5 + 72));
          }
          goto LABEL_25;
        case 2:
          std::string::basic_string[abi:ne180100]<0>(v13, "net.udpnw");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v8 = ims::debug((uint64_t)v13, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Port is available ", 18);
          *(unsigned char *)(v8 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v8 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          break;
        case 1:
          std::string::basic_string[abi:ne180100]<0>(v13, "net.udpnw");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v8 = ims::debug((uint64_t)v13, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"NW listener waiting", 19);
          *(unsigned char *)(v8 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          break;
        default:
          std::string::basic_string[abi:ne180100]<0>(v13, "net.udpnw");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v10 = ims::debug((uint64_t)v13, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"NW listener failed", 18);
          *(unsigned char *)(v10 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v10 + 17) = 0;
          if (v12 < 0) {
            operator delete(__p[0]);
          }
          if (v14 < 0) {
            operator delete(v13[0]);
          }
          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
          goto LABEL_25;
      }
      *(unsigned char *)(v8 + 17) = 0;
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      if (v14 < 0) {
        operator delete(v13[0]);
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
LABEL_25:
      dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 72));
      goto LABEL_26;
    }
  }
}

void sub_1C56785E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_56c32_ZTSNSt3__18weak_ptrI8ImsUdpNwEE72c25_ZTSN8dispatch9semaphoreE(void *a1, void *a2)
{
  uint64_t v2 = a2[8];
  a1[7] = a2[7];
  a1[8] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[9];
  a1[9] = v3;
  if (v3) {
    dispatch_retain(v3);
  }
}

void __destroy_helper_block_e8_56c32_ZTSNSt3__18weak_ptrI8ImsUdpNwEE72c25_ZTSN8dispatch9semaphoreE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 72);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void ___ZN8ImsUdpNw20initializeNwListenerEP13nw_parametersP11nw_endpointb_block_invoke_11(uint64_t a1, NSObject *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      unsigned int v7 = v6;
      uint64_t v8 = *(void *)(a1 + 40);
      if (v8)
      {
        std::string::basic_string[abi:ne180100]<0>(handler, "net.udpnw");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v9 = ims::debug((uint64_t)handler, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"RTP nw_listener_set_new_connection_handler configured", 53);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v9 + 17) = 0;
        if ((v30[7] & 0x80000000) != 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v21) < 0) {
          operator delete(handler[0]);
        }
        if (!*(unsigned char *)(a1 + 56) || *(unsigned char *)(v5 + 81) || *(unsigned char *)(v5 + 82))
        {
          std::string::basic_string[abi:ne180100]<0>(handler, "net.nw");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v10 = ims::debug((uint64_t)handler, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"skipping RTCP conn. connectionId=", 33);
          *(unsigned char *)(v10 + 17) = 0;
          nw_connection_get_id();
          std::ostream::operator<<();
          *(unsigned char *)(v10 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v10 + 17) = 0;
          if ((v30[7] & 0x80000000) != 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v21) < 0) {
            operator delete(handler[0]);
          }
          nw_connection_cancel(a2);
        }
        else
        {
          nw_listener_set_new_connection_limit(*(nw_listener_t *)(v5 + 40), 0);
          char v11 = *(unsigned char *)(a1 + 56);
          *(void *)(v8 + 48) = a2;
          nw_retain(a2);
          *(void *)uu = 0;
          uint64_t v32 = 0;
          nw_connection_get_uuid();
          *(_OWORD *)std::string __p = 0u;
          memset(v30, 0, sizeof(v30));
          uuid_unparse(uu, (char *)__p);
          std::string::basic_string[abi:ne180100]<0>(handler, "net.nw");
          std::string::basic_string[abi:ne180100]<0>(v27, "");
          uint64_t v12 = ims::debug((uint64_t)handler, (uint64_t)v27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"setConnection, connectionId=", 28);
          *(unsigned char *)(v12 + 17) = 0;
          nw_connection_get_id();
          std::ostream::operator<<();
          *(unsigned char *)(v12 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" uuid=", 6);
          *(unsigned char *)(v12 + 17) = 0;
          size_t v13 = strlen((const char *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)__p, v13);
          *(unsigned char *)(v12 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v12 + 17) = 0;
          if (v28 < 0) {
            operator delete(v27[0]);
          }
          if (SHIBYTE(v21) < 0) {
            operator delete(handler[0]);
          }
          nw_connection_set_queue(*(nw_connection_t *)(v8 + 48), *(dispatch_queue_t *)(v8 + 96));
          char v14 = *(std::__shared_weak_count **)(v8 + 16);
          if (!v14 || (uint64_t v15 = *(void *)(v8 + 8), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          char v17 = v16;
          p_uint64_t shared_weak_owners = &v16->__shared_weak_owners_;
          atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          BOOL v19 = *(NSObject **)(v8 + 48);
          handler[0] = (void *)MEMORY[0x1E4F143A8];
          handler[1] = (void *)1174405120;
          char v21 = ___ZN8ImsUdpNw13setConnectionEP13nw_connectionb_block_invoke;
          int v22 = &__block_descriptor_tmp_29_3;
          uint64_t v23 = v8;
          uint64_t v24 = v15;
          char v25 = v17;
          atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
          char v26 = v11;
          nw_connection_set_state_changed_handler(v19, handler);
          nw_connection_start(*(nw_connection_t *)(v8 + 48));
          if (v25) {
            std::__shared_weak_count::__release_weak(v25);
          }
          std::__shared_weak_count::__release_weak(v17);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5678ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  std::__shared_weak_count::__release_weak(v33);
  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c32_ZTSNSt3__18weak_ptrI8ImsUdpNwEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c32_ZTSNSt3__18weak_ptrI8ImsUdpNwEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ImsUdpNw::cancelNwListener(ImsUdpNw *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      if (*((void *)this + 5))
      {
        uint64_t v5 = (SipStack *)*((void *)this + 14);
        if (v5)
        {
          if (!*((unsigned char *)this + 81))
          {
            dispatch_semaphore_t v6 = dispatch_semaphore_create(0);
            unsigned int v7 = *((void *)this + 9);
            *((void *)this + 9) = v6;
            if (v7) {
              dispatch_release(v7);
            }
            std::string::basic_string[abi:ne180100]<0>(v16, "net.nw");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v8 = ims::debug((uint64_t)v16, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"cancel listener", 15);
            *(unsigned char *)(v8 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v8 + 17) = 0;
            if (v15 < 0) {
              operator delete(__p[0]);
            }
            if (v17 < 0) {
              operator delete(v16[0]);
            }
            *((unsigned char *)this + 81) = 1;
            nw_listener_cancel(*((nw_listener_t *)this + 5));
            uint64_t v9 = (ImsPrefs *)SipStack::prefs(v5);
            InactivityTimerRTPSecondsKey = (void **)ImsPrefs::getInactivityTimerRTPSecondsKey(v9);
            int v11 = ImsPrefs::intValue(v9, InactivityTimerRTPSecondsKey);
            dispatch_time_t v12 = dispatch_time(0, 1000000000 * v11);
            dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 9), v12);
            std::string::basic_string[abi:ne180100]<0>(v16, "net.nw");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v13 = ims::debug((uint64_t)v16, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"cancel listener complete uint64_t result = ", 34);
            *(unsigned char *)(v13 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v13 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v13 + 17) = 0;
            if (v15 < 0) {
              operator delete(__p[0]);
            }
            if (v17 < 0) {
              operator delete(v16[0]);
            }
            *((unsigned char *)this + 81) = 0;
            nw_release(*((void **)this + 5));
            *((void *)this + 5) = 0;
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C5678DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void ImsUdpNw::cancelNwConnection(ImsUdpNw *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3) {
      uint64_t v4 = (SipStack *)*((void *)this + 14);
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  nw_listener_set_new_connection_limit(*((nw_listener_t *)this + 5), 0);
  if (*((void *)this + 6)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5 && !*((unsigned char *)this + 82))
  {
    dispatch_semaphore_t v6 = dispatch_semaphore_create(0);
    unsigned int v7 = *((void *)this + 8);
    *((void *)this + 8) = v6;
    if (v7) {
      dispatch_release(v7);
    }
    std::string::basic_string[abi:ne180100]<0>(v16, "net.nw");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"cancel connectionId=", 20);
    *(unsigned char *)(v8 + 17) = 0;
    nw_connection_get_id();
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    *((unsigned char *)this + 82) = 1;
    nw_connection_cancel(*((nw_connection_t *)this + 6));
    uint64_t v9 = (ImsPrefs *)SipStack::prefs(v4);
    InactivityTimerRTPSecondsKey = (void **)ImsPrefs::getInactivityTimerRTPSecondsKey(v9);
    int v11 = ImsPrefs::intValue(v9, InactivityTimerRTPSecondsKey);
    dispatch_time_t v12 = dispatch_time(0, 1000000000 * v11);
    dispatch_semaphore_wait(*((dispatch_semaphore_t *)this + 8), v12);
    std::string::basic_string[abi:ne180100]<0>(v16, "net.nw");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v13 = ims::debug((uint64_t)v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"cancel complete connectionId=", 29);
    *(unsigned char *)(v13 + 17) = 0;
    nw_connection_get_id();
    std::ostream::operator<<();
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    *((unsigned char *)this + 82) = 0;
    nw_release(*((void **)this + 6));
    *((void *)this + 6) = 0;
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C56790A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void ImsUdpNw::setNwDelegate(ImsUdpNw *this, ImsNwInterfaceDelegate *a2)
{
  std::string::basic_string[abi:ne180100]<0>(v7, "net.nw");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"setNwDelegate", 13);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  *((void *)this + 13) = a2;
}

void sub_1C56791DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN8ImsUdpNw13setConnectionEP13nw_connectionb_block_invoke(uint64_t a1, int a2, NSObject *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    char v8 = std::__shared_weak_count::lock(v4);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(ImsUdpNw **)(a1 + 40);
      if (v10)
      {
        if (a3)
        {
          std::string::basic_string[abi:ne180100]<0>(v17, "net.hw");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v11 = ims::error((uint64_t)v17, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"connection receive error: ", 26);
          *(unsigned char *)(v11 + 17) = 0;
          nw_error_get_error_code(a3);
          std::ostream::operator<<();
          *(unsigned char *)(v11 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v11 + 17) = 0;
LABEL_6:
          if (v16 < 0) {
            operator delete(__p[0]);
          }
          if (v18 < 0) {
            operator delete(v17[0]);
          }
          goto LABEL_19;
        }
        if (a2 != 3)
        {
          if (a2 == 5)
          {
            std::string::basic_string[abi:ne180100]<0>(v17, "net.nw");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            uint64_t v12 = ims::debug((uint64_t)v17, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"cancelled connectionId=", 23);
            *(unsigned char *)(v12 + 17) = 0;
            nw_connection_get_id();
            std::ostream::operator<<();
            *(unsigned char *)(v12 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v12 + 17) = 0;
            if (v16 < 0) {
              operator delete(__p[0]);
            }
            if (v18 < 0) {
              operator delete(v17[0]);
            }
            if (*(unsigned char *)(v7 + 82)) {
              dispatch_semaphore_signal(*(dispatch_semaphore_t *)(v7 + 64));
            }
          }
          goto LABEL_19;
        }
        if (!*((unsigned char *)v10 + 56) && *(unsigned char *)(a1 + 56))
        {
          *((unsigned char *)v10 + 56) = 1;
          ImsUdpNw::receiveData(v10);
          std::string::basic_string[abi:ne180100]<0>(v17, "net.nw");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v13 = ims::debug((uint64_t)v17, (uint64_t)__p);
          char v14 = (unsigned char *)ImsOutStream::operator<<(v13, "ready connectionId=");
          nw_connection_get_id();
          std::ostream::operator<<();
          v14[17] = 0;
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v14[17] = 0;
          goto LABEL_6;
        }
      }
LABEL_19:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_1C56794CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void ImsUdpNw::receiveData(ImsUdpNw *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2 || (uint64_t v3 = *((void *)this + 1), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v5 = v4;
  p_uint64_t shared_weak_owners = &v4->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  uint64_t v7 = *((void *)this + 6);
  completion[0] = MEMORY[0x1E4F143A8];
  completion[1] = 1174405120;
  completion[2] = ___ZN8ImsUdpNw11receiveDataEv_block_invoke;
  completion[3] = &__block_descriptor_tmp_34_0;
  completion[4] = this;
  completion[5] = v3;
  uint64_t v9 = v5;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  nw_connection_receive_message(v7, completion);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_1C5679600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void ___ZN8ImsUdpNw11receiveDataEv_block_invoke(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, NSObject *a5)
{
  char v6 = *(std::__shared_weak_count **)(a1 + 48);
  if (v6)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v6);
    if (v9)
    {
      uint64_t v10 = v9;
      if (*(void *)(a1 + 40))
      {
        if (a5)
        {
          std::string::basic_string[abi:ne180100]<0>(v16, "net.hw");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v11 = ims::error((uint64_t)v16, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"connection receive error: ", 26);
          *(unsigned char *)(v11 + 17) = 0;
          nw_error_get_error_code(a5);
          std::ostream::operator<<();
          *(unsigned char *)(v11 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v11 + 17) = 0;
          if (v15 < 0) {
            operator delete(__p[0]);
          }
          if (v17 < 0) {
            operator delete(v16[0]);
          }
        }
        else if (a2)
        {
          dispatch_data_get_size(a2);
          std::string::basic_string[abi:ne180100]<0>(v16, "net.nw");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v12 = ims::debug((uint64_t)v16, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"data received connectionId=", 27);
          *(unsigned char *)(v12 + 17) = 0;
          nw_connection_get_id();
          std::ostream::operator<<();
          *(unsigned char *)(v12 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v12 + 17) = 0;
          if (v15 < 0) {
            operator delete(__p[0]);
          }
          if (v17 < 0) {
            operator delete(v16[0]);
          }
          uint64_t v13 = *(void *)(a1 + 48);
          if (v13) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 16), 1uLL, memory_order_relaxed);
          }
          operator new();
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

void sub_1C56798A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

uint64_t ImsUdpNw::getNwDelegate(ImsUdpNw *this)
{
  return *((void *)this + 13);
}

uint64_t *_ZNSt3__110unique_ptrIZZN8ImsUdpNw11receiveDataEvEUb_E3__0NS_14default_deleteIS2_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x1C878E320](v2, 0x1020C407DCD39BELL);
  }
  return a1;
}

uint64_t *_ZZN8dispatch5asyncIZZN8ImsUdpNw11receiveDataEvEUb_E3__0EEvP16dispatch_queue_sNSt3__110unique_ptrIT_NS5_14default_deleteIS7_EEEEENUlPvE_8__invokeESB_(void *a1)
{
  uint64_t v9 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    uint64_t v3 = a1[3];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      BOOL v5 = v4;
      if (*a1)
      {
        uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
        if (v6)
        {
          std::string::basic_string[abi:ne180100]<0>(v12, "net.nw");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v7 = ims::debug((uint64_t)v12, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"process receive", 15);
          *(unsigned char *)(v7 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v7 + 17) = 0;
          if (v11 < 0) {
            operator delete(__p[0]);
          }
          if (v13 < 0) {
            operator delete(v12[0]);
          }
          (*(void (**)(uint64_t, void))(*(void *)v6 + 16))(v6, a1[2]);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return _ZNSt3__110unique_ptrIZZN8ImsUdpNw11receiveDataEvEUb_E3__0NS_14default_deleteIS2_EEED1B8ne180100Ev((uint64_t *)&v9);
}

void sub_1C5679AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _ZNSt3__110unique_ptrIZZN8ImsUdpNw11receiveDataEvEUb_E3__0NS_14default_deleteIS2_EEED1B8ne180100Ev(&a10);
  _Unwind_Resume(a1);
}

void CCHmac(CCHmacAlgorithm algorithm, const void *key, size_t keyLength, const void *data, size_t dataLength, void *macOut)
{
}

int CC_MD5_Final(unsigned __int8 *md, CC_MD5_CTX *c)
{
  return MEMORY[0x1F40C9718](md, c);
}

int CC_MD5_Init(CC_MD5_CTX *c)
{
  return MEMORY[0x1F40C9720](c);
}

int CC_MD5_Update(CC_MD5_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9728](c, data, *(void *)&len);
}

int CC_SHA1_Final(unsigned __int8 *md, CC_SHA1_CTX *c)
{
  return MEMORY[0x1F40C9738](md, c);
}

int CC_SHA1_Init(CC_SHA1_CTX *c)
{
  return MEMORY[0x1F40C9740](c);
}

int CC_SHA1_Update(CC_SHA1_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9748](c, data, *(void *)&len);
}

int CC_SHA256_Final(unsigned __int8 *md, CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9778](md, c);
}

int CC_SHA256_Init(CC_SHA256_CTX *c)
{
  return MEMORY[0x1F40C9780](c);
}

int CC_SHA256_Update(CC_SHA256_CTX *c, const void *data, CC_LONG len)
{
  return MEMORY[0x1F40C9788](c, data, *(void *)&len);
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7430](BOOLean);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D7898](allocator, at);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A18](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFStringRef CFErrorCopyFailureReason(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1F40D7A88](err);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1F40D7AA8](err);
}

CFErrorDomain CFErrorGetDomain(CFErrorRef err)
{
  return (CFErrorDomain)MEMORY[0x1F40D7AB8](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

Boolean CFHTTPMessageAppendBytes(CFHTTPMessageRef message, const UInt8 *newBytes, CFIndex numBytes)
{
  return MEMORY[0x1F40D5278](message, newBytes, numBytes);
}

CFDictionaryRef CFHTTPMessageCopyAllHeaderFields(CFHTTPMessageRef message)
{
  return (CFDictionaryRef)MEMORY[0x1F40D5288](message);
}

CFDataRef CFHTTPMessageCopyBody(CFHTTPMessageRef message)
{
  return (CFDataRef)MEMORY[0x1F40D5290](message);
}

CFStringRef CFHTTPMessageCopyHeaderFieldValue(CFHTTPMessageRef message, CFStringRef headerField)
{
  return (CFStringRef)MEMORY[0x1F40D5298](message, headerField);
}

CFStringRef CFHTTPMessageCopyRequestMethod(CFHTTPMessageRef request)
{
  return (CFStringRef)MEMORY[0x1F40D52A0](request);
}

CFURLRef CFHTTPMessageCopyRequestURL(CFHTTPMessageRef request)
{
  return (CFURLRef)MEMORY[0x1F40D52A8](request);
}

CFDataRef CFHTTPMessageCopySerializedMessage(CFHTTPMessageRef message)
{
  return (CFDataRef)MEMORY[0x1F40D52B8](message);
}

CFHTTPMessageRef CFHTTPMessageCreateEmpty(CFAllocatorRef alloc, Boolean isRequest)
{
  return (CFHTTPMessageRef)MEMORY[0x1F40D52D0](alloc, isRequest);
}

CFHTTPMessageRef CFHTTPMessageCreateRequest(CFAllocatorRef alloc, CFStringRef requestMethod, CFURLRef url, CFStringRef httpVersion)
{
  return (CFHTTPMessageRef)MEMORY[0x1F40D52D8](alloc, requestMethod, url, httpVersion);
}

CFHTTPMessageRef CFHTTPMessageCreateResponse(CFAllocatorRef alloc, CFIndex statusCode, CFStringRef statusDescription, CFStringRef httpVersion)
{
  return (CFHTTPMessageRef)MEMORY[0x1F40D52E0](alloc, statusCode, statusDescription, httpVersion);
}

CFIndex CFHTTPMessageGetResponseStatusCode(CFHTTPMessageRef response)
{
  return MEMORY[0x1F40D52E8](response);
}

Boolean CFHTTPMessageIsHeaderComplete(CFHTTPMessageRef message)
{
  return MEMORY[0x1F40D52F8](message);
}

void CFHTTPMessageSetBody(CFHTTPMessageRef message, CFDataRef bodyData)
{
}

void CFHTTPMessageSetHeaderFieldValue(CFHTTPMessageRef message, CFStringRef headerField, CFStringRef value)
{
}

CFHostRef CFHostCreateWithName(CFAllocatorRef allocator, CFStringRef hostname)
{
  return (CFHostRef)MEMORY[0x1F40D5318](allocator, hostname);
}

CFArrayRef CFHostGetAddressing(CFHostRef theHost, Boolean *hasBeenResolved)
{
  return (CFArrayRef)MEMORY[0x1F40D5320](theHost, hasBeenResolved);
}

CFTypeID CFHostGetTypeID(void)
{
  return MEMORY[0x1F40D5328]();
}

void CFHostScheduleWithRunLoop(CFHostRef theHost, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

Boolean CFHostSetClient(CFHostRef theHost, CFHostClientCallBack clientCB, CFHostClientContext *clientContext)
{
  return MEMORY[0x1F40D5338](theHost, clientCB, clientContext);
}

Boolean CFHostStartInfoResolution(CFHostRef theHost, CFHostInfoType info, CFStreamError *error)
{
  return MEMORY[0x1F40D5340](theHost, *(void *)&info, error);
}

void CFHostUnscheduleFromRunLoop(CFHostRef theHost, CFRunLoopRef runLoop, CFStringRef runLoopMode)
{
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x1F40D7D08]();
}

void CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef center, const void *observer)
{
}

CFTypeID CFNullGetTypeID(void)
{
  return MEMORY[0x1F40D7D68]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E30](number);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x1F40D7F10](applicationID, userName, hostName);
}

void CFReadStreamClose(CFReadStreamRef stream)
{
}

CFErrorRef CFReadStreamCopyError(CFReadStreamRef stream)
{
  return (CFErrorRef)MEMORY[0x1F40D7F98](stream);
}

CFTypeRef CFReadStreamCopyProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName)
{
  return (CFTypeRef)MEMORY[0x1F40D7FA0](stream, propertyName);
}

CFStreamError CFReadStreamGetError(CFReadStreamRef stream)
{
  CFIndex v1 = MEMORY[0x1F40D7FD0](stream);
  result.error = v2;
  result.domain = v1;
  return result;
}

Boolean CFReadStreamHasBytesAvailable(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FF0](stream);
}

Boolean CFReadStreamOpen(CFReadStreamRef stream)
{
  return MEMORY[0x1F40D7FF8](stream);
}

CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1F40D8000](stream, buffer, bufferLength);
}

void CFReadStreamScheduleWithRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
}

Boolean CFReadStreamSetClient(CFReadStreamRef stream, CFOptionFlags streamEvents, CFReadStreamClientCallBack clientCB, CFStreamClientContext *clientContext)
{
  return MEMORY[0x1F40D8010](stream, streamEvents, clientCB, clientContext);
}

Boolean CFReadStreamSetProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x1F40D8020](stream, propertyName, propertyValue);
}

void CFReadStreamUnscheduleFromRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80B8]();
}

void CFStreamCreatePairWithSocketToHost(CFAllocatorRef alloc, CFStringRef host, UInt32 port, CFReadStreamRef *readStream, CFWriteStreamRef *writeStream)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8440](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation, contentsDeallocator);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

CFStringRef CFURLCreateStringByAddingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveUnescaped, CFStringRef legalURLCharactersToBeEscaped, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8870](allocator, originalString, charactersToLeaveUnescaped, legalURLCharactersToBeEscaped, *(void *)&encoding);
}

CFStringRef CFURLCreateStringByReplacingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveEscaped)
{
  return (CFStringRef)MEMORY[0x1F40D8878](allocator, originalString, charactersToLeaveEscaped);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88C0](allocator, URLString, baseURL);
}

CFIndex CFURLGetBytes(CFURLRef url, UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1F40D8900](url, buffer, bufferLength);
}

CFUUIDRef CFUUIDCreateFromString(CFAllocatorRef alloc, CFStringRef uuidStr)
{
  return (CFUUIDRef)MEMORY[0x1F40D8998](alloc, uuidStr);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B0](alloc, uuid);
}

CFTypeID CFUUIDGetTypeID(void)
{
  return MEMORY[0x1F40D89D8]();
}

Boolean CFWriteStreamCanAcceptBytes(CFWriteStreamRef stream)
{
  return MEMORY[0x1F40D8A78](stream);
}

void CFWriteStreamClose(CFWriteStreamRef stream)
{
}

CFErrorRef CFWriteStreamCopyError(CFWriteStreamRef stream)
{
  return (CFErrorRef)MEMORY[0x1F40D8A88](stream);
}

CFStreamError CFWriteStreamGetError(CFWriteStreamRef stream)
{
  CFIndex v1 = MEMORY[0x1F40D8AB8](stream);
  result.error = v2;
  result.domain = v1;
  return result;
}

Boolean CFWriteStreamOpen(CFWriteStreamRef stream)
{
  return MEMORY[0x1F40D8AD0](stream);
}

void CFWriteStreamScheduleWithRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
}

Boolean CFWriteStreamSetClient(CFWriteStreamRef stream, CFOptionFlags streamEvents, CFWriteStreamClientCallBack clientCB, CFStreamClientContext *clientContext)
{
  return MEMORY[0x1F40D8AE0](stream, streamEvents, clientCB, clientContext);
}

Boolean CFWriteStreamSetProperty(CFWriteStreamRef stream, CFStreamPropertyKey propertyName, CFTypeRef propertyValue)
{
  return MEMORY[0x1F40D8AF0](stream, propertyName, propertyValue);
}

void CFWriteStreamUnscheduleFromRunLoop(CFWriteStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode)
{
}

CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8 *buffer, CFIndex bufferLength)
{
  return MEMORY[0x1F40D8B08](stream, buffer, bufferLength);
}

uint64_t CLGetUncertaintyScaleFactors()
{
  return MEMORY[0x1F40DB588]();
}

uint64_t CPCancelWakeAtDateWithIdentifier()
{
  return MEMORY[0x1F41092A8]();
}

uint64_t CPScheduleWakeAtDateWithIdentifier()
{
  return MEMORY[0x1F41096B8]();
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return MEMORY[0x1F40E8678](*(void *)&kernelPort, notificationID);
}

IOReturn IODeregisterForSystemPower(io_object_t *notifier)
{
  return MEMORY[0x1F40E8778](notifier);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

uint64_t IOPMAssertionDeclareSystemActivity()
{
  return MEMORY[0x1F40E8F90]();
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1F40E8FA8](*(void *)&AssertionID);
}

IOReturn IOPMAssertionSetProperty(IOPMAssertionID theAssertion, CFStringRef theProperty, CFTypeRef theValue)
{
  return MEMORY[0x1F40E8FB8](*(void *)&theAssertion, theProperty, theValue);
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return MEMORY[0x1F40E9148](refcon, thePortRef, callback, notifier);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1F40E9240](*(void *)&connect);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x1F417CDE0]();
}

uint64_t NEHelperCacheCopyAppUUIDMapping()
{
  return MEMORY[0x1F40C98D8]();
}

uint64_t PPSCreateTelemetryIdentifier()
{
  return MEMORY[0x1F4145DC0]();
}

uint64_t PPSSendTelemetry()
{
  return MEMORY[0x1F4145DD0]();
}

SCDynamicStoreRef SCDynamicStoreCreate(CFAllocatorRef allocator, CFStringRef name, SCDynamicStoreCallBack callout, SCDynamicStoreContext *context)
{
  return (SCDynamicStoreRef)MEMORY[0x1F4101DB0](allocator, name, callout, context);
}

Boolean SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef store, dispatch_queue_t queue)
{
  return MEMORY[0x1F4101E08](store, queue);
}

Boolean SCDynamicStoreSetNotificationKeys(SCDynamicStoreRef store, CFArrayRef keys, CFArrayRef patterns)
{
  return MEMORY[0x1F4101E18](store, keys, patterns);
}

SCNetworkReachabilityRef SCNetworkReachabilityCreateWithAddressPair(CFAllocatorRef allocator, const sockaddr *localAddress, const sockaddr *remoteAddress)
{
  return (SCNetworkReachabilityRef)MEMORY[0x1F4101EF0](allocator, localAddress, remoteAddress);
}

Boolean SCNetworkReachabilityGetFlags(SCNetworkReachabilityRef target, SCNetworkReachabilityFlags *flags)
{
  return MEMORY[0x1F4101F08](target, flags);
}

Boolean SCNetworkReachabilitySetCallback(SCNetworkReachabilityRef target, SCNetworkReachabilityCallBack callout, SCNetworkReachabilityContext *context)
{
  return MEMORY[0x1F4101F20](target, callout, context);
}

Boolean SCNetworkReachabilitySetDispatchQueue(SCNetworkReachabilityRef target, dispatch_queue_t queue)
{
  return MEMORY[0x1F4101F28](target, queue);
}

OSStatus SSLClose(SSLContextRef context)
{
  return MEMORY[0x1F40F68B0](context);
}

SSLContextRef SSLCreateContext(CFAllocatorRef alloc, SSLProtocolSide protocolSide, SSLConnectionType connectionType)
{
  return (SSLContextRef)MEMORY[0x1F40F68D0](alloc, *(void *)&protocolSide, *(void *)&connectionType);
}

OSStatus SSLGetBufferedReadSize(SSLContextRef context, size_t *bufferSize)
{
  return MEMORY[0x1F40F68D8](context, bufferSize);
}

OSStatus SSLGetNegotiatedCipher(SSLContextRef context, SSLCipherSuite *cipherSuite)
{
  return MEMORY[0x1F40F68F8](context, cipherSuite);
}

OSStatus SSLGetSessionState(SSLContextRef context, SSLSessionState *state)
{
  return MEMORY[0x1F40F6930](context, state);
}

OSStatus SSLHandshake(SSLContextRef context)
{
  return MEMORY[0x1F40F6938](context);
}

OSStatus SSLRead(SSLContextRef context, void *data, size_t dataLength, size_t *processed)
{
  return MEMORY[0x1F40F6948](context, data, dataLength, processed);
}

OSStatus SSLSetCertificate(SSLContextRef context, CFArrayRef certRefs)
{
  return MEMORY[0x1F40F6968](context, certRefs);
}

OSStatus SSLSetConnection(SSLContextRef context, SSLConnectionRef connection)
{
  return MEMORY[0x1F40F6978](context, connection);
}

OSStatus SSLSetIOFuncs(SSLContextRef context, SSLReadFunc readFunc, SSLWriteFunc writeFunc)
{
  return MEMORY[0x1F40F6990](context, readFunc, writeFunc);
}

OSStatus SSLSetPeerDomainName(SSLContextRef context, const char *peerName, size_t peerNameLen)
{
  return MEMORY[0x1F40F69C0](context, peerName, peerNameLen);
}

OSStatus SSLWrite(SSLContextRef context, const void *data, size_t dataLength, size_t *processed)
{
  return MEMORY[0x1F40F69F0](context, data, dataLength, processed);
}

uint64_t SecCertificateGetSHA1Digest()
{
  return MEMORY[0x1F40F6BA8]();
}

uint64_t SecCertificateGetSignatureHashAlgorithm()
{
  return MEMORY[0x1F40F6BB0]();
}

uint64_t SecGenerateSelfSignedCertificate()
{
  return MEMORY[0x1F40F6DB0]();
}

uint64_t SecIdentityCreate()
{
  return MEMORY[0x1F40F6DC8]();
}

SecKeyRef SecKeyCopyPublicKey(SecKeyRef key)
{
  return (SecKeyRef)MEMORY[0x1F40F6E70](key);
}

SecKeyRef SecKeyCreateRandomKey(CFDictionaryRef parameters, CFErrorRef *error)
{
  return (SecKeyRef)MEMORY[0x1F40F6EE0](parameters, error);
}

uint64_t TelephonyRadiosGetRadioVendor()
{
  return MEMORY[0x1F417D8B0]();
}

uint64_t WiFiManagerClientCreate()
{
  return MEMORY[0x1F412FEA0]();
}

uint64_t WiFiManagerClientSetWoWState()
{
  return MEMORY[0x1F412FF48]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFHostStartInfoResolutionForInterface()
{
  return MEMORY[0x1F40D56B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t WISPostMetric()
{
  return MEMORY[0x1F4176C70]();
}

uint64_t asString()
{
  return MEMORY[0x1F4178208]();
}

uint64_t capabilities::radio::supportsRel16(capabilities::radio *this)
{
  return MEMORY[0x1F417D550](this);
}

uint64_t capabilities::radio::mav20Plus(capabilities::radio *this)
{
  return MEMORY[0x1F417D5F8](this);
}

uint64_t QMIServiceMsg::create()
{
  return MEMORY[0x1F41785E0]();
}

void wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(wireless_diagnostics::google::protobuf::MessageLite *this)
{
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1F4181C68](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int *a2)
{
  return MEMORY[0x1F4181C70](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unint64_t *a2)
{
  return MEMORY[0x1F4181C78](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian32Fallback(wireless_diagnostics::google::protobuf::io::CodedInputStream *this, unsigned int *a2)
{
  return MEMORY[0x1F4181C80](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::PopLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1F4181CA0](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::PushLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1F4181CA8](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  return MEMORY[0x1F4181CC8](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(wireless_diagnostics::google::protobuf::io::CodedOutputStream *this)
{
  return MEMORY[0x1F4181CE8](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage()
{
  return MEMORY[0x1F4181D10]();
}

void wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage(wireless_diagnostics::google::protobuf::internal::LogMessage *this)
{
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<()
{
  return MEMORY[0x1F4181D20]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=()
{
  return MEMORY[0x1F4181D30]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::VerifyVersion(wireless_diagnostics::google::protobuf::internal *this, uint64_t a2, uint64_t a3, const char *a4)
{
  return MEMORY[0x1F4181D68](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::ReadString()
{
  return MEMORY[0x1F4181D70]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1F4181D88](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteSInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1F4181DA0](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteString()
{
  return MEMORY[0x1F4181DA8]();
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1F4181DB0](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteUInt64(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1F4181DB8](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteFixed32(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1F4181DC0](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteMessage(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, const wireless_diagnostics::google::protobuf::MessageLite *a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1F4181DD0](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, wireless_diagnostics::google::protobuf::io::CodedInputStream *a2)
{
  return MEMORY[0x1F4181DE8](this, a2);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteBool(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1F4181DF0](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::WireFormatLite::WriteEnum(wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, uint64_t a2, uint64_t a3, wireless_diagnostics::google::protobuf::io::CodedOutputStream *a4)
{
  return MEMORY[0x1F4181DF8](this, a2, a3, a4);
}

uint64_t wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve(wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  return MEMORY[0x1F4181E10](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::New(wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase *this)
{
  return MEMORY[0x1F4181E18](this);
}

uint64_t wireless_diagnostics::google::protobuf::internal::StringTypeHandlerBase::Delete()
{
  return MEMORY[0x1F4181E20]();
}

uint64_t Ari::MsgDefById(Ari *this)
{
  return MEMORY[0x1F4178210](this);
}

uint64_t Ari::Log(Ari *this, uint64_t a2, const char *a3, ...)
{
  return MEMORY[0x1F4178228](this, a2, a3);
}

uint64_t ctu::XpcJetsamAssertion::createActivity()
{
  return MEMORY[0x1F417DA78]();
}

uint64_t ctu::XpcJetsamAssertion::create_default_global(ctu::XpcJetsamAssertion *this)
{
  return MEMORY[0x1F417DA80](this);
}

uint64_t ctu::cf::show(ctu::cf *this, const void *a2)
{
  return MEMORY[0x1F417DAE0](this, a2);
}

uint64_t ctu::cf::assign()
{
  return MEMORY[0x1F417DAF0]();
}

{
  return MEMORY[0x1F417DAF8]();
}

{
  return MEMORY[0x1F417DB00]();
}

uint64_t ctu::cf::assign(ctu::cf *this, BOOL *a2, const __CFBoolean *a3)
{
  return MEMORY[0x1F417DB10](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned __int8 *a2, const __CFNumber *a3)
{
  return MEMORY[0x1F417DB20](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, int *a2, const __CFNumber *a3)
{
  return MEMORY[0x1F417DB28](this, a2, a3);
}

uint64_t ctu::cf::assign(ctu::cf *this, unsigned int *a2, const __CFNumber *a3)
{
  return MEMORY[0x1F417DB30](this, a2, a3);
}

uint64_t ctu::hex()
{
  return MEMORY[0x1F417DBC0]();
}

uint64_t ctu::LogServer::create()
{
  return MEMORY[0x1F417DC20]();
}

uint64_t ctu::LogServer::addWriter()
{
  return MEMORY[0x1F417DC28]();
}

uint64_t ice::SendMsgBaseProxy::SendMsgBaseProxy()
{
  return MEMORY[0x1F417A648]();
}

void ice::SendMsgBaseProxy::~SendMsgBaseProxy(ice::SendMsgBaseProxy *this)
{
}

uint64_t ice::isARIResponseValid()
{
  return MEMORY[0x1F417A658]();
}

uint64_t ice::Client::setIndShouldWake(ice::Client *this)
{
  return MEMORY[0x1F417A660](this);
}

uint64_t ice::Client::regIndicationInternal()
{
  return MEMORY[0x1F417A668]();
}

uint64_t ice::Client::regEventHandlerInternal()
{
  return MEMORY[0x1F417A670]();
}

uint64_t ice::Client::start(ice::Client *this)
{
  return MEMORY[0x1F417A678](this);
}

uint64_t ice::Client::create()
{
  return MEMORY[0x1F417A680]();
}

uint64_t qmi::MessageBase::validateMsgId(qmi::MessageBase *this)
{
  return MEMORY[0x1F417CF58](this);
}

uint64_t qmi::MessageBase::MessageBase(qmi::MessageBase *this, const void *a2)
{
  return MEMORY[0x1F417CF70](this, a2);
}

uint64_t qmi::MessageBase::MessageBase()
{
  return MEMORY[0x1F417CF78]();
}

void qmi::MessageBase::~MessageBase(qmi::MessageBase *this)
{
}

uint64_t qmi::ClientRouter::reset(qmi::ClientRouter *this)
{
  return MEMORY[0x1F4178608](this);
}

uint64_t qmi::ClientRouter::addClient()
{
  return MEMORY[0x1F4178610]();
}

uint64_t qmi::ClientRouter::ClientRouter(qmi::ClientRouter *this, os_log_s *a2)
{
  return MEMORY[0x1F4178618](this, a2);
}

uint64_t qmi::ResponseBase::ResponseBase(qmi::ResponseBase *this, const void *a2)
{
  return MEMORY[0x1F417CF98](this, a2);
}

uint64_t qmi::MutableMessageBase::MutableMessageBase()
{
  return MEMORY[0x1F417CFC8]();
}

uint64_t qmi::MutableMessageBase::MutableMessageBase(qmi::MutableMessageBase *this)
{
  return MEMORY[0x1F417CFD0](this);
}

void qmi::MutableMessageBase::~MutableMessageBase(qmi::MutableMessageBase *this)
{
}

uint64_t qmi::MutableMessageBase::operator=()
{
  return MEMORY[0x1F417CFE0]();
}

uint64_t qmi::Client::createWithQueueLocal()
{
  return MEMORY[0x1F4178640]();
}

uint64_t qmi::Client::release(qmi::Client *this)
{
  return MEMORY[0x1F4178650](this);
}

void qmi::Client::~Client(qmi::Client *this)
{
}

uint64_t qmi::asString()
{
  return MEMORY[0x1F417D000]();
}

uint64_t tlv::throwIfNotEnoughBytes(tlv *this, const unsigned __int8 *a2, const unsigned __int8 *a3)
{
  return MEMORY[0x1F417D010](this, a2, a3);
}

uint64_t xpc::dyn_cast_or_default()
{
  return MEMORY[0x1F417DCB0]();
}

{
  return MEMORY[0x1F417DCB8]();
}

{
  return MEMORY[0x1F417DCC0]();
}

{
  return MEMORY[0x1F417DCD0]();
}

uint64_t AriMsg::GetBufGmid(AriMsg *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F4178238](this, a2);
}

uint64_t AriOsa::LogSrcInfo(AriOsa *this, const char *a2, const char *a3)
{
  return MEMORY[0x1F4178258](this, a2, a3);
}

uint64_t AriSdk::ARI_AriACK_SDK::unpack(AriSdk::ARI_AriACK_SDK *this)
{
  return MEMORY[0x1F4178260](this);
}

uint64_t AriSdk::ARI_AriACK_SDK::ARI_AriACK_SDK(AriSdk::ARI_AriACK_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F4178268](this, a2);
}

void AriSdk::ARI_AriACK_SDK::~ARI_AriACK_SDK(AriSdk::ARI_AriACK_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsRtpReq_SDK::ARI_IBICallPsRtpReq_SDK(AriSdk::ARI_IBICallPsRtpReq_SDK *this)
{
  return MEMORY[0x1F4178278](this);
}

void AriSdk::ARI_IBICallPsRtpReq_SDK::~ARI_IBICallPsRtpReq_SDK(AriSdk::ARI_IBICallPsRtpReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBICallPsRtpRspCb_SDK::unpack(AriSdk::ARI_IBICallPsRtpRspCb_SDK *this)
{
  return MEMORY[0x1F4178288](this);
}

uint64_t AriSdk::ARI_IBICallPsRtpRspCb_SDK::ARI_IBICallPsRtpRspCb_SDK(AriSdk::ARI_IBICallPsRtpRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F4178290](this, a2);
}

void AriSdk::ARI_IBICallPsRtpRspCb_SDK::~ARI_IBICallPsRtpRspCb_SDK(AriSdk::ARI_IBICallPsRtpRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMEStopMediaReq_SDK::ARI_IBIImsMEStopMediaReq_SDK(AriSdk::ARI_IBIImsMEStopMediaReq_SDK *this)
{
  return MEMORY[0x1F41782A0](this);
}

void AriSdk::ARI_IBIImsMEStopMediaReq_SDK::~ARI_IBIImsMEStopMediaReq_SDK(AriSdk::ARI_IBIImsMEStopMediaReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceAudCallEventReq_SDK::ARI_CsiIceAudCallEventReq_SDK(AriSdk::ARI_CsiIceAudCallEventReq_SDK *this)
{
  return MEMORY[0x1F41782B0](this);
}

void AriSdk::ARI_CsiIceAudCallEventReq_SDK::~ARI_CsiIceAudCallEventReq_SDK(AriSdk::ARI_CsiIceAudCallEventReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMEStartMediaReq_SDK::ARI_IBIImsMEStartMediaReq_SDK(AriSdk::ARI_IBIImsMEStartMediaReq_SDK *this)
{
  return MEMORY[0x1F41782C0](this);
}

void AriSdk::ARI_IBIImsMEStartMediaReq_SDK::~ARI_IBIImsMEStartMediaReq_SDK(AriSdk::ARI_IBIImsMEStartMediaReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK::unpack(AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK *this)
{
  return MEMORY[0x1F41782D0](this);
}

uint64_t AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK::ARI_IBIImsMEStopMediaRspCb_SDK(AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F41782D8](this, a2);
}

void AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK::~ARI_IBIImsMEStopMediaRspCb_SDK(AriSdk::ARI_IBIImsMEStopMediaRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK::unpack(AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK *this)
{
  return MEMORY[0x1F41782E8](this);
}

uint64_t AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK::ARI_IBIImsMEStartMediaRspCb_SDK(AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F41782F0](this, a2);
}

void AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK::~ARI_IBIImsMEStartMediaRspCb_SDK(AriSdk::ARI_IBIImsMEStartMediaRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK::ARI_IBIImsMEStopDTMFCodeReq_SDK(AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK *this)
{
  return MEMORY[0x1F4178300](this);
}

void AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK::~ARI_IBIImsMEStopDTMFCodeReq_SDK(AriSdk::ARI_IBIImsMEStopDTMFCodeReq_SDK *this)
{
}

uint64_t AriSdk::ARI_CsiIceAudCallEventRespCb_SDK::unpack(AriSdk::ARI_CsiIceAudCallEventRespCb_SDK *this)
{
  return MEMORY[0x1F4178310](this);
}

uint64_t AriSdk::ARI_CsiIceAudCallEventRespCb_SDK::ARI_CsiIceAudCallEventRespCb_SDK(AriSdk::ARI_CsiIceAudCallEventRespCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F4178318](this, a2);
}

void AriSdk::ARI_CsiIceAudCallEventRespCb_SDK::~ARI_CsiIceAudCallEventRespCb_SDK(AriSdk::ARI_CsiIceAudCallEventRespCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK::ARI_IBIImsMEStartDTMFCodeReq_SDK(AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK *this)
{
  return MEMORY[0x1F4178328](this);
}

void AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK::~ARI_IBIImsMEStartDTMFCodeReq_SDK(AriSdk::ARI_IBIImsMEStartDTMFCodeReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK::unpack(AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK *this)
{
  return MEMORY[0x1F4178338](this);
}

uint64_t AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK::ARI_IBIImsMEStopDTMFCodeRspCb_SDK(AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F4178340](this, a2);
}

void AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK::~ARI_IBIImsMEStopDTMFCodeRspCb_SDK(AriSdk::ARI_IBIImsMEStopDTMFCodeRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK::ARI_IBINetGetAcBarringInfoReq_SDK(AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK *this)
{
  return MEMORY[0x1F4178350](this);
}

void AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK::~ARI_IBINetGetAcBarringInfoReq_SDK(AriSdk::ARI_IBINetGetAcBarringInfoReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK::unpack(AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK *this)
{
  return MEMORY[0x1F4178360](this);
}

uint64_t AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK::ARI_IBIImsMEStartDTMFCodeRspCb_SDK(AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F4178368](this, a2);
}

void AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK::~ARI_IBIImsMEStartDTMFCodeRspCb_SDK(AriSdk::ARI_IBIImsMEStartDTMFCodeRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBINetDcSsacBarringInfoReq_SDK::ARI_IBINetDcSsacBarringInfoReq_SDK(AriSdk::ARI_IBINetDcSsacBarringInfoReq_SDK *this)
{
  return MEMORY[0x1F4178378](this);
}

void AriSdk::ARI_IBINetDcSsacBarringInfoReq_SDK::~ARI_IBINetDcSsacBarringInfoReq_SDK(AriSdk::ARI_IBINetDcSsacBarringInfoReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK::unpack(AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK *this)
{
  return MEMORY[0x1F4178388](this);
}

uint64_t AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK::ARI_IBIImsMERtcpSDESReportIndCb_SDK(AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F4178390](this, a2);
}

void AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK::~ARI_IBIImsMERtcpSDESReportIndCb_SDK(AriSdk::ARI_IBIImsMERtcpSDESReportIndCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK::unpack(AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK *this)
{
  return MEMORY[0x1F41783A0](this);
}

uint64_t AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK::ARI_IBINetGetAcBarringInfoRspCb_SDK(AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F41783A8](this, a2);
}

void AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK::~ARI_IBINetGetAcBarringInfoRspCb_SDK(AriSdk::ARI_IBINetGetAcBarringInfoRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK::unpack(AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK *this)
{
  return MEMORY[0x1F41783B8](this);
}

uint64_t AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK::ARI_IBIImsMEMediaSessionErrIndCb_SDK(AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F41783C0](this, a2);
}

void AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK::~ARI_IBIImsMEMediaSessionErrIndCb_SDK(AriSdk::ARI_IBIImsMEMediaSessionErrIndCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBINetDcSsacBarringInfoIndCb_SDK::unpack(AriSdk::ARI_IBINetDcSsacBarringInfoIndCb_SDK *this)
{
  return MEMORY[0x1F41783D0](this);
}

uint64_t AriSdk::ARI_IBINetDcSsacBarringInfoIndCb_SDK::ARI_IBINetDcSsacBarringInfoIndCb_SDK(AriSdk::ARI_IBINetDcSsacBarringInfoIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F41783D8](this, a2);
}

void AriSdk::ARI_IBINetDcSsacBarringInfoIndCb_SDK::~ARI_IBINetDcSsacBarringInfoIndCb_SDK(AriSdk::ARI_IBINetDcSsacBarringInfoIndCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBINetDcSsacBarringInfoRspCb_SDK::unpack(AriSdk::ARI_IBINetDcSsacBarringInfoRspCb_SDK *this)
{
  return MEMORY[0x1F41783E8](this);
}

uint64_t AriSdk::ARI_IBINetDcSsacBarringInfoRspCb_SDK::ARI_IBINetDcSsacBarringInfoRspCb_SDK(AriSdk::ARI_IBINetDcSsacBarringInfoRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F41783F0](this, a2);
}

void AriSdk::ARI_IBINetDcSsacBarringInfoRspCb_SDK::~ARI_IBINetDcSsacBarringInfoRspCb_SDK(AriSdk::ARI_IBINetDcSsacBarringInfoRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK::ARI_IBISipMessageInjectToCpTrace_SDK(AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK *this)
{
  return MEMORY[0x1F4178400](this);
}

void AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK::~ARI_IBISipMessageInjectToCpTrace_SDK(AriSdk::ARI_IBISipMessageInjectToCpTrace_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK::unpack(AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK *this)
{
  return MEMORY[0x1F4178410](this);
}

uint64_t AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK::ARI_IBIImsMERtcpSenderReportIndCb_SDK(AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F4178418](this, a2);
}

void AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK::~ARI_IBIImsMERtcpSenderReportIndCb_SDK(AriSdk::ARI_IBIImsMERtcpSenderReportIndCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK::ARI_IBIImsMEConfigureAudioMediaReq_SDK(AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK *this)
{
  return MEMORY[0x1F4178428](this);
}

void AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK::~ARI_IBIImsMEConfigureAudioMediaReq_SDK(AriSdk::ARI_IBIImsMEConfigureAudioMediaReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK(AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *this)
{
  return MEMORY[0x1F4178438](this);
}

void AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK::~ARI_IBISipMsgInjectToCpIMSTraceReq_SDK(AriSdk::ARI_IBISipMsgInjectToCpIMSTraceReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK(AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F4178448](this, a2);
}

void AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK::~ARI_IBIImsMEGetMediaCapabilityRspCb_SDK(AriSdk::ARI_IBIImsMEGetMediaCapabilityRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK::unpack(AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK *this)
{
  return MEMORY[0x1F4178458](this);
}

uint64_t AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK::ARI_IBIImsMERtcpReceiverReportIndCb_SDK(AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F4178460](this, a2);
}

void AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK::~ARI_IBIImsMERtcpReceiverReportIndCb_SDK(AriSdk::ARI_IBIImsMERtcpReceiverReportIndCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK::unpack(AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK *this)
{
  return MEMORY[0x1F4178470](this);
}

uint64_t AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK(AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F4178478](this, a2);
}

void AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK::~ARI_IBIImsMEConfigureAudioMediaRspCb_SDK(AriSdk::ARI_IBIImsMEConfigureAudioMediaRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK::ARI_IBIImsMETerminateMediaSessionReq_SDK(AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK *this)
{
  return MEMORY[0x1F4178488](this);
}

void AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK::~ARI_IBIImsMETerminateMediaSessionReq_SDK(AriSdk::ARI_IBIImsMETerminateMediaSessionReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK::unpack(AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK *this)
{
  return MEMORY[0x1F4178498](this);
}

uint64_t AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK::ARI_IBINetCellLteAcBarringStatusIndCb_SDK(AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F41784A0](this, a2);
}

void AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK::~ARI_IBINetCellLteAcBarringStatusIndCb_SDK(AriSdk::ARI_IBINetCellLteAcBarringStatusIndCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK::ARI_IBIImsMECreateAudioMediaSessionReq_SDK(AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK *this)
{
  return MEMORY[0x1F41784B0](this);
}

void AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK::~ARI_IBIImsMECreateAudioMediaSessionReq_SDK(AriSdk::ARI_IBIImsMECreateAudioMediaSessionReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK::unpack(AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK *this)
{
  return MEMORY[0x1F41784C0](this);
}

uint64_t AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK::ARI_IBIImsMETerminateMediaSessionRspCb_SDK(AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F41784C8](this, a2);
}

void AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK::~ARI_IBIImsMETerminateMediaSessionRspCb_SDK(AriSdk::ARI_IBIImsMETerminateMediaSessionRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK::unpack(AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK *this)
{
  return MEMORY[0x1F41784D8](this);
}

uint64_t AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK(AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F41784E0](this, a2);
}

void AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK::~ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK(AriSdk::ARI_IBIImsMECreateAudioMediaSessionRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK(AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK *this)
{
  return MEMORY[0x1F41784F0](this);
}

void AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK::~ARI_IBINetDcImsRegistrationStatusInfoReq_SDK(AriSdk::ARI_IBINetDcImsRegistrationStatusInfoReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK::unpack(AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK *this)
{
  return MEMORY[0x1F4178500](this);
}

uint64_t AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK(AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F4178508](this, a2);
}

void AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK::~ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK(AriSdk::ARI_IBINetDcImsRegistrationStatusInfoRspCb_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK(AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *this)
{
  return MEMORY[0x1F4178518](this);
}

void AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK::~ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK(AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusReq_SDK *this)
{
}

uint64_t AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK::unpack(AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK *this)
{
  return MEMORY[0x1F4178528](this);
}

uint64_t AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK(AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK *this, const unsigned __int8 *a2)
{
  return MEMORY[0x1F4178530](this, a2);
}

void AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK::~ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK(AriSdk::ARI_IBIMsCallCsVoimsProvideMMTelSessionStatusRspCb_SDK *this)
{
}

uint64_t QMIServiceMsg::getNewError(QMIServiceMsg *this)
{
  return MEMORY[0x1F41786B8](this);
}

uint64_t QMIServiceMsg::serialize(QMIServiceMsg *this)
{
  return MEMORY[0x1F41786C0](this);
}

uint64_t wireless_diagnostics::google::protobuf::io::CodedInputStream::BytesUntilLimit(wireless_diagnostics::google::protobuf::io::CodedInputStream *this)
{
  return MEMORY[0x1F4181E40](this);
}

uint64_t qmi::MessageBase::findTlvValue(qmi::MessageBase *this)
{
  return MEMORY[0x1F417D0A0](this);
}

uint64_t qmi::ClientRouter::setHandler()
{
  return MEMORY[0x1F41786C8]();
}

uint64_t qmi::ClientRouter::setIndShouldWake(qmi::ClientRouter *this)
{
  return MEMORY[0x1F41786D0](this);
}

uint64_t qmi::ClientRouter::setIndHandlerInternal()
{
  return MEMORY[0x1F41786D8]();
}

uint64_t qmi::ClientRouter::get()
{
  return MEMORY[0x1F41786E0]();
}

uint64_t qmi::ClientRouter::stop()
{
  return MEMORY[0x1F41786E8]();
}

uint64_t qmi::ClientRouter::start()
{
  return MEMORY[0x1F41786F0]();
}

uint64_t qmi::Client::setHandler()
{
  return MEMORY[0x1F4178708]();
}

uint64_t qmi::Client::setIndHandler()
{
  return MEMORY[0x1F4178710]();
}

uint64_t qmi::Client::send()
{
  return MEMORY[0x1F4178720]();
}

uint64_t qmi::Client::start(qmi::Client *this)
{
  return MEMORY[0x1F4178730](this);
}

uint64_t xpc::object::to_string(xpc::object *this)
{
  return MEMORY[0x1F417DD78](this);
}

uint64_t AriSdk::MsgBase::getGMID(AriSdk::MsgBase *this)
{
  return MEMORY[0x1F4178588](this);
}

std::string::size_type std::string::find(const std::string *this, std::string::value_type __c, std::string::size_type __pos)
{
  return MEMORY[0x1F417E380](this, __c, __pos);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1F417E390](this, __s);
}

int std::string::compare(const std::string *this, std::string::size_type __pos1, std::string::size_type __n1, const std::string::value_type *__s)
{
  return MEMORY[0x1F417E398](this, __pos1, __n1, __s);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1F417E400](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

uint64_t ice::SendMsgBaseProxy::callback()
{
  return MEMORY[0x1F417A688]();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E458](this, a2);
}

void std::invalid_argument::~invalid_argument(std::invalid_argument *this)
{
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1F417E550](this, *(void *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5A0](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E5D0](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5E8](this, __str, __pos, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1F417E610](this, __pos, __n, __c);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos1, std::string::size_type __n1, const std::string *__str, std::string::size_type __pos2, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1F417E630](this, __pos1, __n1, __str, __pos2, __n2);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1F417E728]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x1F417E730]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::get()
{
  return MEMORY[0x1F417E758]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1F417E7A0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1F417E7C0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1F417E7E8]();
}

{
  return MEMORY[0x1F417E800]();
}

{
  return MEMORY[0x1F417E810]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E868]();
}

{
  return MEMORY[0x1F417E878]();
}

{
  return MEMORY[0x1F417E880]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8A8]();
}

{
  return MEMORY[0x1F417E8B0]();
}

{
  return MEMORY[0x1F417E8B8]();
}

{
  return MEMORY[0x1F417E8C0]();
}

{
  return MEMORY[0x1F417E8C8]();
}

{
  return MEMORY[0x1F417E8D0]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x1F417E908](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x1F417E918](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1F417E960](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1F417EAA8](retstr, __s);
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417EBE0](__str, __idx, *(void *)&__base);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

unint64_t std::stoul(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417EC20](__str, __idx, *(void *)&__base);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1F417EC90]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1F417ECA0]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1F417ECE0](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1F417ECE8](this);
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x1F417EE58](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE88](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1F417EE98](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void __cxa_bad_cast(void)
{
}

void __cxa_bad_typeid(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void *__cxa_get_exception_ptr(void *a1)
{
  return (void *)MEMORY[0x1F417EF70](a1);
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x1F40C9B68](*(void *)&a1, a2, *(void *)&a3);
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9D00](*(void *)&a1);
}

int *__xmlIndentTreeOutput(void)
{
  return (int *)MEMORY[0x1F4182560]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

int accept(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1F40CA200](*(void *)&a1, a2, a3);
}

uint64_t analytics_send_event_lazy_with_options()
{
  return MEMORY[0x1F41138E8]();
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

uint64_t atol(const char *a1)
{
  return MEMORY[0x1F40CA4B8](a1);
}

uint64_t atoll(const char *a1)
{
  return MEMORY[0x1F40CA4C8](a1);
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1F40CA530](*(void *)&a1, a2, *(void *)&a3);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1F40CB440](*(void *)&a1, a2, *(void *)&a3);
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

size_t dispatch_data_get_size(dispatch_data_t data)
{
  return MEMORY[0x1F40CBA48](data);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_set_context(dispatch_object_t object, void *context)
{
}

void dispatch_set_finalizer_f(dispatch_object_t object, dispatch_function_t finalizer)
{
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1F40CBDA8](__handle);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1F40CC058](*(void *)&a1, *(void *)&a2);
}

void free(void *a1)
{
}

void freeaddrinfo(addrinfo *a1)
{
}

void freeifaddrs(ifaddrs *a1)
{
}

const char *__cdecl gai_strerror(int a1)
{
  return (const char *)MEMORY[0x1F40CC340](*(void *)&a1);
}

int getaddrinfo(const char *a1, const char *a2, const addrinfo *a3, addrinfo **a4)
{
  return MEMORY[0x1F40CC348](a1, a2, a3, a4);
}

int getifaddrs(ifaddrs **a1)
{
  return MEMORY[0x1F40CC410](a1);
}

int getnameinfo(const sockaddr *a1, socklen_t a2, char *a3, socklen_t a4, char *a5, socklen_t a6, int a7)
{
  return MEMORY[0x1F40CC450](a1, *(void *)&a2, a3, *(void *)&a4, a5, *(void *)&a6, *(void *)&a7);
}

int getpwnam_r(const char *a1, passwd *a2, char *a3, size_t a4, passwd **a5)
{
  return MEMORY[0x1F40CC4E0](a1, a2, a3, a4, a5);
}

int getpwuid_r(uid_t a1, passwd *a2, char *a3, size_t a4, passwd **a5)
{
  return MEMORY[0x1F40CC4F0](*(void *)&a1, a2, a3, a4, a5);
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1F40CC558](*(void *)&a1, a2, a3);
}

int getsockopt(int a1, int a2, int a3, void *a4, socklen_t *a5)
{
  return MEMORY[0x1F40CC560](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, a5);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

uid_t getuid(void)
{
  return MEMORY[0x1F40CC570]();
}

tm *__cdecl gmtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1F40CC5B0](a1, a2);
}

unsigned int if_nametoindex(const char *a1)
{
  return MEMORY[0x1F40CC650](a1);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1F40CC678](*(void *)&a1, a2, a3, *(void *)&a4);
}

int inet_pton(int a1, const char *a2, void *a3)
{
  return MEMORY[0x1F40CC680](*(void *)&a1, a2, a3);
}

int ioctl(int a1, unint64_t a2, ...)
{
  return MEMORY[0x1F40CC690](*(void *)&a1, a2);
}

int listen(int a1, int a2)
{
  return MEMORY[0x1F40CC840](*(void *)&a1, *(void *)&a2);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void nw_connection_cancel(nw_connection_t connection)
{
}

uint64_t nw_connection_get_id()
{
  return MEMORY[0x1F40F2B48]();
}

uint64_t nw_connection_get_uuid()
{
  return MEMORY[0x1F40F2B58]();
}

void nw_connection_receive_message(nw_connection_t connection, nw_connection_receive_completion_t completion)
{
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
}

void nw_connection_set_state_changed_handler(nw_connection_t connection, nw_connection_state_changed_handler_t handler)
{
}

void nw_connection_start(nw_connection_t connection)
{
}

uint64_t nw_endpoint_create_host_with_numeric_port()
{
  return MEMORY[0x1F40F2EB0]();
}

uint16_t nw_endpoint_get_port(nw_endpoint_t endpoint)
{
  return MEMORY[0x1F40F2F20](endpoint);
}

int nw_error_get_error_code(nw_error_t error)
{
  return MEMORY[0x1F40F2F60](error);
}

uint64_t nw_interface_create_with_name()
{
  return MEMORY[0x1F40F3238]();
}

void nw_listener_cancel(nw_listener_t listener)
{
}

nw_listener_t nw_listener_create(nw_parameters_t parameters)
{
  return (nw_listener_t)MEMORY[0x1F40F3320](parameters);
}

void nw_listener_set_new_connection_handler(nw_listener_t listener, nw_listener_new_connection_handler_t handler)
{
}

void nw_listener_set_new_connection_limit(nw_listener_t listener, uint32_t new_connection_limit)
{
}

void nw_listener_set_queue(nw_listener_t listener, dispatch_queue_t queue)
{
}

void nw_listener_set_state_changed_handler(nw_listener_t listener, nw_listener_state_changed_handler_t handler)
{
}

void nw_listener_start(nw_listener_t listener)
{
}

uint64_t nw_parameters_allow_sharing_port_with_listener()
{
  return MEMORY[0x1F40F33F0]();
}

nw_parameters_t nw_parameters_create_secure_udp(nw_parameters_configure_protocol_block_t configure_dtls, nw_parameters_configure_protocol_block_t configure_udp)
{
  return (nw_parameters_t)MEMORY[0x1F40F34E0](configure_dtls, configure_udp);
}

void nw_parameters_require_interface(nw_parameters_t parameters, nw_interface_t interface)
{
}

uint64_t nw_parameters_set_delegated_unique_pid()
{
  return MEMORY[0x1F40F35F0]();
}

void nw_parameters_set_local_endpoint(nw_parameters_t parameters, nw_endpoint_t local_endpoint)
{
}

uint64_t nw_path_create_evaluator_for_endpoint()
{
  return MEMORY[0x1F40F3858]();
}

uint64_t nw_path_evaluator_get_client_id()
{
  return MEMORY[0x1F40F3890]();
}

void nw_release(void *obj)
{
}

void *__cdecl nw_retain(void *obj)
{
  return (void *)MEMORY[0x1F40F3EA8](obj);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_enumerationMutation(id obj)
{
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_release(void *object)
{
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1F40CD648]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1F40CDAC8](a1, a2);
}

uint64_t random(void)
{
  return MEMORY[0x1F40CDC18]();
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1F40CDC50](*(void *)&a1, a2, a3);
}

ssize_t recvfrom(int a1, void *a2, size_t a3, int a4, sockaddr *a5, socklen_t *a6)
{
  return MEMORY[0x1F40CDCC0](*(void *)&a1, a2, a3, *(void *)&a4, a5, a6);
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x1F40CDED8](*(void *)&a1, a2, a3, a4, a5);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x1F40CDF30](*(void *)&a1, a2, a3, *(void *)&a4);
}

ssize_t sendto(int a1, const void *a2, size_t a3, int a4, const sockaddr *a5, socklen_t a6)
{
  return MEMORY[0x1F40CDF48](*(void *)&a1, a2, a3, *(void *)&a4, a5, *(void *)&a6);
}

int setsockopt(int a1, int a2, int a3, const void *a4, socklen_t a5)
{
  return MEMORY[0x1F40CDFC0](*(void *)&a1, *(void *)&a2, *(void *)&a3, a4, *(void *)&a5);
}

int shutdown(int a1, int a2)
{
  return MEMORY[0x1F40CDFF8](*(void *)&a1, *(void *)&a2);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1F40CE090](*(void *)&a1, *(void *)&a2, *(void *)&a3);
}

void srandomdev(void)
{
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int strcasecmp(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE138](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x1F40CE190](*(void *)&__errnum, __strerrbuf, __buflen);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncasecmp(const char *a1, const char *a2, size_t a3)
{
  return MEMORY[0x1F40CE1D8](a1, a2, a3);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x1F40CE260](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2E0](__str, __endptr, *(void *)&__base);
}

int symlink(const char *a1, const char *a2)
{
  return MEMORY[0x1F40CE360](a1, a2);
}

uint64_t sysconf(int a1)
{
  return MEMORY[0x1F40CE3B8](*(void *)&a1);
}

void syslog(int a1, const char *a2, ...)
{
}

kern_return_t task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt)
{
  return MEMORY[0x1F40CE470](*(void *)&target_task, *(void *)&flavor, task_info_out, task_info_outCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

time_t timegm(tm *const a1)
{
  return MEMORY[0x1F40CE590](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1F40CE5E0](a1);
}

void uuid_generate(uuid_t out)
{
}

int uuid_parse(const uuid_string_t in, uuid_t uu)
{
  return MEMORY[0x1F40CE660](in, uu);
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

xmlNodePtr xmlAddChild(xmlNodePtr parent, xmlNodePtr cur)
{
  return (xmlNodePtr)MEMORY[0x1F41825C0](parent, cur);
}

void xmlDocDumpFormatMemory(xmlDocPtr cur, xmlChar **mem, int *size, int format)
{
}

xmlNodePtr xmlDocGetRootElement(const xmlDoc *doc)
{
  return (xmlNodePtr)MEMORY[0x1F4182678](doc);
}

xmlNodePtr xmlDocSetRootElement(xmlDocPtr doc, xmlNodePtr root)
{
  return (xmlNodePtr)MEMORY[0x1F4182680](doc, root);
}

void xmlFreeDoc(xmlDocPtr cur)
{
}

xmlDocPtr xmlNewDoc(const xmlChar *version)
{
  return (xmlDocPtr)MEMORY[0x1F4182730](version);
}

xmlNodePtr xmlNewNode(xmlNsPtr ns, const xmlChar *name)
{
  return (xmlNodePtr)MEMORY[0x1F4182758](ns, name);
}

xmlNsPtr xmlNewNs(xmlNodePtr node, const xmlChar *href, const xmlChar *prefix)
{
  return (xmlNsPtr)MEMORY[0x1F4182760](node, href, prefix);
}

xmlAttrPtr xmlNewProp(xmlNodePtr node, const xmlChar *name, const xmlChar *value)
{
  return (xmlAttrPtr)MEMORY[0x1F4182770](node, name, value);
}

xmlNodePtr xmlNewText(const xmlChar *content)
{
  return (xmlNodePtr)MEMORY[0x1F4182778](content);
}

xmlNodePtr xmlNewTextChild(xmlNodePtr parent, xmlNsPtr ns, const xmlChar *name, const xmlChar *content)
{
  return (xmlNodePtr)MEMORY[0x1F4182780](parent, ns, name, content);
}

void xmlNodeSetName(xmlNodePtr cur, const xmlChar *name)
{
}

xmlDocPtr xmlReadMemory(const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  return (xmlDocPtr)MEMORY[0x1F4182820](buffer, *(void *)&size, URL, encoding, *(void *)&options);
}

void xmlSetNs(xmlNodePtr node, xmlNsPtr ns)
{
}

void xpc_array_append_value(xpc_object_t xarray, xpc_object_t value)
{
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEA30](objects, count);
}

size_t xpc_array_get_count(xpc_object_t xarray)
{
  return MEMORY[0x1F40CEA58](xarray);
}

const uint8_t *__cdecl xpc_array_get_uuid(xpc_object_t xarray, size_t index)
{
  return (const uint8_t *)MEMORY[0x1F40CEAA0](xarray, index);
}

xpc_object_t xpc_array_get_value(xpc_object_t xarray, size_t index)
{
  return (xpc_object_t)MEMORY[0x1F40CEAA8](xarray, index);
}

xpc_object_t xpc_BOOL_create(BOOL value)
{
  return (xpc_object_t)MEMORY[0x1F40CEB10](value);
}

void xpc_connection_cancel(xpc_connection_t connection)
{
}

xpc_connection_t xpc_connection_create_mach_service(const char *name, dispatch_queue_t targetq, uint64_t flags)
{
  return (xpc_connection_t)MEMORY[0x1F40CEBD0](name, targetq, flags);
}

void xpc_connection_resume(xpc_connection_t connection)
{
}

void xpc_connection_send_message(xpc_connection_t connection, xpc_object_t message)
{
}

void xpc_connection_set_event_handler(xpc_connection_t connection, xpc_handler_t handler)
{
}

char *__cdecl xpc_copy_description(xpc_object_t object)
{
  return (char *)MEMORY[0x1F40CED28](object);
}

xpc_object_t xpc_data_create(const void *bytes, size_t length)
{
  return (xpc_object_t)MEMORY[0x1F40CED90](bytes, length);
}

BOOL xpc_dictionary_apply(xpc_object_t xdict, xpc_dictionary_applier_t applier)
{
  return MEMORY[0x1F40CEE08](xdict, applier);
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x1F40CEE40](original);
}

xpc_connection_t xpc_dictionary_get_remote_connection(xpc_object_t xdict)
{
  return (xpc_connection_t)MEMORY[0x1F40CEEE0](xdict);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_fd(xpc_object_t xdict, const char *key, int fd)
{
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

BOOL xpc_equal(xpc_object_t object1, xpc_object_t object2)
{
  return MEMORY[0x1F40CF040](object1, object2);
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF188](value);
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1F40CF208]();
}

void xpc_release(xpc_object_t object)
{
}

xpc_object_t xpc_retain(xpc_object_t object)
{
  return (xpc_object_t)MEMORY[0x1F40CF248](object);
}

xpc_object_t xpc_string_create(const char *string)
{
  return (xpc_object_t)MEMORY[0x1F40CF290](string);
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return (const char *)MEMORY[0x1F40CF2C8](xstring);
}

xpc_object_t xpc_uint64_create(uint64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF320](value);
}