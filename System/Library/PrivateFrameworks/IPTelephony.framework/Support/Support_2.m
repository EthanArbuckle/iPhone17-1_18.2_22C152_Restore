void sub_1C52ECFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;

  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void SipTcpConnection::stack(SipTcpConnection *this@<X0>, void *a2@<X8>)
{
  v4 = (std::__shared_weak_count *)*((void *)this + 38);
  if (!v4) {
    goto LABEL_20;
  }
  v5 = std::__shared_weak_count::lock(v4);
  if (!v5) {
    goto LABEL_20;
  }
  v6 = v5;
  uint64_t v7 = *((void *)this + 37);
  if (!v7 || ((*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 32))(&v12), !v13))
  {
LABEL_19:
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
LABEL_20:
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  v8 = std::__shared_weak_count::lock(v13);
  if (v8) {
    uint64_t v9 = v12;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  if (!v9)
  {
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    goto LABEL_19;
  }
  *a2 = 0;
  a2[1] = 0;
  v10 = *(std::__shared_weak_count **)(v9 + 16);
  if (v10)
  {
    v11 = std::__shared_weak_count::lock(v10);
    a2[1] = v11;
    if (v11) {
      *a2 = *(void *)(v9 + 8);
    }
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1C52ED15C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::connectionClosedByPeer(int8x8_t *this)
{
  v2 = this + 10;
  uint64_t v3 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[10] + 64))(this + 10);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"SipTcpConnection::connectionClosedByPeer", 40);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  SipTcpConnection::logPeerTermination((uint64_t)this, 3);
  return SipTcpConnection::handlePeerTermination(this);
}

uint64_t non-virtual thunk to'SipTcpConnection::connectionClosedByPeer(int8x8_t *this)
{
  return SipTcpConnection::connectionClosedByPeer(this - 23);
}

uint64_t SipTcpConnection::connectionResetByPeer(int8x8_t *this)
{
  v2 = this + 10;
  uint64_t v3 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[10] + 64))(this + 10);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"SipTcpConnection::connectionResetByPeer", 39);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  SipTcpConnection::logPeerTermination((uint64_t)this, 2);
  return SipTcpConnection::handlePeerTermination(this);
}

uint64_t non-virtual thunk to'SipTcpConnection::connectionResetByPeer(int8x8_t *this)
{
  return SipTcpConnection::connectionResetByPeer(this - 23);
}

void SipTcpConnection::sendData(int8x8_t *this@<X0>, uint64_t a2@<X8>)
{
  int8x8_t v5 = this[35];
  if (v5)
  {
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    (*(void (**)(void *__return_ptr))(**(void **)&v5 + 32))((void *)a2);
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    __p = &unk_1F20B2680;
    v10 = &_bambiDomain;
    int v11 = 1073741840;
    if (*(uint64_t **)(a2 + 8) == &_bambiDomain)
    {
      int v7 = *(_DWORD *)(a2 + 16);
      ImsResult::~ImsResult((ImsResult *)&__p);
      if (v7 == 1073741840) {
        SipTcpConnection::removeFromTransport(this);
      }
    }
    else
    {
      ImsResult::~ImsResult((ImsResult *)&__p);
    }
    if (((*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16)) & 1) == 0&& !this[64].i8[3])
    {
      SipTcpConnection::scheduleCrlfKeepAlive(this);
      std::string::basic_string[abi:ne180100]<0>(&__p, "MO-Data");
      SipTcpConnection::isLazuliConnection((SipTcpConnection *)this);
      SipTcpConnection::reportRescheduleEvent((SipTcpConnection *)this, v8, (uint64_t)&__p);
      if (v12 < 0) {
        operator delete(__p);
      }
    }
  }
  else
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    __p = &unk_1F20B2680;
    v10 = &_bambiDomain;
    int v11 = 1073741827;
    v6 = (const std::string *)ImsResult::operator<<<char [33]>((uint64_t)&__p, "send: connection not initialized");
    ImsResult::ImsResult((ImsResult *)a2, v6);
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
}

void sub_1C52ED534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  ImsResult::~ImsResult(v15);
  _Unwind_Resume(a1);
}

void SipTcpConnection::initializeOutgoing(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, ImsResult *a7@<X8>)
{
  *(unsigned char *)(a1 + 513) = 1;
  if (*(void *)(a1 + 280))
  {
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v51.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v51.__r_.__value_.__r.__words[2]) = 1073741825;
    uint64_t v8 = (const std::string *)ImsResult::operator<<<char [31]>((uint64_t)&v51, "connection already initialized");
    ImsResult::ImsResult(a7, v8);
    ImsResult::~ImsResult((ImsResult *)&v51);
    return;
  }
  char v12 = *(std::__shared_weak_count **)(a1 + 304);
  if (!v12)
  {
    int v42 = 0;
    long long v13 = 0;
LABEL_17:
    uint64_t v14 = 0;
LABEL_18:
    uint64_t data_low = 104;
    goto LABEL_24;
  }
  long long v13 = std::__shared_weak_count::lock(v12);
  if (!v13)
  {
    int v42 = 0;
    goto LABEL_17;
  }
  uint64_t v14 = *(void *)(a1 + 296);
  if (!v14)
  {
    int v42 = 0;
    goto LABEL_18;
  }
  (*(void (**)(std::string *__return_ptr, void))(*(void *)v14 + 32))(&v51, *(void *)(a1 + 296));
  if (v51.__r_.__value_.__l.__size_)
  {
    long long v15 = std::__shared_weak_count::lock((std::__shared_weak_count *)v51.__r_.__value_.__l.__size_);
    if (v15) {
      std::string::size_type v16 = v51.__r_.__value_.__r.__words[0];
    }
    else {
      std::string::size_type v16 = 0;
    }
    if (v51.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v51.__r_.__value_.__l.__size_);
    }
    if (v16)
    {
      (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(void *)v16 + 200))(&v51, v16);
      uint64_t data_low = LODWORD(v51.__r_.__value_.__l.__data_);
      (*(uint64_t (**)(std::string::size_type))(*(void *)v16 + 16))(v16);
      if (!v15) {
        goto LABEL_23;
      }
      goto LABEL_22;
    }
    uint64_t data_low = 104;
    if (v15) {
LABEL_22:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  else
  {
    uint64_t data_low = 104;
  }
LABEL_23:
  int v42 = 1;
LABEL_24:
  SipTcpConnection::networkManager((SipTcpConnection *)&v51, a1);
  std::string::size_type v18 = v51.__r_.__value_.__r.__words[0];
  if (v51.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v51.__r_.__value_.__l.__size_);
  }
  v19 = (_OWORD *)(a1 + 280);
  if (v18)
  {
    v41 = v13;
    SipTcpConnection::networkManager((SipTcpConnection *)&__p, a1);
    v20 = *(std::__shared_weak_count **)(a1 + 208);
    if (!v20
      || (std::string::size_type v21 = __p.__r_.__value_.__r.__words[0],
          uint64_t v22 = *(void *)(a1 + 200),
          (v23 = std::__shared_weak_count::lock(v20)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v24 = v22 + 184;
    if (!v22) {
      uint64_t v24 = 0;
    }
    uint64_t v49 = v24;
    v50 = v23;
    (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t *, uint64_t, uint64_t, uint64_t, void))(*(void *)v21 + 104))(&v51, v21, &v49, a4, a6, data_low, *(unsigned __int8 *)(a1 + 516));
    long long v25 = *(_OWORD *)&v51.__r_.__value_.__l.__data_;
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = 0uLL;
    v26 = *(std::__shared_weak_count **)(a1 + 288);
    _OWORD *v19 = v25;
    if (v26)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      if (v51.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v51.__r_.__value_.__l.__size_);
      }
    }
    long long v13 = v41;
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  memset(&__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100]<0>(&__p, "67A03811-DB0A-594E-C2AE-8B0517EDF26F");
  memset(&v47, 0, sizeof(v47));
  if (SipTcpConnection::isLazuliConnection((SipTcpConnection *)a1))
  {
    ims::convertBundleIdToUuid(&v51);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v51;
    if (!*(unsigned char *)(a1 + 516)) {
      goto LABEL_59;
    }
    v27 = *(std::__shared_weak_count **)(a1 + 304);
    if (v27)
    {
      v28 = std::__shared_weak_count::lock(v27);
      if (v28)
      {
        v29 = v28;
        uint64_t v30 = *(void *)(a1 + 296);
        if (v30)
        {
          (*(void (**)(dispatch_object_t *__return_ptr))(*(void *)v30 + 32))(&v55);
          if (v56)
          {
            v31 = std::__shared_weak_count::lock(v56);
            if (v31) {
              dispatch_object_t v32 = v55;
            }
            else {
              dispatch_object_t v32 = 0;
            }
            if (v56) {
              std::__shared_weak_count::__release_weak(v56);
            }
            if (v32)
            {
              uint64_t v33 = (*((uint64_t (**)(dispatch_object_t))v32->isa + 2))(v32);
              if (*(char *)(v33 + 487) < 0) {
                std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(v33 + 464), *(void *)(v33 + 472));
              }
              else {
                std::string v51 = *(std::string *)(v33 + 464);
              }
              if (v31) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v31);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v29);
              goto LABEL_58;
            }
            if (v31) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v31);
            }
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
    }
    memset(&v51, 0, sizeof(v51));
LABEL_58:
    std::string v47 = v51;
LABEL_59:
    if (v42)
    {
      IPTelephonyManager::getInstance((uint64_t *)&v51);
      uint64_t v34 = *(void *)(v51.__r_.__value_.__r.__words[0] + 168);
      if (v51.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v51.__r_.__value_.__l.__size_);
      }
      if (v34)
      {
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v14 + 80))(&v51, v14);
        BambiClient::addAssertions(v34, (uint64_t)&v51, *(_DWORD *)(a1 + 360));
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v51.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  *((void *)a7 + 2) = 0;
  *((void *)a7 + 3) = 0;
  *((void *)a7 + 7) = 0;
  *((void *)a7 + 8) = 0;
  *((void *)a7 + 5) = 0;
  *((void *)a7 + 6) = 0;
  *(void *)a7 = &unk_1F20B2680;
  *((void *)a7 + 1) = &_bambiDomain;
  *((void *)a7 + 4) = 0;
  uint64_t v35 = *(void *)v19;
  if (*(void *)v19)
  {
    uint64_t isLazuliConnection = SipTcpConnection::isLazuliConnection((SipTcpConnection *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 200))(v35, isLazuliConnection);
    uint64_t v37 = *(void *)v19;
    v38 = sImsDispatchQueue;
    if (sImsDispatchQueue)
    {
      dispatch_object_t v55 = (dispatch_object_t)sImsDispatchQueue;
    }
    else
    {
      v38 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v38;
      dispatch_object_t v55 = v38;
      if (!v38) {
        goto LABEL_71;
      }
    }
    dispatch_retain(v38);
LABEL_71:
    v46[0] = &unk_1F20B3050;
    v46[1] = 0;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, dispatch_object_t *, std::string *, void, void *, std::string *, char))(*(void *)v37 + 16))(&v51, v37, a2, a3, a4, &v55, &__p, 0, v46, &v47, a5);
    ImsResult::operator=((uint64_t)a7, (uint64_t)&v51);
    ImsResult::~ImsResult((ImsResult *)&v51);
    ims::CFType::~CFType((ims::CFType *)v46);
    if (v55) {
      dispatch_release(v55);
    }
    goto LABEL_73;
  }
  long long v52 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  v51.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  LODWORD(v51.__r_.__value_.__r.__words[2]) = 0x40000000;
  uint64_t v39 = ImsResult::operator<<<char [51]>((uint64_t)&v51, "Network Manager un-available to create new socket.");
  ImsResult::operator=((uint64_t)a7, v39);
  ImsResult::~ImsResult((ImsResult *)&v51);
LABEL_73:
  if ((*(unsigned int (**)(void, void))(**((void **)a7 + 1) + 24))(*((void *)a7 + 1), *((unsigned int *)a7 + 4)))
  {
    v40 = *(std::__shared_weak_count **)(a1 + 288);
    *(void *)v19 = 0;
    *(void *)(a1 + 288) = 0;
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1C52EDC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  _Unwind_Resume(a1);
}

void SipTcpConnection::networkManager(SipTcpConnection *this, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 304);
  if (!v3 || (int8x8_t v5 = std::__shared_weak_count::lock(v3)) == 0)
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    return;
  }
  v6 = v5;
  uint64_t v7 = *(void *)(a2 + 296);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 32))(&v10);
    if (v11)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v11);
      if (v8) {
        uint64_t v9 = v10;
      }
      else {
        uint64_t v9 = 0;
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v9)
      {
        (*(void (**)(uint64_t))(*(void *)v9 + 176))(v9);
        if (!v8) {
          goto LABEL_18;
        }
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    if (v8) {
LABEL_17:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
LABEL_18:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1C52EDEA0(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [51]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C52EDF4C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

ImsOutStream *SipTcpConnection::printDebugInfo(SipTcpConnection *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    ", 4);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v4 = (unsigned char *)(*(uint64_t (**)(SipTcpConnection *, ImsOutStream *))(*(void *)this + 104))(this, a2);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v4[17] = 0;
  if (*((void *)this + 43))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"      Attached transactions:", 28);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    for (i = (void *)*((void *)this + 42); i; i = (void *)*i)
    {
      uint64_t v6 = i[2];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"      ", 6);
      *((unsigned char *)a2 + 17) = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v6 + 16))(__p, v6);
      (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
      (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((unsigned char *)a2 + 17) = 0;
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return a2;
}

void sub_1C52EE158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipTcpConnection::logPrefix(SipTcpConnection *this, ImsOutStream *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 24))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C52EE218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipTcpConnection::logPrefix(SipTcpConnection *this, ImsOutStream *a2)
{
}

ImsOutStream *SipTcpConnection::toStream(SipTcpConnection *this, ImsOutStream *a2)
{
  uint64_t v4 = *((void *)this + 35);
  if (!v4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"(not connected)", 15);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_15:
    *((unsigned char *)a2 + 17) = 0;
    return a2;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 136))(&v8);
  uint64_t v5 = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 35) + 136))(&v8);
    (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v8 + 40))(v8, a2);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"unknown", 7);
    *((unsigned char *)a2 + 17) = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" <-> ", 5);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 35) + 104))(&v8);
  uint64_t v6 = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (!v6)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"unknown", 7);
    goto LABEL_15;
  }
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 35) + 104))(&v8);
  (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v8 + 40))(v8, a2);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return a2;
}

void sub_1C52EE45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipTcpConnection::transportGroup(SipTcpConnection *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 38);
  if (!v4 || (uint64_t v5 = std::__shared_weak_count::lock(v4)) == 0)
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  uint64_t v6 = v5;
  uint64_t v7 = *((void *)this + 37);
  if (v7)
  {
    *a2 = 0;
    a2[1] = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 24))(&v10);
    *a2 = 0;
    a2[1] = 0;
    if (v11)
    {
      uint64_t v8 = std::__shared_weak_count::lock(v11);
      a2[1] = v8;
      if (v8)
      {
        uint64_t v9 = v10;
        *a2 = v10;
      }
      else
      {
        uint64_t v9 = 0;
      }
      if (v11) {
        std::__shared_weak_count::__release_weak(v11);
      }
      if (v9) {
        goto LABEL_15;
      }
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
LABEL_15:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1C52EE550(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

double SipTcpConnection::sendPing@<D0>(int8x8_t *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  v23[4] = *MEMORY[0x1E4F143B8];
  if (SipTcpConnection::isLazuliConnection((SipTcpConnection *)this)
    && (SipTcpConnection::isOnWiFi((SipTcpConnection *)this) & 1) == 0
    && ((time_t v16 = time(0), this[64].i8[3]) || *(void *)&this[67] + 540 > v16))
  {
    int8x8_t v18 = this[10];
    v17 = this + 10;
    uint64_t v19 = (*(uint64_t (**)(int8x8_t *))(*(void *)&v18 + 64))(v17);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v17 + 16))(v17, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"too soon to send another keepalive. skipping.", 45);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    double result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741826;
  }
  else
  {
    uint64_t v6 = (std::__shared_weak_count *)this[38];
    if (v6)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = v7;
        int8x8_t v9 = this[37];
        if (v9)
        {
          IPTelephonyManager::getInstance((uint64_t *)&__p);
          uint64_t v10 = *((void *)__p + 21);
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
          if (v10)
          {
            (*(void (**)(void **__return_ptr, int8x8_t))(**(void **)&v9 + 80))(&__p, v9);
            BambiClient::acquireKeepAliveAssertion(v10, (uint64_t)&__p, this[45].u32[0], a2);
            if (v22 < 0) {
              operator delete(__p);
            }
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
    {
    }
    {
    }
    this[64].i8[3] = 1;
    if (SipTcpConnection::isLazuliConnection((SipTcpConnection *)this))
    {
      int8x8_t v12 = this[25];
      int8x8_t v11 = this[26];
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v11 + 16), 1uLL, memory_order_relaxed);
      }
      long long v13 = operator new(0x20uLL);
      void *v13 = &unk_1F20BF0C0;
      v13[1] = v12;
      v13[2] = v11;
      v13[3] = this;
      v23[3] = v13;
      std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v23);
    }
    uint64_t v14 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[10] + 64))(this + 10);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)&this[10] + 16))(this + 10, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"sending CRLF ping", 17);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    SipTcpConnection::sendData(this, a3);
  }
  return result;
}

void sub_1C52EE918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::sendMessage@<X0>(int8x8_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[26];
  if (!v5 || (int8x8_t v9 = (std::__shared_weak_count *)a1[25], (v10 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  memset(v37, 0, sizeof(v37));
  uint64_t v35 = v9;
  v36 = v10;
  LoggableString::LoggableString((LoggableString *)&__p, "sendMessage");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v37, &v35, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  int8x8_t v11 = a1 + 10;
  uint64_t v12 = (*(uint64_t (**)(int8x8_t *))(*(void *)&a1[10] + 64))(a1 + 10);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)&a1[10] + 16))(a1 + 10, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"SipTcpConnection::sendMessage", 29);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  a4[2] = 0;
  a4[3] = 0;
  a4[7] = 0;
  a4[8] = 0;
  a4[5] = 0;
  a4[6] = 0;
  *a4 = &unk_1F20B2680;
  a4[1] = &_bambiDomain;
  a4[4] = 0;
  long long v13 = (std::__shared_weak_count *)a1[38];
  if (!v13)
  {
    uint64_t v14 = 0;
LABEL_18:
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741826;
    int8x8_t v18 = (ImsResult *)ImsResult::operator<<<char [31]>((uint64_t)&__p, "already removed from transport");
    uint64_t v19 = ImsLogContainer::logResult((ImsLogContainer *)&a1[10], v18);
    ImsResult::operator=((uint64_t)a4, (uint64_t)v19);
    ImsResult::~ImsResult((ImsResult *)&__p);
    goto LABEL_19;
  }
  uint64_t v14 = std::__shared_weak_count::lock(v13);
  if (!v14) {
    goto LABEL_18;
  }
  int8x8_t v15 = a1[37];
  if (!*(void *)&v15) {
    goto LABEL_18;
  }
  time_t v16 = (std::__shared_weak_count *)a1[26];
  int8x8_t v29 = a1[25];
  if (!v16)
  {
    uint64_t v30 = 0;
LABEL_34:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v30 = std::__shared_weak_count::lock(v16);
  if (!v30) {
    goto LABEL_34;
  }
  (*(void (**)(std::string *__return_ptr, int8x8_t, uint64_t, int8x8_t *))(**(void **)&v15 + 16))(&__p, v15, a2, &v29);
  ImsResult::operator=((uint64_t)a4, (uint64_t)&__p);
  ImsResult::~ImsResult((ImsResult *)&__p);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (((*(uint64_t (**)(void, void))(*(void *)a4[1] + 24))(a4[1], *((unsigned int *)a4 + 4)) & 1) == 0)
  {
    SipTcpConnection::scheduleCrlfKeepAlive(a1);
    std::string::basic_string[abi:ne180100]<0>(&__p, "MO-Data");
    SipTcpConnection::isLazuliConnection((SipTcpConnection *)a1);
    SipTcpConnection::reportRescheduleEvent((SipTcpConnection *)a1, v17, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_19:
  if (!a3) {
    goto LABEL_28;
  }
  if (!(*(unsigned int (**)(int8x8_t *))(*(void *)a1 + 176))(a1))
  {
    uint64_t v25 = (*(uint64_t (**)(int8x8_t *))(*(void *)v11 + 64))(a1 + 10);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v11 + 16))(a1 + 10, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"no longer initialized. Setting desired transport to our group.", 62);
    *(unsigned char *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v25 + 17) = 0;
    (*(void (**)(std::string *__return_ptr, int8x8_t *))(*(void *)a1 + 112))(&__p, a1);
    long long v26 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    v27 = *(std::__shared_weak_count **)(a3 + 8);
    *(_OWORD *)a3 = v26;
    if (!v27) {
      goto LABEL_28;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_) {
      goto LABEL_28;
    }
LABEL_27:
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
    goto LABEL_28;
  }
  v20 = (std::__shared_weak_count *)a1[26];
  if (!v20 || (int8x8_t v21 = a1[25], (v22 = std::__shared_weak_count::lock(v20)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v23 = v22;
  size = *(std::__shared_weak_count **)(a3 + 8);
  *(int8x8_t *)a3 = v21;
  *(void *)(a3 + 8) = v23;
  if (size) {
    goto LABEL_27;
  }
LABEL_28:
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v37);
}

void sub_1C52EEDF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  ImsResult::~ImsResult(v26);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void SipTcpConnection::handleKeepAliveWake(SipTcpConnection *this)
{
  if (SipTcpConnection::crlfKeepAliveAllowed(this) && !*((unsigned char *)this + 515))
  {
    v2 = (std::__shared_weak_count *)*((void *)this + 38);
    if (v2)
    {
      uint64_t v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t v5 = *((void *)this + 37);
        if (!v5) {
          goto LABEL_15;
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 32))(&v9);
        if (!v10) {
          goto LABEL_15;
        }
        uint64_t v6 = std::__shared_weak_count::lock(v10);
        uint64_t v7 = v9;
        if (v10) {
          std::__shared_weak_count::__release_weak(v10);
        }
        if (v6 && v7)
        {
          (*(void (**)(void *__return_ptr, SipTcpConnection *, void))(*(void *)this + 64))(v8, this, 0);
          ImsResult::~ImsResult((ImsResult *)v8);
        }
        else if (!v6)
        {
LABEL_15:
          std::__shared_weak_count::__release_shared[abi:ne180100](v4);
          return;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        goto LABEL_15;
      }
    }
  }
}

void sub_1C52EEFA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipTcpConnection::handleKeepAliveNotification(SipTcpConnection *this)
{
  if (SipTcpConnection::isLazuliConnection(this))
  {
    uint64_t v2 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
    (*(void (**)(char *, uint64_t))(*((void *)this + 10) + 16))((char *)this + 80, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"scheduled keepalive event", 25);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(void *__return_ptr, SipTcpConnection *, uint64_t))(*(void *)this + 64))(v3, this, 1);
    ImsResult::~ImsResult((ImsResult *)v3);
  }
}

void non-virtual thunk to'SipTcpConnection::handleKeepAliveNotification(SipTcpConnection *this)
{
}

void SipTcpConnection::setManager(int8x8_t *a1, int8x8_t *a2)
{
  SipTcpConnection::stopCrlfKeepAlive(a1);
  int8x8_t v5 = *a2;
  int8x8_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[38];
  a1[37] = v5;
  a1[38] = v4;
  if (v6)
  {
    std::__shared_weak_count::__release_weak(v6);
  }
}

uint64_t SipTcpConnection::isReliable(SipTcpConnection *this)
{
  return 1;
}

uint64_t SipTcpConnection::initialized(SipTcpConnection *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 38);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  int8x8_t v4 = v3;
  if (*((void *)this + 37) && !*((unsigned char *)this + 512) && (uint64_t v7 = *((void *)this + 35)) != 0) {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 128))(v7);
  }
  else {
    uint64_t v5 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v5;
}

void sub_1C52EF1F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::shuttingDown(SipTcpConnection *this)
{
  return *((unsigned __int8 *)this + 512);
}

BOOL std::string_view::starts_with[abi:ne180100](void *a1, void *__s2, size_t a3)
{
  return a1[1] >= a3 && std::string_view::compare[abi:ne180100](a1, 0, a3, __s2, a3) == 0;
}

uint64_t std::string_view::compare[abi:ne180100](void *a1, unint64_t a2, size_t a3, void *__s2, size_t a5)
{
  unint64_t v5 = a1[1];
  BOOL v6 = v5 >= a2;
  size_t v7 = v5 - a2;
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  uint64_t v9 = (const void *)(*a1 + a2);
  if (v7 >= a3) {
    size_t v10 = a3;
  }
  else {
    size_t v10 = v7;
  }
  if (a5 >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = a5;
  }
  LODWORD(result) = memcmp(v9, __s2, v11);
  if (v10 < a5) {
    unsigned int v13 = -1;
  }
  else {
    unsigned int v13 = 1;
  }
  if (v10 == a5) {
    unsigned int v13 = 0;
  }
  if (result) {
    return result;
  }
  else {
    return v13;
  }
}

uint64_t std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<SipTcpConnection,std::allocator<SipTcpConnection>,std::shared_ptr<SipTcpConnectionManager> &,std::shared_ptr<ImsTcpSocketInterface> &,BOOL &,void>(uint64_t a1, uint64_t *a2, uint64_t *a3, char *a4)
{
  size_t v7 = operator new(0x250uLL);
  std::__shared_ptr_emplace<SipTcpConnection>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTcpConnectionManager> &,std::shared_ptr<ImsTcpSocketInterface> &,BOOL &,std::allocator<SipTcpConnection>,0>(v7, a2, a3, a4);
}

void sub_1C52EF3A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipTcpConnection>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTcpConnectionManager> &,std::shared_ptr<ImsTcpSocketInterface> &,BOOL &,std::allocator<SipTcpConnection>,0>(void *a1, uint64_t *a2, uint64_t *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20BEEF0;
  std::construct_at[abi:ne180100]<SipTcpConnection,std::shared_ptr<SipTcpConnectionManager> &,std::shared_ptr<ImsTcpSocketInterface> &,BOOL &,SipTcpConnection*>((uint64_t)(a1 + 3), a2, a3, a4);
}

void sub_1C52EF3FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipTcpConnection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BEEF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipTcpConnection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BEEF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipTcpConnection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::construct_at[abi:ne180100]<SipTcpConnection,std::shared_ptr<SipTcpConnectionManager> &,std::shared_ptr<ImsTcpSocketInterface> &,BOOL &,SipTcpConnection*>(uint64_t a1, uint64_t *a2, uint64_t *a3, char *a4)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  char v9 = *a4;
  *(void *)a1 = &unk_1F20B2FA8;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v6 + 80))(&__p, v6);
  SipTransportInterface::SipTransportInterface(a1, (uint64_t *)&off_1F20BEC28, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)a1 = &unk_1F20BEA80;
  *(void *)(a1 + 80) = &unk_1F20BEB58;
  *(void *)(a1 + 184) = &unk_1F20BEBB8;
  *(void *)(a1 + 192) = &unk_1F20BEC08;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  size_t v10 = 0;
  size_t v11 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "ShutdownLock");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)(a1 + 232), &v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  *(void *)(a1 + 280) = v8;
  *(void *)(a1 + 288) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 296) = v6;
  *(void *)(a1 + 304) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 1065353216;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 368));
  *(_WORD *)(a1 + 514) = 0;
  *(unsigned char *)(a1 + 516) = v9;
  *(_DWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(unsigned char *)(a1 + 544) = 0;
  *(void *)(a1 + 472) = a1 + *(void *)(*(void *)a1 - 48);
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v6 + 80))(&__p, v6);
  std::string::operator=((std::string *)(a1 + 416), (const std::string *)(a1 + 88));
  std::string::operator=((std::string *)(a1 + 440), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_1C52EF7A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  MEMORY[0x1C878E320](v22, 0x1072C40C3E17F72);
  uint64_t v24 = (std::__shared_weak_count *)*((void *)v19 + 70);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  SipTimerContainer::~SipTimerContainer(v21);
  std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::~__hash_table((uint64_t)v19 + 320);
  uint64_t v25 = (std::__shared_weak_count *)*((void *)v19 + 38);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  long long v26 = (std::__shared_weak_count *)*((void *)v19 + 36);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v20);
  v27 = (std::__shared_weak_count *)*((void *)v19 + 28);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  v28 = (std::__shared_weak_count *)*((void *)v19 + 26);
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  SipTransportInterface::~SipTransportInterface(v19, (uint64_t)&off_1F20BEC28);
  if (v18)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    if (!v17) {
LABEL_4:
    }
      _Unwind_Resume(a1);
  }
  else if (!v17)
  {
    goto LABEL_4;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  goto LABEL_4;
}

void std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      time_t v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v5 = operator new(8 * prime);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    uint64_t v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          void *v8 = *v14;
          *uint64_t v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          uint64_t v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint64_t v8 = v14;
        uint64_t v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__emplace_unique_key_args<SipConnectionUser *,SipConnectionUser * const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  unint64_t v6 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v5 >> 47) ^ v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v10 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      if (v7 >= v8) {
        unint64_t v10 = v7 % v8;
      }
    }
    else
    {
      unint64_t v10 = (v8 - 1) & v7;
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v10);
    if (v11)
    {
      for (i = (void *)*v11; i; i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v7)
        {
          if (i[2] == a2) {
            return;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8) {
              v13 %= v8;
            }
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v10 = 0;
  }
  uint64_t v14 = operator new(0x18uLL);
  *uint64_t v14 = 0;
  v14[1] = v7;
  v14[2] = a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v10 = v7 % v8;
      }
      else {
        unint64_t v10 = v7;
      }
    }
    else
    {
      unint64_t v10 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v10);
  if (v22)
  {
    *uint64_t v14 = *v22;
LABEL_38:
    *uint64_t v22 = v14;
    goto LABEL_39;
  }
  *uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v21 + 8 * v10) = a1 + 16;
  if (*v14)
  {
    unint64_t v23 = *(void *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
}

void sub_1C52EFCF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BEF40;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BEF40;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20BEF40;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20BEF40;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      unint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 120))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C52EFF50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BEFC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BEFC0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20BEFC0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20BEFC0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      unint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 120))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C52F01F8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::scheduleCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BF040;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BF040;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20BF040;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20BF040;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      unint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 120))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C52F04A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::target_type()
{
}

void SipTypedTerminationLock<SipLockable>::set(uint64_t a1, uint64_t *a2, std::string *__str)
{
  uint64_t v3 = (void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *a2;
  if (*a2 != v4)
  {
    if (v4)
    {
      uint8x8_t v9 = *(std::__shared_weak_count **)(a1 + 40);
      if (v9)
      {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        unint64_t v10 = *(std::__shared_weak_count **)(a1 + 40);
        *uint64_t v3 = 0;
        v3[1] = 0;
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        *uint64_t v3 = 0;
        *(void *)(a1 + 40) = 0;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, a1 + 8);
      if (v9)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      uint64_t v5 = *a2;
    }
    if (v5)
    {
      std::string::operator=((std::string *)(a1 + 8), __str);
      uint64_t v11 = *a2;
      uint8x8_t v12 = (std::__shared_weak_count *)a2[1];
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v13 = *(std::__shared_weak_count **)(a1 + 40);
      *(void *)(a1 + 32) = v11;
      *(void *)(a1 + 40) = v12;
      if (v13)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        uint64_t v11 = *(void *)(a1 + 32);
        uint8x8_t v12 = *(std::__shared_weak_count **)(a1 + 40);
      }
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v11) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 32))(v11, a1 + 8);
      }
      if (v12)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
  }
}

void sub_1C52F0670(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BF0C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BF0C0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::__clone(void *a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *uint64_t result = &unk_1F20BF0C0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result[3] = a1[3];
  return result;
}

void *std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F20BF0C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::operator()(void *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2[23];
  }
  else {
    uint64_t v3 = *((void *)a2 + 1);
  }
  if (v3 != 18) {
    return;
  }
  uint64_t v5 = (void *)a1[3];
  if ((v2 & 0x80) != 0)
  {
      return;
    goto LABEL_12;
  }
  if (!a2[23])
  {
LABEL_12:
    unint64_t v7 = (std::__shared_weak_count *)a1[2];
    if (v7)
    {
      unint64_t v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        uint8x8_t v9 = v8;
        if (a1[1])
        {
          unint64_t v10 = (std::__shared_weak_count *)v5[38];
          if (v10)
          {
            uint64_t v11 = std::__shared_weak_count::lock(v10);
            if (v11)
            {
              uint8x8_t v12 = v11;
              uint64_t v13 = v5[37];
              if (v13)
              {
                (*(void (**)(uint64_t *__return_ptr))(*(void *)v13 + 32))(&v19);
                if (v20)
                {
                  uint64_t v14 = std::__shared_weak_count::lock(v20);
                  if (v14) {
                    uint64_t v15 = v19;
                  }
                  else {
                    uint64_t v15 = 0;
                  }
                  if (v20) {
                    std::__shared_weak_count::__release_weak(v20);
                  }
                  if (v15)
                  {
                    uint64_t v17 = v5[10];
                    float v16 = v5 + 10;
                    uint64_t v18 = (*(uint64_t (**)(void *))(v17 + 56))(v16);
                    (*(void (**)(void *, uint64_t))(*v16 + 16))(v16, v18);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Pong timeout.  Terminating registration", 39);
                    *(unsigned char *)(v18 + 17) = 0;
                    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(unsigned char *)(v18 + 17) = 0;
                    (*(void (**)(uint64_t, uint64_t, void))(*(void *)v15 + 192))(v15, 25, 0);
                  }
                  if (v14) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
                  }
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    return;
  }
  while (*a2 == v6->__r_.__value_.__s.__data_[0])
  {
    ++a2;
    unint64_t v6 = (std::string *)((char *)v6 + 1);
    if (!--v2) {
      goto LABEL_12;
    }
  }
}

void sub_1C52F0A68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_SipTcpConnection_cpp()
{
  LoggableString::LoggableString((LoggableString *)&_MergedGlobals_6, "TcpConnectionOut");
  __cxa_atexit((void (*)(void *))LoggableString::~LoggableString, &_MergedGlobals_6, &dword_1C51D1000);
  LoggableString::LoggableString((LoggableString *)&unk_1EBBDBDA0, "TcpConnectionIn");
  return __cxa_atexit((void (*)(void *))LoggableString::~LoggableString, &unk_1EBBDBDA0, &dword_1C51D1000);
}

ImsOutStream *RTCPXRDLRRReport::toStream(RTCPXRDLRRReport *this, ImsOutStream *a2)
{
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)", LRR timestamp: ", 17);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)", DLRR timestamp: ", 18);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  return a2;
}

void SipSecurityVerifyHeader::SipSecurityVerifyHeader(SipSecurityVerifyHeader *this, const SipSecurityServerHeader *a2)
{
  uint64_t v2 = SipPolymorphicVectorHeader<SipSecurityMechanism>::SipPolymorphicVectorHeader(this, a2);
  *(void *)uint64_t v2 = &unk_1F20BF180;
  std::string::operator=((std::string *)((char *)v2 + 8), (const std::string *)"Security-Verify");
}

void sub_1C52F0CA4(_Unwind_Exception *a1)
{
  SipPolymorphicVectorHeader<SipSecurityMechanism>::~SipPolymorphicVectorHeader(v1);
  _Unwind_Resume(a1);
}

void SipSecurityVerifyHeader::~SipSecurityVerifyHeader(SipSecurityVerifyHeader *this)
{
  SipPolymorphicVectorHeader<SipSecurityMechanism>::~SipPolymorphicVectorHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipSecurityVerifyHeader::clone(SipSecurityVerifyHeader *this)
{
}

void sub_1C52F0D58(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40888A45CFLL);
  _Unwind_Resume(a1);
}

uint64_t SipVectorHeader<SipSecurityMechanism *>::encodeValue(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[8];
  if (a1[9] != v2)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      if (v6)
      {
        unint64_t v7 = *(void **)(a2 + 8);
        char v9 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v9, 1);
        *(unsigned char *)(a2 + 17) = 0;
        uint64_t v2 = a1[8];
      }
      (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 112))(a1, v2 + v5, a2);
      ++v6;
      uint64_t v2 = a1[8];
      v5 += 8;
    }
    while (v6 < (a1[9] - v2) >> 3);
  }
  return 1;
}

BOOL SipVectorHeader<SipSecurityMechanism *>::setValueFromString(void *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v4 = (*(uint64_t (**)(void *, uint64_t, uint64_t, void **, uint64_t))(*a1 + 128))(a1, a2, v4, __p, 44);
    if (v4 == -1) {
      break;
    }
    uint64_t v6 = 0;
    if (((*(uint64_t (**)(void *, void **, uint64_t *))(*a1 + 120))(a1, __p, &v6) & 1) == 0) {
      break;
    }
    SipVectorHeader<SipSecurityMechanism *>::addItem(a1, &v6);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return v4 == -1;
}

void sub_1C52F0F20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipVectorHeader<SipSecurityMechanism *>::allowsDuplicates()
{
  return 1;
}

uint64_t SipVectorHeader<SipSecurityMechanism *>::allowsMerging()
{
  return 1;
}

BOOL SipPolymorphicVectorHeader<SipSecurityMechanism>::mergeHeader(void *a1, void *lpsrc)
{
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = v3[8];
    if (v3[9] != v5)
    {
      unint64_t v6 = 0;
      do
      {
        uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(v5 + 8 * v6) + 32))(*(void *)(v5 + 8 * v6));
        SipVectorHeader<SipSecurityMechanism *>::addItem(a1, &v8);
        ++v6;
        uint64_t v5 = v4[8];
      }
      while (v6 < (v4[9] - v5) >> 3);
    }
  }
  return v4 != 0;
}

ImsOutStream *SipSecurityAgreementHeader::itemToStream(SipSecurityAgreementHeader *this, SipSecurityMechanism *const *a2, ImsOutStream *a3)
{
  uint64_t v4 = (char *)*a2;
  (*(void (**)(ImsOutStream *, char *))(*(void *)a3 + 32))(a3, (char *)*a2 + 8);
  return SipParameterMap::toStream((SipParameterMap *)(v4 + 32), a3, 0, 0, 0, 0);
}

unint64_t SipVectorHeader<SipSecurityMechanism *>::nextToken(int a1, std::string *__str, std::string::size_type __pos, std::string *this, unsigned __int8 a5)
{
  return ims::nextTokenQ(__str, __pos, this, a5);
}

uint64_t SipAuthResponse::SipAuthResponse(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F20D6AA8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  return a1;
}

{
  std::string *v4;

  *(void *)a1 = &unk_1F20D6AA8;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=(v4, (const std::string *)(a2 + 32));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

void sub_1C52F1128(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*(void **)(v1 + 32));
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void SipAuthResponse::~SipAuthResponse(void **this)
{
  *this = &unk_1F20D6AA8;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

ImsOutStream *SipSsoAuthResponse::encode(SipSsoAuthResponse *this, ImsOutStream *a2)
{
  (*(void (**)(ImsOutStream *, void *))(*(void *)a2 + 32))(a2, &SipSsoAuthResponse::kSchemeName);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" ", 1);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, const char *))(*(void *)a2 + 32))(a2, "username");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"=\"", 2);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 136);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\",", 2);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, const char *))(*(void *)a2 + 32))(a2, "realm");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"=\"", 2);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 184);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\",", 2);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *))(*(void *)a2 + 32))(a2, &SipSsoAuthResponse::kDirectiveUri);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"=\"", 2);
  *((unsigned char *)a2 + 17) = 0;
  SipUri::asString((uint64_t)this + 208, __p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 32))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\",", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  (*(void (**)(ImsOutStream *, const char *))(*(void *)a2 + 32))(a2, "nonce");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"=\"\",", 4);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, const char *))(*(void *)a2 + 32))(a2, "response");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"=\"\",", 4);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, const char *))(*(void *)a2 + 32))(a2, "msisdn");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"=\"", 2);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 616);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\",", 2);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, const char *))(*(void *)a2 + 32))(a2, "token");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"=\"", 2);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 160);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"\"", 1);
  *((unsigned char *)a2 + 17) = 0;
  return a2;
}

void sub_1C52F159C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSsoAuthResponse::log(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 72))();
}

void SipSsoAuthResponse::~SipSsoAuthResponse(void **this)
{
  SipSsoAuthResponse::~SipSsoAuthResponse(this);
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  *this = &unk_1F20BF260;
  if (*((char *)this + 639) < 0) {
    operator delete(this[77]);
  }
  SipUri::~SipUri((SipUri *)(this + 26));
  if (*((char *)this + 207) < 0) {
    operator delete(this[23]);
  }
  if (*((char *)this + 183) < 0) {
    operator delete(this[20]);
  }
  if (*((char *)this + 159) < 0) {
    operator delete(this[17]);
  }
  ImsResult::~ImsResult((ImsResult *)(this + 8));
  SipAuthResponse::~SipAuthResponse(this);
}

void SipSsoAuthResponse::clone(SipSsoAuthResponse *this)
{
}

void sub_1C52F1754(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 207) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 183) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 159) < 0) {
    operator delete(*v3);
  }
  ImsResult::~ImsResult(v2);
  SipAuthResponse::~SipAuthResponse((void **)v1);
  MEMORY[0x1C878E320](v1, 0x10F3C4090C1171DLL);
  _Unwind_Resume(a1);
}

uint64_t SipSsoAuthResponse::scheme(SipSsoAuthResponse *this)
{
  return 0;
}

{
  return 0;
}

uint64_t SipSsoAuthResponse::computeResponse()
{
  return 1;
}

{
  return 1;
}

void SipSsoAuthResponse::result(SipSsoAuthResponse *this@<X0>, ImsResult *a2@<X8>)
{
}

uint64_t SipAuthResponse::shouldCache(SipAuthResponse *this)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)this + 56))(&v3);
  uint64_t v1 = (*(unsigned int (**)(uint64_t, void))(*(void *)v4 + 24))(v4, v5) ^ 1;
  ImsResult::~ImsResult((ImsResult *)&v3);
  return v1;
}

void sub_1C52F1894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t BambiCallActivity::BambiCallActivity(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F20B2FA8;
  uint64_t v6 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call");
  ImsLogContainer::ImsLogContainer(v6, &__p, (const std::string *)(*a2 + 112));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F20BF2E0;
  *(void *)(a1 + 8) = &unk_1F20BF320;
  *(void *)(a1 + 112) = a1 + 112;
  *(void *)(a1 + 120) = a1 + 112;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 152) = *a2;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 160) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 168) = a3;
  *(unsigned char *)(a1 + 176) = 0;
  return a1;
}

void sub_1C52F1A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallActivity::~BambiCallActivity(BambiCallActivity *this)
{
  *(void *)this = &unk_1F20BF2E0;
  *((void *)this + 1) = &unk_1F20BF320;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 14);
  *((void *)this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  BambiCallActivity::~BambiCallActivity(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'BambiCallActivity::~BambiCallActivity(BambiCallActivity *this)
{
}

{
  uint64_t vars8;

  BambiCallActivity::~BambiCallActivity((BambiCallActivity *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void *std::list<std::shared_ptr<BambiCallAction>>::push_back(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = operator new(0x20uLL);
  result[2] = a2;
  result[3] = a3;
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *a1;
  *uint64_t result = *a1;
  result[1] = a1;
  *(void *)(v7 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

void BambiCallActivity::perform(BambiCallActivity *this@<X0>, uint64_t a2@<X8>)
{
  if (!*((unsigned char *)this + 176))
  {
    uint64_t v4 = *((void *)this + 17);
    if (!v4)
    {
      long long v27 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      uint64_t v24 = (uint64_t *)&unk_1F20B2680;
      uint64_t v25 = &_bambiDomain;
      LODWORD(v26) = 1073741827;
      unint64_t v23 = (const std::string *)ImsResult::operator<<<char [20]>((uint64_t)&v24, "No base call action");
      ImsResult::ImsResult((ImsResult *)a2, v23);
      ImsResult::~ImsResult((ImsResult *)&v24);
      return;
    }
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(void *)v4 + 48))(v4, &v24);
    unsigned int v5 = v24;
    uint64_t v6 = v25;
    if (v24 != v25)
    {
      uint64_t v7 = (char *)this + 8;
      do
      {
        uint64_t v8 = (*(uint64_t (**)(char *))(*(void *)v7 + 64))((char *)this + 8);
        (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))((char *)this + 8, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"queueing prerequisite [", 23);
        *(unsigned char *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"] ", 2);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)*v5 + 16))(*v5, v8);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(void))(*(void *)*v5 + 32))();
        std::list<std::shared_ptr<BambiCallAction>>::push_back((uint64_t *)this + 14, *v5, v5[1]);
        v5 += 2;
      }
      while (v5 != v6);
    }
    uint64_t v9 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"queueing base action [", 22);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"] ", 2);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(void, uint64_t))(**((void **)this + 17) + 16))(*((void *)this + 17), v9);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(void))(**((void **)this + 17) + 32))(*((void *)this + 17));
    std::list<std::shared_ptr<BambiCallAction>>::push_back((uint64_t *)this + 14, *((void *)this + 17), *((void *)this + 18));
    uint64_t v30 = (void **)&v24;
    std::vector<std::shared_ptr<BambiCallAction>>::__destroy_vector::operator()[abi:ne180100](&v30);
    *((unsigned char *)this + 176) = 1;
  }
  unint64_t v10 = (char *)this + 8;
  uint64_t v11 = *((void *)this + 16);
  uint64_t v12 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
  (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v12);
  uint64_t v13 = *(void **)(v12 + 8);
  if (v11)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Number of actions left to perform : ", 36);
    *(unsigned char *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    uint64_t v14 = *((void *)this + 15);
    uint64_t v16 = *(void *)(v14 + 16);
    uint64_t v15 = *(std::__shared_weak_count **)(v14 + 24);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v16 + 56))(v16))
    {
      uint64_t v17 = (uint64_t *)*((void *)this + 15);
      uint64_t v18 = *v17;
      *(void *)(v18 + 8) = v17[1];
      *(void *)v17[1] = v18;
      --*((void *)this + 16);
      uint64_t v19 = (std::__shared_weak_count *)v17[3];
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      operator delete(v17);
      *(void *)(a2 + 64) = 0;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      (*(void (**)(uint64_t))(*(void *)v16 + 40))(v16);
      uint64_t v20 = (*(uint64_t (**)(char *))(*(void *)v10 + 64))((char *)this + 8);
      (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))((char *)this + 8, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Action ", 7);
      *(unsigned char *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 16))(v16, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" finished with result ", 22);
      *(unsigned char *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v20);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v20 + 17) = 0;
      if (v16 == *((void *)this + 17))
      {
        uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 18);
        *((void *)this + 17) = 0;
        *((void *)this + 18) = 0;
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
      }
    }
    else
    {
      uint64_t v22 = (*(uint64_t (**)(char *))(*(void *)v10 + 64))((char *)this + 8);
      (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))(v10, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"last action prerequisites not yet met", 37);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v22 + 17) = 0;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(void *)a2 = &unk_1F20B2680;
      *(void *)(a2 + 8) = &_bambiDomain;
      *(_DWORD *)(a2 + 16) = 1073741838;
    }
    if (v15)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"this activity is finished", 25);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(void *)a2 = &unk_1F20B2680;
    *(void *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0;
  }
}

void sub_1C52F2414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

void BambiCallActivity::invalidateCall(void *a1, uint64_t *a2)
{
  uint64_t v2 = a1 + 14;
  uint64_t v3 = (uint64_t *)a1[15];
  if (v3 != a1 + 14)
  {
    unsigned int v5 = a1 + 1;
    do
    {
      uint64_t v6 = (uint64_t *)v3[1];
      uint64_t v7 = (void *)v3[2];
      uint64_t v8 = (std::__shared_weak_count *)v3[3];
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v7)
      {
        uint64_t v9 = (std::__shared_weak_count *)v7[17];
        if (v9)
        {
          uint64_t v10 = v7[16];
          atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v11 = std::__shared_weak_count::lock(v9);
          uint64_t v12 = *a2;
          if (v11)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
            std::__shared_weak_count::__release_weak(v9);
            if (v10 == v12) {
              goto LABEL_16;
            }
          }
          else
          {
            std::__shared_weak_count::__release_weak(v9);
            if (!v12)
            {
LABEL_16:
              uint64_t v13 = (*(uint64_t (**)(void *))(*v5 + 64))(v5);
              (*(void (**)(void *, uint64_t))(*v5 + 16))(v5, v13);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"removing action for invalided call ", 35);
              *(unsigned char *)(v13 + 17) = 0;
              (*(void (**)(void *, uint64_t))(*v7 + 16))(v7, v13);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v13 + 17) = 0;
              uint64_t v14 = *v3;
              *(void *)(v14 + 8) = v3[1];
              *(void *)v3[1] = v14;
              --a1[16];
              uint64_t v15 = (std::__shared_weak_count *)v3[3];
              if (v15) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v15);
              }
              operator delete(v3);
              if (!v8) {
                goto LABEL_11;
              }
LABEL_10:
              std::__shared_weak_count::__release_shared[abi:ne180100](v8);
              goto LABEL_11;
            }
          }
        }
        else if (!*a2)
        {
          goto LABEL_16;
        }
      }
      if (v8) {
        goto LABEL_10;
      }
LABEL_11:
      uint64_t v3 = v6;
    }
    while (v6 != v2);
  }
}

void sub_1C52F266C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallActivity::removeCallAction(uint64_t a1, void *a2)
{
  std::list<std::shared_ptr<BambiCallAction>>::remove(a1 + 112, a2);
  BambiStrictCallHandler::performNextCallAction(*(BambiStrictCallHandler **)(a1 + 168), (uint64_t)v3);
  ImsResult::~ImsResult((ImsResult *)v3);
}

uint64_t std::list<std::shared_ptr<BambiCallAction>>::remove(uint64_t a1, void *a2)
{
  v11[0] = (uint64_t)v11;
  v11[1] = (uint64_t)v11;
  uint64_t v12 = 0;
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 == (void *)a1)
  {
    uint64_t v9 = 0;
  }
  else
  {
    do
    {
      uint64_t v6 = (void *)v2[1];
      uint64_t v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (void *)a1)
        {
          BOOL v8 = 1;
LABEL_8:
          uint64_t v6 = (void *)a1;
        }
        else
        {
          while (1)
          {
            uint64_t v7 = v6[2];
            BOOL v8 = v7 == v5;
            if (v7 != v5) {
              break;
            }
            uint64_t v6 = (void *)v6[1];
            if (v6 == (void *)a1) {
              goto LABEL_8;
            }
          }
        }
        std::list<std::shared_ptr<BambiCallAction>>::splice((uint64_t)v11, v11, a1, v2, v6);
        if (!v8) {
          uint64_t v6 = (void *)v6[1];
        }
      }
      uint64_t v2 = v6;
    }
    while (v6 != (void *)a1);
    uint64_t v9 = v12;
  }
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(v11);
  return v9;
}

void sub_1C52F2794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

ImsOutStream *BambiCallActivity::log(BambiCallActivity *this, ImsOutStream *a2)
{
  uint64_t v3 = *((void *)this + 17);
  if (v3)
  {
    (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v3 + 16))(v3, a2);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"NoCallAction", 12);
    *((unsigned char *)a2 + 17) = 0;
  }
  return a2;
}

void BambiCallActivity::loggableName(BambiCallActivity *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C52F290C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a16);
  _Unwind_Resume(a1);
}

void *BambiCallActivity::logPrefix(BambiCallActivity *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"BambiCallActivity: ", 19);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(BambiCallActivity *, ImsOutStream *))(*(void *)this + 16))(this, a2);
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void *non-virtual thunk to'BambiCallActivity::logPrefix(BambiCallActivity *this, ImsOutStream *a2)
{
  return BambiCallActivity::logPrefix((BambiCallActivity *)((char *)this - 8), a2);
}

void std::vector<std::shared_ptr<BambiCallAction>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::list<std::shared_ptr<BambiCallAction>>::splice(uint64_t result, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  if (a4 != a5)
  {
    uint64_t v5 = (void *)*a5;
    if (result != a3)
    {
      uint64_t v6 = 1;
      if (v5 != a4)
      {
        uint64_t v7 = a4;
        do
        {
          uint64_t v7 = (void *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(void *)(a3 + 16) -= v6;
      *(void *)(result + 16) += v6;
    }
    uint64_t v8 = *a4;
    *(void *)(v8 + 8) = v5[1];
    *(void *)v5[1] = v8;
    uint64_t v9 = *a2;
    *(void *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

SipState *BambiTransferState::BambiTransferState(SipState *a1, void *a2, const std::string *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(*a2 + 152));
  SipState::SipState(a1, *(const SipUserAgent **)(*(void *)(v6 + 144) + 144));
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.ect.state");
  ImsLogContainer::ImsLogContainer((uint64_t)a1 + 192, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *((void *)a1 + 37) = 0;
  *((void *)a1 + 38) = 0;
  *(void *)a1 = &unk_1F20BF3B8;
  *((void *)a1 + 1) = &unk_1F20BF418;
  *((void *)a1 + 24) = &unk_1F20BF448;
  *((void *)a1 + 39) = *a2;
  uint64_t v8 = a2[1];
  *((void *)a1 + 40) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1C52F2BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  SipState::~SipState(v15);
  _Unwind_Resume(a1);
}

void BambiTransferState::~BambiTransferState(BambiTransferState *this)
{
  *(void *)this = &unk_1F20BF3B8;
  *((void *)this + 1) = &unk_1F20BF418;
  *((void *)this + 24) = &unk_1F20BF448;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  *((void *)this + 24) = &unk_1F20C9CA0;
  if (*((char *)this + 247) < 0) {
    operator delete(*((void **)this + 28));
  }
  if (*((char *)this + 223) < 0) {
    operator delete(*((void **)this + 25));
  }
  SipState::~SipState(this);
}

{
  uint64_t vars8;

  BambiTransferState::~BambiTransferState(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'BambiTransferState::~BambiTransferState(BambiTransferState *this)
{
}

{
  BambiTransferState::~BambiTransferState((BambiTransferState *)((char *)this - 192));
}

{
  uint64_t vars8;

  BambiTransferState::~BambiTransferState((BambiTransferState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiTransferState::~BambiTransferState((BambiTransferState *)((char *)this - 192));
  JUMPOUT(0x1C878E320);
}

void BambiTransferState::handleParticipantStateChange(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 10)
  {
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 320);
    if (v5)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = *(void **)(a1 + 312);
        if (v8)
        {
          long long v10 = 0u;
          long long v11 = 0u;
          long long v12 = 0u;
          v9.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
          v9.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
          LODWORD(v9.__r_.__value_.__r.__words[2]) = 0x40000000;
          BambiTransferHandler::endTransfer(v8, &v9);
          ImsResult::~ImsResult((ImsResult *)&v9);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
}

void sub_1C52F2E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t BambiTransferState::stateMachine(BambiTransferState *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = *((void *)this + 39);
  if (!v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
LABEL_6:
    uint64_t v7 = *((void *)this + 24);
    uint64_t v6 = (char *)this + 192;
    uint64_t v8 = (*(uint64_t (**)(char *))(v7 + 56))(v6);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"BambiTransferState::stateMachine() - state machine is null", 58);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v5 = 0;
    *(unsigned char *)(v8 + 17) = 0;
    return v5;
  }
  uint64_t v5 = v4 + 168;
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v5;
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (!v2) {
    goto LABEL_6;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    goto LABEL_6;
  }
  uint64_t v4 = *((void *)this + 39);
  if (!v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
LABEL_6:
    uint64_t v7 = *((void *)this + 24);
    uint64_t v6 = (char *)this + 192;
    uint64_t v8 = (*(uint64_t (**)(char *))(v7 + 56))(v6);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"BambiTransferState::stateMachine() - state machine is null", 58);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v5 = 0;
    *(unsigned char *)(v8 + 17) = 0;
    return v5;
  }
  uint64_t v5 = v4 + 168;
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v5;
}

SipState *BambiTransferWaitingForHoldState::BambiTransferWaitingForHoldState(SipState *a1, void *a2, const std::string *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiTransferState::BambiTransferState(a1, v6, a3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *(void *)a1 = &unk_1F20BF4A8;
  *((void *)a1 + 1) = &unk_1F20BF510;
  *((void *)a1 + 24) = &unk_1F20BF540;
  return a1;
}

void sub_1C52F3130(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiTransferWaitingForHoldState::checkForHeldParticipants(BambiTransferWaitingForHoldState *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (!v2)
  {
    uint64_t v3 = 0;
LABEL_19:
    uint64_t v13 = *((void *)this + 24);
    long long v12 = (char *)this + 192;
    uint64_t v14 = (*(uint64_t (**)(char *))(v13 + 56))(v12);
    (*(void (**)(char *, uint64_t))(*(void *)v12 + 16))(v12, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"BambiTransferWaitingForHoldState::checkForHeldParticipants() - transfer handler is null", 87);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v8 = 0;
    *(unsigned char *)(v14 + 17) = 0;
    goto LABEL_20;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    goto LABEL_19;
  }
  uint64_t v4 = *((void *)this + 39);
  if (!v4) {
    goto LABEL_19;
  }
  uint64_t v5 = (*(uint64_t (**)(BambiTransferWaitingForHoldState *))(*(void *)this + 32))(this);
  if (!v5)
  {
    uint64_t v17 = *((void *)this + 24);
    uint64_t v16 = (char *)this + 192;
    uint64_t v18 = (*(uint64_t (**)(char *))(v17 + 56))(v16);
    (*(void (**)(char *, uint64_t))(*(void *)v16 + 16))(v16, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"BambiTransferWaitingForHoldState::checkForHeldParticipants() - state machine is null", 84);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v8 = 0;
    *(unsigned char *)(v18 + 17) = 0;
    goto LABEL_21;
  }
  uint64_t v6 = *(uint64_t **)(v4 + 416);
  uint64_t v7 = *(uint64_t **)(v4 + 424);
  if (v6 == v7)
  {
    uint64_t v8 = 0;
    goto LABEL_21;
  }
  LODWORD(v8) = 0;
  do
  {
    uint64_t v10 = *v6;
    std::string v9 = (std::__shared_weak_count *)v6[1];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      int v11 = *(_DWORD *)(v10 + 240);
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    else
    {
      int v11 = *(_DWORD *)(v10 + 240);
    }
    if (v11 >= 2) {
      uint64_t v8 = v8;
    }
    else {
      uint64_t v8 = (v8 + 1);
    }
    v6 += 2;
  }
  while (v6 != v7);
  if (!v8)
  {
    if (*(void *)(v4 + 416) != *(void *)(v4 + 424)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, 2);
    }
    uint64_t v8 = 0;
  }
LABEL_20:
  if (v3) {
LABEL_21:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v8;
}

void sub_1C52F33D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiTransferWaitingForHoldState::handleTimer(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[40];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = (void *)a1[39];
      if (v6)
      {
        uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
        uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
        int v9 = (char)v8;
        if ((v8 & 0x80u) != 0) {
          uint64_t v8 = *(void *)(a2 + 8);
        }
        if (v8 == 21
          && (v9 >= 0 ? (uint64_t v10 = (uint64_t *)a2) : (uint64_t v10 = *(uint64_t **)a2),
              (v11 = *v10, uint64_t v12 = v10[1], v13 = *(uint64_t *)((char *)v10 + 13), v11 == 0x46676E6974696157)
            ? (BOOL v14 = v12 == 0x6954646C6F48726FLL)
            : (BOOL v14 = 0),
              v14 ? (BOOL v15 = v13 == 0x74756F656D695464) : (BOOL v15 = 0),
              v15))
        {
          long long v27 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
          v26.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
          LODWORD(v26.__r_.__value_.__r.__words[2]) = 1073741830;
          BambiTransferHandler::endTransfer(v6, &v26);
          ImsResult::~ImsResult((ImsResult *)&v26);
        }
        else
        {
          uint64_t v17 = v6[2];
          uint64_t v16 = v6 + 2;
          uint64_t v18 = (*(uint64_t (**)(void *))(v17 + 56))(v16);
          (*(void (**)(void *, uint64_t))(*v16 + 16))(v16, v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Unknown timer ", 14);
          *(unsigned char *)(v18 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 32))(v18, a2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" for state ", 11);
          *(unsigned char *)(v18 + 17) = 0;
          if (v7)
          {
            uint64_t v19 = (*(uint64_t (**)(void *))(*a1 + 48))(a1);
            uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v19);
            if (*(char *)(v20 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v20, *(void *)(v20 + 8));
            }
            else
            {
              long long v21 = *(_OWORD *)v20;
              __p.__r_.__value_.__r.__words[2] = *(void *)(v20 + 16);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "Unknown");
          }
          (*(void (**)(uint64_t, std::string *))(*(void *)v18 + 32))(v18, &__p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v18 + 17) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_28;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v23 = a1[24];
  uint64_t v22 = a1 + 24;
  uint64_t v24 = (*(uint64_t (**)(void *))(v23 + 56))(v22);
  (*(void (**)(void *, uint64_t))(*v22 + 16))(v22, v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"BambiTransferWaitingForHoldState::handleTimer() - transfer handler is null", 74);
  *(unsigned char *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v24 + 17) = 0;
  if (v5) {
LABEL_28:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C52F37C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  ImsResult::~ImsResult((ImsResult *)&a15);
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

uint64_t BambiTransferWaitingForHoldState::enterState(std::__shared_weak_count **this)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t result = BambiTransferWaitingForHoldState::checkForHeldParticipants((BambiTransferWaitingForHoldState *)this);
  if (result)
  {
    uint64_t v3 = this[38];
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v4 = this[40];
    if (v4) {
      std::__shared_weak_count::lock(v4);
    }
    uint64_t v6 = 0;
    memset(v5, 0, sizeof(v5));
    ImsPrefs::ImsPrefs((ImsPrefs *)v5);
  }
  return result;
}

void sub_1C52F3A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((void *)(v18 - 104));
  if (a15 < 0) {
    operator delete(__p);
  }
  ImsPrefs::~ImsPrefs((ImsPrefs *)&a16);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v16)
  {
    std::__shared_weak_count::__release_weak(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

void BambiTransferWaitingForHoldState::handleParticipantStateChange(BambiTransferWaitingForHoldState *this, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 10)
  {
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 40);
    if (v5)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        uint64_t v7 = (void *)*((void *)this + 39);
        if (v7)
        {
          long long v12 = 0u;
          long long v13 = 0u;
          long long v14 = 0u;
          v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
          v11.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
          LODWORD(v11.__r_.__value_.__r.__words[2]) = 0x40000000;
          BambiTransferHandler::endTransfer(v7, &v11);
          ImsResult::~ImsResult((ImsResult *)&v11);
LABEL_12:
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
          return;
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v9 = *((void *)this + 24);
    uint64_t v8 = (char *)this + 192;
    uint64_t v10 = (*(uint64_t (**)(char *))(v9 + 56))(v8);
    (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))(v8, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"BambiTransferWaitingForHoldState::handleParticipantStateChange() - transfer handler is null", 91);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (!v6) {
      return;
    }
    goto LABEL_12;
  }
  if (a4 == 2)
  {
    BambiTransferWaitingForHoldState::checkForHeldParticipants(this);
  }
}

void sub_1C52F3C38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

SipState *BambiTransferTransferRequestedState::BambiTransferTransferRequestedState(SipState *a1, void *a2, const std::string *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiTransferState::BambiTransferState(a1, v6, a3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *(void *)a1 = &unk_1F20BF5A0;
  *((void *)a1 + 1) = &unk_1F20BF608;
  *((void *)a1 + 24) = &unk_1F20BF638;
  return a1;
}

void sub_1C52F3D18(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiTransferTransferRequestedState::handleTimer(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[40];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = (void *)a1[39];
      if (v6)
      {
        uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
        uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
        int v9 = (char)v8;
        if ((v8 & 0x80u) != 0) {
          uint64_t v8 = *(void *)(a2 + 8);
        }
        if (v8 == 21
          && (v9 >= 0 ? (uint64_t v10 = (uint64_t *)a2) : (uint64_t v10 = *(uint64_t **)a2),
              (v11 = *v10, uint64_t v12 = v10[1], v13 = *(uint64_t *)((char *)v10 + 13), v11 == 0x46676E6974696157)
            ? (BOOL v14 = v12 == 0x69546E696F4A726FLL)
            : (BOOL v14 = 0),
              v14 ? (BOOL v15 = v13 == 0x74756F656D69546ELL) : (BOOL v15 = 0),
              v15))
        {
          long long v27 = 0u;
          long long v28 = 0u;
          long long v29 = 0u;
          v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
          v26.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
          LODWORD(v26.__r_.__value_.__r.__words[2]) = 1073741830;
          BambiTransferHandler::endTransfer(v6, &v26);
          ImsResult::~ImsResult((ImsResult *)&v26);
        }
        else
        {
          uint64_t v17 = v6[2];
          uint64_t v16 = v6 + 2;
          uint64_t v18 = (*(uint64_t (**)(void *))(v17 + 56))(v16);
          (*(void (**)(void *, uint64_t))(*v16 + 16))(v16, v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Unknown timer ", 14);
          *(unsigned char *)(v18 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 32))(v18, a2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" for state ", 11);
          *(unsigned char *)(v18 + 17) = 0;
          if (v7)
          {
            uint64_t v19 = (*(uint64_t (**)(void *))(*a1 + 48))(a1);
            uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v19);
            if (*(char *)(v20 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v20, *(void *)(v20 + 8));
            }
            else
            {
              long long v21 = *(_OWORD *)v20;
              __p.__r_.__value_.__r.__words[2] = *(void *)(v20 + 16);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "Unknown");
          }
          (*(void (**)(uint64_t, std::string *))(*(void *)v18 + 32))(v18, &__p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v18 + 17) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        goto LABEL_28;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v23 = a1[24];
  uint64_t v22 = a1 + 24;
  uint64_t v24 = (*(uint64_t (**)(void *))(v23 + 56))(v22);
  (*(void (**)(void *, uint64_t))(*v22 + 16))(v22, v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"BambiTransferTransferRequestedState::handleTimer() - transfer handler is null", 77);
  *(unsigned char *)(v24 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v24 + 17) = 0;
  if (v5) {
LABEL_28:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C52F40FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  ImsResult::~ImsResult((ImsResult *)&a15);
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void BambiTransferTransferRequestedState::enterState(int8x8_t *this)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)this[40];
  if (!v2)
  {
    uint64_t v3 = 0;
    goto LABEL_14;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (uint64_t v4 = (void *)this[39]) == 0)
  {
LABEL_14:
    int8x8_t v14 = this[24];
    uint64_t v13 = this + 24;
    uint64_t v15 = (*(uint64_t (**)(int8x8_t *))(*(void *)&v14 + 56))(v13);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v13 + 16))(v13, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"BambiTransferTransferRequestedState::enterState() - transfer handler is null", 76);
    *(unsigned char *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v15 + 17) = 0;
    if (!v3) {
      return;
    }
    goto LABEL_15;
  }
  uint64_t v5 = (char *)v4[52];
  uint64_t v6 = (char *)v4[53];
  if (v5 != v6)
  {
    uint64_t v8 = *(void *)v5;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)v5 + 1);
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v5 = (char *)v4[52];
      uint64_t v6 = (char *)v4[53];
    }
    if ((unint64_t)(v6 - v5) <= 0x10) {
      std::vector<unsigned short>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v9 = *((void *)v5 + 2);
    uint64_t v10 = (std::__shared_weak_count *)*((void *)v5 + 3);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(std::__shared_weak_count **)(v9 + 152);
    if (v11)
    {
      uint64_t v12 = *(void *)(v9 + 144);
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v32 = 0;
      long long v33 = std::__shared_weak_count::lock(v11);
      if (v33) {
        uint64_t v32 = v12;
      }
    }
    else
    {
      uint64_t v32 = 0;
      long long v33 = 0;
    }
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t *, uint64_t))(*(void *)v8 + 104))(v34, v8, &v32, 1);
    ImsResult::~ImsResult((ImsResult *)v34);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (v11) {
      std::__shared_weak_count::__release_weak(v11);
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    uint64_t v16 = v4[52];
    if ((unint64_t)(v4[53] - v16) <= 0x10) {
      std::vector<unsigned short>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v17 = *(void *)(v16 + 16);
    uint64_t v18 = *(std::__shared_weak_count **)(v16 + 24);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    (*(void (**)(void *__return_ptr))(*(void *)v17 + 104))(v31);
    ImsResult::~ImsResult((ImsResult *)v31);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    int8x8_t v20 = this[37];
    uint64_t v19 = (std::__shared_weak_count *)this[38];
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    long long v21 = (std::__shared_weak_count *)v4[19];
    if (v21)
    {
      long long v21 = std::__shared_weak_count::lock(v21);
      uint64_t v22 = v21;
      if (v21) {
        long long v21 = (std::__shared_weak_count *)v4[18];
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    uint64_t v23 = (ImsPrefs *)SipStack::prefs((SipStack *)v21);
    TransferWaitForJoinTimeoutKey = (void **)ImsPrefs::getTransferWaitForJoinTimeoutKey(v23);
    int v25 = ImsPrefs::intValue(v23, TransferWaitForJoinTimeoutKey);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (v25)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "WaitingForJoinTimeout");
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      v36 = 0;
      std::string v26 = operator new(0x20uLL);
      void *v26 = &unk_1F20BF8A8;
      v26[1] = this;
      v26[2] = v20;
      v26[3] = v19;
      v36 = v26;
      SipTimerContainer::startTimer(this + 3, (uint64_t)__p);
      std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v35);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v19)
    {
      std::__shared_weak_count::__release_weak(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_15:
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_1C52F4510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((void *)(v29 - 120));
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v28)
  {
    std::__shared_weak_count::__release_weak(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

void BambiTransferTransferRequestedState::handleParticipantStateChange(void *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[40];
  if (!v5)
  {
    uint64_t v8 = 0;
    goto LABEL_10;
  }
  uint64_t v8 = std::__shared_weak_count::lock(v5);
  if (!v8 || (uint64_t v9 = (void *)a1[39]) == 0)
  {
LABEL_10:
    uint64_t v16 = a1[24];
    uint64_t v15 = a1 + 24;
    uint64_t v17 = (*(uint64_t (**)(void *))(v16 + 56))(v15);
    (*(void (**)(void *, uint64_t))(*v15 + 16))(v15, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"BambiTransferTransferRequestedState::handleParticipantStateChange() - transfer handler is null", 94);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    if (!v8) {
      return;
    }
    goto LABEL_11;
  }
  uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
  if (v10)
  {
    uint64_t v11 = (uint64_t *)v9[52];
    if (v11 != (uint64_t *)v9[53])
    {
      uint64_t v13 = *v11;
      uint64_t v12 = (std::__shared_weak_count *)v11[1];
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v14 = *a2;
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        if (v14 == v13)
        {
LABEL_15:
          if (a4 == 10)
          {
            long long v22 = 0u;
            long long v23 = 0u;
            long long v24 = 0u;
            v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
            v21.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
            LODWORD(v21.__r_.__value_.__r.__words[2]) = 0x40000000;
            BambiTransferHandler::endTransfer(v9, &v21);
            ImsResult::~ImsResult((ImsResult *)&v21);
          }
          else if (a4 == 6)
          {
            (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, 3);
          }
        }
      }
      else if (*a2 == v13)
      {
        goto LABEL_15;
      }
    }
  }
  else
  {
    uint64_t v19 = a1[24];
    uint64_t v18 = a1 + 24;
    uint64_t v20 = (*(uint64_t (**)(void *))(v19 + 56))(v18);
    (*(void (**)(void *, uint64_t))(*v18 + 16))(v18, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"BambiTransferTransferRequestedState::handleParticipantStateChange() - state machine is null", 91);
    *(unsigned char *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v20 + 17) = 0;
  }
LABEL_11:
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
}

void sub_1C52F48BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

SipState *BambiTransferTransferCompleteState::BambiTransferTransferCompleteState(SipState *a1, void *a2, const std::string *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiTransferState::BambiTransferState(a1, v6, a3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *(void *)a1 = &unk_1F20BF698;
  *((void *)a1 + 1) = &unk_1F20BF6F8;
  *((void *)a1 + 24) = &unk_1F20BF728;
  return a1;
}

void sub_1C52F49A4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void BambiTransferTransferCompleteState::enterState(BambiTransferTransferCompleteState *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 40);
  if (!v2)
  {
    uint64_t v3 = 0;
    goto LABEL_6;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (uint64_t v4 = (void *)*((void *)this + 39)) == 0)
  {
LABEL_6:
    uint64_t v6 = *((void *)this + 24);
    uint64_t v5 = (char *)this + 192;
    uint64_t v7 = (*(uint64_t (**)(char *))(v6 + 56))(v5);
    (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))(v5, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"BambiTransferTransferCompleteState::enterState() - transfer handler is null", 75);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (!v3) {
      return;
    }
    goto LABEL_7;
  }
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  v8.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  LODWORD(v8.__r_.__value_.__r.__words[2]) = 0;
  BambiTransferHandler::endTransfer(v4, &v8);
  ImsResult::~ImsResult((ImsResult *)&v8);
LABEL_7:
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_1C52F4B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t BambiTransferState::id(BambiTransferState *this)
{
  return 0;
}

void BambiTransferWaitingForHoldState::~BambiTransferWaitingForHoldState(BambiTransferWaitingForHoldState *this)
{
  BambiTransferState::~BambiTransferState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t BambiTransferWaitingForHoldState::id(BambiTransferWaitingForHoldState *this)
{
  return 1;
}

void non-virtual thunk to'BambiTransferWaitingForHoldState::~BambiTransferWaitingForHoldState(BambiTransferWaitingForHoldState *this)
{
}

{
  uint64_t vars8;

  BambiTransferState::~BambiTransferState((BambiTransferWaitingForHoldState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  BambiTransferState::~BambiTransferState((BambiTransferWaitingForHoldState *)((char *)this - 192));
}

{
  uint64_t vars8;

  BambiTransferState::~BambiTransferState((BambiTransferWaitingForHoldState *)((char *)this - 192));
  JUMPOUT(0x1C878E320);
}

void BambiTransferTransferRequestedState::~BambiTransferTransferRequestedState(BambiTransferTransferRequestedState *this)
{
  BambiTransferState::~BambiTransferState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t BambiTransferTransferRequestedState::id(BambiTransferTransferRequestedState *this)
{
  return 2;
}

void non-virtual thunk to'BambiTransferTransferRequestedState::~BambiTransferTransferRequestedState(BambiTransferTransferRequestedState *this)
{
}

{
  uint64_t vars8;

  BambiTransferState::~BambiTransferState((BambiTransferTransferRequestedState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  BambiTransferState::~BambiTransferState((BambiTransferTransferRequestedState *)((char *)this - 192));
}

{
  uint64_t vars8;

  BambiTransferState::~BambiTransferState((BambiTransferTransferRequestedState *)((char *)this - 192));
  JUMPOUT(0x1C878E320);
}

void BambiTransferTransferCompleteState::~BambiTransferTransferCompleteState(BambiTransferTransferCompleteState *this)
{
  BambiTransferState::~BambiTransferState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t BambiTransferTransferCompleteState::id(BambiTransferTransferCompleteState *this)
{
  return 3;
}

void non-virtual thunk to'BambiTransferTransferCompleteState::~BambiTransferTransferCompleteState(BambiTransferTransferCompleteState *this)
{
}

{
  uint64_t vars8;

  BambiTransferState::~BambiTransferState((BambiTransferTransferCompleteState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  BambiTransferState::~BambiTransferState((BambiTransferTransferCompleteState *)((char *)this - 192));
}

{
  uint64_t vars8;

  BambiTransferState::~BambiTransferState((BambiTransferTransferCompleteState *)((char *)this - 192));
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BF828;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BF828;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20BF828;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20BF828;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 80))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C52F4FF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BF8A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BF8A8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20BF8A8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20BF8A8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 80))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C52F529C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t BambiCallAction::BambiCallAction(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F20B2FA8;
  uint64_t v6 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call");
  ImsLogContainer::ImsLogContainer(v6, &__p, (const std::string *)(*a2 + 112));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)a1 = &unk_1F20BF928;
  *(void *)(a1 + 8) = &unk_1F20BF988;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 152));
  uint64_t v8 = *a2;
  uint64_t v7 = a2[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  long long v9 = *(std::__shared_weak_count **)(a1 + 136);
  *(void *)(a1 + 128) = v8;
  *(void *)(a1 + 136) = v7;
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  *(void *)(a1 + 144) = a3;
  *(void *)(a1 + 256) = a1;
  uint64_t v10 = *a2;
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(a1 + 16));
  std::string::operator=((std::string *)(a1 + 224), (const std::string *)(v10 + 112));
  return a1;
}

void sub_1C52F5428(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v18 = *(std::__shared_weak_count **)(v16 + 136);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v16 + 120);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  ImsLogContainer::~ImsLogContainer(v15);
  _Unwind_Resume(a1);
}

void BambiCallAction::enqueue(int8x8_t *this)
{
  v11[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)this[17];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      int8x8_t v5 = this[16];
      if (v5)
      {
        int8x8_t v7 = this[14];
        uint64_t v6 = (std::__shared_weak_count *)this[15];
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(*(void *)&v5 + 368));
        int v9 = *(_DWORD *)(SipUserAgent::config(*(SipUserAgent **)(*(void *)(*(void *)&v5 + 360) + 144)) + 592);
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        if (v9)
        {
          if (v6) {
            atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v10 = operator new(0x20uLL);
          void *v10 = &unk_1F20BFBA8;
          v10[1] = this;
          v10[2] = v7;
          v10[3] = v6;
          v11[3] = v10;
          SipTimerContainer::startTimer(this + 19, (uint64_t)"PerformAnyway");
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v11);
        }
        if (v6)
        {
          std::__shared_weak_count::__release_weak(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C52F55C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void BambiCallAction::handleTimer(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = a2[23];
  size_t v4 = *((void *)a2 + 1);
  if ((v3 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  if (v5 != 6)
  {
    if (v5 != 13) {
      return;
    }
    if ((v3 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, "PerformAnyway", v4)) {
        return;
      }
    }
    else if (a2[23])
    {
      uint64_t v6 = "PerformAnyway";
      while (*a2 == *(unsigned __int8 *)v6)
      {
        ++a2;
        ++v6;
        if (!--v3) {
          goto LABEL_19;
        }
      }
      return;
    }
LABEL_19:
    uint64_t v8 = (*(uint64_t (**)(void *))(a1[1] + 48))(a1 + 1);
    (*(void (**)(void *, uint64_t))(a1[1] + 16))(a1 + 1, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"timed out waiting for prerequisites. Continuing.", 48);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(void *__return_ptr, void *))(*a1 + 40))(v21, a1);
    ImsResult::~ImsResult((ImsResult *)v21);
    uint64_t v9 = a1[18];
    uint64_t v10 = (std::__shared_weak_count *)a1[15];
    uint64_t v19 = a1[14];
    if (v10)
    {
      uint64_t v20 = std::__shared_weak_count::lock(v10);
      if (v20)
      {
        BambiCallActivity::removeCallAction(v9, &v19);
        long long v11 = v20;
        if (!v20) {
          return;
        }
LABEL_27:
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        return;
      }
    }
    goto LABEL_29;
  }
  if ((v3 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "Cancel", v4)) {
      return;
    }
LABEL_24:
    uint64_t v13 = a1[1];
    uint64_t v12 = a1 + 1;
    uint64_t v14 = (*(uint64_t (**)(void *))(v13 + 48))(v12);
    (*(void (**)(void *, uint64_t))(*v12 + 16))(v12, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"timed out waiting for prerequisites. Canceling.", 47);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    uint64_t v15 = v12[17];
    uint64_t v16 = (std::__shared_weak_count *)v12[14];
    uint64_t v17 = v12[13];
    if (v16)
    {
      uint64_t v18 = std::__shared_weak_count::lock(v16);
      if (v18)
      {
        BambiCallActivity::removeCallAction(v15, &v17);
        long long v11 = v18;
        if (!v18) {
          return;
        }
        goto LABEL_27;
      }
    }
LABEL_29:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  if (!a2[23]) {
    goto LABEL_24;
  }
  int8x8_t v7 = "Cancel";
  while (*a2 == *(unsigned __int8 *)v7)
  {
    ++a2;
    ++v7;
    if (!--v3) {
      goto LABEL_24;
    }
  }
}

void sub_1C52F58E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

double BambiCallAction::perform@<D0>(BambiCallAction *this@<X0>, uint64_t a2@<X8>)
{
  SipTimerContainer::cancelAllTimers((BambiCallAction *)((char *)this + 152));
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

ImsOutStream *BambiCallAction::log(std::__shared_weak_count **this, ImsOutStream *a2)
{
  ((void (*)(void **__return_ptr))(*this)[1].__vftable)(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" ", 1);
  *((unsigned char *)a2 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  size_t v4 = this[17];
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = this[16];
      if (v6)
      {
        ObfuscatedString::ObfuscatedString((uint64_t)__p, (const std::string *)&v6[19].__shared_weak_owners_);
        (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 56))(a2, __p);
        if (v11 < 0) {
          operator delete(v10);
        }
        if (v9 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Unknown Call", 12);
  *((unsigned char *)a2 + 17) = 0;
  if (v5) {
LABEL_12:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  return a2;
}

void sub_1C52F5AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  ims::AccessNetwork::~AccessNetwork(&__p);
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void BambiCallRequireCallsHeldAction::createPrerequisites(uint64_t a1, char **a2)
{
  v50 = 0;
  std::string v51 = 0;
  uint64_t v52 = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 136);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(a1 + 128);
      if (v7)
      {
        uint64_t v8 = BambiCall::bambiClient(*(BambiCall **)(a1 + 128));
        v49[0] = v7;
        v49[1] = v6;
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        BambiClient::unheldCallsExcludingCall(v8, (uint64_t *)&v50, v49);
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        uint64_t v10 = v50;
        char v9 = v51;
        if (v50 != v51)
        {
          uint64_t v11 = a1 + 8;
          do
          {
            uint64_t v13 = *v10;
            uint64_t v12 = (std::__shared_weak_count *)v10[1];
            if (v12) {
              atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v13 == v7)
            {
              uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(a1 + 8);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(a1 + 8, v17);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"createPrerequisites: my call shouldn't be in the unheld calls list", 66);
              *(unsigned char *)(v17 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v17 + 17) = 0;
            }
            else
            {
              if ((*(_DWORD *)(v13 + 448) & 0xFFFFFFFE) == 2)
              {
                uint64_t v14 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 64))(a1 + 8);
                (*(void (**)(uint64_t, unsigned char *))(*(void *)v11 + 16))(a1 + 8, v14);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v14 + 1), (uint64_t)"call ", 5);
                v14[17] = 0;
                ObfuscatedString::ObfuscatedString((uint64_t)&v44, (const std::string *)(v13 + 472));
                (*(void (**)(unsigned char *, void **))(*(void *)v14 + 56))(v14, &v44);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)v14 + 1), (uint64_t)" is already ", 12);
                v14[17] = 0;
                int v15 = *(_DWORD *)(v13 + 448);
                if (v15 == 3)
                {
                  uint64_t v16 = (std::string *)"held";
                }
                else if (v15 == 2)
                {
                  uint64_t v16 = (std::string *)"holding";
                }
                else if (v15)
                {
                  uint64_t v16 = (std::string *)"resumed";
                }
                else
                {
                  uint64_t v16 = (std::string *)"resuming";
                }
                std::string v42 = *v16;
                LoggableString::LoggableString(&__p, &v42);
                (*(void (**)(unsigned char *, std::string *))(*(void *)v14 + 40))(v14, &__p);
                (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                v14[17] = 0;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v42.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                uint64_t v18 = *(SipSession **)(v13 + 392);
                if (v18)
                {
                  if (SipSession::terminating(v18))
                  {
                    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 64))(a1 + 8);
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(a1 + 8, v19);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"unheld call ", 12);
                    *(unsigned char *)(v19 + 17) = 0;
                    ObfuscatedString::ObfuscatedString((uint64_t)&v44, (const std::string *)(v13 + 472));
                    (*(void (**)(uint64_t, void **))(*(void *)v19 + 56))(v19, &v44);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" is terminating. Don't need to hold it.", 39);
                    *(unsigned char *)(v19 + 17) = 0;
                    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  }
                  else
                  {
                    uint64_t v20 = *(void *)(v13 + 392);
                    if (!v20 || !(*(unsigned int (**)(uint64_t))(*(void *)v20 + 264))(v20))
                    {
                      uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 64))(a1 + 8);
                      (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(a1 + 8, v21);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"need to put ", 12);
                      *(unsigned char *)(v21 + 17) = 0;
                      ObfuscatedString::ObfuscatedString((uint64_t)&v44, (const std::string *)(v13 + 472));
                      (*(void (**)(uint64_t, void **))(*(void *)v21 + 56))(v21, &v44);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)" on hold first", 14);
                      *(unsigned char *)(v21 + 17) = 0;
                      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      *(unsigned char *)(v21 + 17) = 0;
                      if (v48 < 0) {
                        operator delete(v46);
                      }
                      if (v45.i8[15] < 0) {
                        operator delete(v44);
                      }
                      long long v22 = operator new(0x140uLL);
                      std::string::size_type v23 = (std::string::size_type)v22;
                      v22[1] = 0;
                      v22[2] = 0;
                      *long long v22 = &unk_1F20BFEB8;
                      v44 = (void *)v13;
                      v45.i64[0] = (uint64_t)v12;
                      if (v12) {
                        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      BambiCallHoldAction::BambiCallHoldAction(v22 + 3, &v44, *(void *)(a1 + 144));
                      if (v45.i64[0]) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v45.i64[0]);
                      }
                      __p.__r_.__value_.__r.__words[0] = v23 + 24;
                      __p.__r_.__value_.__l.__size_ = v23;
                      std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&__p, (void *)(v23 + 136), v23 + 24);
                      long long v24 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
                      std::string v26 = a2[1];
                      unint64_t v25 = (unint64_t)a2[2];
                      if ((unint64_t)v26 >= v25)
                      {
                        long long v41 = v24;
                        uint64_t v27 = (v26 - *a2) >> 4;
                        unint64_t v28 = v27 + 1;
                        if ((unint64_t)(v27 + 1) >> 60) {
                          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
                        }
                        uint64_t v29 = v25 - (void)*a2;
                        if (v29 >> 3 > v28) {
                          unint64_t v28 = v29 >> 3;
                        }
                        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
                          unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
                        }
                        else {
                          unint64_t v30 = v28;
                        }
                        std::string v47 = a2 + 2;
                        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<BambiCallAction>>>(v30);
                        uint64_t v32 = &v31[16 * v27];
                        v46 = &v31[16 * v33];
                        *(_OWORD *)uint64_t v32 = v41;
                        long long v34 = v32 + 16;
                        v45.i64[1] = (uint64_t)(v32 + 16);
                        v36 = *a2;
                        uint64_t v35 = a2[1];
                        if (v35 == *a2)
                        {
                          int64x2_t v38 = vdupq_n_s64((unint64_t)v35);
                        }
                        else
                        {
                          do
                          {
                            long long v37 = *((_OWORD *)v35 - 1);
                            v35 -= 16;
                            *((_OWORD *)v32 - 1) = v37;
                            v32 -= 16;
                            *(void *)uint64_t v35 = 0;
                            *((void *)v35 + 1) = 0;
                          }
                          while (v35 != v36);
                          int64x2_t v38 = *(int64x2_t *)a2;
                          long long v34 = (char *)v45.i64[1];
                        }
                        *a2 = v32;
                        a2[1] = v34;
                        int64x2_t v45 = v38;
                        uint64_t v39 = a2[2];
                        a2[2] = (char *)v46;
                        v46 = v39;
                        v44 = (void *)v38.i64[0];
                        std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&v44);
                        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                        a2[1] = v34;
                        if (size) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](size);
                        }
                      }
                      else
                      {
                        *(_OWORD *)std::string v26 = v24;
                        a2[1] = v26 + 16;
                      }
                      goto LABEL_34;
                    }
                    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 64))(a1 + 8);
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(a1 + 8, v19);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"unheld call ", 12);
                    *(unsigned char *)(v19 + 17) = 0;
                    ObfuscatedString::ObfuscatedString((uint64_t)&v44, (const std::string *)(v13 + 472));
                    (*(void (**)(uint64_t, void **))(*(void *)v19 + 56))(v19, &v44);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" has already terminated. Don't need to hold it.", 47);
                    *(unsigned char *)(v19 + 17) = 0;
                    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  }
                }
                else
                {
                  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 64))(a1 + 8);
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(a1 + 8, v19);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"unheld call ", 12);
                  *(unsigned char *)(v19 + 17) = 0;
                  ObfuscatedString::ObfuscatedString((uint64_t)&v44, (const std::string *)(v13 + 472));
                  (*(void (**)(uint64_t, void **))(*(void *)v19 + 56))(v19, &v44);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" has no session. Don't need to hold it.", 39);
                  *(unsigned char *)(v19 + 17) = 0;
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                }
                *(unsigned char *)(v19 + 17) = 0;
              }
              if (v48 < 0) {
                operator delete(v46);
              }
              if (v45.i8[15] < 0) {
                operator delete(v44);
              }
            }
LABEL_34:
            if (v12) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
            v10 += 2;
          }
          while (v10 != v9);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  v44 = &v50;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
}

void sub_1C52F645C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  a19 = (void *)(v29 - 112);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

uint64_t BambiCallRequireCallsHeldAction::prerequisitesMet(BambiCallRequireCallsHeldAction *this)
{
  unint64_t v30 = 0;
  v31 = 0;
  uint64_t v32 = 0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      size_t v4 = v3;
      uint64_t v5 = *((void *)this + 16);
      if (v5)
      {
        uint64_t v6 = BambiCall::bambiClient(*((BambiCall **)this + 16));
        v29[0] = v5;
        v29[1] = v4;
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        char v7 = BambiClient::unheldCallsExcludingCall(v6, (uint64_t *)&v30, v29);
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        uint64_t v9 = *((void *)this + 1);
        uint64_t v8 = (char *)this + 8;
        uint64_t v10 = *(uint64_t (**)(char *))(v9 + 64);
        if ((v7 & 1) == 0)
        {
          uint64_t v21 = v10(v8);
          (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))(v8, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"no unheld calls", 15);
          *(unsigned char *)(v21 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v21 + 17) = 0;
          uint64_t v20 = 1;
          goto LABEL_35;
        }
        uint64_t v11 = v10(v8);
        (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))(v8, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"still waiting for these calls to go on hold or terminate:", 57);
        *(unsigned char *)(v11 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v11 + 17) = 0;
        uint64_t v13 = v30;
        uint64_t v12 = v31;
        if (v30 != v31)
        {
          while (1)
          {
            uint64_t v15 = *v13;
            uint64_t v14 = (std::__shared_weak_count *)v13[1];
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v16 = *(SipSession **)(v5 + 392);
            if (v16 && SipSession::terminating(v16))
            {
              uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)v8 + 64))(v8);
              (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))(v8, v17);
              ObfuscatedString::ObfuscatedString((uint64_t)v25, (const std::string *)(v15 + 472));
              (*(void (**)(uint64_t, void **))(*(void *)v17 + 56))(v17, v25);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)": terminating (", 15);
              *(unsigned char *)(v17 + 17) = 0;
              BambiCall::sipSessionState((BambiCall *)v15, &v23);
              LoggableString::LoggableString(&__p, &v23);
              (*(void (**)(uint64_t, std::string *))(*(void *)v17 + 40))(v17, &__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)")", 1);
              *(unsigned char *)(v17 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            else
            {
              uint64_t v17 = (*(uint64_t (**)(char *))(*(void *)v8 + 64))(v8);
              (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))(v8, v17);
              ObfuscatedString::ObfuscatedString((uint64_t)v25, (const std::string *)(v15 + 472));
              (*(void (**)(uint64_t, void **))(*(void *)v17 + 56))(v17, v25);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)": ", 2);
              *(unsigned char *)(v17 + 17) = 0;
              int v18 = *(_DWORD *)(v15 + 448);
              if (v18 == 3)
              {
                uint64_t v19 = (std::string *)"held";
              }
              else if (v18 == 2)
              {
                uint64_t v19 = (std::string *)"holding";
              }
              else if (v18)
              {
                uint64_t v19 = (std::string *)"resumed";
              }
              else
              {
                uint64_t v19 = (std::string *)"resuming";
              }
              std::string v23 = *v19;
              LoggableString::LoggableString(&__p, &v23);
              (*(void (**)(uint64_t, std::string *))(*(void *)v17 + 40))(v17, &__p);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            *(unsigned char *)(v17 + 17) = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v23.__r_.__value_.__l.__data_);
            }
            if (v28 < 0) {
              operator delete(v27);
            }
            if (v26 < 0) {
              break;
            }
            if (v14) {
              goto LABEL_27;
            }
LABEL_28:
            v13 += 2;
            if (v13 == v12) {
              goto LABEL_33;
            }
          }
          operator delete(v25[0]);
          if (!v14) {
            goto LABEL_28;
          }
LABEL_27:
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          goto LABEL_28;
        }
      }
LABEL_33:
      uint64_t v20 = 0;
LABEL_35:
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      goto LABEL_36;
    }
  }
  uint64_t v20 = 0;
LABEL_36:
  v25[0] = &v30;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v25);
  return v20;
}

void sub_1C52F6AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  a22 = v23 - 104;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  _Unwind_Resume(a1);
}

void BambiCallRequirePrepareAction::createPrerequisites(void *a1, uint64_t a2)
{
  BambiCallRequireCallsHeldAction::createPrerequisites((uint64_t)a1, (char **)a2);
  size_t v4 = (std::__shared_weak_count *)a1[17];
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = a1[16];
      if (!v7 || *(unsigned char *)(v7 + 465))
      {
LABEL_24:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        return;
      }
      uint64_t v8 = (std::__shared_weak_count *)operator new(0x140uLL);
      v8->__shared_owners_ = 0;
      v8->__shared_weak_owners_ = 0;
      v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BFC28;
      uint64_t v9 = v8 + 1;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v10 = a1[18];
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v27 = v7;
      v28.i64[0] = (uint64_t)v6;
      BambiCallAction::BambiCallAction((uint64_t)&v8[1], &v27, v10);
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      v8[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BFAB8;
      v8[1].__shared_owners_ = (uint64_t)&unk_1F20BFB18;
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      uint64_t v11 = (std::__shared_weak_count *)v8[6].__vftable;
      if (v11)
      {
        if (v11->__shared_owners_ != -1)
        {
LABEL_10:
          unint64_t v12 = *(void *)(a2 + 16);
          uint64_t v13 = *(std::__shared_weak_count ***)(a2 + 8);
          if ((unint64_t)v13 >= v12)
          {
            uint64_t v15 = ((uint64_t)v13 - *(void *)a2) >> 4;
            unint64_t v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 60) {
              std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v17 = v12 - *(void *)a2;
            if (v17 >> 3 > v16) {
              unint64_t v16 = v17 >> 3;
            }
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v18 = v16;
            }
            uint64_t v30 = a2 + 16;
            uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<BambiCallAction>>>(v18);
            uint64_t v21 = (std::__shared_weak_count **)&v19[16 * v15];
            *uint64_t v21 = v9;
            v21[1] = v8;
            uint64_t v14 = v21 + 2;
            uint64_t v23 = *(char **)a2;
            long long v22 = *(char **)(a2 + 8);
            if (v22 == *(char **)a2)
            {
              int64x2_t v25 = vdupq_n_s64((unint64_t)v22);
            }
            else
            {
              do
              {
                long long v24 = *((_OWORD *)v22 - 1);
                v22 -= 16;
                *((_OWORD *)v21 - 1) = v24;
                v21 -= 2;
                *(void *)long long v22 = 0;
                *((void *)v22 + 1) = 0;
              }
              while (v22 != v23);
              int64x2_t v25 = *(int64x2_t *)a2;
            }
            *(void *)a2 = v21;
            *(void *)(a2 + 8) = v14;
            int64x2_t v28 = v25;
            uint64_t v26 = *(void *)(a2 + 16);
            *(void *)(a2 + 16) = &v19[16 * v20];
            uint64_t v29 = v26;
            uint64_t v27 = v25.i64[0];
            std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&v27);
          }
          else
          {
            uint64_t *v13 = v9;
            v13[1] = v8;
            uint64_t v14 = v13 + 2;
          }
          *(void *)(a2 + 8) = v14;
          goto LABEL_24;
        }
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v8[5].__shared_weak_owners_ = (uint64_t)v9;
        v8[6].__vftable = (std::__shared_weak_count_vtbl *)v8;
        std::__shared_weak_count::__release_weak(v11);
      }
      else
      {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v8[5].__shared_weak_owners_ = (uint64_t)v9;
        v8[6].__vftable = (std::__shared_weak_count_vtbl *)v8;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      goto LABEL_10;
    }
  }
}

void sub_1C52F6D64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t BambiCallRequirePrepareAction::prerequisitesMet(BambiCallRequirePrepareAction *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  size_t v4 = v3;
  uint64_t v5 = *((void *)this + 16);
  if (v5 && *(unsigned char *)(v5 + 465)) {
    uint64_t v6 = BambiCallRequireCallsHeldAction::prerequisitesMet(this);
  }
  else {
    uint64_t v6 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

void sub_1C52F6E18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiCallStartAction::perform(BambiCallStartAction *this@<X0>, uint64_t a2@<X8>)
{
  SipTimerContainer::cancelAllTimers((BambiCallStartAction *)((char *)this + 152));
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  v22[0] = &unk_1F20B2680;
  v22[1] = &_bambiDomain;
  int v23 = 0;
  ImsResult::~ImsResult((ImsResult *)v22);
  size_t v4 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 16);
      if (v6)
      {
        uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
        (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"starting call", 13);
        *(unsigned char *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v7 + 17) = 0;
        uint64_t v8 = *(ImsLogContainer **)(*((void *)this + 18) + 168);
        v15[0] = v6;
        v15[1] = (uint64_t)v5;
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 15);
        if (!v9 || (uint64_t v10 = std::__shared_weak_count::lock(v9)) == 0) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v11 = v10;
        BambiStrictCallHandler::startCallFromAction(v8, v15, (uint64_t)&v16);
        int v12 = (*(uint64_t (**)(uint64_t *, void))(*v17 + 24))(v17, v18);
        ImsResult::~ImsResult((ImsResult *)&v16);
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        if (v12)
        {
          long long v19 = 0u;
          long long v20 = 0u;
          long long v21 = 0u;
          unint64_t v16 = &unk_1F20B2680;
          uint64_t v17 = &_bambiDomain;
          unsigned int v18 = 0x40000000;
          uint64_t v13 = (const std::string *)ImsResult::operator<<<char [21]>((uint64_t)&v16, "unable to start call");
          ImsResult::ImsResult((ImsResult *)a2, v13);
          ImsResult::~ImsResult((ImsResult *)&v16);
        }
        else
        {
          *(_OWORD *)(a2 + 24) = 0u;
          *(_OWORD *)(a2 + 40) = 0u;
          *(_OWORD *)(a2 + 56) = 0u;
          *(void *)a2 = &unk_1F20B2680;
          *(void *)(a2 + 8) = &_bambiDomain;
          *(_DWORD *)(a2 + 16) = 0;
        }
        goto LABEL_12;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  unint64_t v16 = &unk_1F20B2680;
  uint64_t v17 = &_bambiDomain;
  unsigned int v18 = 0x40000000;
  uint64_t v14 = (const std::string *)ImsResult::operator<<<char [13]>((uint64_t)&v16, "Call in null");
  ImsResult::ImsResult((ImsResult *)a2, v14);
  ImsResult::~ImsResult((ImsResult *)&v16);
  if (v5) {
LABEL_12:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C52F7128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  ImsResult::~ImsResult((ImsResult *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [13]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C52F7214(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void BambiCallAnswerAction::perform(BambiCallAnswerAction *this@<X0>, ImsResult *a2@<X8>)
{
  SipTimerContainer::cancelAllTimers((BambiCallAnswerAction *)((char *)this + 152));
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  v18[0] = &unk_1F20B2680;
  v18[1] = &_bambiDomain;
  int v19 = 0;
  ImsResult::~ImsResult((ImsResult *)v18);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 17);
  if (!v4)
  {
    size_t v5 = 0;
    goto LABEL_8;
  }
  size_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5 || (uint64_t v6 = *((void *)this + 16)) == 0)
  {
LABEL_8:
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    v13[0] = &unk_1F20B2680;
    v13[1] = &_bambiDomain;
    int v14 = 0x40000000;
    uint64_t v11 = (const std::string *)ImsResult::operator<<<char [13]>((uint64_t)v13, "Call in null");
    ImsResult::ImsResult(a2, v11);
    ImsResult::~ImsResult((ImsResult *)v13);
    if (!v5) {
      return;
    }
    goto LABEL_9;
  }
  uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
  (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"answering call", 14);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  v12[0] = v6;
  v12[1] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 15);
  if (!v8 || (uint64_t v9 = std::__shared_weak_count::lock(v8)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v10 = v9;
  BambiStrictCallHandler::answerCallFromAction((uint64_t)v12, (uint64_t)a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
LABEL_9:
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C52F7460(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t BambiCallResumeAction::prerequisitesMet(BambiCallResumeAction *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)this + 16);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 448) == 2)
    {
      uint64_t v7 = *((void *)this + 1);
      uint64_t v6 = (char *)this + 8;
      uint64_t v8 = (*(uint64_t (**)(char *))(v7 + 64))(v6);
      (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"waiting for call to finish holding", 34);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      uint64_t v9 = 0;
      *(unsigned char *)(v8 + 17) = 0;
    }
    else
    {
      uint64_t v9 = BambiCallRequireCallsHeldAction::prerequisitesMet(this);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v9;
}

void sub_1C52F75D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiCallResumeAction::perform(BambiCallResumeAction *this@<X0>, uint64_t a2@<X8>)
{
  SipTimerContainer::cancelAllTimers((BambiCallResumeAction *)((char *)this + 152));
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  v19[0] = &unk_1F20B2680;
  v19[1] = &_bambiDomain;
  int v20 = 0;
  ImsResult::~ImsResult((ImsResult *)v19);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 17);
  if (!v4)
  {
    uint64_t v5 = 0;
    goto LABEL_8;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5 || (uint64_t v6 = *((void *)this + 16)) == 0)
  {
LABEL_8:
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    v14[0] = &unk_1F20B2680;
    v14[1] = &_bambiDomain;
    int v15 = 0x40000000;
    int v12 = (const std::string *)ImsResult::operator<<<char [13]>((uint64_t)v14, "Call in null");
    ImsResult::ImsResult((ImsResult *)a2, v12);
    ImsResult::~ImsResult((ImsResult *)v14);
    if (!v5) {
      return;
    }
    goto LABEL_9;
  }
  uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 1) + 64))((char *)this + 8);
  (*(void (**)(char *, uint64_t))(*((void *)this + 1) + 16))((char *)this + 8, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"resuming call", 13);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = *(void *)(*((void *)this + 18) + 168);
  v13[0] = v6;
  v13[1] = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 15);
  if (!v9 || (uint64_t v10 = std::__shared_weak_count::lock(v9)) == 0) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v11 = v10;
  BambiStrictCallHandler::resumeCallFromAction(v8, (uint64_t)v13);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
LABEL_9:
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C52F7844(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t BambiCallPrepareAction::prerequisitesMet(BambiCallPrepareAction *this)
{
  return 1;
}

void BambiCallPrepareAction::perform(BambiCallPrepareAction *this@<X0>, uint64_t a2@<X8>)
{
  SipTimerContainer::cancelAllTimers((BambiCallPrepareAction *)((char *)this + 152));
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  v22[0] = &unk_1F20B2680;
  v22[1] = &_bambiDomain;
  int v23 = 0;
  ImsResult::~ImsResult((ImsResult *)v22);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 16);
      if (v6)
      {
        uint64_t v7 = (char *)this + 8;
        uint64_t v8 = *(uint64_t (**)(char *))(*((void *)this + 1) + 64);
        if (*(unsigned char *)(v6 + 465))
        {
          uint64_t v9 = v8((char *)this + 8);
          (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))(v7, v9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"call is already prepared", 24);
          *(unsigned char *)(v9 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v9 + 17) = 0;
        }
        else
        {
          uint64_t v11 = v8((char *)this + 8);
          (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))((char *)this + 8, v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"preparing call", 14);
          *(unsigned char *)(v11 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v11 + 17) = 0;
          uint64_t v12 = *(void *)(*((void *)this + 18) + 168);
          v16[0] = v6;
          v16[1] = v5;
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 15);
          if (!v13 || (int v14 = std::__shared_weak_count::lock(v13)) == 0) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          int v15 = v14;
          BambiStrictCallHandler::prepareCallFromAction(v12, (uint64_t)v16);
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(void *)a2 = &unk_1F20B2680;
        *(void *)(a2 + 8) = &_bambiDomain;
        *(_DWORD *)(a2 + 16) = 0;
        goto LABEL_13;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  v17[0] = &unk_1F20B2680;
  v17[1] = &_bambiDomain;
  int v18 = 0x40000000;
  uint64_t v10 = (const std::string *)ImsResult::operator<<<char [13]>((uint64_t)v17, "Call in null");
  ImsResult::ImsResult((ImsResult *)a2, v10);
  ImsResult::~ImsResult((ImsResult *)v17);
  if (v5) {
LABEL_13:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C52F7B90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t BambiCallHoldAction::prerequisitesMet(BambiCallHoldAction *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = *((void *)this + 16);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 448))
    {
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v8 = *((void *)this + 1);
      uint64_t v7 = (char *)this + 8;
      uint64_t v9 = (*(uint64_t (**)(char *))(v8 + 64))(v7);
      (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))(v7, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"waiting for call to resume", 26);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      uint64_t v6 = 0;
      *(unsigned char *)(v9 + 17) = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

void sub_1C52F7CF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiCallHoldAction::perform(BambiCallHoldAction *this@<X0>, uint64_t a2@<X8>)
{
  SipTimerContainer::cancelAllTimers((BambiCallHoldAction *)((char *)this + 152));
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  v24[0] = &unk_1F20B2680;
  v24[1] = &_bambiDomain;
  int v25 = 0;
  ImsResult::~ImsResult((ImsResult *)v24);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 16);
      if (v6)
      {
        uint64_t v7 = (char *)this + 8;
        uint64_t v8 = *(uint64_t (**)(char *))(*((void *)this + 1) + 64);
        if ((*(_DWORD *)(v6 + 448) & 0xFFFFFFFE) == 2)
        {
          uint64_t v9 = v8((char *)this + 8);
          (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))(v7, v9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"call is already ", 16);
          *(unsigned char *)(v9 + 17) = 0;
          int v10 = *(_DWORD *)(v6 + 448);
          if (v10 == 3)
          {
            uint64_t v11 = (std::string *)"held";
          }
          else if (v10 == 2)
          {
            uint64_t v11 = (std::string *)"holding";
          }
          else if (v10)
          {
            uint64_t v11 = (std::string *)"resumed";
          }
          else
          {
            uint64_t v11 = (std::string *)"resuming";
          }
          std::string v19 = *v11;
          LoggableString::LoggableString(&__p, &v19);
          (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 40))(v9, &__p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v9 + 17) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v19.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          uint64_t v13 = v8((char *)this + 8);
          (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))((char *)this + 8, v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"holding call", 12);
          *(unsigned char *)(v13 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v13 + 17) = 0;
          uint64_t v14 = *(void *)(*((void *)this + 18) + 168);
          v18[0] = v6;
          v18[1] = v5;
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          int v15 = (std::__shared_weak_count *)*((void *)this + 15);
          if (!v15 || (long long v16 = std::__shared_weak_count::lock(v15)) == 0) {
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          long long v17 = v16;
          BambiStrictCallHandler::holdCallFromAction(v14, (uint64_t)v18);
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        *(_OWORD *)(a2 + 24) = 0u;
        *(_OWORD *)(a2 + 40) = 0u;
        *(_OWORD *)(a2 + 56) = 0u;
        *(void *)a2 = &unk_1F20B2680;
        *(void *)(a2 + 8) = &_bambiDomain;
        *(_DWORD *)(a2 + 16) = 0;
        goto LABEL_23;
      }
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = 0x40000000;
  uint64_t v12 = (const std::string *)ImsResult::operator<<<char [13]>((uint64_t)&__p, "Call in null");
  ImsResult::ImsResult((ImsResult *)a2, v12);
  ImsResult::~ImsResult((ImsResult *)&__p);
  if (v5) {
LABEL_23:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C52F80BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

void BambiCallAction::~BambiCallAction(BambiCallAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C878E320);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(void *)this = &unk_1F20BF928;
  *((void *)this + 1) = &unk_1F20BF988;
  SipTimerContainer::~SipTimerContainer((BambiCallAction *)((char *)this + 152));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  *((void *)this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

uint64_t BambiCallAction::prerequisitesMet(BambiCallAction *this)
{
  return 1;
}

void *BambiCallAction::logPrefix(BambiCallAction *this, ImsOutStream *a2)
{
  (*(void (**)(BambiCallAction *))(*(void *)this + 16))(this);
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void non-virtual thunk to'BambiCallAction::~BambiCallAction(BambiCallAction *this)
{
}

{
  uint64_t vars8;

  BambiCallAction::~BambiCallAction((BambiCallAction *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void *non-virtual thunk to'BambiCallAction::logPrefix(BambiCallAction *this, ImsOutStream *a2)
{
  (*(void (**)(void))(*((void *)this - 1) + 16))();
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void BambiCallRequireCallsHeldAction::~BambiCallRequireCallsHeldAction(BambiCallRequireCallsHeldAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'BambiCallRequireCallsHeldAction::~BambiCallRequireCallsHeldAction(BambiCallRequireCallsHeldAction *this)
{
}

{
  uint64_t vars8;

  BambiCallAction::~BambiCallAction((BambiCallRequireCallsHeldAction *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void BambiCallRequirePrepareAction::~BambiCallRequirePrepareAction(BambiCallRequirePrepareAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'BambiCallRequirePrepareAction::~BambiCallRequirePrepareAction(BambiCallRequirePrepareAction *this)
{
}

{
  uint64_t vars8;

  BambiCallAction::~BambiCallAction((BambiCallRequirePrepareAction *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void BambiCallStartAction::~BambiCallStartAction(BambiCallStartAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C878E320);
}

std::string *BambiCallStartAction::loggableName@<X0>(std::string *a1@<X8>)
{
  return LoggableString::LoggableString(a1, (const std::string *)"BambiCallStartAction");
}

void non-virtual thunk to'BambiCallStartAction::~BambiCallStartAction(BambiCallStartAction *this)
{
}

{
  uint64_t vars8;

  BambiCallAction::~BambiCallAction((BambiCallStartAction *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void BambiCallAnswerAction::~BambiCallAnswerAction(BambiCallAnswerAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C878E320);
}

std::string *BambiCallAnswerAction::loggableName@<X0>(std::string *a1@<X8>)
{
  return LoggableString::LoggableString(a1, (const std::string *)"BambiCallAnswerAction");
}

void non-virtual thunk to'BambiCallAnswerAction::~BambiCallAnswerAction(BambiCallAnswerAction *this)
{
}

{
  uint64_t vars8;

  BambiCallAction::~BambiCallAction((BambiCallAnswerAction *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void BambiCallResumeAction::~BambiCallResumeAction(BambiCallResumeAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C878E320);
}

std::string *BambiCallResumeAction::loggableName@<X0>(std::string *a1@<X8>)
{
  return LoggableString::LoggableString(a1, (const std::string *)"BambiCallResumeAction");
}

void non-virtual thunk to'BambiCallResumeAction::~BambiCallResumeAction(BambiCallResumeAction *this)
{
}

{
  uint64_t vars8;

  BambiCallAction::~BambiCallAction((BambiCallResumeAction *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void BambiCallPrepareAction::~BambiCallPrepareAction(BambiCallPrepareAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C878E320);
}

std::string *BambiCallPrepareAction::loggableName@<X0>(std::string *a1@<X8>)
{
  return LoggableString::LoggableString(a1, (const std::string *)"BambiCallPrepareAction");
}

void non-virtual thunk to'BambiCallPrepareAction::~BambiCallPrepareAction(BambiCallPrepareAction *this)
{
}

{
  uint64_t vars8;

  BambiCallAction::~BambiCallAction((BambiCallPrepareAction *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void BambiCallHoldAction::~BambiCallHoldAction(BambiCallHoldAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C878E320);
}

std::string *BambiCallHoldAction::loggableName@<X0>(std::string *a1@<X8>)
{
  return LoggableString::LoggableString(a1, (const std::string *)"BambiCallHoldAction");
}

void non-virtual thunk to'BambiCallHoldAction::~BambiCallHoldAction(BambiCallHoldAction *this)
{
}

{
  uint64_t vars8;

  BambiCallAction::~BambiCallAction((BambiCallHoldAction *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<BambiCallAction>>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

uint64_t std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BFBA8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20BFBA8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20BFBA8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20BFBA8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 72))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C52F89E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void std::__shared_ptr_emplace<BambiCallHoldAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BFEB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiCallHoldAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BFEB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiCallHoldAction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *BambiCallHoldAction::BambiCallHoldAction(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiCallAction::BambiCallAction((uint64_t)a1, v6, a3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *a1 = &unk_1F20BFF08;
  a1[1] = &unk_1F20BFF68;
  return a1;
}

void sub_1C52F8B78(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<BambiCallPrepareAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BFC28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiCallPrepareAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20BFC28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiCallPrepareAction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void SipSessionClientUnconfirmedState::enterState(SipSessionClientUnconfirmedState *this, int a2)
{
  if (a2 == 1)
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 27);
    if (v3)
    {
      uint64_t v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        uint64_t v5 = v4;
        uint64_t v6 = (int8x8_t *)*((void *)this + 26);
        if (v6) {
          SipSession::startPingTimer(v6);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void sub_1C52F8C94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiCallProvisionalResponseEvent::~BambiCallProvisionalResponseEvent(BambiCallProvisionalResponseEvent *this)
{
  *(void *)this = &unk_1F20C0400;
  uint64_t v2 = (BambiCallProvisionalResponseEvent *)((char *)this + 40);
  *((void *)this + 5) = &unk_1F20DD488;
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  SipMessage::~SipMessage(v2);
  *(void *)this = &unk_1F20B8640;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

{
  SipMessage *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20C0400;
  uint64_t v2 = (BambiCallProvisionalResponseEvent *)((char *)this + 40);
  *((void *)this + 5) = &unk_1F20DD488;
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  SipMessage::~SipMessage(v2);
  *(void *)this = &unk_1F20B8640;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1C878E320);
}

void SipSessionClientUnconfirmedState::handleInviteResponse(SipSessionState *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  v47[0] = *a3;
  v47[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSessionState::handleInviteResponse((uint64_t)a1, (uint64_t)a2, v47);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  unsigned int v7 = a2[22];
  if (v7 / 0x64 == 2)
  {
    uint64_t v14 = (*(uint64_t (**)(SipSessionState *))(*(void *)a1 + 32))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 24))(v14) <= 5)
    {
      int v15 = *(void (**)(void))(*(void *)(*(uint64_t (**)(SipSessionState *))(*(void *)a1 + 32))(a1)
                             + 32);
      v15();
    }
    return;
  }
  if (v7 / 0x64 != 1)
  {
    if (v7 == 422) {
      return;
    }
    goto LABEL_30;
  }
  if (v7 == 100)
  {
LABEL_30:
    long long v16 = (std::__shared_weak_count *)*((void *)a1 + 27);
    if (v16)
    {
      int v10 = std::__shared_weak_count::lock(v16);
      if (v10)
      {
        long long v17 = (std::__shared_weak_count *)*((void *)a1 + 26);
        if (v17)
        {
          SipSessionInterface::stack(v17, &v77);
          if (*(unsigned char *)(v77 + 2681)) {
            BOOL v18 = a2[22] == 503;
          }
          else {
            BOOL v18 = 0;
          }
          char v19 = v18;
          if (*((void *)&v77 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
          }
          if (v19) {
            goto LABEL_114;
          }
        }
      }
    }
    else
    {
      int v10 = 0;
    }
    if (a2[22] < 0x12C) {
      goto LABEL_113;
    }
    long long v20 = (std::__shared_weak_count *)a3[1];
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v21 = (std::__shared_weak_count *)*((void *)a1 + 27);
    if (!v21 || (long long v22 = std::__shared_weak_count::lock(v21)) == 0)
    {
LABEL_111:
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
LABEL_113:
      if (!v10) {
        return;
      }
      goto LABEL_114;
    }
    long long v23 = v22;
    long long v24 = (std::__shared_weak_count *)*((void *)a1 + 26);
    if (!v24)
    {
LABEL_110:
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      goto LABEL_111;
    }
    shared_weak_owners = (std::__shared_weak_count *)v24[32].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      int64x2_t v45 = v22;
      shared_owners = (BambiCall *)v24[32].__shared_owners_;
      atomic_fetch_add_explicit(&shared_weak_owners->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      long long v27 = std::__shared_weak_count::lock(shared_weak_owners);
      if (v27) {
        long long v28 = shared_owners;
      }
      else {
        long long v28 = 0;
      }
      std::__shared_weak_count::__release_weak(shared_weak_owners);
      shared_weak_owners = (std::__shared_weak_count *)v24[32].__shared_weak_owners_;
      bzero(v86, 0x250uLL);
      if (shared_weak_owners)
      {
        uint64_t v29 = v24[32].__shared_owners_;
        atomic_fetch_add_explicit(&shared_weak_owners->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v84 = 0;
        v85 = std::__shared_weak_count::lock(shared_weak_owners);
        char v30 = 0;
        if (v85) {
          uint64_t v84 = v29;
        }
      }
      else
      {
        v85 = 0;
        uint64_t v84 = 0;
        char v30 = 1;
      }
      v31 = v27;
      long long v23 = v45;
    }
    else
    {
      bzero(v86, 0x250uLL);
      long long v28 = 0;
      v31 = 0;
      v85 = 0;
      uint64_t v84 = 0;
      char v30 = 1;
    }
    BambiCallSessionTerminatedEvent::BambiCallSessionTerminatedEvent(v86, &v84);
    if (v85) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v85);
    }
    if ((v30 & 1) == 0) {
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    SipSessionInterface::stack(v24, &v77);
    BambiCallSessionTerminationBaseEvent::setReasonFromIncomingResponse((BambiCallSessionTerminationBaseEvent *)v86, (const SipResponse *)a2, (const BambiCallIncomingTerminationReasons *)(v77 + 2416));
    if (*((void *)&v77 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
    }
    bzero(&v77, 0x3F0uLL);
    BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)&v77, 15, (BambiCallEvent *)v86);
    *(void *)&long long v77 = &unk_1F20C01C0;
    SipUri::SipUri((SipUri *)v82);
    char v83 = 0;
    if (!v28) {
      goto LABEL_117;
    }
    if (v87 == 15)
    {
      memset(&v76, 0, sizeof(v76));
      BambiCall::remoteDisplayNumber(v28, (uint64_t)&v76);
      uint64_t v32 = SipMessage::header<SipContactHeader>((uint64_t)a2);
      if (v32)
      {
        if (v32[9] == v32[10]) {
          uint64_t v33 = 0;
        }
        else {
          uint64_t v33 = v32[9];
        }
      }
      else
      {
        uint64_t v33 = 0;
      }
      uint64_t v75 = 0;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      *(_OWORD *)v50 = 0u;
      SipUri::SipUri((SipUri *)v50);
      if (v33 && (uint64_t v39 = (SipUri *)(v33 + 8), SipUri::isUrn(v39)))
      {
        SipUri::operator=((SipUri *)v50, (uint64_t)v39);
      }
      else
      {
        uint64_t v40 = ((uint64_t (*)(std::__shared_weak_count *))v24->__vftable[1].__get_deleter)(v24);
        ((void (*)(std::__shared_weak_count *, uint64_t))v24->__on_zero_shared)(v24, v40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"Response does not contain valid SOS service Urn", 47);
        *(unsigned char *)(v40 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v40 + 17) = 0;
      }
      char v83 = 1;
      SipUri::operator=((SipUri *)v82, (uint64_t)v50);
      uint64_t v41 = HIBYTE(v57);
      if (v57 < 0) {
        uint64_t v41 = v57;
      }
      if (v41)
      {
        if (SipUri::isEmergencyUrn((SipUri *)v50) && SipUri::getEmergencySubservice((SipUri *)v50) != 6) {
          char v83 = 0;
        }
        std::string::size_type size = HIBYTE(v76.__r_.__value_.__r.__words[2]);
        if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v76.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          SipSessionInterface::stack(v24, &v48);
          SipStack::addEmergencyNumberToUrnMapping(v48, &v76, (uint64_t)v50);
          if (v49) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v49);
          }
        }
      }
      SipUri::~SipUri((SipUri *)v50);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v76.__r_.__value_.__l.__data_);
      }
      int64x2_t v38 = (BambiCallEvent *)&v77;
      goto LABEL_103;
    }
    if (BambiCall::isWPSCall(v28))
    {
      if (v88)
      {
        uint64_t v34 = ((uint64_t (*)(std::__shared_weak_count *))v24->__vftable[1].__get_deleter)(v24);
        ((void (*)(std::__shared_weak_count *, uint64_t))v24->__on_zero_shared)(v24, v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"WPS Call failure detected - attempting to cleanup WPS state", 59);
        *(unsigned char *)(v34 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v34 + 17) = 0;
        SipSession::setWPSErrorResponse((uint64_t)v24, (uint64_t)a2);
        uint64_t v35 = (*(uint64_t (**)(SipSessionState *))(*(void *)a1 + 32))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 32))(v35, 15);
LABEL_108:
        *(void *)&long long v77 = &unk_1F20C01C0;
        SipUri::~SipUri((SipUri *)v82);
        BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&v77);
        BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)v86);
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        goto LABEL_110;
      }
    }
    else
    {
LABEL_117:
      if (SipSession::emergency(v24))
      {
        SipSessionInterface::stack(v24, v50);
        v36 = (SipUserAgentConfig *)SipUserAgent::config(*((SipUserAgent **)v50[0] + 18));
        int shouldCSFBOnInviteResponse = SipUserAgentConfig::shouldCSFBOnInviteResponse(v36, a2[22], 1);
        if (v50[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v50[1]);
        }
        if (shouldCSFBOnInviteResponse)
        {
          char v88 = 1;
          int v87 = 11;
        }
      }
    }
    int64x2_t v38 = (BambiCallEvent *)v86;
LABEL_103:
    if (SipSession::emergency(v24))
    {
      if (a2[22] - 300 >= 0x64)
      {
        SipSessionInterface::stack(v24, v50);
        v43 = (ImsPrefs *)SipStack::prefs(v50[0]);
        EmergencyAnonymousAutomaticRedialKey = (void **)ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(v43);
        char v89 = ImsPrefs::BOOLValue(v43, EmergencyAnonymousAutomaticRedialKey);
        if (v50[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v50[1]);
        }
      }
    }
    SipSessionState::terminateSessionWithEvent(a1, v38);
    goto LABEL_108;
  }
  if (v7 != 183)
  {
LABEL_17:
    if ((*(unsigned int (**)(SipSessionState *))(*(void *)a1 + 48))(a1) <= 3)
    {
      uint64_t v13 = (*(uint64_t (**)(SipSessionState *))(*(void *)a1 + 32))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, 4);
    }
    int v10 = (std::__shared_weak_count *)a3[1];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)std::string __p = 0u;
    long long v81 = 0u;
    memset(v79, 0, sizeof(v79));
    long long v77 = 0u;
    *(_OWORD *)v78 = 0u;
    BambiCallProvisionalResponseEvent::BambiCallProvisionalResponseEvent((BambiCallProvisionalResponseEvent *)&v77, (const SipResponse *)a2);
    SipSessionState::fireCallEvent(a1, (BambiCallEvent *)&v77);
    *(void *)&long long v77 = &unk_1F20C0400;
    *((void *)&v79[0] + 1) = &unk_1F20DD488;
    if (SHIBYTE(v81) < 0) {
      operator delete(__p[1]);
    }
    SipMessage::~SipMessage((SipMessage *)((char *)v79 + 8));
    *(void *)&long long v77 = &unk_1F20B8640;
    if (v78[1]) {
      std::__shared_weak_count::__release_weak(v78[1]);
    }
    goto LABEL_113;
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a1 + 27);
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      int v10 = v9;
      uint64_t v11 = (SipSession *)*((void *)a1 + 26);
      if (v11)
      {
        uint64_t v12 = (std::__shared_weak_count *)a3[1];
        v46 = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipSession::handleSessionProgressResponse(v11, (uint64_t)a2);
        if (v46) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v46);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        goto LABEL_17;
      }
LABEL_114:
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

void sub_1C52F96B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  SipUri::~SipUri((SipUri *)&a17);
  if (a72 < 0) {
    operator delete(__p);
  }
  BambiCallEmergencySessionRequiredEvent::~BambiCallEmergencySessionRequiredEvent((BambiCallEmergencySessionRequiredEvent *)&a73);
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&STACK[0x5F8]);
  if (v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v76);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  if (v74) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v74);
  }
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  _Unwind_Resume(a1);
}

void BambiCallEmergencySessionRequiredEvent::~BambiCallEmergencySessionRequiredEvent(BambiCallEmergencySessionRequiredEvent *this)
{
  *(void *)this = &unk_1F20C01C0;
  SipUri::~SipUri((BambiCallEmergencySessionRequiredEvent *)((char *)this + 592));
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20C01C0;
  SipUri::~SipUri((BambiCallEmergencySessionRequiredEvent *)((char *)this + 592));
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent(this);
  JUMPOUT(0x1C878E320);
}

void SipSessionClientInviteState::enterState(SipSessionClientInviteState *this, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  memset(&__p, 0, sizeof(__p));
  long long v17 = &unk_1F20C09A8;
  if (byte_1EBBDB560[23] < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)byte_1EBBDB560, *(std::string::size_type *)&byte_1EBBDB560[8]);
  }
  else {
    std::string __p = *(std::string *)byte_1EBBDB560;
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 27);
  if (!v4) {
    goto LABEL_23;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5) {
    goto LABEL_23;
  }
  uint64_t v6 = v5;
  unsigned int v7 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v7)
  {
    if (SipSession::emergency(*((std::__shared_weak_count **)this + 26)))
    {
      uint64_t v8 = (const std::string *)&unk_1EBBDB780;
    }
    else
    {
      SipSessionInterface::stack(v7, &v15);
      if (*(unsigned char *)(v15 + 3709))
      {
        SipSessionInterface::stack(v7, &v13);
        BOOL isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)(v13 + 3160));
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
      }
      else
      {
        BOOL isNR = 0;
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if (!isNR) {
        goto LABEL_18;
      }
      uint64_t v8 = (const std::string *)&unk_1EBBDB7A0;
    }
    std::string::operator=(&__p, v8);
LABEL_18:
    uint64_t v11 = *((void *)this + 24);
    int v10 = (std::__shared_weak_count *)*((void *)this + 25);
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    long long v20 = 0;
    uint64_t v12 = operator new(0x20uLL);
    *uint64_t v12 = &unk_1F20C0200;
    v12[1] = this;
    void v12[2] = v11;
    v12[3] = v10;
    long long v20 = v12;
    SipTimerContainer::startSipTimer((int8x8_t *)this + 3, (uint64_t)&v17, (uint64_t)v19, 0);
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v19);
    SipSessionClientUnconfirmedState::enterState(this, a2);
    if (v10)
    {
      std::__shared_weak_count::__release_weak(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
LABEL_23:
  long long v17 = &unk_1F20C09A8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1C52F9A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void SipTimer::~SipTimer(void **this)
{
  *this = &unk_1F20C09A8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C09A8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipSessionClientInviteState::handleTimer(SipSessionState *a1, unsigned __int8 *a2)
{
  if (operator==(a2, (uint64_t)&SipTimers::kTimerInviteResponseTimeout)
    || operator==(a2, (uint64_t)&SipTimers::kTimerEPSInviteResponseTimeout)
    || operator==(a2, (uint64_t)&SipTimers::kTimerEmergencyInviteResponseTimeout))
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 27);
    if (v4)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *((void *)a1 + 26);
        if (v7)
        {
          memset(v24, 0, sizeof(v24));
          long long v22 = (std::__shared_weak_count *)(v7 + 104);
          long long v23 = v5;
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          LoggableString::LoggableString((LoggableString *)__p, "handleTimer");
          SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v24, &v22, __p);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          long long v20 = 0;
          uint64_t v21 = 0;
          SipSession::clientInviteTransaction((SipSession *)v7, (uint64_t *)&v20);
          if (v20) {
            SipTransaction::abort(v20);
          }
          bzero(__p, 0x250uLL);
          BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)__p, 15, 17);
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B85E8;
          if (SipSession::emergency((std::__shared_weak_count *)v7))
          {
            SipSessionInterface::stack((std::__shared_weak_count *)v7, &v15);
            uint64_t v8 = (ImsPrefs *)SipStack::prefs((SipStack *)v15.__r_.__value_.__l.__data_);
            EmergencyAnonymousAutomaticRedialKey = (void **)ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(v8);
            char v19 = ImsPrefs::BOOLValue(v8, EmergencyAnonymousAutomaticRedialKey);
            if (v15.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.__r_.__value_.__l.__size_);
            }
          }
          SipSessionState::terminateSessionWithEvent(a1, (BambiCallEvent *)__p);
          SipSessionInterface::stack((std::__shared_weak_count *)v7, &v15);
          if (v15.__r_.__value_.__r.__words[0])
          {
            SipSessionInterface::stack((std::__shared_weak_count *)v7, &v16);
            BOOL isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v16 + 3160));
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
          }
          else
          {
            BOOL isWifi = 0;
          }
          if (v15.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15.__r_.__value_.__l.__size_);
          }
          if (isWifi)
          {
            SipSessionInterface::stack((std::__shared_weak_count *)v7, &v16);
            uint64_t v11 = *(void *)(v16 + 136);
            SipSessionInterface::stack((std::__shared_weak_count *)v7, &v13);
            if (*(char *)(v13 + 4183) < 0) {
              std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v13 + 4160), *(void *)(v13 + 4168));
            }
            else {
              std::string v15 = *(std::string *)(v13 + 4160);
            }
            uint64_t v12 = *(void *)(v11 + 248);
            if (v12) {
              (*(void (**)(uint64_t, std::string *))(*(void *)v12 + 96))(v12, &v15);
            }
            if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v15.__r_.__value_.__l.__data_);
            }
            if (v14) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            }
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
          }
          BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)__p);
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
          SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v24);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
}

void sub_1C52F9E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&a20);
  long long v28 = *(std::__shared_weak_count **)(v26 - 120);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v26 - 96);
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

void SipSessionClientInviteState::handleInviteResponse(SipSessionState *a1, unsigned int *a2, uint64_t *a3)
{
  if (a2[22] == 100)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)(*(uint64_t (**)(SipSessionState *))(*(void *)a1 + 32))(a1) + 32);
    v3();
  }
  else
  {
    uint64_t v4 = (std::__shared_weak_count *)a3[1];
    v5[0] = *a3;
    v5[1] = (uint64_t)v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipSessionClientUnconfirmedState::handleInviteResponse(a1, a2, v5);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C52F9FB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipSessionClientReceivedTryingResponseState::enterState(SipSessionClientReceivedTryingResponseState *this, int a2)
{
  uint64_t v7 = 0;
  long long v5 = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  v4[0] = 0;
  v4[1] = 0;
  BambiCallEvent::BambiCallEvent((uint64_t)&v5, 1, v4);
  SipSessionState::fireCallEvent(this, (BambiCallEvent *)&v5);
  SipSessionClientUnconfirmedState::enterState(this, a2);
  *(void *)&long long v5 = &unk_1F20B8640;
  if (v6[1]) {
    std::__shared_weak_count::__release_weak(v6[1]);
  }
}

void sub_1C52FA068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(exception_object);
}

void SipSessionClientCanceledState::enterState(int8x8_t *this, unsigned int a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  this[28].i8[0] = 0;
  uint64_t v3 = (std::__shared_weak_count *)this[27];
  if (v3)
  {
    long long v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      int8x8_t v7 = this[26];
      if (v7)
      {
        uint64_t v26 = 0;
        long long v27 = 0;
        SipSession::clientInviteTransaction(*(SipSession **)&v7, &v26);
        if (a2 < 2)
        {
          uint64_t v11 = (*(uint64_t (**)(int8x8_t))(**(void **)&v7 + 64))(v7);
          (*(void (**)(int8x8_t, uint64_t))(**(void **)&v7 + 16))(v7, v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"queuing CANCEL until we receive a provisional response.", 55);
          *(unsigned char *)(v11 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v11 + 17) = 0;
          uint64_t v12 = v26;
          if (v26)
          {
            uint64_t v13 = (*(uint64_t (**)(int8x8_t))(**(void **)&v7 + 64))(v7);
            (*(void (**)(int8x8_t, uint64_t))(**(void **)&v7 + 16))(v7, v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"turning off retransmission of INVITE", 36);
            *(unsigned char *)(v13 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v13 + 17) = 0;
            *(unsigned char *)(v12 + 368) = 0;
          }
        }
        else
        {
          uint64_t v8 = v26;
          if (v26)
          {
            uint64_t v9 = *(SipDialog **)(*(void *)&v7 + 248);
            uint64_t v10 = *(void *)(*(void *)&v7 + 256);
            if (v10) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
            }
            v25[0] = v8;
            v25[1] = (uint64_t)v27;
            if (v27) {
              atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipDialog::cancelInviteRequest(v9, v25, *(SipHeader **)(*(void *)&v7 + 1584));
          }
          uint64_t v14 = (*(uint64_t (**)(int8x8_t))(**(void **)&v7 + 64))(v7);
          (*(void (**)(int8x8_t, uint64_t))(**(void **)&v7 + 16))(v7, v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"no client INVITE transaction to cancel, going right to terminated state", 71);
          *(unsigned char *)(v14 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v14 + 17) = 0;
          uint64_t v15 = (*(uint64_t (**)(int8x8_t *))(*(void *)this + 32))(this);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 13);
        }
        int8x8_t v17 = this[24];
        uint64_t v16 = (std::__shared_weak_count *)this[25];
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = *(void *)(*(void *)&v7 + 248);
        if (v18 && (uint64_t v19 = *(void *)(v18 + 216)) != 0) {
          long long v20 = *(SipUserAgent **)(v19 + 136);
        }
        else {
          long long v20 = 0;
        }
        if (*(_DWORD *)(SipUserAgent::config(v20) + 600))
        {
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v29 = 0;
          uint64_t v21 = operator new(0x20uLL);
          *uint64_t v21 = &unk_1F20C0280;
          v21[1] = this;
          v21[2] = v17;
          v21[3] = v16;
          uint64_t v29 = v21;
          uint64_t v22 = *(void *)(*(void *)&v7 + 248);
          if (v22 && (uint64_t v23 = *(void *)(v22 + 216)) != 0) {
            long long v24 = *(SipUserAgent **)(v23 + 136);
          }
          else {
            long long v24 = 0;
          }
          SipUserAgent::config(v24);
          SipTimerContainer::startTimer(this + 3, (uint64_t)&kWaitingForCancelResponseTimerName);
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v28);
        }
        if (v16)
        {
          std::__shared_weak_count::__release_weak(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C52FA52C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  ImsResult::~ImsResult((ImsResult *)&a11);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void SipSessionClientCanceledState::terminateSession(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    long long v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      int8x8_t v7 = *(std::__shared_weak_count **)(a1 + 208);
      if (v7)
      {
        uint64_t v8 = ((uint64_t (*)(std::__shared_weak_count *))v7->__vftable[1].__get_deleter)(v7);
        ((void (*)(std::__shared_weak_count *, uint64_t))v7->__on_zero_shared)(v7, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"terminating session", 19);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        uint64_t v34 = 0;
        *(_OWORD *)&v35.__r_.__value_.__r.__words[1] = 0u;
        uint64_t v41 = 0;
        long long v39 = 0u;
        long long v40 = 0u;
        *(_OWORD *)&v37[16] = 0u;
        long long v38 = 0u;
        long long v36 = 0u;
        *(_OWORD *)long long v37 = 0u;
        *((unsigned char *)&v35.__r_.__value_.__s + 23) = 13;
        qmemcpy(&v35, "InternalError", 13);
        *(void *)&v37[12] = 0xA000001F4;
        uint64_t v9 = v7[66].__vftable;
        if (v9)
        {
          LODWORD(v34) = v9->~__shared_weak_count;
          std::string::operator=(&v35, (const std::string *)&v9->~__shared_weak_count_0);
          std::string::operator=((std::string *)&v36, (const std::string *)&v9->__on_zero_shared_weak);
          on_zero_shared = v9[1].__on_zero_shared;
          *(_DWORD *)&v37[16] = v9[1].__get_deleter;
          *(void *)&v37[8] = on_zero_shared;
          std::string::operator=((std::string *)&v37[24], (const std::string *)&v9[1].__on_zero_shared_weak);
          uint64_t v12 = v9[2].__on_zero_shared;
          get_deleter = v9[2].__get_deleter;
          if (get_deleter) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)get_deleter + 1, 1uLL, memory_order_relaxed);
          }
          uint64_t v13 = (std::__shared_weak_count *)*((void *)&v39 + 1);
          *(void *)&long long v39 = v12;
          *((void *)&v39 + 1) = get_deleter;
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          on_zero_shared_weak = v9[2].__on_zero_shared_weak;
          uint64_t v14 = v9[3].~__shared_weak_count;
          if (v14) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 1, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = (std::__shared_weak_count *)*((void *)&v40 + 1);
          *(void *)&long long v40 = on_zero_shared_weak;
          *((void *)&v40 + 1) = v14;
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          int v17 = (int)v9[3].~__shared_weak_count_0;
          *(_DWORD *)((char *)&v41 + 3) = *(_DWORD *)((char *)&v9[3].~__shared_weak_count_0 + 3);
          LODWORD(v41) = v17;
        }
        else
        {
          SipSessionInterface::stack(v7, &v30);
          uint64_t v18 = v30;
          std::string::basic_string[abi:ne180100]<0>(__p, "InternalError");
          BambiCallTerminationReasonsBase::reason((void (***)(uint64_t *__return_ptr))(v18 + 2248), (uint64_t)__p, &v32);
          uint64_t v19 = v32;
          LODWORD(v34) = *(_DWORD *)v32;
          std::string::operator=(&v35, (const std::string *)(v32 + 8));
          std::string::operator=((std::string *)&v36, (const std::string *)(v19 + 32));
          uint64_t v20 = *(void *)(v19 + 56);
          *(_DWORD *)&v37[16] = *(_DWORD *)(v19 + 64);
          *(void *)&v37[8] = v20;
          std::string::operator=((std::string *)&v37[24], (const std::string *)(v19 + 72));
          uint64_t v22 = *(void *)(v19 + 96);
          uint64_t v21 = *(void *)(v19 + 104);
          if (v21) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v23 = (std::__shared_weak_count *)*((void *)&v39 + 1);
          *(void *)&long long v39 = v22;
          *((void *)&v39 + 1) = v21;
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          uint64_t v25 = *(void *)(v19 + 112);
          uint64_t v24 = *(void *)(v19 + 120);
          if (v24) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v26 = (std::__shared_weak_count *)*((void *)&v40 + 1);
          *(void *)&long long v40 = v25;
          *((void *)&v40 + 1) = v24;
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          int v27 = *(_DWORD *)(v19 + 128);
          *(_DWORD *)((char *)&v41 + 3) = *(_DWORD *)(v19 + 131);
          LODWORD(v41) = v27;
          if (v33) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          }
          if (v29 < 0) {
            operator delete(__p[0]);
          }
          if (v31) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
        }
        bzero(__p, 0x250uLL);
        BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)__p, 15, (uint64_t)&v34);
        __p[0] = &unk_1F20B85E8;
        SipSession::terminateWithEvent((BambiCall **)v7, (BambiCallEvent *)__p, a2);
        BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)__p);
        if (*((void *)&v40 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
        }
        if (*((void *)&v39 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39 + 1));
        }
        if (SHIBYTE(v38) < 0) {
          operator delete(*(void **)&v37[24]);
        }
        if ((v37[7] & 0x80000000) != 0) {
          operator delete((void *)v36);
        }
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v35.__r_.__value_.__l.__data_);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C52FA958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  int v17 = *(std::__shared_weak_count **)(v15 - 232);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  BambiCallTerminationReason::~BambiCallTerminationReason((BambiCallTerminationReason *)(v15 - 208));
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void SipSessionClientCanceledState::handleTransactionError(uint64_t a1)
{
}

void SipSessionClientCanceledState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2[23];
  }
  else {
    uint64_t v3 = *((void *)a2 + 1);
  }
  uint64_t v4 = qword_1EBBDB9F8;
  if (byte_1EBBDBA07 >= 0) {
    uint64_t v4 = byte_1EBBDBA07;
  }
  if (v3 != v4) {
    return;
  }
  if (byte_1EBBDBA07 >= 0) {
    uint64_t v6 = &kWaitingForCancelResponseTimerName;
  }
  else {
    uint64_t v6 = (uint64_t *)kWaitingForCancelResponseTimerName;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v6, *((void *)a2 + 1))) {
      return;
    }
    goto LABEL_17;
  }
  if (!a2[23])
  {
LABEL_17:
    SipSessionClientCanceledState::terminateSession(a1, 8);
    return;
  }
  while (*a2 == *(unsigned __int8 *)v6)
  {
    ++a2;
    uint64_t v6 = (uint64_t *)((char *)v6 + 1);
    if (!--v2) {
      goto LABEL_17;
    }
  }
}

void SipSessionClientCanceledState::handleResponse(uint64_t a1, const SipResponse *a2, void *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 216);
  if (v4)
  {
    int8x8_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 208);
      if (!v9)
      {
LABEL_39:
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        return;
      }
      uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*a3 + 296) + 112))(*(void *)(*a3 + 296));
      uint64_t v11 = v10[23];
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = v10[23];
      }
      else {
        uint64_t v12 = *((void *)v10 + 1);
      }
      if (v12 == 6)
      {
        if ((v11 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v10, "INVITE", *((void *)v10 + 1))) {
            goto LABEL_15;
          }
        }
        else if (v10[23])
        {
          uint64_t v13 = "INVITE";
          while (*v10 == *(unsigned __int8 *)v13)
          {
            ++v10;
            ++v13;
            if (!--v11) {
              goto LABEL_25;
            }
          }
          goto LABEL_15;
        }
LABEL_25:
        unsigned int v18 = *((_DWORD *)a2 + 22);
        if (v18 - 100 > 0x63)
        {
          if (v18 - 200 > 0x63)
          {
            if (v18 >= 0x12C) {
              SipSessionClientCanceledState::terminateSession(a1, 13);
            }
          }
          else
          {
            uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"received 200 after we sent a CANCEL.  Sending BYE.", 50);
            *(unsigned char *)(v23 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v23 + 17) = 0;
            uint64_t v24 = (std::__shared_weak_count *)a3[1];
            uint64_t v46 = *a3;
            std::string v47 = v24;
            if (v24) {
              atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipSession::handleInviteResponseToCancel((void *)v9, a2, &v46);
            if (v47) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v47);
            }
          }
        }
        else if (!*(unsigned char *)(a1 + 224))
        {
          uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"received provisional response to INVITE.  Sending pending CANCEL request.", 73);
          *(unsigned char *)(v19 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v19 + 17) = 0;
          uint64_t v20 = *(SipDialog **)(v9 + 248);
          uint64_t v21 = *(void *)(v9 + 256);
          if (v21) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v22 = a3[1];
          v48[0] = *a3;
          v48[1] = v22;
          if (v22) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
          }
          SipDialog::cancelInviteRequest(v20, v48, *(SipHeader **)(v9 + 1584));
        }
        goto LABEL_39;
      }
LABEL_15:
      uint64_t v14 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*a3 + 296) + 112))(*(void *)(*a3 + 296));
      uint64_t v15 = v14[23];
      if ((v15 & 0x80u) == 0) {
        uint64_t v16 = v14[23];
      }
      else {
        uint64_t v16 = *((void *)v14 + 1);
      }
      if (v16 == 6)
      {
        if ((v15 & 0x80) == 0)
        {
          if (v14[23])
          {
            int v17 = "CANCEL";
            while (*v14 == *(unsigned __int8 *)v17)
            {
              ++v14;
              ++v17;
              if (!--v15) {
                goto LABEL_41;
              }
            }
            goto LABEL_38;
          }
LABEL_41:
          if (*((_DWORD *)a2 + 22) >= 0x12Cu)
          {
            uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v27);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"received ", 9);
            *(unsigned char *)(v27 + 17) = 0;
            std::ostream::operator<<();
            *(unsigned char *)(v27 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)" response to our CANCEL.  Sending BYE.", 38);
            *(unsigned char *)(v27 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v27 + 17) = 0;
            uint64_t v38 = 0;
            *(_OWORD *)&v39.__r_.__value_.__r.__words[1] = 0u;
            uint64_t v45 = 0;
            long long v43 = 0u;
            long long v44 = 0u;
            *(_OWORD *)&v41[16] = 0u;
            long long v42 = 0u;
            *(_OWORD *)long long v40 = 0u;
            *(_OWORD *)uint64_t v41 = 0u;
            *((unsigned char *)&v39.__r_.__value_.__s + 23) = 13;
            qmemcpy(&v39, "InternalError", 13);
            *(void *)&v41[12] = 0xA000001F4;
            uint64_t v28 = *(void *)(v9 + 1584);
            if (v28)
            {
              LODWORD(v38) = *(_DWORD *)v28;
              std::string::operator=(&v39, (const std::string *)(v28 + 8));
              std::string::operator=((std::string *)v40, (const std::string *)(v28 + 32));
              uint64_t v29 = *(void *)(v28 + 56);
              *(_DWORD *)&v41[16] = *(_DWORD *)(v28 + 64);
              *(void *)&v41[8] = v29;
              std::string::operator=((std::string *)&v41[24], (const std::string *)(v28 + 72));
              uint64_t v31 = *(void *)(v28 + 96);
              uint64_t v30 = *(void *)(v28 + 104);
              if (v30) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
              }
              uint64_t v32 = (std::__shared_weak_count *)*((void *)&v43 + 1);
              *(void *)&long long v43 = v31;
              *((void *)&v43 + 1) = v30;
              if (v32) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v32);
              }
              uint64_t v34 = *(void *)(v28 + 112);
              uint64_t v33 = *(void *)(v28 + 120);
              if (v33) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
              }
              std::string v35 = (std::__shared_weak_count *)*((void *)&v44 + 1);
              *(void *)&long long v44 = v34;
              *((void *)&v44 + 1) = v33;
              if (v35) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v35);
              }
              int v36 = *(_DWORD *)(v28 + 128);
              *(_DWORD *)((char *)&v45 + 3) = *(_DWORD *)(v28 + 131);
              LODWORD(v45) = v36;
            }
            (*(void (**)(void **__return_ptr, uint64_t, uint64_t *, void))(*(void *)v9 + 120))(v37, v9, &v38, 0);
            ImsResult::~ImsResult((ImsResult *)v37);
            if (*((void *)&v44 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v44 + 1));
            }
            if (*((void *)&v43 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v43 + 1));
            }
            if (SHIBYTE(v42) < 0) {
              operator delete(*(void **)&v41[24]);
            }
            if ((v41[7] & 0x80000000) != 0) {
              operator delete(v40[0]);
            }
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v39.__r_.__value_.__l.__data_);
            }
          }
          goto LABEL_39;
        }
        if (!memcmp(*(const void **)v14, "CANCEL", *((void *)v14 + 1))) {
          goto LABEL_41;
        }
      }
LABEL_38:
      uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"doing nothing with ", 19);
      *(unsigned char *)(v25 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v25 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)" response to ", 13);
      *(unsigned char *)(v25 + 17) = 0;
      uint64_t v26 = (*(uint64_t (**)(void))(**(void **)(*a3 + 296) + 112))(*(void *)(*a3 + 296));
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 32))(v25, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)" request", 8);
      *(unsigned char *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v25 + 17) = 0;
      goto LABEL_39;
    }
  }
}

void sub_1C52FB220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  ImsResult::~ImsResult((ImsResult *)va);
  uint64_t v15 = *(std::__shared_weak_count **)(v13 - 56);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  _Unwind_Resume(a1);
}

void SipSessionClientWPSCanceledState::enterState(int8x8_t *this, unsigned int a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  this[28].i8[0] = 0;
  uint64_t v3 = (std::__shared_weak_count *)this[27];
  if (v3)
  {
    long long v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      int8x8_t v7 = this[26];
      if (v7)
      {
        uint64_t v31 = 0;
        uint64_t v32 = 0;
        SipSession::clientInviteTransaction(*(SipSession **)&v7, &v31);
        if (a2 < 2)
        {
          uint64_t v11 = (*(uint64_t (**)(int8x8_t))(**(void **)&v7 + 64))(v7);
          (*(void (**)(int8x8_t, uint64_t))(**(void **)&v7 + 16))(v7, v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"queuing CANCEL until we receive a provisional response.", 55);
          *(unsigned char *)(v11 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v11 + 17) = 0;
          uint64_t v12 = v31;
          if (v31)
          {
            uint64_t v13 = (*(uint64_t (**)(int8x8_t))(**(void **)&v7 + 64))(v7);
            (*(void (**)(int8x8_t, uint64_t))(**(void **)&v7 + 16))(v7, v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"turning off retransmission of INVITE", 36);
            *(unsigned char *)(v13 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v13 + 17) = 0;
            *(unsigned char *)(v12 + 368) = 0;
          }
        }
        else
        {
          uint64_t v8 = v31;
          if (v31)
          {
            uint64_t v9 = *(SipDialog **)(*(void *)&v7 + 248);
            uint64_t v10 = *(void *)(*(void *)&v7 + 256);
            if (v10) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
            }
            v28[0] = v8;
            v28[1] = (uint64_t)v32;
            if (v32) {
              atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipDialog::cancelInviteRequest(v9, v28, *(SipHeader **)(*(void *)&v7 + 1584));
          }
          uint64_t v14 = (*(uint64_t (**)(int8x8_t))(**(void **)&v7 + 64))(v7);
          (*(void (**)(int8x8_t, uint64_t))(**(void **)&v7 + 16))(v7, v14);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"no client INVITE transaction to cancel, going right to terminated state", 71);
          *(unsigned char *)(v14 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v14 + 17) = 0;
          uint64_t v15 = (*(uint64_t (**)(int8x8_t *))(*(void *)this + 32))(this);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 32))(v15, 13);
        }
        int8x8_t v17 = this[24];
        uint64_t v16 = (std::__shared_weak_count *)this[25];
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v18 = *(void *)(*(void *)&v7 + 248);
        if (v18 && (uint64_t v19 = *(void *)(v18 + 216)) != 0) {
          uint64_t v20 = *(SipUserAgent **)(v19 + 136);
        }
        else {
          uint64_t v20 = 0;
        }
        if (*(_DWORD *)(SipUserAgent::config(v20) + 600))
        {
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          int v36 = 0;
          uint64_t v21 = operator new(0x20uLL);
          *uint64_t v21 = &unk_1F20C0300;
          v21[1] = this;
          v21[2] = v17;
          v21[3] = v16;
          int v36 = v21;
          uint64_t v22 = *(void *)(*(void *)&v7 + 248);
          if (v22 && (uint64_t v23 = *(void *)(v22 + 216)) != 0) {
            uint64_t v24 = *(SipUserAgent **)(v23 + 136);
          }
          else {
            uint64_t v24 = 0;
          }
          SipUserAgent::config(v24);
          SipTimerContainer::startTimer(this + 3, (uint64_t)&kWaitingForCancelResponseTimerName);
          std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v35);
        }
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v34 = 0;
        uint64_t v25 = operator new(0x20uLL);
        *uint64_t v25 = &unk_1F20C0300;
        v25[1] = this;
        uint64_t v25[2] = v17;
        v25[3] = v16;
        uint64_t v34 = v25;
        SipSessionInterface::stack(*(std::__shared_weak_count **)&v7, &v29);
        uint64_t v26 = (ImsPrefs *)SipStack::prefs(v29);
        WPSCSFBDelayTimeoutKey = (void **)ImsPrefs::getWPSCSFBDelayTimeoutKey(v26);
        ImsPrefs::intValue(v26, WPSCSFBDelayTimeoutKey);
        SipTimerContainer::startTimer(this + 3, (uint64_t)"WPSCSFBDelayTimer");
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v33);
        if (v16)
        {
          std::__shared_weak_count::__release_weak(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C52FB7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  ImsResult::~ImsResult((ImsResult *)&a11);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void SipSessionClientWPSCanceledState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = a2[23];
  size_t v4 = *((void *)a2 + 1);
  if ((v3 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = qword_1EBBDB9F8;
  if (byte_1EBBDBA07 >= 0) {
    uint64_t v6 = byte_1EBBDBA07;
  }
  if (v5 != v6) {
    goto LABEL_16;
  }
  if (byte_1EBBDBA07 >= 0) {
    int8x8_t v7 = &kWaitingForCancelResponseTimerName;
  }
  else {
    int8x8_t v7 = (uint64_t *)kWaitingForCancelResponseTimerName;
  }
  if ((v3 & 0x80) != 0)
  {
    uint64_t v11 = *(const void **)a2;
    if (memcmp(*(const void **)a2, v7, v4))
    {
      if (v4 != 17) {
        return;
      }
LABEL_28:
      if (memcmp(v11, "WPSCSFBDelayTimer", v4)) {
        return;
      }
      goto LABEL_30;
    }
LABEL_26:
    uint64_t v12 = 8;
LABEL_31:
    SipSessionClientCanceledState::terminateSession(a1, v12);
    return;
  }
  if (!a2[23]) {
    goto LABEL_26;
  }
  uint64_t v8 = a2;
  uint64_t v9 = a2[23];
  while (*v8 == *(unsigned __int8 *)v7)
  {
    ++v8;
    int8x8_t v7 = (uint64_t *)((char *)v7 + 1);
    if (!--v9) {
      goto LABEL_26;
    }
  }
LABEL_16:
  if (v5 != 17) {
    return;
  }
  if ((v3 & 0x80) != 0)
  {
    uint64_t v11 = *(const void **)a2;
    goto LABEL_28;
  }
  if (!a2[23])
  {
LABEL_30:
    uint64_t v12 = 13;
    goto LABEL_31;
  }
  uint64_t v10 = "WPSCSFBDelayTimer";
  while (*a2 == *(unsigned __int8 *)v10)
  {
    ++a2;
    ++v10;
    if (!--v3) {
      goto LABEL_30;
    }
  }
}

void SipSessionClientWPSCanceledState::handleResponse(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*a3 + 296) + 112))(*(void *)(*a3 + 296));
  uint64_t v7 = v6[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = v6[23];
  }
  else {
    uint64_t v8 = *((void *)v6 + 1);
  }
  if (v8 != 6) {
    return;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v6, "INVITE", *((void *)v6 + 1))) {
      return;
    }
    goto LABEL_12;
  }
  if (!v6[23])
  {
LABEL_12:
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 216);
    if (v10)
    {
      uint64_t v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = *(void *)(a1 + 208);
        if (v13)
        {
          unsigned int v14 = *(_DWORD *)(a2 + 88);
          if (v14 - 100 > 0x63)
          {
            if (v14 >= 0x12C)
            {
              uint64_t v19 = (*(uint64_t (**)(void))(*(void *)v13 + 64))(*(void *)(a1 + 208));
              (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v19);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"recieved error response to cancel while in WPS cleanup state - ending all other calls in preparation for CSFB", 109);
              *(unsigned char *)(v19 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v19 + 17) = 0;
              uint64_t v20 = *(std::__shared_weak_count **)(v13 + 784);
              if (v20)
              {
                uint64_t v21 = *(BambiCall **)(v13 + 776);
                atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                uint64_t v22 = std::__shared_weak_count::lock(v20);
                std::__shared_weak_count::__release_weak(v20);
                if (v22)
                {
                  if (v21)
                  {
                    uint64_t v23 = BambiCall::bambiClient(v21);
                    std::string::basic_string[abi:ne180100]<0>(&__p, "EstablishingAnotherCall");
                    uint64_t v27 = 0;
                    uint64_t v28 = 0;
                    uint64_t v24 = (std::__shared_weak_count *)*((void *)v21 + 46);
                    if (v24)
                    {
                      uint64_t v25 = std::__shared_weak_count::lock(v24);
                      uint64_t v28 = v25;
                      if (v25) {
                        uint64_t v27 = *((void *)v21 + 45);
                      }
                    }
                    else
                    {
                      uint64_t v25 = 0;
                    }
                    v26[0] = v21;
                    v26[1] = (BambiCall *)v22;
                    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
                    BambiClient::endOtherCalls(v23, (uint64_t)&__p, &v27, v26);
                    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
                    if (v25) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
                    }
                    if (v31 < 0) {
                      operator delete(__p);
                    }
                  }
                  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
                }
              }
            }
          }
          else if (!*(unsigned char *)(a1 + 224))
          {
            uint64_t v15 = (*(uint64_t (**)(void))(*(void *)v13 + 64))(*(void *)(a1 + 208));
            (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v15);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"received provisional response to INVITE.  Sending pending CANCEL request.", 73);
            *(unsigned char *)(v15 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v15 + 17) = 0;
            uint64_t v16 = *(SipDialog **)(v13 + 248);
            uint64_t v17 = *(void *)(v13 + 256);
            if (v17) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v18 = a3[1];
            v29[0] = *a3;
            v29[1] = v18;
            if (v18) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
            }
            SipDialog::cancelInviteRequest(v16, v29, *(SipHeader **)(v13 + 1584));
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
    return;
  }
  uint64_t v9 = "INVITE";
  while (*v6 == *(unsigned __int8 *)v9)
  {
    ++v6;
    ++v9;
    if (!--v7) {
      goto LABEL_12;
    }
  }
}

void sub_1C52FBD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void SipSessionClientWPSNetworkTerminatedState::enterState(int8x8_t *this)
{
  v23[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)this[27];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      size_t v4 = v3;
      uint64_t v5 = (std::__shared_weak_count *)this[26];
      if (v5)
      {
        int8x8_t v7 = this[24];
        uint64_t v6 = (std::__shared_weak_count *)this[25];
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = operator new(0x20uLL);
        void *v8 = &unk_1F20C0380;
        v8[1] = this;
        v8[2] = v7;
        v8[3] = v6;
        v23[3] = v8;
        SipSessionInterface::stack(v5, &__p);
        uint64_t v9 = (ImsPrefs *)SipStack::prefs((SipStack *)__p);
        WPSCSFBDelayTimeoutKey = (void **)ImsPrefs::getWPSCSFBDelayTimeoutKey(v9);
        ImsPrefs::intValue(v9, WPSCSFBDelayTimeoutKey);
        SipTimerContainer::startTimer(this + 3, (uint64_t)"WPSCSFBDelayTimer");
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v23);
        shared_weak_owners = (std::__shared_weak_count *)v5[32].__shared_weak_owners_;
        if (shared_weak_owners)
        {
          shared_owners = (BambiCall *)v5[32].__shared_owners_;
          atomic_fetch_add_explicit(&shared_weak_owners->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v13 = std::__shared_weak_count::lock(shared_weak_owners);
          std::__shared_weak_count::__release_weak(shared_weak_owners);
          if (v13)
          {
            if (shared_owners)
            {
              uint64_t v14 = BambiCall::bambiClient(shared_owners);
              std::string::basic_string[abi:ne180100]<0>(&__p, "EstablishingAnotherCall");
              uint64_t v18 = 0;
              uint64_t v19 = 0;
              uint64_t v15 = (std::__shared_weak_count *)*((void *)shared_owners + 46);
              if (v15)
              {
                uint64_t v16 = std::__shared_weak_count::lock(v15);
                uint64_t v19 = v16;
                if (v16) {
                  uint64_t v18 = *((void *)shared_owners + 45);
                }
              }
              else
              {
                uint64_t v16 = 0;
              }
              v17[0] = shared_owners;
              v17[1] = (BambiCall *)v13;
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
              BambiClient::endOtherCalls(v14, (uint64_t)&__p, &v18, v17);
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
              if (v16) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v16);
              }
              if (v22 < 0) {
                operator delete(__p);
              }
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
        }
        if (v6)
        {
          std::__shared_weak_count::__release_weak(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C52FC004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (v20)
  {
    std::__shared_weak_count::__release_weak(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  _Unwind_Resume(a1);
}

void SipSessionClientWPSNetworkTerminatedState::handleTimer(SipSessionState *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a2[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a2[23];
  }
  else {
    uint64_t v3 = *((void *)a2 + 1);
  }
  if (v3 != 17) {
    return;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "WPSCSFBDelayTimer", *((void *)a2 + 1))) {
      return;
    }
LABEL_12:
    uint64_t v6 = (std::__shared_weak_count *)*((void *)a1 + 27);
    if (!v6) {
      return;
    }
    int8x8_t v7 = std::__shared_weak_count::lock(v6);
    if (!v7) {
      return;
    }
    uint64_t v8 = v7;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)a1 + 26);
    if (!v9)
    {
LABEL_31:
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      return;
    }
    shared_weak_owners = (std::__shared_weak_count *)v9[32].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      uint64_t shared_owners = v9[32].__shared_owners_;
      atomic_fetch_add_explicit(&shared_weak_owners->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = std::__shared_weak_count::lock(shared_weak_owners);
      if (!v12) {
        uint64_t shared_owners = 0;
      }
      std::__shared_weak_count::__release_weak(shared_weak_owners);
      if (v9[66].__shared_weak_owners_ && shared_owners)
      {
        bzero(v19, 0x250uLL);
        uint64_t v17 = shared_owners;
        uint64_t v18 = v12;
        if (v12) {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BambiCallSessionTerminatedEvent::BambiCallSessionTerminatedEvent(v19, &v17);
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        uint64_t v13 = (const SipResponse *)v9[66].__shared_weak_owners_;
        SipSessionInterface::stack(v9, &v15);
        BambiCallSessionTerminationBaseEvent::setReasonFromIncomingResponse((BambiCallSessionTerminationBaseEvent *)v19, v13, (const BambiCallIncomingTerminationReasons *)(v15 + 2416));
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        SipSessionState::terminateSessionWithEvent(a1, (BambiCallEvent *)v19);
        BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)v19);
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    uint64_t v14 = (*(uint64_t (**)(SipSessionState *))(*(void *)a1 + 32))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 32))(v14, 13);
LABEL_29:
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    goto LABEL_31;
  }
  if (!a2[23]) {
    goto LABEL_12;
  }
  uint64_t v5 = "WPSCSFBDelayTimer";
  while (*a2 == *(unsigned __int8 *)v5)
  {
    ++a2;
    ++v5;
    if (!--v2) {
      goto LABEL_12;
    }
  }
}

void sub_1C52FC280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)va);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  _Unwind_Resume(a1);
}

void SipSessionClientUnconfirmedState::~SipSessionClientUnconfirmedState(SipSessionClientUnconfirmedState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionState::id(SipSessionState *this)
{
  return 0;
}

void non-virtual thunk to'SipSessionClientUnconfirmedState::~SipSessionClientUnconfirmedState(SipSessionClientUnconfirmedState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionClientUnconfirmedState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipSessionClientInviteState::~SipSessionClientInviteState(SipSessionClientInviteState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionClientInviteState::id(SipSessionClientInviteState *this)
{
  return 1;
}

void non-virtual thunk to'SipSessionClientInviteState::~SipSessionClientInviteState(SipSessionClientInviteState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionClientInviteState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipSessionClientReceivedTryingResponseState::~SipSessionClientReceivedTryingResponseState(SipSessionClientReceivedTryingResponseState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionClientReceivedTryingResponseState::id(SipSessionClientReceivedTryingResponseState *this)
{
  return 2;
}

void non-virtual thunk to'SipSessionClientReceivedTryingResponseState::~SipSessionClientReceivedTryingResponseState(SipSessionClientReceivedTryingResponseState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionClientReceivedTryingResponseState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipSessionClientCanceledState::~SipSessionClientCanceledState(SipSessionClientCanceledState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionClientCanceledState::id(SipSessionClientCanceledState *this)
{
  return 8;
}

void non-virtual thunk to'SipSessionClientCanceledState::~SipSessionClientCanceledState(SipSessionClientCanceledState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionClientCanceledState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipSessionClientWPSNetworkTerminatedState::~SipSessionClientWPSNetworkTerminatedState(SipSessionClientWPSNetworkTerminatedState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionClientWPSNetworkTerminatedState::id(SipSessionClientWPSNetworkTerminatedState *this)
{
  return 15;
}

uint64_t SipSessionClientWPSNetworkTerminatedState::isConfirmed(SipSessionClientWPSNetworkTerminatedState *this)
{
  return 0;
}

void non-virtual thunk to'SipSessionClientWPSNetworkTerminatedState::~SipSessionClientWPSNetworkTerminatedState(SipSessionClientWPSNetworkTerminatedState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionClientWPSNetworkTerminatedState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void SipSessionClientWPSCanceledState::~SipSessionClientWPSCanceledState(SipSessionClientWPSCanceledState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionClientWPSCanceledState::id(SipSessionClientWPSCanceledState *this)
{
  return 14;
}

void non-virtual thunk to'SipSessionClientWPSCanceledState::~SipSessionClientWPSCanceledState(SipSessionClientWPSCanceledState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionClientWPSCanceledState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void *BambiCallSessionTerminatedEvent::BambiCallSessionTerminatedEvent(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v5 = *a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)a1, 15, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  *a1 = &unk_1F20B85E8;
  return a1;
}

void sub_1C52FC760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent(uint64_t a1, int a2, uint64_t *a3)
{
  size_t v4 = (std::__shared_weak_count *)a3[1];
  v6[0] = *a3;
  v6[1] = (uint64_t)v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    BambiCallEvent::BambiCallEvent(a1, a2, v6);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    BambiCallEvent::BambiCallEvent(a1, a2, v6);
  }
  *(void *)a1 = &unk_1F20C3500;
  *(_DWORD *)(a1 + 40) = 10;
  *(void *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0x10000;
  *(unsigned char *)(a1 + 148) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  SipUri::SipUri((SipUri *)(a1 + 184));
  return a1;
}

void sub_1C52FC85C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*(void **)(v1 + 88));
  }
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  *(void *)uint64_t v1 = &unk_1F20B8640;
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 24);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallEmergencySessionRequiredEvent::clone(BambiCallEmergencySessionRequiredEvent *this)
{
}

void sub_1C52FC9B4(_Unwind_Exception *a1)
{
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent(v1);
  MEMORY[0x1C878E320](v1, 0x10B3C40FA0B94BELL);
  _Unwind_Resume(a1);
}

uint64_t SipTimer::log(uint64_t a1, uint64_t a2)
{
  return a2;
}

std::string *SipTimer::loggableName@<X0>(SipTimer *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 8));
}

void SipSessionState::~SipSessionState(SipSessionState *this)
{
  *(void *)this = &unk_1F20E0E58;
  *((void *)this + 1) = &unk_1F20E0F00;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 25);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  SipState::~SipState(this);
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C0200;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C0200;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20C0200;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C0200;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int8x8_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 152))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C52FCD84(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C0280;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C0280;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20C0280;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C0280;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int8x8_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 152))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C52FD02C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C0300;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C0300;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20C0300;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C0300;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int8x8_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 152))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C52FD2D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C0380;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C0380;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20C0380;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C0380;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      int8x8_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 152))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C52FD57C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_SipSessionClientStates_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&kWaitingForCancelResponseTimerName, "WaitingForCancelResponse");
  v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &kWaitingForCancelResponseTimerName, &dword_1C51D1000);
}

void SipPAssertedIdentityHeader::~SipPAssertedIdentityHeader(void **this)
{
  *this = &unk_1F20BE9C0;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20BE9C0;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipPAssertedIdentityHeader::clone(SipPAssertedIdentityHeader *this)
{
}

void sub_1C52FD75C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40B808BD88);
  _Unwind_Resume(a1);
}

uint64_t SipStringParameterHeader::SipStringParameterHeader(uint64_t a1, const std::string *a2, const std::string *a3)
{
  uint64_t v5 = SipHeader::SipHeader(a1, a2);
  *(void *)(v5 + 88) = 0;
  *(void *)(v5 + 80) = 0;
  *(void *)(v5 + 64) = &unk_1F20B37B0;
  *(void *)(v5 + 72) = v5 + 80;
  *(_WORD *)(v5 + 96) = 256;
  *(void *)uint64_t v5 = &unk_1F20C0A78;
  *(void *)(v5 + 104) = 0;
  *(void *)(v5 + 112) = 0;
  *(void *)(v5 + 120) = 0;
  *(_DWORD *)(v5 + 128) = 0;
  std::string::operator=((std::string *)(v5 + 104), a3);
  return a1;
}

void sub_1C52FD820(_Unwind_Exception *a1)
{
  if (v1[127] < 0) {
    operator delete(*v2);
  }
  SipParameterHeader::~SipParameterHeader((SipParameterHeader *)v1);
  _Unwind_Resume(a1);
}

void SipParameterHeader::~SipParameterHeader(SipParameterHeader *this)
{
  *(void *)this = &unk_1F20DEB80;
  *((void *)this + 8) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((void **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

void SipStringParameterHeader::SipStringParameterHeader(SipStringParameterHeader *this, const SipStringParameterHeader *a2)
{
  SipParameterHeader::SipParameterHeader(this, a2);
  void *v4 = &unk_1F20C0A78;
  uint64_t v5 = (std::string *)(v4 + 13);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 104);
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 15);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_DWORD *)this + 32) = 0;
}

void sub_1C52FD934(_Unwind_Exception *a1)
{
  SipParameterHeader::~SipParameterHeader(v1);
  _Unwind_Resume(a1);
}

uint64_t SipStringParameterHeader::encodeValue(SipStringParameterHeader *this, ImsOutStream *a2)
{
  if (!ImsOutStream::isRedacting(a2) || (int v4 = *((_DWORD *)this + 32)) == 0)
  {
    (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 104);
    return 1;
  }
  if (v4 == 1)
  {
    ObfuscatedString::ObfuscatedString((uint64_t)&v6, (const std::string *)((char *)this + 104));
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 56))(a2, &v6);
    if (v8 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    if (v4 != 2) {
      return 1;
    }
    LoggableString::LoggableString(&v6, (const std::string *)((char *)this + 104));
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v6);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1C52FDA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t SipStringParameterHeader::valueAsString(uint64_t a1, std::string *this)
{
  std::string::operator=(this, (const std::string *)(a1 + 104));
  return 1;
}

uint64_t SipStringParameterHeader::setValueFromString(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 104), a2);
  return 1;
}

uint64_t IMSSecurityAssociation::IMSSecurityAssociation(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "ipsec");
  ImsLogContainer::ImsLogContainer(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F20C0B18;
  *(void *)(a1 + 104) = a2;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_WORD *)(a1 + 128) = 0;
  uint64_t v4 = *(void *)(a2 + 16);
  int v5 = *(_DWORD *)(v4 + 128);
  *(_DWORD *)(v4 + 128) = v5 + 1;
  *(_DWORD *)(a1 + 120) = v5;
  return a1;
}

void sub_1C52FDB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSSecurityAssociation::~IMSSecurityAssociation(void **this)
{
  *this = &unk_1F20C0B18;
  uint64_t v2 = ImsLogContainer::debugStream((ImsLogContainer *)this);
  (*((void (**)(void **, uint64_t))*this + 2))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"deleting SA with spi ", 21);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (*((_DWORD *)this + 28))
  {
    if (!IPSecDBDeleteSA(*(void *)(*((void *)this[13] + 2) + 120)))
    {
      uint64_t v3 = (*((uint64_t (**)(void **))*this + 7))(this);
      (*((void (**)(void **, uint64_t))*this + 2))(this, v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"delete SA failed for spi ", 25);
      *(unsigned char *)(v3 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v3 + 17) = 0;
    }
    *((_DWORD *)this + 28) = 0;
  }
  if (*((_DWORD *)this + 29))
  {
    if (!IPSecDBDeleteSA(*(void *)(*((void *)this[13] + 2) + 120)))
    {
      uint64_t v4 = (*((uint64_t (**)(void **))*this + 7))(this);
      (*((void (**)(void **, uint64_t))*this + 2))(this, v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"delete policy failed for spi ", 29);
      *(unsigned char *)(v4 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
    }
    *((_DWORD *)this + 29) = 0;
  }
  *this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  IMSSecurityAssociation::~IMSSecurityAssociation(this);
  JUMPOUT(0x1C878E320);
}

void IMSSecurityAssociation::logPrefix(IMSSecurityAssociation *this, ImsOutStream *a2)
{
  uint64_t v3 = 0;
  memset(v2, 0, sizeof(v2));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v2);
}

void sub_1C52FE24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void IMSSecurityAssociation::fillDictionaryWithAddress(const void *a1)
{
  uint64_t v2 = &unk_1F20E38B0;
  uint64_t v3 = a1;
  if (a1) {
    CFRetain(a1);
  }
  uint64_t v2 = &unk_1F20B35C8;
  IpAddress::asString(&__p);
}

void sub_1C52FE414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)&a16);
  _Unwind_Resume(a1);
}

double IMSSecurityAssociation::fillDictionaryWithCommonFields(IMSSecurityAssociation *this, __CFDictionary *a2, CFMutableDictionaryRef theDict, uint64_t a4)
{
  int v5 = a2;
  if (!a4)
  {
    uint64_t v23 = @"ESP";
    uint64_t v21 = @"Transport";
    goto LABEL_83;
  }
  uint64_t v8 = a4 + 40;
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a4 + 40, (void **)&SipIPSec3gppSecurityMechanism::kParameterMode);
  uint64_t v10 = (void **)(a4 + 48);
  uint64_t v11 = (long long *)(v9 + 7);
  if ((void **)(a4 + 48) == v9) {
    uint64_t v11 = &ims::kEmptyString;
  }
  uint64_t v12 = *((unsigned __int8 *)v11 + 23);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *((void *)v11 + 1);
  }
  if (v12) {
    uint64_t v13 = (const char *)v11;
  }
  else {
    uint64_t v13 = "trans";
  }
  uint64_t v14 = *((unsigned __int8 *)v13 + 23);
  size_t v15 = *((void *)v13 + 1);
  if ((v14 & 0x80u) == 0) {
    size_t v16 = *((unsigned __int8 *)v13 + 23);
  }
  else {
    size_t v16 = *((void *)v13 + 1);
  }
  size_t v17 = v16;
  long long v58 = theDict;
  if (v16 == 3)
  {
    if ((v14 & 0x80) == 0)
    {
      if (v13[23])
      {
        uint64_t v18 = &SipIPSec3gppSecurityMechanism::kModeTunneling;
        uint64_t v19 = v13;
        uint64_t v20 = *((unsigned __int8 *)v13 + 23);
        uint64_t v21 = @"Tunnel";
        while (*(unsigned __int8 *)v19 == *v18)
        {
          ++v19;
          ++v18;
          if (!--v20)
          {
            int v22 = 0;
            goto LABEL_33;
          }
        }
        goto LABEL_22;
      }
LABEL_29:
      int v22 = 0;
      uint64_t v21 = @"Tunnel";
      goto LABEL_33;
    }
    int v24 = memcmp(*(const void **)v13, &SipIPSec3gppSecurityMechanism::kModeTunneling, v15);
    size_t v17 = v15;
    if (!v24) {
      goto LABEL_29;
    }
  }
  if (!v17) {
    goto LABEL_32;
  }
LABEL_22:
  if (v16 != 5) {
    goto LABEL_31;
  }
  if ((v14 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v13, "trans", v15)) {
      goto LABEL_32;
    }
LABEL_31:
    uint64_t v21 = 0;
    int v22 = 1;
    goto LABEL_33;
  }
  if (v14)
  {
    uint64_t v25 = "trans";
    while (*(unsigned __int8 *)v13 == *(unsigned __int8 *)v25)
    {
      ++v13;
      ++v25;
      if (!--v14) {
        goto LABEL_32;
      }
    }
    goto LABEL_31;
  }
LABEL_32:
  int v22 = 0;
  uint64_t v21 = @"Transport";
LABEL_33:
  uint64_t v26 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v8, (void **)"prot");
  uint64_t v27 = (long long *)(v26 + 7);
  if (v10 == v26) {
    uint64_t v27 = &ims::kEmptyString;
  }
  uint64_t v28 = *((unsigned __int8 *)v27 + 23);
  if ((v28 & 0x80u) != 0) {
    uint64_t v28 = *((void *)v27 + 1);
  }
  if (v28) {
    uint64_t v29 = (char *)v27;
  }
  else {
    uint64_t v29 = &SipIPSec3gppSecurityMechanism::kProtocolESP;
  }
  uint64_t v30 = v29[23];
  size_t v31 = *((void *)v29 + 1);
  if ((v30 & 0x80u) == 0) {
    size_t v32 = v29[23];
  }
  else {
    size_t v32 = *((void *)v29 + 1);
  }
  size_t v33 = v32;
  if (v32 == 2)
  {
    if ((v30 & 0x80) == 0)
    {
      if (v29[23])
      {
        uint64_t v34 = &SipIPSec3gppSecurityMechanism::kProtocolAH;
        std::string v35 = v29;
        uint64_t v36 = v29[23];
        uint64_t v23 = @"AH";
        do
        {
          if (*v35 != *v34) {
            goto LABEL_52;
          }
          ++v35;
          ++v34;
          --v36;
        }
        while (v36);
        LODWORD(v33) = 0;
LABEL_62:
        int v5 = a2;
        if (v22)
        {
LABEL_63:
          long long v63 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          long long v60 = &unk_1F20B2680;
          long long v61 = &_bambiDomain;
          int v62 = 1073741825;
          uint64_t v39 = ImsResult::operator<<<char [14]>((uint64_t)&v60, "Unknown mode ");
          long long v40 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v8, (void **)&SipIPSec3gppSecurityMechanism::kParameterMode);
          uint64_t v41 = (long long *)(v40 + 7);
          if (v10 == v40) {
            uint64_t v41 = &ims::kEmptyString;
          }
          uint64_t v42 = *((unsigned __int8 *)v41 + 23);
          if ((v42 & 0x80u) != 0) {
            uint64_t v42 = *((void *)v41 + 1);
          }
          if (v42) {
            long long v43 = (char *)v41;
          }
          else {
            long long v43 = "trans";
          }
LABEL_82:
          char v48 = (const std::string *)ImsResult::operator<<<std::string>(v39, (uint64_t)v43);
          ImsResult::ImsResult(this, v48);
          ImsResult::~ImsResult((ImsResult *)&v60);
          return result;
        }
        goto LABEL_74;
      }
LABEL_61:
      LODWORD(v33) = 0;
      uint64_t v23 = @"AH";
      goto LABEL_62;
    }
    int v37 = memcmp(*(const void **)v29, &SipIPSec3gppSecurityMechanism::kProtocolAH, *((void *)v29 + 1));
    size_t v33 = v31;
    if (!v37) {
      goto LABEL_61;
    }
  }
  if (!v33)
  {
    uint64_t v23 = @"ESP";
    goto LABEL_62;
  }
LABEL_52:
  if (v32 != 3)
  {
    uint64_t v23 = 0;
    LODWORD(v33) = 1;
    goto LABEL_62;
  }
  if ((v30 & 0x80) != 0)
  {
    int v44 = memcmp(*(const void **)v29, &SipIPSec3gppSecurityMechanism::kProtocolESP, v31);
    int v5 = a2;
    if (v44) {
      goto LABEL_71;
    }
  }
  else
  {
    int v5 = a2;
    if (v30)
    {
      uint64_t v38 = &SipIPSec3gppSecurityMechanism::kProtocolESP;
      while (*v29 == *v38)
      {
        ++v29;
        ++v38;
        if (!--v30) {
          goto LABEL_73;
        }
      }
LABEL_71:
      uint64_t v23 = 0;
      LODWORD(v33) = 1;
      if (v22) {
        goto LABEL_63;
      }
      goto LABEL_74;
    }
  }
LABEL_73:
  LODWORD(v33) = 0;
  uint64_t v23 = @"ESP";
  if (v22) {
    goto LABEL_63;
  }
LABEL_74:
  theDict = v58;
  if (v33)
  {
    long long v63 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v60 = &unk_1F20B2680;
    long long v61 = &_bambiDomain;
    int v62 = 1073741825;
    uint64_t v39 = ImsResult::operator<<<char [18]>((uint64_t)&v60, "Unknown protocol ");
    uint64_t v45 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v8, (void **)"prot");
    uint64_t v46 = (long long *)(v45 + 7);
    if (v10 == v45) {
      uint64_t v46 = &ims::kEmptyString;
    }
    uint64_t v47 = *((unsigned __int8 *)v46 + 23);
    if ((v47 & 0x80u) != 0) {
      uint64_t v47 = *((void *)v46 + 1);
    }
    if (v47) {
      long long v43 = (char *)v46;
    }
    else {
      long long v43 = &SipIPSec3gppSecurityMechanism::kProtocolESP;
    }
    goto LABEL_82;
  }
LABEL_83:
  CFDictionarySetValue(theDict, @"Mode", v21);
  CFDictionarySetValue(theDict, @"IPSecProtocol", v23);
  v50 = (void *)*((void *)v5 + 13);
  uint64_t v52 = v50[3];
  long long v51 = (std::__shared_weak_count *)v50[4];
  if (v51)
  {
    atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    v50 = (void *)*((void *)v5 + 13);
    if (v52)
    {
      long long v53 = (uint64_t *)v50[4];
      long long v60 = (void *)v50[3];
      long long v61 = v53;
      if (v53) {
        atomic_fetch_add_explicit(v53 + 1, 1uLL, memory_order_relaxed);
      }
LABEL_89:
      IMSSecurityAssociation::fillDictionaryWithAddress(theDict);
    }
  }
  else if (v52)
  {
    long long v60 = (void *)v50[3];
    long long v61 = 0;
    goto LABEL_89;
  }
  uint64_t v55 = v50[5];
  long long v54 = (std::__shared_weak_count *)v50[6];
  if (v54)
  {
    atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
    if (v55)
    {
      uint64_t v56 = *((void *)v5 + 13);
      long long v57 = *(uint64_t **)(v56 + 48);
      long long v60 = *(void **)(v56 + 40);
      long long v61 = v57;
      if (v57) {
        atomic_fetch_add_explicit(v57 + 1, 1uLL, memory_order_relaxed);
      }
LABEL_96:
      IMSSecurityAssociation::fillDictionaryWithAddress(theDict);
    }
  }
  else if (v55)
  {
    long long v60 = (void *)v50[5];
    long long v61 = 0;
    goto LABEL_96;
  }
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = &unk_1F20B2680;
  *((void *)this + 1) = &_bambiDomain;
  *((_DWORD *)this + 4) = 0;
  return result;
}

void sub_1C52FEA34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if ((v12 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsResult::operator<<<char [14]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C52FEAF4(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [18]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C52FEB9C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void IMSSecurityAssociation::fillDictionaryWithUniqueId(IMSSecurityAssociation *this, CFTypeRef cf)
{
  v3[0] = &unk_1F20E38B0;
  v3[1] = cf;
  if (cf) {
    CFRetain(cf);
  }
  v3[0] = &unk_1F20B35C8;
  ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)v3, @"UniqueID", *((_DWORD *)this + 30));
  ims::CFType::~CFType((ims::CFType *)v3);
}

void sub_1C52FEC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void IMSSecurityAssociation::fillDictionaryWithTemporarySAFields(IMSSecurityAssociation *this, __CFDictionary *a2, __CFDictionary *a3, const SipIPSec3gppSecurityMechanism *a4, uint64_t a5)
{
  int v5 = (int)a4;
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  double v9 = IMSSecurityAssociation::fillDictionaryWithCommonFields((IMSSecurityAssociation *)&v13, a2, a3, a5);
  if (!(*(unsigned int (**)(void, void, double))(**((void **)&v13 + 1) + 24))(*((void *)&v13 + 1), v14, v9))
  {
    v12[0] = &unk_1F20E38B0;
    v12[1] = a3;
    if (a3) {
      CFRetain(a3);
    }
    v12[0] = &unk_1F20B35C8;
    ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)v12, @"LifeTimeinSeconds", 0);
    uint64_t v10 = *((void *)a2 + 13);
    if (!*(void *)(v10 + 192)) {
      goto LABEL_15;
    }
    if (*(char *)(v10 + 223) < 0)
    {
      if (!*(void *)(v10 + 208)) {
        goto LABEL_15;
      }
    }
    else if (!*(unsigned char *)(v10 + 223))
    {
      goto LABEL_15;
    }
    if (*(void *)(v10 + 224))
    {
      ims::CFMutableDictionary::setStringValue((ims::CFMutableDictionary *)v12, @"IPSecInterface", (char *)(v10 + 200));
      if (v5) {
        uint64_t v11 = @"InternalInterface";
      }
      else {
        uint64_t v11 = @"OutgoingInterface";
      }
      ims::CFMutableDictionary::setStringValue((ims::CFMutableDictionary *)v12, v11, (char *)(*((void *)a2 + 13) + 56));
      goto LABEL_16;
    }
LABEL_15:
    IMSSecurityAssociation::fillDictionaryWithUniqueId(a2, a3);
LABEL_16:
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(void *)this = &unk_1F20B2680;
    *((void *)this + 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 0;
    ims::CFType::~CFType((ims::CFType *)v12);
    goto LABEL_17;
  }
  ImsResult::ImsResult((uint64_t)this, (uint64_t)&v13);
LABEL_17:
  ImsResult::~ImsResult((ImsResult *)&v13);
}

void sub_1C52FEE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

void IMSSecurityAssociation::fillDictionaryWithPermanentSAFields(IMSSecurityAssociation *this, __CFDictionary *a2, __CFDictionary *a3, const SipIPSec3gppSecurityMechanism *a4, const unsigned __int8 (*a5)[16], unsigned __int8 (*a6)[16], void *a7)
{
  uint64_t v76 = 0;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  IMSSecurityAssociation::fillDictionaryWithTemporarySAFields((IMSSecurityAssociation *)&v72, a2, a3, a4, (uint64_t)a5);
  if ((*(uint64_t (**)(void, void))(**((void **)&v72 + 1) + 24))(*((void *)&v72 + 1), v73))goto LABEL_85; {
  long long v63 = a7;
  }
  long long v13 = &(*a5)[40];
  long long v14 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&(*a5)[40], (void **)&SipIPSec3gppSecurityMechanism::kParameterAlgorithm);
  long long v15 = (long long *)(v14 + 7);
  if (&(*a5)[48] == (const unsigned __int8 *)v14) {
    long long v15 = &ims::kEmptyString;
  }
  uint64_t v16 = *((unsigned __int8 *)v15 + 23);
  size_t v17 = *((void *)v15 + 1);
  if ((v16 & 0x80u) == 0) {
    uint64_t v18 = *((unsigned __int8 *)v15 + 23);
  }
  else {
    uint64_t v18 = *((void *)v15 + 1);
  }
  if (v18 == 13)
  {
    if ((v16 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v15, "hmac-sha-1-96", v17)) {
        goto LABEL_26;
      }
    }
    else if (*((unsigned char *)v15 + 23))
    {
      int v24 = "hmac-sha-1-96";
      while (*(unsigned __int8 *)v15 == *(unsigned __int8 *)v24)
      {
        long long v15 = (long long *)((char *)v15 + 1);
        ++v24;
        if (!--v16) {
          goto LABEL_27;
        }
      }
      goto LABEL_26;
    }
LABEL_27:
    BOOL v23 = 0;
    uint64_t v20 = @"SHA1-96";
    goto LABEL_29;
  }
  if (v18 != 11)
  {
LABEL_26:
    uint64_t v20 = 0;
    BOOL v23 = 1;
    goto LABEL_29;
  }
  if ((v16 & 0x80) != 0)
  {
    int v25 = memcmp(*(const void **)v15, "hmac-md5-96", v17);
    BOOL v23 = v25 != 0;
    if (v25) {
      uint64_t v20 = 0;
    }
    else {
      uint64_t v20 = @"MD5-96";
    }
  }
  else if (*((unsigned char *)v15 + 23))
  {
    uint64_t v19 = "hmac-md5-96";
    uint64_t v20 = @"MD5-96";
    while (1)
    {
      int v21 = *(unsigned __int8 *)v15;
      int v22 = *(unsigned __int8 *)v19;
      BOOL v23 = v21 != v22;
      if (v21 != v22) {
        break;
      }
      long long v15 = (long long *)((char *)v15 + 1);
      ++v19;
      if (!--v16) {
        goto LABEL_29;
      }
    }
    uint64_t v20 = 0;
  }
  else
  {
    BOOL v23 = 0;
    uint64_t v20 = @"MD5-96";
  }
LABEL_29:
  value = v20;
  uint64_t v26 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&(*a5)[40], (void **)"ealg");
  long long v65 = &(*a5)[48];
  long long v66 = a2;
  uint64_t v27 = (long long *)(v26 + 7);
  if (&(*a5)[48] == (const unsigned __int8 *)v26) {
    uint64_t v27 = &ims::kEmptyString;
  }
  uint64_t v28 = *((unsigned __int8 *)v27 + 23);
  if ((v28 & 0x80u) != 0) {
    uint64_t v28 = *((void *)v27 + 1);
  }
  if (v28) {
    uint64_t v29 = (const char *)v27;
  }
  else {
    uint64_t v29 = "null";
  }
  uint64_t v30 = *((unsigned __int8 *)v29 + 23);
  size_t v31 = *((void *)v29 + 1);
  if ((v30 & 0x80u) == 0) {
    size_t v32 = *((unsigned __int8 *)v29 + 23);
  }
  else {
    size_t v32 = *((void *)v29 + 1);
  }
  if (v32 == 12)
  {
    if ((v30 & 0x80) != 0)
    {
      int v44 = memcmp(*(const void **)v29, "des-ede3-cbc", *((void *)v29 + 1));
      size_t v33 = v31;
      if (v44)
      {
LABEL_57:
        if (!v33)
        {
LABEL_70:
          uint64_t v42 = @"NULL";
          char v41 = 1;
          goto LABEL_71;
        }
LABEL_58:
        if (v32 == 4)
        {
          if ((v30 & 0x80) == 0)
          {
            if (v30)
            {
              uint64_t v45 = "null";
              while (*(unsigned __int8 *)v29 == *(unsigned __int8 *)v45)
              {
                ++v29;
                ++v45;
                if (!--v30) {
                  goto LABEL_69;
                }
              }
              goto LABEL_68;
            }
            goto LABEL_69;
          }
          if (!memcmp(*(const void **)v29, "null", v31))
          {
LABEL_69:
            LODWORD(v33) = 0;
            goto LABEL_70;
          }
        }
LABEL_68:
        char v41 = 0;
        uint64_t v42 = 0;
        LODWORD(v33) = 1;
        goto LABEL_71;
      }
    }
    else if (v29[23])
    {
      uint64_t v38 = "des-ede3-cbc";
      uint64_t v39 = v29;
      uint64_t v40 = *((unsigned __int8 *)v29 + 23);
      int v37 = @"3DES";
      while (*(unsigned __int8 *)v39 == *(unsigned __int8 *)v38)
      {
        ++v39;
        ++v38;
        if (!--v40)
        {
LABEL_52:
          LODWORD(v33) = 0;
          char v41 = 0;
          uint64_t v42 = v37;
          goto LABEL_71;
        }
      }
      goto LABEL_58;
    }
    LODWORD(v33) = 0;
    char v41 = 0;
    uint64_t v42 = @"3DES";
    goto LABEL_71;
  }
  size_t v33 = v32;
  if (v32 != 7) {
    goto LABEL_57;
  }
  if ((v30 & 0x80) == 0)
  {
    if (!v29[23])
    {
      LODWORD(v33) = 0;
      char v41 = 0;
      uint64_t v42 = @"AES-128";
      goto LABEL_71;
    }
    uint64_t v34 = "aes-cbc";
    std::string v35 = v29;
    uint64_t v36 = *((unsigned __int8 *)v29 + 23);
    int v37 = @"AES-128";
    while (*(unsigned __int8 *)v35 == *(unsigned __int8 *)v34)
    {
      ++v35;
      ++v34;
      if (!--v36) {
        goto LABEL_52;
      }
    }
    goto LABEL_58;
  }
  int v43 = memcmp(*(const void **)v29, "aes-cbc", *((void *)v29 + 1));
  char v41 = 0;
  LODWORD(v33) = v43 != 0;
  if (v43) {
    uint64_t v42 = 0;
  }
  else {
    uint64_t v42 = @"AES-128";
  }
LABEL_71:
  if (v23)
  {
    memset(&v89[3], 0, 48);
    v89[0] = &unk_1F20B2680;
    v89[1] = &_bambiDomain;
    LODWORD(v89[2]) = 1073741825;
    uint64_t v46 = ImsResult::operator<<<char [24]>((uint64_t)v89, "Unknown auth algorithm ");
    uint64_t v47 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v13, (void **)&SipIPSec3gppSecurityMechanism::kParameterAlgorithm);
    if (v65 == (const unsigned __int8 *)v47) {
      char v48 = &ims::kEmptyString;
    }
    else {
      char v48 = (long long *)(v47 + 7);
    }
LABEL_83:
    uint64_t v52 = (const std::string *)ImsResult::operator<<<std::string>(v46, (uint64_t)v48);
    ImsResult::ImsResult((ImsResult *)v67, v52);
    ImsResult::~ImsResult((ImsResult *)v89);
    goto LABEL_84;
  }
  if (v33)
  {
    memset(&v89[3], 0, 48);
    v89[0] = &unk_1F20B2680;
    v89[1] = &_bambiDomain;
    LODWORD(v89[2]) = 1073741825;
    uint64_t v46 = ImsResult::operator<<<char [30]>((uint64_t)v89, "Unknown encryption algorithm ");
    uint64_t v49 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v13, (void **)"ealg");
    v50 = (long long *)(v49 + 7);
    if (v65 == (const unsigned __int8 *)v49) {
      v50 = &ims::kEmptyString;
    }
    uint64_t v51 = *((unsigned __int8 *)v50 + 23);
    if ((v51 & 0x80u) != 0) {
      uint64_t v51 = *((void *)v50 + 1);
    }
    if (v51) {
      char v48 = v50;
    }
    else {
      char v48 = (long long *)"null";
    }
    goto LABEL_83;
  }
  v86 = 0;
  int v87 = 0;
  uint64_t v88 = 0;
  if (!a6)
  {
    std::string::basic_string[abi:ne180100]<0>(v89, "ipsec");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v53 = ims::debug((uint64_t)v89, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v53 + 8), (uint64_t)"no IK provided.  Using dummy auth key.", 38);
    *(unsigned char *)(v53 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v53 + 17) = 0;
    if (v78 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v89[2]) < 0) {
      operator delete(v89[0]);
    }
    a6 = (unsigned __int8 (*)[16])&_MergedGlobals;
  }
  memset(v89, 0, 72);
  double v54 = SipIPSec3gppSecurityMechanism::fillIPSecAuthKey((uint64_t)a5, a6, (unint64_t *)&v86, (uint64_t)v89);
  if ((*(unsigned int (**)(void *, void, double))(*(void *)v89[1] + 24))(v89[1], LODWORD(v89[2]), v54))
  {
    ImsResult::ImsResult((uint64_t)v67, (uint64_t)v89);
  }
  else
  {
    v85[0] = &unk_1F20E38B0;
    v85[1] = a3;
    if (a3) {
      CFRetain(a3);
    }
    v85[0] = &unk_1F20B35C8;
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v85, @"AuthAlgorithm", value);
    ims::CFMutableDictionary::setDataValue((ims::CFMutableDictionary *)v85, @"AuthKey", (uint64_t)&v86);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v85, @"EncryptionAlgorithm", v42);
    if (v41) {
      goto LABEL_122;
    }
    v82 = 0;
    char v83 = 0;
    uint64_t v84 = 0;
    uint64_t v55 = v63;
    if (!v63)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ipsec");
      std::string::basic_string[abi:ne180100]<0>(v80, "");
      uint64_t v56 = ims::debug((uint64_t)__p, (uint64_t)v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v56 + 8), (uint64_t)"no CK provided but encryption algorithm is ", 43);
      *(unsigned char *)(v56 + 17) = 0;
      long long v57 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&(*a5)[40], (void **)"ealg");
      long long v58 = (long long *)(v57 + 7);
      if (v65 == (const unsigned __int8 *)v57) {
        long long v58 = &ims::kEmptyString;
      }
      uint64_t v59 = *((unsigned __int8 *)v58 + 23);
      if ((v59 & 0x80u) != 0) {
        uint64_t v59 = *((void *)v58 + 1);
      }
      if (v59) {
        long long v60 = (const std::string *)v58;
      }
      else {
        long long v60 = (const std::string *)"null";
      }
      LoggableString::LoggableString(&v79, v60);
      (*(void (**)(uint64_t, std::string *))(*(void *)v56 + 40))(v56, &v79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v56 + 8), (uint64_t)".  Using dummy encryption key.", 30);
      *(unsigned char *)(v56 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v56 + 64))(v56, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v56 + 17) = 0;
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v79.__r_.__value_.__l.__data_);
      }
      if (v81 < 0) {
        operator delete(v80[0]);
      }
      if (v78 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v55 = &unk_1EBBD0678;
    }
    SipIPSec3gppSecurityMechanism::fillIPSecEncryptionKey((uint64_t)a5, v55, (unint64_t *)&v82, (uint64_t)__p);
    ImsResult::operator=((uint64_t)v89, (uint64_t)__p);
    ImsResult::~ImsResult((ImsResult *)__p);
    int v61 = (*(uint64_t (**)(void *, void))(*(void *)v89[1] + 24))(v89[1], LODWORD(v89[2]));
    char v62 = v61;
    if (v61) {
      ImsResult::ImsResult((uint64_t)v67, (uint64_t)v89);
    }
    else {
      ims::CFMutableDictionary::setDataValue((ims::CFMutableDictionary *)v85, @"EncryptionKey", (uint64_t)&v82);
    }
    if (v82)
    {
      char v83 = v82;
      operator delete(v82);
    }
    if ((v62 & 1) == 0)
    {
LABEL_122:
      long long v69 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      v67[0] = &unk_1F20B2680;
      v67[1] = &_bambiDomain;
      int v68 = 0;
    }
    ims::CFType::~CFType((ims::CFType *)v85);
  }
  ImsResult::~ImsResult((ImsResult *)v89);
  if (v86)
  {
    int v87 = v86;
    operator delete(v86);
  }
LABEL_84:
  ImsResult::operator=((uint64_t)&v72, (uint64_t)v67);
  ImsResult::~ImsResult((ImsResult *)v67);
  if ((*(unsigned int (**)(void, void))(**((void **)&v72 + 1) + 24))(*((void *)&v72 + 1), v73))
  {
LABEL_85:
    ImsResult::ImsResult((uint64_t)this, (uint64_t)&v72);
    goto LABEL_89;
  }
  v89[0] = &unk_1F20E38B0;
  v89[1] = a3;
  if (a3) {
    CFRetain(a3);
  }
  v89[0] = &unk_1F20B35C8;
  ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)v89, @"ReplayWindowSize", 2u);
  ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)v89, @"SPIValue", *((_DWORD *)v66 + 31));
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = &unk_1F20B2680;
  *((void *)this + 1) = &_bambiDomain;
  *((_DWORD *)this + 4) = 0;
  ims::CFType::~CFType((ims::CFType *)v89);
LABEL_89:
  ImsResult::~ImsResult((ImsResult *)&v72);
}

void sub_1C52FF87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  long long v57 = *(void **)(v55 - 240);
  if (v57)
  {
    *(void *)(v55 - 232) = v57;
    operator delete(v57);
  }
  ims::CFType::~CFType((ims::CFType *)(v55 - 216));
  ImsResult::~ImsResult((ImsResult *)(v55 - 176));
  long long v58 = *(void **)(v55 - 200);
  if (v58)
  {
    *(void *)(v55 - 192) = v58;
    operator delete(v58);
  }
  ImsResult::~ImsResult((ImsResult *)&a23);
  _Unwind_Resume(a1);
}

void IMSSecurityAssociation::createTemporary(IMSSecurityAssociation *this@<X0>, const SipIPSec3gppSecurityMechanism *a2@<X1>, uint64_t a3@<X8>)
{
  *((unsigned char *)this + 128) = (_BYTE)a2;
  *((unsigned char *)this + 129) = 1;
  uint64_t v27 = (uint64_t (**)(void **, uint64_t))&unk_1F20B35C8;
  uint64_t v28 = 0;
  ims::CFMutableDictionary::create((ims::CFMutableDictionary *)&v27);
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  IMSSecurityAssociation::fillDictionaryWithTemporarySAFields((IMSSecurityAssociation *)&v22, this, v28, a2, 0);
  if ((*(unsigned int (**)(void, void))(**((void **)&v22 + 1) + 24))(*((void *)&v22 + 1), v23))
  {
    ImsResult::ImsResult(a3, (uint64_t)&v22);
  }
  else
  {
    uint64_t v6 = (*(uint64_t (**)(IMSSecurityAssociation *))(*(void *)this + 64))(this);
    (*(void (**)(IMSSecurityAssociation *, uint64_t))(*(void *)this + 16))(this, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"creating temporary SA with dict: ", 33);
    *(unsigned char *)(v6 + 17) = 0;
    int8x8_t v7 = (unsigned char *)v27[2]((void **)&v27, v6);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v7[17] = 0;
    int v8 = IPSecDBAddLarvalSA(*(void *)(*(void *)(*((void *)this + 13) + 16) + 120), v28, (char *)this + 124);
    *((_DWORD *)this + 28) = v8;
    if (v8)
    {
      double v9 = (unsigned char *)(*(uint64_t (**)(IMSSecurityAssociation *))(*(void *)this + 64))(this);
      (*(void (**)(IMSSecurityAssociation *, unsigned char *))(*(void *)this + 16))(this, v9);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v9[17] = 0;
      std::string::basic_string[abi:ne180100]<0>(v16, "ipsec");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v10 = ims::debug((uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"created temporary SA with id = ", 31);
      *(unsigned char *)(v10 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)", spi = ", 8);
      *(unsigned char *)(v10 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" (", 2);
      *(unsigned char *)(v10 + 17) = 0;
      uint64_t v11 = *(void *)(v10 + 8) + *(void *)(**(void **)(v10 + 8) - 24);
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 8) & 0xFFFFFFB5 | 8;
      *(unsigned char *)(v10 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v10 + 17) = 0;
      char v12 = *(void **)(v10 + 8);
      *(_DWORD *)((char *)v12 + *(void *)(*v12 - 24) + 8) = *(_DWORD *)((unsigned char *)v12 + *(void *)(*v12 - 24) + 8) & 0xFFFFFFB5 | 2;
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)")", 1);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(v16[0]);
      }
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(void *)a3 = &unk_1F20B2680;
      *(void *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
    }
    else
    {
      long long v19 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      v16[0] = &unk_1F20B2680;
      v16[1] = &_bambiDomain;
      int v17 = 0x40000000;
      long long v13 = (const std::string *)ImsResult::operator<<<char [28]>((uint64_t)v16, "NEIPSecDBAddLarvalSA failed");
      ImsResult::ImsResult((ImsResult *)a3, v13);
      ImsResult::~ImsResult((ImsResult *)v16);
    }
  }
  ImsResult::~ImsResult((ImsResult *)&v22);
  ims::CFType::~CFType((ims::CFType *)&v27);
}

void sub_1C52FFE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult((ImsResult *)&a27);
  ims::CFType::~CFType((ims::CFType *)(v27 - 48));
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [16]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C52FFF38(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void IMSSecurityAssociation::createPolicy(IMSSecurityAssociation *this, const SipIPSec3gppSecurityMechanism *a2, uint64_t a3)
{
  uint64_t v6 = *((void *)a2 + 13);
  if (!*(void *)(v6 + 192)) {
    goto LABEL_8;
  }
  if (*(char *)(v6 + 223) < 0)
  {
    if (!*(void *)(v6 + 208)) {
      goto LABEL_8;
    }
  }
  else if (!*(unsigned char *)(v6 + 223))
  {
    goto LABEL_8;
  }
  if (*(void *)(v6 + 224))
  {
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(void *)this = &unk_1F20B2680;
    *((void *)this + 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 0;
    return;
  }
LABEL_8:
  long long v25 = (uint64_t (**)(void **, uint64_t))&unk_1F20B35C8;
  uint64_t v26 = 0;
  ims::CFMutableDictionary::create((ims::CFMutableDictionary *)&v25);
  uint64_t v24 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  double v7 = IMSSecurityAssociation::fillDictionaryWithCommonFields((IMSSecurityAssociation *)&v20, a2, v26, a3);
  if ((*(unsigned int (**)(void, void, double))(**((void **)&v20 + 1) + 24))(*((void *)&v20 + 1), v21, v7))
  {
    int v8 = ImsLogContainer::logResult(a2, (ImsResult *)&v20);
    ImsResult::ImsResult(this, (const std::string *)v8);
  }
  else
  {
    if (*((unsigned char *)a2 + 128)) {
      double v9 = @"In";
    }
    else {
      double v9 = @"Out";
    }
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v25, @"Direction", v9);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v25, @"Level", @"Unique");
    IMSSecurityAssociation::fillDictionaryWithUniqueId(a2, v26);
    uint64_t v10 = (unsigned char *)(*(uint64_t (**)(const SipIPSec3gppSecurityMechanism *))(*(void *)a2 + 64))(a2);
    (*(void (**)(const SipIPSec3gppSecurityMechanism *, unsigned char *))(*(void *)a2 + 16))(a2, v10);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v10[17] = 0;
    uint64_t v11 = (*(uint64_t (**)(const SipIPSec3gppSecurityMechanism *))(*(void *)a2 + 64))(a2);
    (*(void (**)(const SipIPSec3gppSecurityMechanism *, uint64_t))(*(void *)a2 + 16))(a2, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"creating policy with dictionary: ", 33);
    *(unsigned char *)(v11 + 17) = 0;
    char v12 = (unsigned char *)v25[2]((void **)&v25, v11);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v12[17] = 0;
    int v13 = IPSecDBAddPolicy(*(void *)(*(void *)(*((void *)a2 + 13) + 16) + 120), v26);
    *((_DWORD *)a2 + 29) = v13;
    if (v13)
    {
      *(_OWORD *)((char *)this + 24) = 0u;
      *(_OWORD *)((char *)this + 40) = 0u;
      *(_OWORD *)((char *)this + 56) = 0u;
      *(void *)this = &unk_1F20B2680;
      *((void *)this + 1) = &_bambiDomain;
      *((_DWORD *)this + 4) = 0;
    }
    else
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      v15[0] = &unk_1F20B2680;
      v15[1] = &_bambiDomain;
      int v16 = 0x40000000;
      long long v14 = (const std::string *)ImsResult::operator<<<char [20]>((uint64_t)v15, "Create Policy error");
      ImsResult::ImsResult(this, v14);
      ImsResult::~ImsResult((ImsResult *)v15);
    }
  }
  ImsResult::~ImsResult((ImsResult *)&v20);
  ims::CFType::~CFType((ims::CFType *)&v25);
}

void sub_1C5300328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult((ImsResult *)va1);
  ims::CFType::~CFType((ims::CFType *)(v2 - 48));
  _Unwind_Resume(a1);
}

void IMSSecurityAssociationPair::IMSSecurityAssociationPair(IMSSecurityAssociationPair *this, IPSecurityManager *a2)
{
  *((void *)this + 9) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  IMSVirtualInterface::IMSVirtualInterface((IMSSecurityAssociationPair *)((char *)this + 88));
  *((void *)this + 1) = 0;
  *((void *)this + 2) = a2;
  *((_DWORD *)this + 20) = 0;
  *(void *)this = 0;
}

void sub_1C53003B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*(void **)(v1 + 56));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 32);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void IMSSecurityAssociationPair::~IMSSecurityAssociationPair(void **this)
{
  IMSSecurityAssociationPair::destroy((IMSSecurityAssociationPair *)this);
  IMSVirtualInterface::~IMSVirtualInterface(this + 11);
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void IMSSecurityAssociationPair::destroy(IMSSecurityAssociationPair *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  *(void *)this = 0;
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  *((void *)this + 1) = 0;
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 4);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  size_t v5 = (std::__shared_weak_count *)*((void *)this + 6);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = *((_DWORD *)this + 20);
  if (v6)
  {
    IMSNetworkPolicySession::deletePolicy((IMSNetworkPolicySession *)(*((void *)this + 2) + 200), v6, (uint64_t)v7);
    ImsResult::~ImsResult((ImsResult *)v7);
    *((_DWORD *)this + 20) = 0;
  }
  (*(void (**)(void, char *))(**((void **)this + 2) + 72))(*((void *)this + 2), (char *)this + 200);
  (*(void (**)(void))(**((void **)this + 2) + 48))(*((void *)this + 2));
  IMSVirtualInterface::deinitialize((IMSSecurityAssociationPair *)((char *)this + 88));
}

void IMSSecurityAssociationPair::setLocalAddress(uint64_t a1, uint64_t a2)
{
  (*(void (**)(long long *__return_ptr))(**(void **)a2 + 32))(&v5);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  *(_OWORD *)(a1 + 24) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (*((void *)&v5 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
    }
  }
}

void IMSSecurityAssociationPair::setRemoteAddress(uint64_t a1, uint64_t a2)
{
  (*(void (**)(long long *__return_ptr))(**(void **)a2 + 32))(&v5);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (*((void *)&v5 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
    }
  }
}

uint64_t IMSSecurityAssociationPair::createTemporary@<X0>(std::string *__str@<X3>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, void *a6@<X8>)
{
  a6[2] = 0;
  a6[3] = 0;
  a6[7] = 0;
  a6[8] = 0;
  a6[6] = 0;
  *a6 = &unk_1F20B2680;
  a6[1] = &_bambiDomain;
  a6[4] = 0;
  a6[5] = 0;
  std::string::operator=((std::string *)(a2 + 56), __str);
  if (!*(void *)(*(void *)(a2 + 16) + 304)
    || (IMSVirtualInterface::initialize((IMSVirtualInterface *)(a2 + 88), a3, a5, (uint64_t)v12),
        ImsResult::operator=((uint64_t)a6, (uint64_t)v12),
        ImsResult::~ImsResult((ImsResult *)v12),
        uint64_t result = (*(uint64_t (**)(void, void))(*(void *)a6[1] + 24))(a6[1], *((unsigned int *)a6 + 4)),
        (result & 1) == 0))
  {
    IMSSecurityAssociationPair::setLocalAddress(a2, a3);
    IMSSecurityAssociationPair::setRemoteAddress(a2, a4);
    operator new();
  }
  return result;
}

void sub_1C53007F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult(v2);
  _Unwind_Resume(a1);
}

void IMSSecurityAssociationPair::update(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const unsigned __int8 (*a4)[16]@<X3>, unsigned __int8 (*a5)[16]@<X4>, void *a6@<X5>, ImsResult *a7@<X8>)
{
  if (!*(void *)a1)
  {
    memset(&v37[3], 0, 48);
    v37[0] = &unk_1F20B2680;
    v37[1] = &_bambiDomain;
    LODWORD(v37[2]) = 1073741826;
    long long v20 = (const std::string *)ImsResult::operator<<<char [29]>((uint64_t)v37, "SAPair update: no inbound SA");
    ImsResult::ImsResult(a7, v20);
    long long v21 = (ImsResult *)v37;
    goto LABEL_15;
  }
  IMSSecurityAssociationPair::setLocalAddress(a1, a2);
  IMSSecurityAssociationPair::setRemoteAddress(a1, a3);
  uint64_t v31 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v13 = *(void *)a1;
  if (!*(unsigned char *)(*(void *)a1 + 129))
  {
    memset(&v37[3], 0, 48);
    v37[0] = &unk_1F20B2680;
    v37[1] = &_bambiDomain;
    LODWORD(v37[2]) = 0x40000000;
    long long v22 = (const std::string *)ImsResult::operator<<<char [28]>((uint64_t)v37, "can't update a permanent SA");
    ImsResult::ImsResult((ImsResult *)&v27, v22);
    ImsResult::~ImsResult((ImsResult *)v37);
    goto LABEL_11;
  }
  *(unsigned char *)(v13 + 129) = 0;
  long long v25 = (uint64_t (**)(void **, uint64_t))&unk_1F20B35C8;
  *(void *)uint64_t v26 = 0;
  ims::CFMutableDictionary::create((ims::CFMutableDictionary *)&v25);
  memset(v37, 0, 72);
  IMSSecurityAssociation::fillDictionaryWithPermanentSAFields((IMSSecurityAssociation *)v37, (__CFDictionary *)v13, *(__CFDictionary **)v26, (const SipIPSec3gppSecurityMechanism *)*(unsigned __int8 *)(v13 + 128), a4, a5, a6);
  if (((*(uint64_t (**)(void, void))(*(void *)v37[1] + 24))(v37[1], LODWORD(v37[2])) & 1) == 0)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 64))(v13);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"updating SA with dictionary: ", 29);
    *(unsigned char *)(v14 + 17) = 0;
    char v15 = (unsigned char *)v25[2]((void **)&v25, v14);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v15[17] = 0;
    if (!IPSecDBUpdateSA(*(void *)(*(void *)(*(void *)(v13 + 104) + 16) + 120), *(unsigned int *)(v13 + 112), *(void *)v26))
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      v32[0] = &unk_1F20B2680;
      v32[1] = &_bambiDomain;
      int v33 = 0x40000000;
      long long v23 = (ImsResult *)ImsResult::operator<<<char [16]>((uint64_t)v32, "UpdateSA failed");
      uint64_t v24 = ImsLogContainer::logResult((ImsLogContainer *)v13, v23);
      ImsResult::ImsResult((ImsResult *)&v27, (const std::string *)v24);
      ImsResult::~ImsResult((ImsResult *)v32);
      goto LABEL_8;
    }
    IMSSecurityAssociation::createPolicy((IMSSecurityAssociation *)v32, (const SipIPSec3gppSecurityMechanism *)v13, (uint64_t)a4);
    ImsResult::operator=((uint64_t)v37, (uint64_t)v32);
    ImsResult::~ImsResult((ImsResult *)v32);
    if (((*(uint64_t (**)(void, void))(*(void *)v37[1] + 24))(v37[1], LODWORD(v37[2])) & 1) == 0)
    {
      int v16 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 64))(v13);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v13 + 16))(v13, v16);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v16[17] = 0;
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 64))(v13);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"updated SA with id = ", 21);
      *(unsigned char *)(v17 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v17 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)", spi=", 6);
      *(unsigned char *)(v17 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v17 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" (", 2);
      *(unsigned char *)(v17 + 17) = 0;
      uint64_t v18 = *(void *)(v17 + 8) + *(void *)(**(void **)(v17 + 8) - 24);
      *(_DWORD *)(v18 + 8) = *(_DWORD *)(v18 + 8) & 0xFFFFFFB5 | 8;
      *(unsigned char *)(v17 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v17 + 17) = 0;
      long long v19 = *(void **)(v17 + 8);
      *(_DWORD *)((char *)v19 + *(void *)(*v19 - 24) + 8) = *(_DWORD *)((unsigned char *)v19 + *(void *)(*v19 - 24) + 8) & 0xFFFFFFB5 | 2;
      *(unsigned char *)(v17 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
    }
  }
  ImsResult::ImsResult((uint64_t)&v27, (uint64_t)v37);
LABEL_8:
  ImsResult::~ImsResult((ImsResult *)v37);
  ims::CFType::~CFType((ims::CFType *)&v25);
LABEL_11:
  if (!(*(unsigned int (**)(void, void))(**((void **)&v27 + 1) + 24))(*((void *)&v27 + 1), v28))operator new(); {
  ImsResult::ImsResult((uint64_t)a7, (uint64_t)&v27);
  }
  long long v21 = (ImsResult *)&v27;
LABEL_15:
  ImsResult::~ImsResult(v21);
}

void sub_1C530161C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  ImsResult::~ImsResult((ImsResult *)(v11 - 192));
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [29]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5301788(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [17]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5301830(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipAkaDigestAuthScheme::SipAkaDigestAuthScheme(SipAkaDigestAuthScheme *this)
{
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 12) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((unsigned char *)this + 152) = 0;
  *(void *)this = &unk_1F20C0B90;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_DWORD *)this + 80) = 2;
  SipDigestAuthScheme::clear(this);
  *(_OWORD *)((char *)this + 246) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 34) = *((void *)this + 33);
  *((void *)this + 37) = *((void *)this + 36);
  *((_DWORD *)this + 78) = 0;
  *((unsigned char *)this + 316) = 0;
}

void SipDigestAuthScheme::~SipDigestAuthScheme(void **this)
{
  *this = &unk_1F20C3648;
  uint64_t v2 = this + 20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 151) < 0) {
    operator delete(this[16]);
  }
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  uint64_t v2 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  *this = &unk_1F20D2798;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(this + 1));
}

double SipAkaDigestAuthScheme::clear(SipAkaDigestAuthScheme *this)
{
  SipDigestAuthScheme::clear(this);
  double result = 0.0;
  *(_OWORD *)((char *)this + 246) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((void *)this + 34) = *((void *)this + 33);
  *((void *)this + 37) = *((void *)this + 36);
  *((_DWORD *)this + 78) = 0;
  *((unsigned char *)this + 316) = 0;
  return result;
}

uint64_t SipAkaDigestAuthScheme::parseNonce(uint64_t a1, uint64_t *a2)
{
  *(_OWORD *)(a1 + 184) = 0u;
  uint64_t v4 = (_OWORD *)(a1 + 184);
  *(void *)(a1 + 296) = *(void *)(a1 + 288);
  *(unsigned char *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  size_t v5 = (_OWORD *)(a1 + 200);
  long long v27 = 0;
  long long v28 = 0;
  uint64_t v29 = 0;
  if (!base64Decode(a2, (unint64_t *)&v27))
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "auth");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v9 = ims::error((uint64_t)v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Base64 decode failed for nonce: ", 32);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 32))(v9, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_5;
  }
  int v6 = v27;
  uint64_t v7 = v28;
  int64_t v8 = v28 - (unsigned char *)v27;
  if ((unint64_t)(v28 - (unsigned char *)v27) > 0x1F)
  {
    _OWORD *v4 = *(_OWORD *)v27;
    _OWORD *v5 = v6[1];
    if (v8 == 32)
    {
LABEL_31:
      uint64_t v10 = 1;
      *(unsigned char *)(a1 + 312) = 1;
      goto LABEL_32;
    }
    uint64_t v11 = (char *)(v6 + 2);
    size_t v12 = v7 - (char *)(v6 + 2);
    unint64_t v13 = *(void *)(a1 + 304);
    uint64_t v14 = *(char **)(a1 + 288);
    if (v13 - (unint64_t)v14 >= v12)
    {
      uint64_t v18 = *(unsigned char **)(a1 + 296);
      size_t v19 = v18 - v14;
      if (v18 - v14 < v12)
      {
        long long v20 = &v11[v19];
        if (v18 != v14)
        {
          memmove(*(void **)(a1 + 288), v11, v19);
          uint64_t v14 = *(char **)(a1 + 296);
        }
        if (v7 != v20) {
          memmove(v14, v20, v7 - v20);
        }
        long long v21 = &v14[v7 - v20];
        goto LABEL_30;
      }
    }
    else
    {
      char v15 = (void *)v4 + 13;
      if (v14)
      {
        *(void *)(a1 + 296) = v14;
        operator delete(v14);
        unint64_t v13 = 0;
        *char v15 = 0;
        v15[1] = 0;
        void v15[2] = 0;
      }
      if ((v12 & 0x8000000000000000) != 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = 2 * v13;
      if (2 * v13 <= v12) {
        uint64_t v16 = v12;
      }
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v17 = v16;
      }
      std::vector<unsigned char>::__vallocate[abi:ne180100](v15, v17);
      uint64_t v14 = *(char **)(a1 + 296);
    }
    if (v7 != v11) {
      memmove(v14, v11, v12);
    }
    long long v21 = &v14[v12];
LABEL_30:
    *(void *)(a1 + 296) = v21;
    goto LABEL_31;
  }
  std::string::basic_string[abi:ne180100]<0>(v25, "auth");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v9 = ims::error((uint64_t)v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Decoded nonce data is only ", 27);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" bytes for nonce: ", 18);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v9 + 32))(v9, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_5:
  *(unsigned char *)(v9 + 17) = 0;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  uint64_t v10 = 0;
LABEL_32:
  if (v27)
  {
    long long v28 = (char *)v27;
    operator delete(v27);
  }
  return v10;
}

void sub_1C5301D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipAkaDigestAuthScheme::encodeNonce(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 312))
  {
    std::string __p = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    std::vector<unsigned char>::__append((unint64_t *)&__p, *(void *)(a1 + 296) - *(void *)(a1 + 288) + 32);
    *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 184);
    uint64_t v4 = (char *)__p;
    *((_OWORD *)__p + 1) = *(_OWORD *)(a1 + 200);
    size_t v5 = *(unsigned char **)(a1 + 288);
    int v6 = *(unsigned char **)(a1 + 296);
    if (v6 != v5) {
      memmove(v4 + 32, v5, v6 - v5);
    }
    uint64_t v7 = base64Encode((uint64_t)v4, v10 - v4, (std::string *)a2);
    if (__p)
    {
      uint64_t v10 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
  }
  return v7;
}

void sub_1C5301EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipAkaDigestAuthScheme::encodeDirectives(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1C5302104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  if (*(char *)(v16 - 49) < 0) {
    operator delete(*(void **)(v16 - 72));
  }
  _Unwind_Resume(a1);
}

uint64_t SipAkaDigestAuthScheme::hasValidNonce(SipAkaDigestAuthScheme *this)
{
  return *((unsigned __int8 *)this + 312);
}

uint64_t SipAkaDigestAuthScheme::parseAlgorithm(uint64_t a1, std::string *this)
{
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if (std::string::compare(this, 0, 3uLL, "AKA")) {
      return 0;
    }
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      if (this->__r_.__value_.__l.__size_ < 7) {
        return 0;
      }
      int v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    else
    {
      int v6 = this;
      if (HIBYTE(this->__r_.__value_.__r.__words[2]) < 7u) {
        return 0;
      }
    }
    *(_DWORD *)(a1 + 320) = v6->__r_.__value_.__s.__data_[4] - 48;
    std::string::basic_string(&v8, this, 6uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v9);
    uint64_t v7 = (void **)(a1 + 128);
    if (*(char *)(a1 + 151) < 0) {
      operator delete(*v7);
    }
    *(_OWORD *)uint64_t v7 = *(_OWORD *)&v8.__r_.__value_.__l.__data_;
    *(void *)(a1 + 144) = *((void *)&v8.__r_.__value_.__l + 2);
  }
  else
  {
    *(_DWORD *)(a1 + 320) = 2;
    if (*(char *)(a1 + 151) < 0)
    {
      **(unsigned char **)(a1 + 128) = 0;
      *(void *)(a1 + 136) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 128) = 0;
      *(unsigned char *)(a1 + 151) = 0;
    }
  }
  return 1;
}

uint64_t SipAkaDigestAuthScheme::encodeAlgorithm(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  if (*(char *)(result + 151) < 0)
  {
    if (*(void *)(result + 136)) {
      goto LABEL_3;
    }
LABEL_15:
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
    return result;
  }
  if (!*(unsigned char *)(result + 151)) {
    goto LABEL_15;
  }
LABEL_3:
  uint64_t v16 = 0;
  memset(v15, 0, sizeof(v15));
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v11, 0, sizeof(v11));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"AKAv", 4);
  uint64_t v4 = (void *)std::ostream::operator<<();
  LOBYTE(v9) = 45;
  size_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v9, 1);
  int v6 = *(char *)(v3 + 151);
  if (v6 >= 0) {
    uint64_t v7 = v3 + 128;
  }
  else {
    uint64_t v7 = *(void *)(v3 + 128);
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(v3 + 151);
  }
  else {
    uint64_t v8 = *(void *)(v3 + 136);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v11 + 8, &v9);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = v9;
  *(void *)(a2 + 16) = v10;
  *(void *)&v11[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v11 + *(void *)(*(void *)&v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v11[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v15);
}

void sub_1C530246C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

char **SipAkaDigestAuthScheme::setRes(char **result, char **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if ((unint64_t)(v4 - v3 - 17) >= 0xFFFFFFFFFFFFFFF3)
  {
    int v6 = result;
    result += 33;
    if (result != a2) {
      double result = (char **)std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(result, v3, v4, v4 - v3);
    }
    *(_WORD *)((char *)v6 + 313) = 256;
  }
  return result;
}

uint64_t SipAkaDigestAuthScheme::computeResponse(uint64_t a1, void *a2)
{
  uint64_t v4 = (*(uint64_t (**)(void *))(*a2 + 112))(a2);
  uint64_t v5 = a2[9];
  int v6 = *(uint64_t (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a1 + 144);
  return v6(a1, v4, a2 + 14, v5);
}

void SipAkaDigestAuthScheme::computeResponse()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C53026E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a21);
  _Unwind_Resume(a1);
}

uint64_t SipAkaDigestAuthScheme::computeResponse(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 313))
  {
    LOBYTE(v3[0]) = 0;
    SipDigestAuthScheme::_computeResponse(a1);
  }
  if (*(unsigned char *)(a1 + 314))
  {
    if (*(_DWORD *)(a1 + 320) == 1)
    {
      SipDigestAuthScheme::_computeResponse(a1);
    }
    if (*(unsigned char *)(a1 + 316) && *(unsigned char *)(a1 + 315))
    {
      memset(&v5, 0, sizeof(v5));
      if (*(char *)(a1 + 151) < 0) {
        std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)(a1 + 128), *(void *)(a1 + 136));
      }
      else {
        std::string v5 = *(std::string *)(a1 + 128);
      }
      std::string::size_type size = HIBYTE(v5.__r_.__value_.__r.__words[2]);
      if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v5.__r_.__value_.__l.__size_;
      }
      if (!size) {
        std::string::operator=(&v5, &SipDigestAlgorithm::kAlgorithmMD5);
      }
      uint64_t v4 = 0;
      memset(v3, 0, sizeof(v3));
      SipDigestAlgorithmManager::SipDigestAlgorithmManager((SipDigestAlgorithmManager *)v3);
    }
  }
  return 0;
}

void sub_1C5302B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  if (a27) {
    operator delete(a27);
  }
  SipDigestAlgorithmManager::~SipDigestAlgorithmManager((SipDigestAlgorithmManager *)&a33);
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  _Unwind_Resume(a1);
}

ImsOutStream *SipAkaDigestAuthScheme::log(SipAkaDigestAuthScheme *this, ImsOutStream *a2)
{
  SipAuthScheme::log(this, a2);
  if (*((unsigned char *)this + 314))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  RES:", 6);
    *((unsigned char *)a2 + 17) = 0;
    if (*((void *)this + 34) != *((void *)this + 33))
    {
      unint64_t v4 = 0;
      do
      {
        std::string v5 = (void *)*((void *)a2 + 1);
        char v17 = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v17, 1);
        *((unsigned char *)a2 + 17) = 0;
        int v6 = (void *)*((void *)a2 + 1);
        *(_DWORD *)((char *)v6 + *(void *)(*v6 - 24) + 8) = *(_DWORD *)((unsigned char *)v6 + *(void *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
        *((unsigned char *)a2 + 17) = 0;
        char v18 = 48;
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, &v18);
        *(void *)(*((void *)a2 + 1) + *(void *)(**((void **)a2 + 1) - 24) + 24) = 2;
        std::ostream::operator<<();
        *((unsigned char *)a2 + 17) = 0;
        ++v4;
      }
      while (v4 < *((void *)this + 34) - *((void *)this + 33));
    }
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
  if (*((unsigned char *)this + 315))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  CK:", 5);
    uint64_t v7 = 0;
    *((unsigned char *)a2 + 17) = 0;
    do
    {
      uint64_t v8 = (void *)*((void *)a2 + 1);
      char v19 = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v19, 1);
      *((unsigned char *)a2 + 17) = 0;
      long long v9 = (void *)*((void *)a2 + 1);
      *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 8;
      *((unsigned char *)a2 + 17) = 0;
      char v20 = 48;
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, &v20);
      *(void *)(*((void *)a2 + 1) + *(void *)(**((void **)a2 + 1) - 24) + 24) = 2;
      std::ostream::operator<<();
      *((unsigned char *)a2 + 17) = 0;
      ++v7;
    }
    while (v7 != 16);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
  if (*((unsigned char *)this + 316))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  IK:", 5);
    uint64_t v10 = 0;
    *((unsigned char *)a2 + 17) = 0;
    do
    {
      uint64_t v11 = (void *)*((void *)a2 + 1);
      char v21 = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v21, 1);
      *((unsigned char *)a2 + 17) = 0;
      size_t v12 = (void *)*((void *)a2 + 1);
      *(_DWORD *)((char *)v12 + *(void *)(*v12 - 24) + 8) = *(_DWORD *)((unsigned char *)v12 + *(void *)(*v12 - 24) + 8) & 0xFFFFFFB5 | 8;
      *((unsigned char *)a2 + 17) = 0;
      char v22 = 48;
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, &v22);
      *(void *)(*((void *)a2 + 1) + *(void *)(**((void **)a2 + 1) - 24) + 24) = 2;
      std::ostream::operator<<();
      *((unsigned char *)a2 + 17) = 0;
      ++v10;
    }
    while (v10 != 16);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
  if (*((unsigned char *)this + 313))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  AUTS:", 7);
    uint64_t v13 = 0;
    *((unsigned char *)a2 + 17) = 0;
    do
    {
      long long v14 = (void *)*((void *)a2 + 1);
      char v23 = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v23, 1);
      *((unsigned char *)a2 + 17) = 0;
      char v15 = (void *)*((void *)a2 + 1);
      *(_DWORD *)((char *)v15 + *(void *)(*v15 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
      *((unsigned char *)a2 + 17) = 0;
      char v24 = 48;
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, &v24);
      *(void *)(*((void *)a2 + 1) + *(void *)(**((void **)a2 + 1) - 24) + 24) = 2;
      std::ostream::operator<<();
      *((unsigned char *)a2 + 17) = 0;
      ++v13;
    }
    while (v13 != 14);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
  return a2;
}

void SipAkaDigestAuthScheme::createChallenge(SipAkaDigestAuthScheme *this)
{
}

void sub_1C53030C8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

void SipAkaDigestAuthScheme::createResponse(SipAkaDigestAuthScheme *this)
{
}

void sub_1C5303134(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

void SipAkaDigestAuthScheme::~SipAkaDigestAuthScheme(SipAkaDigestAuthScheme *this)
{
  SipAkaDigestAuthScheme::~SipAkaDigestAuthScheme(this);
  JUMPOUT(0x1C878E320);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(void *)this = &unk_1F20C0B90;
  uint64_t v2 = (void *)*((void *)this + 36);
  if (v2)
  {
    *((void *)this + 37) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 33);
  if (v3)
  {
    *((void *)this + 34) = v3;
    operator delete(v3);
  }
  *(void *)this = &unk_1F20C3648;
  unint64_t v4 = (void **)((char *)this + 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 151) < 0) {
    operator delete(*((void **)this + 16));
  }
  if (*((char *)this + 127) < 0) {
    operator delete(*((void **)this + 13));
  }
  unint64_t v4 = (void **)((char *)this + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  *(void *)this = &unk_1F20D2798;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 8);
}

void SipAkaDigestAuthScheme::clone(SipAkaDigestAuthScheme *this)
{
}

void sub_1C5303284(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4074E51C00);
  _Unwind_Resume(a1);
}

const char *SipDigestAuthScheme::name(SipDigestAuthScheme *this)
{
  return "Digest";
}

uint64_t SipDigestAuthScheme::isValid(SipDigestAuthScheme *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 88))();
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  std::string v5 = (char *)a1[1];
  unint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    size_t v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      long long v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      std::string v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v13 = v8;
      if (v8 >= v10) {
        unint64_t v13 = v8 % v10;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v8;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v13);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10) {
              v16 %= v10;
            }
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v13 = 0;
  }
  memset(v26, 0, sizeof(v26));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v9, a4, v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v13 = v9 % v10;
      }
      else {
        unint64_t v13 = v9;
      }
    }
    else
    {
      unint64_t v13 = (v10 - 1) & v9;
    }
  }
  char v23 = *(void **)(*(void *)a1 + 8 * v13);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v13) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1C530384C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v8 = operator new(0x40uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *((unsigned char *)a4 + 16) = 1;
}

void sub_1C53038F8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t _GLOBAL__sub_I_SipAkaDigestAuthScheme_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&kAKAv2Password, "http-digest-akav2-password");
  v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &kAKAv2Password, &dword_1C51D1000);
}

void SipGenericXmlBody::SipGenericXmlBody(SipGenericXmlBody *this, const SipGenericXmlBody *a2)
{
  uint64_t v3 = SipXmlBody::SipXmlBody(this, (uint64_t)a2);
  *uint64_t v3 = &unk_1F20C0C58;
  v3[4] = 0;
  unint64_t v4 = (std::string *)(v3 + 4);
  v3[5] = 0;
  v3[6] = 0;
  XmlParserGenericItem::XmlParserGenericItem((XmlParserGenericItem *)(v3 + 7), (const SipGenericXmlBody *)((char *)a2 + 56));
  std::string::operator=(v4, (const std::string *)((char *)a2 + 32));
}

void sub_1C5303A40(_Unwind_Exception *a1)
{
  XmlParserGenericItem::~XmlParserGenericItem(v3);
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  *(void *)uint64_t v1 = &unk_1F20CC498;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(a1);
}

void *SipGenericXmlBody::SipGenericXmlBody(void *a1, const std::string *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  unint64_t v6 = (std::string *)(a1 + 4);
  *a1 = &unk_1F20C0C58;
  a1[5] = 0;
  a1[6] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "root");
  XmlParserGenericItem::XmlParserGenericItem((uint64_t)(a1 + 7), (long long *)__p);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  std::string::operator=(v6, a2);
  (*(void (**)(void **__return_ptr, void *, uint64_t))(*a1 + 120))(v8, a1, a3);
  ImsResult::~ImsResult((ImsResult *)v8);
  return a1;
}

void sub_1C5303BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v23 + 55) < 0) {
    operator delete(*v25);
  }
  *(void *)uint64_t v23 = v24;
  if (*(char *)(v23 + 31) < 0) {
    operator delete(*v26);
  }
  _Unwind_Resume(exception_object);
}

void SipGenericXmlBody::generateXml(SipGenericXmlBody *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = 0;
  memset(v3, 0, sizeof(v3));
  XmlParserGenericItem::XmlParserGenericItem((XmlParserGenericItem *)v3, (SipGenericXmlBody *)((char *)this + 56));
  bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)((char *)v3 + 8), 0, 1, a2);
  XmlParserGenericItem::~XmlParserGenericItem((XmlParserGenericItem *)v3);
}

void sub_1C5303C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void SipGenericXmlBody::setContent(uint64_t a1@<X0>, bambi::XmlParser *a2@<X1>, uint64_t a3@<X2>, bambi::XmlParserItem *a4@<X3>, uint64_t a5@<X8>)
{
  if (bambi::XmlParser::parseXml(a2, a1 + 56, a3, a4))
  {
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(void *)a5 = &unk_1F20B2680;
    *(void *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 0;
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    v7[0] = &unk_1F20B2680;
    v7[1] = &_bambiDomain;
    int v8 = 0x40000000;
    unint64_t v6 = (const std::string *)ImsResult::operator<<<char [16]>((uint64_t)v7, "XML parse error");
    ImsResult::ImsResult((ImsResult *)a5, v6);
    ImsResult::~ImsResult((ImsResult *)v7);
  }
}

void sub_1C5303D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipGenericXmlBody::clone(SipGenericXmlBody *this)
{
}

void sub_1C5303EDC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40FEE257C6);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionHandover::MediaSessionHandover(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, void *a5, uint64_t a6, dispatch_object_t *a7, int a8)
{
  uint64_t v14 = *a2;
  unint64_t v13 = (std::__shared_weak_count *)a2[1];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a4;
  unint64_t v16 = (std::__shared_weak_count *)a4[1];
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F20C1128;
  uint64_t v31 = v15;
  size_t v32 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MediaSessionInterface::MediaSessionInterface(a1 + 24, a3, &v31, (long long *)a6, a7);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  *(void *)a1 = &unk_1F20D81D0;
  *(void *)(a1 + 24) = &unk_1F20D82D0;
  *(void *)(a1 + 112) = a1 + 112;
  *(void *)(a1 + 120) = a1 + 112;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = v14;
  *(void *)(a1 + 144) = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 152) = 4;
  std::string::basic_string[abi:ne180100]<0>(v29, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v17 = ims::debug((uint64_t)v29, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"MediaSessionQueue", 17);
  *(unsigned char *)(v17 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v17 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v17 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" stackId=", 9);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 32))(v17, a6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  *(void *)a1 = &unk_1F20C0D00;
  *(void *)(a1 + 24) = &unk_1F20C0E40;
  *(void *)(a1 + 160) = &unk_1F20C0F18;
  *(void *)(a1 + 168) = &unk_1F20C0F58;
  *(void *)(a1 + 176) = *a5;
  uint64_t v18 = a5[1];
  *(void *)(a1 + 184) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 192), *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else
  {
    long long v19 = *(_OWORD *)a6;
    *(void *)(a1 + 208) = *(void *)(a6 + 16);
    *(_OWORD *)(a1 + 192) = v19;
  }
  *(_DWORD *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = *a4;
  uint64_t v20 = a4[1];
  *(void *)(a1 + 232) = v20;
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 240) = *a7;
  if (*a7) {
    dispatch_retain(*a7);
  }
  *(_DWORD *)(a1 + 248) = a8;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 256));
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(unsigned char *)(a1 + 424) = 1;
  *(void *)(a1 + 432) = a3;
  *(_WORD *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = *a2;
  uint64_t v21 = a2[1];
  *(void *)(a1 + 456) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 489) = 0u;
  std::string::basic_string[abi:ne180100]<0>(v29, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v22 = ims::debug((uint64_t)v29, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"MediaSessionHandover", 20);
  *(unsigned char *)(v22 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" [timeout=", 10);
  *(unsigned char *)(v22 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v22 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v22 + 17) = 0;
  if (v28 < 0) {
    operator delete(__p[0]);
  }
  if (v30 < 0) {
    operator delete(v29[0]);
  }
  *(void *)(a1 + 360) = a1 + 168;
  return a1;
}

void sub_1C53043D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26)
{
  char v28 = (std::__shared_weak_count *)*((void *)v26 + 23);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  MediaSessionQueue::~MediaSessionQueue(v26);
  _Unwind_Resume(a1);
}

void MediaSessionQueue::~MediaSessionQueue(MediaSessionQueue *this)
{
  *(void *)this = &unk_1F20D81D0;
  uint64_t v2 = (void **)((char *)this + 24);
  *((void *)this + 3) = &unk_1F20D82D0;
  std::string::basic_string[abi:ne180100]<0>(v8, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::info((uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"~MediaSessionQueue", 18);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  std::__list_imp<std::pair<MediaSessionQueue::Action,std::weak_ptr<MediaSessionInterface>>>::clear((uint64_t *)this + 14);
  MediaSessionInterface::~MediaSessionInterface(v2);
  std::string v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  uint64_t vars8;

  MediaSessionQueue::~MediaSessionQueue(this);
  JUMPOUT(0x1C878E320);
}

void MediaSessionHandover::~MediaSessionHandover(MediaSessionHandover *this)
{
  *(void *)this = &unk_1F20C0D00;
  *((void *)this + 3) = &unk_1F20C0E40;
  *((void *)this + 20) = &unk_1F20C0F18;
  *((void *)this + 21) = &unk_1F20C0F58;
  std::string::basic_string[abi:ne180100]<0>(v12, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"~MediaSessionHandover", 21);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v12, (uint64_t)__p);
  size_t v4 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v4);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"cancelAllTimers", 15);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  SipTimerContainer::cancelAllTimers((MediaSessionHandover *)((char *)this + 256));
  *((unsigned char *)this + 504) = 0;
  if (*((char *)this + 503) < 0) {
    operator delete(*((void **)this + 60));
  }
  std::string v5 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (*((char *)this + 423) < 0) {
    operator delete(*((void **)this + 50));
  }
  SipTimerContainer::~SipTimerContainer((MediaSessionHandover *)((char *)this + 256));
  char v7 = *((void *)this + 30);
  if (v7) {
    dispatch_release(v7);
  }
  int v8 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  char v9 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  MediaSessionQueue::~MediaSessionQueue(this);
}

{
  uint64_t vars8;

  MediaSessionHandover::~MediaSessionHandover(this);
  JUMPOUT(0x1C878E320);
}

void sub_1C5304950(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  __clang_call_terminate(a1);
}

void non-virtual thunk to'MediaSessionHandover::~MediaSessionHandover(MediaSessionHandover *this)
{
}

{
  MediaSessionHandover::~MediaSessionHandover((MediaSessionHandover *)((char *)this - 168));
}

{
  uint64_t vars8;

  MediaSessionHandover::~MediaSessionHandover((MediaSessionHandover *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  MediaSessionHandover::~MediaSessionHandover((MediaSessionHandover *)((char *)this - 168));
  JUMPOUT(0x1C878E320);
}

uint64_t MediaSessionHandover::terminate(MediaSessionHandover *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v17, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v17, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  size_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"terminate", 9);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(MediaSessionHandover *))(*(void *)this + 176))(this);
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v17);
  }
  *((unsigned char *)this + 424) = 1;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  RTPSharedPointerBase::getShared<MediaSessionHandover>(&v17, (uint64_t)this);
  unint64_t v6 = *((void *)this + 30);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 1174405120;
  void v13[2] = ___ZN20MediaSessionHandover9terminateEb_block_invoke;
  v13[3] = &__block_descriptor_tmp_33;
  char v7 = v18;
  v13[4] = v17;
  uint64_t v14 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_async(v6, v13);
  int v8 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v8)
  {
    char v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      long long v10 = v9;
      uint64_t v11 = *((void *)this + 17);
      if (v11) {
        (*(void (**)(uint64_t, void))(*(void *)v11 + 24))(v11, 0);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return 1;
}

void sub_1C5304CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void RTPSharedPointerBase::getShared<MediaSessionHandover>(void **p_lpsrc, uint64_t a2)
{
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (void *)(a2 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      size_t v4 = v6;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void ___ZN20MediaSessionHandover9terminateEb_block_invoke(uint64_t a1)
{
}

void MediaSessionHandover::handoverComplete(uint64_t a1, uint64_t a2)
{
  std::string::basic_string[abi:ne180100]<0>(v14, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v14, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  unint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handoverComplete", 16);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" Handover completed [sessionId=", 31);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (a2 == 9 || !a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "rtp.handover");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v8 = ims::debug((uint64_t)v14, (uint64_t)__p);
    size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"cancelTimerForSessionHandover", 29);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    SipTimerContainer::cancelTimer((int8x8_t *)(a1 + 256), (std::string *)(a1 + 400));
  }
  uint64_t v10 = *(void *)(a1 + 224);
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  RTPManager::handoverComplete(v10, v11, a2, *(_DWORD *)(*(void *)(a1 + 176) + 40), (unsigned __int8 *)(a1 + 192));
}

void sub_1C5305140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c48_ZTSNSt3__110shared_ptrI20MediaSessionHandoverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c48_ZTSNSt3__110shared_ptrI20MediaSessionHandoverEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t non-virtual thunk to'MediaSessionHandover::terminate(MediaSessionHandover *this)
{
  return 1;
}

void MediaSessionHandover::handover(MediaSessionHandover *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(__p, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(v11, "");
  uint64_t v2 = ims::debug((uint64_t)__p, (uint64_t)v11);
  if (this)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void **)(v2 + 8);
    size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"handover", 8);
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(MediaSessionHandover *))(*(void *)this + 176))(this);
    std::ostream::operator<<();
    *(unsigned char *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    v8[0] = 0;
    v8[1] = 0;
    RTPSharedPointerBase::getShared<MediaSessionHandover>(v8, (uint64_t)this);
    *((unsigned char *)this + 424) = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "rtp.handover");
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    uint64_t v6 = ims::debug((uint64_t)__p, (uint64_t)v11);
    size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"startTimerForSessionHandover", 28);
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" [sessionId=", 12);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(MediaSessionHandover *))(*(void *)this + 176))(this);
    std::ostream::operator<<();
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v12 < 0) {
      operator delete(v11[0]);
    }
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    v8[2] = (void *)(*(uint64_t (**)(MediaSessionHandover *))(*(void *)this + 176))(this);
    ims::detail::to_string_impl<unsigned long long,std::integral_constant<BOOL,false>>::operator()();
  }
  __cxa_bad_typeid();
}

void sub_1C53057C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](&__p);
  if (v24)
  {
    std::__shared_weak_count::__release_weak(v24);
    std::__shared_weak_count::__release_weak(v24);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(a1);
}

void ___ZN20MediaSessionHandover8handoverEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(MediaSessionHandover **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(&v25, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v2 = ims::debug((uint64_t)&v25, (uint64_t)__p);
  if (!v1) {
    __cxa_bad_typeid();
  }
  uint64_t v3 = v2;
  uint64_t v4 = *(void **)(v2 + 8);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(void *)(*(void *)(*(void *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"handoverSession", 15);
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(MediaSessionHandover *))(*(void *)v1 + 176))(v1);
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v27 < 0) {
    operator delete(v25);
  }
  if (!*((unsigned char *)v1 + 424))
  {
    std::string::basic_string[abi:ne180100]<0>(&v25, "rtp.handover");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v7 = ims::debug((uint64_t)&v25, (uint64_t)__p);
    size_t v8 = strlen((const char *)(*(void *)(*(void *)(*(void *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), *(void *)(*(void *)(*(void *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"switchStacks", 12);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v25);
    }
    size_t v9 = (std::__shared_weak_count *)*((void *)v1 + 18);
    if (v9)
    {
      char v10 = (const void *)*((void *)v1 + 17);
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v11 = std::__shared_weak_count::lock(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v11 && v10)
      {
        std::string::basic_string[abi:ne180100]<0>(&v25, "rtp.handover");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v12 = ims::debug((uint64_t)&v25, (uint64_t)__p);
        size_t v13 = strlen((const char *)(*(void *)(*(void *)(*(void *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), *(void *)(*(void *)(*(void *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v13);
        *(unsigned char *)(v12 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v12 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"switchStacks", 12);
        *(unsigned char *)(v12 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" starting handover stack switcher [sessionId=", 45);
        *(unsigned char *)(v12 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v12 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v12 + 17) = 0;
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        if (v27 < 0) {
          operator delete(v25);
        }
        char v15 = v14;
        if (v14)
        {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          int v16 = (*(uint64_t (**)(unsigned char *))(*(void *)v14 + 240))(v14) ^ 1;
          uint64_t v17 = v11;
        }
        else
        {
          uint64_t v17 = 0;
          int v16 = 0;
        }
        RTPSharedPointerBase::getShared<MediaSessionHandover>(&v25, (uint64_t)v1);
        uint64_t v18 = v26;
        if (v25) {
          char v19 = (char *)v25 + 160;
        }
        else {
          char v19 = 0;
        }
        uint64_t v21 = v19;
        uint64_t v22 = v26;
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(const void *, char **))(*(void *)v10 + 160))(v10, &v21);
        if (v22) {
          std::__shared_weak_count::__release_weak(v22);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        std::string::basic_string[abi:ne180100]<0>(&v25, "rtp.handover");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v20 = ims::debug((uint64_t)&v25, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"switchStacks", 12);
        *(unsigned char *)(v20 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" [transactionPending=", 21);
        *(unsigned char *)(v20 + 17) = 0;
        (*(void (**)(const void *))(*(void *)v10 + 72))(v10);
        std::ostream::operator<<();
        *(unsigned char *)(v20 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" initialized=", 13);
        *(unsigned char *)(v20 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v20 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" delayedStart=", 14);
        *(unsigned char *)(v20 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v20 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v20 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v20 + 17) = 0;
        if (v24 < 0) {
          operator delete(__p[0]);
        }
        if (v27 < 0) {
          operator delete(v25);
        }
        if (v15 && (v15[137] & 0xFE) != 4
          || ((*(unsigned int (**)(const void *))(*(void *)v10 + 72))(v10) ^ 1 | v16) == 1)
        {
          MediaSessionHandover::createNewSession(v1);
        }
        else
        {
          MediaSessionHandover::setHandoverState((uint64_t)v1, 1u);
        }
        if (v17) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
LABEL_48:
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        return;
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    MediaSessionHandover::handoverComplete((uint64_t)v1, 9);
    if (!v11) {
      return;
    }
    goto LABEL_48;
  }
  std::string::basic_string[abi:ne180100]<0>(&v25, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)&v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Session handover was cancelled [sessionId=", 42);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(MediaSessionHandover *))(*(void *)v1 + 176))(v1);
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v27 < 0) {
    operator delete(v25);
  }
}

void sub_1C53060DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void MediaSessionHandover::handleTimer(MediaSessionHandover *a1, unsigned __int8 *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&v32, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)&v32, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"handleTimer", 11);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" [timerId=", 10);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v5 + 32))(v5, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v31 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = a2[23];
  size_t v9 = *((void *)a2 + 1);
  if ((v8 & 0x80u) == 0) {
    uint64_t v10 = a2[23];
  }
  else {
    uint64_t v10 = *((void *)a2 + 1);
  }
  uint64_t v11 = *((unsigned __int8 *)a1 + 423);
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)a1 + 51);
  }
  if (v10 != v11) {
    goto LABEL_22;
  }
  if (v12 >= 0) {
    size_t v13 = (unsigned __int8 *)a1 + 400;
  }
  else {
    size_t v13 = (unsigned __int8 *)*((void *)a1 + 50);
  }
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v13, *((void *)a2 + 1))) {
      goto LABEL_22;
    }
LABEL_33:
    std::string::basic_string[abi:ne180100]<0>(&v32, "rtp.handover");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v19 = ims::error((uint64_t)&v32, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Handover timer fired for [sessionId=", 36);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(MediaSessionHandover *))(*(void *)a1 + 176))(a1);
    std::ostream::operator<<();
    *(unsigned char *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    if (v31 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    uint64_t v21 = *((void *)a1 + 28);
    uint64_t v20 = (std::__shared_weak_count *)*((void *)a1 + 29);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v22 = *(_DWORD *)(*((void *)a1 + 22) + 40);
    uint64_t v23 = (*(uint64_t (**)(MediaSessionHandover *))(*(void *)a1 + 176))(a1);
    memset(&v32, 0, sizeof(v32));
    if (*((char *)a1 + 215) < 0) {
      std::string::__init_copy_ctor_external(&v32, *((const std::string::value_type **)a1 + 24), *((void *)a1 + 25));
    }
    else {
      std::string v32 = *(std::string *)((unsigned char *)a1 + 8);
    }
    char v24 = *((void *)a1 + 30);
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 1174405120;
    uint64_t v25[2] = ___ZN20MediaSessionHandover11handleTimerERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
    v25[3] = &__block_descriptor_tmp_17_2;
    v25[4] = v21;
    char v26 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v27 = v23;
    int v29 = v22;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v28, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
    }
    else {
      std::string v28 = v32;
    }
    dispatch_async(v24, v25);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v28.__r_.__value_.__l.__data_);
    }
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    return;
  }
  if (!a2[23]) {
    goto LABEL_33;
  }
  uint64_t v14 = a2;
  uint64_t v15 = a2[23];
  while (*v14 == *v13)
  {
    ++v14;
    ++v13;
    if (!--v15) {
      goto LABEL_33;
    }
  }
LABEL_22:
  uint64_t v16 = *((unsigned __int8 *)a1 + 503);
  int v17 = (char)v16;
  if ((v16 & 0x80u) != 0) {
    uint64_t v16 = *((void *)a1 + 61);
  }
  if (v10 != v16) {
    return;
  }
  if (v17 >= 0) {
    uint64_t v18 = (unsigned __int8 *)a1 + 480;
  }
  else {
    uint64_t v18 = (unsigned __int8 *)*((void *)a1 + 60);
  }
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v18, v9)) {
      return;
    }
LABEL_42:
    MediaSessionHandover::completeDelayedStackSwitch(a1);
    return;
  }
  if (!v8) {
    goto LABEL_42;
  }
  while (*a2 == *v18)
  {
    ++a2;
    ++v18;
    if (!--v8) {
      goto LABEL_42;
    }
  }
}

void sub_1C53066AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (*(char *)(v26 - 57) < 0) {
    operator delete(*(void **)(v26 - 80));
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN20MediaSessionHandover11handleTimerERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  RTPManager::handoverComplete(*(void *)(a1 + 32), *(void *)(a1 + 48), 10, *(_DWORD *)(a1 + 80), (unsigned __int8 *)(a1 + 56));
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 32) + 104);
  return v2();
}

void __copy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10RTPManagerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C5306800(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10RTPManagerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void MediaSessionHandover::completeDelayedStackSwitch(MediaSessionHandover *this)
{
  std::string::basic_string[abi:ne180100]<0>(v25, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(v23, "");
  uint64_t v2 = ims::debug((uint64_t)v25, (uint64_t)v23);
  size_t v3 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v3);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"completeDelayedStackSwitch", 26);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" [sessionId()=", 14);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(MediaSessionHandover *))(*(void *)this + 176))(this);
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" direction=", 11);
  *(unsigned char *)(v2 + 17) = 0;
  ims::toString<MediaDirection>((unsigned int *)this + 127, &__p);
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 32))(v2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" start?=", 8);
  *(unsigned char *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v22 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  std::string __p = 0;
  uint64_t v21 = 0;
  uint64_t v4 = (RTPManager *)*((void *)this + 28);
  uint64_t v5 = (*(uint64_t (**)(MediaSessionHandover *))(*(void *)this + 176))(this);
  RTPManager::addressForSession(v4, v5, &__p);
  uint64_t v6 = *((void *)this + 58);
  size_t v7 = (RTPManager *)*((void *)this + 28);
  uint64_t v8 = (*(uint64_t (**)(MediaSessionHandover *))(*(void *)this + 176))(this);
  uint64_t v9 = RTPManager::sessionMobileOriginated(v7, v8);
  uint64_t v10 = (RTPManager *)*((void *)this + 28);
  (*(void (**)(MediaSessionHandover *))(*(void *)this + 176))(this);
  RTPManager::interfaceForSession(v10, v25);
  uint64_t v11 = (RTPManager *)*((void *)this + 28);
  uint64_t v12 = (*(uint64_t (**)(MediaSessionHandover *))(*(void *)this + 176))(this);
  RTPManager::awdCallIdForSession(v11, v12, v23);
  uint64_t v13 = *((unsigned int *)this + 127);
  uint64_t v14 = (RTPManager *)*((void *)this + 28);
  uint64_t v15 = (*(uint64_t (**)(MediaSessionHandover *))(*(void *)this + 176))(this);
  RTPManager::sdpSessionForSession(v14, v15, &v16);
  uint64_t v18 = v16;
  uint64_t v19 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void **, uint64_t, void **, void **, uint64_t, uint64_t *))(*(void *)v6 + 16))(v6, &__p, v9, v25, v23, v13, &v18);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  (*(void (**)(void, char *, void))(**((void **)this + 58) + 48))(*((void *)this + 58), (char *)this + 508, 0);
  if (*((unsigned char *)this + 512)) {
    (*(void (**)(void, void))(**((void **)this + 58) + 32))(*((void *)this + 58), 0);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
}

void sub_1C5306CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, std::__shared_weak_count *a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a13) {
    std::__shared_weak_count::__release_weak(a13);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v25 - 49) < 0) {
    operator delete(*(void **)(v25 - 72));
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionHandover::handleMediaSessionInitialized(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v23, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  uint64_t v6 = ims::debug((uint64_t)v23, (uint64_t)v21);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleMediaSessionInitialized", 29);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"[session=", 9);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" _handoverState=", 16);
  *(unsigned char *)(v7 + 17) = 0;
  MediaSessionHandover::nameForHandoverState(__p, a1[54]);
  (*(void (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" _sessionConfigured=", 20);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  int v10 = a1[54];
  if (v10 == 1)
  {
    (*(void (**)(_DWORD *, void))(*(void *)a1 + 32))(a1, 0);
  }
  else
  {
    if (a3 || !v10)
    {
      uint64_t v11 = *((void *)a1 + 28);
      uint64_t v12 = (std::__shared_weak_count *)a2[1];
      uint64_t v17 = *a2;
      uint64_t v18 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v11 + 56))(v11, &v17, a3);
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
    }
    if (a1[54])
    {
      if (!*((unsigned char *)a1 + 440) || !*((unsigned char *)a1 + 441))
      {
        MediaSessionHandover::handoverComplete((uint64_t)a1, 0);
        if (a1[54] == 4) {
          unsigned int v13 = 5;
        }
        else {
          unsigned int v13 = 3;
        }
        MediaSessionHandover::setHandoverState((uint64_t)a1, v13);
      }
    }
    else
    {
      uint64_t v14 = (std::__shared_weak_count *)*((void *)a1 + 18);
      if (v14)
      {
        uint64_t v15 = *((void *)a1 + 17);
        atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v16 = std::__shared_weak_count::lock(v14);
        std::__shared_weak_count::__release_weak(v14);
        if (v16)
        {
          if (v15 && ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 72))(v15) & 1) == 0) {
            MediaSessionHandover::createNewSession((MediaSessionHandover *)a1);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
      }
    }
  }
}

void sub_1C5307104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void *MediaSessionHandover::nameForHandoverState(void *a1, unsigned int a2)
{
  if (a2 > 5) {
    uint64_t v2 = "Unknown";
  }
  else {
    uint64_t v2 = off_1E650F8C0[a2];
  }
  return std::string::basic_string[abi:ne180100]<0>(a1, v2);
}

void MediaSessionHandover::setHandoverState(uint64_t a1, unsigned int a2)
{
  std::string::basic_string[abi:ne180100]<0>(v14, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v14, (uint64_t)__p);
  size_t v5 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"setHandoverState", 16);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" [oldState=", 11);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" newState=", 10);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(v14[0]);
  }
  if (*(_DWORD *)(a1 + 216) != a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "rtp.handover");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::info((uint64_t)v14, (uint64_t)__p);
    size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"::", 2);
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"setHandoverState", 16);
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" Handover state changed from ", 29);
    *(unsigned char *)(v6 + 17) = 0;
    MediaSessionHandover::nameForHandoverState(v10, *(_DWORD *)(a1 + 216));
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" to ", 4);
    *(unsigned char *)(v6 + 17) = 0;
    MediaSessionHandover::nameForHandoverState(v8, a2);
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 32))(v6, v8);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    *(_DWORD *)(a1 + 216) = a2;
  }
}

void sub_1C53074FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionHandover::createNewSession(MediaSessionHandover *this)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(&v84, "");
  uint64_t v2 = ims::debug((uint64_t)&__p, (uint64_t)&v84);
  size_t v3 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v3);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"createNewSession", 16);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v86 < 0) {
    operator delete(v84);
  }
  if (SHIBYTE(v83) < 0) {
    operator delete(__p);
  }
  uint64_t v79 = 0;
  v80 = 0;
  RTPManager::sdpSessionForSession(*((RTPManager **)this + 28), *((void *)this + 54), &v79);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 17);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (v6) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 57);
  *((void *)this + 56) = v7;
  *((void *)this + 57) = v6;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  MediaSessionHandover::setHandoverState((uint64_t)this, 2u);
  char v9 = (unsigned char *)v79;
  if (v79)
  {
    int v10 = (*(uint64_t (**)(void))(**((void **)this + 56) + 104))(*((void *)this + 56));
    if (v10 == 2)
    {
      if (v9[584])
      {
        char v11 = v9 + 152;
        goto LABEL_28;
      }
    }
    else if (v10 == 6 && v9[1856])
    {
      char v11 = v9 + 1496;
      goto LABEL_28;
    }
    char v15 = v9[1328];
    if (!v15) {
      goto LABEL_29;
    }
    char v11 = v9 + 1032;
LABEL_28:
    char v15 = *((unsigned __int16 *)v11 + 15) != 255;
LABEL_29:
    *((unsigned char *)this + 440) = v15;
    uint64_t v16 = (const void *)*((void *)this + 56);
    if (v16)
    {
      uint64_t v18 = v17;
      if (v17)
      {
        uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 57);
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v19 = (*(uint64_t (**)(MediaSessionStateMachine *))(*(void *)v17 + 240))(v17) ^ 1;
LABEL_37:
        std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
        std::string::basic_string[abi:ne180100]<0>(&v84, "");
        uint64_t v20 = ims::debug((uint64_t)&__p, (uint64_t)&v84);
        size_t v21 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v21);
        *(unsigned char *)(v20 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"::", 2);
        *(unsigned char *)(v20 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"createNewSession", 16);
        *(unsigned char *)(v20 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" [isAutoStart=", 14);
        *(unsigned char *)(v20 + 17) = 0;
        if (*((unsigned char *)v18 + 301) && *((unsigned char *)v18 + 302)) {
          (*(void (**)(MediaSessionStateMachine *))(*(void *)v18 + 144))(v18);
        }
        std::ostream::operator<<();
        *(unsigned char *)(v20 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" oldSessionActive=", 18);
        *(unsigned char *)(v20 + 17) = 0;
        (*(void (**)(void))(**((void **)this + 56) + 80))(*((void *)this + 56));
        std::ostream::operator<<();
        *(unsigned char *)(v20 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" isDelayedStart=", 16);
        *(unsigned char *)(v20 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v20 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v20 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v20 + 17) = 0;
        if (v86 < 0) {
          operator delete(v84);
        }
        if (SHIBYTE(v83) < 0)
        {
          operator delete(__p);
          if (!v19) {
            goto LABEL_49;
          }
        }
        else if (!v19)
        {
          goto LABEL_49;
        }
        if (!*((unsigned char *)v18 + 301)
          || !*((unsigned char *)v18 + 302)
          || (*(unsigned int (**)(MediaSessionStateMachine *))(*(void *)v18 + 144))(v18) != 2)
        {
          char v22 = *((unsigned char *)v18 + 136) == 2;
LABEL_51:
          *((unsigned char *)this + 441) = v22;
          std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
          std::string::basic_string[abi:ne180100]<0>(&v84, "");
          uint64_t v23 = ims::debug((uint64_t)&__p, (uint64_t)&v84);
          size_t v24 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v24);
          *(unsigned char *)(v23 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"::", 2);
          *(unsigned char *)(v23 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"createNewSession", 16);
          *(unsigned char *)(v23 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" creating new RTP session on destination stack", 46);
          *(unsigned char *)(v23 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v23 + 17) = 0;
          if (v86 < 0) {
            operator delete(v84);
          }
          if (SHIBYTE(v83) < 0) {
            operator delete(__p);
          }
          uint64_t v25 = *((void *)this + 22);
          RTPSharedPointerBase::getShared<MediaSessionHandover>((void **)&v84, (uint64_t)this);
          char v26 = v85;
          if (v84) {
            uint64_t v27 = v84 + 160;
          }
          else {
            uint64_t v27 = 0;
          }
          long long v77 = v27;
          char v78 = v85;
          if (v85) {
            atomic_fetch_add_explicit(&v85->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v28 = *((void *)this + 54);
          uint64_t v75 = v79;
          uint64_t v76 = v80;
          if (v80) {
            atomic_fetch_add_explicit(&v80->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v29 = (*(uint64_t (**)(void))(**((void **)this + 56) + 104))(*((void *)this + 56));
          uint64_t v30 = *((void *)this + 56);
          char v31 = *(NSObject **)(v30 + 48);
          dispatch_object_t object = v31;
          if (v31) {
            dispatch_retain(v31);
          }
          (*(void (**)(void **__return_ptr, uint64_t, char **, uint64_t, uint64_t *, uint64_t, uint64_t, dispatch_object_t *))(*(void *)v25 + 40))(&__p, v25, &v77, v28, &v75, v29, v30 + 56, &object);
          std::string v32 = v82;
          if (__p) {
            uint64_t v33 = (char *)__p + 24;
          }
          else {
            uint64_t v33 = 0;
          }
          std::string __p = 0;
          v82 = 0;
          long long v34 = (std::__shared_weak_count *)*((void *)this + 59);
          *((void *)this + 58) = v33;
          *((void *)this + 59) = v32;
          if (v34)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v34);
            if (v82) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v82);
            }
          }
          if (object) {
            dispatch_release(object);
          }
          if (v76) {
            std::__shared_weak_count::__release_weak(v76);
          }
          if (v78) {
            std::__shared_weak_count::__release_weak(v78);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          uint64_t v35 = v79;
          long long v36 = *(std::__shared_weak_count **)(v79 + 128);
          if (v36)
          {
            long long v36 = std::__shared_weak_count::lock(v36);
            int v37 = v36;
            if (v36) {
              long long v36 = *(std::__shared_weak_count **)(v35 + 120);
            }
          }
          else
          {
            int v37 = 0;
          }
          uint64_t v38 = (ImsPrefs *)SipStack::prefs((SipStack *)v36);
          UseRTPDetectionAutoStartKey = (void **)ImsPrefs::getUseRTPDetectionAutoStartKey(v38);
          int v40 = ImsPrefs::BOOLValue(v38, UseRTPDetectionAutoStartKey);
          if (v37) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v37);
          }
          if (v40)
          {
            char v41 = (const void *)*((void *)this + 58);
            if (v41)
            {
              if (v42)
              {
                int v43 = (std::__shared_weak_count *)*((void *)this + 59);
                if (v43) {
                  atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                v42[316] = MediaSessionStateMachine::startConditionsMet(v18);
                if (v43) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v43);
                }
              }
            }
          }
          int v44 = (std::__shared_weak_count *)*((void *)this + 59);
          uint64_t v73 = *((void *)this + 58);
          long long v74 = v44;
          if (v44) {
            atomic_fetch_add_explicit(&v44->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          MediaSessionQueue::setQueuedInterface(this, &v73);
          if (v74) {
            std::__shared_weak_count::__release_weak(v74);
          }
          if (*((unsigned char *)v18 + 301)
            && *((unsigned char *)v18 + 302)
            && (*(unsigned int (**)(MediaSessionStateMachine *))(*(void *)v18 + 144))(v18) == 2
            && (!*((unsigned char *)v18 + 301)
             || !*((unsigned char *)v18 + 302)
             || (*(unsigned int (**)(MediaSessionStateMachine *))(*(void *)v18 + 144))(v18) != 2
             || !*((unsigned char *)this + 441)))
          {
            goto LABEL_113;
          }
          if (*(_DWORD *)(*((void *)this + 22) + 40) == 1)
          {
            dispatch_object_t object = 0;
            long long v72 = 0;
            RTPManager::addressForSession(*((RTPManager **)this + 28), *((void *)this + 54), &object);
            uint64_t v45 = *((void *)this + 58);
            uint64_t v46 = RTPManager::sessionMobileOriginated(*((RTPManager **)this + 28), *((void *)this + 54));
            RTPManager::interfaceForSession(*((RTPManager **)this + 28), &__p);
            RTPManager::awdCallIdForSession(*((RTPManager **)this + 28), *((void *)this + 54), &v84);
            uint64_t v47 = (*(uint64_t (**)(void))(**((void **)this + 56) + 96))(*((void *)this + 56));
            uint64_t v69 = v79;
            long long v70 = v80;
            if (v80) {
              atomic_fetch_add_explicit(&v80->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, dispatch_object_t *, uint64_t, void **, char **, uint64_t, uint64_t *))(*(void *)v45 + 16))(v45, &object, v46, &__p, &v84, v47, &v69);
            char v48 = v70;
            if (!v70) {
              goto LABEL_107;
            }
            goto LABEL_106;
          }
          int v52 = *((unsigned __int8 *)this + 441);
          uint64_t v54 = *((void *)this + 56);
          uint64_t v53 = (std::__shared_weak_count *)*((void *)this + 57);
          if (v53) {
            atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(void **__return_ptr))(**(void **)(*((void *)this + 28) + 168) + 80))(&__p);
          unint64_t v55 = v83;
          std::__list_imp<unsigned long long>::clear(&__p);
          if (v55 == 1) {
            goto LABEL_129;
          }
          (*(void (**)(void **__return_ptr))(**(void **)(*((void *)this + 28) + 168) + 80))(&__p);
          unint64_t v62 = v83;
          std::__list_imp<unsigned long long>::clear(&__p);
          if (v62 < 3)
          {
            if (!v52 && !(*(unsigned int (**)(uint64_t))(*(void *)v54 + 88))(v54)) {
              goto LABEL_129;
            }
          }
          else
          {
            if (!v52)
            {
              int v56 = 0;
LABEL_130:
              if (v53) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v53);
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
              std::string::basic_string[abi:ne180100]<0>(&v84, "");
              uint64_t v57 = ims::debug((uint64_t)&__p, (uint64_t)&v84);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"Making a decision to init/config/start the session on BB stack [sessionId=", 74);
              *(unsigned char *)(v57 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v57 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)" switchingPriority=", 19);
              *(unsigned char *)(v57 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v57 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)" _sessionActive=", 16);
              *(unsigned char *)(v57 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v57 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)" paused=", 8);
              *(unsigned char *)(v57 + 17) = 0;
              (*(void (**)(void))(**((void **)this + 56) + 88))(*((void *)this + 56));
              std::ostream::operator<<();
              *(unsigned char *)(v57 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"]", 1);
              *(unsigned char *)(v57 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v57 + 17) = 0;
              if (v86 < 0) {
                operator delete(v84);
              }
              if (SHIBYTE(v83) < 0)
              {
                operator delete(__p);
                if (v56)
                {
LABEL_136:
                  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
                  std::string::basic_string[abi:ne180100]<0>(&v84, "");
                  uint64_t v58 = ims::debug((uint64_t)&__p, (uint64_t)&v84);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v58 + 8), (uint64_t)"Switch stack immediately", 24);
                  *(unsigned char *)(v58 + 17) = 0;
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(unsigned char *)(v58 + 17) = 0;
                  if (v86 < 0) {
                    operator delete(v84);
                  }
                  if (SHIBYTE(v83) < 0) {
                    operator delete(__p);
                  }
                  dispatch_object_t object = 0;
                  long long v72 = 0;
                  RTPManager::addressForSession(*((RTPManager **)this + 28), *((void *)this + 54), &object);
                  uint64_t v59 = *((void *)this + 58);
                  uint64_t v60 = RTPManager::sessionMobileOriginated(*((RTPManager **)this + 28), *((void *)this + 54));
                  RTPManager::interfaceForSession(*((RTPManager **)this + 28), &__p);
                  RTPManager::awdCallIdForSession(*((RTPManager **)this + 28), *((void *)this + 54), &v84);
                  uint64_t v61 = (*(uint64_t (**)(void))(**((void **)this + 56) + 96))(*((void *)this + 56));
                  uint64_t v67 = v79;
                  int v68 = v80;
                  if (v80) {
                    atomic_fetch_add_explicit(&v80->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                  }
                  (*(void (**)(uint64_t, dispatch_object_t *, uint64_t, void **, char **, uint64_t, uint64_t *))(*(void *)v59 + 16))(v59, &object, v60, &__p, &v84, v61, &v67);
                  char v48 = v68;
                  if (!v68) {
                    goto LABEL_107;
                  }
LABEL_106:
                  std::__shared_weak_count::__release_weak(v48);
LABEL_107:
                  if (v86 < 0) {
                    operator delete(v84);
                  }
                  if (SHIBYTE(v83) < 0) {
                    operator delete(__p);
                  }
                  if (v72) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
                  }
LABEL_113:
                  uint64_t v49 = *((void *)this + 58);
                  LODWORD(__p) = (*(uint64_t (**)(void))(**((void **)this + 56) + 96))(*((void *)this + 56));
                  (*(void (**)(uint64_t, void **, void))(*(void *)v49 + 48))(v49, &__p, 0);
                  if (*((unsigned char *)this + 441) && *(_DWORD *)(*((void *)this + 22) + 40) == 2) {
                    (*(void (**)(void, void))(**((void **)this + 58) + 32))(*((void *)this + 58), 0);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
                  std::string::basic_string[abi:ne180100]<0>(&v84, "");
                  uint64_t v50 = ims::debug((uint64_t)&__p, (uint64_t)&v84);
                  size_t v51 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v51);
                  *(unsigned char *)(v50 + 17) = 0;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)"::", 2);
                  *(unsigned char *)(v50 + 17) = 0;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)"createNewSession", 16);
                  *(unsigned char *)(v50 + 17) = 0;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)" terminating old session", 24);
                  *(unsigned char *)(v50 + 17) = 0;
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(unsigned char *)(v50 + 17) = 0;
                  if (v86 < 0) {
                    operator delete(v84);
                  }
                  if (SHIBYTE(v83) < 0) {
                    operator delete(__p);
                  }
                  (*(void (**)(void, void))(**((void **)this + 56) + 24))(*((void *)this + 56), 0);
                  goto LABEL_121;
                }
              }
              else if (v56)
              {
                goto LABEL_136;
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
              std::string::basic_string[abi:ne180100]<0>(&v84, "");
              uint64_t v63 = ims::debug((uint64_t)&__p, (uint64_t)&v84);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v63 + 8), (uint64_t)"Delay stack switching", 21);
              *(unsigned char *)(v63 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v63 + 17) = 0;
              if (v86 < 0) {
                operator delete(v84);
              }
              if (SHIBYTE(v83) < 0) {
                operator delete(__p);
              }
              (*(void (**)(void))(**((void **)this + 56) + 96))(*((void *)this + 56));
              dispatch_object_t object = (dispatch_object_t)*((void *)this + 54);
              std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
              std::string::basic_string[abi:ne180100]<0>(&v84, "");
              uint64_t v65 = ims::debug((uint64_t)&__p, (uint64_t)&v84);
              size_t v66 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v66);
              *(unsigned char *)(v65 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)"::", 2);
              *(unsigned char *)(v65 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)"startTimerForDelayedStackSwitch", 31);
              *(unsigned char *)(v65 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)" [sessionId=", 12);
              *(unsigned char *)(v65 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v65 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)" timeout=", 9);
              *(unsigned char *)(v65 + 17) = 0;
              std::ostream::operator<<();
              *(unsigned char *)(v65 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)"]", 1);
              *(unsigned char *)(v65 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v65 + 17) = 0;
              if (v86 < 0) {
                operator delete(v84);
              }
              if (SHIBYTE(v83) < 0) {
                operator delete(__p);
              }
              ims::detail::to_string_impl<unsigned long long,std::integral_constant<BOOL,false>>::operator()();
            }
            if ((*(uint64_t (**)(uint64_t))(*(void *)v54 + 88))(v54)) {
              goto LABEL_129;
            }
            if (((*(uint64_t (**)(uint64_t))(*(void *)v54 + 88))(v54) & 1) == 0)
            {
LABEL_160:
              int v56 = 0;
              goto LABEL_130;
            }
          }
          if (((*(uint64_t (**)(uint64_t))(*(void *)v54 + 88))(v54) & 1) == 0)
          {
            (*(void (**)(void **__return_ptr))(**(void **)(*((void *)this + 28) + 168) + 80))(&__p);
            unint64_t v64 = v83;
            std::__list_imp<unsigned long long>::clear(&__p);
            if (v64 < 2 || RTPManager::sessionsThatCanChangeMediaStack(*((void *)this + 28)) != 1) {
              goto LABEL_160;
            }
          }
LABEL_129:
          int v56 = 1;
          goto LABEL_130;
        }
LABEL_49:
        char v22 = (*(uint64_t (**)(void))(**((void **)this + 56) + 80))(*((void *)this + 56));
        goto LABEL_51;
      }
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v18 = 0;
    }
    int v19 = 0;
    goto LABEL_37;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(&v84, "");
  uint64_t v12 = ims::warn((uint64_t)&__p, (uint64_t)&v84);
  size_t v13 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v13);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"createNewSession", 16);
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" No SDP session found [sessionId=", 33);
  *(unsigned char *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v12 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (v86 < 0) {
    operator delete(v84);
  }
  if (SHIBYTE(v83) < 0) {
    operator delete(__p);
  }
  MediaSessionHandover::handoverComplete((uint64_t)this, 12);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 57);
  *((void *)this + 56) = 0;
  *((void *)this + 57) = 0;
LABEL_121:
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v80) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v80);
  }
}

void sub_1C5308C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, dispatch_object_t object, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](&__p);
  if (v30)
  {
    std::__shared_weak_count::__release_weak(v30);
    std::__shared_weak_count::__release_weak(v30);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MediaSessionHandover::handleMediaSessionInitialized(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void MediaSessionHandover::handleMediaSessionTerminated(uint64_t a1, void *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v21, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v21, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleMediaSessionTerminated", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  int v10 = *(_DWORD *)(a1 + 216);
  if (v10)
  {
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, void))(*(void *)a1 + 32))(a1, 0);
      return;
    }
  }
  else
  {
    uint64_t v11 = *(void *)(a1 + 224);
    uint64_t v12 = (std::__shared_weak_count *)a2[1];
    uint64_t v17 = *a2;
    uint64_t v18 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v11 + 64))(v11, &v17, a3);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    if (!*(_DWORD *)(a1 + 216))
    {
      MediaSessionHandover::handoverComplete(a1, 0);
      return;
    }
  }
  if (*(_DWORD *)(*(void *)(a1 + 176) + 40) == 1 && *(void *)(a1 + 464))
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "rtp.handover");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v13 = ims::debug((uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Making a decision to start the session on AVC stack [sessionId=", 63);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(void))(*(void *)*a2 + 176))(*a2);
    std::ostream::operator<<();
    *(unsigned char *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" _sessionActive=", 16);
    *(unsigned char *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" paused=", 8);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(void))(**(void **)(a1 + 464) + 88))(*(void *)(a1 + 464));
    std::ostream::operator<<();
    *(unsigned char *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    (*(void (**)(void, void))(**(void **)(a1 + 464) + 32))(*(void *)(a1 + 464), 0);
    if (!*(unsigned char *)(a1 + 441))
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "rtp.handover");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v14 = ims::debug((uint64_t)v21, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Pausing inactive session", 24);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      if (v20 < 0) {
        operator delete(__p[0]);
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
      uint64_t v15 = *(void *)(a1 + 464);
      LODWORD(v21[0]) = 4;
      (*(void (**)(uint64_t, void **, void))(*(void *)v15 + 48))(v15, v21, 0);
    }
  }
  if (*(_DWORD *)(a1 + 216) == 3) {
    unsigned int v16 = 5;
  }
  else {
    unsigned int v16 = 4;
  }
  MediaSessionHandover::setHandoverState(a1, v16);
}

void sub_1C53093A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MediaSessionHandover::handleMediaSessionTerminated(uint64_t a1, void *a2, uint64_t a3)
{
}

void MediaSessionHandover::handleMediaSessionConfigured(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v20, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleMediaSessionConfigured", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0)
  {
    operator delete(v20[0]);
    if (a3) {
      goto LABEL_9;
    }
  }
  else if (a3)
  {
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 216))
  {
LABEL_14:
    if (!*(unsigned char *)(a1 + 441))
    {
      MediaSessionHandover::handoverComplete(a1, 0);
      if (*(_DWORD *)(a1 + 216) == 4) {
        unsigned int v12 = 5;
      }
      else {
        unsigned int v12 = 3;
      }
      MediaSessionHandover::setHandoverState(a1, v12);
    }
    return;
  }
LABEL_9:
  uint64_t v10 = *(void *)(a1 + 224);
  uint64_t v11 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v10 + 72))(v10, &v16, a3);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*(_DWORD *)(a1 + 216)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 144);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 136);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = std::__shared_weak_count::lock(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15)
    {
      if (v14 && ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 72))(v14) & 1) == 0) {
        MediaSessionHandover::createNewSession((MediaSessionHandover *)a1);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1C53096C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MediaSessionHandover::handleMediaSessionConfigured(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void MediaSessionHandover::handleMediaSessionActivated(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v20, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v20, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleMediaSessionActivated", 27);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0)
  {
    operator delete(v20[0]);
    if (a3) {
      goto LABEL_9;
    }
  }
  else if (a3)
  {
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 216))
  {
LABEL_14:
    MediaSessionHandover::handoverComplete(a1, 0);
    if (*(_DWORD *)(a1 + 216) == 4) {
      unsigned int v12 = 5;
    }
    else {
      unsigned int v12 = 3;
    }
    MediaSessionHandover::setHandoverState(a1, v12);
    return;
  }
LABEL_9:
  uint64_t v10 = *(void *)(a1 + 224);
  uint64_t v11 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = *a2;
  uint64_t v17 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v10 + 80))(v10, &v16, a3);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (*(_DWORD *)(a1 + 216)) {
    goto LABEL_14;
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 144);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 136);
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v15 = std::__shared_weak_count::lock(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (v15)
    {
      if (v14 && ((*(uint64_t (**)(uint64_t))(*(void *)v14 + 72))(v14) & 1) == 0) {
        MediaSessionHandover::createNewSession((MediaSessionHandover *)a1);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
}

void sub_1C53099E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MediaSessionHandover::handleMediaSessionActivated(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void MediaSessionHandover::handleMediaSessionDeactivated(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v19, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v19, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*(void *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleMediaSessionDeactivated", 29);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (!*(_DWORD *)(a1 + 216))
  {
    uint64_t v10 = *(void *)(a1 + 224);
    uint64_t v11 = (std::__shared_weak_count *)a2[1];
    uint64_t v15 = *a2;
    uint64_t v16 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v10 + 88))(v10, &v15, a3);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    unsigned int v12 = *(std::__shared_weak_count **)(a1 + 144);
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 136);
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = std::__shared_weak_count::lock(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v14)
      {
        if (v13)
        {
          if (((*(uint64_t (**)(uint64_t))(*(void *)v13 + 72))(v13) & 1) == 0) {
            MediaSessionHandover::createNewSession((MediaSessionHandover *)a1);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
  }
}

void sub_1C5309CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MediaSessionHandover::handleMediaSessionDeactivated(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void MediaSessionHandover::handleMediaSessionMediaError(void *a1, uint64_t *a2, uint64_t a3)
{
  std::string::basic_string[abi:ne180100]<0>(v16, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v6 = ims::debug((uint64_t)v16, (uint64_t)__p);
  if (!a1) {
    __cxa_bad_typeid();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void **)(v6 + 8);
  size_t v9 = strlen((const char *)(*(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(void *)(*(void *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleMediaSessionMediaError", 28);
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" [session=", 10);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" error=", 7);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  if (*a2 == a1[58])
  {
    uint64_t v10 = a1[28];
    uint64_t v11 = (std::__shared_weak_count *)a2[1];
    uint64_t v12 = *a2;
    uint64_t v13 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v10 + 96))(v10, &v12, a3);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    MediaSessionHandover::handoverComplete((uint64_t)a1, 9);
  }
}

void sub_1C5309F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MediaSessionHandover::handleMediaSessionMediaError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void MediaSessionHandover::cancelTimerForDelayedStackSwitch(MediaSessionHandover *this, int a2)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v4 = ims::debug((uint64_t)v10, (uint64_t)__p);
  if (!this) {
    __cxa_bad_typeid();
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void **)(v4 + 8);
  size_t v7 = strlen((const char *)(*(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(void *)(*(void *)(*(void *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"::", 2);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"cancelTimerForDelayedStackSwitch", 32);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  SipTimerContainer::cancelTimer((int8x8_t *)this + 32, (std::string *)this + 20);
  *((unsigned char *)this + 504) = 0;
  if (a2) {
    MediaSessionHandover::completeDelayedStackSwitch(this);
  }
}

void sub_1C530A0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueue::isAudioReady(MediaSessionQueue *this)
{
  size_t v3 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v3 && (uint64_t v4 = std::__shared_weak_count::lock(v3)) != 0)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *((void *)this + 17);
    if (v6) {
      char v1 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 120))(v6);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    char v7 = (v6 == 0) | v1;
  }
  else
  {
    char v7 = 1;
  }
  return v7 & 1;
}

void sub_1C530A1A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionHandover::sessionId(MediaSessionHandover *this)
{
  return *((void *)this + 54);
}

uint64_t MediaSessionQueue::size(MediaSessionQueue *this)
{
  return *((void *)this + 16);
}

uint64_t MediaSessionHandover::canChangeMediaStack(MediaSessionHandover *this)
{
  uint64_t v1 = *((void *)this + 56);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 184))();
  }
  else {
    return 1;
  }
}

void MediaSessionHandover::loggableName(LoggableString *a1@<X8>)
{
}

uint64_t non-virtual thunk to'MediaSessionQueue::isAudioReady(MediaSessionQueue *this)
{
  return MediaSessionQueue::isAudioReady((MediaSessionQueue *)((char *)this - 24));
}

uint64_t non-virtual thunk to'MediaSessionHandover::sessionId(MediaSessionHandover *this)
{
  return *((void *)this + 51);
}

uint64_t non-virtual thunk to'MediaSessionHandover::canChangeMediaStack(MediaSessionHandover *this)
{
  uint64_t v1 = *((void *)this + 53);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 184))();
  }
  else {
    return 1;
  }
}

void non-virtual thunk to'MediaSessionHandover::loggableName(LoggableString *a1@<X8>)
{
}

uint64_t MediaSessionInterface::MediaSessionInterface(uint64_t a1, uint64_t a2, void *a3, long long *a4, dispatch_object_t *a5)
{
  *(void *)a1 = &unk_1F20B7BB0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  uint64_t v7 = a3[1];
  *(void *)(a1 + 32) = *a3;
  *(void *)(a1 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 48) = *a5;
  if (*a5) {
    dispatch_retain(*a5);
  }
  uint64_t v8 = (std::string *)(a1 + 56);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v9 = *a4;
    *(void *)(a1 + 72) = *((void *)a4 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_WORD *)(a1 + 80) = 1;
  return a1;
}

void sub_1C530A304(_Unwind_Exception *exception_object)
{
  size_t v3 = v1[6];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[5];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  _Unwind_Resume(exception_object);
}

void RTPSharedPointerBase::~RTPSharedPointerBase(RTPSharedPointerBase *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

void std::__list_imp<std::pair<MediaSessionQueue::Action,std::weak_ptr<MediaSessionInterface>>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    size_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (std::__shared_weak_count *)v3[4];
        if (v6) {
          std::__shared_weak_count::__release_weak(v6);
        }
        operator delete(v3);
        size_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void ims::detail::to_string_impl<unsigned long long,std::integral_constant<BOOL,false>>::operator()()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C530A4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C1018;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C1018;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20C1018;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C1018;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 240))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C530A744(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C1098;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C1098;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20C1098;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C1098;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 240))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C530A9EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void non-virtual thunk to'BambiTransferTargetParticipant::~BambiTransferTargetParticipant(BambiTransferTargetParticipant *this)
{
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiTransferTargetParticipant *)((char *)this - 16));
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiTransferTargetParticipant *)((char *)this - 24));
}

{
  uint64_t vars8;

  BambiCallParticipant::~BambiCallParticipant((BambiTransferTargetParticipant *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiCallParticipant::~BambiCallParticipant((BambiTransferTargetParticipant *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiCallParticipant::~BambiCallParticipant((BambiTransferTargetParticipant *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

void BambiTransferTargetParticipant::~BambiTransferTargetParticipant(BambiTransferTargetParticipant *this)
{
  BambiCallParticipant::~BambiCallParticipant(this);
  JUMPOUT(0x1C878E320);
}

double BambiTransferTargetParticipant::refer@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BambiCallParticipant::setState(a1, 6, 1);
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

void *BambiTransferTargetParticipant::logPrefix(BambiTransferTargetParticipant *this, ImsOutStream *a2)
{
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"TransferTargetParticipant: ", 27);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void *non-virtual thunk to'BambiTransferTargetParticipant::logPrefix(BambiTransferTargetParticipant *this, ImsOutStream *a2)
{
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"TransferTargetParticipant: ", 27);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void non-virtual thunk to'BambiTransfereeParticipant::~BambiTransfereeParticipant(BambiTransfereeParticipant *this)
{
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiTransfereeParticipant *)((char *)this - 16));
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiTransfereeParticipant *)((char *)this - 24));
}

{
  uint64_t vars8;

  BambiCallParticipant::~BambiCallParticipant((BambiTransfereeParticipant *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiCallParticipant::~BambiCallParticipant((BambiTransfereeParticipant *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiCallParticipant::~BambiCallParticipant((BambiTransfereeParticipant *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

void BambiTransfereeParticipant::~BambiTransfereeParticipant(BambiTransfereeParticipant *this)
{
  BambiCallParticipant::~BambiCallParticipant(this);
  JUMPOUT(0x1C878E320);
}

void BambiTransfereeParticipant::handleSessionTerminationEvent(uint64_t a1, uint64_t a2)
{
  if (*(int *)(a1 + 240) >= 4)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a1 + 152);
    if (v3)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        uint64_t v6 = v5;
        if (a2)
        {
          uint64_t v7 = *(void *)(a1 + 144);
          if (v7)
          {
            if (*(int *)(a2 + 40) <= 9)
            {
              uint64_t v8 = *(std::__shared_weak_count **)(a2 + 24);
              if (v8)
              {
                uint64_t v9 = *(void *)(a2 + 16);
                atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                uint64_t v10 = std::__shared_weak_count::lock(v8);
                if (v10)
                {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
                  std::__shared_weak_count::__release_weak(v8);
                  if (v9 == v7 && *(_DWORD *)(v7 + 1816) <= 1u) {
                    *(_DWORD *)(v7 + 1816) = 2;
                  }
                }
                else
                {
                  std::__shared_weak_count::__release_weak(v8);
                }
              }
            }
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
}

void *BambiTransfereeParticipant::logPrefix(BambiTransfereeParticipant *this, ImsOutStream *a2)
{
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"TransfereeParticipant: ", 23);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void *non-virtual thunk to'BambiTransfereeParticipant::logPrefix(BambiTransfereeParticipant *this, ImsOutStream *a2)
{
  double result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"TransfereeParticipant: ", 23);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

uint64_t BambiTransferHandler::BambiTransferHandler(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F20C1818;
  *(void *)(a1 + 8) = &unk_1F20C1848;
  std::string::basic_string[abi:ne180100]<0>(&v10, "bambi.ect");
  uint64_t v6 = *a2;
  if (*(char *)(*a2 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 4160), *(void *)(v6 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v6 + 4160);
  }
  ImsLogContainer::ImsLogContainer(a1 + 16, &v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)a1 = &unk_1F20C1620;
  *(void *)(a1 + 8) = &unk_1F20C1668;
  *(void *)(a1 + 16) = &unk_1F20C1690;
  *(void *)(a1 + 120) = &unk_1F20C16F0;
  *(void *)(a1 + 144) = *a2;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 152) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(void *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 160) = a3;
  *(void *)(a1 + 168) = &unk_1F20C1870;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 272));
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 376) = a1 + 120;
  return a1;
}

void sub_1C530B068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiTransferStateMachine::~BambiTransferStateMachine(BambiTransferStateMachine *this)
{
  *(void *)this = &unk_1F20C1870;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  SipSimpleStateMachine<BambiTransferState>::~SipSimpleStateMachine((uint64_t)this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20C1870;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  SipSimpleStateMachine<BambiTransferState>::~SipSimpleStateMachine((uint64_t)this);
  JUMPOUT(0x1C878E320);
}

void BambiTransferHandler::constructStateMachine(BambiTransferHandler *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 18);
      if (!v5)
      {
LABEL_49:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
      uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 17);
      if (!v6 || (uint64_t v7 = *((void *)this + 16), (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v9 = v8;
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::string v10 = (std::__shared_weak_count *)*((void *)this + 33);
      *((void *)this + 32) = v7;
      *((void *)this + 33) = v9;
      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
      char v11 = (std::__shared_weak_count *)*((void *)this + 17);
      if (v11)
      {
        uint64_t v12 = *((void *)this + 16);
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v13 = std::__shared_weak_count::lock(v11);
        uint64_t v14 = v13;
        if (v13)
        {
          atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_weak(v11);
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          char v15 = 0;
          atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          goto LABEL_14;
        }
        std::__shared_weak_count::__release_weak(v11);
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v12 = 0;
      char v15 = 1;
LABEL_14:
      uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 31);
      *((void *)this + 30) = v12;
      *((void *)this + 31) = v14;
      if (v16) {
        std::__shared_weak_count::__release_weak(v16);
      }
      if ((v15 & 1) == 0) {
        std::__shared_weak_count::__release_weak(v14);
      }
      char v17 = (_OWORD *)(v5 + 4160);
      char v18 = (char *)(v5 + 4183);
      if (*(char *)(v5 + 4183) < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
      }
      else
      {
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *v17;
        v31.__r_.__value_.__r.__words[2] = *(void *)(v5 + 4176);
      }
      char v19 = (std::__shared_weak_count *)operator new(0x160uLL);
      v19->__shared_owners_ = 0;
      v19->__shared_weak_owners_ = 0;
      v19->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1A70;
      char v20 = v19 + 1;
      uint64_t v33 = v7;
      long long v34 = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      BambiTransferWaitingForHoldState::BambiTransferWaitingForHoldState((SipState *)&v19[1], &v33, &v31);
      char v21 = (char *)this + 168;
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      shared_weak_owners = (std::__shared_weak_count *)v19[13].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        if (shared_weak_owners->__shared_owners_ != -1) {
          goto LABEL_26;
        }
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v19[13].__shared_owners_ = (uint64_t)v20;
        v19[13].__shared_weak_owners_ = (uint64_t)v19;
        std::__shared_weak_count::__release_weak(shared_weak_owners);
      }
      else
      {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v19[13].__shared_owners_ = (uint64_t)v20;
        v19[13].__shared_weak_owners_ = (uint64_t)v19;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
LABEL_26:
      v32[0] = v19 + 1;
      v32[1] = v19;
      SipTypedStateMachine<BambiTransferState>::addState((uint64_t)v21, v32);
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (*v18 < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
      }
      else
      {
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *v17;
        v31.__r_.__value_.__r.__words[2] = *(void *)(v5 + 4176);
      }
      uint64_t v23 = (std::__shared_weak_count *)operator new(0x160uLL);
      v23->__shared_owners_ = 0;
      v23->__shared_weak_owners_ = 0;
      v23->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1AC0;
      size_t v24 = v23 + 1;
      uint64_t v33 = v7;
      long long v34 = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      BambiTransferTransferRequestedState::BambiTransferTransferRequestedState((SipState *)&v23[1], &v33, &v31);
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v25 = (std::__shared_weak_count *)v23[13].__shared_weak_owners_;
      if (v25)
      {
        if (v25->__shared_owners_ != -1) {
          goto LABEL_36;
        }
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v23[13].__shared_owners_ = (uint64_t)v24;
        v23[13].__shared_weak_owners_ = (uint64_t)v23;
        std::__shared_weak_count::__release_weak(v25);
      }
      else
      {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v23[13].__shared_owners_ = (uint64_t)v24;
        v23[13].__shared_weak_owners_ = (uint64_t)v23;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
LABEL_36:
      v30[0] = v23 + 1;
      v30[1] = v23;
      SipTypedStateMachine<BambiTransferState>::addState((uint64_t)v21, v30);
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (*v18 < 0)
      {
        std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v5 + 4160), *(void *)(v5 + 4168));
      }
      else
      {
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *v17;
        v31.__r_.__value_.__r.__words[2] = *(void *)(v5 + 4176);
      }
      char v26 = (std::__shared_weak_count *)operator new(0x160uLL);
      v26->__shared_owners_ = 0;
      v26->__shared_weak_owners_ = 0;
      v26->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1B10;
      uint64_t v27 = v26 + 1;
      uint64_t v33 = v7;
      long long v34 = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      BambiTransferTransferCompleteState::BambiTransferTransferCompleteState((SipState *)&v26[1], &v33, &v31);
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v28 = (std::__shared_weak_count *)v26[13].__shared_weak_owners_;
      if (v28)
      {
        if (v28->__shared_owners_ != -1)
        {
LABEL_46:
          v29[0] = v26 + 1;
          v29[1] = v26;
          SipTypedStateMachine<BambiTransferState>::addState((uint64_t)v21, v29);
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v31.__r_.__value_.__l.__data_);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          goto LABEL_49;
        }
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v26[13].__shared_owners_ = (uint64_t)v27;
        v26[13].__shared_weak_owners_ = (uint64_t)v26;
        std::__shared_weak_count::__release_weak(v28);
      }
      else
      {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v26[13].__shared_owners_ = (uint64_t)v27;
        v26[13].__shared_weak_owners_ = (uint64_t)v26;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      goto LABEL_46;
    }
  }
}

void sub_1C530B578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void sub_1C530B5F8()
{
}

void SipTypedStateMachine<BambiTransferState>::addState(uint64_t a1, void *a2)
{
  if (!*a2) {
    return;
  }
  unsigned int v4 = (*(uint64_t (**)(void))(*(void *)*a2 + 48))(*a2);
  unsigned int v5 = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)(a1 + 24);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = v4;
      if (v7 <= v4) {
        unint64_t v9 = v4 % v7;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v4;
    }
    std::string v10 = *(void ***)(*(void *)(a1 + 16) + 8 * v9);
    if (v10)
    {
      for (i = *v10; i; i = *(void **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == v4)
        {
          if (*((_DWORD *)i + 4) == v4) {
            goto LABEL_75;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v12 >= v7) {
              v12 %= v7;
            }
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v13 = (void *)(a1 + 32);
  i = operator new(0x28uLL);
  *(void *)i = 0;
  *((void *)i + 1) = v6;
  *((_DWORD *)i + 4) = v5;
  *((void *)i + 3) = 0;
  *((void *)i + 4) = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v15 = *(float *)(a1 + 48);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v6 = v9;
    goto LABEL_65;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *(void *)(a1 + 24);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_61;
    }
    unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
    if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *(void *)(a1 + 24);
      goto LABEL_61;
    }
    if (!*(void *)&prime)
    {
      uint64_t v38 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      if (v38) {
        operator delete(v38);
      }
      unint64_t v7 = 0;
      *(void *)(a1 + 24) = 0;
      goto LABEL_61;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  char v20 = operator new(8 * *(void *)&prime);
  char v21 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0;
  *(int8x8_t *)(a1 + 24) = prime;
  do
    *(void *)(*(void *)(a1 + 16) + 8 * v22++) = 0;
  while (*(void *)&prime != v22);
  uint64_t v23 = (void *)*v13;
  if (*v13)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }
    else
    {
      v24 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v24) = v13;
    uint64_t v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          uint64_t v31 = *(void *)(a1 + 16);
          if (!*(void *)(v31 + 8 * v30))
          {
            *(void *)(v31 + 8 * v30) = v23;
            goto LABEL_57;
          }
          void *v23 = *v29;
          void *v29 = **(void **)(*(void *)(a1 + 16) + 8 * v30);
          **(void **)(*(void *)(a1 + 16) + 8 * v30) = v29;
          uint64_t v29 = v23;
        }
        unint64_t v30 = v24;
LABEL_57:
        uint64_t v23 = v29;
        uint64_t v29 = (void *)*v29;
        unint64_t v24 = v30;
      }
      while (v29);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_61:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_65:
  uint64_t v32 = *(void *)(a1 + 16);
  uint64_t v33 = *(void **)(v32 + 8 * v6);
  if (v33)
  {
    *(void *)i = *v33;
  }
  else
  {
    *(void *)i = *v13;
    void *v13 = i;
    *(void *)(v32 + 8 * v6) = v13;
    if (!*(void *)i) {
      goto LABEL_74;
    }
    unint64_t v34 = *(void *)(*(void *)i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v34 >= v7) {
        v34 %= v7;
      }
    }
    else
    {
      v34 &= v7 - 1;
    }
    uint64_t v33 = (void *)(*(void *)(a1 + 16) + 8 * v34);
  }
  *uint64_t v33 = i;
LABEL_74:
  ++*(void *)(a1 + 40);
LABEL_75:
  uint64_t v36 = *a2;
  uint64_t v35 = a2[1];
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  int v37 = (std::__shared_weak_count *)*((void *)i + 4);
  *((void *)i + 3) = v36;
  *((void *)i + 4) = v35;
  if (v37)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
}

void sub_1C530BA58(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

void BambiTransferHandler::create(void *a1@<X0>, uint64_t a2@<X1>, BambiTransferHandler **a3@<X8>)
{
  uint64_t v4 = a2;
  *a3 = 0;
  a3[1] = 0;
  std::allocate_shared[abi:ne180100]<BambiTransferHandler,std::allocator<BambiTransferHandler>,std::shared_ptr<SipStack> &,BambiTransferHandlerDelegate *&,void>(a1, &v4, a3);
  BambiTransferHandler::constructStateMachine(*a3);
}

void sub_1C530BAC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void BambiTransferHandler::~BambiTransferHandler(BambiTransferHandler *this)
{
  *(void *)this = &unk_1F20C1620;
  *((void *)this + 1) = &unk_1F20C1668;
  uint64_t v2 = (char *)this + 16;
  *((void *)this + 2) = &unk_1F20C1690;
  *((void *)this + 15) = &unk_1F20C16F0;
  uint64_t v3 = ImsLogContainer::debugStream((BambiTransferHandler *)((char *)this + 16));
  (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"BambiTransferHandler::~BambiTransferHandler", 43);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  BambiTransferHandler::removeParticipant(this, 0);
  BambiTransferHandler::removeParticipant(this, 1u);
  uint64_t v4 = *((void *)this + 52);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 53);
    unint64_t v6 = (void *)*((void *)this + 52);
    if (v5 != v4)
    {
      do
      {
        unint64_t v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v5 -= 16;
      }
      while (v5 != v4);
      unint64_t v6 = (void *)*((void *)this + 52);
    }
    *((void *)this + 53) = v4;
    operator delete(v6);
  }
  SipTimerContainer::~SipTimerContainer((BambiTransferHandler *)((char *)this + 272));
  *((void *)this + 21) = &unk_1F20C1870;
  uint8x8_t v8 = (std::__shared_weak_count *)*((void *)this + 33);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  SipSimpleStateMachine<BambiTransferState>::~SipSimpleStateMachine((uint64_t)this + 168);
  unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  std::string v10 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  *((void *)this + 2) = &unk_1F20C9CA0;
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t vars8;

  BambiTransferHandler::~BambiTransferHandler(this);
  JUMPOUT(0x1C878E320);
}

void BambiTransferHandler::removeParticipant(BambiTransferHandler *this, unsigned int a2)
{
  if (a2) {
    uint64_t v4 = "TransferTarget";
  }
  else {
    uint64_t v4 = "Transferee";
  }
  uint64_t v5 = (uint64_t *)(*((void *)this + 52) + 16 * a2);
  uint64_t v7 = *v5;
  unint64_t v6 = (std::__shared_weak_count *)v5[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
    uint8x8_t v8 = *(std::__shared_weak_count **)(v7 + 152);
    if (v8)
    {
      uint64_t v9 = *(void *)(v7 + 144);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::string v10 = std::__shared_weak_count::lock(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (v10)
      {
        if (v9)
        {
          uint64_t v11 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
          (*(void (**)(char *, uint64_t))(*((void *)this + 2) + 16))((char *)this + 16, v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Removing ", 9);
          *(unsigned char *)(v11 + 17) = 0;
          if (a2) {
            uint64_t v12 = 14;
          }
          else {
            uint64_t v12 = 10;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v4, v12);
          *(unsigned char *)(v11 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" reference from call and transfer handler", 41);
          *(unsigned char *)(v11 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v11 + 17) = 0;
          if (v6) {
            atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (*(void *)(v9 + 1480) == v7)
          {
            uint64_t v13 = *(std::__shared_weak_count **)(v9 + 1488);
            *(void *)(v9 + 1480) = 0;
            *(void *)(v9 + 1488) = 0;
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
          }
          if (v6) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v6);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
    float v14 = (void *)(*((void *)this + 52) + 16 * a2);
    float v15 = (std::__shared_weak_count *)v14[1];
    *float v14 = 0;
    v14[1] = 0;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C530BF24(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'BambiTransferHandler::~BambiTransferHandler(BambiTransferHandler *this)
{
}

{
  BambiTransferHandler::~BambiTransferHandler((BambiTransferHandler *)((char *)this - 16));
}

{
  BambiTransferHandler::~BambiTransferHandler((BambiTransferHandler *)((char *)this - 120));
}

{
  uint64_t vars8;

  BambiTransferHandler::~BambiTransferHandler((BambiTransferHandler *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiTransferHandler::~BambiTransferHandler((BambiTransferHandler *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiTransferHandler::~BambiTransferHandler((BambiTransferHandler *)((char *)this - 120));
  JUMPOUT(0x1C878E320);
}

char *BambiTransferHandler::nameForStateId(BambiTransferHandler *this, unsigned int a2)
{
  if (a2 <= 4) {
    unsigned int v2 = a2;
  }
  else {
    unsigned int v2 = 0;
  }
  return &BambiTransferHandler::nameForStateIdconst::stateNames[24 * v2];
}

void BambiTransferHandler::handleParticipantStateChange(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  v35[0] = 0;
  v35[1] = 0;
  uint64_t v36 = 0;
  if (**(void **)(a1 + 416) == *a2) {
    uint8x8_t v8 = "Transferee";
  }
  else {
    uint8x8_t v8 = "TransferTarget";
  }
  std::string::basic_string[abi:ne180100]<0>(v35, v8);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 16) + 16))(a1 + 16, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"BambiTransferHandler::handleParticipantStateChange for ", 55);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v10 + 32))(v10, v35);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  uint64_t v12 = *(void *)(a1 + 224);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 232);
  if (!v11)
  {
    if (!v12) {
      goto LABEL_17;
    }
    uint64_t v13 = 0;
    goto LABEL_10;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  if (!v12) {
    goto LABEL_17;
  }
  uint64_t v12 = *(void *)(a1 + 224);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 232);
  if (!v13)
  {
LABEL_10:
    char v14 = 1;
    goto LABEL_11;
  }
  char v14 = 0;
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_11:
  float v15 = (std::__shared_weak_count *)a2[1];
  uint64_t v33 = *a2;
  unint64_t v34 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v12 + 72))(v12, &v33, a3, a4);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if ((v14 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(&__p, "WaitingForHangup");
  BOOL v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 280), (unsigned __int8 *)&__p);
  BOOL v18 = a4 == 7 && v16 != 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v18) {
      goto LABEL_25;
    }
LABEL_29:
    char v21 = *(uint64_t **)(a1 + 416);
    if (a3 == 6 && a4 == 7 && v21[2] == *a2)
    {
      BambiTransferHandler::removeParticipant((BambiTransferHandler *)a1, 1u);
      goto LABEL_56;
    }
    uint64_t v22 = *v21;
    if (!v22) {
      goto LABEL_56;
    }
    if (v22 != *a2) {
      goto LABEL_56;
    }
    uint64_t v23 = *(std::__shared_weak_count **)(v22 + 152);
    if (!v23) {
      goto LABEL_56;
    }
    uint64_t v24 = *(void *)(v22 + 144);
    atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint8x8_t v25 = std::__shared_weak_count::lock(v23);
    std::__shared_weak_count::__release_weak(v23);
    if (!v25) {
      goto LABEL_56;
    }
    if (!v24) {
      goto LABEL_55;
    }
    switch(a4)
    {
      case 3:
        uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v31);
        uint8x8_t v27 = (unsigned char *)ImsOutStream::operator<<(v31, "Transfer Initialized");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        int v28 = 1;
        break;
      case 6:
        int v28 = 2;
LABEL_53:
        if (*(_DWORD *)(v24 + 1816) <= 1u) {
          *(_DWORD *)(v24 + 1816) = v28;
        }
        goto LABEL_55;
      case 0xA:
        uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v26);
        uint8x8_t v27 = (unsigned char *)ImsOutStream::operator<<(v26, "Transfer Failed");
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        int v28 = 3;
        break;
      default:
LABEL_55:
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        goto LABEL_56;
    }
    v27[17] = 0;
    goto LABEL_53;
  }
  if (!v18) {
    goto LABEL_29;
  }
LABEL_25:
  char v19 = *(void **)(a1 + 416);
  if (!*v19 || *v19 == *a2)
  {
    BambiTransferHandler::removeParticipant((BambiTransferHandler *)a1, 0);
    char v19 = *(void **)(a1 + 416);
    int v20 = 1;
  }
  else
  {
    int v20 = 0;
  }
  uint64_t v29 = v19[2];
  if (!v29 || v29 == *a2)
  {
    BambiTransferHandler::removeParticipant((BambiTransferHandler *)a1, 1u);
    if (v20)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "WaitingForHangup");
      SipTimerContainer::cancelTimer((int8x8_t *)(a1 + 272), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (*(void *)(a1 + 160))
      {
        uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(a1 + 16, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"Transfer complete", 17);
        *(unsigned char *)(v30 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v30 + 17) = 0;
        (*(void (**)(void))(**(void **)(a1 + 160) + 16))(*(void *)(a1 + 160));
      }
    }
  }
LABEL_56:
  if (SHIBYTE(v36) < 0) {
    operator delete(v35[0]);
  }
}

void sub_1C530C624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t SipTypedStateMachine<BambiTransferState>::currentState@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 64);
  *a2 = *(void *)(result + 56);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void non-virtual thunk to'BambiTransferHandler::handleParticipantStateChange(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
}

void BambiTransferHandler::handleStateTransition(BambiTransferHandler *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (char *)this + 16;
  uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))(v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"state transition [", 18);
  *(unsigned char *)(v6 + 17) = 0;
  v5 += 152;
  uint64_t v7 = (const std::string *)SipSimpleStateMachine<BambiTransferState>::nameForStateId((uint64_t)v5, a2);
  LoggableString::LoggableString(&v10, v7);
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 40))(v6, &v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" --> ", 5);
  *(unsigned char *)(v6 + 17) = 0;
  uint8x8_t v8 = (const std::string *)SipSimpleStateMachine<BambiTransferState>::nameForStateId((uint64_t)v5, a3);
  LoggableString::LoggableString(&__p, v8);
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 40))(v6, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_1C530C878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *SipSimpleStateMachine<BambiTransferState>::nameForStateId(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v3) {
    return "Unknown";
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return "Unknown";
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 72);
  if (v7) {
    uint8x8_t v8 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a2);
  }
  else {
    uint8x8_t v8 = "Unknown";
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void sub_1C530C948(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

BambiTransferHandler *BambiTransferHandler::handleTimer(BambiTransferHandler *result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  int v3 = (char)v2;
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2 == 16)
  {
    uint64_t v4 = v3 >= 0 ? (uint64_t *)a2 : *(uint64_t **)a2;
    uint64_t v6 = *v4;
    uint64_t v5 = v4[1];
    if (v6 == 0x46676E6974696157 && v5 == 0x7075676E6148726FLL)
    {
      uint8x8_t v8 = result;
      BambiTransferHandler::endAllCalls(result);
      double result = (BambiTransferHandler *)*((void *)v8 + 20);
      if (result)
      {
        uint64_t v9 = *(uint64_t (**)(void))(*(void *)result + 16);
        return (BambiTransferHandler *)v9();
      }
    }
  }
  return result;
}

void BambiTransferHandler::endAllCalls(BambiTransferHandler *this)
{
  uint64_t v2 = **((void **)this + 52);
  if (v2)
  {
    int v3 = *(std::__shared_weak_count **)(v2 + 152);
    if (v3)
    {
      uint64_t v4 = *(void *)(v2 + 144);
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        std::__shared_weak_count::__release_weak(v3);
        if (v4)
        {
          uint64_t v6 = **((void **)this + 52);
          uint64_t v7 = *(std::__shared_weak_count **)(v6 + 152);
          if (v7)
          {
            uint8x8_t v8 = *(BambiCall **)(v6 + 144);
            atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            uint64_t v9 = std::__shared_weak_count::lock(v7);
            if (!v9) {
              uint8x8_t v8 = 0;
            }
            std::__shared_weak_count::__release_weak(v7);
          }
          else
          {
            uint8x8_t v8 = 0;
            uint64_t v9 = 0;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "TransferredToOtherDevice");
          BambiCall::endWithReason(v8, (uint64_t)__p, (uint64_t)v21);
          ImsResult::~ImsResult((ImsResult *)v21);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
          if (v9) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v9);
          }
        }
      }
      else
      {
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  uint64_t v10 = *(void *)(*((void *)this + 52) + 16);
  if (v10)
  {
    uint64_t v11 = *(std::__shared_weak_count **)(v10 + 152);
    if (v11)
    {
      uint64_t v12 = *(void *)(v10 + 144);
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v13 = std::__shared_weak_count::lock(v11);
      if (v13)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        std::__shared_weak_count::__release_weak(v11);
        if (v12)
        {
          uint64_t v14 = *(void *)(*((void *)this + 52) + 16);
          float v15 = *(std::__shared_weak_count **)(v14 + 152);
          if (v15)
          {
            BOOL v16 = *(BambiCall **)(v14 + 144);
            atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            unint64_t v17 = std::__shared_weak_count::lock(v15);
            if (!v17) {
              BOOL v16 = 0;
            }
            std::__shared_weak_count::__release_weak(v15);
          }
          else
          {
            unint64_t v17 = 0;
            BOOL v16 = 0;
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "TransferredToOtherDevice");
          BambiCall::endWithReason(v16, (uint64_t)__p, (uint64_t)v18);
          ImsResult::~ImsResult((ImsResult *)v18);
          if (v20 < 0) {
            operator delete(__p[0]);
          }
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
        }
      }
      else
      {
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_1C530CBFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiTransferHandler::start(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (*a2 && *a3)
  {
    uint64_t v7 = *(char **)(a1 + 416);
    uint64_t v6 = *(char **)(a1 + 424);
    unint64_t v8 = v6 - v7;
    if ((unint64_t)(v6 - v7) > 0x1F)
    {
      if (v8 != 32)
      {
        uint8x8_t v25 = v7 + 32;
        while (v6 != v25)
        {
          uint64_t v26 = (std::__shared_weak_count *)*((void *)v6 - 1);
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          v6 -= 16;
        }
        *(void *)(a1 + 424) = v25;
      }
    }
    else
    {
      unint64_t v9 = 2 - (v8 >> 4);
      uint64_t v10 = *(void *)(a1 + 432);
      if (v9 <= (v10 - (uint64_t)v6) >> 4)
      {
        bzero(*(void **)(a1 + 424), 16 * v9);
        *(void *)(a1 + 424) = &v6[16 * v9];
      }
      else
      {
        uint64_t v11 = v10 - (void)v7;
        uint64_t v12 = v11 >> 3;
        if ((unint64_t)(v11 >> 3) <= 2) {
          uint64_t v12 = 2;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v14 = v8 >> 4;
        float v15 = (char *)operator new(16 * v13);
        BOOL v16 = &v15[16 * v14];
        unint64_t v17 = &v15[16 * v13];
        bzero(v16, 16 * v9);
        BOOL v18 = &v16[16 * v9];
        if (v6 == v7)
        {
          *(void *)(a1 + 416) = v16;
          *(void *)(a1 + 424) = v18;
          *(void *)(a1 + 432) = v17;
        }
        else
        {
          do
          {
            long long v19 = *((_OWORD *)v6 - 1);
            v6 -= 16;
            *((_OWORD *)v16 - 1) = v19;
            v16 -= 16;
            *(void *)uint64_t v6 = 0;
            *((void *)v6 + 1) = 0;
          }
          while (v6 != v7);
          uint64_t v6 = *(char **)(a1 + 416);
          char v20 = *(char **)(a1 + 424);
          *(void *)(a1 + 416) = v16;
          *(void *)(a1 + 424) = v18;
          *(void *)(a1 + 432) = v17;
          while (v20 != v6)
          {
            char v21 = (std::__shared_weak_count *)*((void *)v20 - 1);
            if (v21) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v21);
            }
            v20 -= 16;
          }
        }
        if (v6) {
          operator delete(v6);
        }
      }
    }
    uint64_t v28 = *a2;
    uint8x8_t v27 = (std::__shared_weak_count *)a2[1];
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v29 = *(std::__shared_weak_count **)(a1 + 136);
    if (v29)
    {
      uint64_t v30 = *(void *)(a1 + 128);
      atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v31 = std::__shared_weak_count::lock(v29);
      uint64_t v32 = v31;
      if (v31)
      {
        if (v30) {
          uint64_t v33 = (void *)(v30 + 8);
        }
        else {
          uint64_t v33 = 0;
        }
        atomic_fetch_add_explicit(&v31->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_weak(v29);
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      else
      {
        std::__shared_weak_count::__release_weak(v29);
        uint64_t v33 = 0;
      }
    }
    else
    {
      uint64_t v33 = 0;
      uint64_t v32 = 0;
    }
    unint64_t v34 = (std::__shared_weak_count *)operator new(0x110uLL);
    uint64_t v35 = v34;
    v34->__shared_owners_ = 0;
    v34->__shared_weak_owners_ = 0;
    v34->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1A20;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v36 = &v34[1].__vftable;
    *(void *)&long long v73 = v28;
    *((void *)&v73 + 1) = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v67 = v33;
    int v68 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    BambiCallParticipant::BambiCallParticipant((uint64_t)&v34[1], &v73, &v67);
    if (v68) {
      std::__shared_weak_count::__release_weak(v68);
    }
    if (*((void *)&v73 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v73 + 1));
    }
    v35[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C13D8;
    v35[1].__shared_owners_ = (uint64_t)&unk_1F20C1458;
    v35[1].__shared_weak_owners_ = (uint64_t)&unk_1F20C1590;
    v35[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C15C0;
    if (v32) {
      std::__shared_weak_count::__release_weak(v32);
    }
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    shared_weak_owners = (std::__shared_weak_count *)v35[6].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1) {
        goto LABEL_61;
      }
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v35[6].__shared_owners_ = (uint64_t)v36;
      v35[6].__shared_weak_owners_ = (uint64_t)v35;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    else
    {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v35[6].__shared_owners_ = (uint64_t)v36;
      v35[6].__shared_weak_owners_ = (uint64_t)v35;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
LABEL_61:
    (*(void (**)(std::__shared_weak_count *))(*v36 + 80))(v35 + 1);
    uint64_t v38 = *(void **)(a1 + 416);
    uint64_t v39 = (std::__shared_weak_count *)v38[1];
    void *v38 = v36;
    v38[1] = v35;
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    if (v32) {
      std::__shared_weak_count::__release_weak(v32);
    }
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    uint64_t v41 = *a3;
    int v40 = (std::__shared_weak_count *)a3[1];
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v42 = *(std::__shared_weak_count **)(a1 + 136);
    if (v42)
    {
      uint64_t v43 = *(void *)(a1 + 128);
      atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      int v44 = std::__shared_weak_count::lock(v42);
      uint64_t v45 = v44;
      if (v44)
      {
        if (v43) {
          uint64_t v46 = (void *)(v43 + 8);
        }
        else {
          uint64_t v46 = 0;
        }
        atomic_fetch_add_explicit(&v44->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_weak(v42);
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      else
      {
        std::__shared_weak_count::__release_weak(v42);
        uint64_t v46 = 0;
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v45 = 0;
    }
    uint64_t v47 = (std::__shared_weak_count *)operator new(0x110uLL);
    char v48 = v47;
    v47->__shared_owners_ = 0;
    v47->__shared_weak_owners_ = 0;
    v47->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C19D0;
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v49 = &v47[1].__vftable;
    *(void *)&long long v73 = v41;
    *((void *)&v73 + 1) = v40;
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v67 = v46;
    int v68 = v45;
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    BambiCallParticipant::BambiCallParticipant((uint64_t)&v47[1], &v73, &v67);
    if (v68) {
      std::__shared_weak_count::__release_weak(v68);
    }
    if (*((void *)&v73 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v73 + 1));
    }
    v48[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1190;
    v48[1].__shared_owners_ = (uint64_t)&unk_1F20C1210;
    v48[1].__shared_weak_owners_ = (uint64_t)&unk_1F20C1348;
    v48[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1378;
    if (v45) {
      std::__shared_weak_count::__release_weak(v45);
    }
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
    uint64_t v50 = (std::__shared_weak_count *)v48[6].__shared_weak_owners_;
    if (v50)
    {
      if (v50->__shared_owners_ != -1) {
        goto LABEL_98;
      }
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v48->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v48[6].__shared_owners_ = (uint64_t)v49;
      v48[6].__shared_weak_owners_ = (uint64_t)v48;
      std::__shared_weak_count::__release_weak(v50);
    }
    else
    {
      atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v48->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v48[6].__shared_owners_ = (uint64_t)v49;
      v48[6].__shared_weak_owners_ = (uint64_t)v48;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
LABEL_98:
    (*(void (**)(std::__shared_weak_count *))(*v49 + 80))(v48 + 1);
    uint64_t v51 = *(void *)(a1 + 416);
    int v52 = *(std::__shared_weak_count **)(v51 + 24);
    *(void *)(v51 + 16) = v49;
    *(void *)(v51 + 24) = v48;
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    if (v45) {
      std::__shared_weak_count::__release_weak(v45);
    }
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
    SipTypedStateMachine<BambiTransferState>::transitionToState((void *)(a1 + 168), 1);
    uint64_t v77 = 0;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v73 = 0u;
    long long v74 = 0u;
    (*(void (**)(long long *__return_ptr))(***(void ***)(a1 + 416) + 96))(&v73);
    if ((*(unsigned int (**)(void, void))(**((void **)&v73 + 1) + 24))(*((void *)&v73 + 1), v74))
    {
      uint64_t v54 = *(void *)(a1 + 16);
      uint64_t v53 = a1 + 16;
      uint64_t v55 = (*(uint64_t (**)(uint64_t))(v54 + 56))(v53);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v53 + 16))(v53, v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"Unable to prepare transferee for transfer: ", 43);
      *(unsigned char *)(v55 + 17) = 0;
      (*(void (**)(long long *, uint64_t))(v73 + 16))(&v73, v55);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      uint64_t v24 = 0;
      *(unsigned char *)(v55 + 17) = 0;
LABEL_115:
      ImsResult::~ImsResult((ImsResult *)&v73);
      return v24;
    }
    int v56 = *(std::__shared_weak_count **)(a1 + 152);
    if (v56)
    {
      uint64_t v57 = std::__shared_weak_count::lock(v56);
      if (v57)
      {
        uint64_t v58 = *(SipStack **)(a1 + 144);
        if (v58)
        {
          uint64_t v59 = *(void *)(*(void *)(a1 + 416) + 16);
          uint64_t v60 = (ImsPrefs *)SipStack::prefs(v58);
          HoldTransferTargetSessionKey = (void **)ImsPrefs::getHoldTransferTargetSessionKey(v60);
          uint64_t v62 = ImsPrefs::BOOLValue(v60, HoldTransferTargetSessionKey);
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v59 + 96))(&v67, v59, v62);
          ImsResult::operator=((uint64_t)&v73, (uint64_t)&v67);
          ImsResult::~ImsResult((ImsResult *)&v67);
          if ((*(unsigned int (**)(void, void))(**((void **)&v73 + 1) + 24))(*((void *)&v73 + 1), v74))
          {
            uint64_t v64 = *(void *)(a1 + 16);
            uint64_t v63 = a1 + 16;
            uint64_t v65 = (*(uint64_t (**)(uint64_t))(v64 + 56))(v63);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v63 + 16))(v63, v65);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)"Unable to prepare transfer target for transfer: ", 48);
            *(unsigned char *)(v65 + 17) = 0;
            (*(void (**)(long long *, uint64_t))(v73 + 16))(&v73, v65);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v65 + 17) = 0;
          }
          uint64_t v24 = (*(unsigned int (**)(void, void))(**((void **)&v73 + 1) + 24))(*((void *)&v73 + 1), v74) ^ 1;
          goto LABEL_114;
        }
      }
    }
    else
    {
      uint64_t v57 = 0;
    }
    long long v70 = 0u;
    long long v71 = 0u;
    long long v72 = 0u;
    uint64_t v67 = &unk_1F20B2680;
    int v68 = (std::__shared_weak_count *)&_bambiDomain;
    int v69 = 0x40000000;
    uint64_t v24 = (*(unsigned int (**)(void))(_bambiDomain + 24))() ^ 1;
    ImsResult::~ImsResult((ImsResult *)&v67);
    if (!v57) {
      goto LABEL_115;
    }
LABEL_114:
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    goto LABEL_115;
  }
  uint64_t v22 = a1 + 16;
  uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 56))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"Transferee and transfer target must be valid objects.", 53);
  *(unsigned char *)(v23 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  uint64_t v24 = 0;
  *(unsigned char *)(v23 + 17) = 0;
  return v24;
}

void sub_1C530D6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  ImsResult::~ImsResult((ImsResult *)&a10);
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  ImsResult::~ImsResult((ImsResult *)&a19);
  _Unwind_Resume(a1);
}

uint64_t SipTypedStateMachine<BambiTransferState>::transitionToState(void *a1, uint64_t a2)
{
  unint64_t v4 = a1[3];
  if (v4)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      unint64_t v6 = a2;
      if (v4 <= a2) {
        unint64_t v6 = a2 % v4;
      }
    }
    else
    {
      unint64_t v6 = (v4 - 1) & a2;
    }
    uint64_t v7 = *(uint64_t ***)(a1[2] + 8 * v6);
    if (v7)
    {
      for (i = *v7; i; i = (uint64_t *)*i)
      {
        unint64_t v9 = i[1];
        if (v9 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
          {
            uint64_t v15 = a1[7];
            unint64_t v14 = (std::__shared_weak_count *)a1[8];
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v15)
            {
              uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 64))(v15, a2);
            }
            else
            {
              uint64_t v16 = 0;
            }
            uint64_t v17 = i[3];
            uint64_t v18 = i[4];
            if (v18) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
            }
            long long v19 = (std::__shared_weak_count *)a1[8];
            a1[7] = v17;
            a1[8] = v18;
            if (v19)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v19);
              uint64_t v17 = a1[7];
            }
            (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 56))(v17, v16);
            uint64_t v23 = v15;
            uint64_t v24 = v14;
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            char v20 = (std::__shared_weak_count *)a1[8];
            uint64_t v21 = a1[7];
            uint64_t v22 = v20;
            if (v20) {
              atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(void *, uint64_t *, uint64_t *))(*a1 + 56))(a1, &v23, &v21);
            if (v22) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            }
            if (v24) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            }
            if (v14) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            }
            return 1;
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= v4) {
              v9 %= v4;
            }
          }
          else
          {
            v9 &= v4 - 1;
          }
          if (v9 != v6) {
            break;
          }
        }
      }
    }
  }
  uint64_t v10 = a1[1];
  if (v10)
  {
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v10 + 56))(a1[1]);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"transitionToState: no such state ", 33);
    *(unsigned char *)(v11 + 17) = 0;
    uint64_t v12 = (const std::string *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 16))(a1, a2);
    LoggableString::LoggableString(&__p, v12);
    (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 40))(v11, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return 0;
}

void sub_1C530DB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void BambiTransferHandler::endTransfer(void *a1, const std::string *a2)
{
  if (a1[52] != a1[53])
  {
    unint64_t v4 = a1 + 2;
    uint64_t v5 = (*(uint64_t (**)(void *))(a1[2] + 64))(a1 + 2);
    (*(void (**)(void *, uint64_t))(*v4 + 16))(v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"End transfer requested due to ", 30);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(const std::string *, uint64_t))(a2->__r_.__value_.__r.__words[0] + 16))(a2, v5);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 1174405120;
    uint64_t v6[2] = ___ZN20BambiTransferHandler11endTransferE9ImsResult_block_invoke;
    v6[3] = &__block_descriptor_tmp_34;
    v6[4] = a1;
    ImsResult::ImsResult((ImsResult *)v7, a2);
    ims::performBlock((IMSClientManager *)v6);
    ImsResult::~ImsResult((ImsResult *)v7);
  }
}

void sub_1C530DD44(_Unwind_Exception *a1)
{
  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

void ___ZN20BambiTransferHandler11endTransferE9ImsResult_block_invoke(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 56)))
  {
    if ((*(unsigned int (**)(void, void))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), *(unsigned int *)(a1 + 56)))
    {
      uint64_t v3 = *(void *)(v2 + 160);
      if (v3)
      {
        ImsResult::ImsResult((ImsResult *)v16, (const std::string *)(a1 + 40));
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 24))(v3, v16);
        ImsResult::~ImsResult((ImsResult *)v16);
      }
    }
  }
  else
  {
    unint64_t v4 = *(std::__shared_weak_count **)(v2 + 152);
    if (v4)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        unint64_t v6 = v5;
        uint64_t v7 = *(SipStack **)(v2 + 144);
        if (v7)
        {
          unint64_t v8 = (ImsPrefs *)SipStack::prefs(*(SipStack **)(v2 + 144));
          TransferorShouldSendByeRequestKey = (void **)ImsPrefs::getTransferorShouldSendByeRequestKey(v8);
          if (ImsPrefs::BOOLValue(v8, TransferorShouldSendByeRequestKey))
          {
            BambiTransferHandler::endAllCalls((BambiTransferHandler *)v2);
            uint64_t v10 = *(void *)(v2 + 160);
            if (v10) {
              (*(void (**)(uint64_t))(*(void *)v10 + 16))(v10);
            }
          }
          else
          {
            uint64_t v12 = *(void *)(v2 + 128);
            uint64_t v11 = *(std::__shared_weak_count **)(v2 + 136);
            if (v11)
            {
              atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            unint64_t v13 = (ImsPrefs *)SipStack::prefs(v7);
            TransferHangupTimeoutKey = (void **)ImsPrefs::getTransferHangupTimeoutKey(v13);
            ImsPrefs::intValue(v13, TransferHangupTimeoutKey);
            std::string::basic_string[abi:ne180100]<0>(__p, "WaitingForHangup");
            if (v11) {
              atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            char v20 = 0;
            uint64_t v15 = operator new(0x20uLL);
            *uint64_t v15 = &unk_1F20C1BB0;
            v15[1] = v2;
            void v15[2] = v12;
            v15[3] = v11;
            char v20 = v15;
            SipTimerContainer::startTimer((int8x8_t *)(v2 + 272), (uint64_t)__p);
            std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v19);
            if (v18 < 0) {
              operator delete(__p[0]);
            }
            if (v11)
            {
              std::__shared_weak_count::__release_weak(v11);
              std::__shared_weak_count::__release_weak(v11);
            }
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
}

void sub_1C530DFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((void *)(v26 - 88));
  if (a24 < 0) {
    operator delete(__p);
  }
  if (v25)
  {
    std::__shared_weak_count::__release_weak(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c14_ZTS9ImsResult(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_e8_40c14_ZTS9ImsResult(uint64_t a1)
{
}

uint64_t BambiCallParticipant::determineIncomingMessageCategory(BambiCallParticipant *this)
{
  return 2;
}

void BambiTransferHandler::loggableName(LoggableString *a1@<X8>)
{
}

void non-virtual thunk to'BambiTransferHandler::loggableName(LoggableString *a1@<X8>)
{
}

uint64_t SipTypedStateMachine<BambiTransferState>::currentStateId(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

void SipStateMachine::stateMachineName(LoggableString *a1@<X8>)
{
}

void SipSimpleStateMachine<BambiTransferState>::handleStateTransition(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 72);
      if (v9)
      {
        if (*a2) {
          uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a2 + 48))(*a2);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = (*(uint64_t (**)(void))(**(void **)a3 + 48))();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 24))(v9, v10, v11);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C530E264(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipSimpleStateMachine<BambiTransferState>::~SipSimpleStateMachine(uint64_t a1)
{
  SipSimpleStateMachine<BambiTransferState>::~SipSimpleStateMachine(a1);
  JUMPOUT(0x1C878E320);
}

long long *SipStateMachine::nameForStateId(SipStateMachine *this)
{
  return &ims::kEmptyString;
}

uint64_t SipSimpleStateMachine<BambiTransferState>::~SipSimpleStateMachine(uint64_t a1)
{
  *(void *)a1 = &unk_1F20C1920;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)a1 = &unk_1F20C1978;
  if (*(void *)(a1 + 40))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(*(void **)(a1 + 32));
    *(void *)(a1 + 32) = 0;
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 16) + 8 * i) = 0;
    }
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(*(void **)(a1 + 32));
  unint64_t v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (std::__shared_weak_count *)v1[4];
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

void std::__shared_ptr_emplace<BambiTransferTargetParticipant>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C19D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiTransferTargetParticipant>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C19D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiTransferTargetParticipant>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<BambiTransfereeParticipant>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1A20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiTransfereeParticipant>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1A20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiTransfereeParticipant>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<BambiTransferWaitingForHoldState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1A70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiTransferWaitingForHoldState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1A70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiTransferWaitingForHoldState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<BambiTransferTransferRequestedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1AC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiTransferTransferRequestedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1AC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiTransferTransferRequestedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<BambiTransferTransferCompleteState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1B10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiTransferTransferCompleteState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1B10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiTransferTransferCompleteState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::allocate_shared[abi:ne180100]<BambiTransferHandler,std::allocator<BambiTransferHandler>,std::shared_ptr<SipStack> &,BambiTransferHandlerDelegate *&,void>(void *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  unint64_t v6 = operator new(0x1D0uLL);
  std::__shared_ptr_emplace<BambiTransferHandler>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipStack> &,BambiTransferHandlerDelegate *&,std::allocator<BambiTransferHandler>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a3, v6 + 19, (uint64_t)(v6 + 3));
}

void sub_1C530E748(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<BambiTransferHandler>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipStack> &,BambiTransferHandlerDelegate *&,std::allocator<BambiTransferHandler>,0>(void *a1, void *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20C1B60;
  std::construct_at[abi:ne180100]<BambiTransferHandler,std::shared_ptr<SipStack> &,BambiTransferHandlerDelegate *&,BambiTransferHandler*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1C530E7A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BambiTransferHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1B60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiTransferHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1B60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiTransferHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::construct_at[abi:ne180100]<BambiTransferHandler,std::shared_ptr<SipStack> &,BambiTransferHandlerDelegate *&,BambiTransferHandler*>(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v4 = (std::__shared_weak_count *)a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiTransferHandler::BambiTransferHandler(a1, v6, *a3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void sub_1C530E8B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEED1Ev(void *a1)
{
  *a1 = &unk_1F20C1BB0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEED0Ev(void *a1)
{
  *a1 = &unk_1F20C1BB0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *_ZNKSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEE7__cloneEv(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C1BB0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C1BB0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEE7destroyEv(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void _ZNSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEE18destroy_deallocateEv(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEEclESC_(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    unint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C530EB14(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNKSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEE11target_typeEv()
{
  return &_ZTIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0;
}

void *SipTransport::SipTransport(void *a1, uint64_t *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20C1C30;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
    uint64_t v7 = (std::__shared_weak_count *)a1[2];
    a1[1] = v5;
    a1[2] = v6;
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    a1[1] = v5;
    a1[2] = 0;
  }
  a1[3] = a3;
  return a1;
}

void SipTransport::processIncomingMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
  {
    uint64_t v15 = std::__shared_weak_count::lock(v8);
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = *(void *)(a1 + 8);
      if (v17)
      {
        char v18 = (std::__shared_weak_count *)a7[1];
        uint64_t v19 = *a7;
        char v20 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v17 + 256))(v17, a2, a3, a4, a5, a6, a1, &v19);
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
}

void sub_1C530ECD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void SipTransport::transportLayer(SipTransport *this@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *((void *)this + 1);
    if (v7 && (unint64_t v8 = *(std::__shared_weak_count **)(v7 + 208)) != 0)
    {
      uint64_t v9 = *(void *)(v7 + 200);
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      *a2 = 0;
      uint64_t v10 = std::__shared_weak_count::lock(v8);
      a2[1] = v10;
      if (v10) {
        *a2 = v9;
      }
      std::__shared_weak_count::__release_weak(v8);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void IMSDialogEventManager::IMSDialogEventManager(IMSDialogEventManager *this)
{
  *(void *)this = &unk_1F20B5B40;
  *((void *)this + 1) = &unk_1F20C1DA0;
  uint64_t v2 = (char *)this + 16;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.dialog-event");
  ImsLogContainer::ImsLogContainer((uint64_t)v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_1F20C1C80;
  *((void *)this + 1) = &unk_1F20C1CC0;
  *((void *)this + 2) = &unk_1F20C1CE8;
}

void sub_1C530EEA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSDialogEventManager::~IMSDialogEventManager(IMSDialogEventManager *this)
{
  *((void *)this + 2) = &unk_1F20C9CA0;
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t vars8;

  IMSDialogEventManager::~IMSDialogEventManager(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'IMSDialogEventManager::~IMSDialogEventManager(IMSDialogEventManager *this)
{
}

{
  IMSDialogEventManager::~IMSDialogEventManager((IMSDialogEventManager *)((char *)this - 16));
}

{
  uint64_t vars8;

  IMSDialogEventManager::~IMSDialogEventManager((IMSDialogEventManager *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  IMSDialogEventManager::~IMSDialogEventManager((IMSDialogEventManager *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

void IMSDialogEventManager::handleDialogEvent(uint64_t a1, void **a2, uint64_t a3)
{
  if (a3 && *(int *)(a3 + 248) >= 4)
  {
    uint64_t v5 = a1 + 16;
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 16) + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Sending Thumper call ", 21);
    *(unsigned char *)(v6 + 17) = 0;
    if (*(unsigned char *)(a3 + 289)) {
      uint64_t v7 = "register";
    }
    else {
      uint64_t v7 = "deregister";
    }
    if (*(unsigned char *)(a3 + 289)) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = 10;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, v8);
    *(unsigned char *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" for ID ", 8);
    *(unsigned char *)(v6 + 17) = 0;
    LoggableString::LoggableString(&__p, (const std::string *)a3);
    (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 40))(v6, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::size_type v11 = *(void *)(a3 + 8);
      if (v11)
      {
        int v12 = *(unsigned __int8 *)(a3 + 289);
        int v10 = *(_DWORD *)(a3 + 248);
        memset(&__p, 0, sizeof(__p));
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, v11);
        if (!v12) {
          goto LABEL_20;
        }
        goto LABEL_17;
      }
    }
    else if (*(unsigned char *)(a3 + 23))
    {
      int v9 = *(unsigned __int8 *)(a3 + 289);
      int v10 = *(_DWORD *)(a3 + 248);
      std::string __p = *(std::string *)a3;
      if (!v9) {
        goto LABEL_20;
      }
LABEL_17:
      if (v10 == 4)
      {
        unint64_t v13 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack(a2) + 160);
        goto LABEL_21;
      }
LABEL_20:
      unint64_t v13 = (void (**)(void))(*(void *)IMSClientManager::delegateForStack(a2) + 168);
LABEL_21:
      (*v13)();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      return;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Event notification: ID of thumper call is empty", 47);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
  }
}

void sub_1C530F310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'IMSDialogEventManager::handleDialogEvent(uint64_t a1, void **a2, uint64_t a3)
{
}

void *IMSDialogEventManager::logPrefix(IMSDialogEventManager *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"DialogEventManager: ", 20);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void *non-virtual thunk to'IMSDialogEventManager::logPrefix(IMSDialogEventManager *this, ImsOutStream *a2)
{
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"DialogEventManager: ", 20);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void BambiDialogEventDelegate::~BambiDialogEventDelegate(BambiDialogEventDelegate *this)
{
}

double ims::analytics::RegistrationAttemptEvent::createRegistrationAttempt@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  long long v26 = 0uLL;
  _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_128RegistrationAttemptEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(&v26);
  uint64_t v8 = v26;
  uint64_t v10 = *a1;
  int v9 = (std::__shared_weak_count *)a1[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v13 = *(void **)(v8 + 112);
  uint64_t v12 = v8 + 112;
  std::string::size_type v11 = v13;
  xpc_object_t v40 = v13;
  if (v13) {
    xpc_retain(v11);
  }
  else {
    xpc_object_t v40 = xpc_null_create();
  }
  uint64_t v38 = v10;
  uint64_t v39 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ims::analytics::populateCellularInfo(&v40, (uint64_t)&v38);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  xpc_release(v40);
  xpc_object_t v40 = 0;
  if (a3)
  {
    int v14 = time(0);
    xpc_object_t v36 = xpc_int64_create((v14 - a3));
    if (!v36) {
      xpc_object_t v36 = xpc_null_create();
    }
    uint64_t v34 = v12;
    uint64_t v35 = "timeafterlastreg";
    xpc::dict::object_proxy::operator=((uint64_t)&v34, &v36, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v36);
    xpc_object_t v36 = 0;
  }
  if (*(unsigned char *)(a2 + 88)) {
    uint64_t v15 = "ATM_REG_RE";
  }
  else {
    uint64_t v15 = "ATM_REG_INIT";
  }
  xpc_object_t v32 = xpc_string_create(v15);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  uint64_t v34 = v12;
  uint64_t v35 = "type";
  xpc::dict::object_proxy::operator=((uint64_t)&v34, &v32, &v33);
  xpc_release(v33);
  xpc_object_t v33 = 0;
  xpc_release(v32);
  xpc_object_t v32 = 0;
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(_WORD *)(a2 + 90))
    {
      xpc_object_t v30 = xpc_string_create("ATM_REG_DE_Others1");
      if (!v30) {
        xpc_object_t v30 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v30 = xpc_string_create("ATM_REG_DE_UE");
      if (!v30) {
        xpc_object_t v30 = xpc_null_create();
      }
    }
  }
  else
  {
    if (!*(_WORD *)(a2 + 90)) {
      goto LABEL_31;
    }
    xpc_object_t v30 = xpc_string_create("ATM_REG_RE_A");
    if (!v30) {
      xpc_object_t v30 = xpc_null_create();
    }
  }
  uint64_t v34 = v12;
  uint64_t v35 = "type";
  xpc::dict::object_proxy::operator=((uint64_t)&v34, &v30, &v31);
  xpc_release(v31);
  xpc_object_t v31 = 0;
  xpc_release(v30);
  xpc_object_t v30 = 0;
LABEL_31:
  uint64_t v34 = v12;
  uint64_t v35 = "type";
  xpc_object_t v41 = 0;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v34, &v41);
  xpc_object_t v16 = xpc_string_create("ATM_REG_RE");
  if (!v16) {
    xpc_object_t v16 = xpc_null_create();
  }
  BOOL v17 = xpc_equal(v41, v16);
  xpc_release(v16);
  xpc_release(v41);
  if (v17)
  {
    char v20 = *(const char **)(a2 + 96);
    uint64_t v19 = a2 + 96;
    char v18 = v20;
    if (*(char *)(v19 + 23) >= 0) {
      uint64_t v21 = (const char *)v19;
    }
    else {
      uint64_t v21 = v18;
    }
    xpc_object_t v29 = xpc_string_create(v21);
    if (!v29) {
      xpc_object_t v29 = xpc_null_create();
    }
    uint64_t v34 = v12;
    uint64_t v35 = "rereg_reason";
    xpc::dict::object_proxy::operator=((uint64_t)&v34, &v29, &v41);
    xpc_release(v41);
    xpc_object_t v41 = 0;
    xpc_release(v29);
    xpc_object_t v29 = 0;
  }
  if (*(char *)(v10 + 3255) < 0) {
    uint64_t v22 = *(void *)(v10 + 3240);
  }
  else {
    uint64_t v22 = *(unsigned __int8 *)(v10 + 3255);
  }
  uint64_t v23 = (const char *)(v10 + 3160);
  if (v22)
  {
    if (*(char *)(v10 + 3279) < 0 ? *(void *)(v10 + 3264) : *(unsigned __int8 *)(v10 + 3279)) {
      uint64_t v23 = (const char *)(v10 + 3232);
    }
  }
  if (v23[23] < 0) {
    uint64_t v23 = *(const char **)v23;
  }
  xpc_object_t v27 = xpc_string_create(v23);
  if (!v27) {
    xpc_object_t v27 = xpc_null_create();
  }
  uint64_t v34 = v12;
  uint64_t v35 = "rat_info";
  xpc::dict::object_proxy::operator=((uint64_t)&v34, &v27, &v28);
  xpc_release(v28);
  xpc_object_t v28 = 0;
  xpc_release(v27);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  double result = *(double *)&v26;
  *a4 = v26;
  return result;
}

void sub_1C530F7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  xpc_release(v11);
  xpc_release(*(xpc_object_t *)(v12 - 72));
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_128RegistrationAttemptEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(void *a1)
{
  uint64_t v2 = operator new(0x90uLL);
  v2[1] = 0;
  _OWORD v2[2] = 0;
  void *v2 = &unk_1F20C1DC8;
  v2[3] = &unk_1F20C1F00;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.ca.regattempt");
  ImsLogContainer::ImsLogContainer((uint64_t)(v2 + 4), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v2[3] = &unk_1F20C1E18;
  v2[4] = &unk_1F20C1E50;
  xpc_object_t v3 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v4 = v3;
  if (v3)
  {
    v2[17] = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    v2[17] = v4;
    if (!v4)
    {
      xpc_object_t v5 = xpc_null_create();
      xpc_object_t v4 = 0;
      goto LABEL_10;
    }
  }
  if (MEMORY[0x1C878F160](v4) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v5 = xpc_null_create();
LABEL_10:
    v2[17] = v5;
    goto LABEL_11;
  }
  xpc_retain(v4);
LABEL_11:
  xpc_release(v4);
  *a1 = v2 + 3;
  a1[1] = v2;
}

void sub_1C530F9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

double ims::analytics::RegistrationAttemptEvent::createDeregistrationAttempt@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  *(_OWORD *)int v14 = 0uLL;
  _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_128RegistrationAttemptEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(v14);
  double v4 = v14[0];
  uint64_t v6 = *a1;
  xpc_object_t v5 = (std::__shared_weak_count *)a1[1];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = *(void **)(*(void *)&v4 + 112);
  uint64_t v8 = *(void *)&v4 + 112;
  uint64_t v7 = v9;
  xpc_object_t v23 = v9;
  if (v9) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t v23 = xpc_null_create();
  }
  uint64_t v21 = v6;
  uint64_t v22 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ims::analytics::populateCellularInfo(&v23, (uint64_t)&v21);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  xpc_release(v23);
  xpc_object_t v23 = 0;
  xpc_object_t v19 = xpc_string_create("ATM_REG_DE_UE");
  if (!v19) {
    xpc_object_t v19 = xpc_null_create();
  }
  uint64_t v17 = v8;
  char v18 = "type";
  xpc::dict::object_proxy::operator=((uint64_t)&v17, &v19, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v19);
  xpc_object_t v19 = 0;
  if (*(char *)(v6 + 3255) < 0) {
    uint64_t v10 = *(void *)(v6 + 3240);
  }
  else {
    uint64_t v10 = *(unsigned __int8 *)(v6 + 3255);
  }
  std::string::size_type v11 = (const char *)(v6 + 3160);
  if (v10)
  {
    if (*(char *)(v6 + 3279) < 0 ? *(void *)(v6 + 3264) : *(unsigned __int8 *)(v6 + 3279)) {
      std::string::size_type v11 = (const char *)(v6 + 3232);
    }
  }
  if (v11[23] < 0) {
    std::string::size_type v11 = *(const char **)v11;
  }
  xpc_object_t v15 = xpc_string_create(v11);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  uint64_t v17 = v8;
  char v18 = "rat_info";
  xpc::dict::object_proxy::operator=((uint64_t)&v17, &v15, &v16);
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_release(v15);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  double result = v14[0];
  *a2 = *(_OWORD *)v14;
  return result;
}

void sub_1C530FBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  unint64_t v13 = *(std::__shared_weak_count **)(v11 - 48);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  xpc_release(*(xpc_object_t *)(v11 - 40));
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<anonymous namespace'::RegistrationAttemptEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1DC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::RegistrationAttemptEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1DC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::RegistrationAttemptEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::RegistrationAttemptEventImpl::~RegistrationAttemptEventImpl(_anonymous_namespace_::RegistrationAttemptEventImpl *this)
{
  *(void *)this = &unk_1F20C1E18;
  *((void *)this + 1) = &unk_1F20C1E50;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20C1E18;
  *((void *)this + 1) = &unk_1F20C1E50;
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  *((void *)this + 1) = &unk_1F20C9CA0;
  if (*((char *)this + 63) < 0) {
    operator delete(*((void **)this + 5));
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  JUMPOUT(0x1C878E320);
}

xpc_object_t anonymous namespace'::RegistrationAttemptEventImpl::getDict@<X0>(_anonymous_namespace_::RegistrationAttemptEventImpl *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void *)*((void *)this + 14);
  *a2 = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void *anonymous namespace'::RegistrationAttemptEventImpl::getName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "atm_Registration_Attempt");
}

void non-virtual thunk to'anonymous namespace'::RegistrationAttemptEventImpl::~RegistrationAttemptEventImpl(_anonymous_namespace_::RegistrationAttemptEventImpl *this)
{
  *((void *)this - 1) = &unk_1F20C1E18;
  *(void *)this = &unk_1F20C1E50;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *((void *)this - 1) = &unk_1F20C1E18;
  *(void *)this = &unk_1F20C1E50;
  xpc_release(*((xpc_object_t *)this + 13));
  *((void *)this + 13) = 0;
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  JUMPOUT(0x1C878E320);
}

void LazuliFailureReportHeader::create(const std::string *a1@<X0>, void *a2@<X8>)
{
  double v4 = (char *)operator new(0x70uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)double v4 = &unk_1F20C1FB0;
  xpc_object_t v5 = v4 + 24;
  LazuliStringHeader::LazuliStringHeader((std::string *)v4 + 1, &LazuliHeader::kHeaderFailureReport, a1);
  v4[104] = 1;
  *((void *)v4 + 3) = &unk_1F20C2000;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 + 5);
  if (!v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 2, 1uLL, memory_order_relaxed);
    *((void *)v4 + 4) = v5;
    *((void *)v4 + 5) = v4;
    goto LABEL_5;
  }
  if (v6->__shared_owners_ == -1)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v4 + 2, 1uLL, memory_order_relaxed);
    *((void *)v4 + 4) = v5;
    *((void *)v4 + 5) = v4;
    std::__shared_weak_count::__release_weak(v6);
LABEL_5:
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
  }
  *a2 = v5;
  a2[1] = v4;
}

void sub_1C53100CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void LazuliFailureReportHeader::~LazuliFailureReportHeader(void **this)
{
  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C878E320);
}

double LazuliFailureReportHeader::clone@<D0>(LazuliFailureReportHeader *this@<X0>, _OWORD *a2@<X8>)
{
  double v4 = operator new(0x70uLL);
  v4[1] = 0;
  uint64_t v4[2] = 0;
  void *v4 = &unk_1F20C2078;
  LazuliStringHeader::LazuliStringHeader((uint64_t)(v4 + 3), (uint64_t)this);
  v4[3] = &unk_1F20C1F38;
  *((unsigned char *)v4 + 104) = 1;
  *(void *)&long long v6 = v4 + 3;
  *((void *)&v6 + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v6, v4 + 4, (uint64_t)(v4 + 3));
  double result = *(double *)&v6;
  *a2 = v6;
  return result;
}

void sub_1C5310268(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliFailureReportHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliFailureReportHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1FB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliFailureReportHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliFailureReportHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C1FB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliFailureReportHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliFailureReportHeader::create(std::string const&)::HeaderWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void LazuliFailureReportHeader::create(std::string const&)::HeaderWrapper::~HeaderWrapper(void **this)
{
  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
}

{
  uint64_t vars8;

  *this = &unk_1F20E19F8;
  if (*((char *)this + 79) < 0) {
    operator delete(this[7]);
  }
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<LazuliFailureReportHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliFailureReportHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliFailureReportHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t MessageSession::MessageSession(uint64_t a1, const std::string *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "msg.session");
  ImsLogContainer::ImsLogContainer(a1, &__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)a1 = &unk_1F20C20C8;
  *(void *)(a1 + 104) = &unk_1F20C2188;
  *(void *)(a1 + 112) = &unk_1F20C21D0;
  *(void *)(a1 + 136) = &unk_1F20C2210;
  *(unsigned char *)(a1 + 144) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 152));
  *(_OWORD *)(a1 + 353) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(void *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  SipUri::SipUri((SipUri *)(a1 + 480));
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_DWORD *)(a1 + 920) = 1065353216;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_DWORD *)(a1 + 944) = 0;
  *(_DWORD *)(a1 + 984) = 1065353216;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_DWORD *)(a1 + 1024) = 1065353216;
  *(_DWORD *)(a1 + 1064) = 1065353216;
  *(void *)(a1 + 256) = a1 + 136;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(a1 + 8));
  std::string::operator=((std::string *)(a1 + 224), a2);
  return a1;
}

void sub_1C531062C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, SipTimerContainer *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_object_t v19 = *(std::__shared_weak_count **)(v15 + 472);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  char v20 = *(std::__shared_weak_count **)(v15 + 456);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  std::string __p = (void *)(v15 + 424);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (void *)(v15 + 400);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v15 + 399) < 0) {
    operator delete(*v17);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v15 + 360);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v15 + 344);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  xpc_object_t v23 = *(std::__shared_weak_count **)(v15 + 328);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (*(char *)(v15 + 319) < 0) {
    operator delete(*v16);
  }
  SipTimerContainer::~SipTimerContainer(a9);
  uint64_t v24 = *(std::__shared_weak_count **)(v15 + 128);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  ImsLogContainer::~ImsLogContainer((void **)v15);
  _Unwind_Resume(a1);
}

void MessageSession::~MessageSession(MessageSession *this)
{
  *(void *)this = &unk_1F20C20C8;
  *((void *)this + 13) = &unk_1F20C2188;
  *((void *)this + 14) = &unk_1F20C21D0;
  *((void *)this + 17) = &unk_1F20C2210;
  if (*((char *)this + 399) < 0) {
    uint64_t v2 = *((void *)this + 48);
  }
  else {
    uint64_t v2 = *((unsigned __int8 *)this + 399);
  }
  xpc_object_t v3 = (void **)((char *)this + 376);
  if (v2)
  {
    uint64_t v15 = 0;
    xpc_object_t v16 = 0;
    uint64_t v4 = *((void *)this + 40);
    uint64_t v6 = *(void *)(v4 + 216);
    xpc_object_t v5 = *(std::__shared_weak_count **)(v4 + 224);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    SipDialogManager::getSubscription(v6, (uint64_t)"conference", (uint64_t)this + 376, __p, &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (v15) {
      SipSubscription::scheduleTermination((int8x8_t *)v15, 0x2710u, 1);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 1032);
  std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::~__hash_table((uint64_t)this + 992);
  std::__hash_table<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::IncomingMessage>>>::~__hash_table((uint64_t)this + 952);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::~__hash_table((uint64_t)this + 888);
  SipUri::~SipUri((MessageSession *)((char *)this + 480));
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 59);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 57);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  __p[0] = (char *)this + 424;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = (char *)this + 400;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (*((char *)this + 399) < 0) {
    operator delete(*v3);
  }
  int v9 = (std::__shared_weak_count *)*((void *)this + 45);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 43);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (*((char *)this + 319) < 0) {
    operator delete(*((void **)this + 37));
  }
  SipTimerContainer::~SipTimerContainer((MessageSession *)((char *)this + 152));
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  *(void *)this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  MessageSession::~MessageSession(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'MessageSession::~MessageSession(MessageSession *this)
{
}

{
  MessageSession::~MessageSession((MessageSession *)((char *)this - 112));
}

{
  MessageSession::~MessageSession((MessageSession *)((char *)this - 136));
}

{
  uint64_t vars8;

  MessageSession::~MessageSession((MessageSession *)((char *)this - 104));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  MessageSession::~MessageSession((MessageSession *)((char *)this - 112));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  MessageSession::~MessageSession((MessageSession *)((char *)this - 136));
  JUMPOUT(0x1C878E320);
}

void MessageSession::logPrefix(MessageSession *this, ImsOutStream *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 80))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5310B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MessageSession::loggableName(LoggableString *a1@<X8>)
{
}

void non-virtual thunk to'MessageSession::loggableName(LoggableString *a1@<X8>)
{
}

void MessageSession::initialize(std::chrono::steady_clock::time_point *a1, uint64_t *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3, uint64_t a4, const std::string *a5)
{
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    uint64_t v11 = std::__shared_weak_count::lock(v6);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = *a2;
      if (!*a2)
      {
LABEL_98:
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        return;
      }
      if (*(unsigned char *)(v13 + 1856)) {
        uint64_t v14 = v13 + 1496;
      }
      else {
        uint64_t v14 = 0;
      }
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v16 = *(void *)(v14 + 328);
      uint64_t v15 = *(std::__shared_weak_count **)(v14 + 336);
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      rep = (std::__shared_weak_count *)a1[57].__d_.__rep_;
      a1[56].__d_.__rep_ = v16;
      a1[57].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v15;
      uint64_t v60 = v15;
      if (rep) {
        std::__shared_weak_count::__release_weak(rep);
      }
      if (*(unsigned char *)(v13 + 1856)) {
        uint64_t v18 = v13 + 1496;
      }
      else {
        uint64_t v18 = 0;
      }
      char v20 = *(LazuliRouteSet **)(v18 + 344);
      xpc_object_t v19 = *(std::__shared_weak_count **)(v18 + 352);
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v58 = v12;
      uint64_t v59 = v19;
      uint64_t v21 = (std::__shared_weak_count *)a1[59].__d_.__rep_;
      a1[58].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v20;
      a1[59].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v19;
      if (v21) {
        std::__shared_weak_count::__release_weak(v21);
      }
      if (*(unsigned char *)(v13 + 1856)) {
        uint64_t v22 = v13 + 1496;
      }
      else {
        uint64_t v22 = 0;
      }
      *(void *)&long long v91 = 0;
      __p[0] = 0;
      __p[1] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)__p, *(long long **)(v22 + 280), *(long long **)(v22 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v22 + 288) - *(void *)(v22 + 280)) >> 3));
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&a1[50]);
      *(_OWORD *)&a1[50].__d_.__rep_ = *(_OWORD *)__p;
      a1[52].__d_.__rep_ = v91;
      *(void *)&long long v91 = 0;
      __p[1] = 0;
      __p[0] = 0;
      *(void *)uint64_t v65 = __p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v65);
      if (*(unsigned char *)(v13 + 1856)) {
        uint64_t v23 = v13 + 1496;
      }
      else {
        uint64_t v23 = 0;
      }
      *(void *)&long long v91 = 0;
      __p[0] = 0;
      __p[1] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)__p, *(long long **)(v23 + 304), *(long long **)(v23 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v23 + 312) - *(void *)(v23 + 304)) >> 3));
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&a1[53]);
      *(_OWORD *)&a1[53].__d_.__rep_ = *(_OWORD *)__p;
      a1[55].__d_.__rep_ = v91;
      *(void *)&long long v91 = 0;
      __p[1] = 0;
      __p[0] = 0;
      *(void *)uint64_t v65 = __p;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v65);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = *a3;
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v24 = a3[1];
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
      }
      long long v26 = (std::__shared_weak_count *)a1[41].__d_.__rep_;
      a1[40].__d_.__rep_ = v25;
      a1[41].__d_.__rep_ = v24;
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      std::string::operator=((std::string *)&a1[37], a5);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v27 = a1[40].__d_.__rep_;
      uint64_t v28 = *(void *)(v27 + 216);
      xpc_object_t v29 = *(std::__shared_weak_count **)(v27 + 224);
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      xpc_object_t v30 = *(std::__shared_weak_count_vtbl **)(*(void *)(v28 + 136) + 224);
      xpc_object_t v31 = (std::__shared_weak_count *)operator new(0x20uLL);
      v31->__shared_owners_ = 0;
      v31->__shared_weak_owners_ = 0;
      v31->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C22B8;
      v31[1].__vftable = v30;
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      SipDialog::stack((std::__shared_weak_count *)a1[40].__d_.__rep_, &v116);
      if (*((char *)v116 + 4183) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v65, *((const std::string::value_type **)v116 + 520), *((void *)v116 + 521));
      }
      else
      {
        *(_OWORD *)uint64_t v65 = *((_OWORD *)v116 + 260);
        *(void *)&v65[16] = *((void *)v116 + 522);
      }
      xpc_object_t v32 = operator new(0xA8uLL);
      v32[1] = 0;
      void v32[2] = 0;
      *xpc_object_t v32 = &unk_1F20C2308;
      v64.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31[1];
      v64.__r_.__value_.__l.__size_ = (std::string::size_type)v31;
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      *(_OWORD *)std::string __p = *(_OWORD *)v65;
      *(void *)&long long v91 = *(void *)&v65[16];
      memset(v65, 0, 24);
      LazuliFramer::LazuliFramer(v32 + 3, &v64, (const std::string *)__p);
      if (SBYTE7(v91) < 0) {
        operator delete(__p[0]);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      xpc_object_t v33 = (std::__shared_weak_count *)a1[45].__d_.__rep_;
      a1[44].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)(v32 + 3);
      a1[45].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v32;
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
      if ((v65[23] & 0x80000000) != 0) {
        operator delete(*(void **)v65);
      }
      if (v117) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
      }
      uint64_t v115 = 0;
      long long v113 = 0u;
      long long v114 = 0u;
      long long v111 = 0u;
      long long v112 = 0u;
      long long v109 = 0u;
      long long v110 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      long long v105 = 0u;
      long long v106 = 0u;
      long long v103 = 0u;
      long long v104 = 0u;
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      long long v93 = 0u;
      long long v94 = 0u;
      long long v91 = 0u;
      long long v92 = 0u;
      *(_OWORD *)std::string __p = 0u;
      SipUri::SipUri((SipUri *)__p);
      uint64_t v89 = 0;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v66 = 0u;
      memset(v65, 0, sizeof(v65));
      SipUri::SipUri((SipUri *)v65);
      SipDialog::stack((std::__shared_weak_count *)a1[40].__d_.__rep_, &v116);
      uint64_t v34 = (ImsPrefs *)SipStack::prefs(v116);
      LazuliConferenceFactoryKey = (void **)ImsPrefs::getLazuliConferenceFactoryKey(v34);
      ImsPrefs::stringValue(v34, LazuliConferenceFactoryKey);
      SipUri::fromString((uint64_t)__p, &v64);
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v64.__r_.__value_.__l.__data_);
      }
      if (v117) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
      }
      if (SipUri::matches((SipUri *)(a1[40].__d_.__rep_ + 232), (const SipUri *)__p)
        && SipUri::isValidUri((SipUri *)(a1[40].__d_.__rep_ + 1104)))
      {
        uint64_t v36 = a1[40].__d_.__rep_ + 1104;
      }
      else
      {
        uint64_t v36 = a1[40].__d_.__rep_ + 232;
      }
      SipUri::operator=((SipUri *)&a1[60], v36);
      v116 = 0;
      v117 = 0;
      int v37 = (uint64_t *)*((void *)v20 + 1);
      if (v37 == *((uint64_t **)v20 + 2)) {
        uint64_t v38 = 0;
      }
      else {
        uint64_t v38 = *v37;
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)v38 + 32))(&v64);
      (*(void (**)(SipStack **__return_ptr))(*(void *)v64.__r_.__value_.__l.__data_ + 32))(&v116);
      if (v64.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v64.__r_.__value_.__l.__size_);
      }
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      uint64_t v39 = *(uint64_t **)(v16 + 8);
      if (v39 == *(uint64_t **)(v16 + 16)) {
        uint64_t v40 = 0;
      }
      else {
        uint64_t v40 = *v39;
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)v40 + 32))(&v64);
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v64.__r_.__value_.__l.__data_ + 32))(&v62);
      if (v64.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v64.__r_.__value_.__l.__size_);
      }
      xpc_object_t v41 = *(std::__shared_weak_count **)(v13 + 128);
      if (v41 && (uint64_t v42 = std::__shared_weak_count::lock(v41)) != 0)
      {
        int v43 = *(unsigned __int8 *)(*(void *)(v13 + 120) + 2689);
        std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      }
      else
      {
        int v43 = MEMORY[0xA81];
      }
      memset(&v64, 0, sizeof(v64));
      int v44 = *(std::__shared_weak_count **)(v13 + 128);
      if (v44)
      {
        uint64_t v45 = std::__shared_weak_count::lock(v44);
        if (v45) {
          uint64_t v46 = *(void *)(v13 + 120);
        }
        else {
          uint64_t v46 = 0;
        }
      }
      else
      {
        uint64_t v46 = 0;
        uint64_t v45 = 0;
      }
      if (*(char *)(v46 + 2719) < 0) {
        std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(v46 + 2696), *(void *)(v46 + 2704));
      }
      else {
        std::string v64 = *(std::string *)(v46 + 2696);
      }
      if (v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v45);
      }
      int v47 = *(unsigned __int8 *)(v13 + 146);
      char v48 = *(const void **)(a4 + 8);
      v61[0] = &unk_1F20E38B0;
      v61[1] = v48;
      if (v48) {
        CFRetain(v48);
      }
      v61[0] = &unk_1F20B3050;
      (*(void (**)(std::chrono::steady_clock::time_point *, SipStack **, uint64_t *, BOOL, BOOL, void *, std::string *))(a1->__d_.__rep_ + 144))(a1, &v116, &v62, v43 != 0, v47 != 0, v61, &v64);
      ims::CFType::~CFType((ims::CFType *)v61);
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v49 = a1[42].__d_.__rep_;
      if (!v49)
      {
        uint64_t v55 = (*(uint64_t (**)(std::chrono::steady_clock::time_point *))(a1->__d_.__rep_ + 56))(a1);
        (*(void (**)(std::chrono::steady_clock::time_point *, uint64_t))(a1->__d_.__rep_ + 16))(a1, v55);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"Transport failure", 17);
        *(unsigned char *)(v55 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v55 + 17) = 0;
        goto LABEL_88;
      }
      uint64_t v51 = *(void *)(v49 + 32);
      uint64_t v50 = *(std::__shared_weak_count **)(v49 + 40);
      if (v50) {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v51 && (*(unsigned int (**)(uint64_t))(*(void *)v51 + 88))(v51))
      {
        int v52 = (LazuliUri **)*((void *)v20 + 1);
        if (v52 == *((LazuliUri ***)v20 + 2)) {
          uint64_t v53 = 0;
        }
        else {
          uint64_t v53 = *v52;
        }
        unsigned __int16 v56 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 56))(v51);
        LazuliUri::setHostPort(v53, v56);
        uint64_t v57 = (*(uint64_t (**)(std::chrono::steady_clock::time_point *))(a1->__d_.__rep_ + 64))(a1);
        (*(void (**)(std::chrono::steady_clock::time_point *, uint64_t))(a1->__d_.__rep_ + 16))(a1, v57);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"Set localpath to ", 17);
        *(unsigned char *)(v57 + 17) = 0;
        LazuliRouteSet::toStream(v20, (ImsOutStream *)v57);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v57 + 17) = 0;
        *(_WORD *)(v13 + 144) = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 56))(v51);
        if (!v50) {
          goto LABEL_86;
        }
      }
      else
      {
        uint64_t v54 = (*(uint64_t (**)(std::chrono::steady_clock::time_point *))(a1->__d_.__rep_ + 56))(a1);
        (*(void (**)(std::chrono::steady_clock::time_point *, uint64_t))(a1->__d_.__rep_ + 16))(a1, v54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)"local port info unavailable!", 28);
        *(unsigned char *)(v54 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v54 + 17) = 0;
        if (!v50)
        {
LABEL_86:
          a1[116].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
LABEL_88:
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          if (v63) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v63);
          }
          if (v117) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v117);
          }
          SipUri::~SipUri((SipUri *)v65);
          SipUri::~SipUri((SipUri *)__p);
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          if (v59) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v59);
          }
          uint64_t v12 = v58;
          if (v60) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v60);
          }
          goto LABEL_98;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      goto LABEL_86;
    }
  }
}

void sub_1C5311538(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, std::__shared_weak_count *a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(v15 - 96);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  SipUri::~SipUri((SipUri *)va);
  SipUri::~SipUri((SipUri *)&STACK[0x200]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  _Unwind_Resume(a1);
}

void MessageSession::createTransport(uint64_t a1, uint64_t *a2, std::__shared_weak_count_vtbl **a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"MessageSession::createTransport", 31);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  if (a5)
  {
    if (a4)
    {
      uint64_t v15 = *(std::__shared_weak_count **)(a1 + 128);
      if (v15)
      {
        uint64_t v16 = *(void *)(a1 + 120);
        uint64_t v17 = std::__shared_weak_count::lock(v15);
        if (v17)
        {
          uint64_t v18 = v16 + 104;
          if (!v16) {
            uint64_t v18 = 0;
          }
          uint64_t v76 = v18;
          long long v77 = v17;
          xpc_object_t v19 = (std::__shared_weak_count *)a2[1];
          uint64_t v74 = *a2;
          long long v75 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v20 = (std::__shared_weak_count *)a3[1];
          long long v72 = *a3;
          long long v73 = v20;
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v21 = *(const void **)(a6 + 8);
          v71[0] = &unk_1F20E38B0;
          v71[1] = v21;
          if (v21) {
            CFRetain(v21);
          }
          v71[0] = &unk_1F20B3050;
          MsrpTransportTls::createConnection(&v76, &v74, &v72, (uint64_t)v71, a7, &v78);
          long long v22 = v78;
          long long v78 = 0uLL;
          uint64_t v23 = *(std::__shared_weak_count **)(a1 + 344);
          *(_OWORD *)(a1 + 336) = v22;
          if (v23)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
            if (*((void *)&v78 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v78 + 1));
            }
          }
          ims::CFType::~CFType((ims::CFType *)v71);
          if (v73) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v73);
          }
          if (v75) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v75);
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v24 = v77;
          if (!v77) {
            goto LABEL_55;
          }
          goto LABEL_54;
        }
      }
    }
    else
    {
      uint64_t v34 = *(std::__shared_weak_count **)(a1 + 128);
      if (v34)
      {
        uint64_t v35 = *(void *)(a1 + 120);
        uint64_t v36 = std::__shared_weak_count::lock(v34);
        if (v36)
        {
          uint64_t v37 = v35 + 104;
          if (!v35) {
            uint64_t v37 = 0;
          }
          uint64_t v69 = v37;
          long long v70 = v36;
          uint64_t v38 = (std::__shared_weak_count *)a2[1];
          uint64_t v67 = *a2;
          long long v68 = v38;
          if (v38) {
            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v39 = (std::__shared_weak_count *)a3[1];
          uint64_t v65 = *a3;
          long long v66 = v39;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MsrpTransportTcp::createConnection(&v69, &v67, (uint64_t *)&v65, &v78);
          long long v40 = v78;
          long long v78 = 0uLL;
          xpc_object_t v41 = *(std::__shared_weak_count **)(a1 + 344);
          *(_OWORD *)(a1 + 336) = v40;
          if (v41)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v41);
            if (*((void *)&v78 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v78 + 1));
            }
          }
          if (v66) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v66);
          }
          if (v68) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v68);
          }
          std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v24 = v70;
          if (!v70)
          {
LABEL_55:
            if (!*(void *)(a1 + 336)) {
              return;
            }
            uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
            (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"MessageSession MO-MSRP ", 23);
            *(unsigned char *)(v42 + 17) = 0;
            uint64_t v43 = *(void *)(a1 + 336);
            uint64_t v44 = *(void *)(v43 + 32);
            uint64_t v45 = *(std::__shared_weak_count **)(v43 + 40);
            if (v45) {
              atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, uint64_t))(*(void *)v44 + 40))(v44, v42);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)" --> ", 5);
            *(unsigned char *)(v42 + 17) = 0;
            (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t))(*a3)->~__shared_weak_count + 5))(*a3, v42);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v42 + 17) = 0;
            if (!v45) {
              return;
            }
LABEL_77:
            std::__shared_weak_count::__release_shared[abi:ne180100](v45);
            return;
          }
LABEL_54:
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          goto LABEL_55;
        }
      }
    }
LABEL_79:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  if (a4)
  {
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = *(std::__shared_weak_count **)(a1 + 128);
    if (!v25) {
      goto LABEL_79;
    }
    uint64_t v26 = *(void *)(a1 + 120);
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v27 = std::__shared_weak_count::lock(v25);
    if (!v27) {
      goto LABEL_79;
    }
    uint64_t v28 = v26 + 104;
    if (!v26) {
      uint64_t v28 = 0;
    }
    uint64_t v63 = v28;
    std::string v64 = v27;
    xpc_object_t v29 = (std::__shared_weak_count *)a2[1];
    uint64_t v61 = *a2;
    uint64_t v62 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v30 = *(const void **)(a6 + 8);
    v60[0] = &unk_1F20E38B0;
    v60[1] = v30;
    if (v30) {
      CFRetain(v30);
    }
    v60[0] = &unk_1F20B3050;
    MsrpTransportTls::createListener(&v63, &v61, 1, (uint64_t)v60, a7, &v78);
    long long v31 = v78;
    long long v78 = 0uLL;
    xpc_object_t v32 = *(std::__shared_weak_count **)(a1 + 344);
    *(_OWORD *)(a1 + 336) = v31;
    if (v32)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      if (*((void *)&v78 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v78 + 1));
      }
    }
    ims::CFType::~CFType((ims::CFType *)v60);
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
    xpc_object_t v33 = v64;
    if (!v64) {
      goto LABEL_73;
    }
LABEL_72:
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    goto LABEL_73;
  }
  uint64_t v46 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v46) {
    goto LABEL_79;
  }
  uint64_t v47 = *(void *)(a1 + 120);
  char v48 = std::__shared_weak_count::lock(v46);
  if (!v48) {
    goto LABEL_79;
  }
  uint64_t v49 = v47 + 104;
  if (!v47) {
    uint64_t v49 = 0;
  }
  uint64_t v58 = v49;
  uint64_t v59 = v48;
  uint64_t v50 = (std::__shared_weak_count *)a2[1];
  uint64_t v56 = *a2;
  uint64_t v57 = v50;
  if (v50) {
    atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MsrpTransportTcp::createListener(&v58, &v56, &v78);
  long long v51 = v78;
  long long v78 = 0uLL;
  int v52 = *(std::__shared_weak_count **)(a1 + 344);
  *(_OWORD *)(a1 + 336) = v51;
  if (v52)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    if (*((void *)&v78 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v78 + 1));
    }
  }
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  xpc_object_t v33 = v59;
  if (v59) {
    goto LABEL_72;
  }
LABEL_73:
  if (*(void *)(a1 + 336))
  {
    uint64_t v53 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v53 + 8), (uint64_t)"MessageSession MT-MSRP listening on ", 36);
    *(unsigned char *)(v53 + 17) = 0;
    uint64_t v54 = *(void *)(a1 + 336);
    uint64_t v55 = *(void *)(v54 + 32);
    uint64_t v45 = *(std::__shared_weak_count **)(v54 + 40);
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v55 + 40))(v55, v53);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v53 + 17) = 0;
    if (v45) {
      goto LABEL_77;
    }
  }
}

void sub_1C5311D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void MessageSession::terminate(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  MessageSession::logMessageSessionEnd(a1, 200, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  xpc_object_t v3 = *(std::__shared_weak_count **)(a1 + 344);
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C5311E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MessageSession::logMessageSessionEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = 0;
  char v20 = 0;
  SipDialog::stack(*(std::__shared_weak_count **)(a1 + 320), &v19);
  uint64_t v6 = v19;
  if (v19)
  {
    xpc_object_t object = 0;
    SipDialog::lazuliGroupParams(*(SipDialog **)(a1 + 320), &object);
    uint64_t v7 = MEMORY[0x1C878F160](object);
    xpc_release(object);
    int v8 = *(unsigned __int8 *)(*(void *)(a1 + 320) + 1800);
    (*(void (**)(xpc_object_t *__return_ptr))(**(void **)(v6 + 136) + 104))(&object);
    xpc_object_t v9 = object;
    v10.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    uint64_t v11 = *(void *)(a1 + 928);
    int v12 = *(_DWORD *)(a1 + 940);
    int v13 = *(_DWORD *)(a1 + 936);
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v16 = *(std::string *)a3;
    }
    uint64_t v14 = *(unsigned int *)(a1 + 944);
    IMSMetricsManager::logLazuliMessageSessionEnd((uint64_t)v9, ((double)(uint64_t)((double)(v10.__d_.__rep_ - v11) / 1000000.0) / 1000.0), (v13 + v12), v7 == MEMORY[0x1E4F14590], v8 != 0, a2, (uint64_t)&v16, v14, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
}

void sub_1C5312050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,xpc_object_t object,std::__shared_weak_count *a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  _Unwind_Resume(exception_object);
}

void MessageSession::sendMessageRequest(void *a1, const std::string *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  uint64_t v14 = (std::__shared_weak_count *)a1[59];
  if (v14)
  {
    uint64_t v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      std::string v16 = (const LazuliRouteSet *)a1[58];
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::string v16 = 0;
LABEL_6:
  uint64_t v17 = (std::__shared_weak_count *)a1[57];
  if (!v17)
  {
    uint64_t v18 = 0;
    goto LABEL_62;
  }
  uint64_t v18 = std::__shared_weak_count::lock(v17);
  if (!v18 || !v16 || (v31 = a4, (uint64_t v19 = (const LazuliRouteSet *)a1[56]) == 0))
  {
LABEL_62:
    uint64_t v30 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"MSRP path is unavailable.", 25);
    *(unsigned char *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v30 + 17) = 0;
    if (!v18) {
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  memset(&v46, 0, sizeof(v46));
  ImsUuid::generate((ImsUuid *)&__p);
  ImsUuid::asStringNoDashes((ImsUuid *)&__p, &__str);
  std::string::basic_string(&v46, &__str, 0, 0x1FuLL, (std::allocator<char> *)&v37);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  int v32 = a7;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B3708;
  if (v44 < 0) {
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  }
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v20 = a1[40];
  uint64_t v21 = *(void *)(v20 + 216);
  long long v22 = *(std::__shared_weak_count **)(v20 + 224);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<LazuliRequest,std::allocator<LazuliRequest>,std::string const&,std::string const&,LazuliMessageEncodingMap *,void>((uint64_t *)&__str, (long long *)&v46, (long long *)"SEND", *(void *)(*(void *)(v21 + 136) + 224));
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 129), (unsigned __int8 *)&v46, (uint64_t)&std::piecewise_construct, (long long **)&__p);
  std::string::operator=((std::string *)(v23 + 40), a2);
  uint64_t v24 = __str.__r_.__value_.__r.__words[0];
  std::allocate_shared[abi:ne180100]<LazuliToPathHeader,std::allocator<LazuliToPathHeader>,LazuliRouteSet &,void>(&__p, v19);
  long long v42 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  LazuliMessage::addHeader(v24, (long long *)"To-Path", (char *)&v42, 0);
  if (*((void *)&v42 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v42 + 1));
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::allocate_shared[abi:ne180100]<LazuliFromPathHeader,std::allocator<LazuliFromPathHeader>,LazuliRouteSet &,void>(&__p, v16);
  long long v41 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  LazuliMessage::addHeader(v24, (long long *)"From-Path", (char *)&v41, 0);
  if (*((void *)&v41 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::allocate_shared[abi:ne180100]<LazuliMessageIdHeader,std::allocator<LazuliMessageIdHeader>,std::string const&,void>(&__p, a2);
  long long v40 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  LazuliMessage::addHeader(v24, (long long *)"Message-ID", (char *)&v40, 0);
  if (*((void *)&v40 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::allocate_shared[abi:ne180100]<LazuliByteRangeHeader,std::allocator<LazuliByteRangeHeader>,unsigned int &,unsigned int &,unsigned int &,void>(&__p, a5, a6, v32);
  long long v39 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  LazuliMessage::addHeader(v24, (long long *)"Byte-Range", (char *)&v39, 0);
  if (*((void *)&v39 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39 + 1));
  }
  if (__p.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  }
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = (std::string *)operator new(0x70uLL);
  v25->__r_.__value_.__l.__size_ = 0;
  v25->__r_.__value_.__r.__words[2] = 0;
  v25->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20BC988;
  std::string::basic_string[abi:ne180100]<0>(&__p, "yes");
  LazuliStringHeader::LazuliStringHeader(v25 + 1, &LazuliHeader::kHeaderSuccessReport, &__p);
  v25[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20BC848;
  v25[4].__r_.__value_.__s.__data_[8] = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v37 = v25 + 1;
  *((void *)&v37 + 1) = v25;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v37, &v25[1].__r_.__value_.__l.__size_, (uint64_t)&v25[1]);
  long long v38 = v37;
  long long v37 = 0uLL;
  LazuliMessage::addHeader(v24, (long long *)&LazuliHeader::kHeaderSuccessReport, (char *)&v38, 0);
  if (*((void *)&v38 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
  }
  if (*((void *)&v37 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
  }
  uint64_t v26 = (std::string *)operator new(0x70uLL);
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20C2078;
  std::string::basic_string[abi:ne180100]<0>(&__p, "yes");
  LazuliStringHeader::LazuliStringHeader(v26 + 1, &LazuliHeader::kHeaderFailureReport, &__p);
  v26[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20C1F38;
  v26[4].__r_.__value_.__s.__data_[8] = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)&long long v37 = v26 + 1;
  *((void *)&v37 + 1) = v26;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v37, &v26[1].__r_.__value_.__l.__size_, (uint64_t)&v26[1]);
  long long v36 = v37;
  long long v37 = 0uLL;
  LazuliMessage::addHeader(v24, (long long *)&LazuliHeader::kHeaderFailureReport, (char *)&v36, 0);
  if (*((void *)&v36 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
  }
  if (*((void *)&v37 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
  }
  uint64_t v27 = *(unsigned __int8 *)(a3 + 23);
  if ((v27 & 0x80u) != 0) {
    uint64_t v27 = *(void *)(a3 + 8);
  }
  if (v27)
  {
    uint64_t v28 = operator new(0x90uLL);
    v28[1] = 0;
    uint64_t v28[2] = 0;
    void *v28 = &unk_1F20C2580;
    LazuliStringParameterHeader::LazuliStringParameterHeader((uint64_t)(v28 + 3), &LazuliHeader::kHeaderContentType, v31);
    void v28[3] = &unk_1F20D6008;
    *((unsigned char *)v28 + 72) = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v28 + 3);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v28;
    std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&__p, v28 + 4, (uint64_t)(v28 + 3));
    long long v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    LazuliMessage::addHeader(v24, (long long *)&LazuliHeader::kHeaderContentType, (char *)&v35, 0);
    if (*((void *)&v35 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
    }
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
  std::string::operator=((std::string *)(v24 + 104), (const std::string *)a3);
  std::string::size_type size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  uint64_t v33 = v24;
  uint64_t v34 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, uint64_t *, BOOL))(*a1 + 96))(a1, &v33, a6 == v32);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v46.__r_.__value_.__l.__data_);
  }
LABEL_63:
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
LABEL_64:
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1C5312750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,std::__shared_weak_count *a30,int a31,__int16 a32,char a33,char a34,int a35,__int16 a36,char a37,char a38)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (*(void *)(v40 - 128)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v40 - 128));
  }
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(a1);
}

void MessageSession::sendReportRequest(void *a1, long long *a2, const std::string *a3, unsigned int a4, int a5, int a6, int a7)
{
  uint64_t v14 = (std::__shared_weak_count *)a1[59];
  if (v14)
  {
    uint64_t v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      std::string v16 = (const LazuliRouteSet *)a1[58];
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::string v16 = 0;
LABEL_6:
  uint64_t v17 = (std::__shared_weak_count *)a1[57];
  if (!v17)
  {
    uint64_t v18 = 0;
    goto LABEL_42;
  }
  uint64_t v18 = std::__shared_weak_count::lock(v17);
  if (!v18 || !v16)
  {
LABEL_42:
    uint64_t v31 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"MSRP path is unavailable.", 25);
    *(unsigned char *)(v31 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v31 + 17) = 0;
    if (!v18) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  uint64_t v33 = v15;
  int v19 = a5;
  int v20 = a6;
  int v21 = a7;
  long long v22 = (const LazuliRouteSet *)a1[56];
  if (!v22)
  {
    uint64_t v15 = v33;
    goto LABEL_42;
  }
  unsigned int v32 = a4;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v23 = a1[40];
  uint64_t v24 = *(void *)(v23 + 216);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v25 = *(std::__shared_weak_count **)(v23 + 224);
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<LazuliRequest,std::allocator<LazuliRequest>,std::string const&,std::string const&,LazuliMessageEncodingMap *,void>(&v42, a2, (long long *)"REPORT", *(void *)(*(void *)(v24 + 136) + 224));
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v26 = v42;
  std::allocate_shared[abi:ne180100]<LazuliToPathHeader,std::allocator<LazuliToPathHeader>,LazuliRouteSet &,void>(&v40, v22);
  long long v41 = v40;
  long long v40 = 0uLL;
  LazuliMessage::addHeader(v26, (long long *)"To-Path", (char *)&v41, 0);
  int v27 = v21;
  if (*((void *)&v41 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41 + 1));
  }
  int v28 = v19;
  if (*((void *)&v40 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
  }
  uint64_t v15 = v33;
  std::allocate_shared[abi:ne180100]<LazuliFromPathHeader,std::allocator<LazuliFromPathHeader>,LazuliRouteSet &,void>(&v40, v16);
  long long v39 = v40;
  long long v40 = 0uLL;
  LazuliMessage::addHeader(v26, (long long *)"From-Path", (char *)&v39, 0);
  if (*((void *)&v39 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39 + 1));
  }
  if (*((void *)&v40 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
  }
  std::allocate_shared[abi:ne180100]<LazuliMessageIdHeader,std::allocator<LazuliMessageIdHeader>,std::string const&,void>(&v40, a3);
  long long v38 = v40;
  long long v40 = 0uLL;
  LazuliMessage::addHeader(v26, (long long *)"Message-ID", (char *)&v38, 0);
  if (*((void *)&v38 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
  }
  if (*((void *)&v40 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
  }
  std::allocate_shared[abi:ne180100]<LazuliByteRangeHeader,std::allocator<LazuliByteRangeHeader>,unsigned int &,unsigned int &,unsigned int &,void>(&v40, v28, v20, v27);
  long long v37 = v40;
  long long v40 = 0uLL;
  LazuliMessage::addHeader(v26, (long long *)"Byte-Range", (char *)&v37, 0);
  if (*((void *)&v37 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
  }
  if (*((void *)&v40 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
  }
  xpc_object_t v29 = operator new(0x70uLL);
  v29[1] = 0;
  void v29[2] = 0;
  void *v29 = &unk_1F20C2740;
  LazuliStatusHeader::LazuliStatusHeader((LazuliStatusHeader *)(v29 + 3), v32);
  *(void *)&long long v40 = v29 + 3;
  *((void *)&v40 + 1) = v29;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v40, v29 + 4, (uint64_t)(v29 + 3));
  long long v36 = v40;
  long long v40 = 0uLL;
  LazuliMessage::addHeader(v26, (long long *)"Status", (char *)&v36, 0);
  if (*((void *)&v36 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
  }
  if (*((void *)&v40 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
  }
  uint64_t v30 = v43;
  uint64_t v34 = v26;
  long long v35 = v43;
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*a1 + 96))(a1, &v34, 1);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
LABEL_43:
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
LABEL_44:
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_1C5312CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  uint64_t v15 = *(std::__shared_weak_count **)(v13 - 88);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void MessageSession::sendResponse(void *a1, long long *a2, void **a3, int a4)
{
  int v8 = (std::__shared_weak_count *)a1[59];
  if (v8)
  {
    xpc_object_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      std::chrono::steady_clock::time_point v10 = (const LazuliRouteSet *)a1[58];
      goto LABEL_6;
    }
  }
  else
  {
    xpc_object_t v9 = 0;
  }
  std::chrono::steady_clock::time_point v10 = 0;
LABEL_6:
  uint64_t v11 = (std::__shared_weak_count *)a1[57];
  if (!v11)
  {
    int v12 = 0;
    goto LABEL_35;
  }
  int v12 = std::__shared_weak_count::lock(v11);
  if (!v12 || !v10 || (uint64_t v13 = (const LazuliRouteSet *)a1[56]) == 0)
  {
LABEL_35:
    uint64_t v27 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"MSRP path is unavailable.", 25);
    *(unsigned char *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v27 + 17) = 0;
    if (!v12) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  int v29 = a4;
  int v28 = a3;
  uint64_t v14 = a1[40];
  uint64_t v15 = *(void *)(v14 + 216);
  std::string v16 = *(std::__shared_weak_count **)(v14 + 224);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *(void *)(*(void *)(v15 + 136) + 224);
  uint64_t v18 = operator new(0xA0uLL);
  v18[1] = 0;
  void v18[2] = 0;
  *uint64_t v18 = &unk_1F20C2670;
  int v19 = v18;
  uint64_t v20 = (uint64_t)(v18 + 3);
  LazuliMessage::LazuliMessage((uint64_t)(v18 + 3), a2, v17);
  void v19[3] = &unk_1F20D3198;
  *((_DWORD *)v19 + 38) = v29;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  std::allocate_shared[abi:ne180100]<LazuliToPathHeader,std::allocator<LazuliToPathHeader>,LazuliRouteSet &,void>(&v33, v13);
  long long v34 = v33;
  long long v33 = 0uLL;
  LazuliMessage::addHeader(v20, (long long *)"To-Path", (char *)&v34, 0);
  if (*((void *)&v34 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
  }
  if (*((void *)&v33 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
  }
  std::allocate_shared[abi:ne180100]<LazuliFromPathHeader,std::allocator<LazuliFromPathHeader>,LazuliRouteSet &,void>(&v33, v10);
  long long v32 = v33;
  long long v33 = 0uLL;
  LazuliMessage::addHeader(v20, (long long *)"From-Path", (char *)&v32, 0);
  if (*((void *)&v32 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
  }
  if (*((void *)&v33 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
  }
  uint64_t v30 = v20;
  uint64_t v31 = (std::__shared_weak_count *)v19;
  atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
  (*(void (**)(void *, uint64_t *, uint64_t))(*a1 + 96))(a1, &v30, 1);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  *((_DWORD *)a1 + 236) = v29;
  if (v29 != 200)
  {
    uint64_t v21 = a1[40];
    uint64_t v22 = *(void *)(v21 + 216);
    uint64_t v23 = *(std::__shared_weak_count **)(v21 + 224);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = *(void *)(v22 + 136);
    uint64_t v25 = *(void *)(v24 + 208);
    uint64_t v26 = *(std::__shared_weak_count **)(v24 + 216);
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipLazuliManager::releasePowerAssertion(v25, v28);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19);
LABEL_36:
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_37:
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C5313108(_Unwind_Exception *a1)
{
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

uint64_t MessageSession::checkRemotePath(MessageSession *this, LazuliMessage *a2)
{
  xpc_object_t v3 = (std::__shared_weak_count *)*((void *)this + 57);
  if (!v3)
  {
    xpc_object_t v5 = 0;
LABEL_14:
    uint64_t v16 = (*(uint64_t (**)(MessageSession *))(*(void *)this + 56))(this);
    (*(void (**)(MessageSession *, uint64_t))(*(void *)this + 16))(this, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"MSRP path is unavailable.", 25);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v17 = 0;
    *(unsigned char *)(v16 + 17) = 0;
    goto LABEL_15;
  }
  xpc_object_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    goto LABEL_14;
  }
  uint64_t v6 = (void *)*((void *)this + 56);
  if (!v6) {
    goto LABEL_14;
  }
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)a2 + 4, "From-Path");
  int v8 = v7;
  if (!v7)
  {
LABEL_20:
    uint64_t v19 = (*(uint64_t (**)(MessageSession *))(*(void *)this + 56))(this);
    (*(void (**)(MessageSession *, uint64_t))(*(void *)this + 16))(this, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Remote did not specify their MSRP path", 38);
    std::chrono::steady_clock::time_point v10 = 0;
    *(unsigned char *)(v19 + 17) = 0;
    uint64_t v20 = (unsigned char *)(v19 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_21:
    uint64_t v17 = 0;
    goto LABEL_22;
  }
  xpc_object_t v9 = (const void *)*((void *)v7 + 5);
  std::chrono::steady_clock::time_point v10 = (std::__shared_weak_count *)*((void *)v8 + 6);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v9
  {
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    goto LABEL_20;
  }
  uint64_t v13 = v11;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v14 = (uint64_t *)v13[8];
  if (v14 == (uint64_t *)v13[9]) {
    uint64_t v15 = 0;
  }
  else {
    uint64_t v15 = *v14;
  }
  if (*(char *)(v15 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(v15 + 32), *(void *)(v15 + 40));
  }
  else {
    std::string v39 = *(std::string *)(v15 + 32);
  }
  uint64_t v21 = (uint64_t *)v6[1];
  if (v21 == (uint64_t *)v6[2]) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = *v21;
  }
  if (*(char *)(v22 + 55) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v22 + 32), *(void *)(v22 + 40));
  }
  else {
    std::string __p = *(std::string *)(v22 + 32);
  }
  char v23 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v39.__r_.__value_.__l.__size_;
  }
  std::string::size_type v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v26 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v25 = __p.__r_.__value_.__l.__size_;
  }
  if (size == v25)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      BOOL v35 = memcmp(v39.__r_.__value_.__l.__data_, p_p, v39.__r_.__value_.__l.__size_) == 0;
    }
    else if (*((unsigned char *)&v39.__r_.__value_.__s + 23))
    {
      uint64_t v27 = HIBYTE(v39.__r_.__value_.__r.__words[2]) - 1;
      int v28 = &v39;
      do
      {
        int v30 = v28->__r_.__value_.__s.__data_[0];
        int v28 = (std::string *)((char *)v28 + 1);
        int v29 = v30;
        int v32 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v31 = v32;
        BOOL v34 = v27-- != 0;
        BOOL v35 = v29 == v31;
      }
      while (v29 == v31 && v34);
    }
    else
    {
      BOOL v35 = 1;
    }
  }
  else
  {
    BOOL v35 = 0;
  }
  if (v26 < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((*((unsigned char *)&v39.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_57:
      if (v35) {
        goto LABEL_58;
      }
      goto LABEL_63;
    }
  }
  else if ((v23 & 0x80) == 0)
  {
    goto LABEL_57;
  }
  operator delete(v39.__r_.__value_.__l.__data_);
  if (!v35)
  {
LABEL_63:
    uint64_t v36 = (*(uint64_t (**)(MessageSession *, std::string *))(*(void *)this + 56))(this, p_p);
    (*(void (**)(MessageSession *, uint64_t))(*(void *)this + 16))(this, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"Remote session ID doesn't match their SDP", 41);
    *(unsigned char *)(v36 + 17) = 0;
    uint64_t v20 = (unsigned char *)(v36 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_21;
  }
LABEL_58:
  if ((LazuliRouteSet::operator==(v13 + 7, v6) & 1) == 0)
  {
    uint64_t v37 = (*(uint64_t (**)(MessageSession *))(*(void *)this + 64))(this);
    (*(void (**)(MessageSession *, uint64_t))(*(void *)this + 16))(this, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"The full remote MSRP path doesn't match the negotiated.  Letting it slide because our SDP also doesn't match ;)",
      111);
    *(unsigned char *)(v37 + 17) = 0;
    uint64_t v20 = (unsigned char *)(v37 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v17 = 1;
LABEL_22:
    unsigned char *v20 = 0;
    if (!v10) {
      goto LABEL_15;
    }
    goto LABEL_23;
  }
  uint64_t v17 = 1;
  if (v10) {
LABEL_23:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_15:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v17;
}

void sub_1C5313710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if (!v19)
    {
LABEL_3:
      if (!v18) {
LABEL_8:
      }
        _Unwind_Resume(exception_object);
LABEL_7:
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      goto LABEL_8;
    }
  }
  else if (!v19)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (!v18) {
    goto LABEL_8;
  }
  goto LABEL_7;
}

uint64_t MessageSession::IncomingMessage::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

void MessageSession::IncomingMessage::~IncomingMessage(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void MessageSession::logSendReceiveEvent(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = 0;
  int v30 = 0;
  SipDialog::stack(*(std::__shared_weak_count **)(a1 + 320), &v29);
  uint64_t v11 = v29;
  if (!v29) {
    goto LABEL_24;
  }
  SipDialog::lazuliGroupParams(*(SipDialog **)(a1 + 320), &object);
  uint64_t v12 = MEMORY[0x1C878F160](object);
  xpc_release(object);
  uint64_t v13 = *(void *)(a1 + 320);
  int v14 = *(unsigned __int8 *)(v13 + 1800);
  uint64_t v15 = *(void *)(v13 + 216);
  uint64_t v16 = *(std::__shared_weak_count **)(v13 + 224);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *(void *)(v15 + 136);
  uint64_t v19 = *(void *)(v17 + 208);
  uint64_t v18 = *(std::__shared_weak_count **)(v17 + 216);
  if (!v18)
  {
    int v20 = *(unsigned __int8 *)(v19 + 404);
    if (!v16) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  int v20 = *(unsigned __int8 *)(v19 + 404);
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  if (v16) {
LABEL_6:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
LABEL_7:
  (*(void (**)(xpc_object_t *__return_ptr))(**(void **)(v11 + 136) + 104))(&object);
  xpc_object_t v21 = object;
  if (a2) {
    uint64_t v22 = (uint64_t)((double)(std::chrono::steady_clock::now().__d_.__rep_ - a4) / 1000000.0);
  }
  else {
    uint64_t v22 = 0;
  }
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v26 = *(std::string *)a6;
  }
  if (a2) {
    char v23 = "MO";
  }
  else {
    char v23 = "MT";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v23);
  IMSMetricsManager::logLazuliMessageSessionSendReceive((uint64_t)v21, a5 == 200, v22, a5, (uint64_t)&v26, (uint64_t)__p, v12 == MEMORY[0x1E4F14590], v14 != 0, v20 != 0);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
LABEL_24:
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
}

void sub_1C5313A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,xpc_object_t object,std::__shared_weak_count *a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  _Unwind_Resume(exception_object);
}

std::string *anonymous namespace'::loggableMsrpStatus(std::string *retstr, signed int __val)
{
  if (__val <= 414)
  {
    if (__val <= 402)
    {
      if (__val == 200)
      {
        uint64_t v2 = "OK";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
      }
      if (__val == 400)
      {
        uint64_t v2 = "Unintelligible";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
      }
    }
    else
    {
      switch(__val)
      {
        case 403:
          uint64_t v2 = "Not allowed";
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
        case 408:
          uint64_t v2 = "Did not complete";
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
        case 413:
          uint64_t v2 = "Undesired";
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
      }
    }
  }
  else if (__val > 499)
  {
    switch(__val)
    {
      case 500:
        uint64_t v2 = "Internal error";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
      case 501:
        uint64_t v2 = "Bad extension";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
      case 506:
        uint64_t v2 = "Invalid connection";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
    }
  }
  else
  {
    switch(__val)
    {
      case 415:
        uint64_t v2 = "Not understood";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
      case 423:
        uint64_t v2 = "Out of bounds";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
      case 481:
        uint64_t v2 = "No session";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
    }
  }
  return std::to_string(retstr, __val);
}

void std::unordered_map<std::string,MessageSession::IncomingMessage>::erase[abi:ne180100](void *a1, uint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v2) {
      v4 %= *(void *)&v2;
    }
  }
  else
  {
    v4 &= *(void *)&v2 - 1;
  }
  uint64_t v6 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (uint64_t *)*v6;
  }
  while (v6 != a2);
  if (v7 != a1 + 2)
  {
    unint64_t v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(void *)&v2) {
        v8 %= *(void *)&v2;
      }
    }
    else
    {
      v8 &= *(void *)&v2 - 1;
    }
    if (v8 == v4)
    {
LABEL_20:
      if (!v3) {
        goto LABEL_27;
      }
      goto LABEL_21;
    }
  }
  if (!v3) {
    goto LABEL_19;
  }
  unint64_t v9 = *(void *)(v3 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v9 >= *(void *)&v2) {
      v9 %= *(void *)&v2;
    }
  }
  else
  {
    v9 &= *(void *)&v2 - 1;
  }
  if (v9 != v4)
  {
LABEL_19:
    *(void *)(*a1 + 8 * v4) = 0;
    uint64_t v3 = *a2;
    goto LABEL_20;
  }
LABEL_21:
  unint64_t v10 = *(void *)(v3 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(void *)&v2) {
      v10 %= *(void *)&v2;
    }
  }
  else
  {
    v10 &= *(void *)&v2 - 1;
  }
  if (v10 != v4)
  {
    *(void *)(*a1 + 8 * v10) = v7;
    uint64_t v3 = *a2;
  }
LABEL_27:
  *uint64_t v7 = v3;
  *a2 = 0;
  --a1[3];
  v11[0] = a2;
  v11[1] = a1 + 2;
  char v12 = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
}

void MessageSession::processIncomingSendRequestBody()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  ims::getCpimContentType();
}

void sub_1C5314278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  operator delete(v21);
  MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0::~$_0((uint64_t)&a11);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0::~$_0(v22 - 208);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (*(char *)(v22 - 129) < 0) {
    operator delete(*(void **)(v22 - 152));
  }
  _Unwind_Resume(a1);
}

BOOL MessageSession::isGroupMgmtViaMSRP(MessageSession *this)
{
  uint64_t v2 = *((void *)this + 53);
  uint64_t v3 = *((void *)this + 54);
  std::string::basic_string[abi:ne180100]<0>(__p, "application/vnd.oma.cpm-groupdata+xml");
  char v8 = 0;
  uint64_t v4 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v2, v3, (unsigned __int8 **)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4 != *((void *)this + 54);
}

uint64_t MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void MessageSession::sendMessageBlob(uint64_t a1, uint64_t a2, const std::string *a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  int v41 = a5;
  ++*(_DWORD *)(a1 + 940);
  uint64_t v8 = *(void *)(a1 + 320);
  uint64_t v9 = *(void *)(v8 + 216);
  uint64_t v10 = *(void *)(v8 + 224);
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(void *)(v9 + 136);
  uint64_t v12 = *(void *)(v11 + 208);
  uint64_t v13 = *(void *)(v11 + 216);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  SipLazuliManager::createPowerAssertion(v12, (long long *)a4, 0);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v13);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v10);
  }
  MessageSession::sendEmptyMessage((MessageSession *)a1);
  if (*(char *)(a2 + 23) >= 0) {
    unsigned int v14 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    unsigned int v14 = *(_DWORD *)(a2 + 8);
  }
  memset(&v40, 0, sizeof(v40));
  if (*(char *)(a6 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
  }
  else {
    std::string v40 = *(std::string *)a6;
  }
  std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v40.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    ImsUuid::generate((ImsUuid *)v38);
    if ((v38[31] & 0x80000000) != 0) {
      std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)&v38[8], *(std::string::size_type *)&v38[16]);
    }
    else {
      std::string v39 = *(std::string *)&v38[8];
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    std::string v40 = v39;
    *((unsigned char *)&v39.__r_.__value_.__s + 23) = 0;
    v39.__r_.__value_.__s.__data_[0] = 0;
    *(void *)long long v38 = &unk_1F20B3708;
    if ((v38[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v38[8]);
    }
  }
  *(void *)long long v38 = &v40;
  uint64_t v16 = std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 992, (unsigned __int8 *)&v40, (long long **)v38);
  std::string::operator=((std::string *)(v16 + 40), (const std::string *)a4);
  int v17 = v41;
  *(void *)long long v38 = &v40;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 992, (unsigned __int8 *)&v40, (long long **)v38)+ 16) = v17;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  *(void *)long long v38 = &v40;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 992, (unsigned __int8 *)&v40, (long long **)v38)+ 10) = rep;
  if (v14 >= 0x2711)
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Processing blob in ", 19);
    *(unsigned char *)(v19 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" chunks with content size ", 26);
    *(unsigned char *)(v19 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    int v37 = 0;
    memset(v38, 0, 24);
    std::string::basic_string((std::string *)v38, (const std::string *)a2, 0, 0x2710uLL, (std::allocator<char> *)&v39);
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Sending chunk ", 14);
    *(unsigned char *)(v20 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v20 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" of ", 4);
    *(unsigned char *)(v20 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v20 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" chunkSize ", 11);
    *(unsigned char *)(v20 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v20 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" bytes", 6);
    *(unsigned char *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v20 + 17) = 0;
    MessageSession::sendMessageRequest((void *)a1, &v40, (uint64_t)v38, (uint64_t)a3, 1, 10000, v14);
    ++v37;
    uint64_t v21 = *(void *)(a1 + 128);
    if (v21)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 16), 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 16), 1uLL, memory_order_relaxed);
    }
    memset(&v39, 0, sizeof(v39));
    if (*(char *)(a4 + 23) >= 0) {
      size_t v22 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      size_t v22 = *(void *)(a4 + 8);
    }
    memset(&v35, 0, sizeof(v35));
    std::string::basic_string[abi:ne180100]((uint64_t)&v35, v22 + 1);
    if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v23 = &v35;
    }
    else {
      char v23 = (std::string *)v35.__r_.__value_.__r.__words[0];
    }
    if (v22)
    {
      if (*(char *)(a4 + 23) >= 0) {
        uint64_t v24 = (const void *)a4;
      }
      else {
        uint64_t v24 = *(const void **)a4;
      }
      memmove(v23, v24, v22);
    }
    *(_WORD *)((char *)&v23->__r_.__value_.__l.__data_ + v22) = 32;
    ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()();
  }
  uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"Processing blob as one chunk with content size ", 47);
  *(unsigned char *)(v25 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v25 + 17) = 0;
  MessageSession::sendMessageRequest((void *)a1, &v40, a2, (uint64_t)a3, 1, v14, v14);
  *(void *)long long v38 = &v40;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 992, (unsigned __int8 *)&v40, (long long **)v38)+ 17) = 1;
  *(void *)long long v38 = &v40;
  std::string v26 = std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 992, (unsigned __int8 *)&v40, (long long **)v38);
  std::string::operator=((std::string *)(v26 + 88), (const std::string *)a2);
  *(void *)long long v38 = &v40;
  uint64_t v27 = std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 992, (unsigned __int8 *)&v40, (long long **)v38);
  std::string::operator=((std::string *)(v27 + 112), a3);
  uint64_t v28 = *(void *)(a1 + 128);
  if (v28)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 16), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 16), 1uLL, memory_order_relaxed);
  }
  memset(v38, 0, 24);
  if (*(char *)(a4 + 23) >= 0) {
    size_t v29 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v29 = *(void *)(a4 + 8);
  }
  memset(&v36, 0, sizeof(v36));
  std::string::basic_string[abi:ne180100]((uint64_t)&v36, v29 + 1);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v30 = &v36;
  }
  else {
    int v30 = (std::string *)v36.__r_.__value_.__r.__words[0];
  }
  if (v29)
  {
    if (*(char *)(a4 + 23) >= 0) {
      int v31 = (const void *)a4;
    }
    else {
      int v31 = *(const void **)a4;
    }
    memmove(v30, v31, v29);
  }
  *(_WORD *)((char *)&v30->__r_.__value_.__l.__data_ + v29) = 32;
  ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()();
}

void sub_1C5315270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,void *__p,int a50,__int16 a51,char a52,char a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v63 - 185) < 0) {
    operator delete(*(void **)(v63 - 208));
  }
  _Unwind_Resume(exception_object);
}

void MessageSession::sendEmptyMessage(MessageSession *this)
{
  if (!*((unsigned char *)this + 368))
  {
    uint64_t v2 = (*(uint64_t (**)(MessageSession *))(*(void *)this + 64))(this);
    (*(void (**)(MessageSession *, uint64_t))(*(void *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Sending empty message for session ", 34);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)(*((void *)this + 40) + 1624) + 16))(*((void *)this + 40) + 1624, v2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    memset(&v8, 0, sizeof(v8));
    ImsUuid::generate((ImsUuid *)&v6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      uint64_t v6 = &unk_1F20B3708;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string v8 = __p;
    }
    uint64_t v6 = 0;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    v4[0] = 0;
    v4[1] = 0;
    uint64_t v5 = 0;
    MessageSession::sendMessageRequest(this, &v8, (uint64_t)&v6, (uint64_t)v4, 1, 0, 0);
    if (SHIBYTE(v5) < 0) {
      operator delete(v4[0]);
    }
    if (__p.__r_.__value_.__s.__data_[15] < 0) {
      operator delete(v6);
    }
    *((unsigned char *)this + 368) = 1;
    uint64_t v3 = (char *)this + 992;
    uint64_t v6 = &v8;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)&v8, (long long **)&v6)+ 17) = 1;
    uint64_t v6 = &v8;
    std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)&v8, (long long **)&v6)[72] = 1;
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5315718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MessageSession::sendMessage()
{
  memset(v0, 0, 40);
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C53159A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  ImsResult::~ImsResult((ImsResult *)&a10);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v26 - 81) < 0) {
    operator delete(*(void **)(v26 - 104));
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)(v26 - 80));
  _Unwind_Resume(a1);
}

void MessageSession::dumpMessage(uint64_t a1)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v2 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  if (!(void)xmmword_1EA3D5530)
  {
    ctu::XpcJetsamAssertion::create_default_global((uint64_t *)v13, v2);
    long long v3 = v13[0];
    v13[0] = 0uLL;
    uint64_t v4 = (std::__shared_weak_count *)*((void *)&xmmword_1EA3D5530 + 1);
    xmmword_1EA3D5530 = v3;
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      if (*((void *)&v13[0] + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13[0] + 1));
      }
    }
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)&xmmword_1EA3D5530 + 1);
  if (*((void *)&xmmword_1EA3D5530 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EA3D5530 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  std::string::basic_string[abi:ne180100]<0>(&v27, "msrpDump");
  ctu::XpcJetsamAssertion::createActivity();
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)unsigned int v14 = 0u;
  long long v15 = 0u;
  memset(v13, 0, sizeof(v13));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
  memset(&v12, 0, sizeof(v12));
  SipDialog::stack(*(std::__shared_weak_count **)(a1 + 320), __p);
  if (*((char *)__p[0] + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v12, *((const std::string::value_type **)__p[0] + 520), *((void *)__p[0] + 521));
  }
  else {
    std::string v12 = *(std::string *)((char *)__p[0] + 4160);
  }
  uint64_t v6 = (ims *)__p[1];
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  memset(&v11, 0, sizeof(v11));
  uint64_t v7 = ims::logger(v6);
  std::string::basic_string[abi:ne180100]<0>(__p, "msrp.dump");
  ImsLogger::getFacilityWithStackTag(v7, (uint64_t)__p, (uint64_t)&v12, &v11);
  if (SBYTE7(v9) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = 0;
  *(_OWORD *)std::string __p = 0u;
  long long v9 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)__p);
}

void sub_1C5316404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,std::__shared_weak_count *a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  if (a54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a54);
  }
  std::ostringstream::~ostringstream((uint64_t)&a65);
  if (*(void *)(v65 - 80)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v65 - 80));
  }
  _Unwind_Resume(a1);
}

void MessageSession::handleConnected(SipDialog **a1, void *a2)
{
  uint64_t v4 = (*((uint64_t (**)(SipDialog **))*a1 + 8))(a1);
  (*((void (**)(SipDialog **, uint64_t))*a1 + 2))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"MessageSession::handleConnected to ", 35);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(void, uint64_t))(*(void *)*a2 + 40))(*a2, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" for ", 5);
  *(unsigned char *)(v4 + 17) = 0;
  SipDialog::lazuliGroupParams(a1[40], &object);
  uint64_t v5 = MEMORY[0x1C878F160](object.__r_.__value_.__r.__words[0]);
  uint64_t v6 = MEMORY[0x1E4F14590];
  if (v5 == MEMORY[0x1E4F14590]) {
    uint64_t v7 = "group";
  }
  else {
    uint64_t v7 = "cpm";
  }
  if (v5 == MEMORY[0x1E4F14590]) {
    uint64_t v8 = 5;
  }
  else {
    uint64_t v8 = 3;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)v7, v8);
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" session", 8);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  xpc_release(object.__r_.__value_.__l.__data_);
  xpc_object_t v39 = 0;
  xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v10 = v9;
  if (v9)
  {
    xpc_object_t v39 = v9;
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v39 = v10;
    if (!v10)
    {
      xpc_object_t v11 = xpc_null_create();
      xpc_object_t v10 = 0;
      goto LABEL_14;
    }
  }
  if (MEMORY[0x1C878F160](v10) == v6)
  {
    xpc_retain(v10);
    goto LABEL_15;
  }
  xpc_object_t v11 = xpc_null_create();
LABEL_14:
  xpc_object_t v39 = v11;
LABEL_15:
  xpc_release(v10);
  memset(&v38, 0, sizeof(v38));
  SipDialog::stack((std::__shared_weak_count *)a1[40], &object);
  if (*(char *)(object.__r_.__value_.__r.__words[0] + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)(object.__r_.__value_.__r.__words[0] + 4160), *(void *)(object.__r_.__value_.__r.__words[0] + 4168));
  }
  else {
    std::string v38 = *(std::string *)(object.__r_.__value_.__r.__words[0] + 4160);
  }
  if (object.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)object.__r_.__value_.__l.__size_);
  }
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v12 = &v38;
  }
  else {
    std::string v12 = (std::string *)v38.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v36 = xpc_string_create((const char *)v12);
  if (!v36) {
    xpc_object_t v36 = xpc_null_create();
  }
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
  object.__r_.__value_.__l.__size_ = (std::string::size_type)"kStackId";
  xpc::dict::object_proxy::operator=((uint64_t)&object, &v36, &v37);
  xpc_release(v37);
  xpc_object_t v37 = 0;
  xpc_release(v36);
  xpc_object_t v36 = 0;
  memset(&object, 0, sizeof(object));
  uint64_t v13 = a1[40];
  if (*((char *)v13 + 1679) < 0) {
    std::string::__init_copy_ctor_external(&object, *((const std::string::value_type **)v13 + 207), *((void *)v13 + 208));
  }
  else {
    std::string object = *(std::string *)((unsigned char *)v13 + 69);
  }
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!object.__r_.__value_.__l.__size_)
    {
LABEL_36:
      operator delete(object.__r_.__value_.__l.__data_);
      goto LABEL_37;
    }
    p_std::string object = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&object.__r_.__value_.__s + 23)) {
      goto LABEL_37;
    }
    p_std::string object = &object;
  }
  xpc_object_t v34 = xpc_string_create((const char *)p_object);
  if (!v34) {
    xpc_object_t v34 = xpc_null_create();
  }
  uint64_t v49 = &v39;
  uint64_t v50 = (std::__shared_weak_count *)"kConversationId";
  xpc::dict::object_proxy::operator=((uint64_t)&v49, &v34, &v35);
  xpc_release(v35);
  xpc_object_t v35 = 0;
  xpc_release(v34);
  xpc_object_t v34 = 0;
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_36;
  }
LABEL_37:
  memset(&object, 0, sizeof(object));
  long long v15 = a1[40];
  if (*((char *)v15 + 1735) < 0) {
    std::string::__init_copy_ctor_external(&object, *((const std::string::value_type **)v15 + 214), *((void *)v15 + 215));
  }
  else {
    std::string object = *(std::string *)((char *)v15 + 1712);
  }
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!object.__r_.__value_.__l.__size_)
    {
LABEL_48:
      operator delete(object.__r_.__value_.__l.__data_);
      goto LABEL_49;
    }
    long long v16 = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&object.__r_.__value_.__s + 23)) {
      goto LABEL_49;
    }
    long long v16 = &object;
  }
  xpc_object_t v32 = xpc_string_create((const char *)v16);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  uint64_t v49 = &v39;
  uint64_t v50 = (std::__shared_weak_count *)"kContributionId";
  xpc::dict::object_proxy::operator=((uint64_t)&v49, &v32, &v33);
  xpc_release(v33);
  xpc_object_t v33 = 0;
  xpc_release(v32);
  xpc_object_t v32 = 0;
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_48;
  }
LABEL_49:
  if (*((unsigned char *)a1[40] + 1928))
  {
    xpc_object_t v31 = v39;
    if (v39) {
      xpc_retain(v39);
    }
    else {
      xpc_object_t v31 = xpc_null_create();
    }
    xpc_object_t v55 = 0;
    SipDialog::lazuliGroupParams(a1[40], &v55);
    if (MEMORY[0x1C878F160](v55) != v6)
    {
      xpc_object_t v53 = xpc_BOOL_create(0);
      if (!v53) {
        xpc_object_t v53 = xpc_null_create();
      }
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
      object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsGroupChat";
      xpc::dict::object_proxy::operator=((uint64_t)&object, &v53, &v54);
      xpc_release(v54);
      xpc_object_t v54 = 0;
      xpc_release(v53);
      xpc_object_t v53 = 0;
      xpc_object_t v51 = xpc_BOOL_create(*((unsigned char *)a1[40] + 1800));
      if (!v51) {
        xpc_object_t v51 = xpc_null_create();
      }
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
      object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsChatbot";
      xpc::dict::object_proxy::operator=((uint64_t)&object, &v51, &v52);
      xpc_release(v52);
      xpc_object_t v52 = 0;
      xpc_release(v51);
      xpc_object_t v51 = 0;
      SipUri::asString((uint64_t)(a1 + 60), &object);
      if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v17 = &object;
      }
      else {
        long long v17 = (std::string *)object.__r_.__value_.__r.__words[0];
      }
      xpc_object_t v47 = xpc_string_create((const char *)v17);
      if (!v47) {
        xpc_object_t v47 = xpc_null_create();
      }
      uint64_t v49 = &v31;
      uint64_t v50 = (std::__shared_weak_count *)"kRemoteUri";
      xpc::dict::object_proxy::operator=((uint64_t)&v49, &v47, &v48);
      xpc_release(v48);
      xpc_object_t v48 = 0;
      xpc_release(v47);
      xpc_object_t v47 = 0;
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(object.__r_.__value_.__l.__data_);
      }
      int v18 = 0;
LABEL_115:
      xpc_release(v55);
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      SipDialog::stack((std::__shared_weak_count *)a1[40], &v40);
      if (*((char *)v40 + 4183) < 0) {
        std::string::__init_copy_ctor_external(&object, *((const std::string::value_type **)v40 + 520), *((void *)v40 + 521));
      }
      else {
        std::string object = *(std::string *)((char *)v40 + 4160);
      }
      IMSClientManager::lazuliDelegateForStack((void **)&object.__r_.__value_.__l.__data_, &v49);
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(object.__r_.__value_.__l.__data_);
      }
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
      long long v23 = (LazuliDelegate *)v49;
      if (v49)
      {
        xpc_object_t v40 = v31;
        if (v31) {
          xpc_retain(v31);
        }
        else {
          xpc_object_t v40 = xpc_null_create();
        }
        LazuliDelegate::handleSessionReady(v23, (std::string::size_type)&v40);
        xpc_release(v40);
        xpc_object_t v40 = 0;
        if (v18)
        {
          long long v25 = (LazuliDelegate *)v49;
          xpc_object_t v55 = v31;
          if (v31) {
            xpc_retain(v31);
          }
          else {
            xpc_object_t v55 = xpc_null_create();
          }
          LazuliDelegate::handleGroupChatCreated(v25, &v55);
          xpc_release(v55);
          xpc_object_t v55 = 0;
        }
      }
      else
      {
        uint64_t v24 = (*((uint64_t (**)(SipDialog **))*a1 + 7))(a1);
        (*((void (**)(SipDialog **, uint64_t))*a1 + 2))(a1, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"No delegate for stackId ", 24);
        *(unsigned char *)(v24 + 17) = 0;
        SipDialog::stack((std::__shared_weak_count *)a1[40], &v40);
        if (*((char *)v40 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&object, *((const std::string::value_type **)v40 + 520), *((void *)v40 + 521));
        }
        else {
          std::string object = *(std::string *)((char *)v40 + 4160);
        }
        (*(void (**)(uint64_t, std::string *))(*(void *)v24 + 32))(v24, &object);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v24 + 17) = 0;
        if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(object.__r_.__value_.__l.__data_);
        }
        if (v41) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        }
      }
      uint64_t v26 = (IMSClientManager *)v50;
      if (v50) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      }
      IMSClientManager::instance(v26);
      IPTelephonyManager::getInstance((uint64_t *)&object);
      uint64_t v27 = *(uint64_t ***)(object.__r_.__value_.__r.__words[0] + 200);
      if (object.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)object.__r_.__value_.__l.__size_);
      }
      IMSCallManager::handleMOSessionConnected(v27, (void **)a1[40] + 207);
      xpc_release(v31);
      xpc_object_t v31 = 0;
      goto LABEL_151;
    }
    xpc_object_t v53 = xpc_BOOL_create(1);
    if (!v53) {
      xpc_object_t v53 = xpc_null_create();
    }
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsGroupChat";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v53, &v54);
    xpc_release(v54);
    xpc_object_t v54 = 0;
    xpc_release(v53);
    xpc_object_t v53 = 0;
    xpc_object_t v51 = xpc_BOOL_create(0);
    if (!v51) {
      xpc_object_t v51 = xpc_null_create();
    }
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsChatbot";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v51, &v52);
    xpc_release(v52);
    xpc_object_t v52 = 0;
    xpc_release(v51);
    xpc_object_t v51 = 0;
    *(_OWORD *)&object.__r_.__value_.__l.__data_ = 0uLL;
    SipDialog::sipSession(a1[40], &object);
    if (object.__r_.__value_.__r.__words[0])
    {
      if (*(char *)(object.__r_.__value_.__r.__words[0] + 1303) < 0)
      {
        if (*(void *)(object.__r_.__value_.__r.__words[0] + 1288)) {
          goto LABEL_75;
        }
      }
      else if (*(unsigned char *)(object.__r_.__value_.__r.__words[0] + 1303))
      {
LABEL_75:
        uint64_t v49 = &v55;
        uint64_t v50 = (std::__shared_weak_count *)"kIsSuccess";
        xpc_object_t v40 = &v31;
        int v41 = (std::__shared_weak_count *)"kIsSuccess";
        xpc::dict::object_proxy::operator=((uint64_t)&v40, (uint64_t)&v49, &v48);
        xpc_release(v48);
        xpc_object_t v48 = 0;
        uint64_t v49 = &v55;
        uint64_t v50 = (std::__shared_weak_count *)"kTransactionId";
        xpc_object_t v40 = &v31;
        int v41 = (std::__shared_weak_count *)"kTransactionId";
        xpc::dict::object_proxy::operator=((uint64_t)&v40, (uint64_t)&v49, &v47);
        xpc_release(v47);
        xpc_object_t v47 = 0;
        uint64_t v49 = &v55;
        uint64_t v50 = (std::__shared_weak_count *)"kConferenceFocus";
        xpc_object_t v40 = &v31;
        int v41 = (std::__shared_weak_count *)"kConferenceFocus";
        xpc::dict::object_proxy::operator=((uint64_t)&v40, (uint64_t)&v49, &v46);
        xpc_release(v46);
        xpc_object_t v46 = 0;
        int v18 = 1;
        goto LABEL_113;
      }
    }
    int v18 = 0;
LABEL_113:
    if (object.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)object.__r_.__value_.__l.__size_);
    }
    goto LABEL_115;
  }
  xpc_object_t v30 = v39;
  if (v39) {
    xpc_retain(v39);
  }
  else {
    xpc_object_t v30 = xpc_null_create();
  }
  xpc_object_t v40 = 0;
  SipDialog::lazuliGroupParams(a1[40], &v40);
  if (MEMORY[0x1C878F160](v40) == v6)
  {
    xpc_object_t v54 = xpc_BOOL_create(1);
    if (!v54) {
      xpc_object_t v54 = xpc_null_create();
    }
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsGroupChat";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v54, &v55);
    xpc_release(v55);
    xpc_object_t v55 = 0;
    xpc_release(v54);
    xpc_object_t v54 = 0;
    xpc_object_t v52 = xpc_BOOL_create(0);
    if (!v52) {
      xpc_object_t v52 = xpc_null_create();
    }
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsChatbot";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v52, &v53);
    xpc_release(v53);
    xpc_object_t v53 = 0;
    xpc_release(v52);
    xpc_object_t v52 = 0;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
    uint64_t v49 = &v30;
    uint64_t v50 = (std::__shared_weak_count *)"kConversationId";
    xpc::dict::object_proxy::operator=((uint64_t)&v49, (uint64_t)&object, &v51);
    xpc_release(v51);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kContributionId";
    uint64_t v49 = &v30;
    uint64_t v50 = (std::__shared_weak_count *)"kContributionId";
    xpc_object_t v51 = 0;
    xpc::dict::object_proxy::operator=((uint64_t)&v49, (uint64_t)&object, &v48);
    xpc_release(v48);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kConferenceFocus";
    xpc_object_t v48 = 0;
    uint64_t v49 = &v30;
    uint64_t v50 = (std::__shared_weak_count *)"kConferenceFocus";
    xpc::dict::object_proxy::operator=((uint64_t)&v49, (uint64_t)&object, &v47);
    xpc_release(v47);
    xpc_object_t v47 = 0;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kSubject";
    uint64_t v49 = &v30;
    uint64_t v50 = (std::__shared_weak_count *)"kSubject";
    xpc::dict::object_proxy::operator=((uint64_t)&v49, (uint64_t)&object, &v46);
    xpc_release(v46);
    xpc_object_t v46 = 0;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kReferredBy";
    uint64_t v49 = &v30;
    uint64_t v50 = (std::__shared_weak_count *)"kReferredBy";
    xpc::dict::object_proxy::operator=((uint64_t)&v49, (uint64_t)&object, &v45);
    xpc_release(v45);
    xpc_object_t v45 = 0;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kRemoteUri";
    uint64_t v49 = &v30;
    uint64_t v50 = (std::__shared_weak_count *)"kRemoteUri";
    xpc::dict::object_proxy::operator=((uint64_t)&v49, (uint64_t)&object, &v44);
    xpc_release(v44);
    xpc_object_t v44 = 0;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kResourceXml";
    uint64_t v49 = &v30;
    uint64_t v50 = (std::__shared_weak_count *)"kResourceXml";
    xpc::dict::object_proxy::operator=((uint64_t)&v49, (uint64_t)&object, &v43);
    xpc_release(v43);
    xpc_object_t v43 = 0;
  }
  else
  {
    xpc_object_t v54 = xpc_BOOL_create(0);
    if (!v54) {
      xpc_object_t v54 = xpc_null_create();
    }
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsGroupChat";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v54, &v55);
    xpc_release(v55);
    xpc_object_t v55 = 0;
    xpc_release(v54);
    xpc_object_t v54 = 0;
    xpc_object_t v52 = xpc_BOOL_create(*((unsigned char *)a1[40] + 1800));
    if (!v52) {
      xpc_object_t v52 = xpc_null_create();
    }
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsChatbot";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v52, &v53);
    xpc_release(v53);
    xpc_object_t v53 = 0;
    xpc_release(v52);
    xpc_object_t v52 = 0;
    SipUri::asString((uint64_t)(a1 + 60), &object);
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v19 = &object;
    }
    else {
      long long v19 = (std::string *)object.__r_.__value_.__r.__words[0];
    }
    xpc_object_t v48 = xpc_string_create((const char *)v19);
    if (!v48) {
      xpc_object_t v48 = xpc_null_create();
    }
    uint64_t v49 = &v30;
    uint64_t v50 = (std::__shared_weak_count *)"kRemoteUri";
    xpc::dict::object_proxy::operator=((uint64_t)&v49, &v48, &v51);
    xpc_release(v51);
    xpc_object_t v51 = 0;
    xpc_release(v48);
    xpc_object_t v48 = 0;
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(object.__r_.__value_.__l.__data_);
    }
  }
  xpc_release(v40);
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  SipDialog::stack((std::__shared_weak_count *)a1[40], &v40);
  if (*((char *)v40 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&object, *((const std::string::value_type **)v40 + 520), *((void *)v40 + 521));
  }
  else {
    std::string object = *(std::string *)((char *)v40 + 4160);
  }
  IMSClientManager::lazuliDelegateForStack((void **)&object.__r_.__value_.__l.__data_, &v49);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(object.__r_.__value_.__l.__data_);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  long long v20 = (LazuliDelegate *)v49;
  if (v49)
  {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    if (v30) {
      xpc_retain(v30);
    }
    else {
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    }
    LazuliDelegate::handleSessionReady(v20, (std::string::size_type)&object);
    xpc_release(object.__r_.__value_.__l.__data_);
    object.__r_.__value_.__r.__words[0] = 0;
    long long v22 = (LazuliDelegate *)v49;
    xpc_object_t v40 = v30;
    if (v30) {
      xpc_retain(v30);
    }
    else {
      xpc_object_t v40 = xpc_null_create();
    }
    LazuliDelegate::handleIncomingChat(v22, &v40);
    xpc_release(v40);
    xpc_object_t v40 = 0;
  }
  else
  {
    uint64_t v21 = (*((uint64_t (**)(SipDialog **))*a1 + 7))(a1);
    (*((void (**)(SipDialog **, uint64_t))*a1 + 2))(a1, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"No delegate for stackId ", 24);
    *(unsigned char *)(v21 + 17) = 0;
    SipDialog::stack((std::__shared_weak_count *)a1[40], &v40);
    if (*((char *)v40 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&object, *((const std::string::value_type **)v40 + 520), *((void *)v40 + 521));
    }
    else {
      std::string object = *(std::string *)((char *)v40 + 4160);
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v21 + 32))(v21, &object);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(object.__r_.__value_.__l.__data_);
    }
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  xpc_release(v30);
  xpc_object_t v30 = 0;
LABEL_151:
  SipDialog::lazuliGroupParams(a1[40], &object);
  uint64_t v28 = MEMORY[0x1C878F160](object.__r_.__value_.__r.__words[0]);
  xpc_release(object.__r_.__value_.__l.__data_);
  if (v28 == v6)
  {
    *(_OWORD *)&object.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v29 = *((void *)a1[40] + 28);
    if (v29) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
    }
    operator new();
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  xpc_release(v39);
}

void sub_1C5317758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,xpc_object_t a24,std::__shared_weak_count *a25,xpc_object_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  xpc_object_t v33 = *(std::__shared_weak_count **)(v31 - 112);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  xpc_release(object);
  if (a22 < 0) {
    operator delete(__p);
  }
  xpc_release(a23);
  _Unwind_Resume(a1);
}

xpc_object_t SipDialog::lazuliGroupParams@<X0>(SipDialog *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (void *)*((void *)this + 224);
  *a2 = v2;
  if (v2) {
    return xpc_retain(v2);
  }
  xpc_object_t result = xpc_null_create();
  *a2 = result;
  return result;
}

void non-virtual thunk to'MessageSession::handleConnected(uint64_t a1, void *a2)
{
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, uint64_t a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t object = 0;
  xpc::dict::object_proxy::operator xpc::object(a2, &object);
  xpc_object_t v5 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  xpc::dict::object_proxy::operator=(a1, &v5, a3);
  xpc_release(v5);
  xpc_object_t v5 = 0;
  xpc_release(object);
}

void MessageSession::handleDisconnected(void *a1)
{
  uint64_t v2 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"MessageSession::handleDisconnected", 34);
  *(unsigned char *)(v2 + 17) = 0;
  long long v3 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  IMSClientManager::instance(v3);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  uint64_t v4 = *((void *)__p + 25);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v5 = a1[40];
  std::string::basic_string[abi:ne180100]<0>(&__p, "MediaError");
  xpc_object_t object = xpc_null_create();
  IMSCallManager::terminateLazuli(v4, v5 + 1656, (uint64_t)&__p, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v9 < 0) {
    operator delete(__p);
  }
}

void sub_1C5317CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MessageSession::handleDisconnected(uint64_t a1)
{
}

void MessageSession::handleDataReceived(std::__shared_weak_count **a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = ((uint64_t (*)(std::__shared_weak_count **))(*a1)[2].__shared_weak_owners_)(a1);
  ((void (*)(std::__shared_weak_count **, uint64_t))(*a1)->__shared_weak_owners_)(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"MessageSession::handleDataReceived decoding ", 44);
  *(unsigned char *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" bytes", 6);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  char v6 = v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    memset(&v15, 0, sizeof(v15));
    uint64_t v7 = a1[40];
    if (SHIBYTE(v7[69].__shared_weak_owners_) < 0)
    {
      std::string::__init_copy_ctor_external(&v15, (const std::string::value_type *)v7[69].__vftable, v7[69].__shared_owners_);
      char v6 = *(unsigned char *)(a2 + 23);
    }
    else
    {
      std::string v15 = (std::string)v7[69];
    }
    uint64_t v8 = (uint64_t)a1[44];
    if (v6 < 0) {
      std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v14 = *(std::string *)a2;
    }
    char v9 = a1[16];
    v12[0] = a1[15];
    v12[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v15;
    }
    long long v17 = 0;
    xpc_object_t v10 = (char *)operator new(0x38uLL);
    *(void *)xpc_object_t v10 = &unk_1F20C24D8;
    *(_OWORD *)(v10 + 8) = *(_OWORD *)v12;
    *((void *)v10 + 3) = a1;
    xpc_object_t v11 = (std::string *)(v10 + 32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((void *)v10 + 6) = *((void *)&__p.__r_.__value_.__l + 2);
    }
    long long v17 = v10;
    LazuliFramer::pumpData(v8, (const std::string::value_type *)&v14, (uint64_t)v16);
    std::__function::__value_func<void ()(std::shared_ptr<LazuliMessage>)>::~__value_func[abi:ne180100](v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C5317FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v29 = (std::__shared_weak_count *)v27[2];
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  operator delete(v27);
  MessageSession::handleDataReceived(std::string const&)::$_0::~$_0((uint64_t)&a9);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t MessageSession::handleDataReceived(std::string const&)::$_0::~$_0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void non-virtual thunk to'MessageSession::handleDataReceived(uint64_t a1, uint64_t a2)
{
}

void MessageSession::processMessageRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void **)a2;
  if (*(void *)a2)
  {
    {
      uint64_t v5 = *(void *)(a2 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      MessageSession::dumpMessage(a1);
    }
    {
      uint64_t v6 = *(void *)(a2 + 8);
      if (v6)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      MessageSession::dumpMessage(a1);
    }
  }
}

void sub_1C531A754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,std::__shared_weak_count *a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a49 < 0) {
    operator delete(__p);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  _Unwind_Resume(exception_object);
}

void MessageSession::handleSendError(void *a1, unsigned __int8 *a2, const std::string *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"MessageSession::handleSendError for MSRP Message-ID ", 52);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v6 + 32))(v6, a2);
  uint64_t v7 = *(void **)(v6 + 8);
  LOBYTE(__p) = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&__p, 1);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(const std::string *, uint64_t))(a3->__r_.__value_.__r.__words[0] + 16))(a3, v6);
  uint64_t v8 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  IMSClientManager::instance(v8);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  uint64_t v9 = *((void *)__p + 25);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v10 = a1[40];
  std::string::basic_string[abi:ne180100]<0>(&__p, "MediaError");
  xpc_object_t object = xpc_null_create();
  IMSCallManager::terminateLazuli(v9, v10 + 1656, (uint64_t)&__p, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v26 < 0) {
    operator delete(__p);
  }
  xpc_object_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1 + 124, a2);
  if (v11)
  {
    std::string v12 = v11;
    std::string::operator=((std::string *)&a3[2], (const std::string *)(v11 + 40));
    uint64_t v13 = *((unsigned int *)v12 + 16);
  }
  else
  {
    uint64_t v14 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"No ctTransactionId for MSRP Message-ID ", 39);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v14 + 32))(v14, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    uint64_t v13 = 0;
    *(unsigned char *)(v14 + 17) = 0;
  }
  uint64_t v15 = a1[40];
  uint64_t v16 = *(void *)(v15 + 216);
  long long v17 = *(std::__shared_weak_count **)(v15 + 224);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = *(void *)(v16 + 136);
  uint64_t v20 = *(void *)(v18 + 208);
  long long v19 = *(std::__shared_weak_count **)(v18 + 216);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = a1[40];
  ImsResult::ImsResult((ImsResult *)v22, a3);
  SipLazuliManager::handleOutgoingMessageError(v20, (uint64_t)(a1 + 60), v21 + 1656, v13, (uint64_t)v22);
  ImsResult::~ImsResult((ImsResult *)v22);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_1C531AF4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  ImsResult::~ImsResult((ImsResult *)&a10);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MessageSession::handleSendError(uint64_t a1, unsigned __int8 *a2, const std::string *a3)
{
}

void MessageSession::handleConferenceNotification(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Got conference update from ", 27);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)": ", 2);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a3);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v31 = 0;
  xpc_object_t v32 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1[40] + 120), &v31);
  if (!v31) {
    goto LABEL_34;
  }
  xpc_object_t v30 = 0;
  xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v8 = v7;
  if (v7)
  {
    xpc_object_t v30 = v7;
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v30 = v8;
    if (!v8)
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v8 = 0;
      goto LABEL_9;
    }
  }
  if (MEMORY[0x1C878F160](v8) != MEMORY[0x1E4F14590])
  {
    xpc_object_t v9 = xpc_null_create();
LABEL_9:
    xpc_object_t v30 = v9;
    goto LABEL_10;
  }
  xpc_retain(v8);
LABEL_10:
  xpc_release(v8);
  uint64_t v10 = a1[40];
  xpc_object_t v11 = (const char *)(v10 + 1656);
  if (*(char *)(v10 + 1679) < 0) {
    xpc_object_t v11 = *(const char **)v11;
  }
  xpc_object_t v28 = xpc_string_create(v11);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  std::string __p = &v30;
  long long v22 = "kConversationId";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v28, &v29);
  xpc_release(v29);
  xpc_object_t v29 = 0;
  xpc_release(v28);
  xpc_object_t v28 = 0;
  uint64_t v12 = a1[40];
  uint64_t v13 = (const char *)(v12 + 1712);
  if (*(char *)(v12 + 1735) < 0) {
    uint64_t v13 = *(const char **)v13;
  }
  xpc_object_t object = xpc_string_create(v13);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  std::string __p = &v30;
  long long v22 = "kContributionId";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &object, &v27);
  xpc_release(v27);
  xpc_object_t v27 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  SipUri::asString(a2, &__p);
  if (v23 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  xpc_object_t v24 = xpc_string_create(p_p);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  v20[0] = &v30;
  v20[1] = "kConferenceFocus";
  xpc::dict::object_proxy::operator=((uint64_t)v20, &v24, &v25);
  xpc_release(v25);
  xpc_object_t v25 = 0;
  xpc_release(v24);
  xpc_object_t v24 = 0;
  if (v23 < 0) {
    operator delete(__p);
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v15 = (const char *)a3;
  }
  else {
    uint64_t v15 = *(const char **)a3;
  }
  xpc_object_t v18 = xpc_string_create(v15);
  if (!v18) {
    xpc_object_t v18 = xpc_null_create();
  }
  std::string __p = &v30;
  long long v22 = "kResourceXml";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v18, &v19);
  xpc_release(v19);
  xpc_object_t v19 = 0;
  xpc_release(v18);
  uint64_t v16 = v31;
  xpc_object_t v17 = v30;
  xpc_object_t v18 = 0;
  if (v30) {
    xpc_retain(v30);
  }
  else {
    xpc_object_t v17 = xpc_null_create();
  }
  LazuliDelegate::handleGroupChatUpdate(v16, &v17);
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v30);
LABEL_34:
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
}

void sub_1C531B394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v10 - 56));
  uint64_t v12 = *(std::__shared_weak_count **)(v10 - 40);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MessageSession::handleConferenceNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void MessageSession::addParticipant(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v4 || (uint64_t v7 = *(void *)(a1 + 120), (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  v19[0] = v7;
  v19[1] = (uint64_t)v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  SipDialog::stack(*(std::__shared_weak_count **)(a1 + 320), &v16);
  if (*(char *)(v16 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v16 + 4160), *(void *)(v16 + 4168));
  }
  else {
    std::string v18 = *(std::string *)(v16 + 4160);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 328);
  v15[0] = *(void *)(a1 + 320);
  v15[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  LazuliGroupParticipant::addParticipant(v19, &v18, (uint64_t)a2, a3, v15, &v20);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::__shared_weak_count::__release_weak(v9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  xpc_object_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 888, a2, (long long **)&v18);
  uint64_t v12 = v20;
  uint64_t v13 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)v11 + 6);
  *((void *)v11 + 5) = v12;
  *((void *)v11 + 6) = v13;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1C531B584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void MessageSession::removeParticipant(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 128);
  if (!v4 || (uint64_t v7 = *(void *)(a1 + 120), (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  xpc_object_t v9 = v8;
  v19[0] = v7;
  v19[1] = (uint64_t)v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  SipDialog::stack(*(std::__shared_weak_count **)(a1 + 320), &v16);
  if (*(char *)(v16 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v16 + 4160), *(void *)(v16 + 4168));
  }
  else {
    std::string v18 = *(std::string *)(v16 + 4160);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 328);
  v15[0] = *(void *)(a1 + 320);
  v15[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  LazuliGroupParticipant::removeParticipant(v19, &v18, (uint64_t)a2, a3, v15, &v20);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::__shared_weak_count::__release_weak(v9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  xpc_object_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 888, a2, (long long **)&v18);
  uint64_t v12 = v20;
  uint64_t v13 = v21;
  if (v21) {
    atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)v11 + 6);
  *((void *)v11 + 5) = v12;
  *((void *)v11 + 6) = v13;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1C531B74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_weak(v18);
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void MessageSession::handleParticipantStateChange(SipDialog **a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  xpc_object_t v58 = 0;
  SipDialog::lazuliGroupParams(a1[40], &v58);
  uint64_t v14 = MEMORY[0x1C878F160](v58);
  uint64_t v15 = MEMORY[0x1E4F14590];
  if (v14 != MEMORY[0x1E4F14590])
  {
    uint64_t v16 = (*((uint64_t (**)(SipDialog **))*a1 + 7))(a1);
    (*((void (**)(SipDialog **, uint64_t))*a1 + 2))(a1, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"No group params for refer ", 26);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 32))(v16, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    goto LABEL_40;
  }
  xpc_object_t v57 = 0;
  xpc_object_t v17 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v18 = v17;
  if (v17)
  {
    xpc_object_t v57 = v17;
  }
  else
  {
    xpc_object_t v18 = xpc_null_create();
    xpc_object_t v57 = v18;
    if (!v18)
    {
      xpc_object_t v19 = xpc_null_create();
      xpc_object_t v18 = 0;
      goto LABEL_10;
    }
  }
  if (MEMORY[0x1C878F160](v18) == v15)
  {
    xpc_retain(v18);
    goto LABEL_11;
  }
  xpc_object_t v19 = xpc_null_create();
LABEL_10:
  xpc_object_t v57 = v19;
LABEL_11:
  xpc_release(v18);
  memset(&v56, 0, sizeof(v56));
  SipDialog::stack((std::__shared_weak_count *)a1[40], &v54);
  if (*((char *)v54 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v56, (const std::string::value_type *)v54[520], (std::string::size_type)v54[521]);
  }
  else {
    std::string v56 = *(std::string *)(v54 + 520);
  }
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v20 = &v56;
  }
  else {
    uint64_t v20 = (std::string *)v56.__r_.__value_.__r.__words[0];
  }
  xpc_object_t v52 = xpc_string_create((const char *)v20);
  if (!v52) {
    xpc_object_t v52 = xpc_null_create();
  }
  xpc_object_t v54 = &v57;
  xpc_object_t v55 = (std::__shared_weak_count *)"kStackId";
  xpc::dict::object_proxy::operator=((uint64_t)&v54, &v52, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v52);
  xpc_object_t v52 = 0;
  xpc_object_t v50 = xpc_BOOL_create(a4 == 2);
  if (!v50) {
    xpc_object_t v50 = xpc_null_create();
  }
  xpc_object_t v54 = &v57;
  xpc_object_t v55 = (std::__shared_weak_count *)"kIsSuccess";
  xpc::dict::object_proxy::operator=((uint64_t)&v54, &v50, &v51);
  xpc_release(v51);
  xpc_object_t v51 = 0;
  xpc_release(v50);
  xpc_object_t v50 = 0;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v21 = (const char *)a2;
  }
  else {
    uint64_t v21 = *(const char **)a2;
  }
  xpc_object_t v48 = xpc_string_create(v21);
  if (!v48) {
    xpc_object_t v48 = xpc_null_create();
  }
  xpc_object_t v54 = &v57;
  xpc_object_t v55 = (std::__shared_weak_count *)"kTransactionId";
  xpc::dict::object_proxy::operator=((uint64_t)&v54, &v48, &v49);
  xpc_release(v49);
  xpc_object_t v49 = 0;
  xpc_release(v48);
  xpc_object_t v48 = 0;
  xpc_object_t v54 = &v58;
  xpc_object_t v55 = (std::__shared_weak_count *)"kConversationId";
  xpc_object_t v45 = &v57;
  xpc_object_t v46 = "kConversationId";
  xpc::dict::object_proxy::operator=((uint64_t)&v45, (uint64_t)&v54, &v47);
  xpc_release(v47);
  xpc_object_t v54 = &v58;
  xpc_object_t v55 = (std::__shared_weak_count *)"kContributionId";
  xpc_object_t v45 = &v57;
  xpc_object_t v46 = "kContributionId";
  xpc_object_t v47 = 0;
  xpc::dict::object_proxy::operator=((uint64_t)&v45, (uint64_t)&v54, &v44);
  xpc_release(v44);
  xpc_object_t v44 = 0;
  xpc_object_t v54 = 0;
  xpc_object_t v55 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)&v56.__r_.__value_.__l.__data_, &v54);
  long long v22 = (LazuliDelegate *)v54;
  if (v54)
  {
    if (a3 == 2)
    {
      xpc_object_t v42 = v57;
      if (v57) {
        xpc_retain(v57);
      }
      else {
        xpc_object_t v42 = xpc_null_create();
      }
      LazuliDelegate::handleParticipantRemoved(v22, &v42);
      xpc_release(v42);
      xpc_object_t v42 = 0;
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>>>::__erase_unique<std::string>(a1 + 111, (unsigned __int8 *)a2))
      {
        goto LABEL_35;
      }
      uint64_t v36 = (*((uint64_t (**)(SipDialog **))*a1 + 7))(a1);
      (*((void (**)(SipDialog **, uint64_t))*a1 + 2))(a1, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"Unable to erase removed participant for ", 40);
      *(unsigned char *)(v36 + 17) = 0;
      xpc_object_t v24 = (unsigned char *)(v36 + 17);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 32))(v36, a2);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      if (a3 != 1) {
        goto LABEL_35;
      }
      xpc_object_t v43 = v57;
      if (v57) {
        xpc_retain(v57);
      }
      else {
        xpc_object_t v43 = xpc_null_create();
      }
      LazuliDelegate::handleParticipantAdded(v22, &v43);
      xpc_release(v43);
      xpc_object_t v43 = 0;
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>>>::__erase_unique<std::string>(a1 + 111, (unsigned __int8 *)a2))
      {
        goto LABEL_35;
      }
      uint64_t v35 = (*((uint64_t (**)(SipDialog **))*a1 + 7))(a1);
      (*((void (**)(SipDialog **, uint64_t))*a1 + 2))(a1, v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v35 + 8), (uint64_t)"Unable to erase added participant for ", 38);
      *(unsigned char *)(v35 + 17) = 0;
      xpc_object_t v24 = (unsigned char *)(v35 + 17);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 32))(v35, a2);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    uint64_t v23 = (*((uint64_t (**)(SipDialog **))*a1 + 7))(a1);
    (*((void (**)(SipDialog **, uint64_t))*a1 + 2))(a1, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"No delegate for refer ", 22);
    *(unsigned char *)(v23 + 17) = 0;
    xpc_object_t v24 = (unsigned char *)(v23 + 17);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 32))(v23, a2);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *xpc_object_t v24 = 0;
LABEL_35:
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  xpc_release(v57);
LABEL_40:
  xpc_release(v58);
  uint64_t v25 = (*((uint64_t (**)(SipDialog **))*a1 + 8))(a1);
  (*((void (**)(SipDialog **, uint64_t))*a1 + 2))(a1, v25);
  std::ostream::operator<<();
  *(unsigned char *)(v25 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)" ongoing refers", 15);
  *(unsigned char *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v25 + 17) = 0;
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = 0uLL;
  char v26 = a1[40];
  xpc_object_t v27 = (std::__shared_weak_count *)*((void *)v26 + 232);
  xpc_object_t v28 = (std::__shared_weak_count *)*((void *)v26 + 233);
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSessionInterface::stack(v27, &v56);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  uint64_t v29 = v56.__r_.__value_.__r.__words[0];
  if (v56.__r_.__value_.__r.__words[0])
  {
    if (a3 == 1) {
      uint64_t v30 = 0x455449564E49;
    }
    else {
      uint64_t v30 = 4544834;
    }
    uint64_t v31 = &qword_1C56C5D20;
    if (a3 == 1) {
      uint64_t v31 = &qword_1C56C5D98;
    }
    LODWORD(v45) = *(_DWORD *)v31;
    *(_DWORD *)((char *)&v45 + 3) = *(_DWORD *)((char *)v31 + 3);
    if (a3 == 1) {
      char v32 = 6;
    }
    else {
      char v32 = 3;
    }
    (*(void (**)(xpc_object_t **__return_ptr))(**(void **)(v56.__r_.__value_.__r.__words[0] + 136) + 104))(&v54);
    uint64_t v33 = (uint64_t)v54;
    std::string::size_type size = (std::__shared_weak_count *)v56.__r_.__value_.__l.__size_;
    v41[0] = v29;
    v41[1] = v56.__r_.__value_.__l.__size_;
    if (v56.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v56.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    v38[0] = v30;
    v38[1] = 0;
    *(_DWORD *)xpc_object_t v39 = v45;
    *(_DWORD *)&v39[3] = *(_DWORD *)((char *)&v45 + 3);
    char v40 = v32;
    if (*(char *)(a7 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a7, *(void *)(a7 + 8));
    }
    else {
      std::string __p = *(std::string *)a7;
    }
    IMSMetricsManager::logLazuliRefer(v33, v41, (uint64_t)v38, a4 == 2, a5, a6, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (size) {
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
    }
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
  }
  else
  {
    std::string::size_type size = (std::__shared_weak_count *)v56.__r_.__value_.__l.__size_;
  }
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
}

void sub_1C531C0E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object,xpc_object_t a21)
{
  xpc_release(object);
  uint64_t v23 = *(std::__shared_weak_count **)(v21 - 136);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (*(char *)(v21 - 105) < 0) {
    operator delete(*(void **)(v21 - 128));
  }
  xpc_release(*(xpc_object_t *)(v21 - 96));
  xpc_release(*(xpc_object_t *)(v21 - 88));
  _Unwind_Resume(a1);
}

void MessageSession::handleTimer(uint64_t a1, const std::string *a2)
{
  char v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v4 >= 0) {
    int64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    int64_t size = a2->__r_.__value_.__l.__size_;
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  uint64_t v7 = (char *)v6 + size;
  if (size >= 1)
  {
    xpc_object_t v8 = (std::string *)v6;
    do
    {
      xpc_object_t v9 = (char *)memchr(v8, 32, size);
      if (!v9) {
        break;
      }
      if (*v9 == 32) {
        goto LABEL_13;
      }
      xpc_object_t v8 = (std::string *)(v9 + 1);
      int64_t size = v7 - (char *)v8;
    }
    while (v7 - (char *)v8 > 0);
  }
  xpc_object_t v9 = v7;
LABEL_13:
  if (v9 == v7) {
    std::string::size_type v10 = -1;
  }
  else {
    std::string::size_type v10 = v9 - (char *)v6;
  }
  memset(&__str, 0, sizeof(__str));
  std::string::basic_string(&__str, a2, 0, v10, (std::allocator<char> *)&v28);
  memset(&v31, 0, sizeof(v31));
  xpc_object_t v11 = std::string::basic_string(&v31, a2, v10 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v28);
  unint64_t v12 = std::stoul(v11, 0, 10);
  long long v29 = 0u;
  memset(v30, 0, sizeof(v30));
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  v28.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  v28.__r_.__value_.__r.__words[2] = 1073741831;
  std::string::operator=((std::string *)&v30[1], &__str);
  uint64_t v13 = *(void *)(a1 + 320);
  uint64_t v14 = *(void *)(v13 + 216);
  uint64_t v15 = *(std::__shared_weak_count **)(v13 + 224);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(void *)(v14 + 136);
  uint64_t v18 = *(void *)(v16 + 208);
  xpc_object_t v17 = *(std::__shared_weak_count **)(v16 + 216);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = *(void *)(a1 + 320);
  ImsResult::ImsResult((ImsResult *)v27, &v28);
  SipLazuliManager::handleOutgoingMessageError(v18, a1 + 480, v19 + 1656, v12, (uint64_t)v27);
  ImsResult::~ImsResult((ImsResult *)v27);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  IMSClientManager::instance(v20);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  uint64_t v21 = *((void *)__p + 25);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v22 = *(void *)(a1 + 320);
  std::string::basic_string[abi:ne180100]<0>(&__p, "MediaError");
  xpc_object_t object = xpc_null_create();
  IMSCallManager::terminateLazuli(v21, v22 + 1656, (uint64_t)&__p, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (v26 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult((ImsResult *)&v28);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C531C484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  xpc_release(object);
  if (a15 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult((ImsResult *)&a25);
  if (*(char *)(v25 - 89) < 0) {
    operator delete(*(void **)(v25 - 112));
  }
  if (*(char *)(v25 - 65) < 0) {
    operator delete(*(void **)(v25 - 88));
  }
  _Unwind_Resume(a1);
}

void MessageSession::stackId(MessageSession *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 6);
  }
}

void MessageSession::toTimerIdString(MessageSession *this)
{
}

void non-virtual thunk to'MessageSession::stackId(const std::string::value_type **this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this - 49) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(this - 9), (std::string::size_type)*(this - 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(this - 9);
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)*(this - 7);
  }
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        xpc_object_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        xpc_object_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::IncomingMessage>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MessageSession::IncomingMessage>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,MessageSession::IncomingMessage>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MessageSession::SentMessageInfo>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  char v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,MessageSession::SentMessageInfo>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<LazuliMessageDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C22B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliMessageDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C22B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<LazuliFramer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2308;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliFramer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2308;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliFramer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::allocate_shared[abi:ne180100]<LazuliRequest,std::allocator<LazuliRequest>,std::string const&,std::string const&,LazuliMessageEncodingMap *,void>(uint64_t *a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v8 = operator new(0xB0uLL);
  v8[1] = 0;
  v8[2] = 0;
  void *v8 = &unk_1F20C2620;
  uint64_t result = LazuliRequest::LazuliRequest((uint64_t)(v8 + 3), a2, a3, a4);
  *a1 = result;
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1C531C9AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliRequest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliRequest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliRequest>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<LazuliToPathHeader,std::allocator<LazuliToPathHeader>,LazuliRouteSet &,void>(void *a1, const LazuliRouteSet *a2)
{
  char v4 = operator new(0x88uLL);
  v4[1] = 0;
  uint64_t v4[2] = 0;
  void *v4 = &unk_1F20C2790;
  LazuliToPathHeader::LazuliToPathHeader((LazuliToPathHeader *)(v4 + 3), a2);
  *a1 = v4 + 3;
  a1[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1C531CAE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliToPathHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliToPathHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliToPathHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<LazuliFromPathHeader,std::allocator<LazuliFromPathHeader>,LazuliRouteSet &,void>(void *a1, const LazuliRouteSet *a2)
{
  char v4 = operator new(0x88uLL);
  v4[1] = 0;
  uint64_t v4[2] = 0;
  void *v4 = &unk_1F20C25D0;
  LazuliFromPathHeader::LazuliFromPathHeader((LazuliFromPathHeader *)(v4 + 3), a2);
  *a1 = v4 + 3;
  a1[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1C531CC24(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliFromPathHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C25D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliFromPathHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C25D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliFromPathHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<LazuliMessageIdHeader,std::allocator<LazuliMessageIdHeader>,std::string const&,void>(void *a1, const std::string *a2)
{
  char v4 = (std::string *)operator new(0x70uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20C26D8;
  LazuliStringHeader::LazuliStringHeader(v4 + 1, (const std::string *)"Message-ID", a2);
  v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20D36E0;
  v4[4].__r_.__value_.__s.__data_[8] = 1;
  *a1 = v4 + 1;
  a1[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, &v4[1].__r_.__value_.__l.__size_, (uint64_t)&v4[1]);
}

void sub_1C531CD8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliMessageIdHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C26D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliMessageIdHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C26D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliMessageIdHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<LazuliByteRangeHeader,std::allocator<LazuliByteRangeHeader>,unsigned int &,unsigned int &,unsigned int &,void>(void *a1, int a2, int a3, int a4)
{
  uint64_t v8 = (std::string *)operator new(0x58uLL);
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B9958;
  LazuliHeader::LazuliHeader(v8 + 1, (const std::string *)"Byte-Range");
  v8[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B98E0;
  HIDWORD(v8[3].__r_.__value_.__r.__words[0]) = a2;
  LODWORD(v8[3].__r_.__value_.__r.__words[1]) = a3;
  HIDWORD(v8[3].__r_.__value_.__r.__words[1]) = a4;
  *a1 = v8 + 1;
  a1[1] = v8;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, &v8[1].__r_.__value_.__l.__size_, (uint64_t)&v8[1]);
}

void sub_1C531CF00(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliContentTypeHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2580;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliContentTypeHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2580;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliContentTypeHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<LazuliStatusHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliStatusHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliStatusHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<LazuliResponse>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliResponse>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2670;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<LazuliResponse>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::IncomingMessage>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  uint64_t v6 = (void *)(a1 + 24);
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v16 = *a3;
  xpc_object_t v17 = (void *)(a1 + 16);
  uint64_t v43 = 0;
  uint64_t v18 = (char *)operator new(0x68uLL);
  v42[0] = v18;
  v42[1] = a1 + 16;
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = v8;
  uint64_t v19 = (std::string *)(v18 + 16);
  if (*((char *)v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v20 = *v16;
    *((void *)v18 + 4) = *((void *)v16 + 2);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 40) = 0u;
  LOBYTE(v43) = 1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v9 || (float)(v22 * (float)v9) < v21)
  {
    BOOL v23 = 1;
    if (v9 >= 3) {
      BOOL v23 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v9);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          xpc_object_t v27 = operator new(8 * *(void *)&prime);
          std::string v28 = *(void **)a1;
          *(void *)a1 = v27;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v29++) = 0;
          while (*(void *)&prime != v29);
          uint64_t v30 = (void *)*v17;
          if (*v17)
          {
            unint64_t v31 = v30[1];
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&prime) {
                v31 %= *(void *)&prime;
              }
            }
            else
            {
              v31 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v31) = v17;
            uint64_t v36 = (void *)*v30;
            if (*v30)
            {
              do
              {
                unint64_t v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(void *)&prime) {
                    v37 %= *(void *)&prime;
                  }
                }
                else
                {
                  v37 &= *(void *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v37))
                  {
                    *(void *)(*(void *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *uint64_t v30 = *v36;
                  void *v36 = **(void **)(*(void *)a1 + 8 * v37);
                  **(void **)(*(void *)a1 + 8 * v37) = v36;
                  uint64_t v36 = v30;
                }
                unint64_t v37 = v31;
LABEL_58:
                uint64_t v30 = v36;
                uint64_t v36 = (void *)*v36;
                unint64_t v31 = v37;
              }
              while (v36);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        int v41 = *(void **)a1;
        *(void *)a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  std::string v38 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
  uint64_t i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(void *)v42[0] = *v38;
LABEL_75:
    std::__shared_weak_count *v38 = i;
    goto LABEL_76;
  }
  *(void *)v42[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v12) = v17;
  if (*(void *)i)
  {
    unint64_t v39 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v39 >= v9) {
        v39 %= v9;
      }
    }
    else
    {
      v39 &= v9 - 1;
    }
    std::string v38 = (unsigned __int8 **)(*(void *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v6;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_1C531D55C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MessageSession::IncomingMessage>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20C2358;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20C2358;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  JUMPOUT(0x1C878E320);
}

void *std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = &unk_1F20C2358;
  std::__compressed_pair_elem<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1C531D6F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F20C2358;
  return std::__compressed_pair_elem<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    char v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      char v5 = v4;
      if (*(void *)(a1 + 48) && !*(unsigned char *)(a1 + 40))
      {
        uint64_t v6 = *(void *)(v3 + 320);
        uint64_t v7 = *(void *)(v6 + 216);
        unint64_t v8 = *(std::__shared_weak_count **)(v6 + 224);
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v9 = *(void *)(v7 + 136);
        uint64_t v10 = *(void *)(v9 + 208);
        unint64_t v11 = *(std::__shared_weak_count **)(v9 + 216);
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipLazuliManager::releasePowerAssertion(v10, (void **)(a1 + 16));
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C531D840(_Unwind_Exception *a1)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  char v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void std::__function::__alloc_func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 8);
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::remove(uint64_t result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)a2[1];
  unint64_t v4 = a3[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*a2 + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*a2 + 8 * v4) = 0;
  }
  uint64_t v10 = *a3;
  if (*a3)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*a2 + 8 * v11) = v7;
      uint64_t v10 = *a3;
    }
  }
  *uint64_t v7 = v10;
  *a3 = 0;
  --a2[3];
  *(void *)uint64_t result = a3;
  *(void *)(result + 8) = a2 + 2;
  *(unsigned char *)(result + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MessageSession::SentMessageInfo>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  uint64_t v6 = (void *)(a1 + 24);
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v16 = *a3;
  xpc_object_t v17 = (void *)(a1 + 16);
  uint64_t v43 = 0;
  uint64_t v18 = (char *)operator new(0x90uLL);
  v42[0] = v18;
  v42[1] = a1 + 16;
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = v8;
  uint64_t v19 = (std::string *)(v18 + 16);
  if (*((char *)v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v20 = *v16;
    *((void *)v18 + 4) = *((void *)v16 + 2);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  *((void *)v18 + 17) = 0;
  *(_OWORD *)(v18 + 120) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 40) = 0u;
  LOBYTE(v43) = 1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v9 || (float)(v22 * (float)v9) < v21)
  {
    BOOL v23 = 1;
    if (v9 >= 3) {
      BOOL v23 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v9);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          xpc_object_t v27 = operator new(8 * *(void *)&prime);
          std::string v28 = *(void **)a1;
          *(void *)a1 = v27;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v29++) = 0;
          while (*(void *)&prime != v29);
          uint64_t v30 = (void *)*v17;
          if (*v17)
          {
            unint64_t v31 = v30[1];
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&prime) {
                v31 %= *(void *)&prime;
              }
            }
            else
            {
              v31 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v31) = v17;
            uint64_t v36 = (void *)*v30;
            if (*v30)
            {
              do
              {
                unint64_t v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(void *)&prime) {
                    v37 %= *(void *)&prime;
                  }
                }
                else
                {
                  v37 &= *(void *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v37))
                  {
                    *(void *)(*(void *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *uint64_t v30 = *v36;
                  void *v36 = **(void **)(*(void *)a1 + 8 * v37);
                  **(void **)(*(void *)a1 + 8 * v37) = v36;
                  uint64_t v36 = v30;
                }
                unint64_t v37 = v31;
LABEL_58:
                uint64_t v30 = v36;
                uint64_t v36 = (void *)*v36;
                unint64_t v31 = v37;
              }
              while (v36);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        int v41 = *(void **)a1;
        *(void *)a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  std::string v38 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
  uint64_t i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(void *)v42[0] = *v38;
LABEL_75:
    std::__shared_weak_count *v38 = i;
    goto LABEL_76;
  }
  *(void *)v42[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v12) = v17;
  if (*(void *)i)
  {
    unint64_t v39 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v39 >= v9) {
        v39 %= v9;
      }
    }
    else
    {
      v39 &= v9 - 1;
    }
    std::string v38 = (unsigned __int8 **)(*(void *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v6;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_1C531DF8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C23D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C23D8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C23D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C23D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      unint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 160))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C531E1EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::target_type()
{
}

void *std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C2458;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C2458;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C2458;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C2458;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      unint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 160))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C531E494(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::target_type()
{
}

uint64_t std::__function::__func<MessageSession::handleDataReceived(std::string const&)::$_0,std::allocator<MessageSession::handleDataReceived(std::string const&)::$_0>,void ()(std::shared_ptr<LazuliMessage>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20C24D8;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<MessageSession::handleDataReceived(std::string const&)::$_0,std::allocator<MessageSession::handleDataReceived(std::string const&)::$_0>,void ()(std::shared_ptr<LazuliMessage>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F20C24D8;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<MessageSession::handleDataReceived(std::string const&)::$_0,std::allocator<MessageSession::handleDataReceived(std::string const&)::$_0>,void ()(std::shared_ptr<LazuliMessage>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = &unk_1F20C24D8;
  std::__compressed_pair_elem<MessageSession::handleDataReceived(std::string const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<MessageSession::handleDataReceived(std::string const&)::$_0 const&,0ul>((std::string *)(v2 + 8), v1);
  return v2;
}

void sub_1C531E620(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<MessageSession::handleDataReceived(std::string const&)::$_0,std::allocator<MessageSession::handleDataReceived(std::string const&)::$_0>,void ()(std::shared_ptr<LazuliMessage>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C24D8;
  return std::__compressed_pair_elem<MessageSession::handleDataReceived(std::string const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<MessageSession::handleDataReceived(std::string const&)::$_0 const&,0ul>((std::string *)(a2 + 8), a1 + 8);
}

void std::__function::__func<MessageSession::handleDataReceived(std::string const&)::$_0,std::allocator<MessageSession::handleDataReceived(std::string const&)::$_0>,void ()(std::shared_ptr<LazuliMessage>)>::destroy(uint64_t a1)
{
}

void std::__function::__func<MessageSession::handleDataReceived(std::string const&)::$_0,std::allocator<MessageSession::handleDataReceived(std::string const&)::$_0>,void ()(std::shared_ptr<LazuliMessage>)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<MessageSession::handleDataReceived(std::string const&)::$_0,std::allocator<MessageSession::handleDataReceived(std::string const&)::$_0>,void ()(std::shared_ptr<LazuliMessage>)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<MessageSession::handleDataReceived(std::string const&)::$_0,std::allocator<MessageSession::handleDataReceived(std::string const&)::$_0>,void ()(std::shared_ptr<LazuliMessage>)>::operator()(void *a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a2;
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    uint64_t v6 = a1[3];
    unint64_t v7 = std::__shared_weak_count::lock(v5);
    if (v7 && a1[1])
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 64))(v6);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Decoded message", 15);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      unint64_t v12 = v4;
      uint64_t v13 = v3;
      if (v3) {
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **))(*(void *)v6 + 88))(v6, &v12);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
LABEL_14:
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v7 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&v12, "msg.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v9 = ims::error((uint64_t)&v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"MessageSession lost for handling incoming message: ", 51);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *))(*(void *)v9 + 32))(v9, a1 + 4);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0) {
    operator delete(v12);
  }
  if (v7) {
    goto LABEL_14;
  }
LABEL_15:
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C531E8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MessageSession::handleDataReceived(std::string const&)::$_0,std::allocator<MessageSession::handleDataReceived(std::string const&)::$_0>,void ()(std::shared_ptr<LazuliMessage>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MessageSession::handleDataReceived(std::string const&)::$_0,std::allocator<MessageSession::handleDataReceived(std::string const&)::$_0>,void ()(std::shared_ptr<LazuliMessage>)>::target_type()
{
}

std::string *std::__compressed_pair_elem<MessageSession::handleDataReceived(std::string const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<MessageSession::handleDataReceived(std::string const&)::$_0 const&,0ul>(std::string *a1, uint64_t a2)
{
  std::string::size_type v3 = *(void *)(a2 + 8);
  a1->__r_.__value_.__r.__words[0] = *(void *)a2;
  a1->__r_.__value_.__l.__size_ = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  a1->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  unint64_t v4 = a1 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_1C531EA2C(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<MessageSession::handleDataReceived(std::string const&)::$_0,std::allocator<MessageSession::handleDataReceived(std::string const&)::$_0>,void ()(std::shared_ptr<LazuliMessage>)>::destroy[abi:ne180100](uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void *std::__function::__value_func<void ()(std::shared_ptr<LazuliMessage>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  uint64_t v6 = (void *)(a1 + 24);
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v16 = *a3;
  xpc_object_t v17 = (void *)(a1 + 16);
  uint64_t v43 = 0;
  uint64_t v18 = operator new(0x38uLL);
  v42[0] = v18;
  v42[1] = a1 + 16;
  *uint64_t v18 = 0;
  v18[1] = v8;
  uint64_t v19 = (std::string *)(v18 + 2);
  if (*((char *)v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v16, *((void *)v16 + 1));
  }
  else
  {
    long long v20 = *v16;
    v18[4] = *((void *)v16 + 2);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  v18[5] = 0;
  v18[6] = 0;
  LOBYTE(v43) = 1;
  float v21 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v22 = *(float *)(a1 + 32);
  if (!v9 || (float)(v22 * (float)v9) < v21)
  {
    BOOL v23 = 1;
    if (v9 >= 3) {
      BOOL v23 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v24 = v23 | (2 * v9);
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          xpc_object_t v27 = operator new(8 * *(void *)&prime);
          std::string v28 = *(void **)a1;
          *(void *)a1 = v27;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v29++) = 0;
          while (*(void *)&prime != v29);
          uint64_t v30 = (void *)*v17;
          if (*v17)
          {
            unint64_t v31 = v30[1];
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&prime) {
                v31 %= *(void *)&prime;
              }
            }
            else
            {
              v31 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v31) = v17;
            uint64_t v36 = (void *)*v30;
            if (*v30)
            {
              do
              {
                unint64_t v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(void *)&prime) {
                    v37 %= *(void *)&prime;
                  }
                }
                else
                {
                  v37 &= *(void *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v37))
                  {
                    *(void *)(*(void *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *uint64_t v30 = *v36;
                  void *v36 = **(void **)(*(void *)a1 + 8 * v37);
                  **(void **)(*(void *)a1 + 8 * v37) = v36;
                  uint64_t v36 = v30;
                }
                unint64_t v37 = v31;
LABEL_58:
                uint64_t v30 = v36;
                uint64_t v36 = (void *)*v36;
                unint64_t v31 = v37;
              }
              while (v36);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        int v41 = *(void **)a1;
        *(void *)a1 = 0;
        if (v41) {
          operator delete(v41);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  std::string v38 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
  uint64_t i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(void *)v42[0] = *v38;
LABEL_75:
    std::__shared_weak_count *v38 = i;
    goto LABEL_76;
  }
  *(void *)v42[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(*(void *)a1 + 8 * v12) = v17;
  if (*(void *)i)
  {
    unint64_t v39 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v39 >= v9) {
        v39 %= v9;
      }
    }
    else
    {
      v39 &= v9 - 1;
    }
    std::string v38 = (unsigned __int8 **)(*(void *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v6;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_1C531EF7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = a1 + 3;
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  unint64_t v7 = v5;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v5;
    if (v5 >= *(void *)&v6) {
      unint64_t v10 = v5 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v6 - 1) & v5;
  }
  unint64_t v11 = *(unsigned __int8 ***)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  unint64_t v12 = *v11;
  if (!*v11) {
    return 0;
  }
  while (1)
  {
    unint64_t v13 = *((void *)v12 + 1);
    if (v13 == v7) {
      break;
    }
    if (v9 > 1)
    {
      if (v13 >= *(void *)&v6) {
        v13 %= *(void *)&v6;
      }
    }
    else
    {
      v13 &= *(void *)&v6 - 1;
    }
    if (v13 != v10) {
      return 0;
    }
LABEL_16:
    unint64_t v12 = *(unsigned __int8 **)v12;
    if (!v12) {
      return 0;
    }
  }
  if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 4), v12 + 16, a2) & 1) == 0) {
    goto LABEL_16;
  }
  int8x8_t v16 = (int8x8_t)a1[1];
  unint64_t v17 = *((void *)v12 + 1);
  uint8x8_t v18 = (uint8x8_t)vcnt_s8(v16);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    if (v17 >= *(void *)&v16) {
      v17 %= *(void *)&v16;
    }
  }
  else
  {
    v17 &= *(void *)&v16 - 1;
  }
  uint64_t v19 = *(unsigned __int8 **)(*a1 + 8 * v17);
  do
  {
    long long v20 = v19;
    uint64_t v19 = *(unsigned __int8 **)v19;
  }
  while (v19 != v12);
  if (v20 == a1 + 2) {
    goto LABEL_36;
  }
  unint64_t v21 = v20[1];
  if (v18.u32[0] > 1uLL)
  {
    if (v21 >= *(void *)&v16) {
      v21 %= *(void *)&v16;
    }
  }
  else
  {
    v21 &= *(void *)&v16 - 1;
  }
  if (v21 != v17)
  {
LABEL_36:
    if (!*(void *)v12) {
      goto LABEL_37;
    }
    unint64_t v22 = *(void *)(*(void *)v12 + 8);
    if (v18.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&v16) {
        v22 %= *(void *)&v16;
      }
    }
    else
    {
      v22 &= *(void *)&v16 - 1;
    }
    if (v22 != v17) {
LABEL_37:
    }
      *(void *)(*a1 + 8 * v17) = 0;
  }
  BOOL v23 = *(unsigned __int8 **)v12;
  if (*(void *)v12)
  {
    unint64_t v24 = *((void *)v23 + 1);
    if (v18.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&v16) {
        v24 %= *(void *)&v16;
      }
    }
    else
    {
      v24 &= *(void *)&v16 - 1;
    }
    if (v24 != v17)
    {
      *(void *)(*a1 + 8 * v24) = v20;
      BOOL v23 = *(unsigned __int8 **)v12;
    }
  }
  void *v20 = v23;
  *(void *)unint64_t v12 = 0;
  --*v4;
  v25[0] = v12;
  v25[1] = a1 + 2;
  uint64_t v14 = 1;
  char v26 = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25);
  return v14;
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::string::size_type v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t __cxx_global_var_init()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_1C51D1000);
  }
  return result;
}

void IMSVirtualInterface::IMSVirtualInterface(IMSVirtualInterface *this)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "ipsec");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_1F20C27E0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
}

void sub_1C531F2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void IMSVirtualInterface::~IMSVirtualInterface(void **this)
{
  *this = &unk_1F20C27E0;
  IMSVirtualInterface::deinitialize((IMSVirtualInterface *)this);
  uint64_t v2 = (std::__shared_weak_count *)this[18];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  *this = &unk_1F20C9CA0;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  IMSVirtualInterface::~IMSVirtualInterface(this);
  JUMPOUT(0x1C878E320);
}

void IMSVirtualInterface::deinitialize(IMSVirtualInterface *this)
{
  if (*((void *)this + 13))
  {
    uint64_t v2 = (*(uint64_t (**)(IMSVirtualInterface *))(*(void *)this + 64))(this);
    (*(void (**)(IMSVirtualInterface *, uint64_t))(*(void *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"deinitializing virtual interface", 32);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    VirtualInterfaceInvalidate(*((void *)this + 13));
    CFRelease(*((CFTypeRef *)this + 13));
    *((void *)this + 13) = 0;
    std::string::size_type v3 = (std::__shared_weak_count *)*((void *)this + 18);
    *((void *)this + 17) = 0;
    *((void *)this + 18) = 0;
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    if (*((char *)this + 135) < 0)
    {
      **((unsigned char **)this + 14) = 0;
      *((void *)this + 15) = 0;
    }
    else
    {
      *((unsigned char *)this + 112) = 0;
      *((unsigned char *)this + 135) = 0;
    }
  }
}

void IMSVirtualInterface::initialize(IMSVirtualInterface *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*((void *)this + 13))
  {
    uint64_t v7 = *((void *)this + 17);
    if (v7 && (*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)v7 + 104))(v7, a2, 0))
    {
      uint64_t v8 = (*(uint64_t (**)(IMSVirtualInterface *))(*(void *)this + 64))(this);
      (*(void (**)(IMSVirtualInterface *, uint64_t))(*(void *)this + 16))(this, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"virtual interface ", 18);
      *(unsigned char *)(v8 + 17) = 0;
      LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 112));
      (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" already configured", 19);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(void *)a4 = &unk_1F20B2680;
      *(void *)(a4 + 8) = &_bambiDomain;
      *(_DWORD *)(a4 + 16) = 0;
      return;
    }
    IMSVirtualInterface::deinitialize(this);
  }
  uint64_t v9 = (*(uint64_t (**)(IMSVirtualInterface *))(*(void *)this + 64))(this);
  (*(void (**)(IMSVirtualInterface *, uint64_t))(*(void *)this + 16))(this, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"creating virtual interface with mtu=", 36);
  *(unsigned char *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v9 + 17) = 0;
  unint64_t v10 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  unint64_t v11 = VirtualInterfaceCreateNexus;
  uint64_t v12 = *MEMORY[0x1E4F1CF80];
  IMSClientManager::instance(v10);
  IMSClientManager::queue((NSObject **)&__p);
  uint64_t v13 = ((uint64_t (*)(uint64_t, uint64_t, std::string::size_type, void, uint64_t, void, uint64_t, void, void))v11)(v12, 2, __p.__r_.__value_.__r.__words[0], 0, 1, 0, a3, 0, 0);
  *((void *)this + 13) = v13;
  if (__p.__r_.__value_.__r.__words[0])
  {
    dispatch_release((dispatch_object_t)__p.__r_.__value_.__l.__data_);
    uint64_t v13 = *((void *)this + 13);
  }
  if (v13)
  {
    memset(v16, 0, sizeof(v16));
    IpAddress::asString(v16);
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = 0x40000000;
  uint64_t v14 = (ImsResult *)ImsResult::operator<<<char [32]>((uint64_t)&__p, "NEVirtualInterfaceCreate failed");
  unint64_t v15 = ImsLogContainer::logResult(this, v14);
  ImsResult::ImsResult((ImsResult *)a4, (const std::string *)v15);
  ImsResult::~ImsResult((ImsResult *)&__p);
}

void sub_1C5320038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,dispatch_object_t object,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [46]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C53201B0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [44]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5320258(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void *IMSVirtualInterface::logPrefix(IMSVirtualInterface *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"VirtualInterface ", 17);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(void *)a2 + 32))(a2, (char *)this + 112);
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void IMSVirtualInterface::setMTU(IMSVirtualInterface *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v13 = a2;
  if (*((void *)this + 13))
  {
    if (a2 <= 0)
    {
      long long v10 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      uint64_t v7 = &unk_1F20B2680;
      uint64_t v8 = &_bambiDomain;
      int v9 = 1073741825;
      uint64_t v4 = ImsResult::operator<<<int>((uint64_t)&v7);
      size_t v5 = (const std::string *)ImsResult::operator<<<char [20]>(v4, " is not a valid MTU");
      ImsResult::ImsResult((ImsResult *)a3, v5);
    }
    else
    {
      if (VirtualInterfaceSetMTU())
      {
        *(_OWORD *)(a3 + 24) = 0u;
        *(_OWORD *)(a3 + 40) = 0u;
        *(_OWORD *)(a3 + 56) = 0u;
        *(void *)a3 = &unk_1F20B2680;
        *(void *)(a3 + 8) = &_bambiDomain;
        *(_DWORD *)(a3 + 16) = 0;
        return;
      }
      long long v10 = 0u;
      long long v11 = 0u;
      long long v12 = 0u;
      uint64_t v7 = &unk_1F20B2680;
      uint64_t v8 = &_bambiDomain;
      int v9 = 0x40000000;
      int8x8_t v6 = (const std::string *)ImsResult::operator<<<char [32]>((uint64_t)&v7, "NEVirtualInterfaceSetMTU failed");
      ImsResult::ImsResult((ImsResult *)a3, v6);
    }
    ImsResult::~ImsResult((ImsResult *)&v7);
  }
  else
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741827;
  }
}

void sub_1C532049C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ImsResult::operator<<<int>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    operator new();
  }
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  return a1;
}

void sub_1C5320528(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void LegacyQMINasClient::AccessBarringHandler::listenForIndication(LegacyQMINasClient::AccessBarringHandler *this, uint64_t a2)
{
  if (*((unsigned __int8 *)this + 16) == a2)
  {
    std::string::basic_string[abi:ne180100]<0>(aBlock, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v4 = ims::debug((uint64_t)aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"already ", 8);
    *(unsigned char *)(v4 + 17) = 0;
    if (a2) {
      size_t v5 = "";
    }
    else {
      size_t v5 = "not ";
    }
    if (a2) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = 4;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)v5, v6);
    *(unsigned char *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"listening for ", 14);
    *(unsigned char *)(v4 + 17) = 0;
    uint64_t v7 = (*(uint64_t (**)(LegacyQMINasClient::AccessBarringHandler *))(*(void *)this + 32))(this);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 32))(v4, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" indication", 11);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(aBlock[0]);
    }
  }
  else
  {
    *((unsigned char *)this + 16) = a2;
    memset(v19, 0, sizeof(v19));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19);
    (**(void (***)(LegacyQMINasClient::AccessBarringHandler *, _OWORD *, uint64_t))this)(this, v19, a2);
    std::string::basic_string[abi:ne180100]<0>(aBlock, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v8 = ims::debug((uint64_t)aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"registering for ", 16);
    *(unsigned char *)(v8 + 17) = 0;
    uint64_t v9 = (*(uint64_t (**)(LegacyQMINasClient::AccessBarringHandler *))(*(void *)this + 32))(this);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 32))(v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" change indication", 18);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v16 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v21) < 0) {
      operator delete(aBlock[0]);
    }
    std::string __p = (void *)(*((void *)this + 1) + 72);
    uint64_t v14 = QMIServiceMsg::create();
    int v15 = 25000;
    uint64_t v17 = 0;
    long long v18 = 0;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    void v11[2] = ___ZN18LegacyQMINasClient20AccessBarringHandler19listenForIndicationEb_block_invoke;
    v11[3] = &__block_descriptor_tmp_5;
    char v12 = a2;
    aBlock[0] = (void *)MEMORY[0x1E4F143A8];
    aBlock[1] = (void *)0x40000000;
    unint64_t v21 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    unint64_t v22 = &unk_1E650FA28;
    BOOL v23 = v11;
    long long v10 = _Block_copy(aBlock);
    long long v18 = v10;
    if (v14)
    {
      qmi::Client::send();
      long long v10 = v18;
    }
    if (v10) {
      _Block_release(v10);
    }
    (*(void (**)(LegacyQMINasClient::AccessBarringHandler *, uint64_t))(*(void *)this + 8))(this, a2);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
  }
}

void sub_1C5320958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
}

void ___ZN18LegacyQMINasClient20AccessBarringHandler19listenForIndicationEb_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v2 = ims::error((uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Access Barring Indication Register request failed: ", 51);
    *(unsigned char *)(v2 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)" (", 2);
    *(unsigned char *)(v2 + 17) = 0;
    std::string::size_type v3 = (const char *)qmi::asString();
    size_t v4 = strlen(v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)v3, v4);
    *(unsigned char *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)")", 1);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)v10, (uint64_t)__p);
    uint64_t v2 = v6;
    if (*(unsigned char *)(a1 + 32)) {
      uint64_t v7 = "";
    }
    else {
      uint64_t v7 = "not ";
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)v7, 4 * (*(unsigned char *)(a1 + 32) == 0));
    *(unsigned char *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"listening for Access Barring indication", 39);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v2 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_1C5320BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void qmi::Client::SendProxy::~SendProxy(qmi::Client::SendProxy *this)
{
  if (*((void *)this + 1)) {
    qmi::Client::send();
  }
  uint64_t v2 = (const void *)*((void *)this + 4);
  if (v2) {
    _Block_release(v2);
  }
}

uint64_t LegacyQMINasClient::SsacHandler::initializeIndicationRegisterRequest(uint64_t a1, uint64_t a2, char a3)
{
  *qmi::MutableMessageBase::getTLV<nas::tlv::RegSsacInfo>(a2, 42) = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[3] = &__block_descriptor_tmp_17_0;
  char v8 = a3;
  size_t v5 = qmi::MutableMessageBase::getTLV<nas::tlv::RegSsacChangeInfo>(a2, 48);
  return ___ZN18LegacyQMINasClient11SsacHandler35initializeIndicationRegisterRequestEPN3nas18IndicationRegister7RequestEb_block_invoke_2((uint64_t)v7, v5);
}

uint64_t ___ZN18LegacyQMINasClient11SsacHandler35initializeIndicationRegisterRequestEPN3nas18IndicationRegister7RequestEb_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t LegacyQMINasClient::SsacHandler::internalListenForIndication(LegacyQMINasClient::SsacHandler *this, int a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZN18LegacyQMINasClient11SsacHandler27internalListenForIndicationEb_block_invoke;
  v5[3] = &__block_descriptor_tmp_18;
  v5[4] = this;
  v5[5] = MEMORY[0x1E4F143A8];
  v5[6] = 0x40000000;
  v5[7] = ___ZNK3qmi6Client13setIndHandlerIRKN3nas11SsacInfoInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  v5[8] = &unk_1E650FA50;
  v5[9] = v5;
  uint64_t result = qmi::Client::setIndHandler();
  if (a2) {
    return (*(uint64_t (**)(LegacyQMINasClient::SsacHandler *))(*(void *)this + 40))(this);
  }
  return result;
}

void ___ZN18LegacyQMINasClient11SsacHandler27internalListenForIndicationEb_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v10 = 0;
  char v11 = (__int16 *)&v10;
  uint64_t v12 = 0x4002000000;
  int v13 = __Block_byref_object_copy__0;
  uint64_t v14 = __Block_byref_object_dispose__0;
  uint64_t v15 = 100;
  uint64_t v16 = 0;
  int v17 = 0;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZN18LegacyQMINasClient11SsacHandler24handleSsacInfoIndicationERKN3nas11SsacInfoInd10IndicationE_block_invoke;
  v9[3] = &unk_1E650F978;
  v9[4] = &v10;
  v7[0] = v9;
  qmi::MessageBase::applyTlv<nas::tlv::SsacInfoVoice,void({block_pointer}&)(nas::tlv::SsacInfoVoice&)>(a2, 16, (uint64_t)v7);
  std::string::basic_string[abi:ne180100]<0>(v7, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Got SSAC indication: ", 21);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)", ", 2);
  *(unsigned char *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  size_t v4 = *(void **)(v2 + 8);
  if (v4) {
    IMSNasClient::notifyDelegates(v4, 0, v11 + 20, 1);
  }
  _Block_object_dispose(&v10, 8);
}

void sub_1C5320FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v21 - 80), 8);
  _Unwind_Resume(a1);
}

void LegacyQMINasClient::SsacHandler::requestCurrentBarringInfo(LegacyQMINasClient::SsacHandler *this)
{
  std::string::basic_string[abi:ne180100]<0>(aBlock, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v2 = ims::debug((uint64_t)aBlock, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"requesting current SSAC info", 28);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(aBlock[0]);
  }
  memset(v11, 0, sizeof(v11));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v11);
  std::string __p = (void *)(*((void *)this + 1) + 72);
  uint64_t v6 = QMIServiceMsg::create();
  int v7 = 25000;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = ___ZN18LegacyQMINasClient11SsacHandler25requestCurrentBarringInfoEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_24;
  v4[4] = this;
  aBlock[0] = (void *)MEMORY[0x1E4F143A8];
  aBlock[1] = (void *)0x40000000;
  int v13 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas11GetSsacInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v14 = &unk_1E650FA78;
  uint64_t v15 = v4;
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v10 = v3;
  if (v6)
  {
    qmi::Client::send();
    uint64_t v3 = v10;
  }
  if (v3) {
    _Block_release(v3);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v11);
}

void sub_1C53211F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
}

void ___ZN18LegacyQMINasClient11SsacHandler25requestCurrentBarringInfoEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *((_DWORD *)a2 + 1);
  if (v4)
  {
    if (v4 == 74)
    {
      if (*(void *)(v3 + 8))
      {
        std::string::basic_string[abi:ne180100]<0>(&v20, "qmi.nas");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v5 = ims::debug((uint64_t)&v20, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"no SSAC information available", 29);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v20, "qmi.nas");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        uint64_t v5 = ims::error((uint64_t)&v20, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"no delegate", 11);
      }
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v20, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v9 = ims::error((uint64_t)&v20, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"GetSsacInfo request failed: ", 28);
      *(unsigned char *)(v9 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v9 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" (", 2);
      *(unsigned char *)(v9 + 17) = 0;
      uint64_t v10 = (const char *)qmi::asString();
      size_t v11 = strlen(v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)v10, v11);
      *(unsigned char *)(v9 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)")", 1);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
    }
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v20);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v20, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"received GetSsacInfo response", 29);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v20);
    }
    long long v20 = 0;
    uint64_t v21 = &v20;
    uint64_t v22 = 0x4002000000;
    BOOL v23 = __Block_byref_object_copy__0;
    unint64_t v24 = __Block_byref_object_dispose__0;
    uint64_t v26 = 0;
    int v27 = 0;
    uint64_t v25 = 100;
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)0x40000000;
    int v17 = ___ZN18LegacyQMINasClient11SsacHandler22handleSsacInfoResponseERKN3nas11GetSsacInfo8ResponseE_block_invoke;
    long long v18 = &unk_1E650F9A0;
    long long v19 = &v20;
    v14[0] = __p;
    qmi::MessageBase::applyTlv<nas::tlv::SsacInfoVoice,void({block_pointer}&)(nas::tlv::SsacInfoVoice&)>(a2, 16, (uint64_t)v14);
    std::string::basic_string[abi:ne180100]<0>(v14, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    uint64_t v7 = ims::debug((uint64_t)v14, (uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Got SSAC response: ", 19);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)", ", 2);
    *(unsigned char *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v13 < 0) {
      operator delete(v12[0]);
    }
    if (v15 < 0) {
      operator delete(v14[0]);
    }
    char v8 = *(void **)(v3 + 8);
    if (v8) {
      IMSNasClient::notifyDelegates(v8, 0, (__int16 *)v21 + 20, 1);
    }
    _Block_object_dispose(&v20, 8);
  }
}

void sub_1C5321708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = 100;
  *(_DWORD *)(result + 44) = 0;
  *(unsigned char *)(result + 48) = 0;
  *(_DWORD *)(result + 52) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(unsigned char *)(result + 48) = *(unsigned char *)(a2 + 48);
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(unsigned char *)(result + 56) = *(unsigned char *)(a2 + 56);
  return result;
}

uint64_t ___ZN18LegacyQMINasClient11SsacHandler24handleSsacInfoIndicationERKN3nas11SsacInfoInd10IndicationE_block_invoke(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
  unsigned int v3 = *a2;
  unsigned int v4 = *((unsigned __int16 *)a2 + 1);
  *(_WORD *)(v2 + 40) = v3;
  *(_DWORD *)(v2 + 44) = v4;
  *(unsigned char *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 52) = 1;
  *(unsigned char *)(v2 + 56) = 1;
  if (v3 > 0x64 || v4 >= 0x201)
  {
    *(_WORD *)(v2 + 40) = 100;
    *(_DWORD *)(v2 + 44) = 0;
    *(unsigned char *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 52) = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 52) |= 1u;
  return result;
}

uint64_t ___ZN18LegacyQMINasClient11SsacHandler22handleSsacInfoResponseERKN3nas11GetSsacInfo8ResponseE_block_invoke(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
  unsigned int v3 = *a2;
  unsigned int v4 = *((unsigned __int16 *)a2 + 1);
  *(_WORD *)(v2 + 40) = v3;
  *(_DWORD *)(v2 + 44) = v4;
  *(unsigned char *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 52) = 1;
  *(unsigned char *)(v2 + 56) = 1;
  if (v3 > 0x64 || v4 >= 0x201)
  {
    *(_WORD *)(v2 + 40) = 100;
    *(_DWORD *)(v2 + 44) = 0;
    *(unsigned char *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 52) = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 52) |= 1u;
  return result;
}

uint64_t LegacyQMINasClient::AcbHandler::initializeIndicationRegisterRequest(uint64_t a1, uint64_t a2, char a3)
{
  *qmi::MutableMessageBase::getTLV<nas::tlv::RegSsacInfo>(a2, 42) = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[3] = &__block_descriptor_tmp_35;
  char v8 = a3;
  uint64_t v5 = qmi::MutableMessageBase::getTLV<nas::tlv::RegAcbChangeInfo>(a2, 44);
  return ___ZN18LegacyQMINasClient10AcbHandler35initializeIndicationRegisterRequestEPN3nas18IndicationRegister7RequestEb_block_invoke_2((uint64_t)v7, v5);
}

uint64_t ___ZN18LegacyQMINasClient10AcbHandler35initializeIndicationRegisterRequestEPN3nas18IndicationRegister7RequestEb_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t LegacyQMINasClient::AcbHandler::internalListenForIndication(LegacyQMINasClient::AcbHandler *this, int a2)
{
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZN18LegacyQMINasClient10AcbHandler27internalListenForIndicationEb_block_invoke;
  v5[3] = &__block_descriptor_tmp_36;
  v5[4] = this;
  v5[5] = MEMORY[0x1E4F143A8];
  v5[6] = 0x40000000;
  v5[7] = ___ZNK3qmi6Client13setIndHandlerIRKN3nas10AcbInfoInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  v5[8] = &unk_1E650FAA0;
  v5[9] = v5;
  uint64_t result = qmi::Client::setIndHandler();
  if (a2) {
    return (*(uint64_t (**)(LegacyQMINasClient::AcbHandler *))(*(void *)this + 40))(this);
  }
  return result;
}

void ___ZN18LegacyQMINasClient10AcbHandler27internalListenForIndicationEb_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v21 = 0;
  uint64_t v22 = &v21;
  uint64_t v23 = 0x4002000000;
  unint64_t v24 = __Block_byref_object_copy__0;
  uint64_t v25 = __Block_byref_object_dispose__0;
  uint64_t v26 = 100;
  uint64_t v27 = 0;
  int v28 = 0;
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 0x40000000;
  void v20[2] = ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10AcbInfoInd10IndicationEEEvRKT__block_invoke;
  v20[3] = &unk_1E650FAF0;
  v20[4] = &v21;
  v14[0] = v20;
  qmi::MessageBase::applyTlv<nas::tlv::AcbInfoSignaling,void({block_pointer}&)(nas::tlv::AcbInfoSignaling&)>(a2, v14);
  if (!*((unsigned char *)v22 + 56))
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Did not get a valid Signaling TLV. Trying the Data TLV.", 55);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(v14[0]);
    }
    v14[0] = (void *)MEMORY[0x1E4F143A8];
    v14[1] = (void *)0x40000000;
    char v15 = ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10AcbInfoInd10IndicationEEEvRKT__block_invoke_2;
    uint64_t v16 = &unk_1E650FB18;
    int v17 = &v21;
    __p[0] = v14;
    qmi::MessageBase::applyTlv<nas::tlv::AcbInfoData,void({block_pointer}&)(nas::tlv::AcbInfoData&)>(a2, __p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(v12, "");
  uint64_t v5 = ims::debug((uint64_t)__p, (uint64_t)v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Received ACB info: ", 19);
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Services : ", 11);
  *(unsigned char *)(v5 + 17) = 0;
  int v6 = *((_DWORD *)v22 + 13);
  std::string::basic_string[abi:ne180100]<0>(&v8, ",");
  BambiServices::namesForServiceMask(v6, v10);
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 32))(v5, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)", Factor : ", 11);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)", Time : ", 9);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)", SpecialAccessClass: ", 22);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *(void **)(v3 + 8);
  if (v7) {
    IMSNasClient::notifyDelegates(v7, 0, (__int16 *)v22 + 20, 2);
  }
  _Block_object_dispose(&v21, 8);
}

void sub_1C5321E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v40 - 112), 8);
  _Unwind_Resume(a1);
}

void LegacyQMINasClient::AcbHandler::requestCurrentBarringInfo(LegacyQMINasClient::AcbHandler *this)
{
  std::string::basic_string[abi:ne180100]<0>(aBlock, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  uint64_t v2 = ims::debug((uint64_t)aBlock, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"requesting current ACB info", 27);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v8 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(aBlock[0]);
  }
  memset(v11, 0, sizeof(v11));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v11);
  std::string __p = (void *)(*((void *)this + 1) + 72);
  uint64_t v6 = QMIServiceMsg::create();
  int v7 = 25000;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = ___ZN18LegacyQMINasClient10AcbHandler25requestCurrentBarringInfoEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_41;
  v4[4] = this;
  aBlock[0] = (void *)MEMORY[0x1E4F143A8];
  aBlock[1] = (void *)0x40000000;
  char v13 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas10GetAcbInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v14 = &unk_1E650FAC8;
  char v15 = v4;
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v10 = v3;
  if (v6)
  {
    qmi::Client::send();
    uint64_t v3 = v10;
  }
  if (v3) {
    _Block_release(v3);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v11);
}

void sub_1C532207C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
}

void ___ZN18LegacyQMINasClient10AcbHandler25requestCurrentBarringInfoEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *((_DWORD *)a2 + 1);
  if (v4)
  {
    if (v4 == 74)
    {
      if (!*(void *)(v3 + 8)) {
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(&v30, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v5 = ims::debug((uint64_t)&v30, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"no ACB information available", 28);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v30, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      uint64_t v11 = ims::error((uint64_t)&v30, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"GetAcbInfo request failed: ", 27);
      *(unsigned char *)(v11 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v11 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" (", 2);
      *(unsigned char *)(v11 + 17) = 0;
      uint64_t v12 = (const char *)qmi::asString();
      size_t v13 = strlen(v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)v12, v13);
      *(unsigned char *)(v11 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)")", 1);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v11 + 17) = 0;
    }
    if (SHIBYTE(v27) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(v30);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v6 = ims::debug((uint64_t)&v30, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"received GetAcbInfo response", 28);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (SHIBYTE(v27) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(v30);
    }
    uint64_t v30 = 0;
    unint64_t v31 = &v30;
    uint64_t v32 = 0x4002000000;
    unint64_t v33 = __Block_byref_object_copy__0;
    uint8x8_t v34 = __Block_byref_object_dispose__0;
    uint64_t v35 = 100;
    uint64_t v36 = 0;
    int v37 = 0;
    __p[0] = (void *)MEMORY[0x1E4F143A8];
    __p[1] = (void *)0x40000000;
    uint64_t v27 = ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10GetAcbInfo8ResponseEEEvRKT__block_invoke;
    int v28 = &unk_1E650FB40;
    uint64_t v29 = &v30;
    v20[0] = __p;
    qmi::MessageBase::applyTlv<nas::tlv::AcbInfoSignaling,void({block_pointer}&)(nas::tlv::AcbInfoSignaling&)>(a2, v20);
    if (!*((unsigned char *)v31 + 56))
    {
      std::string::basic_string[abi:ne180100]<0>(v20, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(v24, "");
      uint64_t v7 = ims::debug((uint64_t)v20, (uint64_t)v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Did not get a valid Signaling TLV. Trying the Data TLV.", 55);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      if (v25 < 0) {
        operator delete(v24[0]);
      }
      if (SHIBYTE(v21) < 0) {
        operator delete(v20[0]);
      }
      v20[0] = (void *)MEMORY[0x1E4F143A8];
      v20[1] = (void *)0x40000000;
      uint64_t v21 = ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10GetAcbInfo8ResponseEEEvRKT__block_invoke_2;
      uint64_t v22 = &unk_1E650FB68;
      uint64_t v23 = &v30;
      v24[0] = v20;
      qmi::MessageBase::applyTlv<nas::tlv::AcbInfoData,void({block_pointer}&)(nas::tlv::AcbInfoData&)>(a2, v24);
    }
    std::string::basic_string[abi:ne180100]<0>(v24, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(v18, "");
    uint64_t v8 = ims::debug((uint64_t)v24, (uint64_t)v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Received ACB info: ", 19);
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Services : ", 11);
    *(unsigned char *)(v8 + 17) = 0;
    int v9 = *((_DWORD *)v31 + 13);
    std::string::basic_string[abi:ne180100]<0>(&v14, ",");
    BambiServices::namesForServiceMask(v9, v16);
    (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)", Factor : ", 11);
    *(unsigned char *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)", Time : ", 9);
    *(unsigned char *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)", SpecialAccessClass: ", 22);
    *(unsigned char *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (v15 < 0) {
      operator delete(v14);
    }
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    uint64_t v10 = *(void **)(v3 + 8);
    if (v10) {
      IMSNasClient::notifyDelegates(v10, 0, (__int16 *)v31 + 20, 2);
    }
    _Block_object_dispose(&v30, 8);
  }
}

void sub_1C53226E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v46 - 112), 8);
  _Unwind_Resume(a1);
}

void LegacyQMINasClient::LegacyQMINasClient(LegacyQMINasClient *this, dispatch_object_t *a2)
{
  uint64_t v3 = IMSNasClient::IMSNasClient(this, a2);
  v3[7] = 0;
  v3[8] = 0;
  *(_OWORD *)(v3 + 9) = 0u;
  *uint64_t v3 = &unk_1F20C2858;
  int v4 = v3 + 14;
  *((unsigned char *)v3 + 128) = 0;
  *(_OWORD *)(v3 + 11) = 0u;
  *((unsigned char *)v3 + 104) = 0;
  v3[14] = &unk_1F20C2908;
  v3[15] = v3;
  *((unsigned char *)v3 + 152) = 0;
  v3[17] = &unk_1F20C2970;
  v3[18] = v3;
  v3[21] = 0;
  v3[22] = 0;
  v3[20] = 0;
  uint64_t v5 = operator new(8uLL);
  void *v5 = v4;
  *((void *)this + 21) = v5 + 1;
  *((void *)this + 22) = v5 + 1;
  *((void *)this + 20) = v5;
}

void sub_1C53228A0(_Unwind_Exception *a1)
{
  qmi::Client::~Client(v2);
  int v4 = (std::__shared_weak_count *)*((void *)v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  IMSNasClient::~IMSNasClient(v1);
  _Unwind_Resume(a1);
}

void *IMSNasClient::IMSNasClient(void *a1, dispatch_object_t *a2)
{
  *a1 = &unk_1F20BCB98;
  a1[1] = 0;
  a1[4] = 0;
  a1[5] = 0;
  a1[2] = 0;
  a1[3] = a1 + 4;
  a1[6] = *a2;
  if (*a2) {
    dispatch_retain(*a2);
  }
  return a1;
}

void IMSNasClient::~IMSNasClient(IMSNasClient *this)
{
  *(void *)this = &unk_1F20BCB98;
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    dispatch_release(v2);
  }
  std::__tree<std::string>::destroy((uint64_t)this + 24, *((char **)this + 4));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void LegacyQMINasClient::~LegacyQMINasClient(LegacyQMINasClient *this)
{
  *(void *)this = &unk_1F20C2858;
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
  qmi::Client::~Client((LegacyQMINasClient *)((char *)this + 72));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  IMSNasClient::~IMSNasClient(this);
}

{
  uint64_t vars8;

  LegacyQMINasClient::~LegacyQMINasClient(this);
  JUMPOUT(0x1C878E320);
}

uint64_t LegacyQMINasClient::initialize(uint64_t a1, long long *a2)
{
  if (!*(unsigned char *)(a1 + 104))
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(v31, "");
    uint64_t v6 = ims::debug((uint64_t)&v29, (uint64_t)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"initializing LegacyQMINasClient", 31);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    if (SBYTE7(v30) < 0) {
      operator delete((void *)v29);
    }
    uint64_t v7 = sImsDispatchQueue;
    if (sImsDispatchQueue
      || (uint64_t v7 = dispatch_queue_create("com.apple.ipTelephony.queue", 0), (sImsDispatchQueue = (uint64_t)v7) != 0))
    {
      dispatch_retain(v7);
      char v8 = 0;
    }
    else
    {
      char v8 = 1;
    }
    std::string::basic_string[abi:ne180100]<0>(v31, "IMSNasClient");
    dispatch_object_t object = v7;
    if ((v8 & 1) == 0) {
      dispatch_retain(v7);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ims");
    int v9 = *(std::__shared_weak_count **)(a1 + 64);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 56);
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v24 = 0;
      char v25 = 0;
      uint64_t v11 = std::__shared_weak_count::lock(v9);
      uint64_t v12 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      else {
        uint64_t v10 = 0;
      }
      uint64_t v24 = v10;
      char v25 = v11;
      std::__shared_weak_count::__release_weak(v9);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
    else
    {
      uint64_t v24 = 0;
      char v25 = 0;
    }
    IPTelephonyManager::getInstance((uint64_t *)&v20);
    IPTelephonyManager::getBBServerConnection(v20, &v22);
    qmi::Client::createWithQueueLocal();
    long long v13 = v30;
    long long v30 = 0uLL;
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 96);
    *(_OWORD *)(a1 + 88) = v13;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    qmi::Client::~Client((qmi::Client *)&v29);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
    if (v25) {
      std::__shared_weak_count::__release_weak(v25);
    }
    if (v27 < 0) {
      operator delete(__p);
    }
    if (object) {
      dispatch_release(object);
    }
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    uint64_t v15 = *(void *)(a1 + 88);
    BOOL v3 = v15 != 0;
    if (v15)
    {
      long long v29 = 0uLL;
      *(void *)&long long v30 = 0;
      if (*((char *)a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v29, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      }
      else
      {
        long long v29 = *a2;
        *(void *)&long long v30 = *((void *)a2 + 2);
      }
      if (SBYTE7(v30) < 0)
      {
        std::string::__init_copy_ctor_external(&v19, (const std::string::value_type *)v29, *((std::string::size_type *)&v29 + 1));
      }
      else
      {
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v29;
        v19.__r_.__value_.__r.__words[2] = v30;
      }
      qmi::Client::setHandler();
      qmi::Client::start((qmi::Client *)(a1 + 72));
      *(unsigned char *)(a1 + 104) = 1;
      if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_49:
        if (SBYTE7(v30) < 0)
        {
          operator delete((void *)v29);
          if (v8) {
            return v3;
          }
        }
        else if (v8)
        {
          return v3;
        }
        dispatch_release(v7);
        return v3;
      }
      char v17 = (void *)v19.__r_.__value_.__r.__words[0];
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v29, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(v31, "");
      uint64_t v16 = ims::error((uint64_t)&v29, (uint64_t)v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"unable to create NAS client", 27);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      if ((v32 & 0x80000000) == 0) {
        goto LABEL_49;
      }
      char v17 = v31[0];
    }
    operator delete(v17);
    goto LABEL_49;
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  uint64_t v2 = ims::debug((uint64_t)&v29, (uint64_t)v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"already initialized", 19);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (SBYTE7(v30) < 0) {
    operator delete((void *)v29);
  }
  return 1;
}

void sub_1C5322F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,dispatch_object_t object)
{
  if (*(char *)(v34 - 105) < 0) {
    operator delete(*(void **)(v34 - 128));
  }
  if ((v33 & 1) == 0) {
    dispatch_release(v32);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18LegacyQMINasClient10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v10, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v3 = ims::debug((uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"QMI client started", 18);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  int v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(v2 + 8);
      if (v7) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a1 + 40);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C5323134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

uint64_t LegacyQMINasClient::deinitialize(uint64_t this)
{
  if (*(unsigned char *)(this + 104))
  {
    uint64_t v1 = this;
    uint64_t v2 = *(LegacyQMINasClient::AccessBarringHandler ***)(this + 160);
    long long v3 = *(LegacyQMINasClient::AccessBarringHandler ***)(this + 168);
    while (v2 != v3)
    {
      int v4 = *v2++;
      LegacyQMINasClient::AccessBarringHandler::listenForIndication(v4, 0);
    }
    *(unsigned char *)(v1 + 104) = 0;
    return MEMORY[0x1F4178728](v1 + 72);
  }
  return this;
}

void LegacyQMINasClient::setAccessBarringType(LegacyQMINasClient *this, unsigned int a2, int a3)
{
  int v77 = a3;
  uint64_t v5 = (LegacyQMINasClient::AccessBarringHandler **)*((void *)this + 20);
  uint64_t v6 = (LegacyQMINasClient::AccessBarringHandler **)*((void *)this + 21);
  if (v5 != v6)
  {
    do
    {
      uint64_t v7 = *v5++;
      LegacyQMINasClient::AccessBarringHandler::listenForIndication(v7, 0);
    }
    while (v5 != v6);
    uint64_t v5 = (LegacyQMINasClient::AccessBarringHandler **)*((void *)this + 20);
  }
  *((void *)this + 21) = v5;
  if ((a3 & 2) != 0)
  {
    unint64_t v17 = *((void *)this + 22);
    if (a3)
    {
      long long v29 = (LegacyQMINasClient *)((char *)this + 112);
      if ((unint64_t)v5 >= v17)
      {
        uint64_t v31 = v17 - (void)v5;
        uint64_t v32 = v31 >> 2;
        if ((unint64_t)(v31 >> 2) <= 1) {
          uint64_t v32 = 1;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v33 = v32;
        }
        uint64_t v34 = std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v33);
        uint64_t v36 = &v34[v35];
        *uint64_t v34 = v29;
        uint64_t v5 = (LegacyQMINasClient::AccessBarringHandler **)(v34 + 1);
        std::string v38 = (char *)*((void *)this + 20);
        int v37 = (char *)*((void *)this + 21);
        if (v37 != v38)
        {
          do
          {
            uint64_t v39 = *((void *)v37 - 1);
            v37 -= 8;
            *--uint64_t v34 = v39;
          }
          while (v37 != v38);
          int v37 = (char *)*((void *)this + 20);
        }
        *((void *)this + 20) = v34;
        *((void *)this + 21) = v5;
        *((void *)this + 22) = v36;
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *v5++ = v29;
      }
      *((void *)this + 21) = v5;
      char v9 = (LegacyQMINasClient *)((char *)this + 136);
      unint64_t v40 = *((void *)this + 22);
      if ((unint64_t)v5 >= v40)
      {
        uint64_t v41 = *((void *)this + 20);
        uint64_t v42 = ((uint64_t)v5 - v41) >> 3;
        if (!((unint64_t)(v42 + 1) >> 61))
        {
          uint64_t v43 = v40 - v41;
          uint64_t v44 = v43 >> 2;
          if (v43 >> 2 <= (unint64_t)(v42 + 1)) {
            uint64_t v44 = v42 + 1;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v45 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v45 = v44;
          }
          if (v45) {
            unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v45);
          }
          else {
            uint64_t v46 = 0;
          }
          xpc_object_t v47 = (LegacyQMINasClient::AccessBarringHandler **)(v45 + 8 * v42);
          unint64_t v48 = v45 + 8 * v46;
          *xpc_object_t v47 = v9;
          uint64_t v24 = v47 + 1;
          xpc_object_t v51 = (char *)*((void *)this + 20);
          int v28 = (char *)*((void *)this + 21);
          if (v28 != v51)
          {
            do
            {
              xpc_object_t v52 = (LegacyQMINasClient::AccessBarringHandler *)*((void *)v28 - 1);
              v28 -= 8;
              *--xpc_object_t v47 = v52;
            }
            while (v28 != v51);
            goto LABEL_63;
          }
LABEL_64:
          *((void *)this + 20) = v47;
          *((void *)this + 21) = v24;
          *((void *)this + 22) = v48;
          if (v28) {
LABEL_65:
          }
            operator delete(v28);
LABEL_66:
          *((void *)this + 21) = v24;
          goto LABEL_67;
        }
LABEL_86:
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      }
    }
    else
    {
      char v9 = (LegacyQMINasClient *)((char *)this + 136);
      if ((unint64_t)v5 >= v17)
      {
        uint64_t v18 = v17 - (void)v5;
        uint64_t v19 = v18 >> 2;
        if ((unint64_t)(v18 >> 2) <= 1) {
          uint64_t v19 = 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        uint64_t v21 = std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v20);
        uint64_t v23 = &v21[v22];
        *uint64_t v21 = v9;
        uint64_t v24 = (LegacyQMINasClient::AccessBarringHandler **)(v21 + 1);
        uint64_t v26 = (char *)*((void *)this + 20);
        char v25 = (char *)*((void *)this + 21);
        if (v25 != v26)
        {
          do
          {
            uint64_t v27 = *((void *)v25 - 1);
            v25 -= 8;
            *--uint64_t v21 = v27;
          }
          while (v25 != v26);
          char v25 = (char *)*((void *)this + 20);
        }
        *((void *)this + 20) = v21;
        *((void *)this + 21) = v24;
        *((void *)this + 22) = v23;
        if (!v25) {
          goto LABEL_66;
        }
        int v28 = v25;
        goto LABEL_65;
      }
    }
LABEL_47:
    std::__shared_weak_count *v5 = v9;
    uint64_t v24 = v5 + 1;
    goto LABEL_66;
  }
  if (a3)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(v75, "");
      uint64_t v8 = ims::error((uint64_t)__p, (uint64_t)v75);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"unknown access barring type ", 28);
      *(unsigned char *)(v8 + 17) = 0;
      ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()();
    }
    char v9 = (LegacyQMINasClient *)((char *)this + 112);
    unint64_t v10 = *((void *)this + 22);
    if ((unint64_t)v5 >= v10)
    {
      uint64_t v11 = *((void *)this + 20);
      uint64_t v12 = ((uint64_t)v5 - v11) >> 3;
      if (!((unint64_t)(v12 + 1) >> 61))
      {
        uint64_t v13 = v10 - v11;
        uint64_t v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        xpc_object_t v47 = (LegacyQMINasClient::AccessBarringHandler **)(v15 + 8 * v12);
        unint64_t v48 = v15 + 8 * v16;
        *xpc_object_t v47 = v9;
        uint64_t v24 = v47 + 1;
        xpc_object_t v49 = (char *)*((void *)this + 20);
        int v28 = (char *)*((void *)this + 21);
        if (v28 != v49)
        {
          do
          {
            xpc_object_t v50 = (LegacyQMINasClient::AccessBarringHandler *)*((void *)v28 - 1);
            v28 -= 8;
            *--xpc_object_t v47 = v50;
          }
          while (v28 != v49);
LABEL_63:
          int v28 = (char *)*((void *)this + 20);
          goto LABEL_64;
        }
        goto LABEL_64;
      }
      goto LABEL_86;
    }
    goto LABEL_47;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(v75, "");
  uint64_t v30 = ims::debug((uint64_t)__p, (uint64_t)v75);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"barring disabled", 16);
  *(unsigned char *)(v30 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v30 + 17) = 0;
  if (v76 < 0) {
    operator delete(v75[0]);
  }
  if (SBYTE7(v65) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v24 = (LegacyQMINasClient::AccessBarringHandler **)*((void *)this + 21);
LABEL_67:
  if (*((LegacyQMINasClient::AccessBarringHandler ***)this + 20) != v24)
  {
    uint64_t v72 = 0;
    memset(v71, 0, sizeof(v71));
    long long v69 = 0u;
    long long v70 = 0u;
    long long v67 = 0u;
    *(_OWORD *)long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    *(_OWORD *)std::string __p = 0u;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    xpc_object_t v53 = (LegacyQMINasClient::AccessBarringHandler **)*((void *)this + 20);
    for (uint64_t i = (LegacyQMINasClient::AccessBarringHandler **)*((void *)this + 21); v53 != i; ++v53)
    {
      xpc_object_t v55 = *v53;
      uint64_t v56 = (*(uint64_t (**)(LegacyQMINasClient::AccessBarringHandler *))(*(void *)*v53 + 32))(*v53);
      int v57 = *(char *)(v56 + 23);
      if (v57 >= 0) {
        uint64_t v58 = v56;
      }
      else {
        uint64_t v58 = *(void *)v56;
      }
      if (v57 >= 0) {
        uint64_t v59 = *(unsigned __int8 *)(v56 + 23);
      }
      else {
        uint64_t v59 = *(void *)(v56 + 8);
      }
      uint64_t v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v58, v59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" ", 1);
      LegacyQMINasClient::AccessBarringHandler::listenForIndication(v55, 1);
    }
    std::string::basic_string[abi:ne180100]<0>(v75, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(v73, "");
    uint64_t v61 = ims::debug((uint64_t)v75, (uint64_t)v73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)"set Access Barring type to ", 27);
    *(unsigned char *)(v61 + 17) = 0;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], v62);
    (*(void (**)(uint64_t, void **))(*(void *)v61 + 32))(v61, v62);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v61 + 17) = 0;
    if (v63 < 0) {
      operator delete(v62[0]);
    }
    if (v74 < 0) {
      operator delete(v73[0]);
    }
    if (v76 < 0) {
      operator delete(v75[0]);
    }
    __p[0] = *(void **)MEMORY[0x1E4FBA418];
    *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
    __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
    if (SHIBYTE(v69) < 0) {
      operator delete(v68[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C878E270](v71);
  }
}

void sub_1C5323918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 57) < 0) {
    operator delete(*(void **)(v21 - 80));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LegacyQMINasClient::requestCurrentBarringInfo(LegacyQMINasClient *this)
{
  if (*((unsigned char *)this + 104))
  {
    uint64_t v1 = (uint64_t *)*((void *)this + 20);
    uint64_t v2 = (uint64_t *)*((void *)this + 21);
    while (v1 != v2)
    {
      uint64_t v3 = *v1++;
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v4 = ims::debug((uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Client not initialized, can't get barring info", 46);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
}

void sub_1C5323AD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void LegacyQMINasClient::SsacHandler::~SsacHandler(LegacyQMINasClient::SsacHandler *this)
{
}

const char *LegacyQMINasClient::SsacHandler::name(LegacyQMINasClient::SsacHandler *this)
{
  return "SSAC";
}

void LegacyQMINasClient::AcbHandler::~AcbHandler(LegacyQMINasClient::AcbHandler *this)
{
}

void *LegacyQMINasClient::AcbHandler::name(LegacyQMINasClient::AcbHandler *this)
{
  return &LegacyQMINasClient::AcbHandler::kName;
}

uint64_t LegacyQMINasClient::isInitialized(LegacyQMINasClient *this)
{
  return *((unsigned __int8 *)this + 104);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::IndicationRegister::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1C5323BAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<nas::IndicationRegister::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response(a2, __p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_1C5323C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_1C5323CAC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  uint64_t v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_1C5323CF0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::RegSsacInfo>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<nas::tlv::RegSsacInfo>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<nas::tlv::RegSsacInfo>()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacInfo>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacInfo>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::RegSsacChangeInfo>(uint64_t a1, int a2)
{
  char v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<nas::tlv::RegSsacChangeInfo>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<nas::tlv::RegSsacChangeInfo>()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacChangeInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacChangeInfo>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacChangeInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacChangeInfo>::clone()
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3nas11SsacInfoInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::SsacInfoInd::Indication const&>::cast(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1C532425C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<nas::SsacInfoInd::Indication const&>::cast(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)144,nas::SsacInfoInd::IndicationTLVList>::Indication(a2, __p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)144,nas::SsacInfoInd::IndicationTLVList>::Indication((uint64_t)a2);
  }
}

void sub_1C5324310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Indication<(unsigned short)144,nas::SsacInfoInd::IndicationTLVList>::Indication(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_1C532435C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Indication<(unsigned short)144,nas::SsacInfoInd::IndicationTLVList>::Indication(qmi::MessageBase *a1, const void *a2)
{
  uint64_t v3 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_1C53243A0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas11GetSsacInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::GetSsacInfo::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1C5324404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<nas::GetSsacInfo::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)145,nas::GetSsacInfo::ResponseTLVList>::Response(a2, __p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)145,nas::GetSsacInfo::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_1C53244B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)145,nas::GetSsacInfo::ResponseTLVList>::Response(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_1C5324504(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)145,nas::GetSsacInfo::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  uint64_t v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_1C5324548(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::MessageBase::applyTlv<nas::tlv::SsacInfoVoice,void({block_pointer}&)(nas::tlv::SsacInfoVoice&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (qmi::MessageBase::tryTlv<nas::tlv::SsacInfoVoice,void({block_pointer}&)(nas::tlv::SsacInfoVoice&)>((uint64_t)a1, (tlv *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      unint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x1E4FBA118];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<nas::tlv::SsacInfoVoice,void({block_pointer}&)(nas::tlv::SsacInfoVoice&)>(uint64_t a1, tlv *a2, int a3, uint64_t a4)
{
  int v7 = a2;
  tlv::parseV<nas::tlv::SsacInfoVoice>(&v7, a3);
  uint64_t v5 = v7;
  if (v7) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  return v5 != 0;
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::RegAcbChangeInfo>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<nas::tlv::RegAcbChangeInfo>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<nas::tlv::RegAcbChangeInfo>()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegAcbChangeInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegAcbChangeInfo>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegAcbChangeInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 + 4;
  *(unsigned char *)(v3 + 3) = *(unsigned char *)(result + 9);
  *a2 = v4;
  *(unsigned char *)uint64_t v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegAcbChangeInfo>::clone()
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3nas10AcbInfoInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::AcbInfoInd::Indication const&>::cast(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1C5324934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<nas::AcbInfoInd::Indication const&>::cast(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)148,nas::AcbInfoInd::IndicationTLVList>::Indication(a2, __p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)148,nas::AcbInfoInd::IndicationTLVList>::Indication((uint64_t)a2);
  }
}

void sub_1C53249E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Indication<(unsigned short)148,nas::AcbInfoInd::IndicationTLVList>::Indication(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_1C5324A34(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Indication<(unsigned short)148,nas::AcbInfoInd::IndicationTLVList>::Indication(qmi::MessageBase *a1, const void *a2)
{
  uint64_t v3 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_1C5324A78(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas10GetAcbInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::GetAcbInfo::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1C5324ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<nas::GetAcbInfo::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)148,nas::GetAcbInfo::ResponseTLVList>::Response(a2, __p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)148,nas::GetAcbInfo::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_1C5324B90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)148,nas::GetAcbInfo::ResponseTLVList>::Response(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_1C5324BDC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)148,nas::GetAcbInfo::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  uint64_t v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_1C5324C20(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10AcbInfoInd10IndicationEEEvRKT__block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
  if (*(unsigned char *)a2 == 100) {
    __int16 v3 = 100;
  }
  else {
    __int16 v3 = 0;
  }
  unsigned int v4 = *(unsigned __int16 *)(a2 + 2);
  char v5 = *(unsigned char *)(a2 + 4);
  *(_WORD *)(v2 + 40) = v3;
  *(_DWORD *)(v2 + 44) = v4;
  *(unsigned char *)(v2 + 48) = v5;
  *(_DWORD *)(v2 + 52) = 1;
  *(unsigned char *)(v2 + 56) = 1;
  if (v4 >= 0x201)
  {
    *(_WORD *)(v2 + 40) = 100;
    *(_DWORD *)(v2 + 44) = 0;
    *(unsigned char *)(v2 + 48) = 0;
    *(unsigned char *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 52) = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 52) |= 1u;
  return result;
}

uint64_t ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10AcbInfoInd10IndicationEEEvRKT__block_invoke_2(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
  int v3 = *a2;
  if (v3 == 100) {
    __int16 v4 = 100;
  }
  else {
    __int16 v4 = 0;
  }
  unsigned int v5 = *((unsigned __int16 *)a2 + 1);
  unsigned __int8 v6 = a2[4];
  *(_WORD *)(v2 + 40) = v4;
  *(_DWORD *)(v2 + 44) = v5;
  *(unsigned char *)(v2 + 48) = v6;
  *(_DWORD *)(v2 + 52) = 1;
  *(unsigned char *)(v2 + 56) = 1;
  if (v5 >= 0x201)
  {
    *(_WORD *)(v2 + 40) = 100;
    *(_DWORD *)(v2 + 44) = 0;
    *(unsigned char *)(v2 + 48) = 0;
    *(unsigned char *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 52) = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 52) |= 1u;
  if (!v3) {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 52) |= 4u;
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<nas::tlv::AcbInfoSignaling,void({block_pointer}&)(nas::tlv::AcbInfoSignaling&)>(qmi::MessageBase *a1, void *a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v10 = result;
    tlv::parseV<nas::tlv::AcbInfoSignaling>(&v10, v5);
    if (v10)
    {
      return (*(uint64_t (**)(void))(*a2 + 16))(*a2);
    }
    else
    {
      uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x1E4FBA118];
      uint64_t v9 = *(unsigned __int16 *)a1;
      return v8(v9, 17, v6, v7);
    }
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<nas::tlv::AcbInfoData,void({block_pointer}&)(nas::tlv::AcbInfoData&)>(qmi::MessageBase *a1, void *a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v10 = result;
    tlv::parseV<nas::tlv::AcbInfoData>(&v10, v5);
    if (v10)
    {
      return (*(uint64_t (**)(void))(*a2 + 16))(*a2);
    }
    else
    {
      uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x1E4FBA118];
      uint64_t v9 = *(unsigned __int16 *)a1;
      return v8(v9, 18, v6, v7);
    }
  }
  return result;
}

uint64_t ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10GetAcbInfo8ResponseEEEvRKT__block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
  if (*(unsigned char *)a2 == 100) {
    __int16 v3 = 100;
  }
  else {
    __int16 v3 = 0;
  }
  unsigned int v4 = *(unsigned __int16 *)(a2 + 2);
  char v5 = *(unsigned char *)(a2 + 4);
  *(_WORD *)(v2 + 40) = v3;
  *(_DWORD *)(v2 + 44) = v4;
  *(unsigned char *)(v2 + 48) = v5;
  *(_DWORD *)(v2 + 52) = 1;
  *(unsigned char *)(v2 + 56) = 1;
  if (v4 >= 0x201)
  {
    *(_WORD *)(v2 + 40) = 100;
    *(_DWORD *)(v2 + 44) = 0;
    *(unsigned char *)(v2 + 48) = 0;
    *(unsigned char *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 52) = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 52) |= 1u;
  return result;
}

uint64_t ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10GetAcbInfo8ResponseEEEvRKT__block_invoke_2(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 32) + 8);
  int v3 = *a2;
  if (v3 == 100) {
    __int16 v4 = 100;
  }
  else {
    __int16 v4 = 0;
  }
  unsigned int v5 = *((unsigned __int16 *)a2 + 1);
  unsigned __int8 v6 = a2[4];
  *(_WORD *)(v2 + 40) = v4;
  *(_DWORD *)(v2 + 44) = v5;
  *(unsigned char *)(v2 + 48) = v6;
  *(_DWORD *)(v2 + 52) = 1;
  *(unsigned char *)(v2 + 56) = 1;
  if (v5 >= 0x201)
  {
    *(_WORD *)(v2 + 40) = 100;
    *(_DWORD *)(v2 + 44) = 0;
    *(unsigned char *)(v2 + 48) = 0;
    *(unsigned char *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 52) = 0;
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 52) |= 1u;
  if (!v3) {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 52) |= 4u;
  }
  return result;
}

BOOL SDPTemplateBuilder::generateEVSSDPMedia(SDPTemplateBuilder *this, ImsDictPref *a2, const ImsDictPref *a3, SDPMediaFormatInfo *a4)
{
  __int16 v6 = (__int16)this;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v37 = 8000;
  unsigned __int16 v36 = 1;
  extractRTPMapInfo(a2, &v37, &v36);
  int v7 = v6 & 0xFFE0;
  if (v7 == 96)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    ImsDictPref::keysAndValues((uint64_t)a2, &v33, (char **)&v30);
    uint64_t v29 = 0;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    *(_OWORD *)uint64_t v23 = 0u;
    SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)&v22, v6);
    uint64_t v8 = v33;
    if (v34 != v33)
    {
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      do
      {
        if (std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&SDPParser::evsFormatParameters, (void **)(v8 + v9)) != (void **)&qword_1EBBDB438)
        {
          v18[0] = (void *)(v33 + v9);
          uint64_t v11 = (uint64_t (*)(long long *, void **))std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&SDPParser::evsFormatParameters, (void **)(v33 + v9), (uint64_t)&std::piecewise_construct, (long long **)v18)[7];
          (*(void (**)(void **__return_ptr))(**((void **)v30 + v10) + 48))(__p);
          char v12 = v11(&v22, __p);
          char v13 = v12;
          if (v21 < 0)
          {
            operator delete(__p[0]);
            if ((v13 & 1) == 0)
            {
LABEL_9:
              std::string::basic_string[abi:ne180100]<0>(&v38, "sdp.templatebuilder");
              std::string::basic_string[abi:ne180100]<0>(v18, "");
              uint64_t v14 = ims::error((uint64_t)&v38, (uint64_t)v18);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Unable to parse ", 16);
              *(unsigned char *)(v14 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 32))(v14, v33 + v9);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" format parameter for EVS codec", 31);
              *(unsigned char *)(v14 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v14 + 17) = 0;
              if (v19 < 0) {
                operator delete(v18[0]);
              }
              if (v40.__r_.__value_.__s.__data_[7] < 0) {
                operator delete(v38);
              }
            }
          }
          else if ((v12 & 1) == 0)
          {
            goto LABEL_9;
          }
        }
        ++v10;
        uint64_t v8 = v33;
        v9 += 24;
      }
      while (v10 < 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 3));
    }
    SDPMediaFormatInfo::setPayloadType(a3, v6);
    std::string::basic_string[abi:ne180100]<0>(v16, "EVS");
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v38, v6, (long long *)v16, v37, v36);
    *((unsigned char *)a3 + 24) = v39;
    std::string::operator=((std::string *)((char *)a3 + 32), &v40);
    *((_WORD *)a3 + 28) = v41;
    std::string::operator=((std::string *)((char *)a3 + 64), &v42);
    *((_DWORD *)a3 + 22) = v43;
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v38);
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)&v38, (const SDPMediaFormatEVSParams *)&v22);
    int v44 = 2;
    SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)a3, (uint64_t)&v38);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v38);
    *(void *)&long long v22 = &unk_1F20E5C78;
    if (SBYTE7(v24) < 0) {
      operator delete(v23[0]);
    }
    if (v30)
    {
      uint64_t v31 = v30;
      operator delete(v30);
    }
    std::string v38 = &v33;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
    int v7 = 96;
  }
  return v7 == 96;
}

void sub_1C5325368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,char a50)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)(v50 - 232));
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a47) {
    operator delete(a47);
  }
  *(void *)(v50 - 232) = &a50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 232));
  _Unwind_Resume(a1);
}

BOOL SDPTemplateBuilder::generateAMRWBSDPMedia(SDPTemplateBuilder *this, ImsDictPref *a2, const ImsDictPref *a3, SDPMediaFormatInfo *a4)
{
  __int16 v6 = (__int16)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "AMR-WB");
  BOOL GenericAMRSDPMedia = SDPTemplateBuilder::generateGenericAMRSDPMedia(v6, (uint64_t)__p, a2, (uint64_t)a3);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return GenericAMRSDPMedia;
}

void sub_1C53254D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPTemplateBuilder::generateAMRNBSDPMedia(SDPTemplateBuilder *this, ImsDictPref *a2, const ImsDictPref *a3, SDPMediaFormatInfo *a4)
{
  __int16 v6 = (__int16)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "AMR");
  BOOL GenericAMRSDPMedia = SDPTemplateBuilder::generateGenericAMRSDPMedia(v6, (uint64_t)__p, a2, (uint64_t)a3);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return GenericAMRSDPMedia;
}

void sub_1C5325568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPTemplateBuilder::generatePCMUSDPMedia(SDPTemplateBuilder *this, unsigned __int16 a2, const ImsDictPref *a3, SDPMediaFormatInfo *a4)
{
  SDPMediaFormatInfo::setPayloadType(a3, 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "PCMA");
  SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v8, 8, (long long *)__p, 8000, 1);
  *((unsigned char *)a3 + 24) = v9;
  std::string::operator=((std::string *)((char *)a3 + 32), &v10);
  *((_WORD *)a3 + 28) = v11;
  std::string::operator=((std::string *)((char *)a3 + 64), &v12);
  *((_DWORD *)a3 + 22) = v13;
  SDPMediaRTPMap::~SDPMediaRTPMap(&v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_1C5325634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPTemplateBuilder::generatePCMASDPMedia(SDPTemplateBuilder *this, unsigned __int16 a2, const ImsDictPref *a3, SDPMediaFormatInfo *a4)
{
  SDPMediaFormatInfo::setPayloadType(a3, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "PCMU");
  SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v8, 0, (long long *)__p, 8000, 1);
  *((unsigned char *)a3 + 24) = v9;
  std::string::operator=((std::string *)((char *)a3 + 32), &v10);
  *((_WORD *)a3 + 28) = v11;
  std::string::operator=((std::string *)((char *)a3 + 64), &v12);
  *((_DWORD *)a3 + 22) = v13;
  SDPMediaRTPMap::~SDPMediaRTPMap(&v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_1C5325710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPTemplateBuilder::generateDTMFSDPMedia(SDPTemplateBuilder *this, ImsDictPref *a2, const ImsDictPref *a3, SDPMediaFormatInfo *a4)
{
  __int16 v5 = (__int16)this;
  unsigned __int16 v15 = 8000;
  extractRTPMapInfo(a2, &v15, 0);
  if ((v5 & 0xFFE0) == 0x60)
  {
    SDPMediaFormatInfo::setPayloadType(a3, v5);
    std::string::basic_string[abi:ne180100]<0>(__p, "telephone-event");
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v9, v5, (long long *)__p, v15, 1);
    *((unsigned char *)a3 + 24) = v10;
    std::string::operator=((std::string *)((char *)a3 + 32), &v11);
    *((_WORD *)a3 + 28) = v12;
    std::string::operator=((std::string *)((char *)a3 + 64), &v13);
    *((_DWORD *)a3 + 22) = v14;
    SDPMediaRTPMap::~SDPMediaRTPMap(&v9);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  return (v5 & 0xFFE0) == 96;
}

void sub_1C5325824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void SDPTemplateBuilder::createSDPTemplate(SDPTemplateBuilder *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v133 = *MEMORY[0x1E4F143B8];
  AllowIPv6UnicastAddressKey = (void **)ImsPrefs::getAllowIPv6UnicastAddressKey(this);
  unsigned __int8 v6 = ImsPrefs::BOOLValue(this, AllowIPv6UnicastAddressKey);
  *a2 = 0;
  a2[1] = 0;
  _ZNSt3__115allocate_sharedB8ne180100I8SDPModelNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a2);
  uint64_t v7 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__s, "0.0.0.0");
  v114[0].__r_.__value_.__s.__data_[8] = 1;
  v114[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20CB730;
  *(std::string::size_type *)((char *)&v114[0].__r_.__value_.__r.__words[1] + 4) = 0x100000001;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v114[1], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  }
  else {
    v114[1] = __s;
  }
  LOWORD(v115) = v6;
  std::string::basic_string[abi:ne180100]<0>(__p, "user");
  SDPOrigin::SDPOrigin((std::string *)&__v, (uint64_t)v114, (long long *)__p, 0, 0);
  SDPModel::setOrigin(v7, (uint64_t)&__v);
  SDPOrigin::~SDPOrigin((void **)&__v.__first_);
  if (v112 < 0) {
    operator delete(__p[0]);
  }
  v114[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20CB730;
  if (SHIBYTE(v114[1].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v114[1].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__str, "-");
  std::string::operator=((std::string *)(v8 + 152), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  char v9 = (SDPModel *)*a2;
  std::string::basic_string[abi:ne180100]<0>(&v108, "0.0.0.0");
  LOBYTE(__v.__begin_) = 1;
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&unk_1F20CB730;
  *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__begin_ + 4) = (std::__split_buffer<std::string>::pointer)0x100000001;
  if (SHIBYTE(v109) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__v.__end_cap_, (const std::string::value_type *)v108.std::__1::__compressed_pair_elem<std::string *, 0, false>::__value_, (std::string::size_type)v108.std::__1::__compressed_pair_elem<std::allocator<std::string> &, 1, false>::__value_);
  }
  else
  {
    __v.__end_cap_ = v108;
    v121 = v109;
  }
  LOWORD(v122) = v6;
  SDPModel::addSDPConnection(v9, (const SDPConnection *)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&unk_1F20CB730;
  if (SHIBYTE(v121) < 0) {
    operator delete(__v.__end_cap_.__value_);
  }
  if (SHIBYTE(v109) < 0) {
    operator delete(v108.std::__1::__compressed_pair_elem<std::string *, 0, false>::__value_);
  }
  uint64_t v10 = *a2;
  uint64_t v11 = *a2 + 320;
  LOBYTE(__v.__begin_) = 1;
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&unk_1F20E67F0;
  __v.__end_ = 0;
  __v.__end_cap_.__value_ = 0;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>;
  v121 = &__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>;
  uint64_t v122 = 0;
  __int16 v12 = std::__list_imp<SDPTiming>::__create_node[abi:ne180100]<SDPTiming>(v11, 0, 0, (const SDPTiming *)&__v);
  v12[1] = v11;
  uint64_t v13 = *(void *)(v10 + 320);
  *__int16 v12 = v13;
  *(void *)(v13 + 8) = v12;
  *(void *)(v10 + 320) = v12;
  ++*(void *)(v10 + 336);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&unk_1F20E67F0;
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)&__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>);
  uint64_t v14 = *a2;
  SDPMedia::SDPMedia((uint64_t)&__v, 2, 1, 0, 3);
  unint64_t v15 = *(void *)(v14 + 424);
  if (v15 >= *(void *)(v14 + 432))
  {
    uint64_t v16 = std::vector<SDPMedia>::__emplace_back_slow_path<SDPMedia>((uint64_t *)(v14 + 416), (const SDPMedia *)&__v);
  }
  else
  {
    SDPMedia::SDPMedia(*(SDPMedia **)(v14 + 424), (const SDPMedia *)&__v);
    uint64_t v16 = v15 + 200;
    *(void *)(v14 + 424) = v15 + 200;
  }
  *(void *)(v14 + 424) = v16;
  SDPMedia::~SDPMedia((SDPMedia *)&__v);
  AudioCodecsKey = ImsPrefs::getAudioCodecsKey(v17);
  char v19 = (ImsPrefs *)ImsPrefs::typedPrefWithKey<ImsDictPref>(this, (void **)AudioCodecsKey);
  if (v19) {
    uint64_t v20 = (uint64_t)v19;
  }
  else {
    uint64_t v20 = *((void *)AudioCodecsKey + 11);
  }
  if (v20)
  {
    memset(&v107, 0, sizeof(v107));
    AudioCodecListKey = (void **)ImsPrefs::getAudioCodecListKey(v19);
    ImsPrefs::stringValue(this, AudioCodecListKey);
    long long v79 = this;
    memset(&v106, 0, sizeof(v106));
    ImsDictPref::keys(v20, (uint64_t *)&v106);
    v105[0] = 0;
    v105[1] = 0;
    unint64_t v103 = 0;
    long long v104 = (uint64_t *)v105;
    uint64_t v101 = 0;
    unint64_t v102 = 0;
    v100[0] = 0;
    v100[1] = 0;
    long long v99 = (uint64_t *)v100;
    std::vector<std::string>::pointer begin = v106.__begin_;
    for (std::vector<std::string>::pointer i = v106.__end_; begin != i; ++begin)
    {
      memset(&v98, 0, sizeof(v98));
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v98, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v25 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
        v98.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v25;
      }
      long long v22 = (ImsPrefs *)ImsDictPref::typedChildWithName<ImsDictPref>(v20);
      long long v26 = v22;
      if (v22)
      {
        std::string::basic_string[abi:ne180100]<0>(&__v, "EncodingName");
        uint64_t v27 = (*(uint64_t (**)(ImsPrefs *, std::__split_buffer<std::string> *))(*(void *)v26 + 88))(v26, &__v);
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
        long long v96 = 0uLL;
        uint64_t v97 = 0;
        if (v27) {
          (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v27 + 48))(&v96, v27);
        }
        else {
          std::string::basic_string[abi:ne180100]<0>(&v96, "");
        }
        uint64_t v28 = HIBYTE(v97);
        if (v97 < 0) {
          uint64_t v28 = *((void *)&v96 + 1);
        }
        if (!v28) {
          goto LABEL_52;
        }
        uint64_t v29 = qword_1EBBDBAB0;
        if (!qword_1EBBDBAB0) {
          goto LABEL_52;
        }
        uint64_t v30 = &qword_1EBBDBAB0;
        do
        {
          char v31 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v29 + 32), (void **)&v96);
          if (v31 >= 0) {
            uint64_t v32 = (uint64_t *)v29;
          }
          else {
            uint64_t v32 = (uint64_t *)(v29 + 8);
          }
          if (v31 >= 0) {
            uint64_t v30 = (uint64_t *)v29;
          }
          uint64_t v29 = *v32;
        }
        while (*v32);
        if (v30 == &qword_1EBBDBAB0
          || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v96, (void **)v30 + 4) & 0x80) != 0)
        {
LABEL_52:
          std::string::basic_string[abi:ne180100]<0>(&__v, "sdp.template");
          std::string::basic_string[abi:ne180100]<0>(v114, "");
          uint64_t v37 = ims::warn((uint64_t)&__v, (uint64_t)v114);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"Unable to create SDP media entry for codec type '", 49);
          *(unsigned char *)(v37 + 17) = 0;
          (*(void (**)(uint64_t, long long *))(*(void *)v37 + 32))(v37, &v96);
          std::string v38 = *(void **)(v37 + 8);
          LOBYTE(v94[0]) = 39;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v94, 1);
          *(unsigned char *)(v37 + 17) = 0;
          long long v22 = (ImsPrefs *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v37 + 17) = 0;
          if (SHIBYTE(v114[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v114[0].__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__v.__end_) < 0) {
            operator delete(__v.__first_);
          }
        }
        else
        {
          uint64_t v132 = 0;
          long long v130 = 0u;
          long long v131 = 0u;
          long long v129 = 0u;
          uint64_t v127 = 0x10000;
          uint64_t v123 = 255;
          __v.__end_cap_.__value_ = (std::string *)1;
          __v.__begin_ = (std::__split_buffer<std::string>::pointer)255;
          __v.__first_ = (std::__split_buffer<std::string>::pointer)&unk_1F20DB438;
          v121 = 0;
          uint64_t v122 = 0;
          __v.__end_cap_.__value_ = 0;
          __v.__end_ = (std::__split_buffer<std::string>::pointer)&unk_1F20E7518;
          uint64_t v125 = 0;
          uint64_t v126 = 0;
          uint64_t v124 = 0;
          v128[5] = 255;
          v128[1] = 1;
          memset(&v128[2], 0, 24);
          v128[0] = &unk_1F20B3A68;
          memset(&v128[6], 0, 24);
          v114[0].__r_.__value_.__r.__words[0] = 0;
          uint64_t v33 = std::__tree<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>>>::__find_equal<std::string>((uint64_t **)v114, (void **)&v96);
          uint64_t v34 = (uint64_t *)*v33;
          if (!*v33)
          {
            uint64_t v35 = (uint64_t **)v33;
            uint64_t v34 = (uint64_t *)operator new(0x40uLL);
            unsigned __int16 v36 = (std::string *)(v34 + 4);
            if (SHIBYTE(v97) < 0)
            {
              std::string::__init_copy_ctor_external(v36, (const std::string::value_type *)v96, *((std::string::size_type *)&v96 + 1));
            }
            else
            {
              *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v96;
              v34[6] = v97;
            }
            v34[7] = 0;
            std::__tree<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>>>::__insert_node_at((uint64_t)v114[0].__r_.__value_.__l.__data_, v35, v34);
          }
          char v39 = (uint64_t (*)(void, ImsPrefs *, std::__split_buffer<std::string> *))v34[7];
          if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v40 = &v98;
          }
          else {
            std::string v40 = (std::string *)v98.__r_.__value_.__r.__words[0];
          }
          unsigned __int16 v41 = strtoul((const char *)v40, 0, 10);
          std::string v42 = (ImsPrefs *)v39(v41, v26, &__v);
          if (v42)
          {
            uint64_t v43 = HIBYTE(v97);
            if (v97 < 0) {
              uint64_t v43 = *((void *)&v96 + 1);
            }
            if (v43 != 3) {
              goto LABEL_73;
            }
            int v44 = &v96;
            if (v97 < 0) {
              int v44 = (long long *)v96;
            }
            int v45 = *(unsigned __int16 *)v44;
            int v46 = *((unsigned __int8 *)v44 + 2);
            BOOL v47 = v45 == 22085 && v46 == 83;
            if (v47
              && (OrderEVSCodecsByCodecIDKey = (void **)ImsPrefs::getOrderEVSCodecsByCodecIDKey(v42),
                  (ImsPrefs::BOOLValue(v79, OrderEVSCodecsByCodecIDKey) & 1) == 0))
            {
              long long v118 = 0u;
              long long v119 = 0u;
              long long v116 = 0u;
              long long v117 = 0u;
              long long v115 = 0u;
              memset(v114, 0, sizeof(v114));
              std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v114, (unsigned int *)v128);
              if (DWORD2(v119) == 2)
              {
                switch((__int16)v119)
                {
                  case 0:
                    LOWORD(v94[0]) = 0;
                    xpc_object_t v55 = std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::__emplace_unique_key_args<EVSConfigName,std::piecewise_construct_t const&,std::tuple<EVSConfigName&&>,std::tuple<>>(&v104, 0, v94);
                    SDPMediaFormatInfo::operator=((uint64_t)(v55 + 5), (uint64_t)&__v);
                    break;
                  case 1:
                    LOWORD(v94[0]) = 1;
                    uint64_t v60 = std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::__emplace_unique_key_args<EVSConfigName,std::piecewise_construct_t const&,std::tuple<EVSConfigName&&>,std::tuple<>>(&v104, 1, v94);
                    SDPMediaFormatInfo::operator=((uint64_t)(v60 + 5), (uint64_t)&__v);
                    break;
                  case 2:
                    LOWORD(v94[0]) = 2;
                    uint64_t v58 = std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::__emplace_unique_key_args<EVSConfigName,std::piecewise_construct_t const&,std::tuple<EVSConfigName&&>,std::tuple<>>(&v104, 2, v94);
                    SDPMediaFormatInfo::operator=((uint64_t)(v58 + 5), (uint64_t)&__v);
                    break;
                  case 3:
                    LOWORD(v94[0]) = 3;
                    uint64_t v59 = std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::__emplace_unique_key_args<EVSConfigName,std::piecewise_construct_t const&,std::tuple<EVSConfigName&&>,std::tuple<>>(&v104, 3, v94);
                    SDPMediaFormatInfo::operator=((uint64_t)(v59 + 5), (uint64_t)&__v);
                    break;
                  case 4:
                    LOWORD(v94[0]) = 4;
                    int v57 = std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::__emplace_unique_key_args<EVSConfigName,std::piecewise_construct_t const&,std::tuple<EVSConfigName&&>,std::tuple<>>(&v104, 4, v94);
                    SDPMediaFormatInfo::operator=((uint64_t)(v57 + 5), (uint64_t)&__v);
                    break;
                  default:
                    unint64_t v61 = v102;
                    if (v102 >= v103)
                    {
                      uint64_t v62 = std::vector<SDPMediaFormatInfo>::__push_back_slow_path<SDPMediaFormatInfo const&>(&v101, (uint64_t)&__v);
                    }
                    else
                    {
                      SDPMediaFormatInfo::SDPMediaFormatInfo(v102, (uint64_t)&__v);
                      uint64_t v62 = v61 + 224;
                    }
                    unint64_t v102 = v62;
                    break;
                }
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(v94, "sdp.template");
                std::string::basic_string[abi:ne180100]<0>(v92, "");
                uint64_t v56 = ims::error((uint64_t)v94, (uint64_t)v92);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v56 + 8), (uint64_t)"EVS SDPMediaFormatParams is null", 32);
                *(unsigned char *)(v56 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v56 + 64))(v56, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v56 + 17) = 0;
                if (v93 < 0) {
                  operator delete(v92[0]);
                }
                if (v95 < 0) {
                  operator delete(v94[0]);
                }
              }
              std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v114);
            }
            else
            {
LABEL_73:
              v114[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
              xpc_object_t v49 = std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v99, (void **)&v96, (long long **)v114);
              uint64_t v50 = v49;
              unint64_t v51 = v49[8];
              if (v51 >= v49[9])
              {
                uint64_t v52 = std::vector<SDPMediaFormatInfo>::__push_back_slow_path<SDPMediaFormatInfo const&>(v49 + 7, (uint64_t)&__v);
              }
              else
              {
                SDPMediaFormatInfo::SDPMediaFormatInfo(v49[8], (uint64_t)&__v);
                uint64_t v52 = v51 + 224;
                v50[8] = v51 + 224;
              }
              v50[8] = v52;
            }
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v114, "sdp.template");
            std::string::basic_string[abi:ne180100]<0>(v94, "");
            uint64_t v53 = ims::warn((uint64_t)v114, (uint64_t)v94);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v53 + 8), (uint64_t)"Failed to create SDP media entry for codec type '", 49);
            *(unsigned char *)(v53 + 17) = 0;
            (*(void (**)(uint64_t, long long *))(*(void *)v53 + 32))(v53, &v96);
            xpc_object_t v54 = *(void **)(v53 + 8);
            LOBYTE(v92[0]) = 39;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v92, 1);
            *(unsigned char *)(v53 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v53 + 17) = 0;
            if (v95 < 0) {
              operator delete(v94[0]);
            }
            if (SHIBYTE(v114[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v114[0].__r_.__value_.__l.__data_);
            }
          }
          __v.__first_ = (std::__split_buffer<std::string>::pointer)&unk_1F20DB438;
          std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v128);
          SDPMediaRTPMap::~SDPMediaRTPMap((void **)&__v.__end_);
        }
        if (SHIBYTE(v97) < 0) {
          operator delete((void *)v96);
        }
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
    }
    char v63 = (void **)ImsPrefs::getOrderEVSCodecsByCodecIDKey(v22);
    if ((ImsPrefs::BOOLValue(v79, v63) & 1) == 0)
    {
      std::string v64 = v104;
      if (v104 != (uint64_t *)v105)
      {
        do
        {
          std::string::basic_string[abi:ne180100]<0>(&__v, "EVS");
          v114[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
          long long v65 = std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v99, (void **)&__v.__first_, v114);
          long long v66 = v65;
          uint64_t v67 = (uint64_t)(v64 + 5);
          unint64_t v68 = v65[8];
          if (v68 >= v65[9])
          {
            uint64_t v69 = std::vector<SDPMediaFormatInfo>::__push_back_slow_path<SDPMediaFormatInfo const&>(v65 + 7, v67);
          }
          else
          {
            SDPMediaFormatInfo::SDPMediaFormatInfo(v65[8], v67);
            uint64_t v69 = v68 + 224;
            v66[8] = v68 + 224;
          }
          v66[8] = v69;
          if (SHIBYTE(__v.__end_) < 0) {
            operator delete(__v.__first_);
          }
          long long v70 = (uint64_t *)v64[1];
          if (v70)
          {
            do
            {
              long long v71 = v70;
              long long v70 = (uint64_t *)*v70;
            }
            while (v70);
          }
          else
          {
            do
            {
              long long v71 = (uint64_t *)v64[2];
              BOOL v47 = *v71 == (void)v64;
              std::string v64 = v71;
            }
            while (!v47);
          }
          std::string v64 = v71;
        }
        while (v71 != (uint64_t *)v105);
      }
      uint64_t v72 = v101;
      for (unint64_t j = v102; v72 != j; v72 += 224)
      {
        std::string::basic_string[abi:ne180100]<0>(&__v, "EVS");
        v114[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
        char v74 = std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v99, (void **)&__v.__first_, v114);
        long long v75 = v74;
        unint64_t v76 = v74[8];
        if (v76 >= v74[9])
        {
          uint64_t v77 = std::vector<SDPMediaFormatInfo>::__push_back_slow_path<SDPMediaFormatInfo const&>(v74 + 7, v72);
        }
        else
        {
          SDPMediaFormatInfo::SDPMediaFormatInfo(v74[8], v72);
          uint64_t v77 = v76 + 224;
          v75[8] = v76 + 224;
        }
        v75[8] = v77;
        if (SHIBYTE(__v.__end_) < 0) {
          operator delete(__v.__first_);
        }
      }
    }
    for (uint64_t k = *(void *)(*a2 + 416); k != *(void *)(*a2 + 424); k += 200)
    {
      if (*(_DWORD *)(k + 12) == 2) {
        goto LABEL_129;
      }
    }
    uint64_t k = 0;
LABEL_129:
    std::string::basic_string[abi:ne180100]<0>(v90, "EVS");
    extractCodecsWithEncodingName(k, &v99, (long long *)v90);
    if (v91 < 0) {
      operator delete(v90[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v88, "AMR-WB");
    extractCodecsWithEncodingName(k, &v99, (long long *)v88);
    if (v89 < 0) {
      operator delete(v88[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v86, "AMR");
    extractCodecsWithEncodingName(k, &v99, (long long *)v86);
    if (v87 < 0) {
      operator delete(v86[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v84, "PCMU");
    extractCodecsWithEncodingName(k, &v99, (long long *)v84);
    if (v85 < 0) {
      operator delete(v84[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v82, "PCMA");
    extractCodecsWithEncodingName(k, &v99, (long long *)v82);
    if (v83 < 0) {
      operator delete(v82[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v80, "telephone-event");
    extractCodecsWithEncodingName(k, &v99, (long long *)v80);
    if (v81 < 0) {
      operator delete(v80[0]);
    }
    std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::destroy(v100[0]);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v101;
    std::vector<SDPMediaFormatInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::destroy(v105[0]);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v106;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v107.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1C532690C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,void **a61,void *a62,uint64_t a63)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&STACK[0x220]);
  SDPMediaFormatInfo::~SDPMediaFormatInfo((SDPMediaFormatInfo *)&STACK[0x2A8]);
  if (a47 < 0) {
    operator delete(__p);
  }
  if (a53 < 0) {
    operator delete(a48);
  }
  std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::destroy(a56);
  STACK[0x2A8] = (unint64_t)&a58;
  std::vector<SDPMediaFormatInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::destroy(a62);
  a61 = (void **)&a64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a61);
  if (a72 < 0) {
    operator delete(a67);
  }
  long long v73 = *(std::__shared_weak_count **)(a9 + 8);
  if (v73) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  }
  _Unwind_Resume(a1);
}

void *ImsDictPref::typedChildWithName<ImsDictPref>(uint64_t a1)
{
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  if (result)
  {
  }
  return result;
}

uint64_t *extractCodecsWithEncodingName(uint64_t a1, uint64_t **a2, long long *a3)
{
  uint64_t v10 = a3;
  uint64_t result = std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (void **)a3, &v10);
  if (result[8] != result[7])
  {
    uint64_t v10 = a3;
    uint64_t result = std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (void **)a3, &v10);
    uint64_t v7 = result[7];
    for (uint64_t i = result[8]; v7 != i; v7 += 224)
    {
      uint64_t result = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(a1 + 40, 0, 0, v7);
      result[1] = a1 + 40;
      uint64_t v9 = *(void *)(a1 + 40);
      *uint64_t result = v9;
      *(void *)(v9 + 8) = result;
      *(void *)(a1 + 40) = result;
      ++*(void *)(a1 + 56);
    }
  }
  return result;
}

void SDPTemplateBuilder::createLazuliSDPTemplate(int a1@<W1>, long long *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  a3[1] = 0;
  _ZNSt3__115allocate_sharedB8ne180100I8SDPModelNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a3);
  uint64_t v6 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v41, "0.0.0.0");
  LOBYTE(v46) = 1;
  int v45 = (std::string *)&unk_1F20CB730;
  *(void *)((char *)&v46 + 4) = 0x100000001;
  if (SHIBYTE(v42) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v47, (const std::string::value_type *)v41, *((std::string::size_type *)&v41 + 1));
  }
  else
  {
    long long v47 = v41;
    *(void *)&long long v48 = v42;
  }
  WORD4(v48) = 257;
  std::string::basic_string[abi:ne180100]<0>(__p, "user");
  SDPOrigin::SDPOrigin((std::string *)v25, (uint64_t)&v45, (long long *)__p, 0, 0);
  SDPModel::setOrigin(v6, (uint64_t)v25);
  SDPOrigin::~SDPOrigin((void **)v25);
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  int v45 = (std::string *)&unk_1F20CB730;
  if (SBYTE7(v48) < 0) {
    operator delete((void *)v47);
  }
  if (SHIBYTE(v42) < 0) {
    operator delete((void *)v41);
  }
  uint64_t v7 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__str, "-");
  std::string::operator=((std::string *)(v7 + 152), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v8 = (SDPModel *)*a3;
  std::string::basic_string[abi:ne180100]<0>(v36, "0.0.0.0");
  v25[8] = 1;
  *(void *)long long v25 = &unk_1F20CB730;
  *(void *)&v25[12] = 0x100000001;
  if (SHIBYTE(v37) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v25[24], (const std::string::value_type *)v36[0], (std::string::size_type)v36[1]);
  }
  else
  {
    *(_OWORD *)&v25[24] = *(_OWORD *)v36;
    *(void *)&v25[40] = v37;
  }
  LOWORD(v26) = 257;
  SDPModel::addSDPConnection(v8, (const SDPConnection *)v25);
  *(void *)long long v25 = &unk_1F20CB730;
  if ((v25[47] & 0x80000000) != 0) {
    operator delete(*(void **)&v25[24]);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
  uint64_t v9 = *a3;
  uint64_t v10 = *a3 + 320;
  v25[8] = 1;
  *(void *)long long v25 = &unk_1F20E67F0;
  *(void *)&v25[16] = 0;
  *(void *)&v25[24] = 0;
  *(void *)&v25[32] = &v25[32];
  *(void *)&v25[40] = &v25[32];
  *(void *)&long long v26 = 0;
  uint64_t v11 = std::__list_imp<SDPTiming>::__create_node[abi:ne180100]<SDPTiming>(v10, 0, 0, (const SDPTiming *)v25);
  v11[1] = v10;
  uint64_t v12 = *(void *)(v9 + 320);
  void *v11 = v12;
  *(void *)(v12 + 8) = v11;
  *(void *)(v9 + 320) = v11;
  ++*(void *)(v9 + 336);
  *(void *)long long v25 = &unk_1F20E67F0;
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)&v25[32]);
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)&v25[32] = 0u;
  long long v26 = 0u;
  if (a1) {
    int v13 = 8;
  }
  else {
    int v13 = 7;
  }
  memset(v25, 0, 32);
  SDPMedia::SDPMedia((uint64_t)v25, 6, 2855, 0, v13);
  std::string::basic_string[abi:ne180100]<0>(&v52, "message/cpim");
  int v45 = 0;
  long long v46 = 0uLL;
  uint64_t v43 = &v45;
  uint64_t v44 = 0;
  int v45 = (std::string *)operator new(0x18uLL);
  *(void *)&long long v46 = v45;
  *((void *)&v46 + 1) = v45 + 1;
  *(void *)&long long v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v46 + 8, &v52, &v54, v45);
  SDPMedia::setAcceptTypes(v25, (long long **)&v45);
  uint64_t v43 = &v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if (SHIBYTE(v53) < 0) {
    operator delete((void *)v52);
  }
  std::string::basic_string[abi:ne180100]<0>(&v45, "text/plain");
  std::string::basic_string[abi:ne180100]<0>(&v47, "message/imdn+xml");
  std::string::basic_string[abi:ne180100]<0>((void *)&v48 + 1, "application/im-iscomposing+xml");
  std::string::basic_string[abi:ne180100]<0>(v49, "application/vnd.gsma.rcs-ft-http+xml");
  std::string::basic_string[abi:ne180100]<0>(v50, "application/vnd.gsma.rcspushlocation+xml");
  std::string::basic_string[abi:ne180100]<0>(v51, "application/vnd.oma.cpm-groupdata+xml");
  long long v52 = 0uLL;
  uint64_t v53 = 0;
  uint64_t v43 = (std::string **)&v52;
  uint64_t v44 = 0;
  *(void *)&long long v52 = operator new(0x90uLL);
  *((void *)&v52 + 1) = v52;
  uint64_t v53 = v52 + 144;
  *((void *)&v52 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v53, (long long *)&v45, &v52, (std::string *)v52);
  SDPMedia::setAcceptWrappedTypes(v25, (long long **)&v52);
  uint64_t v43 = (std::string **)&v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  for (uint64_t i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v51[i + 2]) < 0) {
      operator delete((void *)v51[i]);
    }
  }
  SDPMedia::setDirection((uint64_t)v25, 1);
  int v45 = (std::string *)&unk_1F20E7F48;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  SDPMedia::setPath((SDPMedia *)v25, (const LazuliRouteSet *)&v45);
  std::string::basic_string[abi:ne180100]<0>(&v52, "active");
  SDPMedia::setSetupState(v25, &v52);
  if (SHIBYTE(v53) < 0)
  {
    operator delete((void *)v52);
    if (!a1) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (a1) {
LABEL_32:
  }
    SDPMedia::setFingerprint(v25, a2, (long long *)((char *)a2 + 24));
LABEL_33:
  uint64_t v15 = *a3;
  unint64_t v17 = *(void *)(*a3 + 424);
  unint64_t v16 = *(void *)(*a3 + 432);
  if (v17 >= v16)
  {
    uint64_t v19 = *(void *)(v15 + 416);
    unint64_t v20 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v17 - v19) >> 3);
    if (v20 + 1 > 0x147AE147AE147AELL) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v16 - v19) >> 3);
    uint64_t v22 = 2 * v21;
    if (2 * v21 <= v20 + 1) {
      uint64_t v22 = v20 + 1;
    }
    if (v21 >= 0xA3D70A3D70A3D7) {
      unint64_t v23 = 0x147AE147AE147AELL;
    }
    else {
      unint64_t v23 = v22;
    }
    *((void *)&v54 + 1) = v15 + 432;
    if (v23) {
      long long v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPMedia>>(v15 + 432, v23);
    }
    else {
      long long v24 = 0;
    }
    *(void *)&long long v52 = v24;
    *((void *)&v52 + 1) = &v24[200 * v20];
    uint64_t v53 = *((void *)&v52 + 1);
    *(void *)&long long v54 = &v24[200 * v23];
    SDPMedia::SDPMedia(*((SDPMedia **)&v52 + 1), (const SDPMedia *)v25);
    v53 += 200;
    std::vector<SDPMedia>::__swap_out_circular_buffer((uint64_t *)(v15 + 416), &v52);
    unint64_t v18 = *(void *)(v15 + 424);
    std::__split_buffer<SDPMedia>::~__split_buffer((uint64_t)&v52);
  }
  else
  {
    SDPMedia::SDPMedia(*(SDPMedia **)(*a3 + 424), (const SDPMedia *)v25);
    unint64_t v18 = v17 + 200;
    *(void *)(v15 + 424) = v17 + 200;
  }
  *(void *)(v15 + 424) = v18;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)&v45);
  SDPMedia::~SDPMedia((SDPMedia *)v25);
}

void sub_1C5327430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v40 + 8);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  _Unwind_Resume(a1);
}

void SDPMedia::setDirection(uint64_t a1, int a2)
{
  uint64_t v3 = a1 + 136;
  SDPMediaDirection::SDPMediaDirection((uint64_t)v6, a2);
  __int16 v4 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaDirection>(v3, 0, 0, (uint64_t)v6);
  v4[1] = v3;
  uint64_t v5 = *(void *)(a1 + 136);
  void *v4 = v5;
  *(void *)(v5 + 8) = v4;
  *(void *)(a1 + 136) = v4;
  ++*(void *)(a1 + 152);
  v6[0] = &unk_1F20E5C78;
  if (v7 < 0) {
    operator delete((void *)v6[2]);
  }
}

void sub_1C53276C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SDPTemplateBuilder::createSDPTextMedia(void *a1@<X0>, unsigned __int8 a2@<W1>, int a3@<W2>, ImsPrefs *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  *(void *)(a5 + 192) = 0;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 176) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  uint64_t v10 = SDPMedia::SDPMedia(a5, 4, 0, 0, 3);
  SDPMedia::setDirection(v10, 1);
  PayloadTypeTTYKey = (void **)ImsPrefs::getPayloadTypeTTYKey(v11);
  int v13 = (ImsPrefs *)ImsPrefs::intValue(a4, PayloadTypeTTYKey);
  __int16 v14 = (__int16)v13;
  PayloadTypeTTYRedundancyKey = (void **)ImsPrefs::getPayloadTypeTTYRedundancyKey(v13);
  __int16 v16 = ImsPrefs::intValue(a4, PayloadTypeTTYRedundancyKey);
  SDPMedia::setPort((SDPMedia *)a5, 3);
  v76[1] = 255;
  uint64_t v78 = 1;
  uint64_t v87 = 0;
  long long v86 = 0u;
  long long v85 = 0u;
  long long v84 = 0u;
  uint64_t v82 = 0x10000;
  uint64_t v80 = 255;
  v76[0] = &unk_1F20DB438;
  memset(&v79, 0, sizeof(v79));
  uint64_t v77 = &unk_1F20E7518;
  memset(&v81, 0, sizeof(v81));
  v83[1] = 1;
  memset(&v83[2], 0, 24);
  v83[5] = 255;
  v83[0] = &unk_1F20B3A68;
  memset(&v83[6], 0, 24);
  if (v16 != 255)
  {
    SDPMediaFormatInfo::setPayloadType((SDPMediaFormatInfo *)v76, v16);
    unint64_t v17 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "red");
    SampleRateTTYKey = (void **)ImsPrefs::getSampleRateTTYKey(v17);
    __int16 v19 = ImsPrefs::intValue(a4, SampleRateTTYKey);
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v67, v16, (long long *)__p, v19, 1);
    LOBYTE(v78) = v68;
    std::string::operator=(&v79, &v69);
    LOWORD(v80) = v70;
    std::string::operator=(&v81, &v73);
    LODWORD(v82) = v74;
    SDPMediaRTPMap::~SDPMediaRTPMap(&v67);
    if (v66 < 0) {
      operator delete(__p[0]);
    }
    SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v56, v16);
    v56[0] = &unk_1F20E2A10;
    __int16 v60 = v14;
    SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v67, v59);
    uint64_t v67 = &unk_1F20E2A10;
    __int16 v71 = v60;
    int v75 = 5;
    SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)v76, (uint64_t)&v67);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v67);
    v56[0] = &unk_1F20E5C78;
    if (v58 < 0) {
      operator delete(v57);
    }
    unint64_t v20 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(a5 + 40, 0, 0, (uint64_t)v76);
    v20[1] = a5 + 40;
    uint64_t v21 = *(void *)(a5 + 40);
    void *v20 = v21;
    *(void *)(v21 + 8) = v20;
    *(void *)(a5 + 40) = v20;
    ++*(void *)(a5 + 56);
  }
  SDPMediaFormatInfo::setPayloadType((SDPMediaFormatInfo *)v76, v14);
  uint64_t v22 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(v63, "t140");
  unint64_t v23 = (void **)ImsPrefs::getSampleRateTTYKey(v22);
  __int16 v24 = ImsPrefs::intValue(a4, v23);
  SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v67, v14, (long long *)v63, v24, 1);
  LOBYTE(v78) = v68;
  std::string::operator=(&v79, &v69);
  LOWORD(v80) = v70;
  std::string::operator=(&v81, &v73);
  LODWORD(v82) = v74;
  SDPMediaRTPMap::~SDPMediaRTPMap(&v67);
  if (v64 < 0) {
    operator delete(v63[0]);
  }
  RTTBandwidthSpecifierASValueKey = (void **)ImsPrefs::getRTTBandwidthSpecifierASValueKey(v25);
  int v27 = ImsPrefs::intValue(a4, RTTBandwidthSpecifierASValueKey);
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v56, v14);
  v56[0] = &unk_1F20E2998;
  int v61 = 0;
  std::string::size_type v62 = v27;
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v67, v59);
  uint64_t v67 = &unk_1F20E2998;
  int v72 = v61;
  v73.__r_.__value_.__r.__words[0] = v62;
  int v75 = 4;
  SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)v76, (uint64_t)&v67);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v67);
  v56[0] = &unk_1F20E5C78;
  if (v58 < 0) {
    operator delete(v57);
  }
  long long v28 = (ImsPrefs *)std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(a5 + 40, 0, 0, (uint64_t)v76);
  *((void *)v28 + 1) = a5 + 40;
  uint64_t v29 = *(void *)(a5 + 40);
  *(void *)long long v28 = v29;
  *(void *)(v29 + 8) = v28;
  *(void *)(a5 + 40) = v28;
  ++*(void *)(a5 + 56);
  long long v30 = (std::__shared_weak_count *)a1[1];
  v55[0] = *a1;
  v55[1] = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  EnableBandwidthSpecifiersKey = (void **)ImsPrefs::getEnableBandwidthSpecifiersKey(v28);
  int v32 = ImsPrefs::BOOLValue(a4, EnableBandwidthSpecifiersKey);
  long long v33 = (ImsPrefs *)SDPTemplateBuilder::addBandwidthSpecifiers(a5, v55, a2, v32, a3, a4);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  SRTPCryptoSuiteKey = (void **)ImsPrefs::getSRTPCryptoSuiteKey(v33);
  uint64_t v35 = (ImsPrefs *)ImsPrefs::stringValue(a4, SRTPCryptoSuiteKey);
  if (v69.__r_.__value_.__s.__data_[7] < 0)
  {
    uint64_t v36 = v68;
    operator delete(v67);
    if (!v36) {
      goto LABEL_27;
    }
  }
  else if (!v69.__r_.__value_.__s.__data_[7])
  {
    goto LABEL_27;
  }
  uint64_t v37 = (void **)ImsPrefs::getSRTPCryptoSuiteKey(v35);
  std::string v38 = (ImsPrefs *)ImsPrefs::stringValue(a4, v37);
  SRTPUnencryptedSRTPKey = (void **)ImsPrefs::getSRTPUnencryptedSRTPKey(v38);
  uint64_t v40 = (ImsPrefs *)ImsPrefs::BOOLValue(a4, SRTPUnencryptedSRTPKey);
  char v41 = (char)v40;
  SRTPUnencryptedSRTCPKey = (void **)ImsPrefs::getSRTPUnencryptedSRTCPKey(v40);
  uint64_t v43 = (ImsPrefs *)ImsPrefs::BOOLValue(a4, SRTPUnencryptedSRTCPKey);
  char v44 = (char)v43;
  SRTPUnauthenticatedSRTPKey = (void **)ImsPrefs::getSRTPUnauthenticatedSRTPKey(v43);
  long long v46 = (ImsPrefs *)ImsPrefs::BOOLValue(a4, SRTPUnauthenticatedSRTPKey);
  char v47 = (char)v46;
  SRTPEndToAccessEdgeProtectionKey = (void **)ImsPrefs::getSRTPEndToAccessEdgeProtectionKey(v46);
  int v49 = ImsPrefs::BOOLValue(a4, SRTPEndToAccessEdgeProtectionKey);
  char v50 = SDPMedia::enableEncryption(a5, (uint64_t)&v53, v41, v44, v47, v49);
  char v51 = v50;
  if (v54 < 0)
  {
    operator delete(v53);
    if (v51) {
      goto LABEL_27;
    }
  }
  else if (v50)
  {
    goto LABEL_27;
  }
  std::string::basic_string[abi:ne180100]<0>(&v67, "sdp.templatebuilder");
  std::string::basic_string[abi:ne180100]<0>(v56, "");
  uint64_t v52 = ims::error((uint64_t)&v67, (uint64_t)v56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v52 + 8), (uint64_t)"Failed to add encryption to the text session", 44);
  *(unsigned char *)(v52 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v52 + 17) = 0;
  if (SHIBYTE(v57) < 0) {
    operator delete(v56[0]);
  }
  if (v69.__r_.__value_.__s.__data_[7] < 0) {
    operator delete(v67);
  }
LABEL_27:
  v76[0] = &unk_1F20DB438;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v83);
  SDPMediaRTPMap::~SDPMediaRTPMap(&v77);
}

void sub_1C5327DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  SDPMediaFormatInfo::~SDPMediaFormatInfo((SDPMediaFormatInfo *)&a60);
  SDPMedia::~SDPMedia(v60);
  _Unwind_Resume(a1);
}

uint64_t SDPTemplateBuilder::addBandwidthSpecifiers(uint64_t a1, void *a2, unsigned __int8 a3, int a4, int a5, ImsPrefs *a6)
{
  uint64_t v10 = (uint64_t *)(a1 + 112);
  uint64_t v11 = a1 + 40;
  uint64_t v12 = *(void *)(a1 + 48);
  if (v12 == a1 + 40)
  {
    unint64_t v14 = 0;
  }
  else
  {
    unint64_t v14 = 0;
    do
    {
      unint64_t v15 = SDPMediaFormatInfo::bandwidthAS((SDPMediaFormatInfo *)(v12 + 16), a3);
      if (v15 > v14) {
        unint64_t v14 = v15;
      }
      uint64_t v12 = *(void *)(v12 + 8);
    }
    while (v12 != v11);
  }
  std::__list_imp<SDPRepeatTime>::clear(v10);
  RTCPIntervalSecondsKey = (void **)ImsPrefs::getRTCPIntervalSecondsKey(v16);
  unint64_t v18 = (ImsPrefs *)ImsPrefs::intValue(a6, RTCPIntervalSecondsKey);
  BOOL v43 = (int)v18 < 1;
  SuppressBSUntilPreconditionsMetKey = (void **)ImsPrefs::getSuppressBSUntilPreconditionsMetKey(v18);
  int v42 = (ImsPrefs::BOOLValue(a6, SuppressBSUntilPreconditionsMetKey) | a5) ^ 1;
  *(_DWORD *)char v44 = 2;
  v44[4] = v14 != 0;
  *(void *)&v44[12] = v14;
  *(_DWORD *)&v44[20] = 1;
  *(_WORD *)&v44[24] = 5;
  unint64_t v20 = (char *)operator new(0x38uLL);
  v20[24] = 1;
  *((void *)v20 + 1) = v10;
  *((void *)v20 + 2) = &unk_1F20BAA28;
  *(_OWORD *)(v20 + 28) = *(_OWORD *)v44;
  *(_OWORD *)(v20 + 38) = *(_OWORD *)&v44[10];
  uint64_t v21 = *(void *)(a1 + 112);
  *(void *)unint64_t v20 = v21;
  *(void *)(v21 + 8) = v20;
  *(void *)(a1 + 112) = v20;
  uint64_t v22 = *(void *)(a1 + 128) + 1;
  *(void *)(a1 + 128) = v22;
  if (a4)
  {
    int v40 = a4;
    int v23 = *(_DWORD *)(a1 + 12);
    if (v23 == 4)
    {
      RTTBandwidthSpecifierRTCPPercentageKey = (void **)ImsPrefs::getRTTBandwidthSpecifierRTCPPercentageKey((ImsPrefs *)v20);
      __int16 v25 = ImsPrefs::intValue(a6, RTTBandwidthSpecifierRTCPPercentageKey);
      long long v26 = *(char **)(a1 + 112);
      uint64_t v22 = *(void *)(a1 + 128);
      int v23 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      long long v26 = v20;
      __int16 v25 = 5;
    }
    *(_DWORD *)char v44 = 3;
    v44[4] = v42;
    *(void *)&v44[12] = v14;
    *(_DWORD *)&v44[20] = v43;
    *(_WORD *)&v44[24] = v25;
    int v27 = (char *)operator new(0x38uLL);
    v27[24] = 1;
    *((void *)v27 + 1) = v10;
    *((void *)v27 + 2) = &unk_1F20BAA28;
    *(_OWORD *)(v27 + 28) = *(_OWORD *)v44;
    *(_OWORD *)(v27 + 38) = *(_OWORD *)&v44[10];
    *(void *)int v27 = v26;
    *((void *)v26 + 1) = v27;
    *(void *)(a1 + 112) = v27;
    uint64_t v28 = v22 + 1;
    *(void *)(a1 + 128) = v22 + 1;
    if (v23 == 4)
    {
      uint64_t v29 = (void **)ImsPrefs::getRTTBandwidthSpecifierRTCPPercentageKey((ImsPrefs *)v27);
      __int16 v30 = ImsPrefs::intValue(a6, v29);
      long long v31 = *(char **)(a1 + 112);
      uint64_t v28 = *(void *)(a1 + 128);
    }
    else
    {
      long long v31 = v27;
      __int16 v30 = 5;
    }
    a4 = v40;
    *(_DWORD *)char v44 = 4;
    v44[4] = v42;
    *(void *)&v44[12] = v14;
    *(_DWORD *)&v44[20] = v43;
    *(_WORD *)&v44[24] = v30;
    unint64_t v20 = (char *)operator new(0x38uLL);
    v20[24] = 1;
    *((void *)v20 + 1) = v10;
    *((void *)v20 + 2) = &unk_1F20BAA28;
    *(_OWORD *)(v20 + 28) = *(_OWORD *)v44;
    *(_OWORD *)(v20 + 38) = *(_OWORD *)&v44[10];
    *(void *)unint64_t v20 = v31;
    *((void *)v31 + 1) = v20;
    *(void *)(a1 + 112) = v20;
    *(void *)(a1 + 128) = v28 + 1;
  }
  AddBWSpecsAtSessionLevelKey = (void **)ImsPrefs::getAddBWSpecsAtSessionLevelKey((ImsPrefs *)v20);
  uint64_t result = ImsPrefs::BOOLValue(a6, AddBWSpecsAtSessionLevelKey);
  if (result && *(_DWORD *)(a1 + 12) == 2)
  {
    uint64_t v34 = *a2;
    uint64_t v35 = (uint64_t *)(*a2 + 296);
    std::__list_imp<SDPRepeatTime>::clear(v35);
    uint64_t result = (uint64_t)operator new(0x38uLL);
    *(unsigned char *)(result + 24) = 1;
    *(_DWORD *)(result + 28) = 2;
    *(unsigned char *)(result + 32) = v14 != 0;
    *(_DWORD *)(result + 33) = &unk_1F20BAA28;
    *(_DWORD *)(result + 36) = (unint64_t)&unk_1F20BAA28 >> 24;
    *(void *)(result + 40) = v14;
    *(_DWORD *)(result + 48) = 1;
    *(_WORD *)(result + 52) = 5;
    *(void *)(result + 8) = v35;
    *(void *)(result + 16) = &unk_1F20BAA28;
    uint64_t v36 = *(void *)(v34 + 296);
    *(void *)uint64_t result = v36;
    *(void *)(v36 + 8) = result;
    *(void *)(v34 + 296) = result;
    uint64_t v37 = *(void *)(v34 + 312);
    *(void *)(v34 + 312) = v37 + 1;
    if (a4)
    {
      uint64_t v38 = result;
      char v39 = (char *)operator new(0x38uLL);
      v39[24] = 1;
      *((void *)v39 + 1) = v35;
      *((void *)v39 + 2) = &unk_1F20BAA28;
      *((_DWORD *)v39 + 7) = 3;
      v39[32] = v42;
      *(_DWORD *)(v39 + 33) = &unk_1F20BAA28;
      *((_DWORD *)v39 + 9) = (unint64_t)&unk_1F20BAA28 >> 24;
      *((void *)v39 + 5) = v14;
      *((_DWORD *)v39 + 12) = v43;
      *((_WORD *)v39 + 26) = 5;
      *(void *)char v39 = v38;
      *(void *)(v38 + 8) = v39;
      *(void *)(v34 + 296) = v39;
      *(void *)(v34 + 312) = v37 + 2;
      uint64_t result = (uint64_t)operator new(0x38uLL);
      *(unsigned char *)(result + 24) = 1;
      *(void *)(result + 8) = v35;
      *(void *)(result + 16) = &unk_1F20BAA28;
      *(_DWORD *)(result + 28) = 4;
      *(unsigned char *)(result + 32) = v42;
      *(_DWORD *)(result + 33) = &unk_1F20BAA28;
      *(_DWORD *)(result + 36) = (unint64_t)&unk_1F20BAA28 >> 24;
      *(void *)(result + 40) = v14;
      *(_DWORD *)(result + 48) = v43;
      *(_WORD *)(result + 52) = 5;
      *(void *)uint64_t result = v39;
      *((void *)v39 + 1) = result;
      *(void *)(v34 + 296) = result;
      *(void *)(v34 + 312) = v37 + 3;
    }
  }
  return result;
}

void SDPTemplateBuilder::createInitialSettings(uint64_t a1@<X0>, const std::string *a2@<X1>, int a3@<W2>, ImsPrefs *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(*(void *)a1 + 416);
  uint64_t v6 = *(void *)(*(void *)a1 + 424);
  if (v7 == v6)
  {
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v34, "sdp.templatebuilder");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v14 = ims::error((uint64_t)v34, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"SDPTemplateBuilder::createInitialSettings Audio is null", 55);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (SBYTE7(v35) < 0) {
      operator delete(v34[0]);
    }
LABEL_13:
    *(unsigned char *)a5 = 0;
    *(unsigned char *)(a5 + 432) = 0;
    return;
  }
  uint64_t v12 = v7 + 40;
  while (*(_DWORD *)(v12 - 28) != 2)
  {
    uint64_t v13 = v12 + 160;
    v12 += 200;
    if (v13 == v6) {
      goto LABEL_5;
    }
  }
  uint64_t v15 = *(void *)(v12 + 8);
  if (v12 == v15) {
    goto LABEL_13;
  }
  *(void *)(a5 + 432) = 0;
  *(_OWORD *)(a5 + 400) = 0u;
  *(_OWORD *)(a5 + 416) = 0u;
  *(_OWORD *)(a5 + 368) = 0u;
  *(_OWORD *)(a5 + 384) = 0u;
  *(_OWORD *)(a5 + 336) = 0u;
  *(_OWORD *)(a5 + 352) = 0u;
  *(_OWORD *)(a5 + 304) = 0u;
  *(_OWORD *)(a5 + 320) = 0u;
  *(_OWORD *)(a5 + 272) = 0u;
  *(_OWORD *)(a5 + 288) = 0u;
  *(_OWORD *)(a5 + 240) = 0u;
  *(_OWORD *)(a5 + 256) = 0u;
  *(_OWORD *)(a5 + 208) = 0u;
  *(_OWORD *)(a5 + 224) = 0u;
  *(_OWORD *)(a5 + 176) = 0u;
  *(_OWORD *)(a5 + 192) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  *(_OWORD *)uint64_t v34 = 0u;
  SDPMediaAudioSettings::SDPMediaAudioSettings((SDPMediaAudioSettings *)v34);
  SDPMediaAudioSettings::SDPMediaAudioSettings((SDPMediaAudioSettings *)a5, (const SDPMediaAudioSettings *)v34);
  *(unsigned char *)(a5 + 432) = 1;
  SDPMediaAudioSettings::~SDPMediaAudioSettings(v34);
  if ((*(unsigned int (**)(uint64_t))(*(void *)(v15 + 32) + 24))(v15 + 32))
  {
    if (*(char *)(v15 + 103) < 0) {
      std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v15 + 80), *(void *)(v15 + 88));
    }
    else {
      std::string v30 = *(std::string *)(v15 + 80);
    }
  }
  else
  {
    if (*(_WORD *)(v15 + 24) == 8) {
      __int16 v16 = "PCMA";
    }
    else {
      __int16 v16 = "PCMU";
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, v16);
  }
  std::string::operator=((std::string *)(a5 + 280), &v30);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  std::string::operator=((std::string *)(a5 + 72), a2);
  *(_WORD *)(a5 + 28) = *(_WORD *)(v15 + 24);
  unint64_t v17 = (ImsPrefs *)(*(uint64_t (**)(uint64_t))(*(void *)(v15 + 32) + 24))(v15 + 32);
  if (!v17 || (int v18 = *(unsigned __int16 *)(v15 + 104), !*(_WORD *)(v15 + 104)))
  {
    *(_WORD *)(a5 + 308) = 8000;
    goto LABEL_27;
  }
  *(_WORD *)(a5 + 308) = v18;
  if (v18 != 16000)
  {
LABEL_27:
    PayloadTypeDTMF8KKey = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v17);
    int v20 = 0;
    goto LABEL_28;
  }
  PayloadTypeDTMF8KKey = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v17);
  int v20 = 1;
LABEL_28:
  uint64_t v21 = (ImsPrefs *)ImsPrefs::intValue(a4, PayloadTypeDTMF8KKey);
  *(_WORD *)(a5 + 304) = (_WORD)v21;
  if (v20) {
    PayloadTypeDTMF16KKey = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v21);
  }
  else {
    PayloadTypeDTMF16KKey = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v21);
  }
  int v23 = (ImsPrefs *)ImsPrefs::intValue(a4, PayloadTypeDTMF16KKey);
  *(_WORD *)(a5 + 306) = (_WORD)v23;
  MaxPacketizationTimeKey = (void **)ImsPrefs::getMaxPacketizationTimeKey(v23);
  *(_WORD *)(a5 + 314) = ImsPrefs::intValue(a4, MaxPacketizationTimeKey);
  *(void *)(a5 + 96) = *(void *)(*(void *)a1 + 144);
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  *(_OWORD *)uint64_t v34 = 0u;
  long long v35 = 0u;
  __int16 v25 = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v34, (unsigned int *)(v15 + 112));
  if (DWORD2(v41) == 2)
  {
    SDPMediaEVSSettings::SDPMediaEVSSettings((SDPMediaEVSSettings *)__p, (const SDPMediaFormatEVSParams *)v34, (const SDPMediaFormatEVSParams *)v34, a3, a4);
    *(_WORD *)(a5 + 424) = v33;
    long long v27 = v32;
    *(_OWORD *)(a5 + 392) = *(_OWORD *)&__p[32];
    *(_OWORD *)(a5 + 408) = v27;
    long long v28 = *(_OWORD *)&__p[16];
    *(_OWORD *)(a5 + 360) = *(_OWORD *)__p;
    *(_OWORD *)(a5 + 376) = v28;
  }
  else if (DWORD2(v41) == 1)
  {
    if (v20) {
      PreferredAMRWBModeKey = (void **)ImsPrefs::getPreferredAMRWBModeKey((ImsPrefs *)v25);
    }
    else {
      PreferredAMRWBModeKey = (void **)ImsPrefs::getPreferredAMRNBModeKey((ImsPrefs *)v25);
    }
    __int16 v29 = ImsPrefs::intValue(a4, PreferredAMRWBModeKey);
    SDPMediaAMRSettings::SDPMediaAMRSettings((SDPMediaAMRSettings *)__p, (const SDPMediaFormatAMRParams *)v34, (const SDPMediaFormatAMRParams *)v34, v20, a3, v29);
    *(_OWORD *)(a5 + 328) = *(_OWORD *)&__p[8];
    *(_OWORD *)(a5 + 344) = *(_OWORD *)&__p[24];
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v34);
}

void sub_1C5328800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&a27);
  if (*(unsigned char *)(v32 + 432)) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)v32);
  }
  _Unwind_Resume(a1);
}

uint64_t SDPTemplateBuilder::createInitialTTYSettings@<X0>(SDPTemplateBuilder *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  uint64_t v5 = a2 + 8;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_DWORD *)(a2 + 28) = 16711935;
  *(_OWORD *)(a2 + 48) = 0u;
  *(void *)(a2 + 36) = 0x100000001;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 89) = 0u;
  *(void *)a2 = &unk_1F20B97F8;
  *(void *)(a2 + 280) = 0x2800000028;
  *(_DWORD *)(a2 + 288) = 16711935;
  *(unsigned char *)(a2 + 292) = 1;
  RTTBandwidthSpecifierASValueKey = (void **)ImsPrefs::getRTTBandwidthSpecifierASValueKey(this);
  uint64_t v7 = (ImsPrefs *)ImsPrefs::intValue(this, RTTBandwidthSpecifierASValueKey);
  *(void *)(a2 + 48) = (int)v7;
  BandwidthSpecifierRRValueKey = (void **)ImsPrefs::getBandwidthSpecifierRRValueKey(v7);
  uint64_t v9 = (ImsPrefs *)ImsPrefs::intValue(this, BandwidthSpecifierRRValueKey);
  *(void *)(a2 + 56) = (int)v9;
  *(unsigned char *)(a2 + 32) = 1;
  BandwidthSpecifierRSValueKey = (void **)ImsPrefs::getBandwidthSpecifierRSValueKey(v9);
  uint64_t v11 = (ImsPrefs *)ImsPrefs::intValue(this, BandwidthSpecifierRSValueKey);
  *(void *)(a2 + 64) = (int)v11;
  *(unsigned char *)(a2 + 33) = 1;
  PayloadTypeTTYKey = (void **)ImsPrefs::getPayloadTypeTTYKey(v11);
  uint64_t v13 = (ImsPrefs *)ImsPrefs::intValue(this, PayloadTypeTTYKey);
  *(_WORD *)(a2 + 28) = (_WORD)v13;
  PayloadTypeTTYRedundancyKey = (void **)ImsPrefs::getPayloadTypeTTYRedundancyKey(v13);
  uint64_t result = ImsPrefs::intValue(this, PayloadTypeTTYRedundancyKey);
  *(_WORD *)(a2 + 288) = result;
  return result;
}

void sub_1C53289DC(_Unwind_Exception *a1)
{
  SDPMediaSettings::~SDPMediaSettings(v1);
  _Unwind_Resume(a1);
}

void SDPTemplateBuilder::createInitialSecondAudioSettings(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, ImsPrefs *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  *(void *)(a5 + 432) = 0;
  *(_OWORD *)(a5 + 400) = 0u;
  *(_OWORD *)(a5 + 416) = 0u;
  *(_OWORD *)(a5 + 368) = 0u;
  *(_OWORD *)(a5 + 384) = 0u;
  *(_OWORD *)(a5 + 336) = 0u;
  *(_OWORD *)(a5 + 352) = 0u;
  *(_OWORD *)(a5 + 304) = 0u;
  *(_OWORD *)(a5 + 320) = 0u;
  *(_OWORD *)(a5 + 272) = 0u;
  *(_OWORD *)(a5 + 288) = 0u;
  *(_OWORD *)(a5 + 240) = 0u;
  *(_OWORD *)(a5 + 256) = 0u;
  *(_OWORD *)(a5 + 208) = 0u;
  *(_OWORD *)(a5 + 224) = 0u;
  *(_OWORD *)(a5 + 176) = 0u;
  *(_OWORD *)(a5 + 192) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  uint64_t v7 = *(void *)(*(void *)a1 + 416);
  uint64_t v6 = *(void *)(*(void *)a1 + 424);
  if (v7 == v6) {
    return;
  }
  for (uint64_t i = v7 + 40; *(_DWORD *)(i - 28) != 2; i += 200)
  {
    uint64_t v10 = i + 160;
    if (v10 == v6) {
      return;
    }
  }
  uint64_t v11 = *(void *)(i + 8);
  if (i == v11) {
    return;
  }
  while (1)
  {
    *(_OWORD *)std::string __s = 0u;
    long long v31 = 0u;
    memset(v29, 0, sizeof(v29));
    SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)v29, (const SDPMediaRTPMap *)(v11 + 32));
    if (SBYTE7(v31) < 0) {
      break;
    }
    if (BYTE7(v31))
    {
      *(_OWORD *)long long v35 = *(_OWORD *)__s;
      *(void *)&v35[16] = v31;
      goto LABEL_12;
    }
LABEL_26:
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)v29);
    uint64_t v11 = *(void *)(v11 + 8);
    if (i == v11) {
      return;
    }
  }
  if (!__s[1]) {
    goto LABEL_26;
  }
  std::string::__init_copy_ctor_external((std::string *)v35, __s[0], (std::string::size_type)__s[1]);
LABEL_12:
  uint64_t v12 = v35[23];
  if (v35[23] < 0) {
    uint64_t v12 = *(void *)&v35[8];
  }
  if (v12 != 15) {
    goto LABEL_21;
  }
  uint64_t v13 = *(uint64_t **)v35;
  if (v35[23] >= 0) {
    uint64_t v13 = (uint64_t *)v35;
  }
  uint64_t v14 = *v13;
  uint64_t v15 = *(uint64_t *)((char *)v13 + 7);
  if (v14 == 0x6E6F6870656C6574 && v15 == 0x746E6576652D656ELL)
  {
    BOOL v18 = 0;
    if ((v35[23] & 0x80000000) != 0) {
      goto LABEL_24;
    }
  }
  else
  {
LABEL_21:
    int v17 = WORD4(v31);
    if (!WORD4(v31)) {
      int v17 = 8000;
    }
    BOOL v18 = v17 == a2;
    if ((v35[23] & 0x80000000) != 0) {
LABEL_24:
    }
      operator delete(*(void **)v35);
  }
  if (!v18) {
    goto LABEL_26;
  }
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  memset(v35, 0, sizeof(v35));
  SDPMediaAudioSettings::SDPMediaAudioSettings((SDPMediaAudioSettings *)v35);
  if (*(unsigned char *)(a5 + 432))
  {
    SDPMediaAudioSettings::operator=(a5, (uint64_t)v35);
    __int16 v19 = a4;
  }
  else
  {
    SDPMediaAudioSettings::SDPMediaAudioSettings((SDPMediaAudioSettings *)a5, (const SDPMediaAudioSettings *)v35);
    __int16 v19 = a4;
    *(unsigned char *)(a5 + 432) = 1;
  }
  SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)v35);
  *(_WORD *)(a5 + 28) = *(_WORD *)(v11 + 24);
  *(_WORD *)(a5 + 308) = a2;
  if (a2 == 16000) {
    PayloadTypeDTMF16KKey = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v20);
  }
  else {
    PayloadTypeDTMF16KKey = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v20);
  }
  uint64_t v22 = (ImsPrefs *)ImsPrefs::intValue(v19, PayloadTypeDTMF16KKey);
  *(_WORD *)(a5 + 304) = (_WORD)v22;
  if (a2 == 16000) {
    PayloadTypeDTMF8KKey = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v22);
  }
  else {
    PayloadTypeDTMF8KKey = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v22);
  }
  *(_WORD *)(a5 + 306) = ImsPrefs::intValue(v19, PayloadTypeDTMF8KKey);
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  memset(v35, 0, sizeof(v35));
  __int16 v24 = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v35, (unsigned int *)(v11 + 112));
  if (DWORD2(v41) == 1)
  {
    if (a2 == 16000) {
      PreferredAMRWBModeKey = (void **)ImsPrefs::getPreferredAMRWBModeKey((ImsPrefs *)v24);
    }
    else {
      PreferredAMRWBModeKey = (void **)ImsPrefs::getPreferredAMRNBModeKey((ImsPrefs *)v24);
    }
    __int16 v26 = ImsPrefs::intValue(v19, PreferredAMRWBModeKey);
    SDPMediaAMRSettings::SDPMediaAMRSettings((SDPMediaAMRSettings *)v32, (const SDPMediaFormatAMRParams *)v35, (const SDPMediaFormatAMRParams *)v35, a2 == 16000, a3, v26);
    *(_OWORD *)(a5 + 328) = v33;
    *(_OWORD *)(a5 + 344) = v34;
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v35);
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)v29);
}

void sub_1C5328D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)va);
  if (*(unsigned char *)(v3 + 432)) {
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)v3);
  }
  _Unwind_Resume(a1);
}

void extractRTPMapInfo(const ImsDictPref *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "SampleRate");
    uint64_t v6 = (*(uint64_t (**)(const ImsDictPref *, void **))(*(void *)a1 + 88))(a1, __p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (v6) {
      *a2 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 56))(v6);
    }
  }
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Channel");
    uint64_t v7 = (*(uint64_t (**)(const ImsDictPref *, void **))(*(void *)a1 + 88))(a1, __p);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    if (v7) {
      *a3 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
    }
  }
}

void sub_1C5328F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SDPTemplateBuilder::generateGenericAMRSDPMedia(__int16 a1, uint64_t a2, ImsDictPref *a3, uint64_t a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  unsigned __int16 v40 = 8000;
  unsigned __int16 v39 = 1;
  extractRTPMapInfo(a3, &v40, &v39);
  int v8 = a1 & 0xFFE0;
  if (v8 == 96)
  {
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    long long v33 = 0;
    long long v34 = 0;
    uint64_t v35 = 0;
    ImsDictPref::keysAndValues((uint64_t)a3, &v36, (char **)&v33);
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    *(_OWORD *)std::string v30 = 0u;
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    if (v9 == 6)
    {
      if (v10 >= 0) {
        uint64_t v11 = (const std::string::value_type *)a2;
      }
      else {
        uint64_t v11 = *(const std::string::value_type **)a2;
      }
      int v12 = *(_DWORD *)v11;
      int v13 = *((unsigned __int16 *)v11 + 2);
      BOOL v15 = v12 == 760368449 && v13 == 16983;
    }
    else
    {
      BOOL v15 = 0;
    }
    SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)&v29, a1, v15);
    uint64_t v16 = v36;
    if (v37 != v36)
    {
      uint64_t v17 = 0;
      unint64_t v18 = 0;
      do
      {
        if (std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&SDPParser::amrFormatParameters, (void **)(v16 + v17)) != (void **)&qword_1EBBDB420)
        {
          v25[0] = (void *)(v36 + v17);
          __int16 v19 = (uint64_t (*)(long long *, void **))std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&SDPParser::amrFormatParameters, (void **)(v36 + v17), (uint64_t)&std::piecewise_construct, (long long **)v25)[7];
          (*(void (**)(void **__return_ptr))(**((void **)v33 + v18) + 48))(__p);
          char v20 = v19(&v29, __p);
          char v21 = v20;
          if (v28 < 0)
          {
            operator delete(__p[0]);
            if ((v21 & 1) == 0)
            {
LABEL_22:
              std::string::basic_string[abi:ne180100]<0>(&v41, "sdp.templatebuilder");
              std::string::basic_string[abi:ne180100]<0>(v25, "");
              uint64_t v22 = ims::error((uint64_t)&v41, (uint64_t)v25);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Unable to parse ", 16);
              *(unsigned char *)(v22 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 32))(v22, v36 + v17);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" format parameter for ", 22);
              *(unsigned char *)(v22 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 32))(v22, a2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" codec", 6);
              *(unsigned char *)(v22 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v22 + 17) = 0;
              if (v26 < 0) {
                operator delete(v25[0]);
              }
              if (v43.__r_.__value_.__s.__data_[7] < 0) {
                operator delete(v41);
              }
            }
          }
          else if ((v20 & 1) == 0)
          {
            goto LABEL_22;
          }
        }
        ++v18;
        uint64_t v16 = v36;
        v17 += 24;
      }
      while (v18 < 0xAAAAAAAAAAAAAAABLL * ((v37 - v36) >> 3));
    }
    SDPMediaFormatInfo::setPayloadType((SDPMediaFormatInfo *)a4, a1);
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string v24 = *(std::string *)a2;
    }
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v41, a1, (long long *)&v24, v40, v39);
    *(unsigned char *)(a4 + 24) = v42;
    std::string::operator=((std::string *)(a4 + 32), &v43);
    *(_WORD *)(a4 + 56) = v44;
    std::string::operator=((std::string *)(a4 + 64), &v45);
    *(_DWORD *)(a4 + 88) = v46;
    SDPMediaRTPMap::~SDPMediaRTPMap(&v41);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)&v41, (const SDPMediaFormatAMRParams *)&v29);
    int v47 = 1;
    SDPMediaFormatInfo::setSDPMediaFormatParams(a4, (uint64_t)&v41);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v41);
    *(void *)&long long v29 = &unk_1F20E5C78;
    if (SBYTE7(v31) < 0) {
      operator delete(v30[0]);
    }
    if (v33)
    {
      long long v34 = v33;
      operator delete(v33);
    }
    long long v41 = &v36;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
    int v8 = 96;
  }
  return v8 == 96;
}

void sub_1C5329398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a42) {
    operator delete(a42);
  }
  a49 = &a45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SDPMedia>::__emplace_back_slow_path<SDPMedia>(uint64_t *a1, const SDPMedia *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x147AE147AE147AELL) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8F5C28F5C28F5C29 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xA3D70A3D70A3D7) {
    unint64_t v9 = 0x147AE147AE147AELL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPMedia>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  int v13 = v10;
  uint64_t v14 = (SDPMedia *)&v10[200 * v4];
  uint64_t v16 = &v10[200 * v9];
  SDPMedia::SDPMedia(v14, a2);
  BOOL v15 = (char *)v14 + 200;
  std::vector<SDPMedia>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<SDPMedia>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1C53295A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SDPMedia>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SDPMediaFormatInfo>::__push_back_slow_path<SDPMediaFormatInfo const&>(void *a1, uint64_t a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 5);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x124924924924924) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 5) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 5);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - *a1) >> 5)) >= 0x92492492492492) {
    unint64_t v6 = 0x124924924924924;
  }
  else {
    unint64_t v6 = v3;
  }
  unint64_t v18 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x124924924924924) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(224 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v16 = v7;
  *(void *)uint64_t v17 = &v7[224 * v2];
  *(void *)&v17[16] = &v7[224 * v6];
  SDPMediaFormatInfo::SDPMediaFormatInfo(*(uint64_t *)v17, a2);
  uint64_t v8 = 0;
  *(void *)&v17[8] = *(void *)v17 + 224;
  uint64_t v10 = *a1;
  for (uint64_t i = a1[1]; i + v8 != v10; SDPMediaFormatInfo::SDPMediaFormatInfo(v8 + *(void *)v17, v8 + i))
    v8 -= 224;
  uint64_t v11 = a1[2];
  long long v12 = *(_OWORD *)&v17[8];
  uint64_t v15 = *(void *)&v17[8];
  long long v13 = *(_OWORD *)a1;
  *a1 = *(void *)v17 + v8;
  *(_OWORD *)uint64_t v17 = v13;
  *(_OWORD *)(a1 + 1) = v12;
  *(void *)&v17[16] = v11;
  uint64_t v16 = (char *)v13;
  std::__split_buffer<SDPMediaFormatInfo>::~__split_buffer((uint64_t)&v16);
  return v15;
}

void sub_1C532971C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<SDPMediaFormatInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<SDPMediaFormatInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 224);
    *(void *)(a1 + 16) = i - 224;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<SDPMediaFormatInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      unint64_t v6 = v4 - 224;
      uint64_t v7 = v4 - 224;
      uint64_t v8 = v4 - 224;
      do
      {
        unint64_t v9 = *(void (***)(char *))v8;
        v8 -= 224;
        (*v9)(v7);
        v6 -= 224;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  uint64_t v11 = this;
  long long v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  uint64_t v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        unint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      unint64_t v6 = (long long *)((char *)v6 + 24);
      long long v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1C5329948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaDirection>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v7 = operator new(0x90uLL);
  *long long v7 = a2;
  v7[1] = a3;
  std::__variant_detail::__alt<4ul,SDPMediaDirection>::__alt[abi:ne180100]<SDPMediaDirection>((uint64_t)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 4;
  return v7;
}

void sub_1C53299B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__alt<4ul,SDPMediaDirection>::__alt[abi:ne180100]<SDPMediaDirection>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)a1 = &unk_1F20E5C78;
  unint64_t v4 = (std::string *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 32);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(void *)a1 = &unk_1F20C8300;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t SDPMediaDirection::SDPMediaDirection(uint64_t a1, int a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20E5C78;
  unint64_t v4 = (std::string *)(a1 + 16);
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v7;
  }
  *(void *)a1 = &unk_1F20C8300;
  *(_DWORD *)(a1 + 40) = a2;
  return a1;
}

void sub_1C5329B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaRTPMap::SDPMediaRTPMap(uint64_t a1, __int16 a2, long long *a3, __int16 a4, __int16 a5)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "rtpmap");
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1F20E5C78;
  if (SHIBYTE(v14) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v14;
  }
  *(void *)a1 = &unk_1F20E7518;
  *(_WORD *)(a1 + 40) = a2;
  uint64_t v10 = (std::string *)(a1 + 48);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v11 = *a3;
    *(void *)(a1 + 64) = *((void *)a3 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_WORD *)(a1 + 72) = a4;
  *(_WORD *)(a1 + 74) = a5;
  return a1;
}

void sub_1C5329C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)uint64_t v15 = v17;
  if (*(char *)(v15 + 39) < 0) {
    operator delete(*v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaAudioSettings::operator=(uint64_t a1, uint64_t a2)
{
  SDPMediaSettings::operator=(a1, a2);
  unint64_t v4 = (void **)(a1 + 280);
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*v4);
  }
  long long v5 = *(_OWORD *)(a2 + 280);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(_OWORD *)unint64_t v4 = v5;
  *(unsigned char *)(a2 + 303) = 0;
  *(unsigned char *)(a2 + 280) = 0;
  uint64_t v6 = *(void *)(a2 + 304);
  *(void *)(a1 + 309) = *(void *)(a2 + 309);
  *(void *)(a1 + 304) = v6;
  long long v7 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = v7;
  long long v9 = *(_OWORD *)(a2 + 392);
  long long v8 = *(_OWORD *)(a2 + 408);
  long long v10 = *(_OWORD *)(a2 + 376);
  *(_WORD *)(a1 + 424) = *(_WORD *)(a2 + 424);
  *(_OWORD *)(a1 + 392) = v9;
  *(_OWORD *)(a1 + 408) = v8;
  *(_OWORD *)(a1 + 376) = v10;
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)SDPTemplateBuilder::_mediaGenerators)
  {
    SDPTemplateBuilder::_mediaGenerators = *(void *)SDPTemplateBuilder::_mediaGenerators;
    a3 = *a2;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBBDBAB0, a3);
  ++qword_1EBBDBAB8;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>>>::__find_equal<std::string>(uint64_t **a1, void **a2)
{
  uint64_t v3 = &qword_1EBBDBAB0;
  uint64_t v4 = qword_1EBBDBAB0;
  if (qword_1EBBDBAB0)
  {
    uint64_t v6 = &qword_1EBBDBAB0;
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t *)v4;
        long long v7 = (void *)(v4 + 32);
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)(v4 + 32)) & 0x80) == 0) {
          break;
        }
        uint64_t v4 = *v3;
        uint64_t v6 = v3;
        if (!*v3) {
          goto LABEL_10;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2) & 0x80) == 0) {
        break;
      }
      uint64_t v6 = v3 + 1;
      uint64_t v4 = v3[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v6 = &qword_1EBBDBAB0;
  }
LABEL_10:
  *a1 = v3;
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, long long **a3)
{
  uint64_t v14 = 0;
  long long v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    long long v7 = v5;
    long long v8 = *a3;
    uint64_t v13 = 0;
    uint64_t v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    long long v9 = (std::string *)(v6 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v10 = *v8;
      v6[6] = *((void *)v8 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    LOBYTE(v13) = 1;
    std::__tree<unsigned int>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1C5329FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<SDPMediaFormatInfo>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<SDPMediaFormatInfo>>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<SDPMediaFormatInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v7 = operator new(0xF0uLL);
  *long long v7 = a2;
  v7[1] = a3;
  SDPMediaFormatInfo::SDPMediaFormatInfo((uint64_t)(v7 + 2), a4);
  return v7;
}

void sub_1C532A0E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::destroy(a1[1]);
    a1[5] = &unk_1F20DB438;
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)a1 + 34);
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)a1 + 7);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<SDPMediaFormatInfo>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void *std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::__emplace_unique_key_args<EVSConfigName,std::piecewise_construct_t const&,std::tuple<EVSConfigName&&>,std::tuple<>>(uint64_t **a1, __int16 a2, _WORD *a3)
{
  uint64_t v6 = a1 + 1;
  long long v5 = (__int16 *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        long long v7 = v5;
        int v8 = v5[16];
        if (v8 <= a2) {
          break;
        }
        long long v5 = (__int16 *)*v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      long long v5 = (__int16 *)v7[1];
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    long long v7 = a1 + 1;
LABEL_9:
    long long v9 = v7;
    long long v7 = operator new(0x108uLL);
    *((_WORD *)v7 + 16) = *a3;
    *((_OWORD *)v7 + 3) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 6) = 0u;
    *((_OWORD *)v7 + 7) = 0u;
    *((_OWORD *)v7 + 8) = 0u;
    *((_OWORD *)v7 + 9) = 0u;
    *((_OWORD *)v7 + 10) = 0u;
    *((_OWORD *)v7 + 11) = 0u;
    *((_OWORD *)v7 + 12) = 0u;
    *((_OWORD *)v7 + 13) = 0u;
    *((_OWORD *)v7 + 14) = 0u;
    *((_OWORD *)v7 + 15) = 0u;
    v7[32] = 0;
    v7[5] = &unk_1F20DB438;
    *((_WORD *)v7 + 24) = 255;
    *((unsigned char *)v7 + 64) = 1;
    v7[9] = 0;
    v7[10] = 0;
    v7[11] = 0;
    v7[7] = &unk_1F20E7518;
    *((_WORD *)v7 + 48) = 255;
    v7[13] = 0;
    v7[14] = 0;
    v7[15] = 0;
    *((_DWORD *)v7 + 32) = 0x10000;
    *((_OWORD *)v7 + 9) = 0u;
    *((_OWORD *)v7 + 10) = 0u;
    *((unsigned char *)v7 + 144) = 1;
    v7[21] = 0;
    v7[22] = 0;
    v7[19] = 0;
    v7[20] = 0;
    *((_WORD *)v7 + 88) = 255;
    v7[17] = &unk_1F20B3A68;
    v7[23] = 0;
    v7[24] = 0;
    v7[25] = 0;
    *long long v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    uint64_t *v6 = v7;
    long long v10 = v7;
    long long v11 = (uint64_t *)**a1;
    if (v11)
    {
      *a1 = v11;
      long long v10 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, _OWORD **a3)
{
  uint64_t v12 = 0;
  long long v5 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    _OWORD v11[2] = 1;
    uint64_t v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    int v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    void v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((void *)v6 + 8) = 0;
    *((void *)v6 + 9) = 0;
    *((void *)v6 + 7) = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

uint64_t _GLOBAL__sub_I_SDPTemplateBuilder_cpp()
{
  v18[4] = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(v13, "EVS");
  v13[3] = SDPTemplateBuilder::generateEVSSDPMedia;
  std::string::basic_string[abi:ne180100]<0>(v14, "AMR-WB");
  double v14[3] = SDPTemplateBuilder::generateAMRWBSDPMedia;
  std::string::basic_string[abi:ne180100]<0>(v15, "AMR");
  v15[3] = SDPTemplateBuilder::generateAMRNBSDPMedia;
  std::string::basic_string[abi:ne180100]<0>(v16, "PCMU");
  void v16[3] = SDPTemplateBuilder::generatePCMUSDPMedia;
  std::string::basic_string[abi:ne180100]<0>(v17, "PCMA");
  v17[3] = SDPTemplateBuilder::generatePCMASDPMedia;
  std::string::basic_string[abi:ne180100]<0>(v18, "telephone-event");
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  v18[3] = SDPTemplateBuilder::generateDTMFSDPMedia;
  qword_1EBBDBAB0 = 0;
  uint64_t v2 = &qword_1EBBDBAB0;
  qword_1EBBDBAB8 = 0;
  SDPTemplateBuilder::_mediaGenerators = (uint64_t)&qword_1EBBDBAB0;
  while (1)
  {
    uint64_t v3 = (const std::string::value_type **)&v13[4 * v1];
    uint64_t v12 = 0;
    if (v2 == &qword_1EBBDBAB0)
    {
      uint64_t v4 = &qword_1EBBDBAB0;
      if (v0) {
        goto LABEL_7;
      }
    }
    else
    {
      if (v0)
      {
        do
        {
          uint64_t v4 = (uint64_t *)v0;
          uint64_t v0 = *(void *)(v0 + 8);
        }
        while (v0);
      }
      else
      {
        uint64_t v6 = &qword_1EBBDBAB0;
        do
        {
          uint64_t v4 = (uint64_t *)v6[2];
          BOOL v7 = *v4 == (void)v6;
          uint64_t v6 = v4;
        }
        while (v7);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4 + 4, (void **)&v13[4 * v1]) & 0x80) == 0)
      {
        long long v5 = std::__tree<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>>>::__find_equal<std::string>(&v12, (void **)&v13[4 * v1]);
LABEL_12:
        if (*v5) {
          goto LABEL_20;
        }
        goto LABEL_16;
      }
      if (qword_1EBBDBAB0)
      {
LABEL_7:
        uint64_t v12 = v4;
        long long v5 = v4 + 1;
        goto LABEL_12;
      }
    }
    uint64_t v12 = &qword_1EBBDBAB0;
    long long v5 = &qword_1EBBDBAB0;
LABEL_16:
    int v8 = (uint64_t *)operator new(0x40uLL);
    uint64_t v9 = (std::string *)(v8 + 4);
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *v3, (std::string::size_type)v3[1]);
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
      v8[6] = (uint64_t)v3[2];
    }
    v8[7] = v13[4 * v1 + 3];
    std::__tree<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>>>::__insert_node_at((uint64_t)v12, (uint64_t **)v5, v8);
LABEL_20:
    if (++v1 == 6) {
      break;
    }
    uint64_t v2 = (uint64_t *)SDPTemplateBuilder::_mediaGenerators;
    uint64_t v0 = qword_1EBBDBAB0;
  }
  for (uint64_t i = 0; i != -24; i -= 4)
  {
    if (SHIBYTE(v18[i + 2]) < 0) {
      operator delete((void *)v18[i]);
    }
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>::~map[abi:ne180100], &SDPTemplateBuilder::_mediaGenerators, &dword_1C51D1000);
}

void sub_1C532A6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  while (1)
  {
    if (*(v10 - 9) < 0) {
      operator delete(*((void **)v10 - 4));
    }
    v10 -= 32;
    if (v10 == &a10) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t BambiConferenceParticipant::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  std::allocate_shared[abi:ne180100]<BambiConferenceParticipant,std::allocator<BambiConferenceParticipant>,std::shared_ptr<BambiCall> &,std::shared_ptr<BambiConferenceCall> &,SipUri const&,void>(a1, a2, a3, a4);
  return (*(uint64_t (**)(void))(*(void *)*a4 + 80))();
}

void sub_1C532A7D0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void BambiConferenceParticipant::~BambiConferenceParticipant(BambiConferenceParticipant *this)
{
  *(void *)this = &unk_1F20C2B28;
  uint64_t v2 = (char *)this + 8;
  *((void *)this + 1) = &unk_1F20C2BB0;
  *((void *)this + 2) = &unk_1F20C2CE8;
  uint64_t v3 = (char *)this + 24;
  *((void *)this + 3) = &unk_1F20C2D18;
  uint64_t v4 = ImsLogContainer::debugStream((BambiConferenceParticipant *)((char *)this + 24));
  (*(void (**)(char *, uint64_t))(*(void *)v3 + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"~BambiConferenceParticipant", 27);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  long long v5 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = *((void *)this + 18);
      if (v7)
      {
        if (*(char **)(v7 + 408) == v2) {
          *(void *)(v7 + 408) = *((void *)this + 26);
        }
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  SipTimerContainer::cancelAllTimers((BambiConferenceParticipant *)((char *)this + 1096));
  int v8 = (SipSession *)*((void *)this + 159);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 160);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v8)
  {
    uint64_t v10 = (*(uint64_t (**)(char *))(*(void *)v3 + 64))(v3);
    (*(void (**)(char *, uint64_t))(*(void *)v3 + 16))(v3, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"silent hangup headless session", 30);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    SipSession::silentHangUp(v8, 8, (uint64_t)v12);
    ImsResult::~ImsResult((ImsResult *)v12);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  SipTypedTerminationLock<SipSession>::~SipTypedTerminationLock((uint64_t)this + 1240);
  SipTimerContainer::~SipTimerContainer((BambiConferenceParticipant *)((char *)this + 1096));
  SipUri::~SipUri((BambiConferenceParticipant *)((char *)this + 672));
  SipUri::~SipUri((BambiConferenceParticipant *)((char *)this + 264));
  long long v11 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  BambiCallParticipant::~BambiCallParticipant(this);
}

{
  uint64_t vars8;

  BambiConferenceParticipant::~BambiConferenceParticipant(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'BambiConferenceParticipant::~BambiConferenceParticipant(BambiConferenceParticipant *this)
{
}

{
  BambiConferenceParticipant::~BambiConferenceParticipant((BambiConferenceParticipant *)((char *)this - 16));
}

{
  BambiConferenceParticipant::~BambiConferenceParticipant((BambiConferenceParticipant *)((char *)this - 24));
}

{
  uint64_t vars8;

  BambiConferenceParticipant::~BambiConferenceParticipant((BambiConferenceParticipant *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiConferenceParticipant::~BambiConferenceParticipant((BambiConferenceParticipant *)((char *)this - 16));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  BambiConferenceParticipant::~BambiConferenceParticipant((BambiConferenceParticipant *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

uint64_t BambiConferenceParticipant::start(std::__shared_weak_count **this)
{
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  ((void (*)(long long *__return_ptr))(*this)[4].__vftable)(&v16);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  v11[0] = &unk_1F20B2680;
  v11[1] = &_bambiDomain;
  int v12 = 1073741826;
  if (*((uint64_t **)&v16 + 1) != &_bambiDomain)
  {
    ImsResult::~ImsResult((ImsResult *)v11);
    goto LABEL_5;
  }
  int v2 = v17;
  ImsResult::~ImsResult((ImsResult *)v11);
  if (v2 != 1073741826)
  {
LABEL_5:
    if ((*(uint64_t (**)(void, void))(**((void **)&v16 + 1) + 24))(*((void *)&v16 + 1), v17))
    {
      uint64_t v4 = 0;
      goto LABEL_16;
    }
    long long v5 = this[19];
    if (v5)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        uint64_t v7 = this[18];
        if (v7)
        {
          if ((v7[18].__shared_weak_owners_ & 0xFFFFFFFE) != 2)
          {
            uint64_t v8 = ((uint64_t (*)(char *))this[3][2].__shared_weak_owners_)((char *)this + 24);
            ((void (*)(char *, uint64_t))this[3]->__shared_weak_owners_)((char *)this + 24, v8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Putting participant ", 20);
            *(unsigned char *)(v8 + 17) = 0;
            ((void (*)(char *, uint64_t))this[33][1].__shared_weak_owners_)((char *)this + 264, v8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" on hold", 8);
            *(unsigned char *)(v8 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v8 + 17) = 0;
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    uint64_t v9 = ((uint64_t (*)(char *))this[3][2].__shared_weak_owners_)((char *)this + 24);
    ((void (*)(char *, uint64_t))this[3]->__shared_weak_owners_)((char *)this + 24, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"participant ", 12);
    *(unsigned char *)(v9 + 17) = 0;
    ((void (*)(char *, uint64_t))this[33][1].__shared_weak_owners_)((char *)this + 264, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" is already held", 16);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    if (!v6)
    {
LABEL_15:
      uint64_t v4 = 1;
      goto LABEL_16;
    }
LABEL_14:
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    goto LABEL_15;
  }
  uint64_t v3 = ((uint64_t (*)(char *))this[3][2].__shared_weak_owners_)((char *)this + 24);
  ((void (*)(char *, uint64_t))this[3]->__shared_weak_owners_)((char *)this + 24, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Participant ", 12);
  *(unsigned char *)(v3 + 17) = 0;
  ((void (*)(char *, uint64_t))this[33][1].__shared_weak_owners_)((char *)this + 264, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)" has already joined conference", 30);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  uint64_t v4 = 0;
  *(unsigned char *)(v3 + 17) = 0;
LABEL_16:
  ImsResult::~ImsResult((ImsResult *)&v16);
  return v4;
}

void sub_1C532AFF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void BambiConferenceParticipant::handleParticipantLeftConference(BambiConferenceParticipant *this, uint64_t a2)
{
  long long v32 = 0;
  long long v33 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v26, (void *)this + 16);
  std::dynamic_pointer_cast[abi:ne180100]<BambiConferenceParticipant,BambiCallParticipant>(&v32, &v26);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v4 = v32;
  if (!v32)
  {
    uint64_t v8 = *((void *)this + 3);
    uint64_t v7 = (char *)this + 24;
    uint64_t v9 = (*(uint64_t (**)(char *))(v8 + 56))(v7);
    (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))(v7, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Conference participant is null. Can't handle ParticipantLeftConference", 70);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    goto LABEL_39;
  }
  uint64_t v5 = *((void *)this + 135);
  if (v5)
  {
    std::string v30 = v32;
    long long v31 = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v5 + 16))(v5, &v30, a2);
    uint64_t v6 = v31;
    if (!v31) {
      goto LABEL_39;
    }
LABEL_30:
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    goto LABEL_39;
  }
  if (*((unsigned char *)this + 1088))
  {
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 19);
    if (v10)
    {
      long long v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        uint64_t v12 = *((void *)this + 18);
        if (v12)
        {
          if (*(BambiConferenceParticipant **)(v12 + 408) == (BambiConferenceParticipant *)((char *)this + 8))
          {
            *(void *)(v12 + 408) = *((void *)this + 26);
            long long v13 = *(std::__shared_weak_count **)(v12 + 1488);
            *(_OWORD *)(v12 + 1480) = 0u;
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
          }
        }
      }
    }
    else
    {
      long long v11 = 0;
    }
    long long v19 = (std::__shared_weak_count *)*((void *)this + 32);
    if (v19)
    {
      uint64_t v20 = std::__shared_weak_count::lock(v19);
      if (v20)
      {
        char v21 = v20;
        uint64_t v22 = (BambiCall *)*((void *)this + 31);
        if (v22)
        {
          v25[0] = v4;
          v25[1] = v33;
          if (v33) {
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BambiConferenceCall::setParticipantState(v22, (uint64_t)v25);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
    }
    if (v11)
    {
      uint64_t v6 = v11;
      goto LABEL_30;
    }
  }
  else
  {
    bzero(&v26, 0x250uLL);
    BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)&v26, 15, 11);
    char v26 = &unk_1F20B85E8;
    long long v14 = (std::__shared_weak_count *)*((void *)this + 19);
    if (v14 && (long long v15 = std::__shared_weak_count::lock(v14)) != 0)
    {
      long long v16 = v15;
      char v17 = 0;
      uint64_t v18 = *((void *)this + 18);
      atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v18 = 0;
      long long v16 = 0;
      char v17 = 1;
    }
    int v23 = v29;
    uint64_t v28 = v18;
    long long v29 = v16;
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
    if ((v17 & 1) == 0) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    uint64_t v24 = *((void *)this + 26);
    if (v24) {
      (*(void (**)(uint64_t, void **))(*(void *)v24 + 16))(v24, &v26);
    }
    BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&v26);
  }
LABEL_39:
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
}

void sub_1C532B32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  long long v14 = *(std::__shared_weak_count **)(v12 - 56);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void *std::dynamic_pointer_cast[abi:ne180100]<BambiConferenceParticipant,BambiCallParticipant>(void **a1, void **a2)
{
  uint64_t result = *a2;
  if (*a2 {
    && (uint64_t v4 = a2,
  }
  {
    uint64_t v5 = v4[1];
    *a1 = result;
    a1[1] = v5;
  }
  else
  {
    uint64_t v4 = a1;
  }
  void *v4 = 0;
  v4[1] = 0;
  return result;
}

void BambiConferenceParticipant::handleReferFailed(BambiConferenceParticipant *this)
{
  uint64_t v2 = *((void *)this + 29);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
    *(void *)(v2 + 40) = 0;
    *(void *)(v2 + 48) = 0;
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  uint64_t v5 = (char *)this + 24;
  uint64_t v4 = *((void *)this + 3);
  *((void *)this + 29) = 0;
  int v6 = *((_DWORD *)this + 60);
  uint64_t v7 = (*(uint64_t (**)(char *))(v4 + 64))((char *)this + 24);
  (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v7);
  if (v6 != 7)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Unable to add ", 14);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((void *)this + 33) + 40))((char *)this + 264, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" to conference.", 15);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    long long v14 = (std::__shared_weak_count *)*((void *)this + 19);
    if (v14)
    {
      uint64_t v10 = std::__shared_weak_count::lock(v14);
      if (v10)
      {
        long long v15 = (BambiCall *)*((void *)this + 18);
        if (v15)
        {
          if (!*((void *)this + 26))
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "ReferFailed");
            BambiCall::endWithReason(v15, (uint64_t)__p, (uint64_t)v22);
            long long v16 = (ImsResult *)v22;
            goto LABEL_26;
          }
        }
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    BambiCallParticipant::setState((uint64_t)this, 10, 1);
    if (!v10) {
      return;
    }
    goto LABEL_18;
  }
  (*(void (**)(char *, uint64_t))(*((void *)this + 33) + 40))((char *)this + 264, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" is booted. Swallow refer error, go back to Joined state.", 57);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  BambiCallParticipant::setState((uint64_t)this, 6, 0);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = v9;
      long long v11 = (void *)*((void *)this + 31);
      if (v11)
      {
        uint64_t v12 = (std::__shared_weak_count *)v11[46];
        if (v12)
        {
          uint64_t v12 = std::__shared_weak_count::lock(v12);
          long long v13 = v12;
          if (v12) {
            uint64_t v12 = (std::__shared_weak_count *)v11[45];
          }
        }
        else
        {
          long long v13 = 0;
        }
        char v17 = (ImsPrefs *)SipStack::prefs((SipStack *)v12);
        EndConferenceOn405Key = (void **)ImsPrefs::getEndConferenceOn405Key(v17);
        int v19 = ImsPrefs::BOOLValue(v17, EndConferenceOn405Key);
        char v20 = v19;
        if (v13)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          if (v20) {
            goto LABEL_25;
          }
        }
        else if (v19)
        {
LABEL_25:
          uint64_t v21 = (*(uint64_t (**)(char *))(*(void *)v5 + 56))(v5);
          (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))(v5, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"Ending conference due to error response", 39);
          *(unsigned char *)(v21 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v21 + 17) = 0;
          std::string::basic_string[abi:ne180100]<0>(__p, "EmptyConference");
          (*(void (**)(void *__return_ptr, void *, void **))(*v11 + 80))(v25, v11, __p);
          long long v16 = (ImsResult *)v25;
LABEL_26:
          ImsResult::~ImsResult(v16);
          if (v24 < 0) {
            operator delete(__p[0]);
          }
        }
      }
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

void sub_1C532B7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  _Unwind_Resume(a1);
}

void BambiConferenceParticipant::handleReferNotification(BambiConferenceParticipant *this, const SipMessage *lpsrc)
{
  uint64_t v5 = (char *)this + 24;
  uint64_t v4 = *((void *)this + 3);
  if (!v3)
  {
    uint64_t v12 = (*(uint64_t (**)(char *))(v4 + 56))((char *)this + 24);
    (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))(v5, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"recevied refer notification that isn't a response", 49);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    return;
  }
  int v6 = v3;
  uint64_t v7 = (*(uint64_t (**)(char *))(v4 + 64))((char *)this + 24);
  (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Got ", 4);
  *(unsigned char *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" refer event for ", 17);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(char *, uint64_t))(*((void *)this + 33) + 40))((char *)this + 264, v7);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  int v8 = *((_DWORD *)this + 60);
  if ((v8 - 3) < 2)
  {
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 19);
    if (v9)
    {
      uint64_t v10 = std::__shared_weak_count::lock(v9);
      if (v10 && *((void *)this + 18))
      {
        unsigned int v11 = v6[22];
        if (v11 - 200 > 0x63)
        {
          if (v11 >= 0x12C)
          {
            uint64_t v18 = (*(uint64_t (**)(char *))(*(void *)v5 + 64))((char *)this + 24);
            (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 24, v18);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Unable to add ", 14);
            *(unsigned char *)(v18 + 17) = 0;
            (*(void (**)(char *, uint64_t))(*((void *)this + 33) + 40))((char *)this + 264, v18);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" to conference.", 15);
            *(unsigned char *)(v18 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v18 + 17) = 0;
            BambiCallParticipant::setState((uint64_t)this, 10, 1);
          }
        }
        else
        {
          BambiConferenceParticipant::joinedSuccessfully(this);
        }
LABEL_14:
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        return;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v16 = (*(uint64_t (**)(char *))(*(void *)v5 + 48))((char *)this + 24);
    (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))(v5, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"got refer notification without a call object", 44);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    if (!v10) {
      return;
    }
    goto LABEL_14;
  }
  if (v8 != 7) {
    return;
  }
  unsigned int v13 = v6[22];
  if (v13 - 200 > 0x63)
  {
    if (v13 < 0x12C) {
      return;
    }
    uint64_t v17 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
    (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Unable to remove ", 17);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((void *)this + 33) + 40))((char *)this + 264, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" from conference.", 17);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    long long v14 = this;
    uint64_t v15 = 10;
  }
  else
  {
    long long v14 = this;
    uint64_t v15 = 8;
  }
  BambiCallParticipant::setState((uint64_t)v14, v15, 1);
}

void sub_1C532BDE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiConferenceParticipant::joinedSuccessfully(BambiConferenceParticipant *this)
{
  if ((*((_DWORD *)this + 60) - 3) >= 3)
  {
    uint64_t v3 = (char *)this + 24;
    uint64_t v4 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
    (*(void (**)(char *, uint64_t))(*(void *)v3 + 16))(v3, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Swallow duplicate join successful event", 39);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    return;
  }
  SipTimerContainer::cancelAllTimers((BambiConferenceParticipant *)((char *)this + 1096));
  uint64_t v44 = 0;
  std::string v45 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v40, (void *)this + 16);
  std::dynamic_pointer_cast[abi:ne180100]<BambiConferenceParticipant,BambiCallParticipant>((void **)&v44, (void **)&v40);
  if (*((void *)&v40 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
  }
  if (v44)
  {
    std::string v43 = 0;
    *(_OWORD *)long long v41 = 0u;
    long long v42 = 0u;
    long long v40 = 0u;
    uint64_t v2 = v45;
    v39[0] = v44;
    v39[1] = (uint64_t)v45;
    if (v45)
    {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      BambiCallJoinedConferenceEvent::BambiCallJoinedConferenceEvent((uint64_t)&v40, v39);
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    else
    {
      BambiCallJoinedConferenceEvent::BambiCallJoinedConferenceEvent((uint64_t)&v40, v39);
    }
    int v8 = (std::__shared_weak_count *)*((void *)this + 19);
    if (v8 && (uint64_t v9 = std::__shared_weak_count::lock(v8)) != 0)
    {
      uint64_t v10 = v9;
      char v11 = 0;
      uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 18);
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v12 = 0;
      char v11 = 1;
    }
    unsigned int v13 = v41[1];
    v41[0] = v12;
    v41[1] = v10;
    if (v13) {
      std::__shared_weak_count::__release_weak(v13);
    }
    if ((v11 & 1) == 0) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    uint64_t v14 = *((void *)this + 26);
    if (v14) {
      (*(void (**)(uint64_t, long long *))(*(void *)v14 + 16))(v14, &v40);
    }
    BambiCallParticipant::setState((uint64_t)this, 6, 1);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 19);
    if (v15)
    {
      uint64_t v16 = std::__shared_weak_count::lock(v15);
      if (v16) {
        uint64_t v17 = *((void *)this + 18);
      }
      else {
        uint64_t v17 = 0;
      }
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v16 = 0;
    }
    uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 32);
    if (v18)
    {
      int v19 = std::__shared_weak_count::lock(v18);
      if (v19)
      {
        uint64_t v20 = *((void *)this + 31);
        if (v20)
        {
          uint64_t v21 = *(SipUri **)(v20 + 1848);
          uint64_t v22 = *(SipUri **)(v20 + 1856);
          if (v21 != v22)
          {
            while (!SipUri::equals(v21, (BambiConferenceParticipant *)((char *)this + 264), 1))
            {
              uint64_t v21 = (SipUri *)((char *)v21 + 432);
              if (v21 == v22) {
                goto LABEL_33;
              }
            }
            uint64_t v24 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
            (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v24);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"keeping headless participant session", 36);
            *(unsigned char *)(v24 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v24 + 17) = 0;
            if (!v17) {
              goto LABEL_41;
            }
            BambiCall::terminateMediaSession((RTPManager **)v17);
            uint64_t v26 = *(void *)(v17 + 392);
            __int16 v25 = *(std::__shared_weak_count **)(v17 + 400);
            if (v25)
            {
              atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v27 = *((void *)this + 159);
            if (v27 != v26)
            {
              if (v27)
              {
                uint64_t v28 = (void *)((char *)this + 1272);
                uint64_t v29 = v27 + 104;
                std::string v30 = (std::__shared_weak_count *)*((void *)this + 160);
                if (v30)
                {
                  atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
                  long long v31 = (std::__shared_weak_count *)*((void *)this + 160);
                  void *v28 = 0;
                  *((void *)this + 160) = 0;
                  if (v31) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
                  }
                  atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                else
                {
                  void *v28 = 0;
                  *((void *)this + 160) = 0;
                }
                (*(void (**)(uint64_t, char *))(*(void *)v29 + 40))(v29, (char *)this + 1248);
                if (v30)
                {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
                  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
                }
              }
              if (v26)
              {
                if (v25) {
                  atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                *((void *)this + 159) = v26;
                long long v32 = (std::__shared_weak_count *)*((void *)this + 160);
                long long v33 = v25;
                *((void *)this + 160) = v25;
                if (v32)
                {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
                  long long v33 = (std::__shared_weak_count *)*((void *)this + 160);
                  uint64_t v26 = *((void *)this + 159);
                }
                if (v33) {
                  atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (v26) {
                  (*(void (**)(uint64_t, char *))(*(void *)(v26 + 104) + 32))(v26 + 104, (char *)this + 1248);
                }
                if (v33) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
                }
              }
            }
            if (v25)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v25);
              std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            }
            BambiCall::detachSipSession((BambiCall *)v17);
            goto LABEL_36;
          }
        }
      }
    }
    else
    {
      int v19 = 0;
    }
LABEL_33:
    if (!v17) {
      goto LABEL_40;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "JoinedConference");
    (*(void (**)(void *__return_ptr, uint64_t, void **))(*(void *)v17 + 80))(v38, v17, __p);
    ImsResult::~ImsResult((ImsResult *)v38);
    if (v37 < 0) {
      operator delete(__p[0]);
    }
LABEL_36:
    *(void *)(v17 + 408) = 0;
    int v23 = (std::__shared_weak_count *)*((void *)this + 19);
    *((void *)this + 18) = 0;
    *((void *)this + 19) = 0;
    if (v23) {
      std::__shared_weak_count::__release_weak(v23);
    }
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    SipTypedTerminationLock<SipLockable>::set((uint64_t)this + 160, &v34);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
LABEL_40:
    if (!v19)
    {
LABEL_42:
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      *(void *)&long long v40 = &unk_1F20C2E80;
      if (v43) {
        std::__shared_weak_count::__release_weak(v43);
      }
      *(void *)&long long v40 = &unk_1F20B8640;
      if (v41[1]) {
        std::__shared_weak_count::__release_weak(v41[1]);
      }
      goto LABEL_48;
    }
LABEL_41:
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    goto LABEL_42;
  }
  uint64_t v6 = *((void *)this + 3);
  uint64_t v5 = (char *)this + 24;
  uint64_t v7 = (*(uint64_t (**)(char *))(v6 + 64))(v5);
  (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))(v5, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Failed to set join. Conference participant is null", 50);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
LABEL_48:
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
}

void sub_1C532C460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v30)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  BambiCallJoinedConferenceEvent::~BambiCallJoinedConferenceEvent((BambiCallJoinedConferenceEvent *)&a28);
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 88);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(a1);
}

void BambiConferenceParticipant::handleReferSubscriptionTerminated(BambiConferenceParticipant *this)
{
  uint64_t v2 = *((void *)this + 29);
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
    *(void *)(v2 + 40) = 0;
    *(void *)(v2 + 48) = 0;
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  *((void *)this + 29) = 0;
  int v4 = *((_DWORD *)this + 60);
  if (v4 == 3)
  {
    uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
    (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Unable to add ", 14);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((void *)this + 33) + 40))((char *)this + 264, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" to conference. REFER subscription terminated early.", 52);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 19);
    if (v7)
    {
      int v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        uint64_t v9 = (BambiCall *)*((void *)this + 18);
        if (v9)
        {
          if (!*((void *)this + 26))
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "ReferFailed");
            BambiCall::endWithReason(v9, (uint64_t)__p, (uint64_t)v15);
            ImsResult::~ImsResult((ImsResult *)v15);
            if (v14 < 0) {
              operator delete(__p[0]);
            }
LABEL_18:
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
            return;
          }
        }
      }
    }
    else
    {
      int v8 = 0;
    }
    BambiCallParticipant::setState((uint64_t)this, 10, 1);
    if (!v8) {
      return;
    }
    goto LABEL_18;
  }
  if (v4 == 7)
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
    (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v5);
    (*(void (**)(char *, uint64_t))(*((void *)this + 33) + 40))((char *)this + 264, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" is booted. Swallow refer termination, go back to Joined state.", 63);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    BambiCallParticipant::setState((uint64_t)this, 6, 1);
  }
  else
  {
    uint64_t v11 = *((void *)this + 3);
    uint64_t v10 = (char *)this + 24;
    uint64_t v12 = (*(uint64_t (**)(char *))(v11 + 64))(v10);
    (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))(v10, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"REFER subscription terminated", 29);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
  }
}

void sub_1C532C8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void BambiConferenceParticipant::handleEvent(BambiConferenceParticipant *this, BambiCallEvent *a2)
{
  int v4 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v4)
  {
    uint64_t v5 = *((void *)a2 + 2);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (v6 && v5)
    {
      uint64_t v7 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
      (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Event ", 6);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(std::string *__return_ptr, BambiCallEvent *))(*(void *)a2 + 40))(&v24, a2);
      LoggableString::LoggableString(&v25, &v24);
      (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 40))(v7, &v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" for participant call ", 22);
      *(unsigned char *)(v7 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)&v21, (const std::string *)(v5 + 472));
      (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 56))(v7, &v21);
      if (v23 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
LABEL_18:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v8 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
  (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Event ", 6);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(std::string *__return_ptr, BambiCallEvent *))(*(void *)a2 + 40))(&v25, a2);
  LoggableString::LoggableString(&v21, &v25);
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" for participant call [UnknownCall]", 35);
  *(unsigned char *)(v8 + 17) = 0;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (v6) {
    goto LABEL_18;
  }
LABEL_19:
  switch(*((_DWORD *)a2 + 2))
  {
    case 0xA:
    case 0xC:
    case 0x12:
    case 0x13:
    case 0x19:
    case 0x1A:
      if (*((void *)this + 26))
      {
        uint64_t v10 = *((void *)this + 3);
        uint64_t v9 = (void **)((char *)this + 24);
        uint64_t v11 = (*(uint64_t (**)(void **))(v10 + 64))(v9);
        ((void (*)(void **, uint64_t))(*v9)[2])(v9, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" passed on to old delegate ", 27);
        *(unsigned char *)(v11 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v11 + 17) = 0;
        (*(void (**)(void *, BambiCallEvent *))(*v9[23] + 16))(v9[23], a2);
      }
      break;
    case 0xD:
      if (*((_DWORD *)this + 60) == 1)
      {
        uint64_t v15 = this;
        uint64_t v16 = 2;
        goto LABEL_32;
      }
      break;
    case 0xE:
      *((unsigned char *)this + 1088) = 0;
      if (*((_DWORD *)this + 60) != 6)
      {
        uint64_t v17 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
        (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" enter error state ", 19);
        *(unsigned char *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v17 + 17) = 0;
        goto LABEL_31;
      }
      break;
    case 0xF:
      *((unsigned char *)this + 1088) = 0;
      if (*((int *)this + 60) <= 2)
      {
        uint64_t v18 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
        (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)" before sending join request.", 29);
        *(unsigned char *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v18 + 17) = 0;
        if (*((void *)this + 26))
        {
          uint64_t v19 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
          (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v19);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Pass event to old delegate ", 27);
          *(unsigned char *)(v19 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v19 + 17) = 0;
          (*(void (**)(void, BambiCallEvent *))(**((void **)this + 26) + 16))(*((void *)this + 26), a2);
        }
        uint64_t v20 = (*(uint64_t (**)(char *))(*((void *)this + 3) + 64))((char *)this + 24);
        (*(void (**)(char *, uint64_t))(*((void *)this + 3) + 16))((char *)this + 24, v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Transition participant to Error state.", 38);
        *(unsigned char *)(v20 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v20 + 17) = 0;
LABEL_31:
        uint64_t v15 = this;
        uint64_t v16 = 10;
LABEL_32:
        BambiCallParticipant::setState((uint64_t)v15, v16, 1);
      }
      break;
    default:
      uint64_t v13 = *((void *)this + 3);
      uint64_t v12 = (char *)this + 24;
      char v14 = (unsigned char *)(*(uint64_t (**)(char *))(v13 + 64))(v12);
      (*(void (**)(char *, unsigned char *))(*(void *)v12 + 16))(v12, v14);
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v14[17] = 0;
      break;
  }
}

void sub_1C532D0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  ims::AccessNetwork::~AccessNetwork(&a9);
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'BambiConferenceParticipant::handleEvent(BambiConferenceParticipant *this, BambiCallEvent *a2)
{
}

uint64_t BambiConferenceParticipant::joinConference(int8x8_t *this)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v34 = (void (**)(void **, uint64_t))&unk_1F20B2680;
  uint64_t v35 = &_bambiDomain;
  uint64_t v38 = 0;
  if (this[30].i32[0] != 2)
  {
    char v8 = 0;
    goto LABEL_39;
  }
  uint64_t v2 = (std::__shared_weak_count *)this[32];
  if (!v2)
  {
    int v4 = 0;
    uint64_t v3 = 0;
    goto LABEL_12;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
  {
    int v4 = 0;
    goto LABEL_12;
  }
  int v4 = (BambiConferenceCall *)this[31];
  if (!v4)
  {
LABEL_12:
    char v7 = 1;
    goto LABEL_13;
  }
  uint64_t v5 = (SipUri *)*((void *)v4 + 231);
  uint64_t v6 = (SipUri *)*((void *)v4 + 232);
  if (v5 != v6)
  {
    while (!SipUri::equals(v5, (const SipUri *)&this[33], 1))
    {
      uint64_t v5 = (SipUri *)((char *)v5 + 432);
      if (v5 == v6) {
        goto LABEL_8;
      }
    }
    BambiCallParticipant::setState((uint64_t)this, 5, 1);
    if (!BambiConferenceCall::supportsConferenceEvents(v4))
    {
      uint64_t v26 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[3] + 64))(this + 3);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)&this[3] + 16))(this + 3, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"call doesn't support conference events, and we have no REFER. Assuming participant join was successful", 102);
      *(unsigned char *)(v26 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v26 + 17) = 0;
      BambiConferenceParticipant::joinedSuccessfully((BambiConferenceParticipant *)this);
    }
    char v8 = 1;
    goto LABEL_38;
  }
LABEL_8:
  char v7 = 0;
LABEL_13:
  uint64_t v9 = (std::__shared_weak_count *)this[19];
  if (!v9)
  {
    BOOL v12 = 0;
    uint64_t v10 = 0;
LABEL_26:
    int8x8_t v11 = 0;
    goto LABEL_27;
  }
  uint64_t v10 = std::__shared_weak_count::lock(v9);
  if (!v10)
  {
    BOOL v12 = 0;
    goto LABEL_26;
  }
  int8x8_t v11 = this[18];
  BOOL v12 = *(void *)&v11 != 0;
  if (v11) {
    char v13 = v7;
  }
  else {
    char v13 = 1;
  }
  if ((v13 & 1) == 0)
  {
    std::string v30 = v4;
    long long v31 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v14 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(*(void *)&v11 + 368));
    uint64_t v15 = SipUserAgent::config(*(SipUserAgent **)(*(void *)(*(void *)&v11 + 360) + 144));
    (*(void (**)(void **__return_ptr, int8x8_t *, BambiConferenceCall **, void))(*(void *)this + 104))(&v32, this, &v30, *(unsigned __int8 *)(v15 + 617));
    ImsResult::operator=((uint64_t)&v34, (uint64_t)&v32);
    ImsResult::~ImsResult((ImsResult *)&v32);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    BOOL v12 = 1;
  }
LABEL_27:
  if ((*(uint64_t (**)(uint64_t *, void))(*v35 + 24))(v35, v36))
  {
    uint64_t v16 = this + 3;
    uint64_t v17 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[3] + 64))(this + 3);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)&this[3] + 16))(this + 3, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Failed to send refer. ", 22);
    *(unsigned char *)(v17 + 17) = 0;
    v34[2]((void **)&v34, v17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    uint64_t v32 = 0;
    long long v33 = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v28, &this[16]);
    std::dynamic_pointer_cast[abi:ne180100]<BambiConferenceParticipant,BambiCallParticipant>(&v32, &v28);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (v32)
    {
      v27[0] = v32;
      v27[1] = v33;
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BambiConferenceCall::setParticipantState(v4, (uint64_t)v27);
    }
    uint64_t v25 = (*(uint64_t (**)(int8x8_t *))(*(void *)v16 + 64))(this + 3);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v16 + 16))(v16, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"Failed to set Error state. ", 27);
    *(unsigned char *)(v25 + 17) = 0;
    v34[2]((void **)&v34, v25);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v25 + 17) = 0;
    char v8 = (*(uint64_t (**)(uint64_t *, void))(*v35 + 24))(v35, v36) ^ 1;
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (v10) {
LABEL_36:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  else
  {
    if (v12)
    {
      uint64_t v19 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(*(void *)&v11 + 368));
      int v20 = *(_DWORD *)(SipUserAgent::config(*(SipUserAgent **)(*(void *)(*(void *)&v11 + 360) + 144)) + 624);
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      if (v20)
      {
        std::string v21 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(*(void *)&v11 + 368));
        SipUserAgent::config(*(SipUserAgent **)(*(void *)(*(void *)&v11 + 360) + 144));
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
    }
    int8x8_t v23 = this[16];
    uint64_t v22 = (std::__shared_weak_count *)this[17];
    if (v22)
    {
      atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v44 = 0;
    std::string v24 = operator new(0x20uLL);
    *std::string v24 = &unk_1F20C2E00;
    v24[1] = this;
    void v24[2] = v23;
    _OWORD v24[3] = v22;
    uint64_t v44 = v24;
    SipTimerContainer::startTimer(this + 137, (uint64_t)"WaitForAddSuccessTimer");
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v43);
    if (v22)
    {
      std::__shared_weak_count::__release_weak(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    char v8 = (*(uint64_t (**)(uint64_t *, void))(*v35 + 24))(v35, v36) ^ 1;
    if (v10) {
      goto LABEL_36;
    }
  }
  if (v3) {
LABEL_38:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
LABEL_39:
  ImsResult::~ImsResult((ImsResult *)&v34);
  return v8 & 1;
}

void sub_1C532D844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, std::__shared_weak_count *a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v20 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);
  ImsResult::~ImsResult((ImsResult *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if (a8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a8);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  ImsResult::~ImsResult((ImsResult *)va1);
  _Unwind_Resume(a1);
}

uint64_t BambiConferenceParticipant::handleConferenceNotification(uint64_t a1, uint64_t a2, SipUri *this)
{
  if (a2 != 1)
  {
    if (a2 == 9)
    {
      int v4 = *(_DWORD *)(a1 + 240);
      if (v4 == 6)
      {
        uint64_t v10 = 8;
      }
      else
      {
        if (v4 == 7)
        {
          uint64_t v5 = a1 + 24;
          uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 64))(a1 + 24);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v6);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Swallow disconnected event in kStateLeaving", 43);
          *(unsigned char *)(v6 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v6 + 17) = 0;
          return 1;
        }
        uint64_t v10 = 10;
      }
      BambiCallParticipant::setState(a1, v10, 1);
      return 1;
    }
    uint64_t v8 = a1 + 24;
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, SipUri *))(*(void *)(a1 + 24) + 64))(a1 + 24, a2, this);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Ignoring the conference event status ", 37);
    *(unsigned char *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    return 1;
  }
  if (*(char *)(a1 + 799) < 0)
  {
    if (*(void *)(a1 + 784)) {
      goto LABEL_8;
    }
LABEL_13:
    SipUri::operator=((SipUri *)(a1 + 672), (uint64_t)this);
    BambiConferenceParticipant::joinedSuccessfully((BambiConferenceParticipant *)a1);
    return 1;
  }
  if (!*(unsigned char *)(a1 + 799)) {
    goto LABEL_13;
  }
LABEL_8:
  return SipUri::equals(this, (const SipUri *)(a1 + 672), 1);
}

void BambiCallJoinedConferenceEvent::~BambiCallJoinedConferenceEvent(BambiCallJoinedConferenceEvent *this)
{
  *(void *)this = &unk_1F20C2E80;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1F20B8640;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20C2E80;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)this = &unk_1F20B8640;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1C878E320);
}

void BambiConferenceParticipant::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = a2[23];
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = a2[23];
  }
  else {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v4 != 22) {
    goto LABEL_12;
  }
  if ((v3 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a2, "WaitForAddSuccessTimer", *((void *)a2 + 1))) {
      goto LABEL_13;
    }
LABEL_12:
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v6 = a1 + 24;
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Unknown timer fired", 19);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    return;
  }
  if (a2[23])
  {
    uint64_t v5 = "WaitForAddSuccessTimer";
    while (*a2 == *(unsigned __int8 *)v5)
    {
      ++a2;
      ++v5;
      if (!--v3) {
        goto LABEL_13;
      }
    }
    goto LABEL_12;
  }
LABEL_13:
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 24) + 56))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 24) + 16))(a1 + 24, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Participant failed to join", 26);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  BambiCallParticipant::setState(a1, 10, 1);
}

void *BambiConferenceParticipant::logPrefix(BambiConferenceParticipant *this, ImsOutStream *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 31);
      if (v7) {
        (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v7 + 72))(v7, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  uint64_t result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"ConferenceParticipant: ", 23);
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void sub_1C532DE64(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *non-virtual thunk to'BambiConferenceParticipant::logPrefix(BambiConferenceParticipant *this, ImsOutStream *a2)
{
  return BambiConferenceParticipant::logPrefix((BambiConferenceParticipant *)((char *)this - 24), a2);
}

void BambiCallJoinedConferenceEvent::clone(BambiCallJoinedConferenceEvent *this)
{
}

void SipTypedTerminationLock<SipSession>::~SipTypedTerminationLock(uint64_t a1)
{
  SipTypedTerminationLock<SipSession>::~SipTypedTerminationLock(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t SipTypedTerminationLock<SipSession>::~SipTypedTerminationLock(uint64_t a1)
{
  *(void *)a1 = &unk_1F20C2D78;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 + 104) + 40))(v2 + 104, a1 + 8);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *(void *)a1 = &unk_1F20B7918;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::allocate_shared[abi:ne180100]<BambiConferenceParticipant,std::allocator<BambiConferenceParticipant>,std::shared_ptr<BambiCall> &,std::shared_ptr<BambiConferenceCall> &,SipUri const&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x528uLL);
  std::__shared_ptr_emplace<BambiConferenceParticipant>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<BambiCall> &,std::shared_ptr<BambiConferenceCall> &,SipUri const&,std::allocator<BambiConferenceParticipant>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a4, v8 + 19, (uint64_t)(v8 + 3));
}

void sub_1C532E0F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<BambiConferenceParticipant>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<BambiCall> &,std::shared_ptr<BambiConferenceCall> &,SipUri const&,std::allocator<BambiConferenceParticipant>,0>(void *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20C2DB0;
  std::construct_at[abi:ne180100]<BambiConferenceParticipant,std::shared_ptr<BambiCall> &,std::shared_ptr<BambiConferenceCall> &,SipUri const&,BambiConferenceParticipant*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1C532E14C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BambiConferenceParticipant>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiConferenceParticipant>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C2DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<BambiConferenceParticipant>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::construct_at[abi:ne180100]<BambiConferenceParticipant,std::shared_ptr<BambiCall> &,std::shared_ptr<BambiConferenceCall> &,SipUri const&,BambiConferenceParticipant*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *a3;
  uint64_t v8 = (std::__shared_weak_count *)a3[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = v7;
  uint64_t v17 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = v9 + 1832;
  if (!v9) {
    uint64_t v10 = 0;
  }
  uint64_t v14 = v10;
  uint64_t v15 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  BambiCallParticipant::BambiCallParticipant(a1, &v16, &v14);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  *(void *)a1 = &unk_1F20C2B28;
  *(void *)(a1 + 8) = &unk_1F20C2BB0;
  *(void *)(a1 + 16) = &unk_1F20C2CE8;
  *(void *)(a1 + 24) = &unk_1F20C2D18;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  SipUri::SipUri((SipUri *)(a1 + 264));
  SipUri::SipUri((SipUri *)(a1 + 672));
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 1096));
  LoggableString::LoggableString((LoggableString *)&__p, "ConferenceParticipantHeadlessSession");
  SipTerminationLockBase::SipTerminationLockBase((SipTerminationLockBase *)(a1 + 1240), &__p);
  *(void *)(a1 + 1240) = &unk_1F20C2D78;
  *(void *)(a1 + 1280) = 0;
  *(void *)(a1 + 1272) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(unsigned char *)(a1 + 1288) = 0;
  *(_DWORD *)(a1 + 1292) = 0;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int8x8_t v11 = *(std::__shared_weak_count **)(a1 + 256);
  *(void *)(a1 + 248) = v9;
  *(void *)(a1 + 256) = v8;
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  *(void *)(a1 + 1080) = 0;
  *(unsigned char *)(a1 + 1088) = 1;
  SipUri::operator=((SipUri *)(a1 + 264), a4);
  *(void *)(a1 + 1200) = a1 + 16;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.call");
  std::string::operator=((std::string *)(a1 + 1144), &__p);
  std::string::operator=((std::string *)(a1 + 1168), (const std::string *)(v7 + 112));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v7) {
    *(unsigned char *)(a1 + 1288) = *(unsigned char *)(v7 + 1496);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return a1;
}

void sub_1C532E46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, SipUri *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19)
{
  SipTypedTerminationLock<SipSession>::~SipTypedTerminationLock(v24);
  SipTimerContainer::~SipTimerContainer(v23);
  SipUri::~SipUri(a9);
  SipUri::~SipUri(v22);
  uint64_t v26 = (std::__shared_weak_count *)*((void *)v21 + 32);
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  BambiCallParticipant::~BambiCallParticipant(v21);
  if (v20)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    if (!v19) {
LABEL_4:
    }
      _Unwind_Resume(a1);
  }
  else if (!v19)
  {
    goto LABEL_4;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  goto LABEL_4;
}

void *std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C2E00;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C2E00;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C2E00;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C2E00;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C532E790(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void XcapCBRule::XcapCBRule(XcapCBRule *this)
{
  *(void *)this = &unk_1F20C81E8;
  uint64_t v2 = (char *)this + 8;
  unsigned __int8 v7 = 1;
  *(void *)&long long v6 = &v7;
  uint64_t v3 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v7, (uint64_t)&std::piecewise_construct, (char **)&v6);
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v2, (long long *)"rule", (long long *)(v3 + 5));
  *(void *)this = &unk_1F20C2EF0;
  *((void *)this + 1) = &unk_1F20C2F68;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((void *)this + 12) = 0;
  _ZNSt3__115allocate_sharedB8ne180100I15XcapCBConditionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v6);
  long long v4 = v6;
  long long v6 = 0uLL;
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 12);
  *(_OWORD *)((char *)this + 88) = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (*((void *)&v6 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v6 + 1));
    }
  }
}

void sub_1C532E904(_Unwind_Exception *a1)
{
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 96);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  _Unwind_Resume(a1);
}

void XcapCBRule::clone(XcapCBRule *this)
{
}

void sub_1C532E9C0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40B88DE452);
  _Unwind_Resume(a1);
}

void XcapCBRule::setAttribute(uint64_t a1, uint64_t a2, const std::string *a3)
{
  XcapNs::stripXcapNs(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size == 2)
  {
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
      int v11 = memcmp(__p.__r_.__value_.__l.__data_, XcapCBRule::kId, __p.__r_.__value_.__l.__size_);
      operator delete(v10);
      if (v11) {
        return;
      }
    }
    else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
    {
      uint64_t v6 = 0;
      do
      {
        int v7 = __p.__r_.__value_.__s.__data_[v6];
        int v8 = XcapCBRule::kId[v6];
      }
      while (v7 == v8 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v6++);
      if (v7 != v8) {
        return;
      }
    }
    std::string::operator=((std::string *)(a1 + 64), a3);
    return;
  }
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t XcapCBRule::createChild(uint64_t a1, uint64_t a2)
{
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  uint64_t v3 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  char v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  if (size == 10)
  {
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      int v11 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, "conditions", __s1.__r_.__value_.__l.__size_))
      {
        a1 = 0;
        goto LABEL_29;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      uint64_t v10 = "conditions";
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v10;
        if (!--v3) {
          goto LABEL_26;
        }
      }
      goto LABEL_19;
    }
LABEL_26:
    uint64_t v6 = *(void *)(a1 + 88);
    if ((v4 & 0x80) == 0) {
      return v6;
    }
LABEL_27:
    int v11 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_28;
  }
  uint64_t v6 = 0;
  if (size != 7) {
    goto LABEL_20;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    int v11 = (void *)__s1.__r_.__value_.__r.__words[0];
    if (memcmp(__s1.__r_.__value_.__l.__data_, "actions", __s1.__r_.__value_.__l.__size_))
    {
      uint64_t v6 = 0;
LABEL_28:
      a1 = v6;
    }
LABEL_29:
    operator delete(v11);
    return a1;
  }
  if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
    int v7 = &__s1;
    int v8 = "actions";
    while (v7->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v8)
    {
      int v7 = (std::string *)((char *)v7 + 1);
      ++v8;
      if (!--v3)
      {
        uint64_t v6 = a1;
        if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
          return v6;
        }
        goto LABEL_27;
      }
    }
LABEL_19:
    uint64_t v6 = 0;
LABEL_20:
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v6;
    }
    goto LABEL_27;
  }
  return a1;
}

void XcapCBRule::parseChild(unsigned char *a1, uint64_t a2, uint64_t *a3)
{
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  uint64_t v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size_t size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = __s1.__r_.__value_.__l.__size_;
  }
  if (v8 == 5)
  {
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
      {
        p_s1 = &__s1;
        uint64_t v16 = "allow";
        while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v16)
        {
          p_s1 = (std::string *)((char *)p_s1 + 1);
          ++v16;
          if (!--v6) {
            goto LABEL_34;
          }
        }
        goto LABEL_46;
      }
LABEL_34:
      std::string __p = 0;
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      (*(void (**)(unsigned char *, uint64_t, uint64_t *, void **))(*(void *)a1 + 72))(a1, a2, a3, &__p);
      uint64_t v17 = HIBYTE(v26);
      int v18 = SHIBYTE(v26);
      if (v26 < 0) {
        uint64_t v17 = v25;
      }
      if (v17 != 5) {
        goto LABEL_43;
      }
      p_p = (unsigned __int8 *)__p;
      if (v26 >= 0) {
        p_p = (unsigned __int8 *)&__p;
      }
      int v20 = *(_DWORD *)p_p;
      int v21 = p_p[4];
      if (v20 == 1936482662 && v21 == 101) {
        char v23 = 0;
      }
      else {
LABEL_43:
      }
        char v23 = 1;
      a1[104] = v23;
      if (v18 < 0) {
        operator delete(__p);
      }
      goto LABEL_46;
    }
    uint64_t v14 = (const void *)__s1.__r_.__value_.__r.__words[0];
LABEL_33:
    if (memcmp(v14, "allow", size)) {
      goto LABEL_46;
    }
    goto LABEL_34;
  }
  if (v8 != 10)
  {
    if (v8 != 7) {
      goto LABEL_46;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__s1.__r_.__value_.__l.__data_, "actions", __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_46;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      uint64_t v9 = &__s1;
      uint64_t v10 = "actions";
      while (v9->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
      {
        uint64_t v9 = (std::string *)((char *)v9 + 1);
        ++v10;
        if (!--v6) {
          goto LABEL_24;
        }
      }
      goto LABEL_46;
    }
LABEL_24:
    bambi::XmlParserItem::parseChild((uint64_t)a1, a2, a3);
    goto LABEL_46;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    uint64_t v14 = (const void *)__s1.__r_.__value_.__r.__words[0];
    if (!memcmp(__s1.__r_.__value_.__l.__data_, "conditions", __s1.__r_.__value_.__l.__size_)) {
      goto LABEL_24;
    }
    if (size != 5) {
      goto LABEL_46;
    }
    goto LABEL_33;
  }
  if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
    goto LABEL_24;
  }
  int v11 = &__s1;
  uint64_t v12 = "conditions";
  uint64_t v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  while (v11->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v12)
  {
    int v11 = (std::string *)((char *)v11 + 1);
    ++v12;
    if (!--v13) {
      goto LABEL_24;
    }
  }
LABEL_46:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
}

void sub_1C532EE70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void XcapCBRule::constructTree(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  bambi::XmlTreeItem::makeNode(a1);
}

void sub_1C532F16C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v26 - 72);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  uint64_t v29 = *(std::__shared_weak_count **)(v25 + 8);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C532F1F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a18) {
    JUMPOUT(0x1C532F1E0);
  }
  JUMPOUT(0x1C532F1DCLL);
}

void non-virtual thunk to'XcapCBRule::constructTree(void *a1@<X8>)
{
}

uint64_t XcapCBRule::asString@<X0>(XcapCBRule *this@<X0>, void *a2@<X8>)
{
  uint64_t v27 = 0;
  memset(v26, 0, sizeof(v26));
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)char v23 = 0u;
  memset(v22, 0, sizeof(v22));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
  char v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Rule-Id: ", 9);
  int v5 = *((char *)this + 87);
  if (v5 >= 0) {
    uint64_t v6 = (char *)this + 64;
  }
  else {
    uint64_t v6 = (char *)*((void *)this + 8);
  }
  if (v5 >= 0) {
    uint64_t v7 = *((unsigned __int8 *)this + 87);
  }
  else {
    uint64_t v7 = *((void *)this + 9);
  }
  std::string::size_type v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",  ", 3);
  uint64_t v10 = (XcapCBCondition *)*((void *)this + 11);
  if (v10) {
    XcapCBCondition::asString(v10, __p);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
  }
  if ((v21 & 0x80u) == 0) {
    int v11 = __p;
  }
  else {
    int v11 = (void **)__p[0];
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v12 = v21;
  }
  else {
    uint64_t v12 = (uint64_t)__p[1];
  }
  uint64_t v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
  uint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", Allowed: ", 11);
  if (*((unsigned char *)this + 104)) {
    uint64_t v15 = "Yes";
  }
  else {
    uint64_t v15 = "No";
  }
  if (*((unsigned char *)this + 104)) {
    uint64_t v16 = 3;
  }
  else {
    uint64_t v16 = 2;
  }
  uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  int v18 = std::locale::use_facet(&v28, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v28);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v21 < 0) {
    operator delete(__p[0]);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v22 + 8, a2);
  *(void *)&v22[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v22 + *(void *)(*(void *)&v22[0] - MediaSessionHandover::terminate((MediaSessionHandover *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v22[0] + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v26);
}

void sub_1C532F4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void XcapCBRule::~XcapCBRule(XcapCBRule *this)
{
  *(void *)this = &unk_1F20C2EF0;
  uint64_t v2 = (void **)((char *)this + 8);
  *((void *)this + 1) = &unk_1F20C2F68;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  bambi::XmlTreeItem::~XmlTreeItem(v2);
}

{
  void **v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20C2EF0;
  uint64_t v2 = (void **)((char *)this + 8);
  *((void *)this + 1) = &unk_1F20C2F68;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'XcapCBRule::~XcapCBRule(XcapCBRule *this)
{
  *((void *)this - 1) = &unk_1F20C2EF0;
  *(void *)this = &unk_1F20C2F68;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  bambi::XmlTreeItem::~XmlTreeItem((void **)this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *((void *)this - 1) = &unk_1F20C2EF0;
  *(void *)this = &unk_1F20C2F68;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  bambi::XmlTreeItem::~XmlTreeItem((void **)this);
  JUMPOUT(0x1C878E320);
}

void *_ZNSt3__115allocate_sharedB8ne180100I15XcapCBConditionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceI15XcapCBConditionNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1C532F790(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceI15XcapCBConditionNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20C3018;
  XcapCBCondition::XcapCBCondition((XcapCBCondition *)(a1 + 3));
  return a1;
}

void sub_1C532F7EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<XcapCBCondition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<XcapCBCondition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<XcapCBCondition>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, long long *a2, unint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, a3);
    *(void *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (long long *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_1C532F91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  uint64_t v3 = a1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get(uint64_t a1)
{
  return *(void *)a1;
}

const void **ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void SipContactParamList::~SipContactParamList(SipContactParamList *this)
{
  *(void *)this = &unk_1F20C3130;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<SipContactParam>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_1F20C3130;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<SipContactParam>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x1C878E320](this, 0xA1C4030951706);
}

uint64_t SipContactParamList::addContact(SipContactParamList *this, const SipContactParam *a2)
{
  unint64_t v3 = *((void *)this + 2);
  if (v3 >= *((void *)this + 3))
  {
    uint64_t result = std::vector<SipContactParam>::__push_back_slow_path<SipContactParam const&>((uint64_t *)this + 1, (uint64_t)a2);
  }
  else
  {
    std::construct_at[abi:ne180100]<SipContactParam,SipContactParam const&,SipContactParam*>(*((void *)this + 2), (uint64_t)a2);
    uint64_t result = v3 + 488;
    *((void *)this + 2) = v3 + 488;
  }
  *((void *)this + 2) = result;
  return result;
}

void sub_1C532FA54(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t SipContactHeader::encodeValue(SipContactHeader *this, ImsOutStream *a2)
{
  return 1;
}

BOOL SipContactHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  return SipContactParamList::fromString((uint64_t *)(a1 + 64), a2);
}

BOOL SipContactHeader::mergeHeader(SipContactHeader *this, const SipHeader *lpsrc)
{
  if (v3) {
    std::vector<SipContactParam>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SipContactParam const*>,std::__wrap_iter<SipContactParam const*>>((uint64_t *)this + 9, *((void *)this + 10), v3[9], v3[10], 0x4FBCDA3AC10C9715 * ((uint64_t)(v3[10] - v3[9]) >> 3));
  }
  return v3 != 0;
}

void SipContactHeader::~SipContactHeader(SipContactHeader *this)
{
  *(void *)this = &unk_1F20C3068;
  *((void *)this + 8) = &unk_1F20C3130;
  uint64_t v2 = (void **)((char *)this + 72);
  std::vector<SipContactParam>::__destroy_vector::operator()[abi:ne180100](&v2);
  SipHeader::~SipHeader((void **)this);
}

{
  void **v2;

  *(void *)this = &unk_1F20C3068;
  *((void *)this + 8) = &unk_1F20C3130;
  uint64_t v2 = (void **)((char *)this + 72);
  std::vector<SipContactParam>::__destroy_vector::operator()[abi:ne180100](&v2);
  SipHeader::~SipHeader((void **)this);
  MEMORY[0x1C878E320]();
}

void SipContactHeader::clone(SipContactHeader *this)
{
}

void sub_1C532FE0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, void **a11)
{
  *(void *)(v11 + 64) = a10;
  a11 = a9;
  std::vector<SipContactParam>::__destroy_vector::operator()[abi:ne180100](&a11);
  SipHeader::~SipHeader((void **)v11);
  MEMORY[0x1C878E320](v11, 0x10B3C40010BB2DELL);
  _Unwind_Resume(a1);
}

uint64_t SipContactHeader::allowsDuplicates(SipContactHeader *this)
{
  return 1;
}

uint64_t SipContactHeader::allowsMerging(SipContactHeader *this)
{
  return 1;
}

void SipContactParam::~SipContactParam(SipContactParam *this)
{
  *(void *)this = &unk_1F20C3100;
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 464, *((void **)this + 59));
  *((void *)this + 52) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 424, *((void **)this + 54));
  SipUri::~SipUri((SipContactParam *)((char *)this + 8));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F20C3100;
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy((uint64_t)this + 464, *((void **)this + 59));
  *((void *)this + 52) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 424, *((void **)this + 54));
  SipUri::~SipUri((SipContactParam *)((char *)this + 8));
  JUMPOUT(0x1C878E320);
}

uint64_t std::construct_at[abi:ne180100]<SipContactParam,SipContactParam,SipContactParam*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F20C3100;
  SipUri::SipUri((SipUri *)(a1 + 8), (const SipUri *)(a2 + 8));
  *(void *)(a1 + 416) = &unk_1F20B37B0;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)(a1 + 424), *(void ***)(a2 + 424), (void **)(a2 + 432));
  *(unsigned char *)(a1 + 449) = 1;
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  uint64_t v4 = a1 + 472;
  uint64_t v5 = *(void *)(a2 + 472);
  *(void *)(a1 + 472) = v5;
  uint64_t v6 = *(void *)(a2 + 480);
  *(void *)(a1 + 480) = v6;
  if (v6)
  {
    *(void *)(v5 + 16) = v4;
    *(void *)(a2 + 464) = a2 + 472;
    *(void *)(a2 + 472) = 0;
    *(void *)(a2 + 480) = 0;
  }
  else
  {
    *(void *)(a1 + 464) = v4;
  }
  return a1;
}

void sub_1C5330044(_Unwind_Exception *a1)
{
  SipUri::~SipUri(v1);
  _Unwind_Resume(a1);
}

void SipContactParam::loggableName(LoggableString *a1@<X8>)
{
}

uint64_t std::vector<SipContactParam>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipContactParam>,std::reverse_iterator<SipContactParam*>,std::reverse_iterator<SipContactParam*>,std::reverse_iterator<SipContactParam*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipContactParam>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x864B8A7DE6D1D7) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(488 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<SipContactParam>,std::reverse_iterator<SipContactParam*>,std::reverse_iterator<SipContactParam*>,std::reverse_iterator<SipContactParam*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 488;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 488;
    std::construct_at[abi:ne180100]<SipContactParam,SipContactParam const&,SipContactParam*>(v12, v10 + a3);
  }
  return a6;
}

uint64_t std::construct_at[abi:ne180100]<SipContactParam,SipContactParam const&,SipContactParam*>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F20C3100;
  SipUri::SipUri((SipUri *)(a1 + 8), (const SipUri *)(a2 + 8));
  *(void *)(a1 + 416) = &unk_1F20B37B0;
  std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)(a1 + 424), *(void ***)(a2 + 424), (void **)(a2 + 432));
  *(unsigned char *)(a1 + 449) = 1;
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  std::map<std::string,std::map<std::string,std::string>>::map[abi:ne180100]((uint64_t *)(a1 + 464), a2 + 464);
  return a1;
}

void sub_1C5330350(_Unwind_Exception *a1)
{
  *(void *)(v2 + 416) = v4;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(void **)(v2 + 432));
  SipUri::~SipUri(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::map<std::string,std::string>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::map<std::string,std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,std::string>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1C53303BC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::map<std::string,std::string>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,std::string>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,std::string>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::map<std::string,std::string>> const&>(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__construct_node<std::pair<std::string const,std::map<std::string,std::string>> const&>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__construct_node<std::pair<std::string const,std::map<std::string,std::string>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1C5330560(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::map<std::string,std::string>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1C53305D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::map<std::string,std::string>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__split_buffer<SipContactParam>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 488;
    (**(void (***)(void))(i - 488))();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void SipContactParamList::loggableName(LoggableString *a1@<X8>)
{
}

void std::vector<SipContactParam>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void (***)(void))**a1;
  if (v2)
  {
    long long v4 = (void (***)(void))v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 61;
      uint64_t v7 = v4 - 61;
      do
      {
        (**v7)(v7);
        v6 -= 61;
        BOOL v8 = v7 == v2;
        v7 -= 61;
      }
      while (!v8);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<SipContactParam>::__push_back_slow_path<SipContactParam const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x4FBCDA3AC10C9715 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x864B8A7DE6D1D6) {
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x4FBCDA3AC10C9715 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x4325C53EF368EBLL) {
    unint64_t v9 = 0x864B8A7DE6D1D6;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipContactParam>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[488 * v4];
  uint64_t v16 = &v10[488 * v9];
  std::construct_at[abi:ne180100]<SipContactParam,SipContactParam const&,SipContactParam*>((uint64_t)v14, a2);
  uint64_t v15 = v14 + 488;
  std::vector<SipContactParam>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<SipContactParam>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1C53309B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<SipContactParam>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::map<std::string,std::string>>,std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *> *,long>>(uint64_t **result, long long *a2, long long *a3)
{
  unint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      unint64_t v8 = v6;
    }
    uint64_t v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = v8;
    if (v8)
    {
      uint64_t v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          std::pair<std::string &,std::map<std::string,std::string> &>::operator=[abi:ne180100]<std::string const,std::map<std::string,std::string>,(void *)0>((uint64_t)v18, (uint64_t)(v9 + 2));
          v18[0] = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, v18, v17 + 4);
          std::__tree<unsigned int>::__insert_node_at(v5, v18[0], leaf_high, v17);
          uint64_t v17 = v16;
          if (v16) {
            uint64_t v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          }
          uint64_t v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v12);
          }
          unint64_t v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          unint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_multi<std::pair<std::string const,std::map<std::string,std::string>> const&>(v5, a2 + 2);
      uint64_t v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1C5330B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,std::map<std::string,std::string> &>::operator=[abi:ne180100]<std::string const,std::map<std::string,std::string>,(void *)0>(uint64_t a1, uint64_t a2)
{
  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  uint64_t v4 = *(uint64_t ***)(a1 + 8);
  if (v4 != (uint64_t **)(a2 + 24)) {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(v4, *(long long **)(a2 + 24), (long long *)(a2 + 32));
  }
  return a1;
}

uint64_t std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__emplace_multi<std::pair<std::string const,std::map<std::string,std::string>> const&>(uint64_t **a1, long long *a2)
{
  memset(v7, 0, sizeof(v7));
  std::__tree<std::__value_type<std::string,std::map<std::string,std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,std::string>>>>::__construct_node<std::pair<std::string const,std::map<std::string,std::string>> const&>((uint64_t)a1, a2, v7);
  uint64_t v6 = 0;
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)a1, &v6, v7[0] + 4);
  std::__tree<unsigned int>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1C5330C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::map<std::string,std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t XpcConnection::XpcConnection(uint64_t a1, char *name, dispatch_queue_t targetq)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = targetq;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  if (name[23] < 0) {
    name = *(char **)name;
  }
  *(void *)a1 = xpc_connection_create_mach_service(name, targetq, 0);
  XpcConnection::initializeConnection_nl((XpcConnection *)a1, 1);
  return a1;
}

void sub_1C5330D24(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v2, *v4);
  std::__tree<std::string>::destroy(v1, *v3);
  _Unwind_Resume(a1);
}

void XpcConnection::initializeConnection_nl(XpcConnection *this, int a2)
{
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    dispatch_retain(v4);
  }
  void v7[4] = this;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = ___ZN13XpcConnection23initializeConnection_nlEb_block_invoke;
  v8[3] = &__block_descriptor_tmp_4;
  v8[4] = this;
  void v6[4] = this;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  void v7[2] = ___ZN13XpcConnection23initializeConnection_nlEb_block_invoke_2;
  v7[3] = &__block_descriptor_tmp_5;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  void v6[2] = ___ZN13XpcConnection23initializeConnection_nlEb_block_invoke_3;
  v6[3] = &__block_descriptor_tmp_6_0;
  unint64_t v5 = *(_xpc_connection_s **)this;
  v11[0] = 0;
  v11[1] = v11;
  void v11[2] = 0x2000000000;
  char v12 = 1;
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 0x40000000;
  handler[2] = ___ZL15setEventHandlerP17_xpc_connection_sU13block_pointerFvRKN3xpc4dictEEU13block_pointerFvvES8_PS8__block_invoke;
  handler[3] = &unk_1E650FC18;
  handler[4] = v7;
  handler[5] = v6;
  handler[6] = v8;
  handler[7] = v11;
  xpc_connection_set_event_handler(v5, handler);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZL15setEventHandlerP17_xpc_connection_sU13block_pointerFvRKN3xpc4dictEEU13block_pointerFvvES8_PS8__block_invoke_2;
  aBlock[3] = &unk_1E650FC40;
  aBlock[4] = v11;
  *((void *)this + 11) = _Block_copy(aBlock);
  _Block_object_dispose(v11, 8);
  if (a2) {
    xpc_connection_resume(*(xpc_connection_t *)this);
  }
}

void sub_1C5330F20(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void XpcConnection::~XpcConnection(XpcConnection *this)
{
  uint64_t v2 = *((void *)this + 11);
  if (v2)
  {
    (*(void (**)(void))(v2 + 16))();
    _Block_release(*((const void **)this + 11));
  }
  uint64_t v56 = 0;
  long long v57 = &v56;
  uint64_t v58 = 0x4002000000;
  long long v59 = __Block_byref_object_copy__1;
  long long v60 = __Block_byref_object_dispose__1;
  uint64_t v61 = 0;
  std::string::size_type v62 = 0;
  uint64_t v63 = 0;
  v52[0] = 0;
  v52[1] = v52;
  v52[2] = 0x4002000000;
  v52[3] = __Block_byref_object_copy__1;
  v52[4] = __Block_byref_object_dispose__2;
  std::string __p = 0;
  long long v54 = 0;
  long long v55 = 0;
  uint64_t v3 = *((void *)this + 8);
  if (v3)
  {
    uint64_t v4 = (char *)operator new(8uLL);
    *(void *)uint64_t v4 = v3;
    unint64_t v5 = v4 + 8;
    long long v54 = v4 + 8;
    long long v55 = v4 + 8;
    std::string __p = v4;
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
  }
  uint64_t v6 = *((void *)this + 9);
  if (v6)
  {
    uint64_t v7 = v5 - v4;
    uint64_t v8 = (v5 - v4) >> 3;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    if (v7 >> 2 > v9) {
      unint64_t v9 = v7 >> 2;
    }
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10)
    {
      if (v10 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(8 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    char v12 = &v11[8 * v8];
    *(void *)char v12 = v6;
    uint64_t v13 = v12 + 8;
    if (v5 != v4)
    {
      do
      {
        uint64_t v14 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v12 - 1) = v14;
        v12 -= 8;
      }
      while (v5 != v4);
      uint64_t v4 = (char *)__p;
    }
    std::string __p = v12;
    long long v54 = v13;
    long long v55 = &v11[8 * v10];
    if (v4) {
      operator delete(v4);
    }
    long long v54 = v13;
  }
  uint64_t v15 = *((void *)this + 10);
  if (v15)
  {
    uint64_t v16 = v57;
    int v18 = (void *)v57[6];
    unint64_t v17 = v57[7];
    if ((unint64_t)v18 >= v17)
    {
      uint64_t v20 = v57[5];
      uint64_t v21 = ((uint64_t)v18 - v20) >> 3;
      if ((unint64_t)(v21 + 1) >> 61) {
LABEL_74:
      }
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      uint64_t v22 = v17 - v20;
      uint64_t v23 = v22 >> 2;
      if (v22 >> 2 <= (unint64_t)(v21 + 1)) {
        uint64_t v23 = v21 + 1;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v24 = v23;
      }
      if (v24)
      {
        unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v24);
        uint64_t v15 = *((void *)this + 10);
      }
      else
      {
        uint64_t v25 = 0;
      }
      uint64_t v26 = (void *)(v24 + 8 * v21);
      unint64_t v27 = v24 + 8 * v25;
      void *v26 = v15;
      uint64_t v19 = v26 + 1;
      uint64_t v29 = (char *)v16[5];
      std::locale v28 = (char *)v16[6];
      if (v28 != v29)
      {
        do
        {
          uint64_t v30 = *((void *)v28 - 1);
          v28 -= 8;
          *--uint64_t v26 = v30;
        }
        while (v28 != v29);
        std::locale v28 = (char *)v16[5];
      }
      v16[5] = (uint64_t)v26;
      v16[6] = (uint64_t)v19;
      v16[7] = v27;
      if (v28) {
        operator delete(v28);
      }
    }
    else
    {
      *int v18 = v15;
      uint64_t v19 = v18 + 1;
    }
    v16[6] = (uint64_t)v19;
  }
  long long v31 = (XpcConnection *)*((void *)this + 2);
  if (v31 != (XpcConnection *)((char *)this + 24))
  {
    do
    {
      uint64_t v32 = v57;
      uint64_t v34 = (void *)v57[6];
      unint64_t v33 = v57[7];
      if ((unint64_t)v34 >= v33)
      {
        uint64_t v36 = v57[5];
        uint64_t v37 = ((uint64_t)v34 - v36) >> 3;
        if ((unint64_t)(v37 + 1) >> 61) {
          goto LABEL_74;
        }
        uint64_t v38 = v33 - v36;
        uint64_t v39 = v38 >> 2;
        if (v38 >> 2 <= (unint64_t)(v37 + 1)) {
          uint64_t v39 = v37 + 1;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v40 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v39;
        }
        if (v40) {
          unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v40);
        }
        else {
          uint64_t v41 = 0;
        }
        uint64_t v42 = (void *)(v40 + 8 * v37);
        *uint64_t v42 = *((void *)v31 + 7);
        uint64_t v35 = v42 + 1;
        uint64_t v44 = (char *)v32[5];
        std::string v43 = (char *)v32[6];
        if (v43 != v44)
        {
          do
          {
            uint64_t v45 = *((void *)v43 - 1);
            v43 -= 8;
            *--uint64_t v42 = v45;
          }
          while (v43 != v44);
          std::string v43 = (char *)v32[5];
        }
        v32[5] = (uint64_t)v42;
        v32[6] = (uint64_t)v35;
        v32[7] = v40 + 8 * v41;
        if (v43) {
          operator delete(v43);
        }
      }
      else
      {
        *uint64_t v34 = *((void *)v31 + 7);
        uint64_t v35 = v34 + 1;
      }
      v32[6] = (uint64_t)v35;
      int v46 = (XpcConnection *)*((void *)v31 + 1);
      if (v46)
      {
        do
        {
          int v47 = v46;
          int v46 = *(XpcConnection **)v46;
        }
        while (v46);
      }
      else
      {
        do
        {
          int v47 = (XpcConnection *)*((void *)v31 + 2);
          BOOL v48 = *(void *)v47 == (void)v31;
          long long v31 = v47;
        }
        while (!v48);
      }
      long long v31 = v47;
    }
    while (v47 != (XpcConnection *)((char *)this + 24));
  }
  uint64_t v49 = *(void *)this;
  if (*(void *)this) {
    xpc_connection_cancel(*(xpc_connection_t *)this);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN13XpcConnectionD2Ev_block_invoke;
  block[3] = &unk_1E650FB90;
  block[4] = v52;
  block[5] = &v56;
  block[6] = v49;
  long long v50 = *((void *)this + 1);
  if (v50)
  {
    dispatch_async(v50, block);
    dispatch_release(*((dispatch_object_t *)this + 1));
    *((void *)this + 1) = 0;
  }
  else
  {
    ___ZN13XpcConnectionD2Ev_block_invoke(block);
  }
  _Block_object_dispose(v52, 8);
  if (__p)
  {
    long long v54 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v56, 8);
  if (v61)
  {
    std::string::size_type v62 = v61;
    operator delete(v61);
  }
  std::__tree<std::string>::destroy((uint64_t)this + 40, *((char **)this + 6));
  std::__tree<std::string>::destroy((uint64_t)this + 16, *((char **)this + 3));
}

__n128 __Block_byref_object_copy__1(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

{
  __n128 result;

  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void ___ZN13XpcConnectionD2Ev_block_invoke(void *a1)
{
  uint64_t v2 = (void *)a1[6];
  if (v2) {
    xpc_release(v2);
  }
  uint64_t v3 = *(void *)(a1[4] + 8);
  for (uint64_t i = *(const void ***)(v3 + 40); i != *(const void ***)(v3 + 48); ++i)
  {
    unint64_t v5 = *i;
    _Block_release(v5);
    uint64_t v3 = *(void *)(a1[4] + 8);
  }
  uint64_t v6 = *(void *)(a1[5] + 8);
  for (unint64_t j = *(const void ***)(v6 + 40); j != *(const void ***)(v6 + 48); ++j)
  {
    uint64_t v8 = *j;
    _Block_release(v8);
    uint64_t v6 = *(void *)(a1[5] + 8);
  }
}

void ___ZN13XpcConnection23initializeConnection_nlEb_block_invoke(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *a2;
  xpc_object_t original = v3;
  if (v3)
  {
    xpc_retain(v3);
    xpc_object_t v4 = original;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t original = v4;
  }
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(v4);
  uint64_t v6 = remote_connection;
  if (remote_connection) {
    xpc_retain(remote_connection);
  }
  else {
    uint64_t v6 = (_xpc_connection_s *)xpc_null_create();
  }
  xpc_object_t xstring = 0;
  __p[0] = &original;
  __p[1] = "request";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)__p, &xstring);
  if (MEMORY[0x1C878F160](xstring) == MEMORY[0x1E4F145D8])
  {
    xpc::dict::to_debug_string((xpc::dict *)__p, (uint64_t)original);
    if (v28 >= 0) {
      char v12 = __p;
    }
    else {
      char v12 = (void **)__p[0];
    }
    syslog(5, "got no key named 'request'; got: %s\n", (const char *)v12);
  }
  else
  {
    string_ptr = (char *)xpc_string_get_string_ptr(xstring);
    if (string_ptr)
    {
      uint64_t v8 = *(void (***)(void *, xpc_object_t *))(v2 + 80);
      xpc_object_t message = 0;
      xpc_object_t reply = xpc_dictionary_create_reply(original);
      xpc_object_t v10 = reply;
      uint64_t v11 = MEMORY[0x1E4F14590];
      if (reply)
      {
        xpc_object_t message = reply;
      }
      else
      {
        xpc_object_t v10 = xpc_null_create();
        xpc_object_t message = v10;
        if (!v10)
        {
          xpc_object_t v14 = xpc_null_create();
          xpc_object_t v10 = 0;
          goto LABEL_26;
        }
      }
      if (MEMORY[0x1C878F160](v10) == v11)
      {
        xpc_retain(v10);
        goto LABEL_27;
      }
      xpc_object_t v14 = xpc_null_create();
LABEL_26:
      xpc_object_t message = v14;
LABEL_27:
      xpc_release(v10);
      xpc_object_t v15 = message;
      if (MEMORY[0x1C878F160](message) == v11)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, string_ptr);
        uint64_t v19 = *(void **)(v2 + 48);
        int v18 = (void **)(v2 + 48);
        unint64_t v17 = v19;
        if (!v19) {
          goto LABEL_44;
        }
        uint64_t v20 = v18;
        do
        {
          char v21 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17 + 4, __p);
          if (v21 >= 0) {
            uint64_t v22 = v17;
          }
          else {
            uint64_t v22 = v17 + 1;
          }
          if (v21 >= 0) {
            uint64_t v20 = (void **)v17;
          }
          unint64_t v17 = (void *)*v22;
        }
        while (*v22);
        if (v20 == v18
          || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__p, v20 + 4) & 0x80) != 0)
        {
LABEL_44:
          uint64_t v20 = v18;
        }
        if (v28 < 0) {
          operator delete(__p[0]);
        }
        if (v18 != v20)
        {
          uint64_t v23 = (void (**)(void *, xpc_object_t *, xpc_object_t *))v20[7];
          if (v23)
          {
            v23[2](v23, &original, &message);
            xpc_connection_send_message(v6, message);
            xpc_object_t v15 = message;
            goto LABEL_58;
          }
        }
        xpc::dict::to_debug_string((xpc::dict *)__p, (uint64_t)original);
        if (v28 >= 0) {
          unint64_t v24 = __p;
        }
        else {
          unint64_t v24 = (void **)__p[0];
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, string_ptr);
        uint64_t v16 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v2 + 16, __p);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
        if ((void **)(v2 + 24) != v16) {
          uint64_t v8 = (void (**)(void *, xpc_object_t *))v16[7];
        }
        if (v8)
        {
          v8[2](v8, &original);
LABEL_58:
          xpc_release(v15);
          goto LABEL_59;
        }
        xpc::dict::to_debug_string((xpc::dict *)__p, (uint64_t)original);
        if (v28 >= 0) {
          unint64_t v24 = __p;
        }
        else {
          unint64_t v24 = (void **)__p[0];
        }
      }
      syslog(5, "Unhandled message for request: %s\n", (const char *)v24);
      if (v28 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_58;
    }
    xpc::dict::to_debug_string((xpc::dict *)__p, (uint64_t)original);
    if (v28 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    syslog(5, "got empty request, dropping; got: %s\n", (const char *)v13);
  }
  if (v28 < 0) {
    operator delete(__p[0]);
  }
LABEL_59:
  xpc_release(xstring);
  xpc_release(v6);
  xpc_release(original);
}

void sub_1C53317E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, xpc_object_t object)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  xpc_release(v20);
  xpc_release(object);
  xpc_release(v19);
  xpc_release(a11);
  _Unwind_Resume(a1);
}

uint64_t ___ZN13XpcConnection23initializeConnection_nlEb_block_invoke_2(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 72);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t ___ZN13XpcConnection23initializeConnection_nlEb_block_invoke_3(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 32) + 64);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void *XpcConnection::setDisconnectionHandler(uint64_t a1, void *aBlock)
{
  xpc_object_t v4 = *(const void **)(a1 + 64);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t result = _Block_copy(aBlock);
  *(void *)(a1 + 64) = result;
  return result;
}

void *XpcConnection::setInterruptionHandler(uint64_t a1, void *aBlock)
{
  xpc_object_t v4 = *(const void **)(a1 + 72);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t result = _Block_copy(aBlock);
  *(void *)(a1 + 72) = result;
  return result;
}

uint64_t *XpcConnection::setHandlerForMessage(uint64_t a1, void **a2, const void *a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 16);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 16, a2);
  if ((void **)(a1 + 24) != v7) {
    _Block_release(v7[7]);
  }
  uint64_t v8 = _Block_copy(a3);
  xpc_object_t v10 = a2;
  uint64_t result = std::__tree<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v10);
  result[7] = (uint64_t)v8;
  return result;
}

void *XpcConnection::setDefaultMessageHandler(uint64_t a1, void *aBlock)
{
  xpc_object_t v4 = *(const void **)(a1 + 80);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t result = _Block_copy(aBlock);
  *(void *)(a1 + 80) = result;
  return result;
}

void xpc::dict::to_debug_string(xpc::dict *this, uint64_t a2)
{
  uint64_t v3 = (char *)MEMORY[0x1C878F0C0](a2);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  std::string::basic_string[abi:ne180100]<0>(this, v3);
  free(v3);
}

void ___ZL15setEventHandlerP17_xpc_connection_sU13block_pointerFvRKN3xpc4dictEEU13block_pointerFvvES8_PS8__block_invoke(void *a1, void *a2)
{
  if (*(unsigned char *)(*(void *)(a1[7] + 8) + 24))
  {
    xpc_object_t v2 = a2;
    uint64_t v4 = MEMORY[0x1C878F160](a2);
    if (v4 != MEMORY[0x1E4F145A8])
    {
      uint64_t v5 = MEMORY[0x1E4F14590];
      if (v4 != MEMORY[0x1E4F14590])
      {
        syslog(5, "Got unexpected event\n");
        return;
      }
      uint64_t v7 = a1[6];
      if (v2)
      {
        xpc_retain(v2);
        xpc_object_t object = v2;
      }
      else
      {
        xpc_object_t v2 = xpc_null_create();
        xpc_object_t object = v2;
        if (!v2)
        {
          xpc_object_t v9 = xpc_null_create();
          xpc_object_t v2 = 0;
          goto LABEL_20;
        }
      }
      if (MEMORY[0x1C878F160](v2) == v5)
      {
        xpc_retain(v2);
LABEL_21:
        (*(void (**)(uint64_t, xpc_object_t *))(v7 + 16))(v7, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        xpc_release(v2);
        return;
      }
      xpc_object_t v9 = xpc_null_create();
LABEL_20:
      xpc_object_t object = v9;
      goto LABEL_21;
    }
    if (v2 == (xpc_object_t)MEMORY[0x1E4F14520])
    {
      syslog(5, "Connection interrupted!\n");
      uint64_t v6 = a1[4];
      if (!v6) {
        return;
      }
    }
    else
    {
      if (v2 != (xpc_object_t)MEMORY[0x1E4F14528]) {
        return;
      }
      syslog(5, "Connection invalid!\n");
      uint64_t v6 = a1[5];
      if (!v6) {
        return;
      }
    }
    uint64_t v8 = *(void (**)(void))(v6 + 16);
    v8();
  }
}

void sub_1C5331C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

uint64_t ___ZL15setEventHandlerP17_xpc_connection_sU13block_pointerFvRKN3xpc4dictEEU13block_pointerFvvES8_PS8__block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::__map_value_compare<std::string,std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,void({block_pointer})(xpc::dict const&)>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t v8 = (std::string *)(v7 + 32);
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  *((void *)v7 + 7) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1C5331D90(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void SipLocationDiscoveryData::SipLocationDiscoveryData(SipLocationDiscoveryData *this)
{
  *(void *)this = &unk_1F20C81E8;
  xpc_object_t v2 = (char *)this + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "requestForLocationInformation");
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v2, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_1F20C3190;
  *((void *)this + 1) = &unk_1F20C3208;
  *((unsigned char *)this + 64) = 0;
}

void sub_1C5331E64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipLocationDiscoveryData::SipLocationDiscoveryData(SipLocationDiscoveryData *this, const SipLocationDiscoveryData *a2)
{
  *(void *)this = &unk_1F20C81E8;
  char v4 = (char *)this + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "requestForLocationInformation");
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v4, (long long *)__p, 0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_1F20C3190;
  *((void *)this + 1) = &unk_1F20C3208;
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
}

void sub_1C5331F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipLocationDiscoveryData::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  int v4 = (char)v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3 == 7)
  {
    if (v4 >= 0) {
      uint64_t v5 = (int *)a2;
    }
    else {
      uint64_t v5 = *(int **)a2;
    }
    int v6 = *v5;
    int v7 = *(int *)((char *)v5 + 3);
    if (v6 == 1399156335 && v7 == 1953458259) {
      *(unsigned char *)(a1 + 64) = 1;
    }
  }
  return bambi::XmlParserItem::parseChild(a1, a2, a3);
}

void SipLocationDiscoveryData::constructTree(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  bambi::XmlTreeItem::makeNode(a1);
}

void sub_1C5332094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v17 + 8);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipLocationDiscoveryData::constructTree(void *a1@<X8>)
{
}

void SipLocationDiscoveryData::~SipLocationDiscoveryData(void **this)
{
}

{
  uint64_t vars8;

  bambi::XmlTreeItem::~XmlTreeItem(this + 1);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipLocationDiscoveryData::~SipLocationDiscoveryData(void **this)
{
  bambi::XmlTreeItem::~XmlTreeItem(this);
  JUMPOUT(0x1C878E320);
}

void *ims::toString<nas::ProcedureType>@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4 > 6) {
    uint64_t v5 = "???";
  }
  else {
    uint64_t v5 = off_1E650FC60[v4];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

uint64_t QMINasCache::mapRadioType(QMINasCache *this, const ims::AccessNetwork *a2)
{
  if (ims::AccessNetwork::isLTE(this))
  {
    return 8;
  }
  else if (ims::AccessNetwork::isWifi(this))
  {
    return 6;
  }
  else if (ims::AccessNetwork::isNR(this))
  {
    return 12;
  }
  else
  {
    return -1;
  }
}

double QMINasCache::start@<D0>(QMINasCache *this@<X0>, const ims::AccessNetwork *a2@<X3>, const ims::AccessNetwork *a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v8 = (char)a3;
  uint64_t v11 = 40;
  if (a3) {
    uint64_t v11 = 16;
  }
  char v12 = (char *)this + v11;
  uint64_t v13 = 1;
  if ((a4 & 2) != 0) {
    uint64_t v13 = 2;
  }
  if ((a4 & 4) != 0) {
    uint64_t v13 = 4;
  }
  if (a5) {
    unint64_t v14 = 8;
  }
  else {
    unint64_t v14 = v13;
  }
  int v15 = QMINasCache::mapRadioType(a2, a3);
  int v16 = v15;
  int v18 = (uint64_t **)(v12 + 8);
  uint64_t v17 = (uint64_t *)*((void *)v12 + 1);
  if (!v17)
  {
    *(_DWORD *)((char *)v55 + 3) = 0;
    LODWORD(v55[0]) = 0;
    int v24 = *((_DWORD *)this + 2);
    *((unsigned char *)this + 64) = v8;
    *((void *)this + 9) = v14;
    uint64_t v25 = (uint64_t **)(v12 + 8);
LABEL_40:
    uint64_t v29 = (char *)operator new(0x48uLL);
    *((void *)v29 + 4) = v14;
    *((_DWORD *)v29 + 10) = 1;
    *((_DWORD *)v29 + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v24;
    v29[48] = 0;
    *(_DWORD *)(v29 + 49) = v55[0];
    *((_DWORD *)v29 + 13) = *(_DWORD *)((char *)v55 + 3);
    *((void *)v29 + 7) = v14;
    *((_DWORD *)v29 + 16) = 0;
    v29[68] = v16;
    v29[69] = v16;
    *((_WORD *)v29 + 35) = 0;
    std::__tree<unsigned int>::__insert_node_at((uint64_t **)v12, (uint64_t)v25, v18, (uint64_t *)v29);
LABEL_41:
    std::string::basic_string[abi:ne180100]<0>(v55, "nas");
    std::string::basic_string[abi:ne180100]<0>(v53, "");
    uint64_t v30 = ims::debug((uint64_t)v55, (uint64_t)v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"Sending status request START on instance ", 41);
    *(unsigned char *)(v30 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v30 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)" for media ", 11);
    *(unsigned char *)(v30 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v51, off_1E650FCB0[v14 - 1]);
    (*(void (**)(uint64_t, void **))(*(void *)v30 + 32))(v30, v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)" and RAT ", 9);
    *(unsigned char *)(v30 + 17) = 0;
    long long v31 = (char *)nas::asString(v16);
    std::string::basic_string[abi:ne180100]<0>(__p, v31);
    (*(void (**)(uint64_t, void **))(*(void *)v30 + 32))(v30, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v30 + 17) = 0;
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    if (v52 < 0) {
      operator delete(v51[0]);
    }
    if (v54 < 0) {
      operator delete(v53[0]);
    }
    if (v56 < 0) {
      operator delete(v55[0]);
    }
    if (!*(void *)this) {
      goto LABEL_52;
    }
    uint64_t v32 = *(void (**)(void))(**(void **)this + 16);
LABEL_51:
    v32();
LABEL_52:
    double result = 0.0;
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 56) = 0u;
    *(void *)a6 = &unk_1F20B2680;
    *(void *)(a6 + 8) = &_bambiDomain;
    *(_DWORD *)(a6 + 16) = 0;
    return result;
  }
  uint64_t v19 = v12 + 8;
  uint64_t v20 = (void *)*((void *)v12 + 1);
  do
  {
    unint64_t v21 = v20[4];
    BOOL v22 = v21 >= v14;
    if (v21 >= v14) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = v20 + 1;
    }
    if (v22) {
      uint64_t v19 = (char *)v20;
    }
    uint64_t v20 = (void *)*v23;
  }
  while (*v23);
  if (v19 == (char *)v18 || v14 < *((void *)v19 + 4))
  {
    *(_DWORD *)((char *)v55 + 3) = 0;
    LODWORD(v55[0]) = 0;
    int v24 = *((_DWORD *)this + 2);
    *((unsigned char *)this + 64) = v8;
    *((void *)this + 9) = v14;
    do
    {
      while (1)
      {
        uint64_t v25 = (uint64_t **)v17;
        unint64_t v26 = v17[4];
        if (v26 <= v14) {
          break;
        }
        uint64_t v17 = *v25;
        if (!*v25)
        {
          int v18 = v25;
          goto LABEL_40;
        }
      }
      if (v26 >= v14) {
        goto LABEL_41;
      }
      uint64_t v17 = v25[1];
    }
    while (v17);
    int v18 = v25 + 1;
    goto LABEL_40;
  }
  if (v19[69] == v15)
  {
    ++*((_DWORD *)v19 + 10);
    std::string::basic_string[abi:ne180100]<0>(v55, "nas");
    std::string::basic_string[abi:ne180100]<0>(v53, "");
    uint64_t v27 = ims::debug((uint64_t)v55, (uint64_t)v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"ignoring duplicate START call status request (", 46);
    *(unsigned char *)(v27 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v27 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)" total) on instance ", 20);
    *(unsigned char *)(v27 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v27 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)" for media ", 11);
    *(unsigned char *)(v27 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v51, off_1E650FCB0[v14 - 1]);
    (*(void (**)(uint64_t, void **))(*(void *)v27 + 32))(v27, v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)" and RAT ", 9);
    *(unsigned char *)(v27 + 17) = 0;
    char v28 = (char *)nas::asString(v16);
    std::string::basic_string[abi:ne180100]<0>(__p, v28);
    (*(void (**)(uint64_t, void **))(*(void *)v27 + 32))(v27, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v27 + 17) = 0;
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    if (v52 < 0) {
      operator delete(v51[0]);
    }
    if (v54 < 0) {
      operator delete(v53[0]);
    }
    if (v56 < 0) {
      operator delete(v55[0]);
    }
    if (*(void *)this) {
      (*(void (**)(void, void, uint64_t, uint64_t))(**(void **)this + 24))(*(void *)this, *((unsigned int *)this + 2), a4, a5);
    }
    goto LABEL_52;
  }
  uint64_t v34 = v12 + 8;
  do
  {
    unint64_t v35 = v17[4];
    BOOL v36 = v35 >= v14;
    if (v35 >= v14) {
      uint64_t v37 = (uint64_t **)v17;
    }
    else {
      uint64_t v37 = (uint64_t **)(v17 + 1);
    }
    if (v36) {
      uint64_t v34 = (char *)v17;
    }
    uint64_t v17 = *v37;
  }
  while (*v37);
  if (v34 != (char *)v18 && v14 >= *((void *)v34 + 4))
  {
    if (v34[69] == v15)
    {
      std::string::basic_string[abi:ne180100]<0>(v55, "nas");
      std::string::basic_string[abi:ne180100]<0>(v53, "");
      uint64_t v38 = ims::debug((uint64_t)v55, (uint64_t)v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"Ignoring UPDATE request on instance ", 36);
      *(unsigned char *)(v38 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v38 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)" for media ", 11);
      *(unsigned char *)(v38 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(v51, off_1E650FCB0[v14 - 1]);
      (*(void (**)(uint64_t, void **))(*(void *)v38 + 32))(v38, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)".  RAT type ", 12);
      *(unsigned char *)(v38 + 17) = 0;
      uint64_t v39 = (char *)nas::asString(v16);
      std::string::basic_string[abi:ne180100]<0>(__p, v39);
      (*(void (**)(uint64_t, void **))(*(void *)v38 + 32))(v38, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)" has not changed!", 17);
      *(unsigned char *)(v38 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v38 + 17) = 0;
      if (v50 < 0) {
        operator delete(__p[0]);
      }
      if (v52 < 0) {
        operator delete(v51[0]);
      }
      if (v54 < 0) {
        operator delete(v53[0]);
      }
      if (v56 < 0) {
        operator delete(v55[0]);
      }
      goto LABEL_52;
    }
    std::string::basic_string[abi:ne180100]<0>(v55, "nas");
    std::string::basic_string[abi:ne180100]<0>(v53, "");
    uint64_t v40 = ims::debug((uint64_t)v55, (uint64_t)v53);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"Updating status request ", 24);
    *(unsigned char *)(v40 + 17) = 0;
    uint64_t v41 = *((int *)v34 + 16);
    if (v41 > 2) {
      uint64_t v42 = "???";
    }
    else {
      uint64_t v42 = off_1E650FC98[v41];
    }
    std::string::basic_string[abi:ne180100]<0>(v51, v42);
    (*(void (**)(uint64_t, void **))(*(void *)v40 + 32))(v40, v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)" on instance ", 13);
    *(unsigned char *)(v40 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v40 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)" for media ", 11);
    *(unsigned char *)(v40 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, off_1E650FCB0[v14 - 1]);
    (*(void (**)(uint64_t, void **))(*(void *)v40 + 32))(v40, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)" and RAT ", 9);
    *(unsigned char *)(v40 + 17) = 0;
    std::string v43 = (char *)nas::asString(v34[69]);
    std::string::basic_string[abi:ne180100]<0>(v47, v43);
    (*(void (**)(uint64_t, void **))(*(void *)v40 + 32))(v40, v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)" to ", 4);
    *(unsigned char *)(v40 + 17) = 0;
    uint64_t v44 = (char *)nas::asString(v16);
    std::string::basic_string[abi:ne180100]<0>(v45, v44);
    (*(void (**)(uint64_t, void **))(*(void *)v40 + 32))(v40, v45);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v40 + 17) = 0;
    if (v46 < 0) {
      operator delete(v45[0]);
    }
    if (v48 < 0) {
      operator delete(v47[0]);
    }
    if (v50 < 0) {
      operator delete(__p[0]);
    }
    if (v52 < 0) {
      operator delete(v51[0]);
    }
    if (v54 < 0) {
      operator delete(v53[0]);
    }
    if (v56 < 0) {
      operator delete(v55[0]);
    }
    v34[69] = v16;
    if (!*(void *)this) {
      goto LABEL_52;
    }
    uint64_t v32 = *(void (**)(void))(**(void **)this + 16);
    goto LABEL_51;
  }
  double result = 0.0;
  *(_OWORD *)(a6 + 24) = 0u;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(void *)a6 = &unk_1F20B2680;
  *(void *)(a6 + 8) = &_bambiDomain;
  *(_DWORD *)(a6 + 16) = 1073741836;
  return result;
}

void sub_1C5332C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (*(char *)(v38 - 81) < 0) {
    operator delete(*(void **)(v38 - 104));
  }
  _Unwind_Resume(exception_object);
}

double QMINasCache::connect@<D0>(QMINasCache *this@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = 40;
  if (a2) {
    uint64_t v6 = 16;
  }
  int v7 = (char *)this + v6;
  uint64_t v8 = 1;
  if ((a3 & 2) != 0) {
    uint64_t v8 = 2;
  }
  if ((a3 & 4) != 0) {
    uint64_t v8 = 4;
  }
  if (a4) {
    unint64_t v9 = 8;
  }
  else {
    unint64_t v9 = v8;
  }
  char v12 = (void *)*((void *)v7 + 1);
  long long v10 = v7 + 8;
  uint64_t v11 = v12;
  if (!v12) {
    goto LABEL_21;
  }
  int v15 = v10;
  do
  {
    unint64_t v16 = v11[4];
    BOOL v17 = v16 >= v9;
    if (v16 >= v9) {
      int v18 = v11;
    }
    else {
      int v18 = v11 + 1;
    }
    if (v17) {
      int v15 = (char *)v11;
    }
    uint64_t v11 = (void *)*v18;
  }
  while (*v18);
  if (v15 != v10 && v9 >= *((void *)v15 + 4))
  {
    if (*((_DWORD *)v15 + 16))
    {
      std::string::basic_string[abi:ne180100]<0>(v30, "nas");
      std::string::basic_string[abi:ne180100]<0>(v28, "");
      uint64_t v20 = ims::debug((uint64_t)v30, (uint64_t)v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"Ignoring duplicate CONNECT call status request on instance ", 59);
      *(unsigned char *)(v20 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" for media ", 11);
      *(unsigned char *)(v20 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(v26, off_1E650FCB0[v9 - 1]);
      (*(void (**)(uint64_t, void **))(*(void *)v20 + 32))(v20, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)" and RAT ", 9);
      *(unsigned char *)(v20 + 17) = 0;
      unint64_t v21 = (char *)nas::asString(v15[69]);
      std::string::basic_string[abi:ne180100]<0>(__p, v21);
      (*(void (**)(uint64_t, void **))(*(void *)v20 + 32))(v20, __p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v20 + 17) = 0;
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }
    else
    {
      *((_DWORD *)v15 + 16) = 2;
      std::string::basic_string[abi:ne180100]<0>(v30, "nas");
      std::string::basic_string[abi:ne180100]<0>(v28, "");
      uint64_t v22 = ims::debug((uint64_t)v30, (uint64_t)v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Sending status request CONNECT on instance ", 43);
      *(unsigned char *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v22 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" for media ", 11);
      *(unsigned char *)(v22 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(v26, off_1E650FCB0[v9 - 1]);
      (*(void (**)(uint64_t, void **))(*(void *)v22 + 32))(v22, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" and RAT ", 9);
      *(unsigned char *)(v22 + 17) = 0;
      uint64_t v23 = (char *)nas::asString(v15[69]);
      std::string::basic_string[abi:ne180100]<0>(__p, v23);
      (*(void (**)(uint64_t, void **))(*(void *)v22 + 32))(v22, __p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v22 + 17) = 0;
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      if (v31 < 0) {
        operator delete(v30[0]);
      }
      if (*(void *)this) {
        (*(void (**)(void, void, uint64_t, void, unint64_t, uint64_t))(**(void **)this + 16))(*(void *)this, *((unsigned int *)this + 2), 2, v15[69], v9, a2);
      }
    }
    double result = 0.0;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(void *)a5 = &unk_1F20B2680;
    *(void *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 0;
  }
  else
  {
LABEL_21:
    double result = 0.0;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(void *)a5 = &unk_1F20B2680;
    *(void *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 1073741836;
  }
  return result;
}

void sub_1C5333208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

double QMINasCache::end@<D0>(QMINasCache *this@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = 40;
  if (a2) {
    uint64_t v6 = 16;
  }
  int v7 = (char *)this + v6;
  uint64_t v8 = 1;
  if ((a3 & 2) != 0) {
    uint64_t v8 = 2;
  }
  if ((a3 & 4) != 0) {
    uint64_t v8 = 4;
  }
  if (a4) {
    unint64_t v9 = 8;
  }
  else {
    unint64_t v9 = v8;
  }
  long long v10 = (void *)*((void *)v7 + 1);
  if (!v10) {
    goto LABEL_21;
  }
  uint64_t v13 = v7 + 8;
  do
  {
    unint64_t v14 = v10[4];
    BOOL v15 = v14 >= v9;
    if (v14 >= v9) {
      unint64_t v16 = v10;
    }
    else {
      unint64_t v16 = v10 + 1;
    }
    if (v15) {
      uint64_t v13 = (char *)v10;
    }
    long long v10 = (void *)*v16;
  }
  while (*v16);
  if (v13 == v7 + 8 || v9 < *((void *)v13 + 4))
  {
LABEL_21:
    double result = 0.0;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(void *)a5 = &unk_1F20B2680;
    *(void *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 1073741836;
    return result;
  }
  *((_DWORD *)v13 + 16) = 1;
  int v18 = *((_DWORD *)v13 + 10) - 1;
  *((_DWORD *)v13 + 10) = v18;
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "nas");
    std::string::basic_string[abi:ne180100]<0>(v28, "");
    uint64_t v19 = ims::debug((uint64_t)v30, (uint64_t)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Ignoring duplicate END call status request (", 44);
    *(unsigned char *)(v19 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" remaining) on instance ", 24);
    *(unsigned char *)(v19 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" for media ", 11);
    *(unsigned char *)(v19 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v26, off_1E650FCB0[v9 - 1]);
    (*(void (**)(uint64_t, void **))(*(void *)v19 + 32))(v19, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" and RAT ", 9);
    *(unsigned char *)(v19 + 17) = 0;
    uint64_t v20 = (char *)nas::asString(v13[69]);
    std::string::basic_string[abi:ne180100]<0>(__p, v20);
    (*(void (**)(uint64_t, void **))(*(void *)v19 + 32))(v19, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    if ((v31 & 0x80000000) == 0) {
      goto LABEL_43;
    }
    unint64_t v21 = (char *)v30[0];
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v30, "nas");
    std::string::basic_string[abi:ne180100]<0>(v28, "");
    uint64_t v22 = ims::debug((uint64_t)v30, (uint64_t)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Sending status request END on instance ", 39);
    *(unsigned char *)(v22 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v22 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" for media ", 11);
    *(unsigned char *)(v22 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v26, off_1E650FCB0[v9 - 1]);
    (*(void (**)(uint64_t, void **))(*(void *)v22 + 32))(v22, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" and RAT ", 9);
    *(unsigned char *)(v22 + 17) = 0;
    uint64_t v23 = (char *)nas::asString(v13[69]);
    std::string::basic_string[abi:ne180100]<0>(__p, v23);
    (*(void (**)(uint64_t, void **))(*(void *)v22 + 32))(v22, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v22 + 17) = 0;
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
    if (*(void *)this) {
      (*(void (**)(void, void, uint64_t, void, unint64_t, uint64_t))(**(void **)this + 16))(*(void *)this, *((unsigned int *)this + 2), 1, v13[69], v9, a2);
    }
    std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer((uint64_t **)v7, (uint64_t *)v13);
    unint64_t v21 = v13;
  }
  operator delete(v21);
LABEL_43:
  double result = 0.0;
  *(_OWORD *)(a5 + 24) = 0u;
  *(_OWORD *)(a5 + 40) = 0u;
  *(_OWORD *)(a5 + 56) = 0u;
  *(void *)a5 = &unk_1F20B2680;
  *(void *)(a5 + 8) = &_bambiDomain;
  *(_DWORD *)(a5 + 16) = 0;
  return result;
}

void sub_1C5333760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

double QMINasCache::update@<D0>(QMINasCache *this@<X0>, const ims::AccessNetwork *a2@<X1>, uint64_t a3@<X8>)
{
  QMINasCache::update(this, (const ims::AccessNetwork *)1, a2);
  QMINasCache::update(this, 0, a2);
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

uint64_t QMINasCache::update(QMINasCache *this, const ims::AccessNetwork *a2, const ims::AccessNetwork *a3)
{
  if (a2) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = 40;
  }
  if (a2) {
    uint64_t v6 = (char *)this + 16;
  }
  else {
    uint64_t v6 = (char *)this + 40;
  }
  uint64_t result = QMINasCache::mapRadioType(a3, a2);
  uint64_t v8 = *(char **)((char *)this + v5);
  unint64_t v9 = v6 + 8;
  if (v8 != v9)
  {
    uint64_t v10 = result;
    do
    {
      if (v8[69] != v10)
      {
        if (*((_DWORD *)v8 + 16) != 1)
        {
          std::string::basic_string[abi:ne180100]<0>(v31, "nas");
          std::string::basic_string[abi:ne180100]<0>(v29, "");
          uint64_t v11 = ims::debug((uint64_t)v31, (uint64_t)v29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Updating status request ", 24);
          *(unsigned char *)(v11 + 17) = 0;
          uint64_t v12 = *((int *)v8 + 16);
          uint64_t v13 = "???";
          if (v12 <= 2) {
            uint64_t v13 = off_1E650FC98[v12];
          }
          std::string::basic_string[abi:ne180100]<0>(v27, v13);
          (*(void (**)(uint64_t, void **))(*(void *)v11 + 32))(v11, v27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" on instance ", 13);
          *(unsigned char *)(v11 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v11 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" for media ", 11);
          *(unsigned char *)(v11 + 17) = 0;
          unint64_t v14 = *((void *)v8 + 7) - 1;
          BOOL v15 = "???";
          if (v14 <= 7) {
            BOOL v15 = off_1E650FCB0[v14];
          }
          std::string::basic_string[abi:ne180100]<0>(v25, v15);
          (*(void (**)(uint64_t, void **))(*(void *)v11 + 32))(v11, v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" and RAT ", 9);
          *(unsigned char *)(v11 + 17) = 0;
          unint64_t v16 = (char *)nas::asString(v8[69]);
          std::string::basic_string[abi:ne180100]<0>(v23, v16);
          (*(void (**)(uint64_t, void **))(*(void *)v11 + 32))(v11, v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" to ", 4);
          *(unsigned char *)(v11 + 17) = 0;
          BOOL v17 = (char *)nas::asString(v10);
          std::string::basic_string[abi:ne180100]<0>(__p, v17);
          (*(void (**)(uint64_t, void **))(*(void *)v11 + 32))(v11, __p);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v11 + 17) = 0;
          if (v22 < 0) {
            operator delete(__p[0]);
          }
          if (v24 < 0) {
            operator delete(v23[0]);
          }
          if (v26 < 0) {
            operator delete(v25[0]);
          }
          if (v28 < 0) {
            operator delete(v27[0]);
          }
          if (v30 < 0) {
            operator delete(v29[0]);
          }
          if (v32 < 0) {
            operator delete(v31[0]);
          }
          uint64_t result = *(void *)this;
          if (*(void *)this) {
            uint64_t result = (*(uint64_t (**)(uint64_t, void, void, uint64_t, void, const ims::AccessNetwork *))(*(void *)result + 16))(result, *((unsigned int *)this + 2), *((unsigned int *)v8 + 16), v10, *((void *)v8 + 7), a2);
          }
        }
        v8[69] = v10;
      }
      int v18 = (char *)*((void *)v8 + 1);
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          int v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (char *)*((void *)v8 + 2);
          BOOL v20 = *(void *)v19 == (void)v8;
          uint64_t v8 = v19;
        }
        while (!v20);
      }
      uint64_t v8 = v19;
    }
    while (v19 != v9);
  }
  return result;
}

void sub_1C5333C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (*(char *)(v38 - 81) < 0) {
    operator delete(*(void **)(v38 - 104));
  }
  _Unwind_Resume(exception_object);
}

double QMINasCache::cancel@<D0>(QMINasCache *this@<X0>, int a2@<W1>, char a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6 = 40;
  if (a2) {
    uint64_t v6 = 16;
  }
  int v7 = (char *)this + v6;
  uint64_t v8 = 1;
  if ((a3 & 2) != 0) {
    uint64_t v8 = 2;
  }
  if ((a3 & 4) != 0) {
    uint64_t v8 = 4;
  }
  if (a4) {
    unint64_t v9 = 8;
  }
  else {
    unint64_t v9 = v8;
  }
  uint64_t v10 = (void *)*((void *)v7 + 1);
  if (!v10) {
    goto LABEL_21;
  }
  uint64_t v11 = v7 + 8;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= v9;
    if (v12 >= v9) {
      unint64_t v14 = v10;
    }
    else {
      unint64_t v14 = v10 + 1;
    }
    if (v13) {
      uint64_t v11 = (char *)v10;
    }
    uint64_t v10 = (void *)*v14;
  }
  while (*v14);
  if (v11 != v7 + 8 && v9 >= *((void *)v11 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "nas");
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    uint64_t v16 = ims::debug((uint64_t)v24, (uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Removing call status record on instance ", 40);
    *(unsigned char *)(v16 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v16 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" for media ", 11);
    *(unsigned char *)(v16 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(v20, off_1E650FCB0[v9 - 1]);
    (*(void (**)(uint64_t, void **))(*(void *)v16 + 32))(v16, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" and RAT ", 9);
    *(unsigned char *)(v16 + 17) = 0;
    BOOL v17 = (char *)nas::asString(v11[69]);
    std::string::basic_string[abi:ne180100]<0>(__p, v17);
    (*(void (**)(uint64_t, void **))(*(void *)v16 + 32))(v16, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (v21 < 0) {
      operator delete(v20[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer((uint64_t **)v7, (uint64_t *)v11);
    operator delete(v11);
    double result = 0.0;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(void *)a5 = &unk_1F20B2680;
    *(void *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 0;
  }
  else
  {
LABEL_21:
    double result = 0.0;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(void *)a5 = &unk_1F20B2680;
    *(void *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 1073741836;
  }
  return result;
}

void sub_1C5333F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

double QMINasCache::cancelLast@<D0>(QMINasCache *this@<X0>, BOOL *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)this + 64)) {
    uint64_t v4 = (char *)this + 16;
  }
  else {
    uint64_t v4 = (char *)this + 40;
  }
  if (a2) {
    *a2 = *((unsigned char *)this + 64);
  }
  uint64_t v5 = (void *)*((void *)v4 + 1);
  if (!v5) {
    goto LABEL_17;
  }
  unint64_t v6 = *((void *)this + 9);
  int v7 = v4 + 8;
  do
  {
    unint64_t v8 = v5[4];
    BOOL v9 = v8 >= v6;
    if (v8 >= v6) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 + 1;
    }
    if (v9) {
      int v7 = (char *)v5;
    }
    uint64_t v5 = (void *)*v10;
  }
  while (*v10);
  if (v7 == v4 + 8 || v6 < *((void *)v7 + 4))
  {
LABEL_17:
    double result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    int v12 = 1073741836;
LABEL_18:
    *(_DWORD *)(a3 + 16) = v12;
    return result;
  }
  if (*((_DWORD *)v7 + 16))
  {
    double result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    int v12 = 1073741826;
    goto LABEL_18;
  }
  std::string::basic_string[abi:ne180100]<0>(v23, "nas");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  uint64_t v13 = ims::debug((uint64_t)v23, (uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Removing call status record on instance ", 40);
  *(unsigned char *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" for media ", 11);
  *(unsigned char *)(v13 + 17) = 0;
  unint64_t v14 = *((void *)v7 + 7) - 1;
  if (v14 > 7) {
    BOOL v15 = "???";
  }
  else {
    BOOL v15 = off_1E650FCB0[v14];
  }
  std::string::basic_string[abi:ne180100]<0>(v19, v15);
  (*(void (**)(uint64_t, void **))(*(void *)v13 + 32))(v13, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" and RAT ", 9);
  *(unsigned char *)(v13 + 17) = 0;
  uint64_t v16 = (char *)nas::asString(v7[69]);
  std::string::basic_string[abi:ne180100]<0>(__p, v16);
  (*(void (**)(uint64_t, void **))(*(void *)v13 + 32))(v13, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer((uint64_t **)v4, (uint64_t *)v7);
  operator delete(v7);
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void sub_1C5334300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

double QMINasCache::setLastResponded@<D0>(QMINasCache *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = 1073741836;
  uint64_t v3 = (char *)this + 16;
  if (!*((unsigned char *)this + 64)) {
    uint64_t v3 = (char *)this + 40;
  }
  unint64_t v6 = (void *)*((void *)v3 + 1);
  uint64_t v4 = v3 + 8;
  uint64_t v5 = v6;
  if (v6)
  {
    unint64_t v7 = *((void *)this + 9);
    unint64_t v8 = v4;
    do
    {
      unint64_t v9 = v5[4];
      BOOL v10 = v9 >= v7;
      if (v9 >= v7) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = v5 + 1;
      }
      if (v10) {
        unint64_t v8 = (char *)v5;
      }
      uint64_t v5 = (void *)*v11;
    }
    while (*v11);
    if (v8 != v4 && v7 >= *((void *)v8 + 4))
    {
      int v2 = 1073741826;
      if (!*((_DWORD *)v8 + 16) && !v8[48])
      {
        int v2 = 0;
        v8[48] = 1;
      }
    }
  }
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = v2;
  return result;
}

uint64_t *std::__tree<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::__map_value_compare<nas::CallMediaType,std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>,std::less<nas::CallMediaType>,true>,std::allocator<std::__value_type<nas::CallMediaType,QMINasCache::CallStatusRecord>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  int v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      int v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  unint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  return std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
}

uint64_t BambiCallEvent::BambiCallEvent(uint64_t a1, int a2, uint64_t *a3)
{
  *(void *)a1 = &unk_1F20B8640;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (v5)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
    unint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v5;
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void BambiCallEvent::BambiCallEvent(BambiCallEvent *this, const BambiCallEvent *a2)
{
  *(void *)this = &unk_1F20B8640;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  uint64_t v3 = *((void *)a2 + 2);
  uint64_t v4 = *((void *)a2 + 3);
  if (v4)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
    *((void *)this + 2) = v3;
    *((void *)this + 3) = v4;
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    *((void *)this + 2) = v3;
    *((void *)this + 3) = 0;
  }
}

uint64_t BambiCallNamedEvent::BambiCallNamedEvent(uint64_t a1, long long *a2)
{
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v4 = (void *)BambiCallEvent::BambiCallEvent(a1, 0, v8);
  void *v4 = &unk_1F20C32B8;
  uint64_t v5 = (std::string *)(v4 + 5);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1C53345E4(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F20B8640;
  uint64_t v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallNamedEvent::fullName(BambiCallNamedEvent *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((void *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 7);
  }
}

void BambiCallSessionRequestedEvent::~BambiCallSessionRequestedEvent(BambiCallSessionRequestedEvent *this)
{
  *(void *)this = &unk_1F20B8640;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20B8640;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

void BambiCallProvisionalResponseEvent::BambiCallProvisionalResponseEvent(BambiCallProvisionalResponseEvent *this, const SipResponse *a2)
{
  int v3 = *((_DWORD *)a2 + 22) - 180;
  if (v3 > 3) {
    int v4 = 3;
  }
  else {
    int v4 = dword_1C56CE140[v3];
  }
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v5 = (void *)BambiCallEvent::BambiCallEvent((uint64_t)this, v4, v6);
  void *v5 = &unk_1F20C0400;
  SipResponse::SipResponse((SipResponse *)(v5 + 5), (const std::string *)a2);
}

void sub_1C5334784(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F20B8640;
  int v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCallPreconditionsSatisfiedEvent::BambiCallPreconditionsSatisfiedEvent(uint64_t a1, const std::string *a2)
{
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v4 = BambiCallEvent::BambiCallEvent(a1, 23, v6);
  *(void *)uint64_t v4 = &unk_1F20C35F0;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  std::string::operator=((std::string *)(v4 + 40), a2);
  return a1;
}

void sub_1C5334834(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  *(void *)uint64_t v1 = &unk_1F20B8640;
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

BambiCallEvent *BambiCallPreconditionsSatisfiedEvent::BambiCallPreconditionsSatisfiedEvent(BambiCallEvent *a1, uint64_t a2)
{
  BambiCallEvent::BambiCallEvent(a1, (const BambiCallEvent *)a2);
  *(void *)uint64_t v4 = &unk_1F20C35F0;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  std::string::operator=((std::string *)(v4 + 40), (const std::string *)(a2 + 40));
  return a1;
}

void sub_1C53348E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 63) < 0) {
    operator delete(*v2);
  }
  *(void *)uint64_t v1 = &unk_1F20B8640;
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void SessionTerminatedResultDomain::~SessionTerminatedResultDomain(void **this)
{
  *this = &unk_1F20B2778;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20B2778;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

uint64_t BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent(uint64_t a1, int a2, uint64_t a3)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v5 = BambiCallEvent::BambiCallEvent(a1, a2, v9);
  *(void *)uint64_t v5 = &unk_1F20C3500;
  *(_DWORD *)(v5 + 40) = 10;
  *(void *)(v5 + 48) = 0;
  *(_OWORD *)(v5 + 64) = 0u;
  long long v6 = (std::string *)(v5 + 64);
  *(unsigned char *)(v5 + 56) = 0;
  *(void *)(v5 + 120) = 0;
  unint64_t v7 = (std::string *)(v5 + 120);
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_DWORD *)(v5 + 112) = 0;
  *(void *)(v5 + 128) = 0;
  *(void *)(v5 + 136) = 0;
  *(_DWORD *)(v5 + 144) = 0x10000;
  *(unsigned char *)(v5 + 148) = 0;
  *(void *)(v5 + 152) = 0;
  *(void *)(v5 + 160) = 0;
  *(void *)(v5 + 168) = 0;
  SipUri::SipUri((SipUri *)(v5 + 184));
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a3 + 64);
  std::string::operator=(v6, (const std::string *)(a3 + 32));
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a3 + 134);
  std::string::operator=(v7, (const std::string *)(a3 + 32));
  *(unsigned char *)(a1 + 147) = *(unsigned char *)(a3 + 133);
  *(void *)(a1 + 48) = 0;
  return a1;
}

{
  uint64_t v5;
  int v6;
  uint64_t v8[2];

  v8[0] = 0;
  v8[1] = 0;
  uint64_t v5 = BambiCallEvent::BambiCallEvent(a1, a2, v8);
  *(void *)uint64_t v5 = &unk_1F20C3500;
  *(_DWORD *)(v5 + 40) = 10;
  *(void *)(v5 + 48) = 0;
  *(_OWORD *)(v5 + 64) = 0u;
  *(unsigned char *)(v5 + 56) = 0;
  *(void *)(v5 + 120) = 0;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_DWORD *)(v5 + 112) = 0;
  *(void *)(v5 + 128) = 0;
  *(void *)(v5 + 136) = 0;
  *(_DWORD *)(v5 + 144) = 0x10000;
  *(unsigned char *)(v5 + 148) = 0;
  *(void *)(v5 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  SipUri::SipUri((SipUri *)(v5 + 184));
  if (*(uint64_t **)(a3 + 8) == &SessionTerminatedResultDomain::_domain) {
    long long v6 = *(_DWORD *)(a3 + 16);
  }
  else {
    long long v6 = 10;
  }
  *(_DWORD *)(a1 + 40) = v6;
  return a1;
}

void sub_1C5334A70(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*(void **)(v1 + 88));
  }
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  *(void *)uint64_t v1 = &unk_1F20B8640;
  long long v6 = *(std::__shared_weak_count **)(v1 + 24);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent(uint64_t a1, int a2, int a3)
{
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v5 = BambiCallEvent::BambiCallEvent(a1, a2, v7);
  *(void *)uint64_t v5 = &unk_1F20C3500;
  *(_DWORD *)(v5 + 40) = 10;
  *(void *)(v5 + 48) = 0;
  *(_OWORD *)(v5 + 64) = 0u;
  *(unsigned char *)(v5 + 56) = 0;
  *(void *)(v5 + 120) = 0;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_DWORD *)(v5 + 112) = 0;
  *(void *)(v5 + 128) = 0;
  *(void *)(v5 + 136) = 0;
  *(_DWORD *)(v5 + 144) = 0x10000;
  *(unsigned char *)(v5 + 148) = 0;
  *(void *)(v5 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  SipUri::SipUri((SipUri *)(v5 + 184));
  *(_DWORD *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = 0;
  return a1;
}

void sub_1C5334BB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*(void **)(v1 + 88));
  }
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  *(void *)uint64_t v1 = &unk_1F20B8640;
  long long v6 = *(std::__shared_weak_count **)(v1 + 24);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent(uint64_t a1, int a2, BambiCallEvent *a3)
{
  BambiCallEvent::BambiCallEvent((BambiCallEvent *)a1, a3);
  *(void *)uint64_t v6 = &unk_1F20C3500;
  *(_DWORD *)(v6 + 40) = 10;
  *(void *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 64) = 0u;
  unint64_t v7 = (std::string *)(v6 + 64);
  *(unsigned char *)(v6 + 56) = 0;
  *(void *)(v6 + 120) = 0;
  unint64_t v8 = (std::string *)(v6 + 120);
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_DWORD *)(v6 + 112) = 0;
  *(void *)(v6 + 128) = 0;
  *(void *)(v6 + 136) = 0;
  *(_DWORD *)(v6 + 144) = 0x10000;
  *(unsigned char *)(v6 + 148) = 0;
  *(void *)(v6 + 152) = 0;
  *(void *)(v6 + 160) = 0;
  *(void *)(v6 + 168) = 0;
  SipUri::SipUri((SipUri *)(v6 + 184));
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 40) = *((_DWORD *)a3 + 10);
  uint64_t v9 = *((void *)a3 + 6);
  if (v9) {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
  }
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a3 + 56);
  std::string::operator=(v7, (const std::string *)((char *)a3 + 64));
  std::string::operator=(v8, (const std::string *)a3 + 5);
  *(unsigned char *)(a1 + 144) = *((unsigned char *)a3 + 144);
  *(_WORD *)(a1 + 147) = *(_WORD *)((char *)a3 + 147);
  return a1;
}

void sub_1C5334D50(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*(void **)(v1 + 88));
  }
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  *(void *)uint64_t v1 = &unk_1F20B8640;
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 24);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5334EA8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 175) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 111) < 0) {
    operator delete(*(void **)(v1 + 88));
  }
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  *(void *)uint64_t v1 = &unk_1F20B8640;
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 24);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent(BambiCallSessionTerminationBaseEvent *this)
{
  *(void *)this = &unk_1F20C3500;
  uint64_t v2 = *((void *)this + 6);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  SipUri::~SipUri((BambiCallSessionTerminationBaseEvent *)((char *)this + 184));
  if (*((char *)this + 175) < 0) {
    operator delete(*((void **)this + 19));
  }
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  *(void *)this = &unk_1F20B8640;
  int v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

{
  uint64_t vars8;

  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent(this);
  JUMPOUT(0x1C878E320);
}

uint64_t BambiCallSessionTerminationBaseEvent::setReasonFromOutgoingResponse(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a2 + 32))(a2);
  *(void *)(a1 + 48) = result;
  *(unsigned char *)(a1 + 56) = 1;
  *(_DWORD *)(a1 + 40) = 10;
  int v6 = a2[22];
  if (v6 == 403)
  {
    int v7 = 16;
  }
  else if (v6 == 486)
  {
    int v7 = 2;
  }
  else
  {
    if ((v6 - 500) > 0x63) {
      return result;
    }
    int v7 = 18;
  }
  *(_DWORD *)(a1 + 40) = v7;
  return result;
}

void BambiCallSessionTerminationBaseEvent::setReasonFromIncomingResponse(BambiCallSessionTerminationBaseEvent *this, const SipResponse *a2, const BambiCallIncomingTerminationReasons *a3)
{
  uint64_t v6 = *((void *)this + 6);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *((void *)this + 6) = (*(uint64_t (**)(const SipResponse *))(*(void *)a2 + 32))(a2);
  *((unsigned char *)this + 56) = 0;
  int v7 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v7)
  {
    int v12 = 0;
    unint64_t v8 = 0;
LABEL_11:
    uint64_t v9 = 0;
    goto LABEL_12;
  }
  unint64_t v8 = std::__shared_weak_count::lock(v7);
  if (!v8)
  {
    int v12 = 0;
    goto LABEL_11;
  }
  uint64_t v9 = *((void *)this + 2);
  if (!v9)
  {
    int v12 = 0;
    goto LABEL_12;
  }
  BOOL v10 = *(SipSession **)(v9 + 392);
  if (v10)
  {
    char v11 = SipSession::confirmed(v10);
    *((unsigned char *)this + 145) = v11;
    if (v11) {
      goto LABEL_29;
    }
  }
  else
  {
    *((unsigned char *)this + 145) = 0;
  }
  BOOL v17 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v9 + 368));
  char v18 = (SipUserAgentConfig *)SipUserAgent::config(*(SipUserAgent **)(*(void *)(v9 + 360) + 144));
  *((unsigned char *)this + 144) = SipUserAgentConfig::shouldCSFBOnInviteResponse(v18, *((_DWORD *)a2 + 22), *(void *)(v9 + 520) != 0);
  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_29:
  char v19 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v9 + 368));
  uint64_t v20 = SipUserAgent::config(*(SipUserAgent **)(*(void *)(v9 + 360) + 144));
  std::string::basic_string[abi:ne180100]<0>(&__str, "INVITE");
  BOOL v21 = SipResponseCodeMap::containsResponseCodeForMethod(v20 + 1184, (void **)&__str.__r_.__value_.__l.__data_, *((_DWORD *)a2 + 22), 0);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  int v12 = 1;
  if (v21) {
    *((unsigned char *)this + 147) = 1;
  }
LABEL_12:
  SipMessage::reasonText(a2, &__str);
  std::string::operator=((std::string *)((char *)this + 64), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  SipMessage::reasonProtocol(a2, &__str);
  std::string::operator=((std::string *)((char *)this + 88), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *((_DWORD *)this + 28) = SipMessage::reasonCause(a2);
  if (*((_DWORD *)a2 + 22) == 380)
  {
    uint64_t v13 = (const void *)*((void *)a2 + 9);
    if (v13)
    {
      if (v14)
      {
        if (Sip3gppImsInfo::alternativeServiceWithServiceType((uint64_t)v14 + 32, (unsigned __int8 **)"emergency"))
        {
          *((_DWORD *)this + 10) = 15;
          goto LABEL_73;
        }
      }
    }
  }
  if (!v12 || !BambiCall::isWPSCall((BambiCall *)v9)) {
    goto LABEL_42;
  }
  BOOL v15 = *(std::__shared_weak_count **)(v9 + 368);
  if (v15)
  {
    BOOL v15 = std::__shared_weak_count::lock(v15);
    uint64_t v16 = v15;
    if (v15) {
      BOOL v15 = *(std::__shared_weak_count **)(v9 + 360);
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  char v22 = (ImsPrefs *)SipStack::prefs((SipStack *)v15);
  IgnoreOverridesForWPSCallsKey = (void **)ImsPrefs::getIgnoreOverridesForWPSCallsKey(v22);
  int v24 = ImsPrefs::BOOLValue(v22, IgnoreOverridesForWPSCallsKey);
  char v25 = v24;
  if (!v16)
  {
    if (v24) {
      goto LABEL_36;
    }
LABEL_42:
    char v27 = 1;
    goto LABEL_43;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  if ((v25 & 1) == 0) {
    goto LABEL_42;
  }
LABEL_36:
  std::string::basic_string[abi:ne180100]<0>(&__str, "bambi.call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v26 = ims::debug((uint64_t)&__str, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"call was dialed as WPS", 22);
  *(unsigned char *)(v26 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v26 + 17) = 0;
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  char v27 = 0;
  *((unsigned char *)this + 144) = 1;
LABEL_43:
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  BambiCallIncomingTerminationReasons::reasonForResponse(a3, a2, v27, &v37);
  if (!v37)
  {
    if (*((_DWORD *)a2 + 22) / 0x64u - 5 >= 2) {
      int v32 = 10;
    }
    else {
      int v32 = 11;
    }
    *((_DWORD *)this + 10) = v32;
    std::string::basic_string[abi:ne180100]<0>(&__str, "bambi.call");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    uint64_t v33 = ims::debug((uint64_t)&__str, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"incoming ", 9);
    *(unsigned char *)(v33 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v33 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)" response didn't match a termination reason. Defaulting to ", 59);
    *(unsigned char *)(v33 + 17) = 0;
    int v34 = *((_DWORD *)this + 10);
    if (v34 > 37) {
      int v34 = 10;
    }
    LoggableString::LoggableString(&v36, (const std::string *)(reasonStrings + 24 * v34));
    (*(void (**)(uint64_t, std::string *))(*(void *)v33 + 40))(v33, &v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)".", 1);
    *(unsigned char *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v33 + 17) = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (v40 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    goto LABEL_71;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "bambi.call");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v28 = ims::debug((uint64_t)&__str, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"incoming ", 9);
  *(unsigned char *)(v28 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v28 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)" response matched termination reason ", 37);
  *(unsigned char *)(v28 + 17) = 0;
  LoggableString::LoggableString(&v36, (const std::string *)(v37 + 2));
  (*(void (**)(uint64_t, std::string *))(*(void *)v28 + 40))(v28, &v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)" with event ", 12);
  *(unsigned char *)(v28 + 17) = 0;
  int v29 = v37[16];
  if (v29 > 37) {
    int v29 = 10;
  }
  LoggableString::LoggableString(&v35, (const std::string *)(reasonStrings + 24 * v29));
  (*(void (**)(uint64_t, std::string *))(*(void *)v28 + 40))(v28, &v35);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v28 + 17) = 0;
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v35.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v36.__r_.__value_.__l.__data_);
  }
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  char v30 = v37;
  *((_DWORD *)this + 10) = v37[16];
  if (!*((unsigned char *)this + 145))
  {
    int v31 = *v30;
    if (*v30 == 1)
    {
LABEL_58:
      *((unsigned char *)this + 144) = v31;
      goto LABEL_59;
    }
    if (v31 == 2)
    {
      LOBYTE(v3bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
      goto LABEL_58;
    }
  }
LABEL_59:
  *((unsigned char *)this + 147) = *((unsigned char *)v30 + 133);
LABEL_71:
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
LABEL_73:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C53357F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallSessionTerminationBaseEvent::setReasonFromIncomingByeOrCancelRequest(BambiCallSessionTerminationBaseEvent *this, const SipRequest *a2, void (***a3)(uint64_t *__return_ptr))
{
  *((unsigned char *)this + 56) = 0;
  SipMessage::reasonText(a2, &__str);
  std::string::operator=((std::string *)((char *)this + 64), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  SipMessage::reasonProtocol(a2, &__str);
  uint64_t v6 = (const void **)((char *)this + 88);
  std::string::operator=((std::string *)((char *)this + 88), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *((_DWORD *)this + 28) = SipMessage::reasonCause(a2);
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  BambiCallIncomingTerminationReasons::reasonForByeOrCancelRequest(a3, a2, 1, &v27);
  if (v27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "bambi.call");
    std::string::basic_string[abi:ne180100]<0>(v25, "");
    uint64_t v7 = ims::debug((uint64_t)&__str, (uint64_t)v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"incoming ", 9);
    *(unsigned char *)(v7 + 17) = 0;
    unint64_t v8 = (const std::string *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
    LoggableString::LoggableString(&v24, v8);
    (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 40))(v7, &v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" request matched termination reason ", 36);
    *(unsigned char *)(v7 + 17) = 0;
    LoggableString::LoggableString(&v23, (const std::string *)(v27 + 8));
    (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 40))(v7, &v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" with event ", 12);
    *(unsigned char *)(v7 + 17) = 0;
    int v9 = *(_DWORD *)(v27 + 64);
    if (v9 > 37) {
      int v9 = 10;
    }
    LoggableString::LoggableString(&__p, (const std::string *)(reasonStrings + 24 * v9));
    (*(void (**)(uint64_t, std::string *))(*(void *)v7 + 40))(v7, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v10 = v27;
    *((_DWORD *)this + 10) = *(_DWORD *)(v27 + 64);
    *((unsigned char *)this + 147) = *(unsigned char *)(v10 + 133);
    goto LABEL_51;
  }
  char v11 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
  uint64_t v12 = v11[23];
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = v11[23];
  }
  else {
    uint64_t v13 = *((void *)v11 + 1);
  }
  if (v13 == 6)
  {
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v11, "CANCEL", *((void *)v11 + 1))) {
        goto LABEL_30;
      }
    }
    else if (v11[23])
    {
      unint64_t v14 = "CANCEL";
      while (*v11 == *(unsigned __int8 *)v14)
      {
        ++v11;
        ++v14;
        if (!--v12) {
          goto LABEL_40;
        }
      }
      goto LABEL_30;
    }
LABEL_40:
    int v18 = 5;
LABEL_44:
    *((_DWORD *)this + 10) = v18;
    goto LABEL_45;
  }
LABEL_30:
  *((_DWORD *)this + 10) = 1;
  uint64_t v15 = *((unsigned __int8 *)this + 111);
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = *((unsigned __int8 *)this + 111);
  }
  else {
    uint64_t v16 = *((void *)this + 12);
  }
  if (v16 != 3) {
    goto LABEL_45;
  }
  if ((v15 & 0x80) != 0)
  {
    if (memcmp(*v6, &SipReason::kProtocolSip, *((void *)this + 12))) {
      goto LABEL_45;
    }
  }
  else if (*((unsigned char *)this + 111))
  {
    BOOL v17 = &SipReason::kProtocolSip;
    while (*(unsigned __int8 *)v6 == v17->__r_.__value_.__s.__data_[0])
    {
      uint64_t v6 = (const void **)((char *)v6 + 1);
      BOOL v17 = (std::string *)((char *)v17 + 1);
      if (!--v15) {
        goto LABEL_42;
      }
    }
    goto LABEL_45;
  }
LABEL_42:
  if ((*((_DWORD *)this + 28) - 300) <= 0x18F)
  {
    int v18 = 11;
    goto LABEL_44;
  }
LABEL_45:
  std::string::basic_string[abi:ne180100]<0>(&__str, "bambi.call");
  std::string::basic_string[abi:ne180100]<0>(v25, "");
  uint64_t v19 = ims::debug((uint64_t)&__str, (uint64_t)v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"incoming ", 9);
  *(unsigned char *)(v19 + 17) = 0;
  uint64_t v20 = (*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 32))(v19, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" request didn't match a termination reason. Defaulting to ", 58);
  *(unsigned char *)(v19 + 17) = 0;
  int v21 = *((_DWORD *)this + 10);
  if (v21 > 37) {
    int v21 = 10;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 32))(v19, reasonStrings + 24 * v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)".", 1);
  *(unsigned char *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v19 + 17) = 0;
  if (v26 < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_51:
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
}

void sub_1C5335E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 33) < 0) {
    operator delete(*(void **)(v33 - 56));
  }
  std::string v35 = *(std::__shared_weak_count **)(v33 - 64);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallSessionTerminationBaseEvent::setReferrerFromIncomingByeRequest(BambiCallSessionTerminationBaseEvent *this, const SipRequest *a2)
{
  SipMessage::referredBy(a2, &__str);
  std::string::operator=((std::string *)((char *)this + 152), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C5335FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *BambiCallSessionTerminationBaseEvent::setReason(BambiCallSessionTerminationBaseEvent *this, const BambiCallTerminationReason *a2)
{
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 16);
  uint64_t v4 = (const std::string *)((char *)a2 + 32);
  std::string::operator=((std::string *)((char *)this + 64), (const std::string *)((char *)a2 + 32));
  uint64_t result = std::string::operator=((std::string *)this + 5, v4);
  *((unsigned char *)this + 147) = *((unsigned char *)a2 + 133);
  return result;
}

uint64_t BambiCallSessionTerminationBaseEvent::reasonForName(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = reasonStrings;
  if (*(char *)(a1 + 23) >= 0) {
    int v3 = (const char *)a1;
  }
  else {
    int v3 = *(const char **)a1;
  }
  do
  {
    if (*(char *)(v2 + 23) >= 0) {
      uint64_t v4 = (const char *)v2;
    }
    else {
      uint64_t v4 = *(const char **)v2;
    }
    if (!strcasecmp(v4, v3)) {
      break;
    }
    ++v1;
    v2 += 24;
  }
  while (v1 != 38);
  return v1;
}

uint64_t BambiCallSessionTerminationBaseEvent::fullName@<X0>(BambiCallSessionTerminationBaseEvent *this@<X0>, void *a2@<X8>)
{
  uint64_t v21 = 0;
  long long v19 = 0u;
  memset(v20, 0, sizeof(v20));
  *(_OWORD *)std::string __p = 0u;
  long long v18 = 0u;
  memset(v16, 0, sizeof(v16));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v4 = eventNames + 24 * *((unsigned int *)this + 2);
  int v5 = *(char *)(v4 + 23);
  if (v5 >= 0) {
    uint64_t v6 = eventNames + 24 * *((unsigned int *)this + 2);
  }
  else {
    uint64_t v6 = *(void *)v4;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    uint64_t v7 = *(void *)(v4 + 8);
  }
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v6, v7);
  char v22 = 58;
  int v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v22, 1);
  int v10 = *((_DWORD *)this + 10);
  if (v10 > 37) {
    int v10 = 10;
  }
  uint64_t v11 = reasonStrings + 24 * v10;
  int v12 = *(char *)(v11 + 23);
  if (v12 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = *(void *)v11;
  }
  if (v12 >= 0) {
    uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    uint64_t v14 = *(void *)(v11 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v13, v14);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16 + 8, a2);
  *(void *)&v16[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v16 + *(void *)(*(void *)&v16[0] - MediaSessionHandover::terminate((MediaSessionHandover *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v16[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v20);
}

void sub_1C533625C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t BambiCallJoinedConferenceEvent::BambiCallJoinedConferenceEvent(uint64_t a1, uint64_t *a2)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v4 = (void *)BambiCallEvent::BambiCallEvent(a1, 20, v9);
  void *v4 = &unk_1F20C2E80;
  void v4[5] = 0;
  v4[6] = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
    uint64_t v7 = *(std::__shared_weak_count **)(a1 + 48);
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = v6;
    if (v7) {
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = 0;
  }
  return a1;
}

uint64_t BambiCallConferenceEvent::BambiCallConferenceEvent(uint64_t a1, int a2, uint64_t **a3)
{
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v6 = BambiCallEvent::BambiCallEvent(a1, 21, v8);
  *(void *)uint64_t v6 = &unk_1F20C3488;
  *(void *)(v6 + 40) = 0;
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 64) = a2;
  if ((uint64_t **)(v6 + 40) != a3) {
    std::vector<std::weak_ptr<BambiConferenceParticipant>>::__assign_with_size[abi:ne180100]<std::weak_ptr<BambiConferenceParticipant>*,std::weak_ptr<BambiConferenceParticipant>*>((uint64_t *)(v6 + 40), *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  }
  return a1;
}

void sub_1C5336390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  void *v4 = &unk_1F20B8640;
  uint64_t v6 = (std::__shared_weak_count *)v4[3];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t BambiCallConferenceEvent::BambiCallConferenceEvent(uint64_t a1, int a2, long long *a3)
{
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v6 = BambiCallEvent::BambiCallEvent(a1, 21, v22);
  *(void *)uint64_t v6 = &unk_1F20C3488;
  *(void *)(v6 + 40) = 0;
  uint64_t v7 = (uint64_t *)(v6 + 40);
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 64) = a2;
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100]((uint64_t *)(v6 + 40));
  long long v8 = *a3;
  uint64_t v9 = *((void *)a3 + 1);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void **)(a1 + 48);
  if ((unint64_t)v11 >= v10)
  {
    long long v21 = v8;
    uint64_t v13 = ((uint64_t)v11 - *v7) >> 4;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v10 - *v7;
    if (v15 >> 3 > v14) {
      unint64_t v14 = v15 >> 3;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    v23[4] = (void *)(a1 + 56);
    BOOL v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(a1 + 56, v16);
    long long v18 = &v17[16 * v13];
    v23[0] = v17;
    v23[1] = v18;
    v23[3] = &v17[16 * v19];
    *(_OWORD *)long long v18 = v21;
    v23[2] = v18 + 16;
    std::vector<std::weak_ptr<BambiConferenceParticipant>>::__swap_out_circular_buffer(v7, v23);
    int v12 = *(void **)(a1 + 48);
    std::__split_buffer<std::weak_ptr<BambiConferenceParticipant>>::~__split_buffer(v23);
  }
  else
  {
    void *v11 = v8;
    v11[1] = v9;
    int v12 = v11 + 2;
    *(void *)(a1 + 48) = v11 + 2;
  }
  *(void *)(a1 + 48) = v12;
  return a1;
}

void sub_1C5336518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  std::__split_buffer<std::weak_ptr<BambiConferenceParticipant>>::~__split_buffer((void **)va);
  *(void *)(v7 - 40) = v6;
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v7 - 40));
  void *v5 = &unk_1F20B8640;
  uint64_t v9 = (std::__shared_weak_count *)v5[3];
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  _Unwind_Resume(a1);
}

uint64_t BambiCallConferenceEvent::fullName@<X0>(BambiCallConferenceEvent *this@<X0>, void *a2@<X8>)
{
  uint64_t v21 = 0;
  long long v19 = 0u;
  memset(v20, 0, sizeof(v20));
  *(_OWORD *)std::string __p = 0u;
  long long v18 = 0u;
  memset(v16, 0, sizeof(v16));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
  uint64_t v4 = eventNames + 24 * *((unsigned int *)this + 2);
  int v5 = *(char *)(v4 + 23);
  if (v5 >= 0) {
    uint64_t v6 = eventNames + 24 * *((unsigned int *)this + 2);
  }
  else {
    uint64_t v6 = *(void *)v4;
  }
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(v4 + 23);
  }
  else {
    uint64_t v7 = *(void *)(v4 + 8);
  }
  long long v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v6, v7);
  char v22 = 58;
  uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v22, 1);
  int v10 = *((_DWORD *)this + 16);
  if (v10 > 6) {
    int v10 = 0;
  }
  uint64_t v11 = (char *)&kCodeStrings + 24 * v10;
  int v12 = v11[23];
  if (v12 >= 0) {
    uint64_t v13 = (uint64_t)v11;
  }
  else {
    uint64_t v13 = *(void *)v11;
  }
  if (v12 >= 0) {
    uint64_t v14 = v11[23];
  }
  else {
    uint64_t v14 = *((void *)v11 + 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v13, v14);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16 + 8, a2);
  *(void *)&v16[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v16 + *(void *)(*(void *)&v16[0] - MediaSessionHandover::terminate((MediaSessionHandover *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v16[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v20);
}

void sub_1C5336748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void BambiCallSessionIntervalTooSmallEvent::BambiCallSessionIntervalTooSmallEvent(BambiCallSessionIntervalTooSmallEvent *this, const std::string *a2)
{
  v4[0] = 0;
  v4[1] = 0;
  int v3 = (void *)BambiCallEvent::BambiCallEvent((uint64_t)this, 22, v4);
  *int v3 = &unk_1F20C3540;
  SipResponse::SipResponse((SipResponse *)(v3 + 5), a2);
}

void sub_1C53367C0(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F20B8640;
  int v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallSessionIntervalTooSmallEvent::BambiCallSessionIntervalTooSmallEvent(BambiCallSessionIntervalTooSmallEvent *this, const BambiCallSessionIntervalTooSmallEvent *a2)
{
  BambiCallEvent::BambiCallEvent(this, a2);
  *int v3 = &unk_1F20C3540;
  SipResponse::SipResponse((SipResponse *)(v3 + 5), (const std::string *)((char *)a2 + 40));
}

void sub_1C5336844(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F20B8640;
  int v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallSessionMovedEvent::BambiCallSessionMovedEvent(BambiCallSessionMovedEvent *this, const SipUri *a2, int a3)
{
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v6 = (void *)BambiCallEvent::BambiCallEvent((uint64_t)this, 32, v7);
  void *v6 = &unk_1F20C3598;
  SipUri::SipUri((SipUri *)(v6 + 5), a2);
  *((_DWORD *)this + 112) = a3;
}

void sub_1C53368EC(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F20B8640;
  int v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallSessionMovedEvent::BambiCallSessionMovedEvent(BambiCallSessionMovedEvent *this, const BambiCallSessionMovedEvent *a2)
{
  BambiCallEvent::BambiCallEvent(this, a2);
  void *v4 = &unk_1F20C3598;
  SipUri::SipUri((SipUri *)(v4 + 5), (const BambiCallSessionMovedEvent *)((char *)a2 + 40));
  *((_DWORD *)this + 112) = *((_DWORD *)a2 + 112);
}

void sub_1C5336978(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F20B8640;
  int v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCallHoldResumeIndicationEvent::BambiCallHoldResumeIndicationEvent(uint64_t a1, int a2, int a3, int a4, uint64_t *a5)
{
  long long v8 = (std::__shared_weak_count *)a5[1];
  if (a2) {
    int v9 = 18;
  }
  else {
    int v9 = 19;
  }
  v11[0] = *a5;
  v11[1] = (uint64_t)v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    BambiCallEvent::BambiCallEvent(a1, v9, v11);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    BambiCallEvent::BambiCallEvent(a1, v9, v11);
  }
  *(void *)a1 = &unk_1F20C3378;
  *(_DWORD *)(a1 + 40) = a4;
  *(_DWORD *)(a1 + 44) = a3;
  return a1;
}

void BambiCallNamedEvent::~BambiCallNamedEvent(void **this)
{
  *this = &unk_1F20C32B8;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  *this = &unk_1F20B8640;
  uint64_t v2 = (std::__shared_weak_count *)this[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = &unk_1F20C32B8;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  *this = &unk_1F20B8640;
  uint64_t v2 = (std::__shared_weak_count *)this[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x1C878E320);
}

void BambiCallSessionRequestedEvent::clone(BambiCallSessionRequestedEvent *this)
{
}

void BambiCallConferenceEvent::~BambiCallConferenceEvent(BambiCallConferenceEvent *this)
{
  *(void *)this = &unk_1F20C3488;
  int v3 = (void **)((char *)this + 40);
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(void *)this = &unk_1F20B8640;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  std::__shared_weak_count *v2;
  void **v3;

  *(void *)this = &unk_1F20C3488;
  int v3 = (void **)((char *)this + 40);
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(void *)this = &unk_1F20B8640;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  MEMORY[0x1C878E320](this, 0x10A1C407AE6A5FBLL);
}

void BambiCallConferenceEvent::clone(BambiCallConferenceEvent *this)
{
}

void sub_1C5336D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  void *v2 = &unk_1F20B8640;
  uint64_t v4 = (std::__shared_weak_count *)v2[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  MEMORY[0x1C878E320](v2, 0x10A1C407AE6A5FBLL);
  _Unwind_Resume(a1);
}

void BambiCallSessionConfirmedEvent::~BambiCallSessionConfirmedEvent(BambiCallSessionConfirmedEvent *this)
{
  *(void *)this = &unk_1F20B8640;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20B8640;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

void BambiCallSessionConfirmedEvent::clone(BambiCallSessionConfirmedEvent *this)
{
}

void BambiCallPreconditionsSatisfiedEvent::~BambiCallPreconditionsSatisfiedEvent(void **this)
{
  *this = &unk_1F20C35F0;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  *this = &unk_1F20B8640;
  uint64_t v2 = (std::__shared_weak_count *)this[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *this = &unk_1F20C35F0;
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  *this = &unk_1F20B8640;
  uint64_t v2 = (std::__shared_weak_count *)this[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x1C878E320);
}

void BambiCallPreconditionsSatisfiedEvent::clone(BambiCallPreconditionsSatisfiedEvent *this)
{
}

void sub_1C5337038(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C406AA0CD03);
  _Unwind_Resume(a1);
}

void BambiCallSessionIntervalTooSmallEvent::~BambiCallSessionIntervalTooSmallEvent(BambiCallSessionIntervalTooSmallEvent *this)
{
  *(void *)this = &unk_1F20C3540;
  uint64_t v2 = (BambiCallSessionIntervalTooSmallEvent *)((char *)this + 40);
  *((void *)this + 5) = &unk_1F20DD488;
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  SipMessage::~SipMessage(v2);
  *(void *)this = &unk_1F20B8640;
  int v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

{
  SipMessage *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20C3540;
  uint64_t v2 = (BambiCallSessionIntervalTooSmallEvent *)((char *)this + 40);
  *((void *)this + 5) = &unk_1F20DD488;
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  SipMessage::~SipMessage(v2);
  *(void *)this = &unk_1F20B8640;
  int v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  JUMPOUT(0x1C878E320);
}

void BambiCallSessionIntervalTooSmallEvent::clone(BambiCallSessionIntervalTooSmallEvent *this)
{
}

void sub_1C5337204(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10F3C408053D7E0);
  _Unwind_Resume(a1);
}

void BambiCallSessionMovedEvent::~BambiCallSessionMovedEvent(BambiCallSessionMovedEvent *this)
{
  *(void *)this = &unk_1F20C3598;
  SipUri::~SipUri((BambiCallSessionMovedEvent *)((char *)this + 40));
  *(void *)this = &unk_1F20B8640;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F20C3598;
  SipUri::~SipUri((BambiCallSessionMovedEvent *)((char *)this + 40));
  *(void *)this = &unk_1F20B8640;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  JUMPOUT(0x1C878E320);
}

void BambiCallSessionMovedEvent::clone(BambiCallSessionMovedEvent *this)
{
}

void sub_1C5337368(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40E35FCC66);
  _Unwind_Resume(a1);
}

void BambiCallHoldResumeIndicationEvent::~BambiCallHoldResumeIndicationEvent(BambiCallHoldResumeIndicationEvent *this)
{
  *(void *)this = &unk_1F20B8640;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F20B8640;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

void BambiCallHoldResumeIndicationEvent::clone(BambiCallHoldResumeIndicationEvent *this)
{
}

void SessionTerminatedResultDomain::textForResultCode(int a1@<W1>, std::string *a2@<X8>)
{
  if (a1 <= 37) {
    unsigned int v3 = a1;
  }
  else {
    unsigned int v3 = 10;
  }
  uint64_t v4 = reasonStrings + 24 * v3;
  if (*(char *)(v4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v4, *(void *)(v4 + 8));
  }
  else
  {
    long long v5 = *(_OWORD *)v4;
    a2->__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
  }
}

BOOL SessionTerminatedResultDomain::isError(SessionTerminatedResultDomain *this, int a2)
{
  return a2 > 9;
}

void std::vector<std::weak_ptr<BambiConferenceParticipant>>::__assign_with_size[abi:ne180100]<std::weak_ptr<BambiConferenceParticipant>*,std::weak_ptr<BambiConferenceParticipant>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  int v10 = (void *)*a1;
  if (a4 <= (v8 - *a1) >> 4)
  {
    unint64_t v17 = (a1[1] - (uint64_t)v10) >> 4;
    if (v17 >= a4)
    {
      uint64_t v21 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<BambiConferenceParticipant> *,std::weak_ptr<BambiConferenceParticipant> *,std::weak_ptr<BambiConferenceParticipant> *>(a2, a3, v10);
      for (uint64_t i = (void *)a1[1]; i != v21; i -= 2)
      {
        std::string v23 = (std::__shared_weak_count *)*(i - 1);
        if (v23) {
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      a1[1] = (uint64_t)v21;
    }
    else
    {
      long long v18 = &a2[2 * v17];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<BambiConferenceParticipant> *,std::weak_ptr<BambiConferenceParticipant> *,std::weak_ptr<BambiConferenceParticipant> *>(a2, v18, v10);
      for (unint64_t j = (uint64_t *)a1[1]; v18 != a3; v18 += 2)
      {
        uint64_t v20 = v18[1];
        *unint64_t j = *v18;
        j[1] = v20;
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 16), 1uLL, memory_order_relaxed);
        }
        j += 2;
      }
      a1[1] = (uint64_t)j;
    }
  }
  else
  {
    if (v10)
    {
      std::vector<std::weak_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      goto LABEL_28;
    }
    uint64_t v11 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    unint64_t v12 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v11;
    if (v12 >> 60) {
LABEL_28:
    }
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(v9, v12);
    *a1 = (uint64_t)v13;
    a1[1] = (uint64_t)v13;
    a1[2] = (uint64_t)&v13[2 * v14];
    if (v6 != a3)
    {
      uint64_t v15 = v13;
      do
      {
        uint64_t v16 = v6[1];
        *uint64_t v15 = *v6;
        v15[1] = v16;
        if (v16) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 16), 1uLL, memory_order_relaxed);
        }
        v13 += 2;
        v6 += 2;
        v15 += 2;
      }
      while (v6 != a3);
    }
    a1[1] = (uint64_t)v13;
  }
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<BambiConferenceParticipant> *,std::weak_ptr<BambiConferenceParticipant> *,std::weak_ptr<BambiConferenceParticipant> *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    long long v5 = a1;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)a3[1];
      *a3 = v7;
      a3[1] = v6;
      if (v8) {
        std::__shared_weak_count::__release_weak(v8);
      }
      a3 += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<std::weak_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::weak_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100]((uint64_t *)v2);
    unsigned int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::weak_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<std::weak_ptr<BambiConferenceParticipant>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<BambiConferenceParticipant>>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<BambiConferenceParticipant>>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = a7;
  long long v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  void v12[2] = &v14;
  v12[3] = 1;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v14 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v14;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<BambiConferenceParticipant>>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<BambiConferenceParticipant>>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<BambiConferenceParticipant>>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<BambiConferenceParticipant>>,std::reverse_iterator<std::weak_ptr<BambiConferenceParticipant>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    unsigned int v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::weak_ptr<BambiConferenceParticipant>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::weak_ptr<BambiConferenceParticipant>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void __cxx_global_array_dtor()
{
  for (uint64_t i = 0; i != -120; i -= 24)
  {
    if (*((char *)&kCodeStrings + i + 119) < 0) {
      operator delete(*(void **)((char *)&kCodeStrings + i + 96));
    }
  }
}

uint64_t _GLOBAL__sub_I_BambiCallEvent_cpp()
{
  *(void *)&long long v41 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&__p, "Unknown");
  std::string::basic_string[abi:ne180100]<0>(v4, "Trying");
  std::string::basic_string[abi:ne180100]<0>(v5, "SessionRequested");
  std::string::basic_string[abi:ne180100]<0>(v6, "ProvisionalResponse");
  std::string::basic_string[abi:ne180100]<0>(v7, "Ringing");
  std::string::basic_string[abi:ne180100]<0>(v8, "PlayLRBT");
  std::string::basic_string[abi:ne180100]<0>(v9, "StopLRBT");
  std::string::basic_string[abi:ne180100]<0>(v10, "CallIsBeingForwarded");
  std::string::basic_string[abi:ne180100]<0>(v11, "SessionProgress");
  std::string::basic_string[abi:ne180100]<0>(v12, "SessionConfirmed");
  std::string::basic_string[abi:ne180100]<0>(v13, "SessionActivated");
  std::string::basic_string[abi:ne180100]<0>(v14, "SessionActivationAccepted");
  std::string::basic_string[abi:ne180100]<0>(v15, "SessionDeactivated");
  std::string::basic_string[abi:ne180100]<0>(v16, "SessionDeactivationAccepted");
  std::string::basic_string[abi:ne180100]<0>(v17, "SessionTerminating");
  std::string::basic_string[abi:ne180100]<0>(v18, "SessionTerminated");
  std::string::basic_string[abi:ne180100]<0>(v19, "SessionHoldFailed");
  std::string::basic_string[abi:ne180100]<0>(v20, "SessionResumeFailed");
  std::string::basic_string[abi:ne180100]<0>(v21, "SessionHoldIndication");
  std::string::basic_string[abi:ne180100]<0>(v22, "SessionResumeIndication");
  std::string::basic_string[abi:ne180100]<0>(v23, "JoinedConference");
  std::string::basic_string[abi:ne180100]<0>(v24, "ConferenceEvent");
  std::string::basic_string[abi:ne180100]<0>(v25, "SessionIntervalTooSmall");
  std::string::basic_string[abi:ne180100]<0>(v26, "PreconditionsSatisfied");
  std::string::basic_string[abi:ne180100]<0>(v27, "MediaInitialized");
  std::string::basic_string[abi:ne180100]<0>(v28, "MediaActivated");
  std::string::basic_string[abi:ne180100]<0>(v29, "MediaDeactivated");
  std::string::basic_string[abi:ne180100]<0>(v30, "MediaConfigured");
  std::string::basic_string[abi:ne180100]<0>(v31, "ActiveForkChanged");
  std::string::basic_string[abi:ne180100]<0>(v32, "TextSessionDetected");
  std::string::basic_string[abi:ne180100]<0>(v33, "SessionAcknowledged");
  std::string::basic_string[abi:ne180100]<0>(v34, "TextSessionDeactivated");
  std::string::basic_string[abi:ne180100]<0>(v35, "SessionMoved");
  eventNames = 0;
  qword_1EBBDAD90 = 0;
  qword_1EBBDAD98 = 0;
  eventNames = (uint64_t)operator new(0x318uLL);
  qword_1EBBDAD90 = eventNames;
  qword_1EBBDAD98 = eventNames + 792;
  qword_1EBBDAD90 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&qword_1EBBDAD98, (long long *)&__p, &v36, (std::string *)eventNames);
  uint64_t v0 = 792;
  do
  {
    if (__p.__r_.__value_.__s.__data_[v0 - 1] < 0) {
      operator delete(*(void **)((char *)&__p.__r_.__value_.__l + v0 - 24));
    }
    v0 -= 24;
  }
  while (v0);
  __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &eventNames, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "SessionTerminated");
  ImsResultDomain::ImsResultDomain((uint64_t)&SessionTerminatedResultDomain::_domain, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  SessionTerminatedResultDomain::_domain = (uint64_t)&unk_1F20C3440;
  __cxa_atexit((void (*)(void *))SessionTerminatedResultDomain::~SessionTerminatedResultDomain, &SessionTerminatedResultDomain::_domain, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "LocalHangup");
  std::string::basic_string[abi:ne180100]<0>(v4, "RemoteHangup");
  std::string::basic_string[abi:ne180100]<0>(v5, "LocalCallRejected");
  std::string::basic_string[abi:ne180100]<0>(v6, "RemoteCallRejected");
  std::string::basic_string[abi:ne180100]<0>(v7, "LocalRequestCanceled");
  std::string::basic_string[abi:ne180100]<0>(v8, "RemoteRequestCanceled");
  std::string::basic_string[abi:ne180100]<0>(v9, "CallAnsweredElsewhere");
  std::string::basic_string[abi:ne180100]<0>(v10, "SecondaryDeviceInUse");
  std::string::basic_string[abi:ne180100]<0>(v11, "SilentHangup");
  std::string::basic_string[abi:ne180100]<0>(v12, "TransferredToOtherDevice");
  std::string::basic_string[abi:ne180100]<0>(v13, "UnknownError");
  std::string::basic_string[abi:ne180100]<0>(v14, "NetworkError");
  std::string::basic_string[abi:ne180100]<0>(v15, "RemoteRequestTerminated");
  std::string::basic_string[abi:ne180100]<0>(v16, "RequestTimeout");
  std::string::basic_string[abi:ne180100]<0>(v17, "TemporarilyUnavailable");
  std::string::basic_string[abi:ne180100]<0>(v18, "EmergencySessionRequired");
  std::string::basic_string[abi:ne180100]<0>(v19, "Forbidden");
  std::string::basic_string[abi:ne180100]<0>(v20, "InviteResponseTimeout");
  std::string::basic_string[abi:ne180100]<0>(v21, "LocalError");
  std::string::basic_string[abi:ne180100]<0>(v22, "MediaError");
  std::string::basic_string[abi:ne180100]<0>(v23, "MediaTimeout");
  std::string::basic_string[abi:ne180100]<0>(v24, "MediaHeartbeatTimeout");
  std::string::basic_string[abi:ne180100]<0>(v25, "LocalSocketError");
  std::string::basic_string[abi:ne180100]<0>(v26, "WaitForRingingTimeout");
  std::string::basic_string[abi:ne180100]<0>(v27, "LocalQosTimeout");
  std::string::basic_string[abi:ne180100]<0>(v28, "VoiceNotSupported");
  std::string::basic_string[abi:ne180100]<0>(v29, "EmergencyStateExited");
  std::string::basic_string[abi:ne180100]<0>(v30, "AccessBarring");
  std::string::basic_string[abi:ne180100]<0>(v31, "OnEmergencyCall");
  std::string::basic_string[abi:ne180100]<0>(v32, "SdpError");
  std::string::basic_string[abi:ne180100]<0>(v33, "Deinitializing");
  std::string::basic_string[abi:ne180100]<0>(v34, "NoEmergencyCallLocation");
  std::string::basic_string[abi:ne180100]<0>(v35, "AudioUnit");
  std::string::basic_string[abi:ne180100]<0>(&v36, "AVConferenceCrash");
  std::string::basic_string[abi:ne180100]<0>(v37, "LocalBusy");
  std::string::basic_string[abi:ne180100]<0>(v38, "BasebandCrash");
  std::string::basic_string[abi:ne180100]<0>(v39, "NetworkUnreachable");
  std::string::basic_string[abi:ne180100]<0>(v40, "RequiresRedialReasonMax");
  reasonStrings = 0;
  qword_1EBBDAF70 = 0;
  qword_1EBBDAF78 = 0;
  reasonStrings = (uint64_t)operator new(0x390uLL);
  qword_1EBBDAF70 = reasonStrings;
  qword_1EBBDAF78 = reasonStrings + 912;
  qword_1EBBDAF70 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&qword_1EBBDAF78, (long long *)&__p, &v41, (std::string *)reasonStrings);
  uint64_t v1 = 912;
  do
  {
    if (__p.__r_.__value_.__s.__data_[v1 - 1] < 0) {
      operator delete(*(void **)((char *)&__p.__r_.__value_.__l + v1 - 24));
    }
    v1 -= 24;
  }
  while (v1);
  __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &reasonStrings, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(kCodeStrings, "Unknown");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDB8D0, "AllParticipantsJoined");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDB8E8, "MergeFailed");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDB900, "ConferenceSubscriptionFailed");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDB918, "ConferenceSubscriptionSuccess");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor, 0, &dword_1C51D1000);
}

void sub_1C53382F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  qword_1EBBDAF70 = v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v19 = 912;
  while (1)
  {
    if (*((char *)&__p + v19 - 1) < 0) {
      operator delete(*(void **)((char *)&__p + v19 - 24));
    }
    v19 -= 24;
    if (!v19) {
      _Unwind_Resume(a1);
    }
  }
}

void SipDigestAuthScheme::SipDigestAuthScheme(SipDigestAuthScheme *this, const SipDigestAuthScheme *a2)
{
  SipAuthScheme::SipAuthScheme(this, a2);
  *(_OWORD *)(v4 + 56) = 0u;
  *(void *)uint64_t v4 = &unk_1F20C3648;
  uint64_t v5 = (std::vector<std::string> *)(v4 + 80);
  *(_OWORD *)(v4 + 104) = 0u;
  uint64_t v6 = (std::string *)(v4 + 104);
  uint64_t v7 = (std::string *)(v4 + 128);
  *(void *)(v4 + 160) = 0;
  uint64_t v8 = (std::vector<std::string> *)(v4 + 160);
  *(void *)(v4 + 168) = 0;
  *(void *)(v4 + 176) = 0;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_DWORD *)(v4 + 48) = *((_DWORD *)a2 + 12);
  std::string::operator=((std::string *)(v4 + 56), (const std::string *)((char *)a2 + 56));
  if (this != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *((std::string **)a2 + 10), *((long long **)a2 + 11), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 11) - *((void *)a2 + 10)) >> 3));
  }
  std::string::operator=(v6, (const std::string *)((char *)a2 + 104));
  *((unsigned char *)this + 152) = *((unsigned char *)a2 + 152);
  std::string::operator=(v7, (const std::string *)((char *)a2 + 128));
  if (this != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v8, *((std::string **)a2 + 20), *((long long **)a2 + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 21) - *((void *)a2 + 20)) >> 3));
  }
}

void sub_1C5338538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 151) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v2 + 127) < 0) {
    operator delete(*v4);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 79) < 0) {
    operator delete(*v3);
  }
  *(void *)uint64_t v2 = &unk_1F20D2798;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2 + 8);
  _Unwind_Resume(a1);
}

void SipDigestAuthScheme::clear(SipDigestAuthScheme *this)
{
  *((_DWORD *)this + 12) = 0;
  if (*((char *)this + 79) < 0)
  {
    **((unsigned char **)this + 7) = 0;
    *((void *)this + 8) = 0;
  }
  else
  {
    *((unsigned char *)this + 56) = 0;
    *((unsigned char *)this + 79) = 0;
  }
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this + 10);
  if (*((char *)this + 127) < 0)
  {
    **((unsigned char **)this + 13) = 0;
    *((void *)this + 14) = 0;
  }
  else
  {
    *((unsigned char *)this + 104) = 0;
    *((unsigned char *)this + 127) = 0;
  }
  *((unsigned char *)this + 152) = 0;
  if (*((char *)this + 151) < 0)
  {
    **((unsigned char **)this + 16) = 0;
    *((void *)this + 17) = 0;
  }
  else
  {
    *((unsigned char *)this + 128) = 0;
    *((unsigned char *)this + 15bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  }
}

uint64_t SipDigestAuthScheme::encodeNonceCount(SipDigestAuthScheme *this, ImsOutStream *a2)
{
  unsigned int v3 = (void *)*((void *)a2 + 1);
  *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(*v3 - 24) + 8) & 0xFFFFFFB5 | 8;
  *((unsigned char *)a2 + 17) = 0;
  char v5 = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, &v5);
  *(void *)(*((void *)a2 + 1) + *(void *)(**((void **)a2 + 1) - 24) + 24) = 8;
  uint64_t result = std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  return result;
}

void SipDigestAuthScheme::encodeDirectives(uint64_t a1, uint64_t a2, int a3)
{
  SipAuthScheme::encodeDirectives(a1, a2);
  if (!a3)
  {
    uint64_t v13 = 0;
    long long v11 = 0u;
    long long v12 = 0u;
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v11);
  }
  if (*(char *)(a1 + 79) < 0)
  {
    if (!*(void *)(a1 + 64)) {
      goto LABEL_8;
    }
  }
  else if (!*(unsigned char *)(a1 + 79))
  {
LABEL_8:
    if (*(_DWORD *)(a1 + 48))
    {
      uint64_t v13 = 0;
      long long v11 = 0u;
      long long v12 = 0u;
      ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v11);
    }
    if (*(char *)(a1 + 127) < 0)
    {
      if (!*(void *)(a1 + 112))
      {
LABEL_13:
        memset(&__str, 0, sizeof(__str));
        (*(void (**)(uint64_t, std::string *))(*(void *)a1 + 120))(a1, &__str);
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          *(void *)&long long v11 = "algorithm";
          uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, "algorithm", (uint64_t)&std::piecewise_construct, (long long **)&v11);
          std::string::operator=((std::string *)(v8 + 40), &__str);
        }
        memset(__p, 0, sizeof(__p));
        if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 88))(a1)) {
          (*(void (**)(uint64_t, void **))(*(void *)a1 + 104))(a1, __p);
        }
        uint64_t v13 = 0;
        long long v11 = 0u;
        long long v12 = 0u;
        ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v11);
      }
    }
    else if (!*(unsigned char *)(a1 + 127))
    {
      goto LABEL_13;
    }
    *(void *)&long long v11 = SipDigestAuthScheme::kDirectiveQualityOfProtection;
    uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, SipDigestAuthScheme::kDirectiveQualityOfProtection, (uint64_t)&std::piecewise_construct, (long long **)&v11);
    std::string::operator=((std::string *)(v6 + 40), (const std::string *)(a1 + 104));
    goto LABEL_13;
  }
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v11);
}

void sub_1C5338DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a28);
  _Unwind_Resume(a1);
}

uint64_t SipDigestAuthScheme::parseDirective(uint64_t a1, void *a2, std::string *__str)
{
  uint64_t v5 = *((unsigned __int8 *)a2 + 23);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = a2[1];
  }
  switch(v5)
  {
    case 2:
      if (v6 >= 0) {
        uint64_t v7 = a2;
      }
      else {
        uint64_t v7 = (_WORD *)*a2;
      }
      if (*v7 != 25454) {
        goto LABEL_51;
      }
      if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v8 = __str;
      }
      else {
        uint64_t v8 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)(a1 + 48) = strtoul((const char *)v8, 0, 16);
      return 1;
    case 3:
      if (v6 >= 0) {
        long long v9 = (unsigned __int16 *)a2;
      }
      else {
        long long v9 = (unsigned __int16 *)*a2;
      }
      if (*v9 != 29301 || *((unsigned char *)v9 + 2) != 105)
      {
        int v11 = *v9;
        int v12 = *((unsigned __int8 *)v9 + 2);
        if (v11 == 28529 && v12 == 112)
        {
          std::string::size_type Token = 0;
          __p[0] = 0;
          __p[1] = 0;
          *(void *)&long long v31 = 0;
          while (1)
          {
            std::string::size_type Token = ims::nextToken(__str, Token, (std::string *)__p, 0x2Cu);
            if (Token == -1) {
              break;
            }
            ims::chomp((std::string *)__p, "\r\n\t ", 3);
            unint64_t v15 = *(void *)(a1 + 88);
            if (v15 >= *(void *)(a1 + 96))
            {
              uint64_t v17 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 80), (long long *)__p);
            }
            else
            {
              if (SBYTE7(v31) < 0)
              {
                std::string::__init_copy_ctor_external(*(std::string **)(a1 + 88), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
              }
              else
              {
                long long v16 = *(_OWORD *)__p;
                *(void *)(v15 + 16) = v31;
                *(_OWORD *)unint64_t v15 = v16;
              }
              uint64_t v17 = v15 + 24;
              *(void *)(a1 + 88) = v15 + 24;
            }
            *(void *)(a1 + 88) = v17;
          }
          if (SBYTE7(v31) < 0) {
            operator delete(__p[0]);
          }
          if (std::string::find(__str, 44, 0) != -1) {
            return 1;
          }
          uint64_t v28 = (std::string *)(a1 + 104);
        }
        else
        {
LABEL_51:
          __p[0] = a2;
          uint64_t v28 = (std::string *)(std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, (long long **)__p)+ 40);
        }
        std::string::operator=(v28, __str);
        return 1;
      }
      std::string::operator=((std::string *)(a1 + 56), __str);
      uint64_t v55 = 0;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      *(_OWORD *)std::string __p = 0u;
      SipUri::SipUri((SipUri *)__p);
      uint64_t v29 = SipUri::fromString((uint64_t)__p, __str);
      SipUri::~SipUri((SipUri *)__p);
      return v29;
    case 5:
      if (v6 >= 0) {
        long long v18 = a2;
      }
      else {
        long long v18 = (void *)*a2;
      }
      int v19 = *(_DWORD *)v18;
      int v20 = *((unsigned __int8 *)v18 + 4);
      if (v19 != 1668181870 || v20 != 101) {
        goto LABEL_51;
      }
      char v22 = *(uint64_t (**)(void))(*(void *)a1 + 96);
      return v22();
    case 9:
      if (v6 >= 0) {
        std::string v24 = a2;
      }
      else {
        std::string v24 = (uint64_t *)*a2;
      }
      uint64_t v25 = *v24;
      int v26 = *((unsigned __int8 *)v24 + 8);
      if (v25 != 0x687469726F676C61 || v26 != 109) {
        goto LABEL_51;
      }
      char v22 = *(uint64_t (**)(void))(*(void *)a1 + 112);
      return v22();
    default:
      goto LABEL_51;
  }
}

void sub_1C5339200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

void SipDigestAuthScheme::_computeResponse()
{
  uint64_t v1 = 0;
  memset(v0, 0, sizeof(v0));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v0);
}

void sub_1C53393CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a21);
  _Unwind_Resume(a1);
}

void SipDigestAuthScheme::_computeResponse(uint64_t a1)
{
  memset(&v4, 0, sizeof(v4));
  if (*(char *)(a1 + 151) < 0) {
    std::string::__init_copy_ctor_external(&v4, *(const std::string::value_type **)(a1 + 128), *(void *)(a1 + 136));
  }
  else {
    std::string v4 = *(std::string *)(a1 + 128);
  }
  std::string::size_type size = HIBYTE(v4.__r_.__value_.__r.__words[2]);
  if ((v4.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v4.__r_.__value_.__l.__size_;
  }
  if (!size) {
    std::string::operator=(&v4, &SipDigestAlgorithm::kAlgorithmMD5);
  }
  uint64_t v3 = 0;
  memset(v2, 0, sizeof(v2));
  SipDigestAlgorithmManager::SipDigestAlgorithmManager((SipDigestAlgorithmManager *)v2);
}

void sub_1C533A3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator(&a51);
  if (*(char *)(v58 - 121) < 0) {
    operator delete(*(void **)(v58 - 144));
  }
  if (a58 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v58 - 209) < 0) {
    operator delete(*(void **)(v58 - 232));
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)(v58 - 208));
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  SipDigestAlgorithmManager::~SipDigestAlgorithmManager((SipDigestAlgorithmManager *)&a38);
  if (a49 < 0) {
    operator delete(a44);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, long long **a3)
{
  int v6 = (void *)(a1 + 24);
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v28[2] = 1;
  long long v16 = operator new(0x40uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *long long v16 = 0;
  v16[1] = v8;
  uint64_t v17 = *a3;
  long long v18 = **a3;
  _OWORD v16[4] = *((void *)*a3 + 2);
  *((_OWORD *)v16 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v18;
  *((void *)v17 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)v17 + 2) = 0;
  *(void *)uint64_t v17 = 0;
  v16[6] = 0;
  v16[7] = 0;
  v16[5] = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v12);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *uint64_t v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v26 >= v9) {
          v26 %= v9;
        }
      }
      else
      {
        v26 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v28[0];
  v28[0] = 0;
  ++*v6;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return i;
}

void sub_1C533A844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_SipDigestAuthScheme_cpp()
{
  *(void *)&long long v4 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v2, "auth");
  std::string::basic_string[abi:ne180100]<0>(v3, "auth-int");
  kPreferredQopList = 0;
  qword_1EBBDB980 = 0;
  qword_1EBBDB988 = 0;
  kPreferredQopList = (uint64_t)operator new(0x30uLL);
  qword_1EBBDB980 = kPreferredQopList;
  qword_1EBBDB988 = kPreferredQopList + 48;
  uint64_t v0 = 0;
  qword_1EBBDB980 = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&qword_1EBBDB988, &v2, &v4, (std::string *)kPreferredQopList);
  do
  {
    if (SHIBYTE(v3[v0 + 2]) < 0) {
      operator delete((void *)v3[v0]);
    }
    v0 -= 3;
  }
  while (v0 != -6);
  return __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &kPreferredQopList, &dword_1C51D1000);
}

void sub_1C533A96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  qword_1EBBDB980 = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  uint64_t v25 = 0;
  while (1)
  {
    if (*(&a23 + v25) < 0) {
      operator delete(*(void **)((char *)&a18 + v25));
    }
    v25 -= 24;
    if (v25 == -48) {
      _Unwind_Resume(a1);
    }
  }
}

void *ims::analytics::AnalyticsSender::create@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_1F20C36F8;
  result[3] = &unk_1F20C3748;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void ims::analytics::populateCellularInfo(void *a1, uint64_t a2)
{
  uint64_t v25 = 0;
  unsigned int v24 = 0;
  BOOL v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  if (*(void *)a2)
  {
    HIDWORD(v25) = ims::strToUint32((uint64_t *)(*(void *)a2 + 3736), 0);
    LODWORD(v25) = ims::strToUint32((uint64_t *)(*(void *)a2 + 3712), 0);
    ims::AccessNetworks::cellular((ims::AccessNetworks *)(*(void *)a2 + 3160), (uint64_t)&v16);
    ims::AccessNetwork::extractCellularInfo(&v16, (int *)&v25, (int *)&v25 + 1, (int *)&v24, (uint64_t)&v21);
    if (v20 < 0) {
      operator delete(__p);
    }
    if (v18 < 0) {
      operator delete(v16);
    }
    xpc_object_t v14 = xpc_int64_create(v25);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    long long v16 = a1;
    uint64_t v17 = "mcc";
    xpc::dict::object_proxy::operator=((uint64_t)&v16, &v14, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v14);
    xpc_object_t v14 = 0;
    xpc_object_t v12 = xpc_int64_create(HIDWORD(v25));
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    long long v16 = a1;
    uint64_t v17 = "mnc";
    xpc::dict::object_proxy::operator=((uint64_t)&v16, &v12, &v13);
    xpc_release(v13);
    xpc_object_t v13 = 0;
    xpc_release(v12);
    xpc_object_t v12 = 0;
    BOOL isIwlanOverCellular = ims::AccessNetworks::isIwlanOverCellular((ims::AccessNetworks *)(*(void *)a2 + 3160));
    xpc_object_t v10 = xpc_BOOL_create(isIwlanOverCellular);
    if (!v10) {
      xpc_object_t v10 = xpc_null_create();
    }
    long long v16 = a1;
    uint64_t v17 = "over_cellular";
    xpc::dict::object_proxy::operator=((uint64_t)&v16, &v10, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_release(v10);
    xpc_object_t v10 = 0;
    if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&_MergedGlobals_8))
    {
      ims::analytics::CoreLocationState::create(&qword_1EBBDBE00);
      __cxa_atexit((void (*)(void *))std::shared_ptr<ims::analytics::CoreLocationState>::~shared_ptr[abi:ne180100], &qword_1EBBDBE00, &dword_1C51D1000);
      __cxa_guard_release(&_MergedGlobals_8);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)qword_1EBBDBE00 + 16))(qword_1EBBDBE00))
    {
      xpc_object_t v8 = xpc_int64_create(v24);
      if (!v8) {
        xpc_object_t v8 = xpc_null_create();
      }
      long long v16 = a1;
      uint64_t v17 = "area_id";
      xpc::dict::object_proxy::operator=((uint64_t)&v16, &v8, &v9);
      xpc_release(v9);
      xpc_object_t v9 = 0;
      xpc_release(v8);
      xpc_object_t v8 = 0;
      if (SHIBYTE(v23) < 0)
      {
        if (!v22) {
          goto LABEL_24;
        }
        uint64_t v5 = v21;
      }
      else
      {
        if (!HIBYTE(v23)) {
          goto LABEL_24;
        }
        uint64_t v5 = (const char *)&v21;
      }
      xpc_object_t v6 = xpc_string_create(v5);
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      long long v16 = a1;
      uint64_t v17 = "cell_id";
      xpc::dict::object_proxy::operator=((uint64_t)&v16, &v6, &v7);
      xpc_release(v7);
      xpc_object_t v7 = 0;
      xpc_release(v6);
      xpc_object_t v6 = 0;
    }
  }
LABEL_24:
  if (SHIBYTE(v23) < 0) {
    operator delete(v21);
  }
}

void sub_1C533AD30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_MergedGlobals_8);
  if (*(char *)(v1 - 33) < 0) {
    operator delete(*(void **)(v1 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t std::shared_ptr<ims::analytics::CoreLocationState>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__shared_ptr_emplace<anonymous namespace'::CTAnalyticsSender>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C36F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<anonymous namespace'::CTAnalyticsSender>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C36F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<anonymous namespace'::CTAnalyticsSender>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void anonymous namespace'::CTAnalyticsSender::~CTAnalyticsSender(_anonymous_namespace_::CTAnalyticsSender *this)
{
}

void anonymous namespace'::CTAnalyticsSender::sendEvent(uint64_t a1, uint64_t a2, void **a3)
{
  std::string::basic_string[abi:ne180100]<0>(v17, "ims.ca.util");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  uint64_t v5 = ims::debug((uint64_t)v17, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Sending ", 8);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 32))(v5, a2);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  xpc_object_t v14 = 0;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v7 = v6;
  if (v6)
  {
    xpc_object_t v14 = v6;
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v14 = v7;
    if (!v7)
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v7 = 0;
      goto LABEL_12;
    }
  }
  if (MEMORY[0x1C878F160](v7) == MEMORY[0x1E4F14590])
  {
    xpc_retain(v7);
    goto LABEL_13;
  }
  xpc_object_t v8 = xpc_null_create();
LABEL_12:
  xpc_object_t v14 = v8;
LABEL_13:
  xpc_release(v7);
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  std::string::basic_string[abi:ne180100]<0>(v17, (char *)*MEMORY[0x1E4F5B1F0]);
  xpc_object_t v12 = xpc_BOOL_create(1);
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  xpc_object_t v9 = v17;
  if (v18 < 0) {
    xpc_object_t v9 = (void **)v17[0];
  }
  __p[0] = &v14;
  __p[1] = v9;
  xpc::dict::object_proxy::operator=((uint64_t)__p, &v12, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  xpc_object_t v10 = *a3;
  xpc_object_t v11 = v10;
  xpc_object_t v12 = 0;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    xpc_object_t v11 = xpc_null_create();
  }
  analytics_send_event_lazy_with_options();
  xpc_release(v11);
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
  xpc_release(v14);
}

void sub_1C533B148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, xpc_object_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  xpc_release(object);
  if (*(char *)(v22 - 33) < 0) {
    operator delete(*(void **)(v22 - 56));
  }
  xpc_release(a16);
  _Unwind_Resume(a1);
}

xpc_object_t ___ZN12_GLOBAL__N_117CTAnalyticsSender9sendEventERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEN3xpc4dictE_block_invoke(uint64_t a1)
{
  xpc_object_t v1 = *(xpc_object_t *)(a1 + 32);
  if (v1) {
    xpc_retain(*(xpc_object_t *)(a1 + 32));
  }
  else {
    xpc_object_t v1 = xpc_null_create();
  }
  xpc_object_t v2 = xpc_null_create();
  xpc_release(v2);
  return v1;
}

void sub_1C533B21C(_Unwind_Exception *a1)
{
  xpc_release(v1);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 32) = result;
  return result;
}

void __destroy_helper_block_e8_32c15_ZTSN3xpc4dictE(uint64_t a1)
{
  *(void *)(a1 + 32) = 0;
}

void SDPMediaPath::SDPMediaPath(SDPMediaPath *this, const LazuliRouteSet *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "path");
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F20E5C78;
  if (SHIBYTE(v5) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v5) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *((_OWORD *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *(_OWORD *)__p;
    *((void *)this + 4) = v5;
  }
  *(void *)this = &unk_1F20C37C8;
  LazuliRouteSet::LazuliRouteSet((SDPMediaPath *)((char *)this + 40), a2);
}

void sub_1C533B37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void SDPMediaPath::SDPMediaPath(SDPMediaPath *this, const SDPMediaPath *a2)
{
  if (*((char *)a2 + 39) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((void *)a2 + 3));
  }
  else {
    std::string __p = *(std::string *)((char *)a2 + 16);
  }
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F20E5C78;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(std::string *)((char *)this + 16) = __p;
  }
  *(void *)this = &unk_1F20C37C8;
  LazuliRouteSet::LazuliRouteSet((SDPMediaPath *)((char *)this + 40), (const SDPMediaPath *)((char *)a2 + 40));
}

void sub_1C533B4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void SDPMediaPath::~SDPMediaPath(void **this)
{
  *this = &unk_1F20C37C8;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(this + 5));
  *this = &unk_1F20E5C78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

{
  uint64_t vars8;

  SDPMediaPath::~SDPMediaPath(this);
  JUMPOUT(0x1C878E320);
}

void SDPMediaPath::value(SDPMediaPath *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C533B638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *SDPMediaPath::key@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "path");
}

void SipState::SipState(SipState *this, const SipUserAgent *a2)
{
  long long v4 = (char *)this + 8;
  *(void *)this = &unk_1F20C3820;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C3878;
  SipTimerContainer::SipTimerContainer((SipState *)((char *)this + 24));
  *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 2) = a2;
  *((void *)this + 15) = this;
  *((void *)this + 16) = v4;
  if (a2) {
    *((void *)this + 20) = SipUserAgent::config(a2) + 512;
  }
}

void SipState::exitState(SipState *this)
{
}

BOOL SipState::timersEnabled(SipState *this)
{
  uint64_t v2 = (*(uint64_t (**)(SipState *))(*(void *)this + 40))(this);
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 24))(v2);
  return v3 == (*(unsigned int (**)(SipState *))(*(void *)this + 48))(this);
}

void SipState::loggableName(SipState *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 191) < 0) {
    uint64_t v4 = *((void *)this + 22);
  }
  else {
    uint64_t v4 = *((unsigned __int8 *)this + 191);
  }
  if (!v4)
  {
    if ((*(uint64_t (**)(SipState *))(*(void *)this + 40))(this))
    {
      uint64_t v6 = 0;
      memset(v5, 0, sizeof(v5));
      ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v5);
    }
    (*(void (**)(SipState *))(*(void *)this + 48))(this);
    ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()();
  }
  if (*((char *)this + 191) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 21), *((void *)this + 22));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 168);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 23);
  }
}

void sub_1C533BA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipState::loggableName(SipState *this@<X0>, std::string *a2@<X8>)
{
}

uint64_t SipState::stateMachine(SipState *this)
{
  return 0;
}

{
  return 0;
}

uint64_t SipState::id(SipState *this)
{
  return 0;
}

void non-virtual thunk to'SipState::~SipState(SipState *this)
{
}

{
  uint64_t vars8;

  SipState::~SipState((SipState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

uint64_t MsrpTransportTcp::MsrpTransportTcp(uint64_t a1, void *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F20CC538;
  *(void *)(a1 + 24) = &unk_1F20CC578;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v4;
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_weak(v4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v9, "msrp.tport");
  (*(void (**)(std::string *__return_ptr))(*(void *)*a2 + 48))(&__p);
  ImsLogContainer::ImsLogContainer(a1 + 80, &v9, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F20C38F0;
  *(void *)(a1 + 24) = &unk_1F20C3968;
  *(void *)(a1 + 80) = &unk_1F20C39B8;
  *(_OWORD *)(a1 + 216) = 0u;
  uint64_t v6 = (void **)(a1 + 216);
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 232) = 0;
  ims::convertBundleIdToUuid(&v9);
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*v6);
  }
  *(_OWORD *)uint64_t v6 = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
  *(void *)(a1 + 232) = *((void *)&v9.__r_.__value_.__l + 2);
  return a1;
}

void sub_1C533BD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (*(char *)(v20 + 239) < 0) {
    operator delete(*v22);
  }
  unsigned int v24 = *(std::__shared_weak_count **)(v20 + 208);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v20 + 192);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  ImsLogContainer::~ImsLogContainer(v21);
  MsrpTransportInterface::~MsrpTransportInterface((MsrpTransportInterface *)v20);
  _Unwind_Resume(a1);
}

void MsrpTransportTcp::~MsrpTransportTcp(MsrpTransportTcp *this)
{
  *(void *)this = &unk_1F20C38F0;
  *((void *)this + 3) = &unk_1F20C3968;
  *((void *)this + 10) = &unk_1F20C39B8;
  if (*((char *)this + 239) < 0) {
    operator delete(*((void **)this + 27));
  }
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *((void *)this + 10) = &unk_1F20C9CA0;
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  MsrpTransportInterface::~MsrpTransportInterface(this);
}

{
  uint64_t vars8;

  MsrpTransportTcp::~MsrpTransportTcp(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'MsrpTransportTcp::~MsrpTransportTcp(MsrpTransportTcp *this)
{
}

{
  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)((char *)this - 80));
}

{
  uint64_t vars8;

  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)((char *)this - 80));
  JUMPOUT(0x1C878E320);
}

void MsrpTransportTcp::initListener(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1 + 10;
  uint64_t v7 = (*(uint64_t (**)(void *))(a1[10] + 64))(a1 + 10);
  (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"MsrpTransportTcp::initListener()", 32);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v10 = (std::__shared_weak_count *)a1[5];
  a1[4] = v9;
  a1[5] = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__p, a1 + 1);
  LODWORD(v32) = 0;
  std::allocate_shared[abi:ne180100]<ImsListenSocket,std::allocator<ImsListenSocket>,std::shared_ptr<MsrpTransportInterface>,DscpClass,void>((uint64_t *)&__p, (int *)&v32, &v21);
  xpc_object_t v11 = v22;
  if (v21) {
    xpc_object_t v12 = (char *)v21 + 80;
  }
  else {
    xpc_object_t v12 = 0;
  }
  BOOL v21 = 0;
  uint64_t v22 = 0;
  xpc_object_t v13 = (std::__shared_weak_count *)a1[24];
  a1[23] = v12;
  a1[24] = v11;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  (*(void (**)(void, void))(*(void *)a1[4] + 64))(a1[4], 0);
  *(void *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v14 = a1[23];
  unint64_t v15 = sImsDispatchQueue;
  if (sImsDispatchQueue)
  {
    dispatch_object_t v32 = (dispatch_object_t)sImsDispatchQueue;
  }
  else
  {
    unint64_t v15 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v15;
    dispatch_object_t v32 = v15;
    if (!v15) {
      goto LABEL_17;
    }
  }
  dispatch_retain(v15);
LABEL_17:
  v31[0] = &unk_1F20B3050;
  v31[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  (*(void (**)(uint64_t, uint64_t *, dispatch_object_t *, void *, void, void *, void **, void **, _BYTE))(*(void *)v14 + 16))(v14, a2, &v32, a1 + 27, 0, v31, &v21, &__p, 0);
  if (v30 < 0) {
    operator delete(__p);
  }
  if (v24 < 0) {
    operator delete(v21);
  }
  ims::CFType::~CFType((ims::CFType *)v31);
  if (v32) {
    dispatch_release(v32);
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  BOOL v21 = &unk_1F20B2680;
  uint64_t v22 = (std::__shared_weak_count *)&_bambiDomain;
  int v23 = 0;
  if (*(uint64_t **)(a3 + 8) == &_bambiDomain)
  {
    int v16 = *(_DWORD *)(a3 + 16);
    ImsResult::~ImsResult((ImsResult *)&v21);
    if (!v16)
    {
      (*(void (**)(void **__return_ptr))(*(void *)a1[23] + 56))(&v21);
      uint64_t v18 = v21;
      uint64_t v17 = v22;
      if (v22) {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float v19 = (std::__shared_weak_count *)a1[5];
      a1[4] = v18;
      a1[5] = v17;
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      uint64_t v20 = (*(uint64_t (**)(void *))(*v6 + 64))(v6);
      (*(void (**)(void *, uint64_t))(*v6 + 16))(v6, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"initialized listener on local port ", 35);
      *(unsigned char *)(v20 + 17) = 0;
      (*(void (**)(void))(*(void *)a1[4] + 56))(a1[4]);
      std::ostream::operator<<();
      *(unsigned char *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v20 + 17) = 0;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v21);
  }
}

void sub_1C533C3A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  ImsResult::~ImsResult(v28);
  _Unwind_Resume(a1);
}

void MsrpTransportTcp::initConnection(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = a1 + 10;
  uint64_t v9 = (*(uint64_t (**)(void *))(a1[10] + 64))(a1 + 10);
  (*(void (**)(void *, uint64_t))(*v8 + 16))(v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"MsrpTransportTcp::initConnection()", 34);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  uint64_t v11 = *a2;
  uint64_t v10 = a2[1];
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v12 = (std::__shared_weak_count *)a1[5];
  a1[4] = v11;
  a1[5] = v10;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  uint64_t v14 = *a3;
  uint64_t v13 = a3[1];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v15 = (std::__shared_weak_count *)a1[7];
  a1[6] = v14;
  a1[7] = v13;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&object, a1 + 1);
  int v16 = (std::__shared_weak_count *)operator new(0xC8uLL);
  uint64_t v17 = v16;
  v16->__shared_owners_ = 0;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3D70;
  uint64_t v18 = v16 + 1;
  float v19 = v50;
  dispatch_object_t v20 = object + 3;
  if (!object) {
    dispatch_object_t v20 = 0;
  }
  dispatch_object_t v57 = v20;
  uint64_t v58 = v50;
  dispatch_object_t object = 0;
  long long v50 = 0;
  ImsTcpSocket::ImsTcpSocket((uint64_t)&v16[1], (uint64_t *)&v57, 0, 0);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::string __p = v18;
  uint64_t v55 = v17;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&__p, &v17[1].__shared_owners_, (uint64_t)v18);
  BOOL v21 = v55;
  if (__p) {
    uint64_t v22 = (char *)__p + 80;
  }
  else {
    uint64_t v22 = 0;
  }
  std::string __p = 0;
  uint64_t v55 = 0;
  int v23 = (std::__shared_weak_count *)a1[26];
  a1[25] = v22;
  a1[26] = v21;
  if (v23)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
  }
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  (*(void (**)(void, void))(*(void *)a1[4] + 64))(a1[4], 0);
  a4[2] = 0;
  a4[3] = 0;
  a4[7] = 0;
  a4[8] = 0;
  a4[5] = 0;
  a4[6] = 0;
  *a4 = &unk_1F20B2680;
  a4[1] = &_bambiDomain;
  a4[4] = 0;
  char v24 = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)*a2 + 128))();
  uint64_t v25 = (*(uint64_t (**)(void))(*(void *)*a3 + 128))();
  uint64_t v26 = v24[23];
  if ((v26 & 0x80u) == 0) {
    uint64_t v27 = v24[23];
  }
  else {
    uint64_t v27 = *((void *)v24 + 1);
  }
  uint64_t v28 = *(unsigned __int8 *)(v25 + 23);
  int v29 = (char)v28;
  if ((v28 & 0x80u) != 0) {
    uint64_t v28 = *(void *)(v25 + 8);
  }
  if (v27 != v28) {
    goto LABEL_36;
  }
  if (v29 >= 0) {
    char v30 = (unsigned __int8 *)v25;
  }
  else {
    char v30 = *(unsigned __int8 **)v25;
  }
  if ((v26 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v24, v30, *((void *)v24 + 1))) {
      goto LABEL_36;
    }
LABEL_39:
    uint64_t v38 = a1[25];
    std::string __p = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    long long v39 = sImsDispatchQueue;
    if (sImsDispatchQueue)
    {
      dispatch_object_t v53 = (dispatch_object_t)sImsDispatchQueue;
    }
    else
    {
      long long v39 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v39;
      dispatch_object_t v53 = v39;
      if (!v39)
      {
LABEL_51:
        v52[0] = &unk_1F20B3050;
        v52[1] = 0;
        std::string::basic_string[abi:ne180100]<0>(&object, "");
        LOBYTE(v47) = 0;
        (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, void *, void *, void **, dispatch_object_t *, void *, void, void *, dispatch_object_t *, void))(*(void *)v38 + 16))(&v57, v38, a2, a3, &__p, &v53, a1 + 27, 0, v52, &object, v47);
        ImsResult::operator=((uint64_t)a4, (uint64_t)&v57);
        ImsResult::~ImsResult((ImsResult *)&v57);
        if (v51 < 0) {
          operator delete(object);
        }
        ims::CFType::~CFType((ims::CFType *)v52);
        if (v53) {
          dispatch_release(v53);
        }
        if (SHIBYTE(v56) < 0) {
          operator delete(__p);
        }
        goto LABEL_57;
      }
    }
    dispatch_retain(v39);
    goto LABEL_51;
  }
  if (!v24[23]) {
    goto LABEL_39;
  }
  while (*v24 == *v30)
  {
    ++v24;
    ++v30;
    if (!--v26) {
      goto LABEL_39;
    }
  }
LABEL_36:
  uint64_t v31 = (*(uint64_t (**)(void *))(*v8 + 64))(v8);
  (*(void (**)(void *, uint64_t))(*v8 + 16))(v8, v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"Ignoring local address recommendation ", 38);
  *(unsigned char *)(v31 + 17) = 0;
  uint64_t v32 = (*(uint64_t (**)(void))(*(void *)*a2 + 128))();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 32))(v31, v32);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)" to match destination address type ", 35);
  *(unsigned char *)(v31 + 17) = 0;
  uint64_t v33 = (*(uint64_t (**)(void))(*(void *)*a3 + 128))();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 32))(v31, v33);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v31 + 17) = 0;
  uint64_t v34 = (*(uint64_t (**)(void))(*(void *)*a3 + 72))();
  uint64_t v35 = socket(*(unsigned __int8 *)(v34 + 1), 1, 0);
  if (v35 != -1)
  {
    uint64_t v36 = a1[25];
    long long v37 = sImsDispatchQueue;
    if (sImsDispatchQueue)
    {
      dispatch_object_t object = (dispatch_object_t)sImsDispatchQueue;
    }
    else
    {
      long long v37 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v37;
      dispatch_object_t object = v37;
      if (!v37)
      {
LABEL_45:
        v48[0] = &unk_1F20B3050;
        v48[1] = 0;
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        (*(void (**)(dispatch_object_t *__return_ptr, uint64_t, uint64_t, void *, dispatch_object_t *, void *, void, void *, void **, _DWORD))(*(void *)v36 + 24))(&v57, v36, v35, a3, &object, a1 + 27, 0, v48, &__p, 0);
        ImsResult::operator=((uint64_t)a4, (uint64_t)&v57);
        ImsResult::~ImsResult((ImsResult *)&v57);
        if (SHIBYTE(v56) < 0) {
          operator delete(__p);
        }
        ims::CFType::~CFType((ims::CFType *)v48);
        if (object) {
          dispatch_release(object);
        }
        goto LABEL_57;
      }
    }
    dispatch_retain(v37);
    goto LABEL_45;
  }
  int v40 = *__error();
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  dispatch_object_t v57 = (dispatch_object_t)&unk_1F20B2680;
  uint64_t v58 = (std::__shared_weak_count *)&_posixDomain;
  int v59 = v40;
  ImsResult::operator=((uint64_t)a4, (uint64_t)&v57);
  ImsResult::~ImsResult((ImsResult *)&v57);
  if (((*(uint64_t (**)(void, void))(*(void *)a4[1] + 24))(a4[1], *((unsigned int *)a4 + 4)) & 1) == 0)
  {
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    dispatch_object_t v57 = (dispatch_object_t)&unk_1F20B2680;
    uint64_t v58 = (std::__shared_weak_count *)&_bambiDomain;
    int v59 = 1073741842;
    ImsResult::operator=((uint64_t)a4, (uint64_t)&v57);
    ImsResult::~ImsResult((ImsResult *)&v57);
  }
LABEL_57:
  long long v60 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  dispatch_object_t v57 = (dispatch_object_t)&unk_1F20B2680;
  uint64_t v58 = (std::__shared_weak_count *)&_bambiDomain;
  int v59 = 0;
  if ((uint64_t *)a4[1] == &_bambiDomain)
  {
    int v41 = *((_DWORD *)a4 + 4);
    ImsResult::~ImsResult((ImsResult *)&v57);
    if (!v41)
    {
      (*(void (**)(dispatch_object_t *__return_ptr))(*(void *)a1[25] + 136))(&v57);
      dispatch_object_t v43 = v57;
      long long v42 = v58;
      if (v58) {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v44 = (std::__shared_weak_count *)a1[5];
      a1[4] = v43;
      a1[5] = v42;
      if (v44) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
      }
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
      uint64_t v45 = (*(uint64_t (**)(void *))(*v8 + 64))(v8);
      (*(void (**)(void *, uint64_t))(*v8 + 16))(v8, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"initialized on local port ", 26);
      *(unsigned char *)(v45 + 17) = 0;
      (*(void (**)(void))(*(void *)a1[4] + 56))(a1[4]);
      std::ostream::operator<<();
      *(unsigned char *)(v45 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v45 + 17) = 0;
      uint64_t v46 = a1[9];
      if (v46) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 16), 1uLL, memory_order_relaxed);
      }
      dispatch_object_t v57 = 0;
      uint64_t v58 = 0;
      (*(void (**)(dispatch_object_t *__return_ptr))(*(void *)a1[25] + 104))(&v57);
      if (!sImsDispatchQueue) {
        sImsDispatchQueue = (uint64_t)dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      }
      if (v46) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 16), 1uLL, memory_order_relaxed);
      }
      if (v58) {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      operator new();
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v57);
  }
}

void sub_1C533CE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,dispatch_object_t object,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  ImsResult::~ImsResult(v28);
  _Unwind_Resume(a1);
}

void MsrpTransportTcp::createListener(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x108uLL);
  uint64_t v7 = v6;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3A50;
  uint64_t v8 = &v6[1].__vftable;
  uint64_t v9 = *a1;
  uint64_t v10 = (std::__shared_weak_count *)a1[1];
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v25 = v9;
  *((void *)&v25 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v10;
  MsrpTransportTcp::MsrpTransportTcp((uint64_t)&v6[1], &v25);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  v7[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3AA0;
  v7[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3B18;
  v7[4].__shared_owners_ = (uint64_t)&unk_1F20C3B68;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  shared_weak_owners = (std::__shared_weak_count *)v7[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_12;
    }
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[1].__shared_owners_ = (uint64_t)v8;
    v7[1].__shared_weak_owners_ = (uint64_t)v7;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[1].__shared_owners_ = (uint64_t)v8;
    v7[1].__shared_weak_owners_ = (uint64_t)v7;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_12:
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  xpc_object_t v12 = (std::__shared_weak_count *)a2[1];
  uint64_t v23 = *a2;
  char v24 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr, void *, uint64_t *))(*v8 + 48))(&v25, v8, &v23);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v17 = &unk_1F20B2680;
  uint64_t v18 = &_bambiDomain;
  LODWORD(v19) = 0;
  if (*((uint64_t **)&v25 + 1) == &_bambiDomain)
  {
    int v13 = v26;
    ImsResult::~ImsResult((ImsResult *)&v17);
    if (!v13)
    {
      ImsResult::~ImsResult((ImsResult *)&v25);
      *a3 = v8;
      a3[1] = v7;
      return;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v17);
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (*a1) {
    (*(void (**)(void **__return_ptr))(*(void *)*a1 + 48))(&v17);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(&v17, "");
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "msrp.tport");
  uint64_t v14 = ims::error((uint64_t)__p, (uint64_t)&v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Failed to init listner! ", 24);
  *(unsigned char *)(v14 + 17) = 0;
  (*(void (**)(long long *, uint64_t))(v25 + 16))(&v25, v14);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v14 + 17) = 0;
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  *a3 = 0;
  a3[1] = 0;
  if (SHIBYTE(v19) < 0) {
    operator delete(v17);
  }
  ImsResult::~ImsResult((ImsResult *)&v25);
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1C533D2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult((ImsResult *)&a29);
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void MsrpTransportTcp::createConnection(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = (std::__shared_weak_count *)operator new(0x108uLL);
  uint64_t v9 = v8;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3BE0;
  uint64_t v10 = &v8[1].__vftable;
  uint64_t v11 = *a1;
  xpc_object_t v12 = (std::__shared_weak_count *)a1[1];
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v34 = v11;
  *((void *)&v34 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v12;
  MsrpTransportTcp::MsrpTransportTcp((uint64_t)&v8[1], &v34);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3C30;
  v9[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3CA8;
  v9[4].__shared_owners_ = (uint64_t)&unk_1F20C3CF8;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  shared_weak_owners = (std::__shared_weak_count *)v9[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      goto LABEL_12;
    }
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v9[1].__shared_owners_ = (uint64_t)v10;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v9[1].__shared_owners_ = (uint64_t)v10;
    v9[1].__shared_weak_owners_ = (uint64_t)v9;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
LABEL_12:
  uint64_t v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v32 = *a2;
  uint64_t v33 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v15 = (std::__shared_weak_count *)a3[1];
  uint64_t v30 = *a3;
  uint64_t v31 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(long long *__return_ptr, void *, uint64_t *, uint64_t *))(*v10 + 56))(&v34, v10, &v32, &v30);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  char v24 = &unk_1F20B2680;
  long long v25 = &_bambiDomain;
  LODWORD(v26) = 0;
  if (*((uint64_t **)&v34 + 1) == &_bambiDomain)
  {
    int v16 = v35;
    ImsResult::~ImsResult((ImsResult *)&v24);
    if (!v16)
    {
      ImsResult::~ImsResult((ImsResult *)&v34);
      *a4 = v10;
      a4[1] = v9;
      return;
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&v24);
  }
  char v24 = 0;
  long long v25 = 0;
  uint64_t v26 = 0;
  if (*a1) {
    (*(void (**)(void **__return_ptr))(*(void *)*a1 + 48))(&v24);
  }
  else {
    std::string::basic_string[abi:ne180100]<0>(&v24, "");
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "msrp.tport");
  uint64_t v17 = ims::error((uint64_t)__p, (uint64_t)&v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Failed to init connection! ", 27);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(long long *, uint64_t))(v34 + 16))(&v34, v17);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  if (v23 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v18 = *a1;
  if (*a1)
  {
    uint64_t v19 = (std::__shared_weak_count *)a3[1];
    uint64_t v20 = *a3;
    long long v21 = v19;
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v18 + 24))(v18, &v20);
    if (v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
    }
  }
  *a4 = 0;
  a4[1] = 0;
  if (SHIBYTE(v26) < 0) {
    operator delete(v24);
  }
  ImsResult::~ImsResult((ImsResult *)&v34);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_1C533D75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  ImsResult::~ImsResult((ImsResult *)&a33);
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  _Unwind_Resume(a1);
}

void MsrpTransportTcp::send(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 200);
  if (v5)
  {
    uint64_t v27 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    (*(void (**)(long long *__return_ptr))(*(void *)v5 + 40))(&v23);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    v18[0] = &unk_1F20B2680;
    v18[1] = &_bambiDomain;
    int v19 = 0;
    if (*((uint64_t **)&v23 + 1) == &_bambiDomain)
    {
      int v11 = v24;
      ImsResult::~ImsResult((ImsResult *)v18);
      if (!v11)
      {
LABEL_15:
        ImsResult::~ImsResult((ImsResult *)&v23);
        return;
      }
    }
    else
    {
      ImsResult::~ImsResult((ImsResult *)v18);
    }
    uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 56))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"send ", 5);
    *(unsigned char *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)" bytes failed to ", 17);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48), v12);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    int v13 = *(std::__shared_weak_count **)(a1 + 72);
    if (v13)
    {
      uint64_t v14 = std::__shared_weak_count::lock(v13);
      if (v14)
      {
        unint64_t v15 = v14;
        uint64_t v16 = *(void *)(a1 + 64);
        if (v16)
        {
          ImsResult::ImsResult((ImsResult *)v17, (const std::string *)&v23);
          (*(void (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v16 + 40))(v16, a3, v17);
          ImsResult::~ImsResult((ImsResult *)v17);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    goto LABEL_15;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 56))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"drop ", 5);
  *(unsigned char *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" bytes on null socket", 21);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 72);
  if (v7)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v7);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)(a1 + 64);
      if (v10)
      {
        long long v30 = 0u;
        long long v32 = 0u;
        long long v31 = 0u;
        v28[0] = &unk_1F20B2680;
        v28[1] = &_bambiDomain;
        int v29 = 1073741840;
        (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v10 + 40))(v10, a3, v28);
        ImsResult::~ImsResult((ImsResult *)v28);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_1C533DBFC(_Unwind_Exception *a1)
{
  ImsResult::~ImsResult((ImsResult *)(v2 - 136));
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

ImsOutStream *MsrpTransportTcp::toStream(MsrpTransportTcp *this, ImsOutStream *a2)
{
  uint64_t v4 = *((void *)this + 4);
  if (!v4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"MSRP transport w/o local info", 29);
    *((unsigned char *)a2 + 17) = 0;
    goto LABEL_5;
  }
  uint64_t v5 = *((void *)this + 6);
  (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v4 + 40))(v4, a2);
  uint64_t v6 = (void *)*((void *)a2 + 1);
  if (v5)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" <-> ", 5);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(void, ImsOutStream *))(**((void **)this + 6) + 40))(*((void *)this + 6), a2);
LABEL_5:
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    return a2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" is ", 4);
  *((unsigned char *)a2 + 17) = 0;
  if (*((void *)this + 23))
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v9 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "not ");
  }
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 32))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"listening", 9);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  return a2;
}

void sub_1C533DE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MsrpTransportTcp::handleIncomingConnection(uint64_t a1, void *a2)
{
  uint64_t v5 = a1 + 80;
  uint64_t v4 = *(void *)(a1 + 80);
  if (*(void *)(a1 + 200))
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(v4 + 56))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"socket already set: ", 20);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 200) + 104))(&v23);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 40))(v23, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" ignoring: ", 11);
    *(unsigned char *)(v6 + 17) = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 104))(&v21);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 40))(v21, v6);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v6 + 17) = 0;
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    uint64_t v7 = v24;
    if (!v24) {
      return;
    }
LABEL_25:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    return;
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(v4 + 64))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"incoming connection ", 20);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 104))(&v23);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 40))(v23, v8);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  int v11 = *(std::__shared_weak_count **)(a1 + 208);
  *(void *)(a1 + 200) = v10;
  *(void *)(a1 + 208) = v9;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    uint64_t v10 = *(void *)(a1 + 200);
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v23, (void *)(a1 + 8));
  if (v23) {
    uint64_t v12 = v23 + 24;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v19 = v12;
  long long v20 = v24;
  uint64_t v23 = 0;
  long long v24 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 184))(v10, &v19);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  int v13 = *(std::__shared_weak_count **)(a1 + 72);
  if (v13)
  {
    uint64_t v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      unint64_t v15 = v14;
      uint64_t v16 = *(void *)(a1 + 64);
      if (v16)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)*a2 + 104))(&v17);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 16))(v16, &v17);
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      uint64_t v7 = v15;
      goto LABEL_25;
    }
  }
}

void sub_1C533E230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void MsrpTransportTcp::handleDisconnect(MsrpTransportTcp *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 8);
      if (v5)
      {
        (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 25) + 104))(&v7);
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 24))(v5, &v7);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 26);
  *((void *)this + 25) = 0;
  *((void *)this + 26) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1C533E35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void MsrpTransportTcp::connectionClosedByPeer(MsrpTransportTcp *this)
{
  uint64_t v2 = (void **)((char *)this + 80);
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 56))((char *)this + 80);
  ((void (*)(void **, uint64_t))(*v2)[2])(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"closed by peer ", 15);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v2[15] + 104))(&v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, v3);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  MsrpTransportTcp::handleDisconnect(this);
}

void sub_1C533E4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MsrpTransportTcp::connectionClosedByPeer(MsrpTransportTcp *this)
{
}

void MsrpTransportTcp::connectionResetByPeer(MsrpTransportTcp *this)
{
  uint64_t v2 = (void **)((char *)this + 80);
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 56))((char *)this + 80);
  ((void (*)(void **, uint64_t))(*v2)[2])(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"reset by peer ", 14);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v2[15] + 104))(&v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 40))(v4, v3);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  MsrpTransportTcp::handleDisconnect(this);
}

void sub_1C533E63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MsrpTransportTcp::connectionResetByPeer(MsrpTransportTcp *this)
{
}

void MsrpTransportTcp::handleConnectError(MsrpTransportTcp *this, const ImsResult *a2)
{
  uint64_t v4 = (void **)((char *)this + 80);
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 56))((char *)this + 80);
  ((void (*)(void **, uint64_t))(*v4)[2])(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"connection error ", 17);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v4[15] + 104))(&v7);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v5);
  uint64_t v6 = *(void **)(v5 + 8);
  char v9 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v5);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  MsrpTransportTcp::handleDisconnect(this);
}

void sub_1C533E7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MsrpTransportTcp::handleConnectError(MsrpTransportTcp *this, const ImsResult *a2)
{
}

void MsrpTransportTcp::handleSocketError(MsrpTransportTcp *this, const ImsResult *a2)
{
  uint64_t v4 = (void **)((char *)this + 80);
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 56))((char *)this + 80);
  ((void (*)(void **, uint64_t))(*v4)[2])(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"socket error ", 13);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(*v4[15] + 104))(&v7);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v5);
  uint64_t v6 = *(void **)(v5 + 8);
  char v9 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v5);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  MsrpTransportTcp::handleDisconnect(this);
}

void sub_1C533E9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'MsrpTransportTcp::handleSocketError(MsrpTransportTcp *this, const ImsResult *a2)
{
}

void MsrpTransportTcp::processDataFromSocket(void *a1, void *a2, size_t a3, void *a4)
{
  uint64_t v7 = (std::__shared_weak_count *)a1[9];
  if (!v7)
  {
    char v9 = 0;
    goto LABEL_7;
  }
  char v9 = std::__shared_weak_count::lock(v7);
  if (!v9 || (uint64_t v10 = a1[8]) == 0)
  {
LABEL_7:
    uint64_t v15 = a1[10];
    uint64_t v14 = a1 + 10;
    uint64_t v16 = (*(uint64_t (**)(void *))(v15 + 56))(v14);
    (*(void (**)(void *, uint64_t))(*v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"No delegate: dropping ", 22);
    *(unsigned char *)(v16 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v16 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" bytes from ", 12);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(void, uint64_t))(*(void *)*a4 + 40))(*a4, v16);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    if (!v9) {
      return;
    }
    goto LABEL_8;
  }
  uint64_t v12 = a1[10];
  int v11 = a1 + 10;
  uint64_t v13 = (*(uint64_t (**)(void *))(v12 + 64))(v11);
  (*(void (**)(void *, uint64_t))(*v11 + 16))(v11, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Received ", 9);
  *(unsigned char *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" bytes from ", 12);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(void, uint64_t))(*(void *)*a4 + 40))(*a4, v13);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = 0;
  std::string::basic_string[abi:ne180100](__p, a2, a3);
  (*(void (**)(uint64_t, void **))(*(void *)v10 + 32))(v10, __p);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_1C533EC9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'MsrpTransportTcp::processDataFromSocket(uint64_t a1, void *a2, size_t a3, void *a4)
{
}

void *MsrpTransportTcp::type@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "TCP");
}

void std::__shared_ptr_emplace<ImsTcpSocket>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsTcpSocket>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<ImsTcpSocket>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

uint64_t *dispatch::async<MsrpTransportTcp::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::$_0>(dispatch_queue_s *,std::unique_ptr<MsrpTransportTcp::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::$_0,std::default_delete<MsrpTransportTcp::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v8 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *a1;
      if (*a1)
      {
        uint64_t v6 = (std::__shared_weak_count *)a1[3];
        uint64_t v9 = a1[2];
        uint64_t v10 = v6;
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 16))(v5, &v9);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void sub_1C533EE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  std::unique_ptr<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0,std::default_delete<MsrpTransportTls::initConnection(std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>,ims::CFMutableArray,std::string const&)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper,std::allocator<MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3A50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper,std::allocator<MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3A50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper,std::allocator<MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper::~MsrpTransportTcpWrapper(MsrpTransportTcp *a1)
{
  MsrpTransportTcp::~MsrpTransportTcp(a1);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'MsrpTransportTcp::createListener(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper::~MsrpTransportTcpWrapper(uint64_t a1)
{
}

{
  uint64_t vars8;

  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)(a1 - 24));
  JUMPOUT(0x1C878E320);
}

{
  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)(a1 - 80));
}

{
  uint64_t vars8;

  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)(a1 - 80));
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper,std::allocator<MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3BE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper,std::allocator<MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3BE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper,std::allocator<MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper::~MsrpTransportTcpWrapper(MsrpTransportTcp *a1)
{
  MsrpTransportTcp::~MsrpTransportTcp(a1);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'MsrpTransportTcp::createConnection(std::shared_ptr<MsrpTransportDelegate>,std::shared_ptr<IpAddress>,std::shared_ptr<IpAddress>)::MsrpTransportTcpWrapper::~MsrpTransportTcpWrapper(uint64_t a1)
{
}

{
  uint64_t vars8;

  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)(a1 - 24));
  JUMPOUT(0x1C878E320);
}

{
  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)(a1 - 80));
}

{
  uint64_t vars8;

  MsrpTransportTcp::~MsrpTransportTcp((MsrpTransportTcp *)(a1 - 80));
  JUMPOUT(0x1C878E320);
}

uint64_t BambiServices::serviceMaskForNames(std::string *a1)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  ims::tokenize(a1, (uint64_t *)&v5, 0x2Cu);
  xpc_object_t v1 = v5;
  uint64_t v2 = v6;
  if (v5 == v6)
  {
    uint64_t v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    do
    {
      uint64_t v3 = ims::Services::serviceWithName(v1) | v3;
      v1 += 24;
    }
    while (v1 != v2);
  }
  uint64_t v8 = (void **)&v5;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  return v3;
}

void sub_1C533F1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void BambiServices::nameArrayForServiceMask(int a1, uint64_t a2)
{
  if ((a1 & 4) == 0) {
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sms");
  unint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 < v4)
  {
    long long v6 = *(_OWORD *)__p;
    *(void *)(v5 + 16) = v209;
    *(_OWORD *)unint64_t v5 = v6;
    *(void *)(a2 + 8) = v5 + 24;
    if ((a1 & 1) == 0) {
      goto LABEL_30;
    }
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(__p, "voice");
    unint64_t v16 = *(void *)(a2 + 16);
    unint64_t v17 = *(void *)(a2 + 8);
    if (v17 >= v16)
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(void *)a2) >> 3);
      unint64_t v20 = v19 + 1;
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)a2) >> 3);
      if (2 * v21 > v20) {
        unint64_t v20 = 2 * v21;
      }
      if (v21 >= 0x555555555555555) {
        unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v22 = v20;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v22) {
        uint64_t v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v22);
      }
      else {
        uint64_t v23 = 0;
      }
      long long v24 = v23 + v19;
      __v.__first_ = v23;
      __v.__begin_ = v24;
      __v.__end_cap_.__value_ = &v23[v22];
      long long v25 = *(_OWORD *)__p;
      v24->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
      __p[1] = 0;
      std::string::size_type v209 = 0;
      __p[0] = 0;
      __v.__end_ = v24 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      uint64_t v26 = *(void *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v27 = SHIBYTE(v209);
      *(void *)(a2 + 8) = v26;
      if (v27 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v18 = *(_OWORD *)__p;
      *(void *)(v17 + 16) = v209;
      *(_OWORD *)unint64_t v17 = v18;
      *(void *)(a2 + 8) = v17 + 24;
    }
    goto LABEL_30;
  }
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(void *)a2) >> 3);
  unint64_t v8 = v7 + 1;
  if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(void *)a2) >> 3);
  if (2 * v9 > v8) {
    unint64_t v8 = 2 * v9;
  }
  unint64_t v10 = v9 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v8;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  int v11 = v10 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v10) : 0;
  uint64_t v12 = v11 + v7;
  __v.__first_ = v11;
  __v.__begin_ = v12;
  __v.__end_cap_.__value_ = &v11[v10];
  long long v13 = *(_OWORD *)__p;
  v12->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  __p[1] = 0;
  std::string::size_type v209 = 0;
  __p[0] = 0;
  __v.__end_ = v12 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  uint64_t v14 = *(void *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  int v15 = SHIBYTE(v209);
  *(void *)(a2 + 8) = v14;
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if (a1) {
      goto LABEL_16;
    }
  }
  else
  {
LABEL_15:
    if (a1) {
      goto LABEL_16;
    }
  }
  if ((a1 & 8) == 0) {
    goto LABEL_44;
  }
LABEL_30:
  std::string::basic_string[abi:ne180100]<0>(__p, "audio");
  unint64_t v28 = *(void *)(a2 + 16);
  unint64_t v29 = *(void *)(a2 + 8);
  if (v29 < v28)
  {
    long long v30 = *(_OWORD *)__p;
    *(void *)(v29 + 16) = v209;
    *(_OWORD *)unint64_t v29 = v30;
    *(void *)(a2 + 8) = v29 + 24;
    if ((a1 & 2) == 0) {
      goto LABEL_59;
    }
LABEL_45:
    std::string::basic_string[abi:ne180100]<0>(__p, "video");
    unint64_t v40 = *(void *)(a2 + 16);
    unint64_t v41 = *(void *)(a2 + 8);
    if (v41 >= v40)
    {
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - *(void *)a2) >> 3);
      unint64_t v44 = v43 + 1;
      if (v43 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - *(void *)a2) >> 3);
      if (2 * v45 > v44) {
        unint64_t v44 = 2 * v45;
      }
      if (v45 >= 0x555555555555555) {
        unint64_t v46 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v46 = v44;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v46) {
        unsigned int v47 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v46);
      }
      else {
        unsigned int v47 = 0;
      }
      long long v48 = v47 + v43;
      __v.__first_ = v47;
      __v.__begin_ = v48;
      __v.__end_cap_.__value_ = &v47[v46];
      long long v49 = *(_OWORD *)__p;
      v48->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v49;
      __p[1] = 0;
      std::string::size_type v209 = 0;
      __p[0] = 0;
      __v.__end_ = v48 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      uint64_t v50 = *(void *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v51 = SHIBYTE(v209);
      *(void *)(a2 + 8) = v50;
      if (v51 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v42 = *(_OWORD *)__p;
      *(void *)(v41 + 16) = v209;
      *(_OWORD *)unint64_t v41 = v42;
      *(void *)(a2 + 8) = v41 + 24;
    }
    goto LABEL_59;
  }
  unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *(void *)a2) >> 3);
  unint64_t v32 = v31 + 1;
  if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *(void *)a2) >> 3);
  if (2 * v33 > v32) {
    unint64_t v32 = 2 * v33;
  }
  unint64_t v34 = v33 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v32;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  long long v35 = v34 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v34) : 0;
  long long v36 = v35 + v31;
  __v.__first_ = v35;
  __v.__begin_ = v36;
  __v.__end_cap_.__value_ = &v35[v34];
  long long v37 = *(_OWORD *)__p;
  v36->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
  __p[1] = 0;
  std::string::size_type v209 = 0;
  __p[0] = 0;
  __v.__end_ = v36 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  uint64_t v38 = *(void *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  int v39 = SHIBYTE(v209);
  *(void *)(a2 + 8) = v38;
  if (v39 < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 2) != 0) {
      goto LABEL_45;
    }
  }
  else
  {
LABEL_44:
    if ((a1 & 2) != 0) {
      goto LABEL_45;
    }
  }
  if ((a1 & 0x10) == 0) {
    goto LABEL_73;
  }
LABEL_59:
  std::string::basic_string[abi:ne180100]<0>(__p, "ipcall");
  unint64_t v52 = *(void *)(a2 + 16);
  unint64_t v53 = *(void *)(a2 + 8);
  if (v53 < v52)
  {
    long long v54 = *(_OWORD *)__p;
    *(void *)(v53 + 16) = v209;
    *(_OWORD *)unint64_t v53 = v54;
    *(void *)(a2 + 8) = v53 + 24;
    if ((a1 & 0x20) == 0) {
      goto LABEL_88;
    }
LABEL_74:
    std::string::basic_string[abi:ne180100]<0>(__p, "text");
    unint64_t v64 = *(void *)(a2 + 16);
    unint64_t v65 = *(void *)(a2 + 8);
    if (v65 >= v64)
    {
      unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65 - *(void *)a2) >> 3);
      unint64_t v68 = v67 + 1;
      if (v67 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v64 - *(void *)a2) >> 3);
      if (2 * v69 > v68) {
        unint64_t v68 = 2 * v69;
      }
      if (v69 >= 0x555555555555555) {
        unint64_t v70 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v70 = v68;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v70) {
        __int16 v71 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v70);
      }
      else {
        __int16 v71 = 0;
      }
      int v72 = v71 + v67;
      __v.__first_ = v71;
      __v.__begin_ = v72;
      __v.__end_cap_.__value_ = &v71[v70];
      long long v73 = *(_OWORD *)__p;
      v72->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v72->__r_.__value_.__l.__data_ = v73;
      __p[1] = 0;
      std::string::size_type v209 = 0;
      __p[0] = 0;
      __v.__end_ = v72 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      uint64_t v74 = *(void *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v75 = SHIBYTE(v209);
      *(void *)(a2 + 8) = v74;
      if (v75 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v66 = *(_OWORD *)__p;
      *(void *)(v65 + 16) = v209;
      *(_OWORD *)unint64_t v65 = v66;
      *(void *)(a2 + 8) = v65 + 24;
    }
    goto LABEL_88;
  }
  unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v53 - *(void *)a2) >> 3);
  unint64_t v56 = v55 + 1;
  if (v55 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(void *)a2) >> 3);
  if (2 * v57 > v56) {
    unint64_t v56 = 2 * v57;
  }
  unint64_t v58 = v57 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v56;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  int v59 = v58 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v58) : 0;
  long long v60 = v59 + v55;
  __v.__first_ = v59;
  __v.__begin_ = v60;
  __v.__end_cap_.__value_ = &v59[v58];
  long long v61 = *(_OWORD *)__p;
  v60->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v61;
  __p[1] = 0;
  std::string::size_type v209 = 0;
  __p[0] = 0;
  __v.__end_ = v60 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  uint64_t v62 = *(void *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  int v63 = SHIBYTE(v209);
  *(void *)(a2 + 8) = v62;
  if (v63 < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x20) != 0) {
      goto LABEL_74;
    }
  }
  else
  {
LABEL_73:
    if ((a1 & 0x20) != 0) {
      goto LABEL_74;
    }
  }
  if ((a1 & 0x40) == 0) {
    goto LABEL_102;
  }
LABEL_88:
  std::string::basic_string[abi:ne180100]<0>(__p, "reg");
  unint64_t v76 = *(void *)(a2 + 16);
  unint64_t v77 = *(void *)(a2 + 8);
  if (v77 < v76)
  {
    long long v78 = *(_OWORD *)__p;
    *(void *)(v77 + 16) = v209;
    *(_OWORD *)unint64_t v77 = v78;
    *(void *)(a2 + 8) = v77 + 24;
    if ((a1 & 0x80) == 0) {
      goto LABEL_117;
    }
LABEL_103:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliPager");
    unint64_t v88 = *(void *)(a2 + 16);
    unint64_t v89 = *(void *)(a2 + 8);
    if (v89 >= v88)
    {
      unint64_t v91 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v89 - *(void *)a2) >> 3);
      unint64_t v92 = v91 + 1;
      if (v91 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v93 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v88 - *(void *)a2) >> 3);
      if (2 * v93 > v92) {
        unint64_t v92 = 2 * v93;
      }
      if (v93 >= 0x555555555555555) {
        unint64_t v94 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v94 = v92;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v94) {
        char v95 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v94);
      }
      else {
        char v95 = 0;
      }
      long long v96 = v95 + v91;
      __v.__first_ = v95;
      __v.__begin_ = v96;
      __v.__end_cap_.__value_ = &v95[v94];
      long long v97 = *(_OWORD *)__p;
      v96->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v96->__r_.__value_.__l.__data_ = v97;
      __p[1] = 0;
      std::string::size_type v209 = 0;
      __p[0] = 0;
      __v.__end_ = v96 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      uint64_t v98 = *(void *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v99 = SHIBYTE(v209);
      *(void *)(a2 + 8) = v98;
      if (v99 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v90 = *(_OWORD *)__p;
      *(void *)(v89 + 16) = v209;
      *(_OWORD *)unint64_t v89 = v90;
      *(void *)(a2 + 8) = v89 + 24;
    }
    goto LABEL_117;
  }
  unint64_t v79 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - *(void *)a2) >> 3);
  unint64_t v80 = v79 + 1;
  if (v79 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v76 - *(void *)a2) >> 3);
  if (2 * v81 > v80) {
    unint64_t v80 = 2 * v81;
  }
  unint64_t v82 = v81 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v80;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  char v83 = v82 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v82) : 0;
  long long v84 = v83 + v79;
  __v.__first_ = v83;
  __v.__begin_ = v84;
  __v.__end_cap_.__value_ = &v83[v82];
  long long v85 = *(_OWORD *)__p;
  v84->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v84->__r_.__value_.__l.__data_ = v85;
  __p[1] = 0;
  std::string::size_type v209 = 0;
  __p[0] = 0;
  __v.__end_ = v84 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  uint64_t v86 = *(void *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  int v87 = SHIBYTE(v209);
  *(void *)(a2 + 8) = v86;
  if (v87 < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x80) != 0) {
      goto LABEL_103;
    }
  }
  else
  {
LABEL_102:
    if ((a1 & 0x80) != 0) {
      goto LABEL_103;
    }
  }
  if ((a1 & 0x100) == 0) {
    goto LABEL_131;
  }
LABEL_117:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliChat");
  unint64_t v100 = *(void *)(a2 + 16);
  unint64_t v101 = *(void *)(a2 + 8);
  if (v101 < v100)
  {
    long long v102 = *(_OWORD *)__p;
    *(void *)(v101 + 16) = v209;
    *(_OWORD *)unint64_t v101 = v102;
    *(void *)(a2 + 8) = v101 + 24;
    if ((a1 & 0x200) == 0) {
      goto LABEL_146;
    }
LABEL_132:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliChatbot");
    unint64_t v112 = *(void *)(a2 + 16);
    unint64_t v113 = *(void *)(a2 + 8);
    if (v113 >= v112)
    {
      unint64_t v115 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v113 - *(void *)a2) >> 3);
      unint64_t v116 = v115 + 1;
      if (v115 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - *(void *)a2) >> 3);
      if (2 * v117 > v116) {
        unint64_t v116 = 2 * v117;
      }
      if (v117 >= 0x555555555555555) {
        unint64_t v118 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v118 = v116;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v118) {
        long long v119 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v118);
      }
      else {
        long long v119 = 0;
      }
      v120 = v119 + v115;
      __v.__first_ = v119;
      __v.__begin_ = v120;
      __v.__end_cap_.__value_ = &v119[v118];
      long long v121 = *(_OWORD *)__p;
      v120->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v120->__r_.__value_.__l.__data_ = v121;
      __p[1] = 0;
      std::string::size_type v209 = 0;
      __p[0] = 0;
      __v.__end_ = v120 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      uint64_t v122 = *(void *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v123 = SHIBYTE(v209);
      *(void *)(a2 + 8) = v122;
      if (v123 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v114 = *(_OWORD *)__p;
      *(void *)(v113 + 16) = v209;
      *(_OWORD *)unint64_t v113 = v114;
      *(void *)(a2 + 8) = v113 + 24;
    }
    goto LABEL_146;
  }
  unint64_t v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - *(void *)a2) >> 3);
  unint64_t v104 = v103 + 1;
  if (v103 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v105 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v100 - *(void *)a2) >> 3);
  if (2 * v105 > v104) {
    unint64_t v104 = 2 * v105;
  }
  unint64_t v106 = v105 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v104;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  std::string v107 = v106 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v106) : 0;
  std::__compressed_pair<std::string *> v108 = v107 + v103;
  __v.__first_ = v107;
  __v.__begin_ = v108;
  __v.__end_cap_.__value_ = &v107[v106];
  long long v109 = *(_OWORD *)__p;
  v108->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v108->__r_.__value_.__l.__data_ = v109;
  __p[1] = 0;
  std::string::size_type v209 = 0;
  __p[0] = 0;
  __v.__end_ = v108 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  uint64_t v110 = *(void *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  int v111 = SHIBYTE(v209);
  *(void *)(a2 + 8) = v110;
  if (v111 < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x200) != 0) {
      goto LABEL_132;
    }
  }
  else
  {
LABEL_131:
    if ((a1 & 0x200) != 0) {
      goto LABEL_132;
    }
  }
  if ((a1 & 0x400) == 0) {
    goto LABEL_160;
  }
LABEL_146:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliCpmOnly");
  unint64_t v124 = *(void *)(a2 + 16);
  unint64_t v125 = *(void *)(a2 + 8);
  if (v125 < v124)
  {
    long long v126 = *(_OWORD *)__p;
    *(void *)(v125 + 16) = v209;
    *(_OWORD *)unint64_t v125 = v126;
    *(void *)(a2 + 8) = v125 + 24;
    if ((a1 & 0x800) == 0) {
      goto LABEL_175;
    }
LABEL_161:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliLargeMsgOnly");
    unint64_t v136 = *(void *)(a2 + 16);
    unint64_t v137 = *(void *)(a2 + 8);
    if (v137 >= v136)
    {
      unint64_t v139 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v137 - *(void *)a2) >> 3);
      unint64_t v140 = v139 + 1;
      if (v139 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v141 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v136 - *(void *)a2) >> 3);
      if (2 * v141 > v140) {
        unint64_t v140 = 2 * v141;
      }
      if (v141 >= 0x555555555555555) {
        unint64_t v142 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v142 = v140;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v142) {
        v143 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v142);
      }
      else {
        v143 = 0;
      }
      v144 = v143 + v139;
      __v.__first_ = v143;
      __v.__begin_ = v144;
      __v.__end_cap_.__value_ = &v143[v142];
      long long v145 = *(_OWORD *)__p;
      v144->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v144->__r_.__value_.__l.__data_ = v145;
      __p[1] = 0;
      std::string::size_type v209 = 0;
      __p[0] = 0;
      __v.__end_ = v144 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      uint64_t v146 = *(void *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v147 = SHIBYTE(v209);
      *(void *)(a2 + 8) = v146;
      if (v147 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v138 = *(_OWORD *)__p;
      *(void *)(v137 + 16) = v209;
      *(_OWORD *)unint64_t v137 = v138;
      *(void *)(a2 + 8) = v137 + 24;
    }
    goto LABEL_175;
  }
  unint64_t v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v125 - *(void *)a2) >> 3);
  unint64_t v128 = v127 + 1;
  if (v127 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v129 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124 - *(void *)a2) >> 3);
  if (2 * v129 > v128) {
    unint64_t v128 = 2 * v129;
  }
  unint64_t v130 = v129 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v128;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  long long v131 = v130 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v130) : 0;
  uint64_t v132 = v131 + v127;
  __v.__first_ = v131;
  __v.__begin_ = v132;
  __v.__end_cap_.__value_ = &v131[v130];
  long long v133 = *(_OWORD *)__p;
  v132->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v132->__r_.__value_.__l.__data_ = v133;
  __p[1] = 0;
  std::string::size_type v209 = 0;
  __p[0] = 0;
  __v.__end_ = v132 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  uint64_t v134 = *(void *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  int v135 = SHIBYTE(v209);
  *(void *)(a2 + 8) = v134;
  if (v135 < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x800) != 0) {
      goto LABEL_161;
    }
  }
  else
  {
LABEL_160:
    if ((a1 & 0x800) != 0) {
      goto LABEL_161;
    }
  }
  if ((a1 & 0x1000) == 0) {
    goto LABEL_189;
  }
LABEL_175:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliFileXfer");
  unint64_t v148 = *(void *)(a2 + 16);
  unint64_t v149 = *(void *)(a2 + 8);
  if (v149 < v148)
  {
    long long v150 = *(_OWORD *)__p;
    *(void *)(v149 + 16) = v209;
    *(_OWORD *)unint64_t v149 = v150;
    *(void *)(a2 + 8) = v149 + 24;
    if ((a1 & 0x2000) == 0) {
      goto LABEL_204;
    }
LABEL_190:
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliGeoPush");
    unint64_t v160 = *(void *)(a2 + 16);
    unint64_t v161 = *(void *)(a2 + 8);
    if (v161 >= v160)
    {
      unint64_t v163 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v161 - *(void *)a2) >> 3);
      unint64_t v164 = v163 + 1;
      if (v163 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v165 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v160 - *(void *)a2) >> 3);
      if (2 * v165 > v164) {
        unint64_t v164 = 2 * v165;
      }
      if (v165 >= 0x555555555555555) {
        unint64_t v166 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v166 = v164;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v166) {
        v167 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v166);
      }
      else {
        v167 = 0;
      }
      v168 = v167 + v163;
      __v.__first_ = v167;
      __v.__begin_ = v168;
      __v.__end_cap_.__value_ = &v167[v166];
      long long v169 = *(_OWORD *)__p;
      v168->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v168->__r_.__value_.__l.__data_ = v169;
      __p[1] = 0;
      std::string::size_type v209 = 0;
      __p[0] = 0;
      __v.__end_ = v168 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      uint64_t v170 = *(void *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v171 = SHIBYTE(v209);
      *(void *)(a2 + 8) = v170;
      if (v171 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v162 = *(_OWORD *)__p;
      *(void *)(v161 + 16) = v209;
      *(_OWORD *)unint64_t v161 = v162;
      *(void *)(a2 + 8) = v161 + 24;
    }
    goto LABEL_204;
  }
  unint64_t v151 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v149 - *(void *)a2) >> 3);
  unint64_t v152 = v151 + 1;
  if (v151 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v153 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v148 - *(void *)a2) >> 3);
  if (2 * v153 > v152) {
    unint64_t v152 = 2 * v153;
  }
  unint64_t v154 = v153 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v152;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  v155 = v154 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v154) : 0;
  v156 = v155 + v151;
  __v.__first_ = v155;
  __v.__begin_ = v156;
  __v.__end_cap_.__value_ = &v155[v154];
  long long v157 = *(_OWORD *)__p;
  v156->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v156->__r_.__value_.__l.__data_ = v157;
  __p[1] = 0;
  std::string::size_type v209 = 0;
  __p[0] = 0;
  __v.__end_ = v156 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  uint64_t v158 = *(void *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  int v159 = SHIBYTE(v209);
  *(void *)(a2 + 8) = v158;
  if (v159 < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x2000) != 0) {
      goto LABEL_190;
    }
  }
  else
  {
LABEL_189:
    if ((a1 & 0x2000) != 0) {
      goto LABEL_190;
    }
  }
  if ((a1 & 0x4000) == 0) {
    goto LABEL_218;
  }
LABEL_204:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliImage");
  unint64_t v172 = *(void *)(a2 + 16);
  unint64_t v173 = *(void *)(a2 + 8);
  if (v173 < v172)
  {
    long long v174 = *(_OWORD *)__p;
    *(void *)(v173 + 16) = v209;
    *(_OWORD *)unint64_t v173 = v174;
    *(void *)(a2 + 8) = v173 + 24;
    if ((a1 & 0x8000) == 0) {
      goto LABEL_233;
    }
    goto LABEL_219;
  }
  unint64_t v175 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v173 - *(void *)a2) >> 3);
  unint64_t v176 = v175 + 1;
  if (v175 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::string>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v177 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v172 - *(void *)a2) >> 3);
  if (2 * v177 > v176) {
    unint64_t v176 = 2 * v177;
  }
  unint64_t v178 = v177 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v176;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
  v179 = v178 ? (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v178) : 0;
  v180 = v179 + v175;
  __v.__first_ = v179;
  __v.__begin_ = v180;
  __v.__end_cap_.__value_ = &v179[v178];
  long long v181 = *(_OWORD *)__p;
  v180->__r_.__value_.__r.__words[2] = v209;
  *(_OWORD *)&v180->__r_.__value_.__l.__data_ = v181;
  __p[1] = 0;
  std::string::size_type v209 = 0;
  __p[0] = 0;
  __v.__end_ = v180 + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
  uint64_t v182 = *(void *)(a2 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  int v183 = SHIBYTE(v209);
  *(void *)(a2 + 8) = v182;
  if (v183 < 0)
  {
    operator delete(__p[0]);
    if ((a1 & 0x8000) == 0) {
      goto LABEL_233;
    }
  }
  else
  {
LABEL_218:
    if ((a1 & 0x8000) == 0) {
      goto LABEL_233;
    }
  }
LABEL_219:
  std::string::basic_string[abi:ne180100]<0>(__p, "lazuliVideo");
  unint64_t v184 = *(void *)(a2 + 16);
  unint64_t v185 = *(void *)(a2 + 8);
  if (v185 >= v184)
  {
    unint64_t v187 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v185 - *(void *)a2) >> 3);
    unint64_t v188 = v187 + 1;
    if (v187 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v189 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v184 - *(void *)a2) >> 3);
    if (2 * v189 > v188) {
      unint64_t v188 = 2 * v189;
    }
    if (v189 >= 0x555555555555555) {
      unint64_t v190 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v190 = v188;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v190) {
      v191 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v190);
    }
    else {
      v191 = 0;
    }
    v192 = v191 + v187;
    __v.__first_ = v191;
    __v.__begin_ = v192;
    __v.__end_cap_.__value_ = &v191[v190];
    long long v193 = *(_OWORD *)__p;
    v192->__r_.__value_.__r.__words[2] = v209;
    *(_OWORD *)&v192->__r_.__value_.__l.__data_ = v193;
    __p[1] = 0;
    std::string::size_type v209 = 0;
    __p[0] = 0;
    __v.__end_ = v192 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    uint64_t v194 = *(void *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v195 = SHIBYTE(v209);
    *(void *)(a2 + 8) = v194;
    if (v195 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v186 = *(_OWORD *)__p;
    *(void *)(v185 + 16) = v209;
    *(_OWORD *)unint64_t v185 = v186;
    *(void *)(a2 + 8) = v185 + 24;
  }
LABEL_233:
  if ((a1 & 0x10000) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "lazuliIM");
    unint64_t v196 = *(void *)(a2 + 16);
    unint64_t v197 = *(void *)(a2 + 8);
    if (v197 >= v196)
    {
      unint64_t v199 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v197 - *(void *)a2) >> 3);
      unint64_t v200 = v199 + 1;
      if (v199 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v201 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v196 - *(void *)a2) >> 3);
      if (2 * v201 > v200) {
        unint64_t v200 = 2 * v201;
      }
      if (v201 >= 0x555555555555555) {
        unint64_t v202 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v202 = v200;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v202) {
        v203 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v202);
      }
      else {
        v203 = 0;
      }
      v204 = v203 + v199;
      __v.__first_ = v203;
      __v.__begin_ = v204;
      __v.__end_cap_.__value_ = &v203[v202];
      long long v205 = *(_OWORD *)__p;
      v204->__r_.__value_.__r.__words[2] = v209;
      *(_OWORD *)&v204->__r_.__value_.__l.__data_ = v205;
      __p[1] = 0;
      std::string::size_type v209 = 0;
      __p[0] = 0;
      __v.__end_ = v204 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      uint64_t v206 = *(void *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v207 = SHIBYTE(v209);
      *(void *)(a2 + 8) = v206;
      if (v207 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v198 = *(_OWORD *)__p;
      *(void *)(v197 + 16) = v209;
      *(_OWORD *)unint64_t v197 = v198;
      *(void *)(a2 + 8) = v197 + 24;
    }
  }
}

void sub_1C53403EC(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::string> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__pa);
  }
  _Unwind_Resume(__p);
}

void BambiServices::namesForServiceMask(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  BambiServices::nameArrayForServiceMask(a1, (uint64_t)&v3);
  if (v3 != v4) {
    ims::join<std::__wrap_iter<std::string const*>>();
  }
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_1_5);
  long long v6 = (void **)&v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
}

void sub_1C534051C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void BambiServices::addServiceParameters(BambiServices *this, uint64_t a2, SipParameterMap *a3)
{
  int v4 = (int)this;
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if ((this & 1) == 0) {
    goto LABEL_22;
  }
  memset(&__str, 0, sizeof(__str));
  if (BambiServices::kFeatureTagMmtel[23] < 0) {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)BambiServices::kFeatureTagMmtel, *(std::string::size_type *)&BambiServices::kFeatureTagMmtel[8]);
  }
  else {
    std::string __str = *(std::string *)BambiServices::kFeatureTagMmtel;
  }
  ims::addPercentEscapes((uint64_t)&__str, 0, 0);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = __str.__r_.__value_.__l.__size_;
  }
  memset(&v34, 0, sizeof(v34));
  long long v6 = &v34;
  std::string::basic_string[abi:ne180100]((uint64_t)&v34, size + 1);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    long long v6 = (std::string *)v34.__r_.__value_.__r.__words[0];
  }
  v6->__r_.__value_.__s.__data_[0] = 34;
  unint64_t v7 = (char *)&v6->__r_.__value_.__l.__data_ + 1;
  if (size)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    memmove(v7, p_str, size);
  }
  *((unsigned char *)v7 + size) = 0;
  std::string::push_back(&v34, 34);
  v37.__r_.__value_.__r.__words[0] = v34.__r_.__value_.__l.__size_;
  std::string::size_type v9 = v34.__r_.__value_.__r.__words[0];
  *(std::string::size_type *)((char *)v37.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v34.__r_.__value_.__r.__words[1] + 7);
  char v10 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  memset(&v34, 0, sizeof(v34));
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    __str.__r_.__value_.__r.__words[0] = v9;
    __str.__r_.__value_.__l.__size_ = v37.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v37.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = v10;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    __str.__r_.__value_.__r.__words[0] = v9;
    __str.__r_.__value_.__l.__size_ = v37.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v37.__r_.__value_.__r.__words + 7);
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = v10;
  }
  std::string::basic_string[abi:ne180100]<0>(&v34, "+g.3gpp.icsi-ref");
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
  int v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&v34.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v37);
  std::string::operator=((std::string *)(v11 + 7), &__str);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v4 & 2) == 0) {
      goto LABEL_28;
    }
  }
  else
  {
LABEL_22:
    if ((v4 & 2) == 0) {
      goto LABEL_28;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "video");
  std::string::basic_string[abi:ne180100]<0>(&v34, (char *)&str_1_5);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  uint64_t v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v37);
  std::string::operator=((std::string *)(v12 + 7), &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if ((v4 & 4) == 0) {
    goto LABEL_32;
  }
LABEL_28:
  std::string::basic_string[abi:ne180100]<0>(&__str, "+g.3gpp.smsip");
  std::string::basic_string[abi:ne180100]<0>(&v34, (char *)&str_1_5);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  long long v13 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v37);
  std::string::operator=((std::string *)(v13 + 7), &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v4 & 8) == 0) {
      goto LABEL_38;
    }
  }
  else
  {
LABEL_32:
    if ((v4 & 8) == 0) {
      goto LABEL_38;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "audio");
  std::string::basic_string[abi:ne180100]<0>(&v34, (char *)&str_1_5);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  uint64_t v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v37);
  std::string::operator=((std::string *)(v14 + 7), &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if ((v4 & 0x10) == 0) {
    goto LABEL_42;
  }
LABEL_38:
  std::string::basic_string[abi:ne180100]<0>(&__str, "+g.gsma.rcs.ipcall");
  std::string::basic_string[abi:ne180100]<0>(&v34, (char *)&str_1_5);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  int v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v37);
  std::string::operator=((std::string *)(v15 + 7), &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__str.__r_.__value_.__l.__data_);
    if ((v4 & 0x20) == 0) {
      goto LABEL_48;
    }
  }
  else
  {
LABEL_42:
    if ((v4 & 0x20) == 0) {
      goto LABEL_48;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, "text");
  std::string::basic_string[abi:ne180100]<0>(&v34, (char *)&str_1_5);
  v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
  unint64_t v16 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v37);
  std::string::operator=((std::string *)(v16 + 7), &v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_48:
  memset(&__str, 0, sizeof(__str));
  memset(&v34, 0, sizeof(v34));
  if ((v4 & 0x80) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v37, "+g.gsma.rcs.cpm.pager-large");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_5);
    p_p = &v37;
    unint64_t v17 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&v37.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
    std::string::operator=((std::string *)(v17 + 7), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    if ((v4 & 0x200) != 0) {
  }
    }
  if ((v4 & 0x100) != 0)
  {
    if ((v4 & 0x200) != 0) {
    if ((v4 & 0x200) == 0)
    }
      goto LABEL_67;
    goto LABEL_63;
  }
  if ((v4 & 0x200) != 0)
  {
LABEL_63:
    memset(&v37, 0, sizeof(v37));
    unint64_t v19 = std::string::basic_string[abi:ne180100]<0>(&v37, "#=1,#=2");
    ims::addQuotes((uint64_t)v19, 0);
    std::string::basic_string[abi:ne180100]<0>(&__p, "+g.gsma.rcs.botversion");
    p_p = &__p;
    unint64_t v20 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
    std::string::operator=((std::string *)(v20 + 7), &v37);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    goto LABEL_67;
  }
  if ((v4 & 0x80) != 0)
  {
LABEL_67:
    long long v18 = "urn:urn-7:3gpp-application.ims.iari.rcs.geosms";
    goto LABEL_68;
  }
  if ((v4 & 0x1000) != 0)
  {
    long long v18 = "urn:urn-7:3gpp-application.ims.iari.rcs.fthttp";
LABEL_68:
  }
  if ((v4 & 0x400) == 0) {
    goto LABEL_73;
  }
  memset(&v37, 0, sizeof(v37));
  unint64_t v21 = std::string::basic_string[abi:ne180100]<0>(&v37, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg");
  ims::addPercentEscapes((uint64_t)v21, 0, 0);
  ims::addQuotes((uint64_t)&v37, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "+g.3gpp.icsi-ref");
  p_p = &__p;
  unint64_t v22 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  std::string::operator=((std::string *)(v22 + 7), &v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((v4 & 0x800) == 0) {
      goto LABEL_79;
    }
  }
  else
  {
LABEL_73:
    if ((v4 & 0x800) == 0) {
      goto LABEL_79;
    }
  }
  memset(&v37, 0, sizeof(v37));
  uint64_t v23 = std::string::basic_string[abi:ne180100]<0>(&v37, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.largemsg");
  ims::addPercentEscapes((uint64_t)v23, 0, 0);
  ims::addQuotes((uint64_t)&v37, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "+g.3gpp.icsi-ref");
  p_p = &__p;
  long long v24 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  std::string::operator=((std::string *)(v24 + 7), &v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
  if ((v4 & 0x20000) == 0) {
    goto LABEL_83;
  }
LABEL_79:
  memset(&v37, 0, sizeof(v37));
  long long v25 = std::string::basic_string[abi:ne180100]<0>(&v37, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.session");
  ims::addPercentEscapes((uint64_t)v25, 0, 0);
  ims::addQuotes((uint64_t)&v37, 0);
  std::string::basic_string[abi:ne180100]<0>(&__p, "+g.3gpp.icsi-ref");
  p_p = &__p;
  uint64_t v26 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  std::string::operator=((std::string *)(v26 + 7), &v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v37.__r_.__value_.__l.__data_);
    if ((v4 & 0x40000) == 0) {
      goto LABEL_89;
    }
  }
  else
  {
LABEL_83:
    if ((v4 & 0x40000) == 0) {
      goto LABEL_89;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.systemmsg");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_5);
  p_p = &v37;
  int v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&v37.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  std::string::operator=((std::string *)(v27 + 7), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
LABEL_89:
  std::string::size_type v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v28 = __str.__r_.__value_.__l.__size_;
  }
  if (v28)
  {
    ims::addQuotes((uint64_t)&__str, 0);
    std::string::basic_string[abi:ne180100]<0>(&v37, "+g.3gpp.icsi-ref");
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    unint64_t v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&v37.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    std::string::operator=((std::string *)(v29 + 7), &__str);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
  }
  std::string::size_type v30 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  char v31 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v30 = v34.__r_.__value_.__l.__size_;
  }
  if (v30)
  {
    ims::addQuotes((uint64_t)&v34, 0);
    std::string::basic_string[abi:ne180100]<0>(&v37, "+g.3gpp.iari-ref");
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    unint64_t v32 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 8), (void **)&v37.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    std::string::operator=((std::string *)(v32 + 7), &v34);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    char v31 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  }
  if (v31 < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C5340EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (*(char *)(v26 - 57) < 0) {
    operator delete(*(void **)(v26 - 80));
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::addParam(std::string *this, char *__s)
{
  std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = this->__r_.__value_.__l.__size_;
  }
  if (size) {
    std::string::push_back(this, 44);
  }
  std::string __p = 0;
  std::string::size_type v8 = 0;
  uint64_t v9 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  ims::addPercentEscapes((uint64_t)&__p, 0, 0);
  if (v9 >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (v9 >= 0) {
    std::string::size_type v6 = HIBYTE(v9);
  }
  else {
    std::string::size_type v6 = v8;
  }
  std::string::append(this, p_p, v6);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p);
  }
}

void sub_1C534106C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiServices::serviceFromKeyValue(uint64_t *a1, uint64_t a2)
{
  int v2 = *((char *)a1 + 23);
  if (v2 >= 0) {
    uint64_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v3 = a1[1];
  }
  if (v3 <= 12)
  {
    if (v3 == 4)
    {
      if (v2 >= 0) {
        unint64_t v19 = a1;
      }
      else {
        unint64_t v19 = (_DWORD *)*a1;
      }
      if (*v19 == 1954047348) {
        return 32;
      }
    }
    else
    {
      if (v3 != 5)
      {
LABEL_59:
        if (v2 >= 0) {
          int v4 = a1;
        }
        else {
          int v4 = (void *)*a1;
        }
        if (v3 >= 17)
        {
LABEL_63:
          unint64_t v20 = (char *)v4 + v3;
          uint64_t v21 = v3;
          unint64_t v22 = v4;
          while (1)
          {
            uint64_t v23 = (char *)memchr(v22, 43, v21 - 16);
            if (!v23) {
              break;
            }
            if (*(void *)v23 == 0x2E616D73672E672BLL
              && *((void *)v23 + 1) == 0x6F6273692E736372
              && v23[16] == 116)
            {
              if (v23 != v20 && v23 - (char *)v4 != -1) {
                return 512;
              }
              return 0;
            }
            unint64_t v22 = v23 + 1;
            uint64_t v21 = v20 - (unsigned char *)v22;
            if (v20 - (unsigned char *)v22 < 17) {
              return 0;
            }
          }
          return 0;
        }
        return 0;
      }
      if (v2 >= 0) {
        std::string::size_type v8 = (int *)a1;
      }
      else {
        std::string::size_type v8 = (int *)*a1;
      }
      if (*v8 == 1701079414 && *((unsigned char *)v8 + 4) == 111) {
        return 2;
      }
      int v10 = *v8;
      int v11 = *((unsigned __int8 *)v8 + 4);
      if (v10 == 1768191329 && v11 == 111) {
        return 8;
      }
    }
    return 0;
  }
  if (v3 == 13)
  {
    if (v2 >= 0) {
      long long v13 = a1;
    }
    else {
      long long v13 = (uint64_t *)*a1;
    }
    uint64_t v14 = *v13;
    uint64_t v15 = *(uint64_t *)((char *)v13 + 5);
    if (v14 == 0x2E707067332E672BLL && v15 == 0x7069736D732E7070) {
      return 4;
    }
    return 0;
  }
  if (v3 == 16)
  {
    if (v2 >= 0) {
      unint64_t v17 = a1;
    }
    else {
      unint64_t v17 = (void *)*a1;
    }
    if (*v17 == 0x2E707067332E672BLL && v17[1] == 0x6665722D69736369)
    {
      memset(&v80, 0, sizeof(v80));
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v80 = *(std::string *)a2;
      }
      ims::removeQuotes((uint64_t)&v80);
      ims::removePercentEscapes((uint64_t)&v80);
      int v28 = SHIBYTE(v80.__r_.__value_.__r.__words[2]);
      unint64_t v29 = (void *)v80.__r_.__value_.__r.__words[0];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t size = v80.__r_.__value_.__l.__size_;
      }
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v38 = &v80;
      }
      else {
        uint64_t v38 = (std::string *)v80.__r_.__value_.__r.__words[0];
      }
      int v39 = (char *)v38 + size;
      if (size >= 27)
      {
        int64_t v40 = size;
        unint64_t v41 = v38;
        do
        {
          long long v42 = (char *)memchr(v41, 51, v40 - 26);
          if (!v42) {
            break;
          }
          if (*(void *)v42 == 0x7265732D70706733
            && *((void *)v42 + 1) == 0x736D692E65636976
            && *((void *)v42 + 2) == 0x6D6D2E697363692ELL
            && *(void *)(v42 + 19) == 0x6C65746D6D2E6973)
          {
            if (v42 != v39 && v42 - (char *)v38 != -1)
            {
              uint64_t v7 = 1;
              goto LABEL_209;
            }
            break;
          }
          unint64_t v41 = (std::string *)(v42 + 1);
          int64_t v40 = v39 - (char *)v41;
        }
        while (v39 - (char *)v41 >= 27);
        if (size >= 43)
        {
          uint64_t v58 = size;
          int v59 = v38;
          do
          {
            long long v60 = (char *)memchr(v59, 117, v58 - 42);
            if (!v60) {
              break;
            }
            long long v61 = v60;
            if (!memcmp(v60, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg", 0x2BuLL))
            {
              if (v61 != v39 && v61 - (char *)v38 != -1)
              {
                uint64_t v7 = 128;
                goto LABEL_170;
              }
              break;
            }
            int v59 = (std::string *)(v61 + 1);
            uint64_t v58 = v39 - (v61 + 1);
          }
          while (v58 >= 43);
        }
      }
      uint64_t v7 = 0;
LABEL_170:
      if (size >= 47)
      {
        uint64_t v66 = size;
        unint64_t v67 = v38;
        do
        {
          unint64_t v68 = (char *)memchr(v67, 117, v66 - 46);
          if (!v68) {
            break;
          }
          unint64_t v69 = v68;
          if (!memcmp(v68, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.session", 0x2FuLL))
          {
            if (v69 != v39 && v69 - (char *)v38 != -1) {
              uint64_t v7 = v7 | 0x100;
            }
            break;
          }
          unint64_t v67 = (std::string *)(v69 + 1);
          uint64_t v66 = v39 - (v69 + 1);
        }
        while (v66 >= 47);
      }
      if (size >= 37)
      {
        unint64_t v70 = v38;
        do
        {
          __int16 v71 = (char *)memchr(v70, 51, size - 36);
          if (!v71) {
            break;
          }
          int v72 = v71;
          if (!memcmp(v71, "3gpp-service.ims.icsi.gsma.videoshare", 0x25uLL))
          {
            if (v72 != v39 && v72 - (char *)v38 != -1) {
              uint64_t v7 = v7 | 0x8000;
            }
            break;
          }
          unint64_t v70 = (std::string *)(v72 + 1);
          int64_t size = v39 - (v72 + 1);
        }
        while (size >= 37);
      }
    }
    else
    {
      if (*v17 != 0x2E707067332E672BLL || v17[1] != 0x6665722D69726169) {
        return 0;
      }
      memset(&v80, 0, sizeof(v80));
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v80, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string v80 = *(std::string *)a2;
      }
      ims::removeQuotes((uint64_t)&v80);
      ims::removePercentEscapes((uint64_t)&v80);
      int v28 = SHIBYTE(v80.__r_.__value_.__r.__words[2]);
      unint64_t v29 = (void *)v80.__r_.__value_.__r.__words[0];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v30 = &v80;
      }
      else {
        std::string::size_type v30 = (std::string *)v80.__r_.__value_.__r.__words[0];
      }
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t v31 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t v31 = v80.__r_.__value_.__l.__size_;
      }
      unint64_t v32 = (char *)v30 + v31;
      if (v31 >= 46)
      {
        uint64_t v33 = v31;
        std::string v34 = v30;
        do
        {
          long long v35 = (char *)memchr(v34, 117, v33 - 45);
          if (!v35) {
            break;
          }
          long long v36 = v35;
          if (!memcmp(v35, "urn:urn-7:3gpp-application.ims.iari.rcs.fthttp", 0x2EuLL))
          {
            if (v36 != v32 && v36 - (char *)v30 != -1)
            {
              uint64_t v7 = 4096;
              goto LABEL_126;
            }
            break;
          }
          std::string v34 = (std::string *)(v36 + 1);
          uint64_t v33 = v32 - (v36 + 1);
        }
        while (v33 >= 46);
      }
      uint64_t v7 = 0;
LABEL_126:
      if (v31 > 46)
      {
        uint64_t v46 = v31;
        unsigned int v47 = v30;
        do
        {
          long long v48 = (char *)memchr(v47, 117, v46 - 46);
          if (!v48) {
            break;
          }
          long long v49 = v48;
          if (!memcmp(v48, "urn:urn-7:3gpp-application.ims.iari.rcs.geopush", 0x2FuLL))
          {
            if (v49 != v32 && v49 - (char *)v30 != -1)
            {
LABEL_142:
              uint64_t v7 = v7 | 0x2000;
              goto LABEL_143;
            }
            break;
          }
          unsigned int v47 = (std::string *)(v49 + 1);
          uint64_t v46 = v32 - (v49 + 1);
        }
        while (v46 > 46);
      }
      if (v31 >= 46)
      {
        uint64_t v50 = v31;
        int v51 = v30;
        do
        {
          unint64_t v52 = (char *)memchr(v51, 117, v50 - 45);
          if (!v52) {
            break;
          }
          unint64_t v53 = v52;
          if (!memcmp(v52, "urn:urn-7:3gpp-application.ims.iari.rcs.geosms", 0x2EuLL))
          {
            if (v53 == v32 || v53 - (char *)v30 == -1) {
              break;
            }
            goto LABEL_142;
          }
          int v51 = (std::string *)(v53 + 1);
          uint64_t v50 = v32 - (v53 + 1);
        }
        while (v50 >= 46);
LABEL_143:
        if (v31 > 46)
        {
          uint64_t v54 = v31;
          unint64_t v55 = v30;
          do
          {
            unint64_t v56 = (char *)memchr(v55, 117, v54 - 46);
            if (!v56) {
              break;
            }
            unint64_t v57 = v56;
            if (!memcmp(v56, "urn:urn-7:3gpp-application.ims.iari.rcs.chatbot", 0x2FuLL))
            {
              if (v57 != v32 && v57 - (char *)v30 != -1)
              {
LABEL_190:
                uint64_t v7 = v7 | 0x100;
                goto LABEL_191;
              }
              break;
            }
            unint64_t v55 = (std::string *)(v57 + 1);
            uint64_t v54 = v32 - (v57 + 1);
          }
          while (v54 >= 47);
          if (v31 >= 50)
          {
            uint64_t v62 = v31;
            int v63 = v30;
            do
            {
              unint64_t v64 = (char *)memchr(v63, 117, v62 - 49);
              if (!v64) {
                break;
              }
              unint64_t v65 = v64;
              if (!memcmp(v64, "urn:urn-7:3gpp-application.ims.iari.rcs.chatbot.sa", 0x32uLL))
              {
                if (v65 == v32 || v65 - (char *)v30 == -1) {
                  break;
                }
                goto LABEL_190;
              }
              int v63 = (std::string *)(v65 + 1);
              uint64_t v62 = v32 - (v65 + 1);
            }
            while (v62 >= 50);
          }
        }
      }
LABEL_191:
      if (v31 >= 43)
      {
        uint64_t v73 = v31;
        uint64_t v74 = v30;
        do
        {
          int v75 = (char *)memchr(v74, 117, v73 - 42);
          if (!v75) {
            break;
          }
          unint64_t v76 = v75;
          if (!memcmp(v75, "urn:urn-7:3gpp-application.ims.iari.rcse.im", 0x2BuLL))
          {
            if (v76 != v32 && v76 - (char *)v30 != -1) {
              uint64_t v7 = v7 | 0x100;
            }
            break;
          }
          uint64_t v74 = (std::string *)(v76 + 1);
          uint64_t v73 = v32 - (v76 + 1);
        }
        while (v73 >= 43);
      }
      if (v31 >= 43)
      {
        unint64_t v77 = v30;
        do
        {
          long long v78 = (char *)memchr(v77, 117, v31 - 42);
          if (!v78) {
            break;
          }
          unint64_t v79 = v78;
          if (!memcmp(v78, "urn:urn-7:3gpp-application.ims.iari.gsma-is", 0x2BuLL))
          {
            if (v79 != v32 && v79 - (char *)v30 != -1) {
              uint64_t v7 = v7 | 0x4000;
            }
            break;
          }
          unint64_t v77 = (std::string *)(v79 + 1);
          int64_t v31 = v32 - (v79 + 1);
        }
        while (v31 >= 43);
      }
    }
LABEL_209:
    if (v28 < 0) {
      operator delete(v29);
    }
    return v7;
  }
  if (v3 != 18) {
    goto LABEL_59;
  }
  if (v2 >= 0) {
    int v4 = a1;
  }
  else {
    int v4 = (void *)*a1;
  }
  if (*v4 != 0x2E616D73672E672BLL || v4[1] != 0x616370692E736372 || *((_WORD *)v4 + 8) != 27756) {
    goto LABEL_63;
  }
  return 16;
}

void sub_1C53418D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiServices::serviceMaskFromParameters(BambiServices *this, const SipParameterMap *a2)
{
  int v2 = (char *)*((void *)this + 1);
  uint64_t v3 = (char *)this + 16;
  if (v2 == (char *)this + 16) {
    return 0;
  }
  LODWORD(v4) = 0;
  do
  {
    int v5 = BambiServices::serviceFromKeyValue((uint64_t *)v2 + 4, (uint64_t)(v2 + 56));
    std::string::size_type v6 = (char *)*((void *)v2 + 1);
    if (v6)
    {
      do
      {
        uint64_t v7 = v6;
        std::string::size_type v6 = *(char **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v7 = (char *)*((void *)v2 + 2);
        BOOL v8 = *(void *)v7 == (void)v2;
        int v2 = v7;
      }
      while (!v8);
    }
    uint64_t v4 = v5 | v4;
    int v2 = v7;
  }
  while (v7 != v3);
  return v4;
}

uint64_t _GLOBAL__sub_I_BambiServices_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(BambiServices::kFeatureTagMmtel, "urn:urn-7:3gpp-service.ims.icsi.mmtel");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, BambiServices::kFeatureTagMmtel, &dword_1C51D1000);
}

void SipCallWaitingInfoBody::generateXml(SipCallWaitingInfoBody *this@<X0>, std::string *a2@<X8>)
{
  long long v7 = 0u;
  long long v6 = 0u;
  uint64_t v4 = &unk_1F20E5258;
  memset(v5, 0, sizeof(v5));
  std::vector<bambi::XmlTreeNs>::__init_with_size[abi:ne180100]<bambi::XmlTreeNs*,bambi::XmlTreeNs*>(v5, *((void *)this + 6), *((void *)this + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 4));
  if (*((char *)this + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v6, *((const std::string::value_type **)this + 9), *((void *)this + 10));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)this + 72);
    *(void *)&long long v7 = *((void *)this + 11);
  }
  uint64_t v4 = &unk_1F20E1240;
  BYTE8(v7) = *((unsigned char *)this + 96);
  bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)&v4, 0, 1, a2);
  bambi::XmlTreeItem::~XmlTreeItem(&v4);
}

void sub_1C5341B24(_Unwind_Exception *a1)
{
  *(void *)(v2 - 56) = v1;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

void SipCallWaitingInfoBody::~SipCallWaitingInfoBody(void **this)
{
  *this = &unk_1F20C3DC0;
  bambi::XmlTreeItem::~XmlTreeItem(this + 5);
  *this = &unk_1F20CC498;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C3DC0;
  bambi::XmlTreeItem::~XmlTreeItem(this + 5);
  *this = &unk_1F20CC498;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipCallWaitingInfoBody::clone(SipCallWaitingInfoBody *this)
{
}

void sub_1C5341DA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  *(void *)uint64_t v2 = &unk_1F20CC498;
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*(void **)(v2 + 8));
  }
  MEMORY[0x1C878E320](v2, 0x10B3C405772A826);
  _Unwind_Resume(a1);
}

void *SipCallWaitingInfoBody::contentType(SipCallWaitingInfoBody *this)
{
  return &SipCallWaitingInfoBody::kContentType;
}

uint64_t SipCallWaitingInfoBody::rootItem(SipCallWaitingInfoBody *this)
{
  return (uint64_t)this + 32;
}

uint64_t _GLOBAL__sub_I_SipCallWaitingInfoBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(SipCallWaitingInfoBody::kContentType, "application/vnd.3gpp.cw+xml");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, SipCallWaitingInfoBody::kContentType, &dword_1C51D1000);
}

void ImsDnsResolver::resolveHostname(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t))(*(void *)a1 + 32))(a1, a2, a3, __p, a4);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5341F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsDnsResolver::resolveHostname(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 3, a3);
}

void ImsDnsResolver::cleanAddressesAndPerformBlock(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4)
{
  int v27 = 0;
  int v28 = 0;
  uint64_t v29 = 0;
  long long v24 = 0;
  long long v25 = 0;
  uint64_t v26 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  long long v6 = *a3;
  long long v7 = a3[1];
  if (*a3 == v7)
  {
    uint64_t v15 = 0;
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    goto LABEL_18;
  }
  do
  {
    BOOL v8 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)v6 + 128))();
    uint64_t v9 = v8[23];
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = v8[23];
    }
    else {
      uint64_t v10 = *((void *)v8 + 1);
    }
    if (v10 != 3) {
      goto LABEL_13;
    }
    if ((v9 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v8, &IpAddress::kAddressTypeIPv4, *((void *)v8 + 1))) {
        goto LABEL_13;
      }
    }
    else if (v8[23])
    {
      int v11 = &IpAddress::kAddressTypeIPv4;
      while (*v8 == *(unsigned __int8 *)v11)
      {
        ++v8;
        int v11 = (long long *)((char *)v11 + 1);
        if (!--v9) {
          goto LABEL_14;
        }
      }
LABEL_13:
      uint64_t v12 = (uint64_t *)&v27;
      goto LABEL_15;
    }
LABEL_14:
    uint64_t v12 = (uint64_t *)&v24;
LABEL_15:
    std::vector<std::shared_ptr<IpAddress>>::push_back[abi:ne180100](v12, v6++);
  }
  while (v6 != v7);
  uint64_t v13 = v22;
  uint64_t v14 = v27;
  uint64_t v15 = v28;
LABEL_18:
  std::vector<std::shared_ptr<IpAddress>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<IpAddress>*>,std::__wrap_iter<std::shared_ptr<IpAddress>*>>(&v21, v13, v14, v15, (v15 - (char *)v14) >> 4);
  std::vector<std::shared_ptr<IpAddress>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<IpAddress>*>,std::__wrap_iter<std::shared_ptr<IpAddress>*>>(&v21, v22, v24, v25, (v25 - (char *)v24) >> 4);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  v16[0] = (void **)&unk_1F20B2680;
  v16[1] = (void **)&_bambiDomain;
  int v17 = 0;
  (*(void (**)(uint64_t, uint64_t, void ***, uint64_t *))(a4 + 16))(a4, a2, v16, &v21);
  ImsResult::~ImsResult((ImsResult *)v16);
  v16[0] = (void **)&v21;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v24;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v16);
  v16[0] = (void **)&v27;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](v16);
}

void sub_1C5342138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  a9 = &a18;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a9 = &a21;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  a9 = (char *)(v21 - 72);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<IpAddress>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  xpc_object_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  long long v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    void v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    std::vector<std::shared_ptr<IpAddress>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    xpc_object_t result = std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer(v18);
  }
  else
  {
    *long long v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_1C5342294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [15]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C534232C(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char const*>(uint64_t a1, const char **a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    operator new();
  }
  uint64_t v4 = *a2;
  size_t v5 = strlen(*a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)v4, v5);
  *(unsigned char *)(v3 + 17) = 0;
  return a1;
}

void sub_1C53423D8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<IpAddress>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<IpAddress>>,std::reverse_iterator<std::shared_ptr<IpAddress>*>,std::reverse_iterator<std::shared_ptr<IpAddress>*>,std::reverse_iterator<std::shared_ptr<IpAddress>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<IpAddress>>,std::reverse_iterator<std::shared_ptr<IpAddress>*>,std::reverse_iterator<std::shared_ptr<IpAddress>*>,std::reverse_iterator<std::shared_ptr<IpAddress>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = a7;
  long long v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  void v12[2] = &v14;
  void v12[3] = 1;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v14 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v14;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<IpAddress>>,std::reverse_iterator<std::shared_ptr<IpAddress>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<IpAddress>>,std::reverse_iterator<std::shared_ptr<IpAddress>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<SipStack> const>,std::reverse_iterator<std::shared_ptr<SipStack> const*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::shared_ptr<IpAddress>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<IpAddress>*>,std::__wrap_iter<std::shared_ptr<IpAddress>*>>(uint64_t *a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    uint64_t v6 = a3;
    uint64_t v8 = *a1;
    uint64_t v9 = a2 - *a1;
    uint64_t v10 = v9 >> 4;
    unint64_t v11 = (char *)(*a1 + (v9 & 0xFFFFFFFFFFFFFFF0));
    uint64_t v13 = (uint64_t)(a1 + 2);
    uint64_t v12 = a1[2];
    long long v14 = (char *)a1[1];
    if (a5 <= (v12 - (uint64_t)v14) >> 4)
    {
      uint64_t v19 = (v14 - v11) >> 4;
      if (v19 >= a5)
      {
        long long v20 = &a3[2 * a5];
        uint64_t v21 = (char *)a1[1];
      }
      else
      {
        long long v20 = &a3[2 * v19];
        uint64_t v21 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<IpAddress>>,std::shared_ptr<IpAddress>*,std::shared_ptr<IpAddress>*,std::shared_ptr<IpAddress>*>((uint64_t)(a1 + 2), v20, a4, v14);
        a1[1] = (uint64_t)v21;
        if (v14 - v11 < 1) {
          return;
        }
      }
      uint64_t v22 = &v11[16 * a5];
      uint64_t v23 = &v21[-16 * a5];
      long long v24 = v21;
      if (v23 < v14)
      {
        long long v24 = v21;
        do
        {
          *(_OWORD *)long long v24 = *(_OWORD *)v23;
          v24 += 16;
          *(void *)uint64_t v23 = 0;
          *((void *)v23 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
          v23 += 16;
        }
        while (v23 < v14);
      }
      a1[1] = (uint64_t)v24;
      if (v21 != v22)
      {
        long long v25 = (std::__shared_weak_count **)(v21 - 8);
        uint64_t v26 = v8 + 16 * v10 - 16;
        uint64_t v27 = 16 * ((v21 - v22) >> 4);
        do
        {
          int v28 = (void *)(v26 + v27);
          long long v29 = *(_OWORD *)(v26 + v27);
          void *v28 = 0;
          v28[1] = 0;
          std::string::size_type v30 = *v25;
          *(_OWORD *)(v25 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v29;
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          v25 -= 2;
          v27 -= 16;
        }
        while (v27);
      }
      for (; v6 != v20; v11 += 16)
      {
        uint64_t v32 = *v6;
        uint64_t v31 = v6[1];
        if (v31) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v33 = (std::__shared_weak_count *)*((void *)v11 + 1);
        *(void *)unint64_t v11 = v32;
        *((void *)v11 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v31;
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        v6 += 2;
      }
    }
    else
    {
      unint64_t v15 = a5 + ((uint64_t)&v14[-v8] >> 4);
      if (v15 >> 60) {
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v12 - v8;
      if (v16 >> 3 > v15) {
        unint64_t v15 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v15;
      }
      uint64_t v46 = a1 + 2;
      if (v17) {
        long long v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)(a1 + 2), v17);
      }
      else {
        long long v18 = 0;
      }
      uint64_t v34 = (uint64_t)&v18[16 * v10];
      unint64_t v43 = v18;
      *(void *)&long long v44 = v34;
      unint64_t v45 = &v18[16 * v17];
      long long v35 = (void *)v34;
      do
      {
        *long long v35 = *v6;
        uint64_t v36 = v6[1];
        v35[1] = v36;
        if (v36) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
        }
        v35 += 2;
        v6 += 2;
      }
      while (v35 != (void *)(v34 + 16 * a5));
      *((void *)&v44 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v34 + 16 * a5;
      std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<IpAddress>>,std::reverse_iterator<std::shared_ptr<IpAddress>*>,std::reverse_iterator<std::shared_ptr<IpAddress>*>,std::reverse_iterator<std::shared_ptr<IpAddress>*>>(v13, (uint64_t)v11, v11, *a1, (void *)*a1, v34, v34);
      *(void *)&long long v44 = v37;
      uint64_t v38 = (char *)a1[1];
      int v39 = (_OWORD *)*((void *)&v44 + 1);
      uint64_t v48 = *((void *)&v44 + 1);
      long long v49 = (_OWORD *)*((void *)&v44 + 1);
      v47[0] = v13;
      v47[1] = &v48;
      uint64_t v47[2] = &v49;
      if (v38 != v11)
      {
        do
        {
          *v39++ = *(_OWORD *)v11;
          *(void *)unint64_t v11 = 0;
          *((void *)v11 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
          v11 += 16;
        }
        while (v11 != v38);
        long long v49 = v39;
      }
      v47[3] = 1;
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<IpAddress>>,std::shared_ptr<IpAddress>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v47);
      long long v40 = *(_OWORD *)a1;
      uint64_t v41 = (uint64_t)v45;
      *a1 = v44;
      a1[1] = (uint64_t)v39;
      long long v44 = v40;
      uint64_t v42 = a1[2];
      a1[2] = v41;
      unint64_t v45 = (char *)v42;
      unint64_t v43 = (void *)v40;
      std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer(&v43);
    }
  }
}

void sub_1C53427EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<IpAddress>>,std::shared_ptr<IpAddress>*,std::shared_ptr<IpAddress>*,std::shared_ptr<IpAddress>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v8;
  void v7[3] = 1;
  uint64_t v8 = a4;
  uint64_t v7[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<IpAddress>>,std::shared_ptr<IpAddress>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<IpAddress>>,std::shared_ptr<IpAddress>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<BambiConferenceParticipant>>,std::shared_ptr<BambiConferenceParticipant>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void SipSupportedHeader::~SipSupportedHeader(char **this)
{
  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  uint64_t vars8;

  *this = (char *)&unk_1F20C8450;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipSupportedHeader::clone(SipSupportedHeader *this)
{
}

void sub_1C53429FC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

void RTPTransportManager::~RTPTransportManager(char **this)
{
  *this = (char *)&unk_1F20C3EF0;
  uint64_t v2 = (char *)(this + 1);
  uint64_t v3 = this + 2;
  std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::destroy((uint64_t)(this + 1), this[2]);
  this[1] = (char *)v3;
  this[3] = 0;
  *uint64_t v3 = 0;
  std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>>>::destroy(this[5]);
  std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::destroy((uint64_t)v2, *v3);
}

{
  uint64_t vars8;

  RTPTransportManager::~RTPTransportManager(this);
  JUMPOUT(0x1C878E320);
}

void RTPTransportManager::setupTransport(RTPTransportManager *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, SipStack **a10)
{
  if (!*a10)
  {
    *(_OWORD *)(a9 + 24) = 0u;
    *(_OWORD *)(a9 + 40) = 0u;
    *(_OWORD *)(a9 + 56) = 0u;
    *(void *)a9 = &unk_1F20B2680;
    *(void *)(a9 + 8) = &_bambiDomain;
    *(_DWORD *)(a9 + 16) = 0x40000000;
    return;
  }
  unint64_t v15 = (ImsPrefs *)SipStack::prefs(*a10);
  UseEphemeralRTPPortsKey = (void **)ImsPrefs::getUseEphemeralRTPPortsKey(v15);
  unint64_t v17 = (capabilities::radio *)ImsPrefs::BOOLValue(v15, UseEphemeralRTPPortsKey);
  int v18 = (int)v17;
  if (capabilities::radio::mav20Plus(v17) && *((unsigned char *)*a10 + 176))
  {
    std::string::basic_string[abi:ne180100]<0>(v90, "rtp.transport");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v19 = ims::debug((uint64_t)v90, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"Using higher RTP port for an emergency call to work around MAV20 baseband bug.", 78);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    if (v85 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v90[2]) < 0) {
      operator delete(v90[0]);
    }
    LOWORD(v20) = -16414;
  }
  else
  {
    LOWORD(v20) = -16416;
  }
  uint64_t v76 = 0;
  unint64_t v77 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 32))(&v76);
  uint64_t v22 = *(void *)(*(void *)a5 + 416);
  uint64_t v21 = *(void *)(*(void *)a5 + 424);
  if (v22 == v21)
  {
    int v53 = 0;
    goto LABEL_146;
  }
  int v55 = a6;
  uint64_t v54 = *(void *)(*(void *)a5 + 424);
  do
  {
    if (!*(void *)(v22 + 16))
    {
      std::string::basic_string[abi:ne180100]<0>(v90, "rtp.transport");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v41 = ims::debug((uint64_t)v90, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"Skipping socket creation for session with 0 port", 48);
      *(unsigned char *)(v41 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v41 + 17) = 0;
LABEL_86:
      if (v85 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v90[2]) < 0) {
        operator delete(v90[0]);
      }
      goto LABEL_141;
    }
    if (*(_DWORD *)(v22 + 12) != a6)
    {
      std::string::basic_string[abi:ne180100]<0>(v90, "rtp.transport");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v42 = ims::debug((uint64_t)v90, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"Skipping socket creation for media type ", 40);
      *(unsigned char *)(v42 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(void *)v42 + 32))(v42, &v69);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v42 + 17) = 0;
      if (v72 < 0) {
        operator delete(v69);
      }
      goto LABEL_86;
    }
    std::string::basic_string[abi:ne180100]<0>(v90, "rtp.transport");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v23 = ims::debug((uint64_t)v90, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"Setting up sockets for ", 23);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(void *)v23 + 32))(v23, &v69);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" session [sessionId=", 20);
    *(unsigned char *)(v23 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v23 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v23 + 17) = 0;
    if (v72 < 0) {
      operator delete(v69);
    }
    if (v85 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v90[2]) < 0) {
      operator delete(v90[0]);
    }
    uint64_t v67 = v76;
    unint64_t v68 = v77;
    if (v77) {
      atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v60 = *(NSObject **)a7;
    long long v24 = *(std::__shared_weak_count **)(a7 + 8);
    if (v24) {
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v64 = v24;
    int v59 = *(NSObject **)a8;
    long long v25 = *(std::__shared_weak_count **)(a8 + 8);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v63 = v25;
    v93[0] = (uint64_t)a1;
    std::allocate_shared[abi:ne180100]<ImsUdpSocket,std::allocator<ImsUdpSocket>,decltype(nullptr),DscpClass,void>(v90, *(_DWORD *)(a4 + 4));
    if (v90[0]) {
      uint64_t v26 = (char *)v90[0] + 80;
    }
    else {
      uint64_t v26 = 0;
    }
    *(void *)&long long v92 = v26;
    *((void **)&v92 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v90[1];
    uint64_t v62 = (std::__shared_weak_count *)v90[1];
    std::allocate_shared[abi:ne180100]<ImsUdpSocket,std::allocator<ImsUdpSocket>,decltype(nullptr),DscpClass,void>(v90, *(_DWORD *)(a4 + 4));
    int v27 = 0;
    int v28 = (char *)v90[0] + 80;
    uint64_t v66 = v90[0];
    if (v90[0]) {
      long long v29 = (char *)v90[0] + 80;
    }
    else {
      long long v29 = 0;
    }
    *(void *)&long long v91 = v29;
    *((void **)&v91 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v90[1];
    long long v61 = (std::__shared_weak_count *)v90[1];
    while (1)
    {
      (*(void (**)(void))(*(void *)v67 + 64))();
      memset(v90, 0, sizeof(v90));
      std::string::size_type v30 = sImsDispatchQueue;
      if (sImsDispatchQueue)
      {
        dispatch_object_t object = (dispatch_object_t)sImsDispatchQueue;
      }
      else
      {
        std::string::size_type v30 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
        sImsDispatchQueue = (uint64_t)v30;
        dispatch_object_t object = v30;
        if (!v30) {
          goto LABEL_37;
        }
      }
      dispatch_retain(v30);
LABEL_37:
      std::string::basic_string[abi:ne180100]<0>(&__p, "67A03811-DB0A-594E-C2AE-8B0517EDF26F");
      v89[0] = &unk_1F20B3050;
      v89[1] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v86, "");
      (*(void (**)(void **__return_ptr, char *, uint64_t *, dispatch_object_t *, void **, void, void *, NSObject **, uint64_t))(*(void *)v26 + 16))(v90, v26, &v67, &object, &__p, 0, v89, &v86, a3);
      if (v88 < 0) {
        operator delete(v86);
      }
      ims::CFType::~CFType((ims::CFType *)v89);
      if (v85 < 0) {
        operator delete(__p);
      }
      if (object) {
        dispatch_release(object);
      }
      if (!(*(unsigned int (**)(void *, void))(*(void *)v90[1] + 24))(v90[1], LODWORD(v90[2]))) {
        break;
      }
      uint64_t v31 = v90;
      do
      {
        uint64_t v32 = v31;
        uint64_t v31 = (void **)v31[4];
      }
      while (v31);
      if (*((_DWORD *)v32 + 4) == 48 && v32[1] == &_posixDomain)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.transport");
        std::string::basic_string[abi:ne180100]<0>(&v86, "");
        uint64_t v34 = ims::debug((uint64_t)&__p, (uint64_t)&v86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"RTP port ", 9);
        *(unsigned char *)(v34 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v67 + 56))(v67);
        std::ostream::operator<<();
        *(unsigned char *)(v34 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)" already in use", 15);
        *(unsigned char *)(v34 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.transport");
        std::string::basic_string[abi:ne180100]<0>(&v86, "");
        uint64_t v33 = ims::error((uint64_t)&__p, (uint64_t)&v86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"Could not bind to RTP port at ", 30);
        *(unsigned char *)(v33 + 17) = 0;
        uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v67 + 40))(v67, v33);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)" error: ", 8);
        *(unsigned char *)(v34 + 17) = 0;
        (*((void (**)(void **, uint64_t))v90[0] + 2))(v90, v34);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
LABEL_73:
      *(unsigned char *)(v34 + 17) = 0;
      if (v88 < 0) {
        operator delete(v86);
      }
      if (v85 < 0) {
        operator delete(__p);
      }
LABEL_77:
      ImsResult::~ImsResult((ImsResult *)v90);
      ++v27;
      LOWORD(v20) = v20 + 2;
      if (v27 == 100)
      {
        std::string::basic_string[abi:ne180100]<0>(v38, "rtp.transport");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        a6 = v55;
        uint64_t v39 = ims::debug((uint64_t)v90, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v39 + 8), (uint64_t)"No more ports available", 23);
        *(unsigned char *)(v39 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v39 + 17) = 0;
        if (v85 < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v90[2]) < 0) {
          operator delete(v90[0]);
        }
        RTPTransportManager::removeTransport(a1);
        int v40 = 0x40000000;
        goto LABEL_124;
      }
    }
    if (v18)
    {
      (*(void (**)(void **__return_ptr, char *))(*(void *)v26 + 64))(&__p, v26);
      unsigned int v20 = (*(uint64_t (**)(void *))(*(void *)__p + 56))(__p);
      if (v84) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v84);
      }
      if (v20 < 0xC000 || (v20 & 1) != 0) {
        goto LABEL_77;
      }
    }
    if (!v66) {
      goto LABEL_90;
    }
    (*(void (**)(uint64_t, void))(*(void *)v67 + 64))(v67, (unsigned __int16)(v20 + 1));
    long long v35 = sImsDispatchQueue;
    if (sImsDispatchQueue)
    {
      dispatch_object_t v82 = (dispatch_object_t)sImsDispatchQueue;
      goto LABEL_58;
    }
    long long v35 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v35;
    dispatch_object_t v82 = v35;
    if (v35) {
LABEL_58:
    }
      dispatch_retain(v35);
    std::string::basic_string[abi:ne180100]<0>(&v86, "67A03811-DB0A-594E-C2AE-8B0517EDF26F");
    v81[0] = &unk_1F20B3050;
    v81[1] = 0;
    std::string::basic_string[abi:ne180100]<0>(&object, "");
    (*(void (**)(void **__return_ptr, char *, uint64_t *, dispatch_object_t *, NSObject **, void, void *, dispatch_object_t *, uint64_t))(*(void *)v28 + 16))(&__p, v28, &v67, &v82, &v86, 0, v81, &object, a3);
    ImsResult::operator=((uint64_t)v90, (uint64_t)&__p);
    ImsResult::~ImsResult((ImsResult *)&__p);
    if (v80 < 0) {
      operator delete(object);
    }
    ims::CFType::~CFType((ims::CFType *)v81);
    if (v88 < 0) {
      operator delete(v86);
    }
    if (v82) {
      dispatch_release(v82);
    }
    if ((*(uint64_t (**)(void *, void))(*(void *)v90[1] + 24))(v90[1], LODWORD(v90[2])))
    {
      (*(void (**)(char *))(*(void *)v26 + 40))(v26);
      uint64_t v36 = v90;
      do
      {
        uint64_t v37 = v36;
        uint64_t v36 = (void **)v36[4];
      }
      while (v36);
      if (*((_DWORD *)v37 + 4) == 48 && v37[1] == &_posixDomain)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.transport");
        std::string::basic_string[abi:ne180100]<0>(&v86, "");
        uint64_t v34 = ims::debug((uint64_t)&__p, (uint64_t)&v86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"RTCP port ", 10);
        *(unsigned char *)(v34 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v67 + 56))(v67);
        std::ostream::operator<<();
        *(unsigned char *)(v34 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)" already in use", 15);
        *(unsigned char *)(v34 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.transport");
        std::string::basic_string[abi:ne180100]<0>(&v86, "");
        uint64_t v34 = ims::error((uint64_t)&__p, (uint64_t)&v86);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"Could not bind to RTCP port at ", 31);
        *(unsigned char *)(v34 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v67 + 40))(v67, v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)" error: ", 8);
        *(unsigned char *)(v34 + 17) = 0;
        (*((void (**)(void **, uint64_t))v90[0] + 2))(v90, v34);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      goto LABEL_73;
    }
LABEL_90:
    ImsResult::~ImsResult((ImsResult *)v90);
    if (v59 && *(_DWORD *)(v22 + 12) == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v43, "rtp.transport");
      a6 = v55;
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v44 = ims::debug((uint64_t)v90, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"Save port number (", 18);
      *(unsigned char *)(v44 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v44 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"), with audio delegate.", 23);
      *(unsigned char *)(v44 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v44 + 17) = 0;
      if (v85 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v90[2]) < 0) {
        operator delete(v90[0]);
      }
      (*((void (**)(NSObject *, void))v59->isa + 4))(v59, (unsigned __int16)v20);
      uint64_t v86 = v59;
      int v87 = v63;
      if (v63) {
        atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v43, "rtp.transport");
      a6 = v55;
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v45 = ims::debug((uint64_t)v90, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"Setting RTPManager as socket delegate.", 38);
      *(unsigned char *)(v45 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v45 + 17) = 0;
      if (v85 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v90[2]) < 0) {
        operator delete(v90[0]);
      }
      if (v60) {
        uint64_t v46 = v60 + 5;
      }
      else {
        uint64_t v46 = 0;
      }
      uint64_t v86 = v46;
      int v87 = v64;
      if (v64) {
        atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    (*(void (**)(char *, NSObject **))(*(void *)v26 + 136))(v26, &v86);
    if (v87) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v87);
    }
    if (v66)
    {
      if (v60) {
        unsigned int v47 = v60 + 5;
      }
      else {
        unsigned int v47 = 0;
      }
      dispatch_object_t object = v47;
      unint64_t v79 = v64;
      if (v64) {
        atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(char *, dispatch_object_t *))(*(void *)v28 + 136))(v28, &object);
      if (v79) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v79);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(v90, "rtp.transport");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    uint64_t v48 = ims::debug((uint64_t)v90, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"Using RTP port ", 15);
    *(unsigned char *)(v48 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v48 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v48 + 17) = 0;
    if (v85 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v90[2]) < 0) {
      operator delete(v90[0]);
    }
    SDPMedia::setPort((SDPMedia *)v22, (unsigned __int16)v20);
    RTPManager::sendPortUpdate(v60, (uint64_t)a1, (unsigned __int16)v20, *(unsigned int *)(v22 + 12));
    long long v49 = std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((unint64_t)a1, v93);
    std::vector<std::shared_ptr<ImsUdpSocketInterface>>::push_back[abi:ne180100]((char **)v49 + 5, &v92);
    int v40 = (int)v66;
    if (v66)
    {
      uint64_t v50 = std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((unint64_t)a1, v93);
      std::vector<std::shared_ptr<ImsUdpSocketInterface>>::push_back[abi:ne180100]((char **)v50 + 5, &v91);
      int v40 = 0;
    }
LABEL_124:
    uint64_t v21 = v54;
    long long v73 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    unint64_t v69 = &unk_1F20B2680;
    unint64_t v70 = &_bambiDomain;
    int v71 = v40;
    if (v61) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v61);
    }
    if (v62) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
    memset(&v90[3], 0, 48);
    v90[0] = &unk_1F20B2680;
    v90[1] = &_bambiDomain;
    LODWORD(v90[2]) = 0;
    BOOL v52 = v70 != &_bambiDomain || v71 != 0;
    ImsResult::~ImsResult((ImsResult *)v90);
    ImsResult::~ImsResult((ImsResult *)&v69);
    if (v63) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v63);
    }
    if (v64) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
    }
    if (v68) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v68);
    }
    if (v52)
    {
      int v53 = 0x40000000;
      goto LABEL_146;
    }
LABEL_141:
    v22 += 200;
  }
  while (v22 != v21);
  int v53 = 0;
LABEL_146:
  *(_OWORD *)(a9 + 24) = 0u;
  *(_OWORD *)(a9 + 40) = 0u;
  *(_OWORD *)(a9 + 56) = 0u;
  *(void *)a9 = &unk_1F20B2680;
  *(void *)(a9 + 8) = &_bambiDomain;
  *(_DWORD *)(a9 + 16) = v53;
  if (v77) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
  }
}

void sub_1C5343D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,dispatch_object_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,uint64_t a49,dispatch_object_t object,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (*(char *)(v56 - 185) < 0) {
    operator delete(*(void **)(v56 - 208));
  }
  _Unwind_Resume(exception_object);
}

double RTPTransportManager::setupTransport@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, int a4@<W5>, uint64_t a5@<X6>, uint64_t a6@<X8>, uint64_t a7)
{
  if (*(void *)a7)
  {
    uint64_t v10 = (ImsPrefs *)SipStack::prefs(*(SipStack **)a7);
    UseEphemeralRTPPortsKey = (void **)ImsPrefs::getUseEphemeralRTPPortsKey(v10);
    uint64_t v12 = (capabilities::radio *)ImsPrefs::BOOLValue(v10, UseEphemeralRTPPortsKey);
    if (capabilities::radio::mav20Plus(v12) && *(unsigned char *)(*(void *)a7 + 176))
    {
      std::string::basic_string[abi:ne180100]<0>(v52, "rtp.transport");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v13 = ims::debug((uint64_t)v52, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Using higher RTP port for an emergency call to work around MAV20 baseband bug.", 78);
      *(unsigned char *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v13 + 17) = 0;
      if (v51 < 0) {
        operator delete(__p);
      }
      if (v54 < 0) {
        operator delete(v52[0]);
      }
    }
    uint64_t v46 = 0;
    unsigned int v47 = 0;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)a2 + 32))(&v46);
    uint64_t v36 = *(SDPMedia **)(*(void *)a3 + 424);
    if (*(SDPMedia **)(*(void *)a3 + 416) != v36)
    {
      long long v14 = *(SDPMedia **)(*(void *)a3 + 416);
      unint64_t v15 = (void *)*MEMORY[0x1E4F38C90];
      nw_parameters_configure_protocol_block_t configure_udp = (nw_parameters_configure_protocol_block_t)*MEMORY[0x1E4F38C88];
      while (1)
      {
        uint64_t v38 = v14;
        if (!*((void *)v14 + 2)) {
          break;
        }
        if (*((_DWORD *)v14 + 3) != a4)
        {
          std::string::basic_string[abi:ne180100]<0>(v52, "rtp.transport");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          uint64_t v23 = ims::debug((uint64_t)v52, (uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"Skipping NW path creation for media type ", 41);
          *(unsigned char *)(v23 + 17) = 0;
          (*(void (**)(uint64_t, void **))(*(void *)v23 + 32))(v23, &v48);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v23 + 17) = 0;
          if (v49 < 0) {
            operator delete(v48);
          }
          goto LABEL_30;
        }
        std::string::basic_string[abi:ne180100]<0>(v52, "rtp.transport");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        uint64_t v16 = ims::debug((uint64_t)v52, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Setting up NW Paths for ", 24);
        *(unsigned char *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, void **))(*(void *)v16 + 32))(v16, &v48);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)" session [sessionId=", 20);
        *(unsigned char *)(v16 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v16 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v16 + 17) = 0;
        if (v49 < 0) {
          operator delete(v48);
        }
        if (v51 < 0) {
          operator delete(__p);
        }
        if (v54 < 0) {
          operator delete(v52[0]);
        }
        int v18 = *(SipStack **)a7;
        unint64_t v17 = *(std::__shared_weak_count **)(a7 + 8);
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v19 = v47;
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v33 = v19;
        unsigned int v20 = *(std::__shared_weak_count **)(a5 + 8);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v32 = v20;
        long long v61 = 0;
        uint64_t v62 = a1;
        uint64_t v60 = 0;
        std::allocate_shared[abi:ne180100]<ImsUdpNw,std::allocator<ImsUdpNw>,std::shared_ptr<SipStack> const&,void>(&v60, (uint64_t)v18, v17);
        uint64_t v58 = 0;
        int v59 = 0;
        uint64_t v31 = v17;
        std::allocate_shared[abi:ne180100]<ImsUdpNw,std::allocator<ImsUdpNw>,std::shared_ptr<SipStack> const&,void>(&v58, (uint64_t)v18, v17);
        nw_parameters_t parameters = nw_parameters_create_secure_udp(v15, configure_udp);
        nw_parameters_t secure_udp = nw_parameters_create_secure_udp(v15, configure_udp);
        if (parameters)
        {
          if (secure_udp)
          {
            std::string::basic_string[abi:ne180100]<0>(v52, "rtp.transport");
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            uint64_t v21 = ims::debug((uint64_t)v52, (uint64_t)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"findPort address=", 17);
            *(unsigned char *)(v21 + 17) = 0;
            IpAddress::asString(&v48);
          }
          std::string::basic_string[abi:ne180100]<0>(v52, "rtp.transport");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          uint64_t v24 = ims::error((uint64_t)v52, (uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"Failed to create rtcp nw_parameters", 35);
          *(unsigned char *)(v24 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v52, "rtp.transport");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          uint64_t v24 = ims::error((uint64_t)v52, (uint64_t)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"Failed to create rtp nw_parameters", 34);
          *(unsigned char *)(v24 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        *(unsigned char *)(v24 + 17) = 0;
        if (v51 < 0) {
          operator delete(__p);
        }
        if (v54 < 0) {
          operator delete(v52[0]);
        }
        long long v43 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        int v40 = &unk_1F20B2680;
        uint64_t v41 = &_bambiDomain;
        int v42 = 1073741825;
        if (v59) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v59);
        }
        if (v61) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        }
        long long v55 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        v52[0] = &unk_1F20B2680;
        v52[1] = &_bambiDomain;
        int v53 = 0;
        BOOL v26 = v41 != &_bambiDomain || v42 != 0;
        ImsResult::~ImsResult((ImsResult *)v52);
        ImsResult::~ImsResult((ImsResult *)&v40);
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        if (v26)
        {
          int v27 = 0x40000000;
          goto LABEL_59;
        }
LABEL_57:
        long long v14 = (SDPMedia *)((char *)v38 + 200);
        if ((SDPMedia *)((char *)v38 + 200) == v36) {
          goto LABEL_58;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(v52, "rtp.transport");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      uint64_t v22 = ims::debug((uint64_t)v52, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"Skipping NW path creation for session with 0 port", 49);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v22 + 17) = 0;
LABEL_30:
      if (v51 < 0) {
        operator delete(__p);
      }
      if (v54 < 0) {
        operator delete(v52[0]);
      }
      goto LABEL_57;
    }
LABEL_58:
    int v27 = 0;
LABEL_59:
    double result = 0.0;
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 56) = 0u;
    *(void *)a6 = &unk_1F20B2680;
    *(void *)(a6 + 8) = &_bambiDomain;
    *(_DWORD *)(a6 + 16) = v27;
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 56) = 0u;
    *(void *)a6 = &unk_1F20B2680;
    *(void *)(a6 + 8) = &_bambiDomain;
    *(_DWORD *)(a6 + 16) = 0x40000000;
  }
  return result;
}

void sub_1C5345550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42)
{
  if (*(char *)(v42 - 201) < 0) {
    operator delete(*(void **)(v42 - 224));
  }
  long long v44 = *(std::__shared_weak_count **)(v42 - 136);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  uint64_t v46 = (std::__shared_weak_count *)a21;
  long long v45 = (std::__shared_weak_count *)a22;
  unsigned int v47 = (std::__shared_weak_count *)a23;
  uint64_t v48 = *(std::__shared_weak_count **)(v42 - 120);
  if (v48)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v48);
    long long v45 = (std::__shared_weak_count *)a22;
    unsigned int v47 = (std::__shared_weak_count *)a23;
    uint64_t v46 = (std::__shared_weak_count *)a21;
    if (!a22)
    {
LABEL_7:
      if (!v47) {
        goto LABEL_8;
      }
      goto LABEL_15;
    }
  }
  else if (!a22)
  {
    goto LABEL_7;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  unsigned int v47 = (std::__shared_weak_count *)a23;
  if (!a23)
  {
LABEL_8:
    if (!v46) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
LABEL_15:
  std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  if (!v46)
  {
LABEL_10:
    if (a42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a42);
    }
    _Unwind_Resume(a1);
  }
LABEL_9:
  std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  goto LABEL_10;
}

void RTPTransportManager::removeTransport(RTPTransportManager *this)
{
  uint64_t v2 = (uint64_t *)qword_1EBBDB230;
  if (qword_1EBBDB230)
  {
    uint64_t v3 = &qword_1EBBDB230;
    uint64_t v4 = qword_1EBBDB230;
    do
    {
      unint64_t v5 = *(void *)(v4 + 32);
      BOOL v6 = v5 >= (unint64_t)this;
      if (v5 >= (unint64_t)this) {
        uint64_t v7 = (uint64_t *)v4;
      }
      else {
        uint64_t v7 = (uint64_t *)(v4 + 8);
      }
      if (v6) {
        uint64_t v3 = (uint64_t *)v4;
      }
      uint64_t v4 = *v7;
    }
    while (*v7);
    if (v3 != &qword_1EBBDB230 && v3[4] <= (unint64_t)this)
    {
      uint64_t v10 = (uint64_t *)v3[5];
      uint64_t v9 = (uint64_t *)v3[6];
      uint64_t v8 = v3 + 5;
      if (v10 != v9)
      {
        while (1)
        {
          uint64_t v12 = *v10;
          uint64_t v11 = (std::__shared_weak_count *)v10[1];
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v35, "rtp.transport");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          uint64_t v13 = ims::debug((uint64_t)v35, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Deleting socket for port ", 25);
          *(unsigned char *)(v13 + 17) = 0;
          (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v12 + 64))(&v31, v12);
          (*(void (**)(uint64_t))(*(void *)v31 + 56))(v31);
          std::ostream::operator<<();
          *(unsigned char *)(v13 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v13 + 17) = 0;
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v34 < 0) {
            operator delete(__p[0]);
          }
          if (v36 < 0) {
            break;
          }
          if (v11) {
            goto LABEL_21;
          }
LABEL_22:
          v10 += 2;
          if (v10 == v9) {
            goto LABEL_26;
          }
        }
        operator delete(v35[0]);
        if (!v11) {
          goto LABEL_22;
        }
LABEL_21:
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        goto LABEL_22;
      }
LABEL_26:
      std::vector<std::shared_ptr<BambiConferenceParticipant>>::__clear[abi:ne180100](v8);
      uint64_t v2 = (uint64_t *)qword_1EBBDB230;
    }
    if (v2)
    {
      long long v14 = &qword_1EBBDB230;
      unint64_t v15 = v2;
      do
      {
        unint64_t v16 = v15[4];
        BOOL v17 = v16 >= (unint64_t)this;
        if (v16 >= (unint64_t)this) {
          int v18 = (uint64_t **)v15;
        }
        else {
          int v18 = (uint64_t **)(v15 + 1);
        }
        if (v17) {
          long long v14 = v15;
        }
        unint64_t v15 = *v18;
      }
      while (*v18);
      if (v14 != &qword_1EBBDB230 && v14[4] <= (unint64_t)this)
      {
        uint64_t v19 = (uint64_t *)v14[1];
        if (v19)
        {
          do
          {
            unsigned int v20 = v19;
            uint64_t v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
        else
        {
          uint64_t v21 = v14;
          do
          {
            unsigned int v20 = (uint64_t *)v21[2];
            BOOL v22 = *v20 == (void)v21;
            uint64_t v21 = v20;
          }
          while (!v22);
        }
        if ((uint64_t *)qword_1EBBDB228 == v14) {
          qword_1EBBDB228 = (uint64_t)v20;
        }
        --qword_1EBBDB238;
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v2, v14);
        v35[0] = v14 + 5;
        std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
        operator delete(v14);
      }
    }
  }
  if (qword_1EBBDB248)
  {
    uint64_t v23 = &qword_1EBBDB248;
    uint64_t v24 = qword_1EBBDB248;
    do
    {
      unint64_t v25 = *(void *)(v24 + 32);
      BOOL v26 = v25 >= (unint64_t)this;
      if (v25 >= (unint64_t)this) {
        int v27 = (uint64_t *)v24;
      }
      else {
        int v27 = (uint64_t *)(v24 + 8);
      }
      if (v26) {
        uint64_t v23 = (uint64_t *)v24;
      }
      uint64_t v24 = *v27;
    }
    while (*v27);
    if (v23 != &qword_1EBBDB248 && v23[4] <= (unint64_t)this)
    {
      int v28 = (uint64_t *)v23[1];
      if (v28)
      {
        do
        {
          long long v29 = v28;
          int v28 = (uint64_t *)*v28;
        }
        while (v28);
      }
      else
      {
        std::string::size_type v30 = v23;
        do
        {
          long long v29 = (uint64_t *)v30[2];
          BOOL v22 = *v29 == (void)v30;
          std::string::size_type v30 = v29;
        }
        while (!v22);
      }
      if ((uint64_t *)qword_1EBBDB240 == v23) {
        qword_1EBBDB240 = (uint64_t)v29;
      }
      --qword_1EBBDB250;
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBBDB248, v23);
      v35[0] = v23 + 5;
      std::vector<std::shared_ptr<BambiCallAction>>::__destroy_vector::operator()[abi:ne180100]((void ***)v35);
      operator delete(v23);
    }
  }
}

void sub_1C5345BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<ImsUdpSocketInterface>>::push_back[abi:ne180100](char **a1, long long *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - (void)*a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    uint64_t v26 = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>(result, v13);
    unint64_t v16 = &v14[16 * v10];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v16 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v16 + 16;
    uint64_t v19 = *a1;
    int v18 = a1[1];
    if (v18 == *a1)
    {
      int64x2_t v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v16 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v20;
        v16 -= 16;
        *(void *)int v18 = 0;
        *((void *)v18 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
      }
      while (v18 != v19);
      int64x2_t v21 = *(int64x2_t *)a1;
    }
    *a1 = v16;
    a1[1] = v9;
    int64x2_t v24 = v21;
    BOOL v22 = a1[2];
    a1[2] = &v14[16 * v15];
    unint64_t v25 = v22;
    uint64_t v23 = v21.i64[0];
    uint64_t result = std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&v23);
  }
  else
  {
    *(void *)uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)v7 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

unint64_t *std::vector<std::shared_ptr<ImsUdpNw>>::push_back[abi:ne180100](unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = result;
  unint64_t v6 = result[2];
  uint64_t v7 = (void *)result[1];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = *result;
    uint64_t v10 = (uint64_t)((uint64_t)v7 - *result) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v6 - v9;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    BOOL v22 = result + 2;
    if (v13 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v14 = (char *)operator new(16 * v13);
    uint64_t v15 = &v14[16 * v10];
    *(void *)uint64_t v15 = a2;
    *((void *)v15 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = a3;
    if (a3)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
      unint64_t v9 = *v5;
      uint64_t v7 = (void *)v5[1];
    }
    uint64_t v8 = v15 + 16;
    if (v7 == (void *)v9)
    {
      int64x2_t v17 = vdupq_n_s64(v9);
    }
    else
    {
      do
      {
        long long v16 = *((_OWORD *)v7 - 1);
        v7 -= 2;
        *((_OWORD *)v15 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v16;
        v15 -= 16;
        *uint64_t v7 = 0;
        v7[1] = 0;
      }
      while (v7 != (void *)v9);
      int64x2_t v17 = *(int64x2_t *)v5;
    }
    unint64_t *v5 = (unint64_t)v15;
    v5[1] = (unint64_t)v8;
    int64x2_t v20 = v17;
    unint64_t v18 = v5[2];
    _OWORD v5[2] = (unint64_t)&v14[16 * v13];
    unint64_t v21 = v18;
    uint64_t v19 = v17.i64[0];
    uint64_t result = (unint64_t *)std::__split_buffer<std::shared_ptr<BambiCallAction>>::~__split_buffer((uint64_t)&v19);
  }
  else
  {
    *uint64_t v7 = a2;
    v7[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = v7 + 2;
  }
  v5[1] = (unint64_t)v8;
  return result;
}

void RTPTransportManager::getTransport(RTPTransportManager *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = qword_1EBBDB230;
  if (!qword_1EBBDB230) {
    goto LABEL_21;
  }
  unint64_t v6 = &qword_1EBBDB230;
  do
  {
    unint64_t v7 = *(void *)(v4 + 32);
    BOOL v8 = v7 >= (unint64_t)this;
    if (v7 >= (unint64_t)this) {
      unint64_t v9 = (uint64_t *)v4;
    }
    else {
      unint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      unint64_t v6 = (uint64_t *)v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == &qword_1EBBDB230
    || v6[4] > (unint64_t)this
    || (v10 = (uint64_t *)v6[5], unint64_t v11 = (uint64_t *)v6[6], v10 == v11))
  {
LABEL_21:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v12 = *v10;
      unint64_t v13 = (std::__shared_weak_count *)v10[1];
      *a3 = *v10;
      a3[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v12 + 64))(&v15);
      int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 56))(v15);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if (v14 == a2) {
        break;
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      v10 += 2;
      if (v10 == v11) {
        goto LABEL_21;
      }
    }
  }
}

void sub_1C5345F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void *RTPTransportManager::getTransports@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = qword_1EBBDB230;
  if (!qword_1EBBDB230) {
    goto LABEL_12;
  }
  uint64_t v3 = &qword_1EBBDB230;
  do
  {
    unint64_t v4 = *(void *)(v2 + 32);
    BOOL v5 = v4 >= (unint64_t)this;
    if (v4 >= (unint64_t)this) {
      unint64_t v6 = (uint64_t *)v2;
    }
    else {
      unint64_t v6 = (uint64_t *)(v2 + 8);
    }
    if (v5) {
      uint64_t v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 != &qword_1EBBDB230 && v3[4] <= (unint64_t)this)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__init_with_size[abi:ne180100]<std::shared_ptr<ImsUdpSocketInterface>*,std::shared_ptr<ImsUdpSocketInterface>*>(a2, (void *)v3[5], (void *)v3[6], (v3[6] - v3[5]) >> 4);
  }
  else
  {
LABEL_12:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return this;
}

void RTPTransportManager::getNwTransport(RTPTransportManager *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = qword_1EBBDB248;
  if (!qword_1EBBDB248) {
    goto LABEL_19;
  }
  unint64_t v6 = &qword_1EBBDB248;
  do
  {
    unint64_t v7 = *(void *)(v4 + 32);
    BOOL v8 = v7 >= (unint64_t)this;
    if (v7 >= (unint64_t)this) {
      unint64_t v9 = (uint64_t *)v4;
    }
    else {
      unint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (v8) {
      unint64_t v6 = (uint64_t *)v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 == &qword_1EBBDB248
    || v6[4] > (unint64_t)this
    || (v10 = (uint64_t *)v6[5], unint64_t v11 = (uint64_t *)v6[6], v10 == v11))
  {
LABEL_19:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v12 = *v10;
      unint64_t v13 = (std::__shared_weak_count *)v10[1];
      *a3 = *v10;
      a3[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (nw_endpoint_get_port(*(nw_endpoint_t *)(v12 + 24)) == a2) {
        break;
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      v10 += 2;
      if (v10 == v11) {
        goto LABEL_19;
      }
    }
  }
}

void sub_1C5346104(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void RTPTransportManager::clearAll(RTPTransportManager *this)
{
  uint64_t v1 = qword_1EBBDB228;
  if ((uint64_t *)qword_1EBBDB228 != &qword_1EBBDB230)
  {
    do
    {
      uint64_t v2 = *(void **)(v1 + 40);
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v11 = 0;
      std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__init_with_size[abi:ne180100]<std::shared_ptr<ImsUdpSocketInterface>*,std::shared_ptr<ImsUdpSocketInterface>*>(&v11, v2, *(void **)(v1 + 48), (uint64_t)(*(void *)(v1 + 48) - (void)v2) >> 4);
      uint64_t v3 = v11;
      uint64_t v4 = v12;
      if (v11 != v12)
      {
        do
        {
          BOOL v5 = *(std::__shared_weak_count **)(v3 + 8);
          if (v5)
          {
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v5);
          }
          v3 += 16;
        }
        while (v3 != v4);
        uint64_t v3 = v11;
        for (uint64_t i = v12; i != v3; i -= 16)
        {
          unint64_t v7 = *(std::__shared_weak_count **)(i - 8);
          if (v7) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v7);
          }
        }
      }
      uint64_t v12 = v3;
      int v14 = (void **)&v11;
      std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v14);
      BOOL v8 = *(uint64_t **)(v1 + 8);
      if (v8)
      {
        do
        {
          unint64_t v9 = v8;
          BOOL v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          unint64_t v9 = *(uint64_t **)(v1 + 16);
          BOOL v10 = *v9 == v1;
          uint64_t v1 = (uint64_t)v9;
        }
        while (!v10);
      }
      uint64_t v1 = (uint64_t)v9;
    }
    while (v9 != &qword_1EBBDB230);
  }
  std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::destroy((uint64_t)&qword_1EBBDB228, (char *)qword_1EBBDB230);
  qword_1EBBDB228 = (uint64_t)&qword_1EBBDB230;
  qword_1EBBDB238 = 0;
  qword_1EBBDB230 = 0;
}

void std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__throw_length_error[abi:ne180100]()
{
}

void *std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__init_with_size[abi:ne180100]<std::shared_ptr<ImsUdpSocketInterface>*,std::shared_ptr<ImsUdpSocketInterface>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ImsUdpSocketInterface>>,std::shared_ptr<ImsUdpSocketInterface>*,std::shared_ptr<ImsUdpSocketInterface>*,std::shared_ptr<ImsUdpSocketInterface>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1C53462D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::shared_ptr<ImsUdpSocketInterface>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipRetryInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<ImsUdpSocketInterface>>,std::shared_ptr<ImsUdpSocketInterface>*,std::shared_ptr<ImsUdpSocketInterface>*,std::shared_ptr<ImsUdpSocketInterface>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v8;
  void v7[3] = 1;
  BOOL v8 = a4;
  uint64_t v7[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v9 = v4;
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<ImsUdpSocketInterface>>,std::shared_ptr<ImsUdpSocketInterface>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<ImsUdpSocketInterface>>,std::shared_ptr<ImsUdpSocketInterface>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<BambiConferenceParticipant>>,std::shared_ptr<BambiConferenceParticipant>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 40);
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v4);
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (void **)(a1 + 40);
    std::vector<std::shared_ptr<BambiCallAction>>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void std::allocate_shared[abi:ne180100]<ImsUdpSocket,std::allocator<ImsUdpSocket>,decltype(nullptr),DscpClass,void>(void *a1, int a2)
{
  uint64_t v4 = operator new(0x88uLL);
  v4[1] = 0;
  uint64_t v4[2] = 0;
  void *v4 = &unk_1F20C3F20;
  v5[0] = 0;
  v5[1] = 0;
  ImsUdpSocket::ImsUdpSocket((uint64_t)(v4 + 3), v5, a2);
  *a1 = v4 + 3;
  a1[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1C534655C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ImsUdpSocket>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3F20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsUdpSocket>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3F20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<ImsUdpSocket>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 24))();
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpSocketInterface>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(unint64_t a1, uint64_t *a2)
{
  uint64_t v3 = qword_1EBBDB230;
  if (qword_1EBBDB230)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v4 = (uint64_t *)v3;
        unint64_t v5 = *(void *)(v3 + 32);
        if (v5 <= a1) {
          break;
        }
        uint64_t v3 = *v4;
        unint64_t v6 = v4;
        if (!*v4) {
          goto LABEL_9;
        }
      }
      if (v5 >= a1) {
        break;
      }
      uint64_t v3 = v4[1];
      if (!v3)
      {
        unint64_t v6 = v4 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v6 = &qword_1EBBDB230;
    uint64_t v4 = &qword_1EBBDB230;
LABEL_9:
    unint64_t v7 = v4;
    uint64_t v4 = (uint64_t *)operator new(0x40uLL);
    v4[4] = *a2;
    void v4[5] = 0;
    v4[6] = 0;
    v4[7] = 0;
    uint64_t *v4 = 0;
    v4[1] = 0;
    uint64_t v4[2] = (uint64_t)v7;
    uint64_t *v6 = (uint64_t)v4;
    BOOL v8 = v4;
    if (*(void *)qword_1EBBDB228)
    {
      qword_1EBBDB228 = *(void *)qword_1EBBDB228;
      BOOL v8 = (uint64_t *)*v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBBDB230, v8);
    ++qword_1EBBDB238;
  }
  return v4;
}

void std::allocate_shared[abi:ne180100]<ImsUdpNw,std::allocator<ImsUdpNw>,std::shared_ptr<SipStack> const&,void>(void *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  unint64_t v6 = (std::__shared_weak_count *)operator new(0x98uLL);
  unint64_t v7 = v6;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3F70;
  BOOL v8 = &v6[1].__vftable;
  v10[0] = a2;
  v10[1] = a3;
  if (a3)
  {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
    ImsUdpNw::ImsUdpNw((uint64_t)&v6[1], v10, 0);
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  else
  {
    ImsUdpNw::ImsUdpNw((uint64_t)&v6[1], v10, 0);
  }
  *a1 = v8;
  a1[1] = v7;
  shared_weak_owners = (std::__shared_weak_count *)v7[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1) {
      return;
    }
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[1].__shared_owners_ = (uint64_t)v8;
    v7[1].__shared_weak_owners_ = (uint64_t)v7;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v7[1].__shared_owners_ = (uint64_t)v8;
    v7[1].__shared_weak_owners_ = (uint64_t)v7;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void std::__shared_ptr_emplace<ImsUdpNw>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3F70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ImsUdpNw>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C3F70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<ImsUdpNw>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t *std::__tree<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,std::vector<std::shared_ptr<ImsUdpNw>>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(unint64_t a1, uint64_t *a2)
{
  uint64_t v3 = qword_1EBBDB248;
  if (qword_1EBBDB248)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v4 = (uint64_t *)v3;
        unint64_t v5 = *(void *)(v3 + 32);
        if (v5 <= a1) {
          break;
        }
        uint64_t v3 = *v4;
        unint64_t v6 = v4;
        if (!*v4) {
          goto LABEL_9;
        }
      }
      if (v5 >= a1) {
        break;
      }
      uint64_t v3 = v4[1];
      if (!v3)
      {
        unint64_t v6 = v4 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v6 = &qword_1EBBDB248;
    uint64_t v4 = &qword_1EBBDB248;
LABEL_9:
    unint64_t v7 = v4;
    uint64_t v4 = (uint64_t *)operator new(0x40uLL);
    v4[4] = *a2;
    void v4[5] = 0;
    v4[6] = 0;
    v4[7] = 0;
    uint64_t *v4 = 0;
    v4[1] = 0;
    uint64_t v4[2] = (uint64_t)v7;
    uint64_t *v6 = (uint64_t)v4;
    BOOL v8 = v4;
    if (*(void *)qword_1EBBDB240)
    {
      qword_1EBBDB240 = *(void *)qword_1EBBDB240;
      BOOL v8 = (uint64_t *)*v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1EBBDB248, v8);
    ++qword_1EBBDB250;
  }
  return v4;
}

uint64_t _GLOBAL__sub_I_RTPTransportManager_cpp()
{
  qword_1EBBDB230 = 0;
  RTPTransportManager::_transportManager = (uint64_t)&unk_1F20C3EF0;
  qword_1EBBDB228 = (uint64_t)&qword_1EBBDB230;
  qword_1EBBDB250 = 0;
  qword_1EBBDB248 = 0;
  qword_1EBBDB238 = 0;
  qword_1EBBDB240 = (uint64_t)&qword_1EBBDB248;
  return __cxa_atexit((void (*)(void *))RTPTransportManager::~RTPTransportManager, &RTPTransportManager::_transportManager, &dword_1C51D1000);
}

void SipUssdData::SipUssdData(SipUssdData *this)
{
  *(void *)this = &unk_1F20C81E8;
  uint64_t v2 = (char *)this + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "ussd-data");
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v2, (long long *)__p, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_1F20C3FC0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C4038;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 0;
}

void sub_1C5346AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipUssdData::SipUssdData(SipUssdData *this, const SipUssdData *a2)
{
  *(void *)this = &unk_1F20C81E8;
  char v4 = (char *)this + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "ussd-data");
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v4, (long long *)__p, 0);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_1F20C3FC0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C4038;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  std::string::operator=((std::string *)((char *)this + 64), (const std::string *)((char *)a2 + 64));
  std::string::operator=((std::string *)((char *)this + 88), (const std::string *)((char *)a2 + 88));
  *((_DWORD *)this + 28) = *((_DWORD *)a2 + 28);
}

void sub_1C5346BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipUssdData::SipUssdData(uint64_t a1, const std::string *a2, const std::string *a3)
{
  *(void *)a1 = &unk_1F20C81E8;
  uint64_t v6 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(__p, "ussd-data");
  bambi::XmlTreeItem::XmlTreeItem(v6, (long long *)__p, 0);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  *(void *)a1 = &unk_1F20C3FC0;
  *(void *)(a1 + 8) = &unk_1F20C4038;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  std::string::operator=((std::string *)(a1 + 88), a2);
  std::string::operator=((std::string *)(a1 + 64), a3);
  return a1;
}

void sub_1C5346D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *SipUssdData::setText(std::string *result, uint64_t *a2, std::string *__str)
{
  uint64_t v3 = (uint64_t)result;
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a2[1];
  }
  if (v4 != 11)
  {
    if (v4 != 10)
    {
      if (v4 == 8)
      {
        uint64_t v6 = v5 >= 0 ? a2 : (uint64_t *)*a2;
        if (*v6 == 0x65676175676E616CLL)
        {
          unint64_t v7 = (std::string *)((char *)result + 64);
LABEL_35:
          return std::string::operator=(v7, __str);
        }
      }
      return result;
    }
    if (v5 >= 0) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = (uint64_t *)*a2;
    }
    uint64_t v14 = *v13;
    int v15 = *((unsigned __int16 *)v13 + 4);
    if (v14 != 0x6F632D726F727265 || v15 != 25956) {
      return result;
    }
LABEL_32:
    uint64_t result = (std::string *)ims::strToUint32((uint64_t *)__str, 0);
    *(_DWORD *)(v3 + 112) = result;
    return result;
  }
  if (v5 >= 0) {
    BOOL v8 = a2;
  }
  else {
    BOOL v8 = (uint64_t *)*a2;
  }
  if (*v8 == 0x7274732D64737375 && *(uint64_t *)((char *)v8 + 3) == 0x676E697274732D64)
  {
    unint64_t v7 = (std::string *)((char *)result + 88);
    goto LABEL_35;
  }
  uint64_t v10 = *v8;
  uint64_t v11 = *(uint64_t *)((char *)v8 + 3);
  if (v10 == 0x632D746C75736572 && v11 == 0x65646F632D746C75) {
    goto LABEL_32;
  }
  return result;
}

void SipUssdData::constructTree(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  bambi::XmlTreeItem::makeNode(a1);
}

void sub_1C5347104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  *(void *)(v28 - 40) = v27;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  std::string::size_type v30 = *(std::__shared_weak_count **)(v26 + 8);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipUssdData::constructTree(void *a1@<X8>)
{
}

void non-virtual thunk to'SipUssdData::~SipUssdData(SipUssdData *this)
{
  *((void *)this - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C3FC0;
  *(void *)this = &unk_1F20C4038;
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  bambi::XmlTreeItem::~XmlTreeItem((void **)this);
}

{
  uint64_t vars8;

  *((void *)this - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C3FC0;
  *(void *)this = &unk_1F20C4038;
  if (*((char *)this + 103) < 0) {
    operator delete(*((void **)this + 10));
  }
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  bambi::XmlTreeItem::~XmlTreeItem((void **)this);
  JUMPOUT(0x1C878E320);
}

void SipSessionStateMachine::stateMachineName(SipSessionStateMachine *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 11), *((void *)this + 12));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 88);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 13);
  }
}

void SipSessionStateMachine::~SipSessionStateMachine(void **this)
{
  *this = &unk_1F20C4408;
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  SipSimpleStateMachine<SipSessionState>::~SipSimpleStateMachine((uint64_t)this);
}

{
  uint64_t vars8;

  *this = &unk_1F20C4408;
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  SipSimpleStateMachine<SipSessionState>::~SipSimpleStateMachine((uint64_t)this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSession::SipSession(uint64_t a1, const std::string *a2)
{
  *(void *)(a1 + 104) = &unk_1F20B2FA8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.session");
  SipSessionInterface::SipSessionInterface(a1, (uint64_t *)&off_1F20C4310, &__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_1F20C40F0;
  *(void *)(a1 + 104) = &unk_1F20C4268;
  *(void *)(a1 + 624) = &unk_1F20C42B0;
  *(void *)(a1 + 632) = &unk_1F20C42E0;
  long long v4 = 0uLL;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 640) = a1 + 648;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(void *)(a1 + 704) = 0;
  *(_DWORD *)(a1 + 712) = 1065353216;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(void *)(a1 + 664) = &unk_1F20C4408;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 778) = 0u;
  *(void *)(a1 + 832) = 90;
  *(_WORD *)(a1 + 840) = 1;
  *(unsigned char *)(a1 + 842) = 1;
  *(_OWORD *)(a1 + 936) = 0u;
  *(void *)(a1 + 844) = 0x200000001;
  *(_WORD *)(a1 + 852) = 256;
  *(unsigned char *)(a1 + 854) = 1;
  *(_WORD *)(a1 + 863) = 256;
  *(void *)(a1 + 855) = 0;
  *(_DWORD *)(a1 + 865) = 0;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_DWORD *)(a1 + 872) = 0;
  *(unsigned char *)(a1 + 876) = 0;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(unsigned char *)(a1 + 928) = 0;
  *(void *)(a1 + 968) = 0x40A7700000000000;
  *(unsigned char *)(a1 + 1112) = 0;
  *(unsigned char *)(a1 + 1136) = 0;
  *(unsigned char *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(void *)(a1 + 1256) = 0;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(void *)(a1 + 1264) = 90;
  *(_DWORD *)(a1 + 1272) = 16777472;
  *(unsigned char *)(a1 + 1276) = 0;
  *(void *)(a1 + 1360) = 0;
  *(_OWORD *)(a1 + 1376) = 0u;
  *(unsigned char *)(a1 + 1400) = 0;
  *(void *)(a1 + 1424) = 0;
  *(_OWORD *)(a1 + 1408) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_OWORD *)(a1 + 1296) = 0u;
  *(_OWORD *)(a1 + 1312) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_OWORD *)(a1 + 1337) = 0u;
  *(void *)(a1 + 1440) = a1;
  *(void *)(a1 + 1432) = &unk_1F20C9D60;
  *(void *)(a1 + 1456) = 0x200000001;
  *(_WORD *)(a1 + 1464) = 256;
  *(unsigned char *)(a1 + 1466) = 1;
  *(void *)(a1 + 1467) = 0;
  *(_WORD *)(a1 + 1475) = 256;
  *(_DWORD *)(a1 + 1477) = 0;
  *(void *)(a1 + 1504) = 0;
  *(void *)(a1 + 1496) = 0;
  *(void *)(a1 + 1488) = a1 + 1496;
  *(void *)(a1 + 1512) = 0x100000003;
  *(_DWORD *)(a1 + 1520) = 5;
  *(_WORD *)(a1 + 1524) = 0;
  *(void *)(a1 + 1448) = a1 + 632;
  *(void *)(a1 + 1544) = 0;
  *(void *)(a1 + 1536) = 0;
  *(void *)(a1 + 1552) = 0;
  *(unsigned char *)(a1 + 1568) = 0;
  *(unsigned char *)(a1 + 1756) = 0;
  *(unsigned char *)(a1 + 1640) = 0;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1736) = 0u;
  *(_OWORD *)(a1 + 1724) = 0u;
  *(_OWORD *)(a1 + 1708) = 0u;
  *(_OWORD *)(a1 + 1692) = 0u;
  *(_OWORD *)(a1 + 1676) = 0u;
  *(_OWORD *)(a1 + 1660) = 0u;
  *(_OWORD *)(a1 + 1644) = 0u;
  *(_WORD *)(a1 + 1757) = 1;
  int v5 = *(std::__shared_weak_count **)(a1 + 256);
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    long long v4 = 0uLL;
  }
  *(void *)(a1 + 1368) = 0;
  *(unsigned char *)(a1 + 1392) = 0;
  *(_DWORD *)(a1 + 1396) = 0;
  *(unsigned char *)(a1 + 1569) = 0;
  *(_DWORD *)(a1 + 1752) = 0;
  *(_OWORD *)(a1 + 1576) = v4;
  *(_OWORD *)(a1 + 1592) = v4;
  *(_DWORD *)(a1 + 1528) = -1;
  *(unsigned char *)(a1 + 1560) = 0;
  return a1;
}

void sub_1C5347748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::constructStateMachine(SipSession *this)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v13, (void *)this + 23);
  std::dynamic_pointer_cast[abi:ne180100]<SipSession,SipSessionInterface>((void **)&v11, (void **)&v13);
  if (*((void *)&v13 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
  }
  uint64_t v2 = v11;
  if (v11)
  {
    uint64_t v3 = (std::__shared_weak_count *)operator new(0xF0uLL);
    v3->__shared_owners_ = 0;
    v3->__shared_weak_owners_ = 0;
    v3->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C47B8;
    long long v4 = v3 + 1;
    SipSessionTimer::SipSessionTimer((SipSessionTimer *)&v3[1]);
    shared_weak_owners = (std::__shared_weak_count *)v3[1].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1) {
        goto LABEL_11;
      }
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v3[1].__shared_owners_ = (uint64_t)v4;
      v3[1].__shared_weak_owners_ = (uint64_t)v3;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    else
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v3[1].__shared_owners_ = (uint64_t)v4;
      v3[1].__shared_weak_owners_ = (uint64_t)v3;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
LABEL_11:
    *((void *)this + 172) = v4;
    BOOL v8 = (std::__shared_weak_count *)*((void *)this + 173);
    *((void *)this + 173) = v3;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    unint64_t v7 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(long long *__return_ptr, char *))(*(void *)v2 + 320))(&v13, v2);
    char v9 = (void **)((char *)this + 752);
    if (*((char *)this + 775) < 0) {
      operator delete(*v9);
    }
    *(_OWORD *)char v9 = v13;
    *((void *)this + 96) = v14;
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    *((void *)this + 92) = v2 + 624;
    uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 93);
    *((void *)this + 93) = v7;
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v7)
    {
      std::__shared_weak_count::__release_weak(v7);
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      goto LABEL_23;
    }
    return;
  }
  uint64_t v6 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
  (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Couldn't set delegate for stateMachine", 38);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  unint64_t v7 = v12;
  if (v12) {
LABEL_23:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1C53479D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void *std::dynamic_pointer_cast[abi:ne180100]<SipSession,SipSessionInterface>(void **a1, void **a2)
{
  uint64_t result = *a2;
  if (*a2 {
    && (long long v4 = a2,
  }
  {
    int v5 = v4[1];
    *a1 = result;
    a1[1] = v5;
  }
  else
  {
    long long v4 = a1;
  }
  std::__shared_weak_count *v4 = 0;
  v4[1] = 0;
  return result;
}

void SipSession::create(const std::string *a1@<X0>, SipSession **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  std::allocate_shared[abi:ne180100]<SipSession,std::allocator<SipSession>,std::string const&,void>(a1, a2);
  SipSession::constructStateMachine(*a2);
}

void sub_1C5347AD8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::~SipSession(SipSession *this)
{
  *(void *)this = &unk_1F20C40F0;
  *((void *)this + 13) = &unk_1F20C4268;
  *((void *)this + 78) = &unk_1F20C42B0;
  *((void *)this + 79) = &unk_1F20C42E0;
  uint64_t v2 = ImsLogContainer::debugStream(this);
  (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"~SipSession", 11);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = *((void *)this + 198);
  if (v3)
  {
    long long v4 = *(std::__shared_weak_count **)(v3 + 120);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    int v5 = *(std::__shared_weak_count **)(v3 + 104);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    if (*(char *)(v3 + 95) < 0) {
      operator delete(*(void **)(v3 + 72));
    }
    if (*(char *)(v3 + 55) < 0) {
      operator delete(*(void **)(v3 + 32));
    }
    if (*(char *)(v3 + 31) < 0) {
      operator delete(*(void **)(v3 + 8));
    }
    MEMORY[0x1C878E320](v3, 0x1032C40D4AF1F8FLL);
  }
  uint64_t v6 = *((void *)this + 171);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *((void *)this + 197);
  if (v7)
  {
    BOOL v8 = *(std::__shared_weak_count **)(v7 + 120);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    char v9 = *(std::__shared_weak_count **)(v7 + 104);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (*(char *)(v7 + 95) < 0) {
      operator delete(*(void **)(v7 + 72));
    }
    if (*(char *)(v7 + 55) < 0) {
      operator delete(*(void **)(v7 + 32));
    }
    if (*(char *)(v7 + 31) < 0) {
      operator delete(*(void **)(v7 + 8));
    }
    MEMORY[0x1C878E320](v7, 0x1032C40D4AF1F8FLL);
  }
  uint64_t v10 = *((void *)this + 199);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  uint64_t v11 = *((void *)this + 200);
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  if (*((char *)this + 1751) < 0) {
    operator delete(*((void **)this + 216));
  }
  if (*((char *)this + 1727) < 0) {
    operator delete(*((void **)this + 213));
  }
  if (*((char *)this + 1703) < 0) {
    operator delete(*((void **)this + 210));
  }
  if (*((char *)this + 1679) < 0) {
    operator delete(*((void **)this + 207));
  }
  if (*((char *)this + 1639) < 0) {
    operator delete(*((void **)this + 202));
  }
  std::unique_ptr<ImsPowerAssertion>::reset[abi:ne180100]((void ***)this + 201, 0);
  uint64_t v12 = (void *)*((void *)this + 192);
  if (v12)
  {
    *((void *)this + 193) = v12;
    operator delete(v12);
  }
  *((void *)this + 179) = &unk_1F20C9D60;
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)this + 1488, *((void **)this + 187));
  *((void *)this + 186) = (char *)this + 1496;
  *((void *)this + 188) = 0;
  *((void *)this + 187) = 0;
  if (*((char *)this + 1431) < 0) {
    operator delete(*((void **)this + 176));
  }
  long long v13 = (std::__shared_weak_count *)*((void *)this + 173);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  LazuliSessionOptions::~LazuliSessionOptions((void **)this + 145);
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 144);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  BambiCallOptions::~BambiCallOptions((void **)this + 99);
  int v15 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  *((void *)this + 83) = &unk_1F20C4408;
  if (*((char *)this + 775) < 0) {
    operator delete(*((void **)this + 94));
  }
  SipSimpleStateMachine<SipSessionState>::~SipSimpleStateMachine((uint64_t)this + 664);
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(*((void **)this + 81));
  SipSessionInterface::~SipSessionInterface(this, (uint64_t *)&off_1F20C4310);
}

{
  uint64_t vars8;

  SipSession::~SipSession(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'SipSession::~SipSession(SipSession *this)
{
}

{
  SipSession::~SipSession((SipSession *)((char *)this - 624));
}

{
  SipSession::~SipSession((SipSession *)((char *)this - 632));
}

{
  uint64_t vars8;

  SipSession::~SipSession((SipSession *)((char *)this - 104));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipSession::~SipSession((SipSession *)((char *)this - 624));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipSession::~SipSession((SipSession *)((char *)this - 632));
  JUMPOUT(0x1C878E320);
}

uint64_t SipSession::requireQosBeforeRinging(SipSession *this)
{
  if (!*((unsigned char *)this + 1757)) {
    return 0;
  }
  SipSessionInterface::stack((std::__shared_weak_count *)this, &v5);
  uint64_t v1 = (ImsPrefs *)SipStack::prefs(v5);
  RequireQoSBeforeRingingKey = (void **)ImsPrefs::getRequireQoSBeforeRingingKey(v1);
  uint64_t v3 = ImsPrefs::BOOLValue(v1, RequireQoSBeforeRingingKey);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

void sub_1C5348028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::removeAllAckHandlers(SipSession **this)
{
  SipSessionInterface::removeAllAckHandlers((SipSessionInterface *)this);
  int64x2_t v17 = 0;
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v2 = this[80];
  if (v2 != (SipSession *)(this + 81))
  {
    uint64_t v3 = 0;
    do
    {
      if (v3 >= v19)
      {
        long long v4 = v17;
        uint64_t v5 = (v3 - v17) >> 2;
        unint64_t v6 = v5 + 1;
        if ((unint64_t)(v5 + 1) >> 62) {
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v7 = v19 - v17;
        if ((v19 - v17) >> 1 > v6) {
          unint64_t v6 = v7 >> 1;
        }
        if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v8 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v8 = v6;
        }
        if (v8)
        {
          char v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)&v19, v8);
          long long v4 = v17;
          uint64_t v3 = v18;
        }
        else
        {
          char v9 = 0;
        }
        uint64_t v10 = &v9[4 * v5];
        *(_DWORD *)uint64_t v10 = *((_DWORD *)v2 + 8);
        uint64_t v11 = v10 + 4;
        while (v3 != v4)
        {
          int v12 = *((_DWORD *)v3 - 1);
          v3 -= 4;
          *((_DWORD *)v10 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v12;
          v10 -= 4;
        }
        int64x2_t v17 = v10;
        uint64_t v19 = &v9[4 * v8];
        if (v4) {
          operator delete(v4);
        }
        uint64_t v3 = v11;
      }
      else
      {
        *(_DWORD *)uint64_t v3 = *((_DWORD *)v2 + 8);
        v3 += 4;
      }
      unint64_t v18 = v3;
      long long v13 = (SipSession *)*((void *)v2 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          long long v13 = *(SipSession **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (SipSession *)*((void *)v2 + 2);
          BOOL v15 = *(void *)v14 == (void)v2;
          uint64_t v2 = v14;
        }
        while (!v15);
      }
      uint64_t v2 = v14;
    }
    while (v14 != (SipSession *)(this + 81));
    if (v3 == v17) {
      goto LABEL_30;
    }
    unint64_t v16 = 0;
    uint64_t v3 = v17;
    do
    {
      SipSession::removePrackHandler((SipSession *)this, *(_DWORD *)&v3[4 * v16++]);
      uint64_t v3 = v17;
    }
    while (v16 < (v18 - v17) >> 2);
    if (v17) {
LABEL_30:
    }
      operator delete(v3);
  }
}

void sub_1C53481DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *SipSession::removePrackHandler(SipSession *this, unsigned int a2)
{
  uint64_t result = (uint64_t *)*((void *)this + 81);
  if (result)
  {
    long long v4 = (uint64_t *)((char *)this + 648);
    uint64_t v5 = result;
    do
    {
      unsigned int v6 = *((_DWORD *)v5 + 8);
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unint64_t v8 = v5;
      }
      else {
        unint64_t v8 = v5 + 1;
      }
      if (v7) {
        long long v4 = v5;
      }
      uint64_t v5 = (uint64_t *)*v8;
    }
    while (*v8);
    if (v4 != (uint64_t *)((char *)this + 648) && *((_DWORD *)v4 + 8) <= a2)
    {
      char v9 = (uint64_t *)v4[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          char v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        uint64_t v11 = v4;
        do
        {
          uint64_t v10 = (uint64_t *)v11[2];
          BOOL v12 = *v10 == (void)v11;
          uint64_t v11 = v10;
        }
        while (!v12);
      }
      if (*((uint64_t **)this + 80) == v4) {
        *((void *)this + 80) = v10;
      }
      --*((void *)this + 82);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(result, v4);
      long long v13 = (std::__shared_weak_count *)v4[6];
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      operator delete(v4);
      uint64_t v14 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
      (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"removed PRACK handler for cseq ", 31);
      *(unsigned char *)(v14 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      uint64_t v22 = 0;
      long long v20 = 0u;
      memset(v21, 0, sizeof(v21));
      *(_OWORD *)unint64_t v18 = 0u;
      long long v19 = 0u;
      memset(v17, 0, sizeof(v17));
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"PrackHandler ", 13);
      std::ostream::operator<<();
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v17 + 8, &v15);
      LoggableString::LoggableString(&__p, &v15);
      (*(void (**)(char *, std::string *))(*((void *)this + 13) + 40))((char *)this + 104, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      *(void *)&v17[0] = *MEMORY[0x1E4FBA418];
      *(void *)((char *)v17 + *(void *)(*(void *)&v17[0] - MsrpTransportTcp::connectionResetByPeer((MsrpTransportTcp *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
      *((void *)&v17[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
      if (SHIBYTE(v19) < 0) {
        operator delete(v18[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (uint64_t *)MEMORY[0x1C878E270](v21);
    }
  }
  return result;
}

void sub_1C5348530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  std::ostringstream::~ostringstream((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void SipSession::initializeWithOptions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    *(_WORD *)(a1 + 792) = *(_WORD *)a3;
    std::string::operator=((std::string *)(a1 + 800), (const std::string *)(a3 + 8));
    long long v6 = *(_OWORD *)(a3 + 48);
    long long v5 = *(_OWORD *)(a3 + 64);
    long long v7 = *(_OWORD *)(a3 + 32);
    *(void *)(a1 + 869) = *(void *)(a3 + 77);
    *(_OWORD *)(a1 + 840) = v6;
    *(_OWORD *)(a1 + 856) = v5;
    *(_OWORD *)(a1 + 824) = v7;
    std::string::operator=((std::string *)(a1 + 880), (const std::string *)(a3 + 88));
    std::string::operator=((std::string *)(a1 + 904), (const std::string *)(a3 + 112));
    *(unsigned char *)(a1 + 928) = *(unsigned char *)(a3 + 136);
    long long v8 = *(_OWORD *)(a3 + 144);
    long long v9 = *(_OWORD *)(a3 + 176);
    *(_OWORD *)(a1 + 952) = *(_OWORD *)(a3 + 160);
    *(_OWORD *)(a1 + 968) = v9;
    *(_OWORD *)(a1 + 936) = v8;
    std::string::operator=((std::string *)(a1 + 984), (const std::string *)(a3 + 192));
    std::string::operator=((std::string *)(a1 + 1008), (const std::string *)(a3 + 216));
    std::string::operator=((std::string *)(a1 + 1032), (const std::string *)(a3 + 240));
    std::string::operator=((std::string *)(a1 + 1056), (const std::string *)(a3 + 264));
    std::string::operator=((std::string *)(a1 + 1080), (const std::string *)(a3 + 288));
    *(unsigned char *)(a1 + 1104) = *(unsigned char *)(a3 + 312);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a1 + 1112), (const std::string *)(a3 + 320));
  }
  operator new();
}

void sub_1C5348708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::initializeWithOptions(uint64_t a1, int a2, std::string *__str)
{
  if (__str)
  {
    std::string::operator=((std::string *)(a1 + 1160), __str);
    std::string::operator=((std::string *)(a1 + 1184), __str + 1);
    std::string::operator=((std::string *)(a1 + 1208), __str + 2);
    std::string::operator=((std::string *)(a1 + 1232), __str + 3);
    uint64_t v5 = *(std::string::size_type *)((char *)&__str[4].__r_.__value_.__r.__words[1] + 5);
    *(_OWORD *)(a1 + 1256) = *(_OWORD *)&__str[4].__r_.__value_.__l.__data_;
    *(void *)(a1 + 1269) = v5;
    std::string::operator=((std::string *)(a1 + 1280), __str + 5);
    std::string::operator=((std::string *)(a1 + 1304), __str + 6);
    std::string::operator=((std::string *)(a1 + 1328), __str + 7);
  }
  operator new();
}

void sub_1C53488A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::initialize(uint64_t a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v94[0] = *a2;
  v94[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSessionInterface::initialize((void *)a1, (uint64_t)v94);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v92 = 0;
  unint64_t v93 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v89, (void *)(a1 + 184));
  std::dynamic_pointer_cast[abi:ne180100]<SipSession,SipSessionInterface>(&v92, &v89);
  if (v90) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v90);
  }
  long long v4 = v92;
  if (v92)
  {
    if (*(unsigned char *)(a1 + 840))
    {
      uint64_t v5 = *(void *)(a1 + 1376);
      long long v6 = v93;
      v88[0] = v92;
      v88[1] = v93;
      if (v93) {
        atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SipSessionTimer::initialize(v5, v88, *(unsigned char *)(a1 + 841));
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
    uint64_t v7 = *(void *)(a1 + 248);
    if (v7)
    {
      uint64_t v8 = *(void *)(v7 + 216);
      if (v8)
      {
        long long v9 = *(SipUserAgent **)(v8 + 136);
        if (v9)
        {
          if (*(unsigned char *)(SipUserAgent::config(v9) + 609)) {
            *(_DWORD *)(a1 + 1396) = 1;
          }
        }
      }
    }
    uint64_t v10 = v93;
    uint64_t v11 = (std::__shared_weak_count *)operator new(0xF8uLL);
    BOOL v12 = v11;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4858;
    long long v13 = (std::__shared_weak_count_vtbl *)&v11[1];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipSessionConfirmedState::SipSessionConfirmedState((SipSessionState *)&v11[1], (uint64_t)v4, v10);
    uint64_t v14 = (void *)(a1 + 664);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    uint64_t shared_owners = (std::__shared_weak_count *)v12[9].__shared_owners_;
    if (shared_owners)
    {
      if (shared_owners->__shared_owners_ != -1) {
        goto LABEL_30;
      }
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v12[9].__vftable = v13;
      v12[9].__shared_owners_ = (uint64_t)v12;
      std::__shared_weak_count::__release_weak(shared_owners);
    }
    else
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v12[9].__vftable = v13;
      v12[9].__shared_owners_ = (uint64_t)v12;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_30:
    v87[0] = v13;
    v87[1] = v12;
    SipTypedStateMachine<SipSessionState>::addState(a1 + 664, v87);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    int64x2_t v17 = (std::__shared_weak_count *)operator new(0xF8uLL);
    unint64_t v18 = v17;
    v17->__shared_owners_ = 0;
    v17->__shared_weak_owners_ = 0;
    v17->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C48A8;
    long long v19 = (std::__shared_weak_count_vtbl *)&v17[1];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v89 = v4;
    long long v90 = v10;
    SipSessionState::SipSessionState((SipSessionState *)&v17[1], &v89);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    v18[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E0AE0;
    v18[1].__shared_owners_ = (uint64_t)&unk_1F20E0B90;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    long long v20 = (std::__shared_weak_count *)v18[9].__shared_owners_;
    if (v20)
    {
      if (v20->__shared_owners_ != -1) {
        goto LABEL_41;
      }
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v18[9].__vftable = v19;
      v18[9].__shared_owners_ = (uint64_t)v18;
      std::__shared_weak_count::__release_weak(v20);
    }
    else
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v18[9].__vftable = v19;
      v18[9].__shared_owners_ = (uint64_t)v18;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
LABEL_41:
    v86[0] = v19;
    v86[1] = v18;
    SipTypedStateMachine<SipSessionState>::addState(a1 + 664, v86);
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    unint64_t v21 = (std::__shared_weak_count *)operator new(0xF8uLL);
    uint64_t v22 = v21;
    v21->__shared_owners_ = 0;
    v21->__shared_weak_owners_ = 0;
    v21->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C48F8;
    uint64_t v23 = (std::__shared_weak_count_vtbl *)&v21[1];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v89 = v4;
    long long v90 = v10;
    SipSessionState::SipSessionState((SipSessionState *)&v21[1], &v89);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    v22[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E0BC0;
    v22[1].__shared_owners_ = (uint64_t)&unk_1F20E0C70;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    int64x2_t v24 = (std::__shared_weak_count *)v22[9].__shared_owners_;
    if (v24)
    {
      if (v24->__shared_owners_ != -1) {
        goto LABEL_52;
      }
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v22[9].__vftable = v23;
      v22[9].__shared_owners_ = (uint64_t)v22;
      std::__shared_weak_count::__release_weak(v24);
    }
    else
    {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v22[9].__vftable = v23;
      v22[9].__shared_owners_ = (uint64_t)v22;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
LABEL_52:
    v85[0] = v23;
    v85[1] = v22;
    SipTypedStateMachine<SipSessionState>::addState(a1 + 664, v85);
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    unint64_t v25 = (std::__shared_weak_count *)operator new(0xF8uLL);
    uint64_t v26 = v25;
    v25->__shared_owners_ = 0;
    v25->__shared_weak_owners_ = 0;
    v25->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4948;
    uint64_t v27 = (std::__shared_weak_count_vtbl *)&v25[1];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v89 = v4;
    long long v90 = v10;
    SipSessionState::SipSessionState((SipSessionState *)&v25[1], &v89);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    v26[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E0CA0;
    v26[1].__shared_owners_ = (uint64_t)&unk_1F20E0D48;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    uint64_t v28 = (std::__shared_weak_count *)v26[9].__shared_owners_;
    if (v28)
    {
      if (v28->__shared_owners_ != -1) {
        goto LABEL_63;
      }
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v26[9].__vftable = v27;
      v26[9].__shared_owners_ = (uint64_t)v26;
      std::__shared_weak_count::__release_weak(v28);
    }
    else
    {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v26[9].__vftable = v27;
      v26[9].__shared_owners_ = (uint64_t)v26;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
LABEL_63:
    v84[0] = v27;
    v84[1] = v26;
    SipTypedStateMachine<SipSessionState>::addState(a1 + 664, v84);
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    long long v29 = (std::__shared_weak_count *)operator new(0xF8uLL);
    std::string::size_type v30 = v29;
    v29->__shared_owners_ = 0;
    v29->__shared_weak_owners_ = 0;
    v29->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4998;
    uint64_t v31 = (std::__shared_weak_count_vtbl *)&v29[1];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipSessionConfirmedState::SipSessionConfirmedState((SipSessionState *)&v29[1], (uint64_t)v4, v10);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    v30[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20E0D78;
    v30[1].__shared_owners_ = (uint64_t)&unk_1F20E0E28;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    uint64_t v32 = (std::__shared_weak_count *)v30[9].__shared_owners_;
    if (v32)
    {
      if (v32->__shared_owners_ != -1) {
        goto LABEL_74;
      }
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v30[9].__vftable = v31;
      v30[9].__shared_owners_ = (uint64_t)v30;
      std::__shared_weak_count::__release_weak(v32);
    }
    else
    {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v30[9].__vftable = v31;
      v30[9].__shared_owners_ = (uint64_t)v30;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
LABEL_74:
    v83[0] = v31;
    v83[1] = v30;
    SipTypedStateMachine<SipSessionState>::addState(a1 + 664, v83);
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    if (*(unsigned char *)(*(void *)(a1 + 248) + 1928))
    {
      SipPreconditions::initializeMobileOriginated((unsigned int *)(a1 + 1432), (_OWORD *)(a1 + 844));
      uint64_t v33 = (std::__shared_weak_count *)operator new(0xF8uLL);
      char v34 = v33;
      v33->__shared_owners_ = 0;
      v33->__shared_weak_owners_ = 0;
      v33->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C49E8;
      long long v35 = (std::__shared_weak_count_vtbl *)&v33[1];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SipSessionClientInviteState::SipSessionClientInviteState((SipSessionState *)&v33[1], (uint64_t)v4, v10);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      char v36 = (std::__shared_weak_count *)v34[9].__shared_owners_;
      if (v36)
      {
        if (v36->__shared_owners_ != -1) {
          goto LABEL_93;
        }
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v34[9].__vftable = v35;
        v34[9].__shared_owners_ = (uint64_t)v34;
        std::__shared_weak_count::__release_weak(v36);
      }
      else
      {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v34->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v34[9].__vftable = v35;
        v34[9].__shared_owners_ = (uint64_t)v34;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
LABEL_93:
      v82[0] = v35;
      v82[1] = v34;
      SipTypedStateMachine<SipSessionState>::addState((uint64_t)v14, v82);
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      uint64_t v41 = (std::__shared_weak_count *)operator new(0xF8uLL);
      uint64_t v42 = v41;
      v41->__shared_owners_ = 0;
      v41->__shared_weak_owners_ = 0;
      v41->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4A38;
      long long v43 = (std::__shared_weak_count_vtbl *)&v41[1];
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SipSessionClientInviteState::SipSessionClientInviteState((SipSessionState *)&v41[1], (uint64_t)v4, v10);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      v42[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C0610;
      v42[1].__shared_owners_ = (uint64_t)&unk_1F20C06C0;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      long long v44 = (std::__shared_weak_count *)v42[9].__shared_owners_;
      if (v44)
      {
        if (v44->__shared_owners_ != -1) {
          goto LABEL_104;
        }
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v42[9].__vftable = v43;
        v42[9].__shared_owners_ = (uint64_t)v42;
        std::__shared_weak_count::__release_weak(v44);
      }
      else
      {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v42->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v42[9].__vftable = v43;
        v42[9].__shared_owners_ = (uint64_t)v42;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
LABEL_104:
      v81[0] = v43;
      v81[1] = v42;
      SipTypedStateMachine<SipSessionState>::addState((uint64_t)v14, v81);
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
      long long v45 = (std::__shared_weak_count *)operator new(0xF8uLL);
      uint64_t v46 = v45;
      v45->__shared_owners_ = 0;
      v45->__shared_weak_owners_ = 0;
      v45->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4A88;
      unsigned int v47 = (std::__shared_weak_count_vtbl *)&v45[1];
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SipSessionClientUnconfirmedState::SipSessionClientUnconfirmedState((SipSessionState *)&v45[1], (uint64_t)v4, v10);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      v46[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4AD8;
      v46[1].__shared_owners_ = (uint64_t)&unk_1F20C4B80;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      uint64_t v48 = (std::__shared_weak_count *)v46[9].__shared_owners_;
      if (v48)
      {
        if (v48->__shared_owners_ != -1) {
          goto LABEL_115;
        }
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v46->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v46[9].__vftable = v47;
        v46[9].__shared_owners_ = (uint64_t)v46;
        std::__shared_weak_count::__release_weak(v48);
      }
      else
      {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v46->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v46[9].__vftable = v47;
        v46[9].__shared_owners_ = (uint64_t)v46;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
LABEL_115:
      v80[0] = v47;
      v80[1] = v46;
      SipTypedStateMachine<SipSessionState>::addState((uint64_t)v14, v80);
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
      char v49 = (std::__shared_weak_count *)operator new(0x100uLL);
      uint64_t v50 = v49;
      v49->__shared_owners_ = 0;
      v49->__shared_weak_owners_ = 0;
      v49->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4BC8;
      char v51 = (std::__shared_weak_count_vtbl *)&v49[1];
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SipSessionClientCanceledState::SipSessionClientCanceledState((uint64_t)&v49[1], (uint64_t)v4, v10);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      BOOL v52 = (std::__shared_weak_count *)v50[9].__shared_owners_;
      if (v52)
      {
        if (v52->__shared_owners_ != -1) {
          goto LABEL_124;
        }
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v50->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v50[9].__vftable = v51;
        v50[9].__shared_owners_ = (uint64_t)v50;
        std::__shared_weak_count::__release_weak(v52);
      }
      else
      {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v50->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v50[9].__vftable = v51;
        v50[9].__shared_owners_ = (uint64_t)v50;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
LABEL_124:
      v79[0] = v51;
      v79[1] = v50;
      SipTypedStateMachine<SipSessionState>::addState((uint64_t)v14, v79);
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
      int v53 = (std::__shared_weak_count *)operator new(0x100uLL);
      char v54 = v53;
      v53->__shared_owners_ = 0;
      v53->__shared_weak_owners_ = 0;
      v53->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4C18;
      long long v55 = (std::__shared_weak_count_vtbl *)&v53[1];
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SipSessionClientCanceledState::SipSessionClientCanceledState((uint64_t)&v53[1], (uint64_t)v4, v10);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      v54[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C07E8;
      v54[1].__shared_owners_ = (uint64_t)&unk_1F20C0898;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      long long v56 = (std::__shared_weak_count *)v54[9].__shared_owners_;
      if (v56)
      {
        if (v56->__shared_owners_ != -1) {
          goto LABEL_135;
        }
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v54->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v54[9].__vftable = v55;
        v54[9].__shared_owners_ = (uint64_t)v54;
        std::__shared_weak_count::__release_weak(v56);
      }
      else
      {
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v54->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v54[9].__vftable = v55;
        v54[9].__shared_owners_ = (uint64_t)v54;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
LABEL_135:
      v78[0] = v55;
      v78[1] = v54;
      SipTypedStateMachine<SipSessionState>::addState((uint64_t)v14, v78);
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
      long long v57 = (std::__shared_weak_count *)operator new(0xF8uLL);
      uint64_t v58 = v57;
      v57->__shared_owners_ = 0;
      v57->__shared_weak_owners_ = 0;
      v57->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4C68;
      int v59 = (std::__shared_weak_count_vtbl *)&v57[1];
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v89 = v4;
      long long v90 = v10;
      SipSessionState::SipSessionState((SipSessionState *)&v57[1], &v89);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      v58[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C08C8;
      v58[1].__shared_owners_ = (uint64_t)&unk_1F20C0978;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      uint64_t v60 = (std::__shared_weak_count *)v58[9].__shared_owners_;
      if (v60)
      {
        if (v60->__shared_owners_ != -1)
        {
LABEL_146:
          v77[0] = v59;
          v77[1] = v58;
          SipTypedStateMachine<SipSessionState>::addState((uint64_t)v14, v77);
          std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          goto LABEL_183;
        }
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v58->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v58[9].__vftable = v59;
        v58[9].__shared_owners_ = (uint64_t)v58;
        std::__shared_weak_count::__release_weak(v60);
      }
      else
      {
        atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v58->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        v58[9].__vftable = v59;
        v58[9].__shared_owners_ = (uint64_t)v58;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      goto LABEL_146;
    }
    uint64_t v37 = (std::__shared_weak_count *)operator new(0xF8uLL);
    uint64_t v38 = v37;
    v37->__shared_owners_ = 0;
    v37->__shared_weak_owners_ = 0;
    v37->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4CB8;
    uint64_t v39 = (std::__shared_weak_count_vtbl *)&v37[1];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipSessionServerUnconfirmedState::SipSessionServerUnconfirmedState((SipSessionState *)&v37[1], (uint64_t)v4, v10);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    v38[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D5B60;
    v38[1].__shared_owners_ = (uint64_t)&unk_1F20D5C08;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    int v40 = (std::__shared_weak_count *)v38[9].__shared_owners_;
    if (v40)
    {
      if (v40->__shared_owners_ != -1) {
        goto LABEL_149;
      }
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v38[9].__vftable = v39;
      v38[9].__shared_owners_ = (uint64_t)v38;
      std::__shared_weak_count::__release_weak(v40);
    }
    else
    {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v38[9].__vftable = v39;
      v38[9].__shared_owners_ = (uint64_t)v38;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
LABEL_149:
    v76[0] = v39;
    v76[1] = v38;
    SipTypedStateMachine<SipSessionState>::addState((uint64_t)v14, v76);
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    long long v61 = (std::__shared_weak_count *)operator new(0xF8uLL);
    uint64_t v62 = v61;
    v61->__shared_owners_ = 0;
    v61->__shared_weak_owners_ = 0;
    v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4D08;
    int v63 = (std::__shared_weak_count_vtbl *)&v61[1];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipSessionServerUnconfirmedState::SipSessionServerUnconfirmedState((SipSessionState *)&v61[1], (uint64_t)v4, v10);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    v62[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4D58;
    v62[1].__shared_owners_ = (uint64_t)&unk_1F20C4E00;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    unint64_t v64 = (std::__shared_weak_count *)v62[9].__shared_owners_;
    if (v64)
    {
      if (v64->__shared_owners_ != -1) {
        goto LABEL_160;
      }
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v62->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v62[9].__vftable = v63;
      v62[9].__shared_owners_ = (uint64_t)v62;
      std::__shared_weak_count::__release_weak(v64);
    }
    else
    {
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v62->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v62[9].__vftable = v63;
      v62[9].__shared_owners_ = (uint64_t)v62;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
LABEL_160:
    v75[0] = v63;
    v75[1] = v62;
    SipTypedStateMachine<SipSessionState>::addState((uint64_t)v14, v75);
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    unint64_t v65 = (std::__shared_weak_count *)operator new(0xF8uLL);
    uint64_t v66 = v65;
    v65->__shared_owners_ = 0;
    v65->__shared_weak_owners_ = 0;
    v65->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4E48;
    uint64_t v67 = (std::__shared_weak_count_vtbl *)&v65[1];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v89 = v4;
    long long v90 = v10;
    SipSessionState::SipSessionState((SipSessionState *)&v65[1], &v89);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    v66[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D5D28;
    v66[1].__shared_owners_ = (uint64_t)&unk_1F20D5DD0;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    unint64_t v68 = (std::__shared_weak_count *)v66[9].__shared_owners_;
    if (v68)
    {
      if (v68->__shared_owners_ != -1) {
        goto LABEL_171;
      }
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v66->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v66[9].__vftable = v67;
      v66[9].__shared_owners_ = (uint64_t)v66;
      std::__shared_weak_count::__release_weak(v68);
    }
    else
    {
      atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v66->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v66[9].__vftable = v67;
      v66[9].__shared_owners_ = (uint64_t)v66;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
LABEL_171:
    v74[0] = v67;
    v74[1] = v66;
    SipTypedStateMachine<SipSessionState>::addState((uint64_t)v14, v74);
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
    unint64_t v69 = (std::__shared_weak_count *)operator new(0xF8uLL);
    unint64_t v70 = v69;
    v69->__shared_owners_ = 0;
    v69->__shared_weak_owners_ = 0;
    v69->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4E98;
    int v71 = (std::__shared_weak_count_vtbl *)&v69[1];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unint64_t v89 = v4;
    long long v90 = v10;
    SipSessionState::SipSessionState((SipSessionState *)&v69[1], &v89);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    v70[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20D5E00;
    v70[1].__shared_owners_ = (uint64_t)&unk_1F20D5EB0;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    char v72 = (std::__shared_weak_count *)v70[9].__shared_owners_;
    if (v72)
    {
      if (v72->__shared_owners_ != -1)
      {
LABEL_182:
        v73[0] = v71;
        v73[1] = v70;
        SipTypedStateMachine<SipSessionState>::addState((uint64_t)v14, v73);
        std::__shared_weak_count::__release_shared[abi:ne180100](v70);
        SipTypedStateMachine<SipSessionState>::transitionToState(v14, 3);
        goto LABEL_183;
      }
      atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v70->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v70[9].__vftable = v71;
      v70[9].__shared_owners_ = (uint64_t)v70;
      std::__shared_weak_count::__release_weak(v72);
    }
    else
    {
      atomic_fetch_add_explicit(&v70->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v70->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v70[9].__vftable = v71;
      v70[9].__shared_owners_ = (uint64_t)v70;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
    goto LABEL_182;
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Couldn't initialize ", 20);
  *(unsigned char *)(v16 + 17) = 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 320))(&v89, a1);
  (*(void (**)(uint64_t, void **))(*(void *)v16 + 40))(v16, &v89);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v16 + 17) = 0;
  if (v91 < 0) {
    operator delete(v89);
  }
  uint64_t v10 = v93;
LABEL_183:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C5349AA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  long long v4 = *(std::__shared_weak_count **)(v2 - 88);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void SipTypedStateMachine<SipSessionState>::addState(uint64_t a1, void *a2)
{
  if (!*a2) {
    return;
  }
  unsigned int v4 = (*(uint64_t (**)(void))(*(void *)*a2 + 48))(*a2);
  unsigned int v5 = v4;
  unint64_t v6 = v4;
  unint64_t v7 = *(void *)(a1 + 24);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = v4;
      if (v7 <= v4) {
        unint64_t v9 = v4 % v7;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v4;
    }
    uint64_t v10 = *(void ***)(*(void *)(a1 + 16) + 8 * v9);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = *(void **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == v4)
        {
          if (*((_DWORD *)i + 4) == v4) {
            goto LABEL_75;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v12 >= v7) {
              v12 %= v7;
            }
          }
          else
          {
            v12 &= v7 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  long long v13 = (void *)(a1 + 32);
  uint64_t i = operator new(0x28uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v6;
  *((_DWORD *)i + 4) = v5;
  *((void *)i + 3) = 0;
  *((void *)i + 4) = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
  float v15 = *(float *)(a1 + 48);
  if (v7 && (float)(v15 * (float)v7) >= v14)
  {
    unint64_t v6 = v9;
    goto LABEL_65;
  }
  BOOL v16 = 1;
  if (v7 >= 3) {
    BOOL v16 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v17 = v16 | (2 * v7);
  unint64_t v18 = vcvtps_u32_f32(v14 / v15);
  if (v17 <= v18) {
    int8x8_t prime = (int8x8_t)v18;
  }
  else {
    int8x8_t prime = (int8x8_t)v17;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *(void *)(a1 + 24);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_61;
    }
    unint64_t v26 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
    if (v7 < 3 || (uint8x8_t v27 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
    {
      unint64_t v26 = std::__next_prime(v26);
    }
    else
    {
      uint64_t v28 = 1 << -(char)__clz(v26 - 1);
      if (v26 >= 2) {
        unint64_t v26 = v28;
      }
    }
    if (*(void *)&prime <= v26) {
      int8x8_t prime = (int8x8_t)v26;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *(void *)(a1 + 24);
      goto LABEL_61;
    }
    if (!*(void *)&prime)
    {
      uint64_t v38 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = 0;
      if (v38) {
        operator delete(v38);
      }
      unint64_t v7 = 0;
      *(void *)(a1 + 24) = 0;
      goto LABEL_61;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  long long v20 = operator new(8 * *(void *)&prime);
  unint64_t v21 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v20;
  if (v21) {
    operator delete(v21);
  }
  uint64_t v22 = 0;
  *(int8x8_t *)(a1 + 24) = prime;
  do
    *(void *)(*(void *)(a1 + 16) + 8 * v22++) = 0;
  while (*(void *)&prime != v22);
  uint64_t v23 = (void *)*v13;
  if (*v13)
  {
    unint64_t v24 = v23[1];
    uint8x8_t v25 = (uint8x8_t)vcnt_s8(prime);
    v25.i16[0] = vaddlv_u8(v25);
    if (v25.u32[0] > 1uLL)
    {
      if (v24 >= *(void *)&prime) {
        v24 %= *(void *)&prime;
      }
    }
    else
    {
      v24 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)(a1 + 16) + 8 * v24) = v13;
    long long v29 = (void *)*v23;
    if (*v23)
    {
      do
      {
        unint64_t v30 = v29[1];
        if (v25.u32[0] > 1uLL)
        {
          if (v30 >= *(void *)&prime) {
            v30 %= *(void *)&prime;
          }
        }
        else
        {
          v30 &= *(void *)&prime - 1;
        }
        if (v30 != v24)
        {
          uint64_t v31 = *(void *)(a1 + 16);
          if (!*(void *)(v31 + 8 * v30))
          {
            *(void *)(v31 + 8 * v30) = v23;
            goto LABEL_57;
          }
          void *v23 = *v29;
          void *v29 = **(void **)(*(void *)(a1 + 16) + 8 * v30);
          **(void **)(*(void *)(a1 + 16) + 8 * v30) = v29;
          long long v29 = v23;
        }
        unint64_t v30 = v24;
LABEL_57:
        uint64_t v23 = v29;
        long long v29 = (void *)*v29;
        unint64_t v24 = v30;
      }
      while (v29);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_61:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_65:
  uint64_t v32 = *(void *)(a1 + 16);
  uint64_t v33 = *(void **)(v32 + 8 * v6);
  if (v33)
  {
    *(void *)uint64_t i = *v33;
  }
  else
  {
    *(void *)uint64_t i = *v13;
    void *v13 = i;
    *(void *)(v32 + 8 * v6) = v13;
    if (!*(void *)i) {
      goto LABEL_74;
    }
    unint64_t v34 = *(void *)(*(void *)i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v34 >= v7) {
        v34 %= v7;
      }
    }
    else
    {
      v34 &= v7 - 1;
    }
    uint64_t v33 = (void *)(*(void *)(a1 + 16) + 8 * v34);
  }
  *uint64_t v33 = i;
LABEL_74:
  ++*(void *)(a1 + 40);
LABEL_75:
  uint64_t v36 = *a2;
  uint64_t v35 = a2[1];
  if (v35) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v37 = (std::__shared_weak_count *)*((void *)i + 4);
  *((void *)i + 3) = v36;
  *((void *)i + 4) = v35;
  if (v37)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
}

void sub_1C534A060(_Unwind_Exception *a1)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t SipTypedStateMachine<SipSessionState>::transitionToState(void *a1, uint64_t a2)
{
  unint64_t v4 = a1[3];
  if (v4)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      unint64_t v6 = a2;
      if (v4 <= a2) {
        unint64_t v6 = a2 % v4;
      }
    }
    else
    {
      unint64_t v6 = (v4 - 1) & a2;
    }
    unint64_t v7 = *(uint64_t ***)(a1[2] + 8 * v6);
    if (v7)
    {
      for (uint64_t i = *v7; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v9 = i[1];
        if (v9 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
          {
            uint64_t v15 = a1[7];
            float v14 = (std::__shared_weak_count *)a1[8];
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v15)
            {
              uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 48))(v15);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 64))(v15, a2);
            }
            else
            {
              uint64_t v16 = 0;
            }
            uint64_t v17 = i[3];
            uint64_t v18 = i[4];
            if (v18) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
            }
            long long v19 = (std::__shared_weak_count *)a1[8];
            a1[7] = v17;
            a1[8] = v18;
            if (v19)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v19);
              uint64_t v17 = a1[7];
            }
            (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 56))(v17, v16);
            uint64_t v23 = v15;
            unint64_t v24 = v14;
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v20 = (std::__shared_weak_count *)a1[8];
            uint64_t v21 = a1[7];
            uint64_t v22 = v20;
            if (v20) {
              atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(void *, uint64_t *, uint64_t *))(*a1 + 56))(a1, &v23, &v21);
            if (v22) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            }
            if (v24) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            }
            if (v14) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            }
            return 1;
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= v4) {
              v9 %= v4;
            }
          }
          else
          {
            v9 &= v4 - 1;
          }
          if (v9 != v6) {
            break;
          }
        }
      }
    }
  }
  uint64_t v10 = a1[1];
  if (v10)
  {
    uint64_t v11 = (*(uint64_t (**)(void))(*(void *)v10 + 56))(a1[1]);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 16))(v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"transitionToState: no such state ", 33);
    *(unsigned char *)(v11 + 17) = 0;
    unint64_t v12 = (const std::string *)(*(uint64_t (**)(void *, uint64_t))(*a1 + 16))(a1, a2);
    LoggableString::LoggableString(&__p, v12);
    (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 40))(v11, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return 0;
}

void sub_1C534A3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::replaceDialog(void *a1, uint64_t a2, const SipMessage *a3)
{
  unint64_t v7 = (void **)(a1 + 31);
  uint64_t v6 = a1[31];
  if (v6) {
    SipDialog::createRequestInDialog(v6);
  }
  uint64_t v29 = 0;
  unint64_t v30 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__p, a1 + 23);
  std::dynamic_pointer_cast[abi:ne180100]<SipSession,SipSessionInterface>((void **)&v29, &__p);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v8 = v29;
  if (v29)
  {
    unint64_t v9 = *(void **)a2;
    uint64_t v10 = *(void *)(a2 + 8);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (std::__shared_weak_count *)a1[32];
    a1[31] = v9;
    a1[32] = v10;
    if (v11)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      unint64_t v9 = *v7;
    }
    unint64_t v12 = v30;
    v28[0] = v8;
    v28[1] = (uint64_t)v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipDialog::attachSession(v9, v28);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    long long v13 = *v7;
    float v14 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a3);
    if (v14) {
      uint64_t v15 = SipUriHeader::tag(v14);
    }
    else {
      uint64_t v15 = &ims::kEmptyString;
    }
    uint64_t v16 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v13 + 256), (void **)v15);
    uint64_t v17 = v16;
    if (v13 + 257 == v16)
    {
      long long v19 = 0;
    }
    else
    {
      uint64_t v18 = (SipDialogFork *)v16[7];
      long long v19 = (std::__shared_weak_count *)v17[8];
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v18)
      {
        SipDialogFork::updateRouteSet(v18, a3, 0);
LABEL_30:
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        goto LABEL_32;
      }
    }
    uint64_t v20 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"no fork with remote tag", 23);
    *(unsigned char *)(v20 + 17) = 0;
    uint64_t v21 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a3);
    if (v21) {
      uint64_t v22 = SipUriHeader::tag(v21);
    }
    else {
      uint64_t v22 = &ims::kEmptyString;
    }
    ObfuscatedString::ObfuscatedString((uint64_t)&__p, (const std::string *)v22);
    (*(void (**)(uint64_t, void **))(*(void *)v20 + 56))(v20, &__p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v20 + 17) = 0;
    if (v27 < 0) {
      operator delete(v26);
    }
    if (v25 < 0) {
      operator delete(__p);
    }
    goto LABEL_30;
  }
LABEL_32:
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
}

void sub_1C534A7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::sendRequest(SipRequest *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, void *a4@<X8>)
{
  BOOL isSessionRefresh = SipRequest::isSessionRefresh(this);
  if (isSessionRefresh) {
    SipSessionTimer::addHeadersToRequest(*(SipSessionTimer **)(a2 + 1376), this);
  }
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  SipDialog::sendRequest(*(void **)(a2 + 248), this, a3, &v11);
  uint64_t v9 = v11;
  if (v11)
  {
    if (isSessionRefresh)
    {
      SipTimerContainer::cancelAllTimers((SipTimerContainer *)(*(void *)(a2 + 1376) + 48));
      uint64_t v9 = v11;
    }
    uint64_t v10 = v12;
    *a4 = v9;
    a4[1] = v10;
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void sub_1C534A8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::handleStateTransition(SipSession *this, uint64_t a2, uint64_t a3)
{
  if (a2 <= 5 && a3 >= 6)
  {
    uint64_t v6 = *((void *)this + 31);
    memset(&v16, 0, sizeof(v16));
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    SipDialog::currentClientTransactions(v6, (unint64_t *)&v16, "PRACK", (uint64_t *)&__p);
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    std::string::size_type v7 = v16.__r_.__value_.__r.__words[0];
    if (v16.__r_.__value_.__l.__size_ != v16.__r_.__value_.__r.__words[0])
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        SipTransaction::abort(*(SipTransaction **)(v7 + v8));
        ++v9;
        std::string::size_type v7 = v16.__r_.__value_.__r.__words[0];
        v8 += 16;
      }
      while (v9 < (uint64_t)(v16.__r_.__value_.__l.__size_ - v16.__r_.__value_.__r.__words[0]) >> 4);
    }
    uint64_t v17 = &v16;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
    SipTimerContainer::cancelAllTimers((SipSession *)((char *)this + 272));
    uint64_t v10 = *((void *)this + 201);
    if (*(_DWORD *)(v10 + 24)) {
      ImsPowerAssertion::deinitialize(v10);
    }
  }
  uint64_t v11 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
  (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"state transition [", 18);
  *(unsigned char *)(v11 + 17) = 0;
  unint64_t v12 = (const std::string *)(*(uint64_t (**)(SipSession *, uint64_t))(*(void *)this + 272))(this, a2);
  LoggableString::LoggableString(&v16, v12);
  (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 40))(v11, &v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" --> ", 5);
  *(unsigned char *)(v11 + 17) = 0;
  long long v13 = (const std::string *)(*(uint64_t (**)(SipSession *, uint64_t))(*(void *)this + 272))(this, a3);
  LoggableString::LoggableString(&__p, v13);
  (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 40))(v11, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"]", 1);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v16.__r_.__value_.__l.__data_);
    if (a2) {
      goto LABEL_14;
    }
  }
  else if (a2)
  {
    goto LABEL_14;
  }
  ImsPowerAssertion::initialize(*((ImsPowerAssertion **)this + 201), 300.0, 6, (uint64_t)v14);
  ImsResult::~ImsResult((ImsResult *)v14);
LABEL_14:
  if (a3 == 6)
  {
    *((unsigned char *)this + 1756) = 1;
  }
  else if (a3 >= 7)
  {
    SipTimerContainer::cancelAllTimers((SipTimerContainer *)(*((void *)this + 172) + 48));
    if (a3 == 13) {
      (*(void (**)(SipSession *))(*(void *)this + 192))(this);
    }
  }
}

void sub_1C534AC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  *(void *)(v23 - 56) = v23 - 80;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 56));
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipSession::handleStateTransition(SipSession *this, uint64_t a2, uint64_t a3)
{
}

void SipSession::fireCallEvent(SipSession *this, BambiCallEvent *a2)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    SipSessionInterface::stack((std::__shared_weak_count *)this, &v61);
    if (v61 && *(unsigned char *)(v61 + 2681))
    {
      unint64_t v4 = (LazuliSession *)*((void *)this + 143);
      uint8x8_t v5 = (std::__shared_weak_count *)*((void *)this + 144);
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v4) {
        LazuliSession::processEvent(v4, a2);
      }
LABEL_17:
      if (!v5)
      {
LABEL_103:
        if (v62) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v62);
        }
        return;
      }
LABEL_102:
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      goto LABEL_103;
    }
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 98);
    if (v6)
    {
      uint8x8_t v5 = std::__shared_weak_count::lock(v6);
      if (v5)
      {
        std::string::size_type v7 = (int8x8_t *)*((void *)this + 97);
        if (v7)
        {
          unint64_t v9 = v8;
          int v10 = *((_DWORD *)a2 + 2);
          if ((v10 - 7) >= 2)
          {
            if (v10 == 4)
            {
              if (!v8
                || (uint64_t v15 = *((void *)this + 31),
                    std::string v16 = SipMessage::toTag((SipMessage *)(v8 + 40)),
                    uint64_t v17 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v15 + 2048, (void **)v16), (void **)(v15 + 2056) == v17))
              {
                uint64_t v18 = 0;
                long long v19 = 0;
              }
              else
              {
                uint64_t v18 = (char *)v17[7];
                long long v19 = (std::__shared_weak_count *)v17[8];
                if (v19) {
                  atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
                }
              }
              SipTimerContainer::cancelTimer((int8x8_t *)this + 34, (std::string *)"WaitForRingingTimer");
              if (*(unsigned char *)(*((void *)this + 31) + 1928))
              {
                SipTimerContainer::cancelTimer((int8x8_t *)this + 34, (std::string *)"WaitForRingingTimer");
                uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 98);
                uint64_t v58 = v18;
                if (v20 && (uint64_t v21 = std::__shared_weak_count::lock(v20)) != 0)
                {
                  int v59 = v21;
                  uint64_t v22 = *((void *)this + 97);
                }
                else
                {
                  int v59 = 0;
                  uint64_t v22 = 0;
                }
                uint64_t v60 = v19;
                SipSessionInterface::stack((std::__shared_weak_count *)this, &v63);
                char v27 = (ImsPrefs *)SipStack::prefs(v63);
                RingbackTimerSecondsKey = (void **)ImsPrefs::getRingbackTimerSecondsKey(v27);
                int v29 = ImsPrefs::intValue(v27, RingbackTimerSecondsKey);
                if (v64) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v64);
                }
                if (v22 && *(void *)(v22 + 520))
                {
                  SipSessionInterface::stack((std::__shared_weak_count *)this, &v63);
                  unint64_t v30 = (ImsPrefs *)SipStack::prefs(v63);
                  EmergencyRingbackTimerSecondsKey = (void **)ImsPrefs::getEmergencyRingbackTimerSecondsKey(v30);
                  int v32 = ImsPrefs::intValue(v30, EmergencyRingbackTimerSecondsKey);
                  if (v64) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
                  }
                  if (v32)
                  {
                    SipSessionInterface::stack((std::__shared_weak_count *)this, &v63);
                    uint64_t v33 = (ImsPrefs *)SipStack::prefs(v63);
                    unint64_t v34 = (void **)ImsPrefs::getEmergencyRingbackTimerSecondsKey(v33);
                    int v29 = ImsPrefs::intValue(v33, v34);
                    if (v64) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v64);
                    }
                  }
                }
                uint64_t v35 = *((void *)this + 23);
                uint64_t v36 = (std::__shared_weak_count *)*((void *)this + 24);
                if (v36)
                {
                  atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                  atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                }
                if (v29)
                {
                  uint64_t v37 = *((void *)this + 31);
                  if (v37 && (uint64_t v38 = *(void *)(v37 + 216)) != 0) {
                    uint64_t v39 = *(SipUserAgent **)(v38 + 136);
                  }
                  else {
                    uint64_t v39 = 0;
                  }
                  if (*(unsigned char *)(SipUserAgent::config(v39) + 953)
                    || !std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)this + 35, "RingbackTimer"))
                  {
                    uint64_t v40 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
                    (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v40);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"starting ringback timer", 23);
                    *(unsigned char *)(v40 + 17) = 0;
                    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(unsigned char *)(v40 + 17) = 0;
                    if (v36) {
                      atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                    }
                    std::string __p = 0;
                    uint64_t v41 = operator new(0x20uLL);
                    void *v41 = &unk_1F20C4F68;
                    v41[1] = this;
                    uint64_t v41[2] = v35;
                    v41[3] = v36;
                    std::string __p = v41;
                    SipTimerContainer::startTimer((int8x8_t *)this + 34, (uint64_t)"RingbackTimer");
                    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](&v63);
                  }
                }
                if (v36)
                {
                  std::__shared_weak_count::__release_weak(v36);
                  std::__shared_weak_count::__release_weak(v36);
                }
                long long v19 = v60;
                uint64_t v18 = v58;
                if (v59) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v59);
                }
              }
              if (!SipPreconditions::remotePreconditionsSatisfiedInFork((void **)this + 179, (void **)v18 + 19))
              {
                uint64_t v42 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
                (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v42);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"received 180 ringing. Forcing remote preconditions satisfied in fork ", 69);
                *(unsigned char *)(v42 + 17) = 0;
                ObfuscatedString::ObfuscatedString((uint64_t)&v63, (const std::string *)(v18 + 152));
                (*(void (**)(uint64_t, SipStack **))(*(void *)v42 + 56))(v42, &v63);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v42 + 17) = 0;
                if (v67 < 0) {
                  operator delete(__p);
                }
                if (v65 < 0) {
                  operator delete(v63);
                }
                SipPreconditions::setRemotePreconditionsSatisfiedInFork((long long *)((char *)this + 1432), (std::string *)(v18 + 152), 0);
              }
              if (v19) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v19);
              }
            }
            if (!v9) {
              goto LABEL_101;
            }
          }
          else
          {
            if (!v8)
            {
LABEL_101:
              (*(void (**)(int8x8_t *, BambiCallEvent *))(*(void *)v7 + 56))(v7, a2);
              goto LABEL_102;
            }
            uint64_t v11 = *((void *)this + 31);
            unint64_t v12 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)(v8 + 40));
            if (v12) {
              long long v13 = SipUriHeader::tag(v12);
            }
            else {
              long long v13 = &ims::kEmptyString;
            }
            uint64_t v23 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v11 + 2048, (void **)v13);
            if ((void **)(v11 + 2056) != v23)
            {
              unint64_t v24 = (void **)v23[7];
              char v25 = (std::__shared_weak_count *)v23[8];
              if (v25) {
                atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v24 && SipPreconditions::preconditionsSatisfiedInFork((void **)this + 179, v24 + 19))
              {
                unint64_t v26 = (int8x8_t *)((char *)this + 272);
                SipTimerContainer::cancelTimer(v26, (std::string *)"WaitForRingingTimer");
              }
              if (v25) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v25);
              }
            }
          }
          long long v43 = (std::__shared_weak_count *)v7[46];
          if (!v43) {
            goto LABEL_101;
          }
          long long v44 = std::__shared_weak_count::lock(v43);
          if (!v44) {
            goto LABEL_101;
          }
          int8x8_t v45 = v7[45];
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
          if (!*(void *)&v45) {
            goto LABEL_101;
          }
          uint64_t v46 = SipMessage::body<SipSdpBody>((uint64_t)(v9 + 40));
          if (!v46) {
            goto LABEL_101;
          }
          uint64_t v47 = *((void *)v46 + 1);
          uint64_t v48 = (std::__shared_weak_count *)*((void *)v46 + 2);
          if (v48)
          {
            atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
            if (!v47)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v48);
              goto LABEL_101;
            }
          }
          else if (!v47)
          {
            goto LABEL_101;
          }
          char v49 = (std::__shared_weak_count *)v7[46];
          if (v49)
          {
            char v49 = std::__shared_weak_count::lock(v49);
            uint64_t v50 = v49;
            if (v49) {
              char v49 = (std::__shared_weak_count *)v7[45];
            }
          }
          else
          {
            uint64_t v50 = 0;
          }
          char v51 = (ImsPrefs *)SipStack::prefs((SipStack *)v49);
          EPSFallbackTimerSecondsKey = (void **)ImsPrefs::getEPSFallbackTimerSecondsKey(v51);
          if (ImsPrefs::intValue(v51, EPSFallbackTimerSecondsKey))
          {
            int v53 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)&v7[46]);
            if (*(unsigned char *)(*(void *)&v7[45] + 3709))
            {
              char v54 = (std::__shared_weak_count *)v7[46];
              if (v54 && (long long v55 = std::__shared_weak_count::lock(v54)) != 0)
              {
                long long v56 = v55;
                BOOL isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)(*(void *)&v7[45] + 3160));
                std::__shared_weak_count::__release_shared[abi:ne180100](v56);
              }
              else
              {
                BOOL isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)0xC58);
              }
            }
            else
            {
              BOOL isNR = 0;
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v53);
          }
          else
          {
            BOOL isNR = 0;
          }
          if (v50) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v50);
          }
          if (v48)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v48);
            if (!isNR) {
              goto LABEL_101;
            }
          }
          else if (!isNR)
          {
            goto LABEL_101;
          }
          BambiCall::startEPSWatchdogTimer(v7);
          goto LABEL_101;
        }
      }
    }
    else
    {
      uint8x8_t v5 = 0;
    }
    uint64_t v14 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"fireCallEvent: we don't have a call", 35);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    goto LABEL_17;
  }
}

void sub_1C534B4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

uint64_t SipSession::performPendingTermination(uint64_t a1, uint64_t a2, int a3)
{
  memset(v18, 0, sizeof(v18));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v14, (void *)(a1 + 184));
  if (v14) {
    uint64_t v6 = (std::__shared_weak_count *)(v14 + 104);
  }
  else {
    uint64_t v6 = 0;
  }
  std::string v16 = v6;
  uint64_t v17 = v15;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  LoggableString::LoggableString((LoggableString *)__p, "performPendingTermination");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v18, &v16, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v7 = *(void *)(a1 + 1576);
  if (v7)
  {
    bzero(__p, 0x250uLL);
    BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)__p, 15, v7);
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B85E8;
    SipSession::terminateWithEvent((BambiCall **)a1, (BambiCallEvent *)__p, a2);
    if (a3)
    {
      uint64_t v8 = *(void *)(a1 + 1576);
      if (v8)
      {
        unint64_t v9 = *(std::__shared_weak_count **)(v8 + 120);
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        int v10 = *(std::__shared_weak_count **)(v8 + 104);
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        if (*(char *)(v8 + 95) < 0) {
          operator delete(*(void **)(v8 + 72));
        }
        if (*(char *)(v8 + 55) < 0) {
          operator delete(*(void **)(v8 + 32));
        }
        if (*(char *)(v8 + 31) < 0) {
          operator delete(*(void **)(v8 + 8));
        }
        MEMORY[0x1C878E320](v8, 0x1032C40D4AF1F8FLL);
      }
      *(void *)(a1 + 1576) = 0;
    }
    BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)__p);
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"performPendingTermination: no pending termination reason", 56);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v18);
}

void sub_1C534B818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v14 - 96);
  _Unwind_Resume(a1);
}

uint64_t SipSession::terminateWithEvent(BambiCall **a1, BambiCallEvent *a2, uint64_t a3)
{
  memset(v23, 0, sizeof(v23));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v19, a1 + 23);
  if (v19) {
    uint64_t v6 = (std::__shared_weak_count *)(v19 + 104);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v21 = v6;
  uint64_t v22 = v20;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "terminateWithEvent");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v23, &v21, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (a3)
  {
    uint64_t v7 = a1[90];
    if (v7) {
      LODWORD(v7) = (*(uint64_t (**)(BambiCall *))(*(void *)v7 + 48))(v7);
    }
    if (v7 != a3) {
      SipTypedStateMachine<SipSessionState>::transitionToState(a1 + 83, a3);
    }
  }
  uint64_t v8 = a1 + 97;
  unint64_t v9 = (std::__shared_weak_count *)a1[98];
  if (v9)
  {
    int v10 = std::__shared_weak_count::lock(v9);
    if (v10)
    {
      uint64_t v11 = *v8;
      if (*v8)
      {
        if (a2) {
          SipSession::fireCallEvent((SipSession *)a1, a2);
        }
        BambiCall::detachSipSession(v11);
        unint64_t v12 = (std::__shared_weak_count *)a1[98];
        char *v8 = 0;
        a1[98] = 0;
        if (v12) {
          std::__shared_weak_count::__release_weak(v12);
        }
      }
    }
  }
  else
  {
    int v10 = 0;
  }
  long long v13 = a1[143];
  if (!v13)
  {
LABEL_28:
    if (!a2) {
      goto LABEL_33;
    }
    goto LABEL_29;
  }
  if (!a2 || (SipSession::fireCallEvent((SipSession *)a1, a2), (long long v13 = a1[143]) != 0))
  {
    LazuliSession::detachSipSession(v13);
    uint64_t v14 = (std::__shared_weak_count *)a1[144];
    a1[143] = 0;
    a1[144] = 0;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    goto LABEL_28;
  }
LABEL_29:
  if (v15)
  {
    unsigned int v16 = v15[10];
    if (v16 <= 0x15 && ((1 << v16) & 0x320000) != 0) {
      SipSession::reportSetupTimeoutToIRat((std::__shared_weak_count *)a1);
    }
  }
LABEL_33:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v23);
}

void sub_1C534BA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t SipTypedStateMachine<SipSessionState>::currentStateId(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

void SipSession::reportSetupTimeoutToIRat(std::__shared_weak_count *this)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  SipSessionInterface::stack(this, &v6);
  LOBYTE(v9) = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v6.__r_.__value_.__r.__words[0] + 3160));
  if (v6.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6.__r_.__value_.__l.__size_);
  }
  SipSessionInterface::stack(this, &v6);
  uint64_t v10 = *(unsigned int *)(v6.__r_.__value_.__r.__words[0] + 4100);
  if (v6.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6.__r_.__value_.__l.__size_);
  }
  LODWORD(v1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 4;
  SipSessionInterface::stack(this, &v7);
  uint64_t v2 = *(void *)(v7 + 136);
  SipSessionInterface::stack(this, &v4);
  if (*(char *)(v4 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(v4 + 4160), *(void *)(v4 + 4168));
  }
  else {
    std::string v6 = *(std::string *)(v4 + 4160);
  }
  uint64_t v3 = *(void *)(v2 + 248);
  if (v3) {
    (*(void (**)(uint64_t, std::string *, uint64_t *))(*(void *)v3 + 136))(v3, &v6, &v9);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1C534BC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSession::handleInitializationFailure(SipSession *this)
{
  uint64_t v2 = (*(uint64_t (**)(SipSession *))(*(void *)this + 56))(this);
  (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"session initialization failed", 29);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = *(uint64_t (**)(SipSession *))(*(void *)this + 192);
  return v3(this);
}

void SipSession::loggableName(SipSession *this)
{
  uint64_t v2 = 0;
  memset(v1, 0, sizeof(v1));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v1);
}

void sub_1C534BEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t SipSession::emergency(std::__shared_weak_count *this)
{
  shared_weak_owners = (std::__shared_weak_count *)this[32].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    uint64_t v3 = std::__shared_weak_count::lock(shared_weak_owners);
    if (v3) {
      uint64_t shared_owners = this[32].__shared_owners_;
    }
    else {
      uint64_t shared_owners = 0;
    }
  }
  else
  {
    uint64_t shared_owners = 0;
    uint64_t v3 = 0;
  }
  SipSessionInterface::stack(this, &v9);
  if (v9)
  {
    SipSessionInterface::stack(this, &v7);
    BOOL v5 = *(unsigned char *)(v7 + 176) != 0;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (shared_owners) {
    LODWORD(shared_owners) = *(void *)(shared_owners + 520) != 0;
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v5 | shared_owners;
}

void sub_1C534BF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipSession::loggableName(SipSession *this)
{
}

void SipSession::terminationLocksReleased(SipSession *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = (BambiCall *)*((void *)this + 97);
      if (v4) {
        BambiCall::detachSipSession(v4);
      }
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  SipSessionInterface::terminationLocksReleased(this);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C534C03C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipSession::terminationLocksReleased(SipSession *this)
{
}

void SipSession::startPingTimer(int8x8_t *this)
{
  void v11[4] = *MEMORY[0x1E4F143B8];
  int8x8_t v3 = this[23];
  uint64_t v2 = (std::__shared_weak_count *)this[24];
  if (v2)
  {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  int8x8_t v4 = this[31];
  if (*(void *)&v4 && (uint64_t v5 = *(void *)(*(void *)&v4 + 216)) != 0) {
    std::string v6 = *(SipUserAgent **)(v5 + 136);
  }
  else {
    std::string v6 = 0;
  }
  if (*(_DWORD *)(SipUserAgent::config(v6) + 36))
  {
    if (v2) {
      atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v7 = operator new(0x20uLL);
    *uint64_t v7 = &unk_1F20C4FE8;
    v7[1] = this;
    uint64_t v7[2] = v3;
    void v7[3] = v2;
    void v11[3] = v7;
    int8x8_t v8 = this[31];
    if (*(void *)&v8 && (uint64_t v9 = *(void *)(*(void *)&v8 + 216)) != 0) {
      uint64_t v10 = *(SipUserAgent **)(v9 + 136);
    }
    else {
      uint64_t v10 = 0;
    }
    SipUserAgent::config(v10);
    SipTimerContainer::startTimer(this + 34, (uint64_t)"PingTimer");
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v11);
  }
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1C534C19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  _Unwind_Resume(a1);
}

void SipSession::clientInviteTransaction(SipSession *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v3 = *((void *)this + 31);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  SipDialog::currentClientTransactions(v3, (unint64_t *)&v10, "INVITE", &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  int8x8_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 == v11)
  {
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)v4[1];
      *a2 = *v4;
      a2[1] = (uint64_t)v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 144))(v6)) {
        break;
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v4 += 2;
      if (v4 == v5) {
        goto LABEL_10;
      }
    }
  }
  long long v13 = (void **)&v10;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v13);
}

void sub_1C534C2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void SipSession::serverInviteTransaction(SipSession *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v3 = *((void *)this + 31);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  SipDialog::currentServerTransactions(v3, (unint64_t *)&v10, "INVITE", &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  int8x8_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 == v11)
  {
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)v4[1];
      *a2 = *v4;
      a2[1] = (uint64_t)v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 144))(v6)) {
        break;
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v4 += 2;
      if (v4 == v5) {
        goto LABEL_10;
      }
    }
  }
  long long v13 = (void **)&v10;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v13);
}

{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  void **v13;

  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v3 = *((void *)this + 31);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  SipDialog::currentServerTransactions(v3, (unint64_t *)&v10, "INVITE", &v8);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  int8x8_t v4 = v10;
  uint64_t v5 = v11;
  if (v10 == v11)
  {
LABEL_10:
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v6 = *v4;
      uint64_t v7 = (std::__shared_weak_count *)v4[1];
      *a2 = *v4;
      a2[1] = (uint64_t)v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 144))(v6)) {
        break;
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      v4 += 2;
      if (v4 == v5) {
        goto LABEL_10;
      }
    }
  }
  long long v13 = (void **)&v10;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v13);
}

void sub_1C534C3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

void SipSession::handleTimer(SipSession *this, unsigned __int8 *a2)
{
  uint64_t v2 = (const void **)a2;
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v6 != 19)
  {
    if (v6 != 13)
    {
      if (v6 != 12) {
        goto LABEL_49;
      }
      if ((v4 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, "RingingTimer", v5)) {
          goto LABEL_49;
        }
      }
      else if (a2[23])
      {
        uint64_t v7 = "RingingTimer";
        uint64_t v8 = a2;
        uint64_t v9 = a2[23];
        while (*v8 == *(unsigned __int8 *)v7)
        {
          ++v8;
          ++v7;
          if (!--v9) {
            goto LABEL_68;
          }
        }
        goto LABEL_49;
      }
LABEL_68:
      if (SipSession::confirmed(this)) {
        return;
      }
      uint64_t v31 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
      (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"ringing timer fired.  Rejecting call.", 37);
      *(unsigned char *)(v31 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v31 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(v104, "NoAnswer");
      SipSession::rejectWithReason((SipSession *)v103, (std::__shared_weak_count *)this, (uint64_t)v104);
      ImsResult::~ImsResult((ImsResult *)v103);
      goto LABEL_105;
    }
    if ((v4 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, "RingbackTimer", v5)) {
        goto LABEL_49;
      }
    }
    else if (a2[23])
    {
      long long v13 = "RingbackTimer";
      uint64_t v14 = a2;
      uint64_t v15 = a2[23];
      while (*v14 == *(unsigned __int8 *)v13)
      {
        ++v14;
        ++v13;
        if (!--v15) {
          goto LABEL_35;
        }
      }
      goto LABEL_49;
    }
LABEL_35:
    if (SipSession::confirmed(this)) {
      return;
    }
    uint64_t v22 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"ringback timer fired.  Canceling call.", 38);
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v22 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "NoAnswer");
    SipSessionInterface::terminationReason((std::__shared_weak_count *)this, (uint64_t)&__p, (BambiCallTerminationReason *)v104);
    SipSession::cancel((SipSession *)v102, this, (const BambiCallTerminationReason *)v104);
    if (v111) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v111);
    }
    if (v110) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v110);
    }
    if (v109 < 0) {
      operator delete(v108);
    }
    if (SBYTE7(v106) < 0) {
      operator delete((void *)v105);
    }
    if (SHIBYTE(v104[3]) < 0) {
      operator delete((void *)v104[1]);
    }
    ImsResult::~ImsResult((ImsResult *)v102);
    if ((v94 & 0x80000000) == 0) {
      return;
    }
    uint64_t v23 = __p;
LABEL_107:
    operator delete(v23);
    return;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "WaitForRingingTimer", v5)) {
      goto LABEL_49;
    }
LABEL_26:
    uint64_t v16 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"timed out waiting for ringing/preconditions", 43);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    memset(v104, 0, 24);
    if (*(unsigned char *)(*((void *)this + 31) + 1928)
      && (SipPreconditions::preconditionsSatisfiedInAnyFork((SipSession *)((char *)this + 1432)) & 1) != 0)
    {
      uint64_t v17 = (char *)&v104[2] + 5;
      HIBYTE(v104[2]) = 21;
      qmemcpy(v104, "WaitForRingingTimeout", 21);
    }
    else
    {
      uint64_t v17 = (char *)&v104[2] + 3;
      HIBYTE(v104[2]) = 19;
      qmemcpy(v104, "PreconditionFailure", 19);
    }
    unsigned char *v17 = 0;
    uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 98);
    if (v18)
    {
      uint64_t v19 = std::__shared_weak_count::lock(v18);
      if (v19)
      {
        uint64_t v20 = *((void *)this + 97);
        if (v20)
        {
          BOOL v21 = *(void *)(v20 + 520) != 0;
LABEL_92:
          SipSession::reportSetupTimeoutToIRat((std::__shared_weak_count *)this);
          SipSessionInterface::stack((std::__shared_weak_count *)this, &__p);
          uint64_t v41 = (ImsPrefs *)SipStack::prefs((SipStack *)__p);
          DropRegistrationOnWaitTimeoutKey = (void **)ImsPrefs::getDropRegistrationOnWaitTimeoutKey(v41);
          int v43 = ImsPrefs::BOOLValue(v41, DropRegistrationOnWaitTimeoutKey);
          if (v92) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v92);
          }
          if ((v43 ^ 1 | v21))
          {
            SipSession::hangUp((std::__shared_weak_count *)this, (uint64_t)v104, (uint64_t)v99);
            ImsResult::~ImsResult((ImsResult *)v99);
          }
          else
          {
            char v101 = 0;
            std::string::basic_string[abi:ne180100]<0>(&__p, "Deregistering");
            SipSession::hangUp((std::__shared_weak_count *)this, (uint64_t)&__p, (uint64_t)v100);
            ImsResult::~ImsResult((ImsResult *)v100);
            if (v94 < 0) {
              operator delete(__p);
            }
            if (v101 != 2)
            {
              uint64_t v44 = *(void *)(*(void *)(*((void *)this + 31) + 216) + 136);
              uint64_t v45 = *(void *)(v44 + 248);
              uint64_t v46 = *(std::__shared_weak_count **)(v44 + 256);
              if (v46) {
                atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v45 + 168))(v45, 3, 0, 0);
              if (v46) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v46);
              }
            }
          }
          if (v19) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          }
LABEL_105:
          if ((SHIBYTE(v104[2]) & 0x80000000) == 0) {
            return;
          }
          uint64_t v23 = (void *)v104[0];
          goto LABEL_107;
        }
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    BOOL v21 = 0;
    goto LABEL_92;
  }
  if (!a2[23]) {
    goto LABEL_26;
  }
  uint64_t v10 = "WaitForRingingTimer";
  uint64_t v11 = a2;
  uint64_t v12 = a2[23];
  while (*v11 == *(unsigned __int8 *)v10)
  {
    ++v11;
    ++v10;
    if (!--v12) {
      goto LABEL_26;
    }
  }
LABEL_49:
  uint64_t v24 = qword_1EBBDB7F0;
  if (byte_1EBBDB7FF >= 0) {
    uint64_t v24 = byte_1EBBDB7FF;
  }
  if (v6 != v24)
  {
LABEL_61:
    switch(v6)
    {
      case 9:
        if ((v4 & 0x80) != 0)
        {
          int v32 = *v2;
          goto LABEL_109;
        }
        if (!v4) {
          goto LABEL_110;
        }
        uint64_t v28 = "PingTimer";
        int v29 = v2;
        uint64_t v30 = v4;
        do
        {
          if (*(unsigned __int8 *)v29 != *(unsigned __int8 *)v28) {
            goto LABEL_114;
          }
          int v29 = (const void **)((char *)v29 + 1);
          ++v28;
          --v30;
        }
        while (v30);
        goto LABEL_110;
      case 10:
        if ((v4 & 0x80) != 0)
        {
          int v32 = *v2;
          goto LABEL_113;
        }
        if (!v4) {
          goto LABEL_131;
        }
        uint64_t v38 = "GlareTimer";
        uint64_t v39 = v2;
        uint64_t v40 = v4;
        do
        {
          if (*(unsigned __int8 *)v39 != *(unsigned __int8 *)v38) {
            goto LABEL_114;
          }
          uint64_t v39 = (const void **)((char *)v39 + 1);
          ++v38;
          --v40;
        }
        while (v40);
        break;
      case 11:
        goto LABEL_117;
      case 16:
        goto LABEL_125;
      case 20:
        goto LABEL_159;
      default:
        return;
    }
    goto LABEL_131;
  }
  if (byte_1EBBDB7FF >= 0) {
  else
  }
  if ((v4 & 0x80) == 0)
  {
    if (v4)
    {
      unint64_t v26 = v2;
      uint64_t v27 = v4;
      while (*(unsigned __int8 *)v26 == *(unsigned __int8 *)v25)
      {
        unint64_t v26 = (const void **)((char *)v26 + 1);
        char v25 = (uint64_t *)((char *)v25 + 1);
        if (!--v27) {
          goto LABEL_74;
        }
      }
      goto LABEL_61;
    }
LABEL_74:
    uint64_t v33 = (std::__shared_weak_count *)*((void *)this + 98);
    if (v33)
    {
      unint64_t v34 = std::__shared_weak_count::lock(v33);
      if (v34)
      {
        uint64_t v35 = *((void *)this + 97);
        if (v35)
        {
          if (*(unsigned char *)(v35 + 463))
          {
LABEL_83:
            uint64_t v37 = v34;
LABEL_188:
            std::__shared_weak_count::__release_shared[abi:ne180100](v37);
            return;
          }
        }
      }
    }
    else
    {
      unint64_t v34 = 0;
    }
    uint64_t v36 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"timed out waiting for local QoS", 31);
    *(unsigned char *)(v36 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v36 + 17) = 0;
    SipSession::reportSetupTimeoutToIRat((std::__shared_weak_count *)this);
    std::string::basic_string[abi:ne180100]<0>(v104, "LocalQualityOfServiceTimeout");
    SipSession::hangUp((std::__shared_weak_count *)this, (uint64_t)v104, (uint64_t)v98);
    ImsResult::~ImsResult((ImsResult *)v98);
    if (SHIBYTE(v104[2]) < 0) {
      operator delete((void *)v104[0]);
    }
    if (!v34) {
      return;
    }
    goto LABEL_83;
  }
  int v32 = *v2;
  if (!memcmp(*v2, v25, v5)) {
    goto LABEL_74;
  }
  if (v5 == 9)
  {
LABEL_109:
    if (memcmp(v32, "PingTimer", v5)) {
      goto LABEL_114;
    }
LABEL_110:
    if (*(unsigned char *)(*((void *)this + 31) + 1928)) {
      SipSession::clientInviteTransaction(this, v104);
    }
    else {
      SipSession::serverInviteTransaction(this, v104);
    }
    int v59 = (std::__shared_weak_count *)v104[1];
    if (!v104[0])
    {
      uint64_t v67 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
      (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v67);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v67 + 8), (uint64_t)"handlePingTimer: no INVITE transaction", 38);
      *(unsigned char *)(v67 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v67 + 64))(v67, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      int v68 = 0;
      *(unsigned char *)(v67 + 17) = 0;
LABEL_196:
      if (v59) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v59);
      }
      if (v68)
      {
        uint64_t v84 = *((void *)this + 23);
        char v83 = (std::__shared_weak_count *)*((void *)this + 24);
        if (v83)
        {
          atomic_fetch_add_explicit(&v83->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v83->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v83->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v113 = 0;
        char v85 = operator new(0x20uLL);
        void *v85 = &unk_1F20C5068;
        v85[1] = this;
        void v85[2] = v84;
        v85[3] = v83;
        unint64_t v113 = v85;
        uint64_t v86 = *((void *)this + 31);
        if (v86 && (uint64_t v87 = *(void *)(v86 + 216)) != 0) {
          char v88 = *(SipUserAgent **)(v87 + 136);
        }
        else {
          char v88 = 0;
        }
        SipUserAgent::config(v88);
        SipTimerContainer::startTimer((int8x8_t *)this + 34, (uint64_t)"PingTimer");
        std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v112);
        if (v83)
        {
          std::__shared_weak_count::__release_weak(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      return;
    }
    uint64_t v60 = *(std::__shared_weak_count **)(v104[0] + 88);
    if (v60)
    {
      uint64_t v61 = *(void *)(v104[0] + 80);
      atomic_fetch_add_explicit(&v60->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v62 = std::__shared_weak_count::lock(v60);
      std::__shared_weak_count::__release_weak(v60);
      if (v62 && v61)
      {
        uint64_t v107 = 0;
        long long v105 = 0u;
        long long v106 = 0u;
        memset(v104, 0, sizeof(v104));
        (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)v61 + 64))(v104, v61, 0);
        int v63 = (*(uint64_t (**)(uint64_t, void))(*(void *)v104[1] + 24))(v104[1], LODWORD(v104[2]));
        uint64_t v64 = *(void *)this;
        if (v63)
        {
          uint64_t v65 = (*(uint64_t (**)(SipSession *))(v64 + 56))(this);
          (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v65);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)"unable to send ping: ", 21);
          *(unsigned char *)(v65 + 17) = 0;
          uint64_t v66 = (unsigned char *)(v65 + 17);
          (*(void (**)(uint64_t *, uint64_t))(v104[0] + 16))(v104, v65);
        }
        else
        {
          uint64_t v65 = (*(uint64_t (**)(SipSession *))(v64 + 64))(this);
          (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v65);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)"ping!", 5);
          *(unsigned char *)(v65 + 17) = 0;
          uint64_t v66 = (unsigned char *)(v65 + 17);
        }
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *uint64_t v66 = 0;
        ImsResult::~ImsResult((ImsResult *)v104);
        int v82 = 1;
LABEL_195:
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
        int v68 = v82;
        goto LABEL_196;
      }
    }
    else
    {
      uint64_t v62 = 0;
    }
    uint64_t v81 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v81 + 8), (uint64_t)"handlePingTimer: INVITE transaction doesn't have an associated transport", 72);
    *(unsigned char *)(v81 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    int v82 = 0;
    int v68 = 0;
    *(unsigned char *)(v81 + 17) = 0;
    if (!v62) {
      goto LABEL_196;
    }
    goto LABEL_195;
  }
  if (v5 == 10)
  {
LABEL_113:
    if (!memcmp(v32, "GlareTimer", v5))
    {
LABEL_131:
      SipSession::sendPendingInvite((std::string *)this);
      return;
    }
  }
LABEL_114:
  if (v6 > 15)
  {
    if (v6 == 20) {
      goto LABEL_159;
    }
    if (v6 != 16) {
      return;
    }
LABEL_125:
    if ((v4 & 0x80) != 0)
    {
      if (memcmp(*v2, "TTYReinviteTimer", v5)) {
        return;
      }
    }
    else if (v4)
    {
      uint64_t v48 = "TTYReinviteTimer";
      char v49 = v2;
      uint64_t v50 = v4;
      while (*(unsigned __int8 *)v49 == *(unsigned __int8 *)v48)
      {
        char v49 = (const void **)((char *)v49 + 1);
        ++v48;
        if (!--v50) {
          goto LABEL_143;
        }
      }
      if (v6 == 9) {
        goto LABEL_171;
      }
      if (v6 == 11) {
        goto LABEL_117;
      }
      if (v6 != 20) {
        return;
      }
LABEL_159:
      if ((v4 & 0x80) != 0)
      {
        if (memcmp(*v2, "PrackErrorDelayTimer", v5)) {
          return;
        }
      }
      else if (v4)
      {
        unint64_t v69 = "PrackErrorDelayTimer";
        unint64_t v70 = v2;
        uint64_t v71 = v4;
        while (*(unsigned __int8 *)v70 == *(unsigned __int8 *)v69)
        {
          unint64_t v70 = (const void **)((char *)v70 + 1);
          ++v69;
          if (!--v71) {
            goto LABEL_166;
          }
        }
        if (v6 == 11) {
          goto LABEL_117;
        }
        if (v6 != 9) {
          return;
        }
        goto LABEL_171;
      }
LABEL_166:
      unsigned int v72 = *((_DWORD *)this + 438);
      SipSession::handlePrackErrorResponse(this, v72);
      return;
    }
LABEL_143:
    uint64_t v107 = 0;
    long long v105 = 0u;
    long long v106 = 0u;
    memset(v104, 0, sizeof(v104));
    SipSession::sendInvite((uint64_t *)this, (uint64_t)"InviteTypeTTYReinvite", (ImsResult *)v104);
    long long v95 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    std::string __p = &unk_1F20B2680;
    long long v92 = (std::__shared_weak_count *)&_bambiDomain;
    int v93 = 1073741838;
    if ((uint64_t *)v104[1] == &_bambiDomain)
    {
      int v57 = v104[2];
      ImsResult::~ImsResult((ImsResult *)&__p);
      if (v57 == 1073741838)
      {
        uint64_t v58 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
        (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v58 + 8), (uint64_t)"can't send pending INVITE now. I'll try later.", 46);
        *(unsigned char *)(v58 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v58 + 17) = 0;
        std::string::operator=((std::string *)this + 72, (const std::string *)"InviteTypeTTYReinvite");
      }
    }
    else
    {
      ImsResult::~ImsResult((ImsResult *)&__p);
    }
    ImsResult::~ImsResult((ImsResult *)v104);
    return;
  }
  if (v6 != 9) {
    goto LABEL_116;
  }
LABEL_171:
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, "HoldTimer", v5)) {
      return;
    }
    goto LABEL_178;
  }
  if (!v4)
  {
LABEL_178:
    std::string __p = 0;
    long long v92 = 0;
    SipSession::clientInviteTransaction(this, (uint64_t *)&__p);
    uint64_t v76 = (char *)__p;
    if (!__p || ((*(uint64_t (**)(void *))(*(void *)__p + 144))(__p) & 1) != 0) {
      goto LABEL_187;
    }
    unint64_t v77 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v76 + 384), (void **)"InviteType");
    long long v78 = v76 + 392 == (char *)v77 ? (unsigned __int8 *)&ims::kEmptyString : (unsigned __int8 *)(v77 + 7);
    if (!std::operator==[abi:ne180100]<std::allocator<char>>(v78, "HoldInvite")) {
      goto LABEL_187;
    }
    uint64_t v79 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v79);
    char v80 = (unsigned char *)ImsOutStream::operator<<(v79, "timed out waiting for hold to complete");
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v80 + 64))(v80, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v80[17] = 0;
    SipSession::reportSetupTimeoutToIRat((std::__shared_weak_count *)this);
    std::string::basic_string[abi:ne180100]<0>(v104, "HoldResumeTimeout");
    SipSession::hangUp((std::__shared_weak_count *)this, (uint64_t)v104, (uint64_t)v90);
    long long v56 = (ImsResult *)v90;
LABEL_185:
    ImsResult::~ImsResult(v56);
    if (SHIBYTE(v104[2]) < 0) {
      operator delete((void *)v104[0]);
    }
LABEL_187:
    uint64_t v37 = v92;
    if (!v92) {
      return;
    }
    goto LABEL_188;
  }
  long long v73 = "HoldTimer";
  long long v74 = v2;
  uint64_t v75 = v4;
  while (*(unsigned __int8 *)v74 == *(unsigned __int8 *)v73)
  {
    long long v74 = (const void **)((char *)v74 + 1);
    ++v73;
    if (!--v75) {
      goto LABEL_178;
    }
  }
LABEL_116:
  if (v6 != 11) {
    return;
  }
LABEL_117:
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, "ResumeTimer", v5)) {
      return;
    }
    goto LABEL_135;
  }
  if (!v4)
  {
LABEL_135:
    std::string __p = 0;
    long long v92 = 0;
    SipSession::clientInviteTransaction(this, (uint64_t *)&__p);
    char v51 = (char *)__p;
    if (!__p || ((*(uint64_t (**)(void *))(*(void *)__p + 144))(__p) & 1) != 0) {
      goto LABEL_187;
    }
    BOOL v52 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v51 + 384), (void **)"InviteType");
    int v53 = v51 + 392 == (char *)v52 ? (unsigned __int8 *)&ims::kEmptyString : (unsigned __int8 *)(v52 + 7);
    if (!std::operator==[abi:ne180100]<std::allocator<char>>(v53, "ResumeInvite")) {
      goto LABEL_187;
    }
    uint64_t v54 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v54);
    long long v55 = (unsigned char *)ImsOutStream::operator<<(v54, "timed out waiting for resume to complete");
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v55[17] = 0;
    SipSession::reportSetupTimeoutToIRat((std::__shared_weak_count *)this);
    std::string::basic_string[abi:ne180100]<0>(v104, "HoldResumeTimeout");
    SipSession::hangUp((std::__shared_weak_count *)this, (uint64_t)v104, (uint64_t)v89);
    long long v56 = (ImsResult *)v89;
    goto LABEL_185;
  }
  uint64_t v47 = "ResumeTimer";
  while (*(unsigned __int8 *)v2 == *(unsigned __int8 *)v47)
  {
    uint64_t v2 = (const void **)((char *)v2 + 1);
    ++v47;
    if (!--v4) {
      goto LABEL_135;
    }
  }
}

void sub_1C534D7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,std::__shared_weak_count *a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v33 - 217) < 0) {
    operator delete(*(void **)(v33 - 240));
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSession::confirmed(SipSession *this)
{
  uint64_t v2 = *((void *)this + 90);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v2)
  {
    uint64_t v6 = 0;
    if (!v3) {
      return v6;
    }
    goto LABEL_9;
  }
  uint64_t v4 = *((void *)this + 90);
  size_t v5 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 144))(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v3) {
LABEL_9:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v6;
}

void sub_1C534DA48(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::rejectWithReason(SipSession *a1, std::__shared_weak_count *a2, uint64_t a3)
{
  SipSessionInterface::terminationReason(a2, a3, (BambiCallTerminationReason *)v5);
  SipSession::rejectWithReason(a1, a2, (uint64_t)v5);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
}

void sub_1C534DB00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BambiCallTerminationReason::~BambiCallTerminationReason((BambiCallTerminationReason *)va);
  _Unwind_Resume(a1);
}

void SipSession::hangUp(std::__shared_weak_count *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  SipSessionInterface::terminationReason(a1, a2, (BambiCallTerminationReason *)v5);
  SipSession::hangUp((SipSession *)a1, a3);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
}

void sub_1C534DBB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BambiCallTerminationReason::~BambiCallTerminationReason((BambiCallTerminationReason *)va);
  _Unwind_Resume(a1);
}

void SipSession::sendPendingInvite(std::string *this)
{
  if (SHIBYTE(this[72].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[72].__r_.__value_.__l.__size_) {
      return;
    }
  }
  else if (!*((unsigned char *)&this[72].__r_.__value_.__s + 23))
  {
    return;
  }
  if (SipSession::terminating((SipSession *)this)
    || (*(unsigned int (**)(std::string *))(this->__r_.__value_.__r.__words[0] + 264))(this))
  {
    uint64_t v2 = (*(uint64_t (**)(std::string *))(this->__r_.__value_.__r.__words[0] + 64))(this);
    (*(void (**)(std::string *, uint64_t))(this->__r_.__value_.__r.__words[0] + 16))(this, v2);
    uint64_t v3 = *(void **)(v2 + 8);
    uint64_t v4 = "not sending pending INVITE in terminated session";
    uint64_t v5 = 48;
LABEL_8:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v4, v5);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    return;
  }
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(&this[11].__r_.__value_.__r.__words[2], "GlareTimer"))
  {
    uint64_t v2 = (*(uint64_t (**)(std::string *))(this->__r_.__value_.__r.__words[0] + 64))(this);
    (*(void (**)(std::string *, uint64_t))(this->__r_.__value_.__r.__words[0] + 16))(this, v2);
    uint64_t v3 = *(void **)(v2 + 8);
    uint64_t v4 = "not sending pending INVITE while glare timer is active";
    uint64_t v5 = 54;
    goto LABEL_8;
  }
  memset(&__str, 0, sizeof(__str));
  if (SHIBYTE(this[72].__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, this[72].__r_.__value_.__l.__data_, this[72].__r_.__value_.__l.__size_);
    if (SHIBYTE(this[72].__r_.__value_.__r.__words[2]) < 0)
    {
      *this[72].__r_.__value_.__l.__data_ = 0;
      this[72].__r_.__value_.__l.__size_ = 0;
      goto LABEL_16;
    }
  }
  else
  {
    std::string __str = this[72];
  }
  this[72].__r_.__value_.__s.__data_[0] = 0;
  *((unsigned char *)&this[72].__r_.__value_.__s + 23) = 0;
LABEL_16:
  uint64_t v17 = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  SipSession::sendInvite((uint64_t *)this, (uint64_t)&__str, (ImsResult *)&v13);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  v8[0] = &unk_1F20B2680;
  v8[1] = &_bambiDomain;
  int v9 = 1073741838;
  if (*((uint64_t **)&v13 + 1) == &_bambiDomain)
  {
    int v6 = v14;
    ImsResult::~ImsResult((ImsResult *)v8);
    if (v6 == 1073741838)
    {
      uint64_t v7 = (*(uint64_t (**)(std::string *))(this->__r_.__value_.__r.__words[0] + 64))(this);
      (*(void (**)(std::string *, uint64_t))(this->__r_.__value_.__r.__words[0] + 16))(this, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"can't send pending INVITE now. I'll try later.", 46);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      std::string::operator=(this + 72, &__str);
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)v8);
  }
  ImsResult::~ImsResult((ImsResult *)&v13);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1C534DF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  ImsResult::~ImsResult((ImsResult *)va);
  if (*(char *)(v11 - 41) < 0) {
    operator delete(*(void **)(v11 - 64));
  }
  _Unwind_Resume(a1);
}

void SipSession::sendInvite(uint64_t *a1@<X0>, uint64_t a2@<X1>, ImsResult *a3@<X8>)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (std::__shared_weak_count *)a1[98];
  if (!v5)
  {
    uint64_t v7 = 0;
    goto LABEL_9;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v5);
  if (!v7 || !a1[97])
  {
LABEL_9:
    *(_OWORD *)long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    v13[0] = (SipStack *)&unk_1F20B2680;
    v13[1] = (SipStack *)&_bambiDomain;
    int v14 = 1073741826;
    int v9 = (ImsResult *)ImsResult::operator<<<char [36]>((uint64_t)v13, "can't send an INVITE without a call");
    long long v10 = ImsLogContainer::logResult((ImsLogContainer *)a1, v9);
    ImsResult::ImsResult(a3, (const std::string *)v10);
    ImsResult::~ImsResult((ImsResult *)v13);
    if (!v7) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (v8) {
    SipDialog::createRequestInDialog(a1[31]);
  }
  *(_OWORD *)long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  v13[0] = (SipStack *)&unk_1F20B2680;
  v13[1] = (SipStack *)&_bambiDomain;
  int v14 = 1073741825;
  uint64_t v11 = (ImsResult *)ImsResult::operator<<<char [29]>((uint64_t)v13, "sendInvite: empty inviteType");
  long long v12 = ImsLogContainer::logResult((ImsLogContainer *)a1, v11);
  ImsResult::ImsResult(a3, (const std::string *)v12);
  ImsResult::~ImsResult((ImsResult *)v13);
LABEL_10:
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1C534EBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::handlePrackErrorResponse(SipSession *this, unsigned int a2)
{
  if (a2 >= 0x12C)
  {
    int v3 = SipSession::confirmed(this);
    uint64_t v4 = *(void *)this;
    if (v3)
    {
      uint64_t v5 = (*(uint64_t (**)(SipSession *))(v4 + 64))(this);
      (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"ignoring PRACK error in confirmed session", 41);
      *(unsigned char *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v5 + 17) = 0;
    }
    else
    {
      uint64_t v6 = (*(uint64_t (**)(SipSession *))(v4 + 56))(this);
      (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"received ", 9);
      *(unsigned char *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" response to PRACK. Terminating session", 39);
      *(unsigned char *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v6 + 17) = 0;
      uint64_t v18 = 0;
      long long v16 = 0u;
      long long v17 = 0u;
      *(_OWORD *)int v14 = 0u;
      long long v15 = 0u;
      *(_OWORD *)long long v12 = 0u;
      long long v13 = 0u;
      *(_OWORD *)long long v10 = 0u;
      long long v11 = 0u;
      std::string::basic_string[abi:ne180100]<0>(__p, "NetworkError");
      SipSessionInterface::terminationReason((std::__shared_weak_count *)this, (uint64_t)__p, (BambiCallTerminationReason *)v10);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      std::string::__assign_external((std::string *)v12, "Remote end rejected PRACK", 0x19uLL);
      SipSession::hangUp(this, (uint64_t)v7);
      ImsResult::~ImsResult((ImsResult *)v7);
      if (*((void *)&v17 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
      }
      if (*((void *)&v16 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
      }
      if (SHIBYTE(v15) < 0) {
        operator delete(v14[1]);
      }
      if (SBYTE7(v13) < 0) {
        operator delete(v12[0]);
      }
      if (SHIBYTE(v11) < 0) {
        operator delete(v10[1]);
      }
    }
  }
}

void sub_1C534EF94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::refer(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, ImsResult *a4@<X8>)
{
  uint64_t v5 = *a2;
  if (*a2 == a1[31])
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    uint64_t v19 = &unk_1F20B2680;
    uint64_t v20 = &_bambiDomain;
    int v21 = 1073741825;
    int v14 = (const std::string *)ImsResult::operator<<<char [31]>((uint64_t)&v19, "can't REFER with my own dialog");
    ImsResult::ImsResult(a4, v14);
    ImsResult::~ImsResult((ImsResult *)&v19);
    return;
  }
  if (*(void *)(v5 + 2064) == 1)
  {
    uint64_t v8 = *(void *)(v5 + 2048);
    uint64_t v10 = *(void *)(v8 + 56);
    char v9 = *(std::__shared_weak_count **)(v8 + 64);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v10)
    {
      uint64_t v11 = a1[31];
      if (v11 && (uint64_t v12 = *(void *)(v11 + 216)) != 0) {
        long long v13 = *(SipUserAgent **)(v12 + 136);
      }
      else {
        long long v13 = 0;
      }
      if (*(unsigned char *)(SipUserAgent::config(v13) + 617))
      {
        uint64_t v18 = *(std::__shared_weak_count **)(a3 + 8);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v18 = *(std::__shared_weak_count **)(a3 + 8);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      SipSession::refer(a1, a4);
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      goto LABEL_21;
    }
  }
  else
  {
    char v9 = 0;
  }
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v19 = &unk_1F20B2680;
  uint64_t v20 = &_bambiDomain;
  int v21 = 1073741825;
  uint64_t v15 = ImsResult::operator<<<char [27]>((uint64_t)&v19, "can't REFER a dialog with ");
  uint64_t v16 = ImsResult::operator<<<unsigned long>(v15);
  long long v17 = (const std::string *)ImsResult::operator<<<char [7]>(v16, " forks");
  ImsResult::ImsResult(a4, v17);
  ImsResult::~ImsResult((ImsResult *)&v19);
LABEL_21:
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C534F21C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsResult::operator<<<unsigned long>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    operator new();
  }
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  return a1;
}

void sub_1C534F2DC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [7]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C534F384(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipSession::refer(uint64_t *a1@<X0>, ImsResult *a2@<X8>)
{
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 264))(a1))
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v8.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v8.__r_.__value_.__r.__words[2]) = 1073741826;
    uint64_t v4 = (const std::string *)ImsResult::operator<<<char [41]>((uint64_t)&v8, "can't send REFER in a terminated session");
    ImsResult::ImsResult(a2, v4);
  }
  else if (SipSession::confirmed((SipSession *)a1))
  {
    SipSession::clientInviteTransaction((SipSession *)a1, (uint64_t *)&v8);
    if (v8.__r_.__value_.__r.__words[0])
    {
      BOOL v5 = 1;
    }
    else
    {
      SipSession::serverInviteTransaction((SipSession *)a1, (uint64_t *)v7);
      BOOL v5 = v7[0] != 0;
      if (v7[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7[1]);
      }
    }
    if (v8.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v8.__r_.__value_.__l.__size_);
    }
    if (!v5) {
      SipDialog::createRequestInDialog(a1[31]);
    }
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v8.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v8.__r_.__value_.__r.__words[2]) = 1073741826;
    ImsResult::operator<<<char [61]>((uint64_t)&v8);
    ImsResult::ImsResult(a2, &v8);
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v8.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v8.__r_.__value_.__r.__words[2]) = 1073741826;
    uint64_t v6 = (const std::string *)ImsResult::operator<<<char [42]>((uint64_t)&v8, "can't send REFER in an unconfirmed dialog");
    ImsResult::ImsResult(a2, v6);
  }
  ImsResult::~ImsResult((ImsResult *)&v8);
}

void sub_1C534FC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  if (a60 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  SipUri::~SipUri((SipUri *)&a61);
  _Unwind_Resume(a1);
}

void SipSession::refer(uint64_t *a1@<X0>, uint64_t *a2@<X3>, ImsResult *a3@<X8>)
{
  BOOL v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v12 = *a2;
  long long v13 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, (char *)&str_23_0);
  std::string::basic_string[abi:ne180100]<0>(&v8, (char *)&str_23_0);
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_23_0);
  SipSession::refer(a1, a3);
  if (v7 < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v11 < 0) {
    operator delete(v10);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C534FE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::createReplacesHeaderAsString(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4)
{
  if (a1)
  {
    uint64_t v7 = *(void *)(a1 + 216);
    if (v7) {
      uint64_t v7 = *(void *)(v7 + 136);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  std::string v8 = SipMessageEncodingMap::headerPrototype<SipReplacesHeader>((void *)(v7 + 288));
  if (v8) {
    uint64_t v9 = (*(uint64_t (**)(void *))(*(void *)v8 + 32))(v8);
  }
  else {
    uint64_t v9 = 0;
  }
  std::string::operator=((std::string *)(v9 + 104), a2);
  *(void *)&v12[0] = "to-tag";
  long long v10 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v9 + 72), (void **)"to-tag", (uint64_t)&std::piecewise_construct, (long long **)v12);
  std::string::operator=((std::string *)(v10 + 7), a3);
  *(void *)&v12[0] = "from-tag";
  char v11 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v9 + 72), (void **)"from-tag", (uint64_t)&std::piecewise_construct, (long long **)v12);
  std::string::operator=((std::string *)(v11 + 7), a4);
  memset(__p, 0, sizeof(__p));
  (*(void (**)(uint64_t, void **))(*(void *)v9 + 40))(v9, __p);
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v12);
}

void sub_1C5350138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [42]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C53501F0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [61]>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    operator new();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"can't send REFER while there is a current INVITE transaction", 60);
  *(unsigned char *)(v2 + 17) = 0;
  return a1;
}

void sub_1C5350284(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void *SipMessage::addHeader<SipReferToHeader>(SipMessage *a1)
{
  uint64_t v2 = (const void *)SipMessageEncodingMap::headerPrototypeWithName(*((void **)a1 + 10), (uint64_t)"Refer-To");
  if (!v2) {
    return 0;
  }
  if (!v3) {
    return 0;
  }
  uint64_t v4 = (SipHeader *)(*(uint64_t (**)(void *))(*(void *)v3 + 32))(v3);
  if (!v4) {
    return 0;
  }
  size_t v5 = SipMessage::addHeader(a1, v4, 0);
  if (!v5) {
    return 0;
  }
}

void SipSession::lazuliRefer(uint64_t *a1@<X0>, uint64_t a2@<X2>, ImsResult *a3@<X8>)
{
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 264))(a1))
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v11.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v11.__r_.__value_.__r.__words[2]) = 1073741826;
    uint64_t v6 = (const std::string *)ImsResult::operator<<<char [41]>((uint64_t)&v11, "can't send REFER in a terminated session");
    ImsResult::ImsResult(a3, v6);
  }
  else
  {
    SipSession::clientInviteTransaction((SipSession *)a1, (uint64_t *)&v11);
    if (v11.__r_.__value_.__r.__words[0])
    {
      BOOL v7 = 1;
    }
    else
    {
      SipSession::serverInviteTransaction((SipSession *)a1, (uint64_t *)&__p);
      BOOL v7 = __p != 0;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
    if (v11.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11.__r_.__value_.__l.__size_);
    }
    if (!v7)
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Refer ", 6);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" to group ", 10);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(void))(*(void *)(a1[31] + 232) + 40))();
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      SipDialog::createRequestInDialog(a1[31]);
    }
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v11.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v11.__r_.__value_.__r.__words[2]) = 1073741826;
    ImsResult::operator<<<char [61]>((uint64_t)&v11);
    ImsResult::ImsResult(a3, &v11);
  }
  ImsResult::~ImsResult((ImsResult *)&v11);
}

void sub_1C5350E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,uint64_t a32)
{
  *(void *)(v35 - 120) = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::weak_ptr<LazuliGroupParticipant>>,void *>>>::operator()[abi:ne180100](v34, v33);
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a10, a16);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  SipUri::~SipUri((SipUri *)&a31);
  _Unwind_Resume(a1);
}

void SipSession::makeLocalResumeSdp(void **a1, char a2)
{
  SDPModel::resumeAllStreams(*a1, a2);
  uint64_t v3 = (uint64_t)*a1;
  uint64_t v4 = (SDPMedia *)(*a1)[52];
  size_t v5 = *(SDPMedia **)(v3 + 424);
  while (v4 != v5)
  {
    SDPMedia::removePreconditions(v4);
    uint64_t v4 = (SDPMedia *)((char *)v4 + 200);
  }
}

void SipSession::addBodyToInvite(ImsResult *a1, SipSession *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (*(uint64_t (**)(SipSession *))(*(void *)a2 + 64))(a2);
  (*(void (**)(SipSession *, uint64_t))(*(void *)a2 + 16))(a2, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"SipSession::addBodyToInvite type=", 33);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 32))(v7, a4);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  size_t v9 = *(void *)(a4 + 8);
  if ((v8 & 0x80u) == 0) {
    uint64_t v10 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v10 = *(void *)(a4 + 8);
  }
  if (v10 != 13)
  {
    if (v10 != 19) {
      goto LABEL_24;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, "InitialInviteLazuli", v9)) {
        goto LABEL_24;
      }
    }
    else if (*(unsigned char *)(a4 + 23))
    {
      std::string v11 = "InitialInviteLazuli";
      long long v12 = (unsigned __int8 *)a4;
      while (*v12 == *(unsigned __int8 *)v11)
      {
        ++v12;
        ++v11;
        if (!--v8) {
          goto LABEL_19;
        }
      }
      goto LABEL_24;
    }
LABEL_19:
    std::string __p = 0;
    uint64_t v54 = 0;
    uint64_t v15 = *((void *)a2 + 143);
    if (v15) {
      SDPSession::localLazuliSdp(*(SDPSession **)(v15 + 120), &__p);
    }
    uint64_t v16 = (*(uint64_t (**)(SipSession *))(*(void *)a2 + 64))(a2);
    (*(void (**)(SipSession *, uint64_t))(*(void *)a2 + 16))(a2, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"SipSession::addBodyToInvite local=", 34);
    *(unsigned char *)(v16 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    if (__p)
    {
      std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> const&,void>((uint64_t *)&__p, &v59);
      uint64_t v18 = v59;
      long long v17 = v60;
      goto LABEL_43;
    }
LABEL_39:
    uint64_t v18 = 0;
    long long v17 = 0;
LABEL_43:
    if (v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v54);
    }
LABEL_45:
    if (!v18)
    {
      long long v56 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      std::string __p = &unk_1F20B2680;
      uint64_t v54 = (std::__shared_weak_count *)&_bambiDomain;
      int v55 = 1073741826;
      uint64_t v37 = (const std::string *)ImsResult::operator<<<char [42]>((uint64_t)&__p, "no local SDP when trying to create INVITE");
      ImsResult::ImsResult(a1, v37);
      ImsResult::~ImsResult((ImsResult *)&__p);
      goto LABEL_94;
    }
    uint64_t v32 = *(unsigned __int8 *)(a4 + 23);
    size_t v33 = *(void *)(a4 + 8);
    if ((v32 & 0x80u) == 0) {
      uint64_t v34 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      uint64_t v34 = *(void *)(a4 + 8);
    }
    if (v34 != 14)
    {
      if (v34 != 12)
      {
        if (v34 != 10) {
          goto LABEL_93;
        }
        if ((v32 & 0x80) != 0)
        {
          if (memcmp(*(const void **)a4, "HoldInvite", v33)) {
            goto LABEL_93;
          }
        }
        else if (*(unsigned char *)(a4 + 23))
        {
          uint64_t v35 = "HoldInvite";
          uint64_t v36 = (unsigned __int8 *)a4;
          while (*v36 == *(unsigned __int8 *)v35)
          {
            ++v36;
            ++v35;
            if (!--v32) {
              goto LABEL_72;
            }
          }
          goto LABEL_93;
        }
LABEL_72:
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SDPModel::hold(v18);
        uint64_t v42 = (SDPMedia *)v18[52];
        int v43 = (SDPMedia *)v18[53];
        while (v42 != v43)
        {
          SDPMedia::removePreconditions(v42);
          uint64_t v42 = (SDPMedia *)((char *)v42 + 200);
        }
        uint64_t v44 = v17;
        if (!v17) {
          goto LABEL_93;
        }
LABEL_92:
        std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        goto LABEL_93;
      }
      if ((v32 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a4, "ResumeInvite", v33)) {
          goto LABEL_93;
        }
      }
      else if (*(unsigned char *)(a4 + 23))
      {
        uint64_t v40 = "ResumeInvite";
        uint64_t v41 = (unsigned __int8 *)a4;
        while (*v41 == *(unsigned __int8 *)v40)
        {
          ++v41;
          ++v40;
          if (!--v32) {
            goto LABEL_85;
          }
        }
        goto LABEL_93;
      }
LABEL_85:
      char v51 = v18;
      BOOL v52 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v45 = *((void *)a2 + 31);
      if (v45 && (uint64_t v46 = *(void *)(v45 + 216)) != 0) {
        uint64_t v47 = *(SipUserAgent **)(v46 + 136);
      }
      else {
        uint64_t v47 = 0;
      }
      uint64_t v48 = SipUserAgent::config(v47);
      SipSession::makeLocalResumeSdp(&v51, *(unsigned char *)(v48 + 814));
      uint64_t v44 = v52;
      if (!v52) {
        goto LABEL_93;
      }
      goto LABEL_92;
    }
    if ((v32 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, "SendRecvInvite", v33)) {
        goto LABEL_93;
      }
    }
    else if (*(unsigned char *)(a4 + 23))
    {
      uint64_t v38 = "SendRecvInvite";
      uint64_t v39 = (unsigned __int8 *)a4;
      while (*v39 == *(unsigned __int8 *)v38)
      {
        ++v39;
        ++v38;
        if (!--v32) {
          goto LABEL_80;
        }
      }
LABEL_93:
      operator new();
    }
LABEL_80:
    char v49 = v18;
    uint64_t v50 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipSession::makeLocalResumeSdp(&v49, 1);
    uint64_t v44 = v50;
    if (!v50) {
      goto LABEL_93;
    }
    goto LABEL_92;
  }
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a4, "InitialInvite", v9)) {
      goto LABEL_24;
    }
LABEL_35:
    std::string __p = 0;
    uint64_t v54 = 0;
    SipSession::localTemplateSdp(a2, (uint64_t *)&__p);
    if (__p)
    {
      std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> const&,void>((uint64_t *)&__p, &v59);
      uint64_t v18 = v59;
      long long v17 = v60;
      uint64_t v29 = *((void *)a2 + 31);
      if (v29 && (uint64_t v30 = *(void *)(v29 + 216)) != 0) {
        uint64_t v31 = *(SipUserAgent **)(v30 + 136);
      }
      else {
        uint64_t v31 = 0;
      }
      if (*(unsigned char *)(SipUserAgent::config(v31) + 813)) {
        SDPModel::setDirectionForSessionAndMedia(v18, 4);
      }
      goto LABEL_43;
    }
    goto LABEL_39;
  }
  if (!*(unsigned char *)(a4 + 23)) {
    goto LABEL_35;
  }
  long long v13 = "InitialInvite";
  long long v14 = (unsigned __int8 *)a4;
  while (*v14 == *(unsigned __int8 *)v13)
  {
    ++v14;
    ++v13;
    if (!--v8) {
      goto LABEL_35;
    }
  }
LABEL_24:
  uint64_t v19 = *((void *)a2 + 31);
  if (*(void *)(v19 + 2064) != 1)
  {
    long long v22 = 0;
    goto LABEL_31;
  }
  uint64_t v20 = *(void *)(v19 + 2048);
  int v21 = *(SipDialogFork **)(v20 + 56);
  long long v22 = *(std::__shared_weak_count **)(v20 + 64);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v21)
  {
LABEL_31:
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    std::string __p = &unk_1F20B2680;
    uint64_t v54 = (std::__shared_weak_count *)&_bambiDomain;
    int v55 = 1073741826;
    uint64_t v24 = ImsResult::operator<<<char [14]>((uint64_t)&__p, "can't send a ");
    uint64_t v25 = ImsResult::operator<<<std::string>(v24, a4);
    uint64_t v26 = ImsResult::operator<<<char [17]>(v25, " when there are ");
    int v59 = *(void **)(*((void *)a2 + 31) + 2064);
    uint64_t v27 = ImsResult::operator<<<unsigned long>(v26);
    uint64_t v28 = (const std::string *)ImsResult::operator<<<char [6]>(v27, "forks");
    ImsResult::ImsResult(a1, v28);
    ImsResult::~ImsResult((ImsResult *)&__p);
    uint64_t v18 = 0;
    long long v17 = 0;
    char v23 = 1;
    if (!v22) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  SipDialogFork::createSdpOffer(v21, "INVITE", (unsigned __int8 *)a4, &__p);
  char v23 = 0;
  uint64_t v18 = __p;
  long long v17 = v54;
  if (v22) {
LABEL_32:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
LABEL_33:
  if ((v23 & 1) == 0) {
    goto LABEL_45;
  }
LABEL_94:
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
}

void sub_1C5351998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::localTemplateSdp(SipSession *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v4 && (size_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *((void *)this + 97);
    if (v7)
    {
      SDPSession::localTemplateSdp(*(SDPSession **)(v7 + 200), (*(_DWORD *)(v7 + 448) & 0xFFFFFFFE) == 2, a2);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1C5351B70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [6]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5351C08(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipSession::addLocationToMessage(SipSession *this, SipMessage *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v3)
  {
    size_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)this + 97);
      if (v7)
      {
        uint64_t v8 = *(void *)(v7 + 520);
        if (!v8 || !*(unsigned char *)(v8 + 4696)) {
          operator new();
        }
        uint64_t v9 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
        (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Skipping Geolocation for suspicious call SIP message ", 53);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(std::string *__return_ptr, SipMessage *))(*(void *)a2 + 48))(&v11, a2);
        LoggableString::LoggableString(&__p, &v11);
        (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 40))(v9, &__p);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v9 + 17) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v11.__r_.__value_.__l.__data_);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C5352A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  ims::LocationInfo::~LocationInfo(&a16);
  std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  _Unwind_Resume(a1);
}

void *SipMessage::addHeader<SipReplacesHeader>(SipMessage *a1)
{
  uint64_t v2 = SipMessageEncodingMap::headerPrototype<SipReplacesHeader>(*((void **)a1 + 10));
  if (!v2) {
    return 0;
  }
  uint64_t v3 = (SipHeader *)(*(uint64_t (**)(void *))(*(void *)v2 + 32))(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = SipMessage::addHeader(a1, v3, 0);
  if (!v4) {
    return 0;
  }
}

void SipSession::sendInvite(uint64_t a1, SipSessionInterface *this, SipMessage *a3, const std::string *a4)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  SipSessionInterface::stack((std::__shared_weak_count *)this, v104);
  if (*(void *)v104)
  {
    SipSessionInterface::stack((std::__shared_weak_count *)this, &v126);
    BOOL v8 = *(unsigned char *)(v126.__r_.__value_.__r.__words[0] + 2681) != 0;
    if (v126.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v126.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  if (*(void *)&v104[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v104[8]);
  }
  if ((*(unsigned int (**)(SipSessionInterface *))(*(void *)this + 264))(this))
  {
    memset(&v104[24], 0, 48);
    *(void *)unint64_t v104 = &unk_1F20B2680;
    *(void *)&v104[8] = &_bambiDomain;
    *(_DWORD *)&v104[16] = 1073741826;
    uint64_t v9 = (ImsResult *)ImsResult::operator<<<char [45]>((uint64_t)v104, "can't send an INVITE in a terminated session");
    uint64_t v10 = ImsLogContainer::logResult(this, v9);
    ImsResult::ImsResult((ImsResult *)a1, (const std::string *)v10);
LABEL_29:
    ImsResult::~ImsResult((ImsResult *)v104);
    return;
  }
  SipSession::clientInviteTransaction(this, (uint64_t *)v104);
  if (*(void *)v104)
  {
    BOOL v11 = 1;
  }
  else
  {
    SipSession::serverInviteTransaction(this, (uint64_t *)&v126);
    BOOL v11 = v126.__r_.__value_.__r.__words[0] != 0;
    if (v126.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v126.__r_.__value_.__l.__size_);
    }
  }
  if (*(void *)&v104[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v104[8]);
  }
  if (v11)
  {
    memset(&v104[24], 0, 48);
    *(void *)unint64_t v104 = &unk_1F20B2680;
    *(void *)&v104[8] = &_bambiDomain;
    *(_DWORD *)&v104[16] = 1073741838;
    long long v12 = (ImsResult *)ImsResult::operator<<<char [65]>((uint64_t)v104, "can't send an INVITE while there is a current INVITE transaction");
    long long v13 = ImsLogContainer::logResult(this, v12);
    ImsResult::ImsResult((ImsResult *)a1, (const std::string *)v13);
    goto LABEL_29;
  }
  long long v14 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(void *)a3 + 112))(a3);
  uint64_t v15 = v14[23];
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v14[23];
  }
  else {
    uint64_t v16 = *((void *)v14 + 1);
  }
  if (v16 != 6) {
    goto LABEL_28;
  }
  if ((v15 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v14, "INVITE", *((void *)v14 + 1))) {
      goto LABEL_31;
    }
LABEL_28:
    memset(&v104[24], 0, 48);
    *(void *)unint64_t v104 = &unk_1F20B2680;
    *(void *)&v104[8] = &_bambiDomain;
    *(_DWORD *)&v104[16] = 1073741825;
    uint64_t v18 = ImsResult::operator<<<char [31]>((uint64_t)v104, "sendInvite called with method ");
    uint64_t v19 = (*(uint64_t (**)(SipMessage *))(*(void *)a3 + 112))(a3);
    uint64_t v20 = (ImsResult *)ImsResult::operator<<<std::string>(v18, v19);
    int v21 = ImsLogContainer::logResult(this, v20);
    ImsResult::ImsResult((ImsResult *)a1, (const std::string *)v21);
    goto LABEL_29;
  }
  if (v14[23])
  {
    long long v17 = "INVITE";
    while (*v14 == *(unsigned __int8 *)v17)
    {
      ++v14;
      ++v17;
      if (!--v15) {
        goto LABEL_31;
      }
    }
    goto LABEL_28;
  }
LABEL_31:
  uint64_t v22 = *((void *)this + 31);
  if (*(void *)(v22 + 2064) != 1)
  {
    uint64_t v25 = 0;
    uint64_t v24 = 0;
LABEL_42:
    int v96 = 1;
    goto LABEL_43;
  }
  uint64_t v23 = *(void *)(v22 + 2048);
  uint64_t v24 = *(void *)(v23 + 56);
  uint64_t v25 = *(std::__shared_weak_count **)(v23 + 64);
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v24) {
    goto LABEL_42;
  }
  uint64_t v26 = *(SipOfferAnswer **)(v24 + 656);
  uint64_t v27 = *(std::__shared_weak_count **)(v24 + 664);
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v28 = SipOfferAnswer::remoteAnswerPending(v26);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (!v28)
  {
    uint64_t v35 = *(void *)(v24 + 656);
    uint64_t v36 = *(std::__shared_weak_count **)(v24 + 664);
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v37 = SipOfferAnswer::localAnswerPending(*(SipOfferAnswer **)(*(void *)(v35 + 152) + 16), *(std::__shared_weak_count **)(*(void *)(v35 + 152) + 24));
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
    if (v37)
    {
      memset(&v104[24], 0, 48);
      *(void *)unint64_t v104 = &unk_1F20B2680;
      *(void *)&v104[8] = &_bambiDomain;
      *(_DWORD *)&v104[16] = 1073741838;
      uint64_t v38 = (ImsResult *)ImsResult::operator<<<char [51]>((uint64_t)v104, "Can't send INVITE with offer: local answer pending");
      uint64_t v39 = ImsLogContainer::logResult(this, v38);
      ImsResult::ImsResult((ImsResult *)a1, (const std::string *)v39);
      goto LABEL_59;
    }
    int v96 = 0;
LABEL_43:
    if (SipSession::confirmed(this)) {
      goto LABEL_126;
    }
    uint64_t v31 = *((void *)this + 31);
    if (v31 && (uint64_t v32 = *(void *)(v31 + 216)) != 0) {
      size_t v33 = *(SipUserAgent **)(v32 + 136);
    }
    else {
      size_t v33 = 0;
    }
    long long v95 = v25;
    if (*(unsigned char *)(SipUserAgent::config(v33) + 546))
    {
      if (v8)
      {
        if (*(unsigned char *)(*((void *)this + 31) + 1801)) {
          unsigned int v34 = 2048;
        }
        else {
          unsigned int v34 = 0x20000;
        }
      }
      else
      {
        unsigned int v34 = 1;
      }
      uint64_t v40 = SipMessage::header<SipAcceptContactHeader>(a3, 1);
      uint64_t v41 = *((void *)this + 31);
      if (v41 && (uint64_t v42 = *(void *)(v41 + 216)) != 0) {
        int v43 = *(SipUserAgent **)(v42 + 136);
      }
      else {
        int v43 = 0;
      }
      uint64_t v44 = SipUserAgent::config(v43);
      SipAcceptContactHeader::addValueWithServiceMaskAndParams(v40, v34, (const SipParameterMap *)(v44 + 552));
    }
    uint64_t v45 = *((void *)this + 31);
    if (v45 && (uint64_t v46 = *(void *)(v45 + 216)) != 0) {
      uint64_t v47 = *(SipUserAgent **)(v46 + 136);
    }
    else {
      uint64_t v47 = 0;
    }
    if (*(unsigned char *)(SipUserAgent::config(v47) + 548))
    {
      memset(&v126, 0, sizeof(v126));
      if (BambiServices::kFeatureTagMmtel[23] < 0) {
        std::string::__init_copy_ctor_external(&v126, *(const std::string::value_type **)BambiServices::kFeatureTagMmtel, *(std::string::size_type *)&BambiServices::kFeatureTagMmtel[8]);
      }
      else {
        std::string v126 = *(std::string *)BambiServices::kFeatureTagMmtel;
      }
      if (v8)
      {
        uint64_t v125 = 0;
        long long v123 = 0u;
        long long v124 = 0u;
        long long v121 = 0u;
        long long v122 = 0u;
        long long v119 = 0u;
        long long v120 = 0u;
        long long v117 = 0u;
        long long v118 = 0u;
        long long v115 = 0u;
        long long v116 = 0u;
        long long v113 = 0u;
        long long v114 = 0u;
        long long v111 = 0u;
        long long v112 = 0u;
        long long v109 = 0u;
        long long v110 = 0u;
        long long v107 = 0u;
        long long v108 = 0u;
        long long v105 = 0u;
        long long v106 = 0u;
        memset(v104, 0, sizeof(v104));
        SipUri::SipUri((SipUri *)v104);
        SipSessionInterface::stack((std::__shared_weak_count *)this, &v101);
        uint64_t v48 = (ImsPrefs *)SipStack::prefs(v101);
        LazuliConferenceFactoryKey = (void **)ImsPrefs::getLazuliConferenceFactoryKey(v48);
        ImsPrefs::stringValue(v48, LazuliConferenceFactoryKey);
        SipUri::fromString((uint64_t)v104, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v102) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v102);
        }
        if (SipUri::matches((SipUri *)(*((void *)this + 31) + 232), (const SipUri *)v104))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.session.group");
        }
        else if (*(unsigned char *)(*((void *)this + 31) + 1801))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.largemsg");
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "urn:urn-7:3gpp-service.ims.icsi.oma.cpm.msg");
        }
        if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v126.__r_.__value_.__l.__data_);
        }
        std::string v126 = __p;
        SipUri::~SipUri((SipUri *)v104);
      }
      SipMessage::addHeader(a3, (uint64_t)"P-Preferred-Service", (uint64_t)&v126, 0);
      if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v126.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v50 = *((void *)this + 31);
    if (v50 && (uint64_t v51 = *(void *)(v50 + 216)) != 0) {
      BOOL v52 = *(SipUserAgent **)(v51 + 136);
    }
    else {
      BOOL v52 = 0;
    }
    if (*(unsigned char *)(SipUserAgent::config(v52) + 608))
    {
      int v53 = SipMessage::header<SipPEarlyMediaHeader>(a3);
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)v53 + 8, (void **)"supported", (uint64_t)"supported");
    }
    uint64_t v54 = (std::__shared_weak_count *)*((void *)this + 98);
    if (v54)
    {
      int v55 = std::__shared_weak_count::lock(v54);
      if (v55)
      {
        long long v56 = (BambiCall *)*((void *)this + 97);
        if (v56)
        {
          if (BambiCall::isWPSCall(v56))
          {
            SipSessionInterface::stack((std::__shared_weak_count *)this, v104);
            long long v57 = (ImsPrefs *)SipStack::prefs(*(SipStack **)v104);
            WaitForRingingTimerWPSSecondsKey = (void **)ImsPrefs::getWaitForRingingTimerWPSSecondsKey(v57);
            int v59 = ImsPrefs::intValue(v57, WaitForRingingTimerWPSSecondsKey);
            if (*(void *)&v104[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v104[8]);
            }
            if (v59)
            {
LABEL_110:
              uint64_t v64 = *((void *)this + 23);
              int v63 = (std::__shared_weak_count *)*((void *)this + 24);
              if (v63)
              {
                atomic_fetch_add_explicit(&v63->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                atomic_fetch_add_explicit(&v63->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                if (v59)
                {
                  atomic_fetch_add_explicit(&v63->__shared_weak_owners_, 1uLL, memory_order_relaxed);
LABEL_114:
                  unint64_t v128 = 0;
                  uint64_t v65 = operator new(0x20uLL);
                  *uint64_t v65 = &unk_1F20C5268;
                  v65[1] = this;
                  v65[2] = v64;
                  v65[3] = v63;
                  unint64_t v128 = v65;
                  SipTimerContainer::startTimer((int8x8_t *)this + 34, (uint64_t)"WaitForRingingTimer");
                  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v127);
                }
              }
              else if (v59)
              {
                goto LABEL_114;
              }
              uint64_t v66 = *((void *)this + 31);
              if (v66)
              {
                uint64_t v67 = *(void *)(v66 + 216);
                uint64_t v25 = v95;
                if (v67) {
                  int v68 = *(SipUserAgent **)(v67 + 136);
                }
                else {
                  int v68 = 0;
                }
              }
              else
              {
                int v68 = 0;
                uint64_t v25 = v95;
              }
              if (!*(unsigned char *)(SipUserAgent::config(v68) + 35)) {
                SipSession::startLocalQosTimerMO((int8x8_t *)this);
              }
              if (v63)
              {
                std::__shared_weak_count::__release_weak(v63);
                std::__shared_weak_count::__release_weak(v63);
              }
              if (v55) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v55);
              }
LABEL_126:
              if (!SipSession::confirmed(this) || *((unsigned char *)this + 865))
              {
                uint64_t v69 = *((void *)this + 31);
                if (v69 && (uint64_t v70 = *(void *)(v69 + 216)) != 0) {
                  uint64_t v71 = *(void *)(v70 + 136);
                }
                else {
                  uint64_t v71 = 0;
                }
                unsigned int v72 = *(std::__shared_weak_count **)(v71 + 16);
                if (v72)
                {
                  unsigned int v72 = std::__shared_weak_count::lock(v72);
                  long long v73 = v72;
                  if (v72) {
                    unsigned int v72 = *(std::__shared_weak_count **)(v71 + 8);
                  }
                }
                else
                {
                  long long v73 = 0;
                }
                long long v74 = (ImsPrefs *)SipStack::prefs((SipStack *)v72);
                AddPreconditionToSupportedHeaderIfEnabledKey = (void **)ImsPrefs::getAddPreconditionToSupportedHeaderIfEnabledKey(v74);
                if (ImsPrefs::BOOLValue(v74, AddPreconditionToSupportedHeaderIfEnabledKey)) {
                  int v76 = SipSession::confirmed(this);
                }
                else {
                  int v76 = 0;
                }
                if (v73) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v73);
                }
                if (v96)
                {
                  std::string::basic_string[abi:ne180100]<0>(v104, (char *)&str_23_0);
                }
                else if (*(char *)(v24 + 175) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v104, *(const std::string::value_type **)(v24 + 152), *(void *)(v24 + 160));
                }
                else
                {
                  *(_OWORD *)unint64_t v104 = *(_OWORD *)(v24 + 152);
                  *(void *)&v104[16] = *(void *)(v24 + 168);
                }
                SipPreconditions::addPreconditionsToOutgoingRequest((uint64_t)this + 1432, (uint64_t)v104, (uint64_t)a3, v76);
                if ((v104[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v104);
                }
              }
              *(_OWORD *)&v126.__r_.__value_.__l.__data_ = 0uLL;
              if (v96)
              {
                std::string::basic_string[abi:ne180100]<0>(v104, (char *)&str_23_0);
              }
              else if (*(char *)(v24 + 175) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v104, *(const std::string::value_type **)(v24 + 152), *(void *)(v24 + 160));
              }
              else
              {
                *(_OWORD *)unint64_t v104 = *(_OWORD *)(v24 + 152);
                *(void *)&v104[16] = *(void *)(v24 + 168);
              }
              SipSession::sendRequest(a3, (uint64_t)this, (uint64_t)v104, &v126);
              if ((v104[23] & 0x80000000) != 0) {
                operator delete(*(void **)v104);
              }
              std::string::size_type v77 = v126.__r_.__value_.__r.__words[0];
              if (!v126.__r_.__value_.__r.__words[0])
              {
                memset(&v104[24], 0, 48);
                *(void *)unint64_t v104 = &unk_1F20B2680;
                *(void *)&v104[8] = &_bambiDomain;
                *(_DWORD *)&v104[16] = 0x40000000;
                uint64_t v84 = (ImsResult *)ImsResult::operator<<<char [31]>((uint64_t)v104, "sendInvite: sendRequest failed");
                char v85 = ImsLogContainer::logResult(this, v84);
                ImsResult::ImsResult((ImsResult *)a1, (const std::string *)v85);
                ImsResult::~ImsResult((ImsResult *)v104);
LABEL_193:
                if (v126.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v126.__r_.__value_.__l.__size_);
                }
                goto LABEL_195;
              }
              *(void *)unint64_t v104 = "InviteType";
              long long v78 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v126.__r_.__value_.__r.__words[0] + 384), (void **)"InviteType", (uint64_t)&std::piecewise_construct, (long long **)v104);
              std::string::operator=((std::string *)(v78 + 7), a4);
              if (v96)
              {
                if ((SipSession::confirmed(this) & 1) != 0
                  || (uint64_t v79 = (std::__shared_weak_count *)*((void *)this + 98)) == 0
                  || (char v80 = std::__shared_weak_count::lock(v79)) == 0)
                {
LABEL_176:
                  uint64_t v87 = (*(uint64_t (**)(SipSessionInterface *))(*(void *)this + 64))(this);
                  (*(void (**)(SipSessionInterface *, uint64_t))(*(void *)this + 16))(this, v87);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v87 + 8), (uint64_t)"sendInvite[", 11);
                  *(unsigned char *)(v87 + 17) = 0;
                  (*(void (**)(uint64_t, const std::string *))(*(void *)v87 + 32))(v87, a4);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v87 + 8), (uint64_t)"], Fork: ", 9);
                  *(unsigned char *)(v87 + 17) = 0;
                  if (v96) {
                    char v88 = "no";
                  }
                  else {
                    char v88 = "yes";
                  }
                  if (v96) {
                    uint64_t v89 = 2;
                  }
                  else {
                    uint64_t v89 = 3;
                  }
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v87 + 8), (uint64_t)v88, v89);
                  *(unsigned char *)(v87 + 17) = 0;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v87 + 8), (uint64_t)" Confirmed: ", 12);
                  *(unsigned char *)(v87 + 17) = 0;
                  int v90 = SipSession::confirmed(this);
                  if (v90) {
                    char v91 = "yes";
                  }
                  else {
                    char v91 = "no";
                  }
                  if (v90) {
                    uint64_t v92 = 3;
                  }
                  else {
                    uint64_t v92 = 2;
                  }
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v87 + 8), (uint64_t)v91, v92);
                  *(unsigned char *)(v87 + 17) = 0;
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v87 + 64))(v87, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  *(unsigned char *)(v87 + 17) = 0;
                  uint64_t v93 = *((void *)this + 90);
                  char v94 = (std::__shared_weak_count *)*((void *)this + 91);
                  if (v94)
                  {
                    atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
                    std::__shared_weak_count::__release_shared[abi:ne180100](v94);
                  }
                  if (!v93) {
                    SipTypedStateMachine<SipSessionState>::transitionToState((void *)this + 83, 1);
                  }
                  *(_OWORD *)(a1 + 24) = 0u;
                  *(_OWORD *)(a1 + 40) = 0u;
                  *(_OWORD *)(a1 + 56) = 0u;
                  *(void *)a1 = &unk_1F20B2680;
                  *(void *)(a1 + 8) = &_bambiDomain;
                  *(_DWORD *)(a1 + 16) = 0;
                  goto LABEL_193;
                }
                uint64_t v81 = v80;
                int v82 = (BambiCall *)*((void *)this + 97);
                if (v82 && BambiCall::shouldFakeLocalQOS(v82))
                {
                  LoggableString::LoggableString((LoggableString *)v104, "fakeLocalQoSForMobileOriginated");
                  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&__p, (void *)this + 23);
                  if (__p.__r_.__value_.__r.__words[0]) {
                    std::string::size_type v83 = __p.__r_.__value_.__r.__words[0] + 104;
                  }
                  else {
                    std::string::size_type v83 = 0;
                  }
                  std::string::size_type v98 = v83;
                  int64_t size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
                  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
                  v97[0] = MEMORY[0x1E4F143A8];
                  v97[1] = 0x40000000;
                  v97[2] = ___ZN10SipSession10sendInviteEP10SipRequestRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke;
                  v97[3] = &__block_descriptor_tmp_7;
                  v97[4] = this;
                  SipLockable::performBlock((uint64_t)this + 104, (uint64_t)v104, (uint64_t *)&v98, (uint64_t)v97);
                  if (size) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](size);
                  }
                  if (__p.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                  }
                  if ((v104[23] & 0x80000000) != 0) {
                    operator delete(*(void **)v104);
                  }
                }
              }
              else
              {
                uint64_t v86 = *(SipOfferAnswer **)(v24 + 656);
                uint64_t v81 = *(std::__shared_weak_count **)(v24 + 664);
                if (v81) {
                  atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                SipOfferAnswer::updateWithOutgoingMessage(v86, (uint64_t)a3, (std::string *)(v77 + 328), (uint64_t)v100);
                ImsResult::~ImsResult((ImsResult *)v100);
                if (!v81) {
                  goto LABEL_176;
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v81);
              goto LABEL_176;
            }
          }
        }
      }
    }
    else
    {
      int v55 = 0;
    }
    uint64_t v60 = *((void *)this + 31);
    if (v60 && (uint64_t v61 = *(void *)(v60 + 216)) != 0) {
      uint64_t v62 = *(SipUserAgent **)(v61 + 136);
    }
    else {
      uint64_t v62 = 0;
    }
    int v59 = *(_DWORD *)(SipUserAgent::config(v62) + 8);
    goto LABEL_110;
  }
  memset(&v104[24], 0, 48);
  *(void *)unint64_t v104 = &unk_1F20B2680;
  *(void *)&v104[8] = &_bambiDomain;
  *(_DWORD *)&v104[16] = 1073741838;
  uint64_t v29 = (ImsResult *)ImsResult::operator<<<char [52]>((uint64_t)v104, "Can't send INVITE with offer: remote answer pending");
  uint64_t v30 = ImsLogContainer::logResult(this, v29);
  ImsResult::ImsResult((ImsResult *)a1, (const std::string *)v30);
LABEL_59:
  ImsResult::~ImsResult((ImsResult *)v104);
LABEL_195:
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
}

void sub_1C5353B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,std::__shared_weak_count *a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  uint64_t v45 = *(std::__shared_weak_count **)(v43 - 152);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  _Unwind_Resume(a1);
}

void SipSession::sendLazuliInvite(uint64_t *a1@<X0>, uint64_t a2@<X1>, ImsResult *a3@<X8>)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1[143])
  {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *(void *)(a2 + 8);
    }
    if (v5) {
      SipDialog::createRequestInDialog(a1[31]);
    }
    *(_OWORD *)&v11[1] = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    v10[0] = (SipStack *)&unk_1F20B2680;
    v10[1] = (SipStack *)&_bambiDomain;
    LODWORD(v11[0]) = 1073741825;
    BOOL v8 = (ImsResult *)ImsResult::operator<<<char [29]>((uint64_t)v10, "sendInvite: empty inviteType");
    uint64_t v9 = ImsLogContainer::logResult((ImsLogContainer *)a1, v8);
    ImsResult::ImsResult(a3, (const std::string *)v9);
  }
  else
  {
    *(_OWORD *)&v11[1] = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    v10[0] = (SipStack *)&unk_1F20B2680;
    v10[1] = (SipStack *)&_bambiDomain;
    LODWORD(v11[0]) = 1073741826;
    uint64_t v6 = (ImsResult *)ImsResult::operator<<<char [46]>((uint64_t)v10, "can't send an INVITE without a lazuli session");
    uint64_t v7 = ImsLogContainer::logResult((ImsLogContainer *)a1, v6);
    ImsResult::ImsResult(a3, (const std::string *)v7);
  }
  ImsResult::~ImsResult((ImsResult *)v10);
}

void sub_1C535435C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](&a27);
  if (v27)
  {
    std::__shared_weak_count::__release_weak(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  ImsResult::~ImsResult((ImsResult *)&a18);
  _Unwind_Resume(a1);
}

void SipSession::startLocalQosTimerMO(int8x8_t *this)
{
  void v15[4] = *MEMORY[0x1E4F143B8];
  int8x8_t v2 = this[31];
  if (*(void *)(*(void *)&v2 + 2064) != 1)
  {
    uint64_t v5 = 0;
LABEL_8:
    uint64_t v7 = (*(uint64_t (**)(int8x8_t *))(*(void *)this + 64))(this);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)this + 16))(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"No fork for MO call to set QoS!", 31);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  uint64_t v3 = *(void *)(*(void *)&v2 + 2048);
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 64);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v4) {
    goto LABEL_8;
  }
  uint64_t v6 = (void **)(v4 + 152);
  if ((*(unsigned int (**)(int8x8_t *, uint64_t))(*(void *)this + 304))(this, v4 + 152))
  {
    uint64_t v7 = (*(uint64_t (**)(int8x8_t *))(*(void *)this + 64))(this);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)this + 16))(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"local QoS is already established. Don't need to start QoS timer.", 64);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_9:
    *(unsigned char *)(v7 + 17) = 0;
    goto LABEL_10;
  }
  {
    uint64_t v7 = (*(uint64_t (**)(int8x8_t *))(*(void *)this + 64))(this);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)this + 16))(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"local QoS is already active", 27);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_9;
  }
  int8x8_t v8 = this[31];
  if (*(void *)&v8 && (uint64_t v9 = *(void *)(*(void *)&v8 + 216)) != 0) {
    uint64_t v10 = *(SipUserAgent **)(v9 + 136);
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = *(_DWORD *)(SipUserAgent::config(v10) + 16);
  int8x8_t v13 = this[23];
  long long v12 = (std::__shared_weak_count *)this[24];
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (v11 && SipPreconditions::preconditionsEnabled((uint64_t)&this[179], v6))
  {
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = operator new(0x20uLL);
    *uint64_t v14 = &unk_1F20C51E8;
    v14[1] = this;
    void v14[2] = v13;
    void v14[3] = v12;
    void v15[3] = v14;
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v15);
  }
  if (v12)
  {
    std::__shared_weak_count::__release_weak(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_10:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C53547F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [45]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C53548CC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [65]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5354974(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

BOOL SipOfferAnswer::remoteAnswerPending(SipOfferAnswer *this)
{
  uint64_t v1 = *((void *)this + 19);
  int8x8_t v2 = *(SipOfferAnswerExchange **)(v1 + 16);
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 24);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v4 = SipOfferAnswerExchange::remoteAnswerPending(v2);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    return v4;
  }
  else
  {
    return SipOfferAnswerExchange::remoteAnswerPending(v2);
  }
}

uint64_t ImsResult::operator<<<char [52]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5354A80(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

BOOL SipOfferAnswer::localAnswerPending(SipOfferAnswer *this, std::__shared_weak_count *a2)
{
  if (a2)
  {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
    BOOL v4 = SipOfferAnswerExchange::localAnswerPending(this);
    std::__shared_weak_count::__release_shared[abi:ne180100](a2);
    return v4;
  }
  else
  {
    return SipOfferAnswerExchange::localAnswerPending(this);
  }
}

SipHeader *SipMessage::header<SipPEarlyMediaHeader>(SipMessage *a1)
{
  uint64_t result = SipMessage::headerWithName(a1, "P-Early-Media", 1);
  if (result)
  {
  }
  return result;
}

void ___ZN10SipSession10sendInviteEP10SipRequestRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 64))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Faking local QoS notification for MO Call", 41);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = operator new(2uLL);
  std::string __p = v3;
  *uint64_t v3 = 0;
  size_t v5 = v3 + 1;
  uint64_t v6 = v3 + 1;
  SipSession::handleQualityOfServiceEstablished(v1, 0xFFFFFFFF, 1, (uint64_t)&__p, 1);
  if (__p)
  {
    size_t v5 = __p;
    operator delete(__p);
  }
}

void sub_1C5354C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::handleQualityOfServiceEstablished(uint64_t a1, unsigned int a2, int a3, uint64_t a4, char a5)
{
  *(unsigned char *)(a1 + 1568) = a3;
  uint64_t v10 = *(void *)(a1 + 1504);
  int v11 = *(_DWORD *)(a1 + 1520);
  if (v10) {
    BOOL v12 = v11 == 5;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12)
  {
    if (v10) {
      BOOL v13 = 0;
    }
    else {
      BOOL v13 = v11 == 5;
    }
    if (!v13) {
      goto LABEL_13;
    }
LABEL_10:
    if (a3) {
      SipSession::handleLocalQoSEstablished((unint64_t **)a1);
    }
    else {
      SipSession::handleRemoteQoSEstablished(a1, a2, 0, a4, a5);
    }
    uint64_t v14 = *(void **)(a1 + 248);
    uint64_t v15 = &__block_literal_global_2;
    goto LABEL_17;
  }
  if (SipPreconditions::preconditionsActiveInAnyFork((SipPreconditions *)(a1 + 1432))) {
    goto LABEL_10;
  }
LABEL_13:
  SipSession::updateBearerForPorts((uint64_t *)a1, a2, a3, (unsigned __int16 **)a4, a5);
  if (!SipSession::requireQosBeforeRinging((SipSession *)a1)) {
    goto LABEL_18;
  }
  uint64_t v14 = *(void **)(a1 + 248);
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 0x40000000;
  void v16[2] = ___ZN10SipSession33handleQualityOfServiceEstablishedEjbRKNSt3__16vectorItNS0_9allocatorItEEEEb_block_invoke_2;
  void v16[3] = &__block_descriptor_tmp_375;
  _OWORD v16[4] = a1;
  uint64_t v15 = v16;
LABEL_17:
  SipDialog::performBlockOnForks(v14, (uint64_t)v15);
LABEL_18:
  if (a3)
  {
    *(_DWORD *)(a1 + 1528) = a2;
    if (a1 + 1536 != a4) {
      std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>((char *)(a1 + 1536), *(char **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 1);
    }
    *(unsigned char *)(a1 + 1560) = 1;
    *(_DWORD *)(a1 + 1532) = 2;
  }
}

uint64_t SipTypedStateMachine<SipSessionState>::currentState@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 64);
  *a2 = *(void *)(result + 56);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void SipSession::sendRingingNotification(int8x8_t *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (SipSession::confirmed((SipSession *)this))
  {
    memset((char *)&v32[1] + 8, 0, 48);
    *(void *)&v32[0] = &unk_1F20B2680;
    *((void *)&v32[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
    LODWORD(v32[1]) = 1073741826;
    BOOL v4 = (ImsResult *)ImsResult::operator<<<char [53]>((uint64_t)v32, "sendRingingNotification called on a confirmed dialog");
    size_t v5 = ImsLogContainer::logResult((ImsLogContainer *)this, v4);
    ImsResult::ImsResult((ImsResult *)a2, (const std::string *)v5);
LABEL_5:
    ImsResult::~ImsResult((ImsResult *)v32);
    return;
  }
  if (*(unsigned char *)(*(void *)&this[31] + 1928))
  {
    memset((char *)&v32[1] + 8, 0, 48);
    *(void *)&v32[0] = &unk_1F20B2680;
    *((void *)&v32[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
    LODWORD(v32[1]) = 1073741825;
    uint64_t v6 = (ImsResult *)ImsResult::operator<<<char [46]>((uint64_t)v32, "sendRingingNotification called on a MO dialog");
    uint64_t v7 = ImsLogContainer::logResult((ImsLogContainer *)this, v6);
    ImsResult::ImsResult((ImsResult *)a2, (const std::string *)v7);
    goto LABEL_5;
  }
  if (!this[174].i8[0])
  {
    memset((char *)&v32[1] + 8, 0, 48);
    *(void *)&v32[0] = &unk_1F20B2680;
    *((void *)&v32[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
    LODWORD(v32[1]) = 1073741826;
    operator new();
  }
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  SipSession::serverInviteTransaction((SipSession *)this, &v29);
  uint64_t v8 = v29;
  if (!v29)
  {
    memset((char *)&v32[1] + 8, 0, 48);
    *(void *)&v32[0] = &unk_1F20B2680;
    *((void *)&v32[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
    LODWORD(v32[1]) = 1073741826;
    operator new();
  }
  if (!*(unsigned char *)(*(void *)&this[31] + 1928))
  {
    SipTimerContainer::cancelTimer(this + 34, (std::string *)"WaitForRingingTimer");
    int8x8_t v10 = this[23];
    uint64_t v9 = (std::__shared_weak_count *)this[24];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    int8x8_t v11 = this[31];
    if (*(void *)&v11 && (uint64_t v12 = *(void *)(*(void *)&v11 + 216)) != 0) {
      BOOL v13 = *(SipUserAgent **)(v12 + 136);
    }
    else {
      BOOL v13 = 0;
    }
    if (*(_DWORD *)SipUserAgent::config(v13)
      && !std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(&this[35], "RingingTimer"))
    {
      uint64_t v14 = (*(uint64_t (**)(int8x8_t *))(*(void *)this + 64))(this);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)this + 16))(this, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"starting ringing timer", 22);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      *((void *)&v32[1] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
      uint64_t v15 = operator new(0x20uLL);
      *uint64_t v15 = &unk_1F20C4EE8;
      v15[1] = this;
      void v15[2] = v10;
      void v15[3] = v9;
      *((void *)&v32[1] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v15;
      int8x8_t v16 = this[31];
      if (*(void *)&v16 && (uint64_t v17 = *(void *)(*(void *)&v16 + 216)) != 0) {
        uint64_t v18 = *(SipUserAgent **)(v17 + 136);
      }
      else {
        uint64_t v18 = 0;
      }
      SipUserAgent::config(v18);
      SipTimerContainer::startTimer(this + 34, (uint64_t)"RingingTimer");
      std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v32);
    }
    if (v9)
    {
      std::__shared_weak_count::__release_weak(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  uint64_t v35 = 0;
  long long v33 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v32, 0, sizeof(v32));
  SipResponse::SipResponse((SipResponse *)v32, 180, *(const SipRequest **)(v8 + 296));
  SipSessionInterface::stack((std::__shared_weak_count *)this, &v27);
  uint64_t v19 = *(void *)(v27 + 136);
  v31[0] = 0;
  v31[1] = 0;
  unint64_t v20 = BambiClient::callCountExcludingCall(v19, v31);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v20 >= 2)
  {
    int v21 = (const void *)SipMessageEncodingMap::headerPrototypeWithName((void *)v33, (uint64_t)"Alert-Info");
    if (v21)
    {
      if (v22)
      {
        uint64_t v23 = (SipHeader *)(*(uint64_t (**)(void *))(*(void *)v22 + 32))(v22);
        if (v23)
        {
          uint64_t v24 = SipMessage::addHeader((SipMessage *)v32, v23, 0);
          if (v24) {
        }
          }
      }
    }
    SipAlertInfoHeader::addAlertInfo();
  }
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v25 = v30;
  v26[0] = v8;
  v26[1] = v30;
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSession::sendResponseToInviteOrUpdateRequest((ImsResult *)a2, this, (SipResponse *)v32, v26);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (((*(uint64_t (**)(void, void))(**(void **)(a2 + 8) + 24))(*(void *)(a2 + 8), *(unsigned int *)(a2 + 16)) & 1) == 0)SipSession::startPingTimer(this); {
  *(void *)&v32[0] = &unk_1F20DD488;
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
  SipMessage::~SipMessage((SipMessage *)v32);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
}

void sub_1C53554E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  if (v9)
  {
    std::__shared_weak_count::__release_weak(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  if (a7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a7);
  }
  _Unwind_Resume(a1);
}

void SipSession::sendResponseToInviteOrUpdateRequest(ImsResult *a1, int8x8_t *a2, SipResponse *a3, void *a4)
{
  uint64_t v8 = (SipUriHeader *)SipMessage::header<SipFromHeader>(*(void *)(*a4 + 296));
  if (v8) {
    uint64_t v9 = SipUriHeader::tag(v8);
  }
  else {
    uint64_t v9 = &ims::kEmptyString;
  }
  int8x8_t v10 = a2[31];
  int8x8_t v11 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(*(void *)&v10 + 2048, (void **)v9);
  if ((void **)(*(void *)&v10 + 2056) == v11)
  {
    uint64_t v12 = 0;
    BOOL v13 = 0;
  }
  else
  {
    BOOL v13 = (SipDialogFork *)v11[7];
    uint64_t v12 = (std::__shared_weak_count *)v11[8];
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v14 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*a4 + 296) + 112))(*(void *)(*a4 + 296));
  uint64_t v15 = v14[23];
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v14[23];
  }
  else {
    uint64_t v16 = *((void *)v14 + 1);
  }
  if (v16 != 6)
  {
    BOOL v25 = 0;
    if (v13) {
      goto LABEL_21;
    }
    goto LABEL_39;
  }
  if ((v15 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)v14, "INVITE", *((void *)v14 + 1)) == 0;
    if (v13) {
      goto LABEL_21;
    }
    goto LABEL_39;
  }
  if (!v14[23])
  {
    BOOL v25 = 1;
    if (v13) {
      goto LABEL_21;
    }
LABEL_39:
    uint64_t v37 = (*(uint64_t (**)(int8x8_t *))(*(void *)a2 + 56))(a2);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)a2 + 16))(a2, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"sendResponseToInviteOrUpdateRequest: couldn't find appropriate fork for remote tag ", 83);
    *(unsigned char *)(v37 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)__p, (const std::string *)v9);
    (*(void (**)(uint64_t, void **))(*(void *)v37 + 56))(v37, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v37 + 17) = 0;
    if (SHIBYTE(v112[3]) < 0) {
      operator delete(v112[1]);
    }
    if (SHIBYTE(v112[0]) < 0) {
      operator delete(__p[0]);
    }
    memset(&v112[1], 0, 48);
    __p[0] = &unk_1F20B2680;
    __p[1] = &_bambiDomain;
    LODWORD(v112[0]) = 0x40000000;
    uint64_t v38 = (const std::string *)ImsResult::operator<<<char [20]>((uint64_t)__p, "missing dialog fork");
    ImsResult::ImsResult(a1, v38);
    goto LABEL_230;
  }
  uint64_t v17 = v15 - 1;
  uint64_t v18 = "INVITE";
  do
  {
    int v20 = *v14++;
    int v19 = v20;
    int v22 = *(unsigned __int8 *)v18++;
    int v21 = v22;
    BOOL v24 = v17-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (!v13) {
    goto LABEL_39;
  }
LABEL_21:
  uint64_t v26 = *(void *)(*a4 + 296);
  std::string::basic_string[abi:ne180100]<0>(__p, "100rel");
  BOOL v27 = SipMessage::supportsOption(v26, __p);
  if (SHIBYTE(v112[0]) < 0) {
    operator delete(__p[0]);
  }
  int v28 = *((_DWORD *)a3 + 22);
  unsigned int v29 = v28 - 200;
  if (v28 == 183 || v29 <= 0x63)
  {
    int v39 = v29 < 0xFFFFFF9C || v27;
    if (v39 != 1) {
      goto LABEL_184;
    }
    long long v105 = v12;
    uint64_t v40 = SipMessage::body<SipSdpBody>((uint64_t)a3);
    if (v40)
    {
      uint64_t v41 = *((void *)v40 + 1);
      uint64_t v42 = (std::__shared_weak_count *)*((void *)v40 + 2);
      if (v42) {
        atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v41)
      {
        uint64_t v43 = a1;
        BOOL v44 = 0;
        goto LABEL_65;
      }
    }
    else
    {
      uint64_t v42 = 0;
    }
    uint64_t v43 = a1;
    uint64_t v45 = *((void *)v13 + 82);
    uint64_t v46 = (std::__shared_weak_count *)*((void *)v13 + 83);
    if (v46) {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v44 = SipOfferAnswer::localSdpPending(*(SipOfferAnswer **)(*(void *)(v45 + 152) + 16), *(std::__shared_weak_count **)(*(void *)(v45 + 152) + 24));
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    }
LABEL_65:
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    if (!v44)
    {
      int v28 = *((_DWORD *)a3 + 22);
      a1 = v43;
      uint64_t v12 = v105;
      goto LABEL_25;
    }
    uint64_t v47 = (*(uint64_t (**)(int8x8_t *))(*(void *)a2 + 64))(a2);
    uint64_t v48 = v43;
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)a2 + 16))(a2, v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)"adding SDP ", 11);
    *(unsigned char *)(v47 + 17) = 0;
    uint64_t v49 = *((void *)v13 + 82);
    uint64_t v50 = (std::__shared_weak_count *)*((void *)v13 + 83);
    if (v50) {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v51 = SipOfferAnswer::localAnswerPending(*(SipOfferAnswer **)(*(void *)(v49 + 152) + 16), *(std::__shared_weak_count **)(*(void *)(v49 + 152) + 24));
    if (v51) {
      BOOL v52 = "answer";
    }
    else {
      BOOL v52 = "offer";
    }
    if (v51) {
      uint64_t v53 = 6;
    }
    else {
      uint64_t v53 = 5;
    }
    uint64_t v12 = v105;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)v52, v53);
    *(unsigned char *)(v47 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)" to ", 4);
    *(unsigned char *)(v47 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v47 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v47 + 8), (uint64_t)" response", 9);
    *(unsigned char *)(v47 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v47 + 17) = 0;
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    if (v105) {
      atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v54 = (std::__shared_weak_count *)a2[98];
    unint64_t v100 = v48;
    if (v54 && (int v55 = std::__shared_weak_count::lock(v54)) != 0)
    {
      char v101 = v55;
      int8x8_t v102 = a2[97];
    }
    else
    {
      char v101 = 0;
      int8x8_t v102 = 0;
    }
    uint64_t v56 = *((void *)v13 + 82);
    long long v57 = (std::__shared_weak_count *)*((void *)v13 + 83);
    if (v57) {
      atomic_fetch_add_explicit(&v57->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v58 = *(void *)(v56 + 152);
    uint64_t v60 = *(void *)(v58 + 16);
    int v59 = *(std::__shared_weak_count **)(v58 + 24);
    if (v59) {
      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v61 = *(std::__shared_weak_count **)(v60 + 40);
    uint64_t v62 = *(std::__shared_weak_count **)(v60 + 48);
    if (v62) {
      atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v59) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v59);
    }
    if (v61)
    {
      uint64_t v63 = *(void *)(v56 + 152);
      uint64_t v65 = *(void *)(v63 + 16);
      uint64_t v64 = *(std::__shared_weak_count **)(v63 + 24);
      if (v64) {
        atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v67 = *(uint64_t **)(v65 + 40);
      uint64_t v66 = *(std::__shared_weak_count **)(v65 + 48);
      if (v66) {
        atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v64) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v64);
      }
      uint64_t v68 = *v67;
      uint64_t v61 = (std::__shared_weak_count *)v67[1];
      uint64_t v103 = v68;
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v66) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v66);
      }
      uint64_t v69 = v103;
      if (v62) {
        goto LABEL_105;
      }
    }
    else
    {
      uint64_t v69 = 0;
      if (v62) {
LABEL_105:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v62);
    }
    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v104 = v69;
    if (v69) {
      BOOL v70 = 0;
    }
    else {
      BOOL v70 = v25;
    }
    if (!a2[169].i8[0])
    {
      unsigned int v72 = v100;
      if (v70) {
        SipSession::localTemplateSdp((SipSession *)a2, (uint64_t *)&v108);
      }
      else {
        (*(void (**)(SDPModel **__return_ptr, int8x8_t *))(*(void *)a2 + 128))(&v108, a2);
      }
      char v80 = v108;
      uint64_t v79 = v109;
      if (v109) {
        atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::size_type v77 = (std::__shared_weak_count *)__p[1];
      __p[0] = v80;
      __p[1] = v79;
      if (!v77) {
        goto LABEL_135;
      }
      goto LABEL_134;
    }
    int8x8_t v71 = a2[143];
    unsigned int v72 = v100;
    if (v70)
    {
      if (v71)
      {
        long long v73 = *(SDPSession **)(*(void *)&v71 + 120);
        long long v108 = 0;
        long long v109 = 0;
        goto LABEL_130;
      }
    }
    else if (v71)
    {
      long long v73 = *(SDPSession **)(*(void *)&v71 + 120);
LABEL_130:
      SDPSession::localLazuliSdp(v73, &v108);
      uint64_t v75 = v108;
      int v76 = v109;
      if (v109) {
        atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
      }
LABEL_133:
      std::string::size_type v77 = (std::__shared_weak_count *)__p[1];
      __p[0] = v75;
      __p[1] = v76;
      if (!v77)
      {
LABEL_135:
        if (v109) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v109);
        }
        if (__p[0])
        {
          long long v108 = 0;
          long long v109 = 0;
          std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> &,void>((uint64_t *)__p, &v108);
          if (v70)
          {
            SipDialogFork::incrementSdpVersion(v13);
            if (!a2[169].i8[0])
            {
              if (v102)
              {
                if ((*(_DWORD *)(*(void *)&v102 + 448) & 0xFFFFFFFE) == 2) {
                  int v78 = 3;
                }
                else {
                  int v78 = 1;
                }
              }
              else
              {
                int v78 = 1;
              }
              SDPModel::setDirectionForSessionAndMedia(v108, v78);
            }
          }
          uint64_t v81 = v108;
          *((void *)v108 + 18) = *((void *)v13 + 87);
          if (!a2[169].i8[0] && *(void *)&v102)
          {
            if (*(unsigned char *)(*(void *)&v102 + 752) || *(unsigned char *)(*(void *)&v102 + 753))
            {
              if (v104)
              {
                for (uint64_t i = *(void *)(v104 + 416); i != *(void *)(v104 + 424); i += 200)
                {
                  if (*(_DWORD *)(i + 12) == 4) {
                    goto LABEL_167;
                  }
                }
                SDPModel::removeTextSession(v81);
                SipSession::schedulePendingReinviteForTTY((SipSession *)a2);
              }
              else
              {
                for (uint64_t j = *((void *)v81 + 52); ; j += 200)
                {
                  if (j == *((void *)v81 + 53)) {
                    goto LABEL_167;
                  }
                  if (*(_DWORD *)(j + 12) == 4) {
                    break;
                  }
                }
                SipTimerContainer::cancelTimer(a2 + 52, (std::string *)"TTYReinviteTimer");
              }
            }
LABEL_167:
            if (!a2[169].i8[0])
            {
              long long v120 = v108;
              long long v121 = v109;
              if (v109) {
                atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              BambiCall::setDirectionForSdpBasedOnHoldState(*(void **)&v102, (void **)&v120);
              if (v121) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v121);
              }
            }
          }
          long long v118 = v108;
          long long v119 = v109;
          if (v109) {
            atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          SipMessage::setSdp();
        }
        *((_DWORD *)a3 + 22) = 500;
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
        if (v61) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
        }
        if (v101) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v101);
        }
        if (v105) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v105);
        }
        memset(&v112[1], 0, 48);
        __p[0] = &unk_1F20B2680;
        __p[1] = &_bambiDomain;
        LODWORD(v112[0]) = 0x40000000;
        int v99 = (const std::string *)ImsResult::operator<<<char [39]>((uint64_t)__p, "unable to add SDP to outgoing response");
        ImsResult::ImsResult(v72, v99);
        goto LABEL_230;
      }
LABEL_134:
      std::__shared_weak_count::__release_shared[abi:ne180100](v77);
      goto LABEL_135;
    }
    uint64_t v75 = 0;
    int v76 = 0;
    long long v108 = 0;
    long long v109 = 0;
    goto LABEL_133;
  }
LABEL_25:
  if (v28 == 180 && v27)
  {
    uint64_t v31 = *((void *)v13 + 82);
    uint64_t v32 = (std::__shared_weak_count *)*((void *)v13 + 83);
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v33 = *(void *)(v31 + 152);
    unsigned int v34 = *(SipOfferAnswerExchange **)(v33 + 16);
    uint64_t v35 = *(std::__shared_weak_count **)(v33 + 24);
    if (v35) {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v36 = SipOfferAnswerExchange::empty(v34);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    if (v32)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      if (!v36) {
        goto LABEL_184;
      }
    }
    else if (!v36)
    {
      goto LABEL_184;
    }
    __p[0] = 0;
    __p[1] = 0;
    SipSession::localTemplateSdp((SipSession *)a2, (uint64_t *)&v108);
    if (v108) {
      SipSession::localTemplateSdp((SipSession *)a2, (uint64_t *)__p);
    }
    else {
      (*(void (**)(void **__return_ptr, int8x8_t *))(*(void *)a2 + 128))(__p, a2);
    }
    if (v109) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v109);
    }
    if (__p[0])
    {
      uint64_t v74 = (*(uint64_t (**)(int8x8_t *))(*(void *)a2 + 64))(a2);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)a2 + 16))(a2, v74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v74 + 8), (uint64_t)"adding SDP to RINGING", 21);
      *(unsigned char *)(v74 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v74 + 64))(v74, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v74 + 17) = 0;
      long long v116 = __p[0];
      long long v117 = __p[1];
      if (__p[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
      }
      SipMessage::setSdp();
    }
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
  }
LABEL_184:
  uint64_t v84 = SipMessage::body<SipSdpBody>((uint64_t)a3);
  if (!v84)
  {
LABEL_200:
    *(_OWORD *)std::string __p = 0u;
    memset(v112, 0, 56);
    char v91 = (SipOfferAnswer *)*((void *)v13 + 82);
    uint64_t v92 = (std::__shared_weak_count *)*((void *)v13 + 83);
    if (v92) {
      atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipOfferAnswer::updateWithOutgoingMessage(v91, (uint64_t)a3, (std::string *)(*a4 + 328), (uint64_t)__p);
    if (v92) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v92);
    }
    if ((*(unsigned int (**)(void *, void))(*(void *)__p[1] + 24))(__p[1], LODWORD(v112[0])))
    {
      SipResponse::setStatusFromImsResult(a3, (const ImsResult *)__p);
      ImsResult::ImsResult((uint64_t)a1, (uint64_t)__p);
    }
    else
    {
      if (v25)
      {
        int8x8_t v93 = a2[31];
        if (*(void *)&v93 && (uint64_t v94 = *(void *)(*(void *)&v93 + 216)) != 0) {
          long long v95 = *(SipUserAgent **)(v94 + 136);
        }
        else {
          long long v95 = 0;
        }
        uint64_t v96 = SipUserAgent::config(v95);
        if (SipResponseCodeMap::containsResponseCodeForMethod(v96 + 992, (void **)"INVITE", *((_DWORD *)a3 + 22), 0)) {
          SipSession::addLocationToMessage((SipSession *)a2, a3);
        }
      }
      SipSessionTimer::updateFromResponse(*(void *)&a2[172], (uint64_t)a3, SipSessionTimer::kRoleUAS);
      long long v97 = (std::__shared_weak_count *)a4[1];
      uint64_t v106 = *a4;
      long long v107 = v97;
      if (v97) {
        atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(int8x8_t *, SipResponse *, uint64_t *))(*(void *)a2 + 240))(a2, a3, &v106);
      if (v107) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v107);
      }
    }
    goto LABEL_230;
  }
  uint64_t v85 = *((void *)v84 + 1);
  uint64_t v86 = (std::__shared_weak_count *)*((void *)v84 + 2);
  if (v86)
  {
    atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v85)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v86);
      goto LABEL_200;
    }
  }
  else if (!v85)
  {
    goto LABEL_200;
  }
  BOOL hasPreconditions = SipMessage::hasPreconditions(*(SipMessage **)(*a4 + 296));
  if (hasPreconditions || !v25)
  {
LABEL_193:
    if (v86) {
      goto LABEL_194;
    }
LABEL_198:
    if (!hasPreconditions) {
      goto LABEL_200;
    }
    goto LABEL_199;
  }
  char v88 = SipMessage::body<SipSdpBody>(*(void *)(*a4 + 296));
  if (v88)
  {
    uint64_t v90 = *((void *)v88 + 1);
    uint64_t v89 = (std::__shared_weak_count *)*((void *)v88 + 2);
    if (v89)
    {
      atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL hasPreconditions = v90 == 0;
      std::__shared_weak_count::__release_shared[abi:ne180100](v89);
      goto LABEL_193;
    }
  }
  else
  {
    uint64_t v90 = 0;
  }
  BOOL hasPreconditions = v90 == 0;
  if (!v86) {
    goto LABEL_198;
  }
LABEL_194:
  std::__shared_weak_count::__release_shared[abi:ne180100](v86);
  if (!hasPreconditions) {
    goto LABEL_200;
  }
LABEL_199:
  if (SipPreconditions::addPreconditionsToOutgoingResponse((uint64_t)&a2[179], (uint64_t)v13 + 152, *(void *)(*a4 + 296), a3))goto LABEL_200; {
  std::string::basic_string[abi:ne180100]<0>(&v108, "InternalError");
  }
  SipSessionInterface::terminationReason((std::__shared_weak_count *)a2, (uint64_t)&v108, (BambiCallTerminationReason *)__p);
  SipSession::generateTerminationResponse(a2, (const BambiCallTerminationReason *)__p, a3);
  if (v115) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v115);
  }
  if (v114) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v114);
  }
  if (v113 < 0) {
    operator delete(v112[7]);
  }
  if (SHIBYTE(v112[4]) < 0) {
    operator delete(v112[2]);
  }
  if (SHIBYTE(v112[1]) < 0) {
    operator delete(__p[1]);
  }
  if (v110 < 0) {
    operator delete(v108);
  }
  memset(&v112[1], 0, 48);
  __p[0] = &unk_1F20B2680;
  __p[1] = &_bambiDomain;
  LODWORD(v112[0]) = 0x40000000;
  std::string::size_type v98 = (const std::string *)ImsResult::operator<<<char [49]>((uint64_t)__p, "unable to add preconditions to outgoing response");
  ImsResult::ImsResult(a1, v98);
LABEL_230:
  ImsResult::~ImsResult((ImsResult *)__p);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1C53563D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, void *__p, std::__shared_weak_count *a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,std::__shared_weak_count *a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v30 = *(std::__shared_weak_count **)(v28 - 96);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ImsResult::operator<<<char [56]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5356650(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipSession::acceptInvitation(SipSessionTimer **this@<X0>, ImsResult *a2@<X8>)
{
  if (!*((unsigned char *)this + 1392))
  {
    memset(&v35[1], 0, 48);
    v35[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v35[0].__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v35[0].__r_.__value_.__r.__words[2]) = 1073741826;
    uint64_t v7 = (ImsResult *)ImsResult::operator<<<char [60]>((uint64_t)v35, "can't accept an invitation when we haven't alerted the user");
    uint64_t v8 = ImsLogContainer::logResult((ImsLogContainer *)this, v7);
    ImsResult::ImsResult(a2, (const std::string *)v8);
    ImsResult::~ImsResult((ImsResult *)v35);
    return;
  }
  uint64_t v4 = (std::__shared_weak_count *)this[98];
  if (v4)
  {
    size_t v5 = std::__shared_weak_count::lock(v4);
    if (v5) {
      uint64_t v6 = this[97];
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    size_t v5 = 0;
  }
  if (!*((unsigned char *)this + 1352))
  {
    if (!v6)
    {
      memset(&v35[1], 0, 48);
      v35[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      v35[0].__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v35[0].__r_.__value_.__r.__words[2]) = 1073741826;
      uint64_t v15 = (ImsResult *)ImsResult::operator<<<char [33]>((uint64_t)v35, "acceptInvitation: no call object");
      uint64_t v16 = ImsLogContainer::logResult((ImsLogContainer *)this, v15);
      ImsResult::ImsResult(a2, (const std::string *)v16);
      goto LABEL_22;
    }
LABEL_12:
    uint64_t v38 = 0;
    int v39 = 0;
    SipSession::serverInviteTransaction((SipSession *)this, &v38);
    uint64_t v11 = v38;
    if (v38)
    {
      uint64_t v37 = 0;
      long long v36 = 0u;
      memset(v35, 0, sizeof(v35));
      SipResponse::SipResponse((SipResponse *)v35, 200, *(const SipRequest **)(v38 + 296));
      uint64_t v33 = 0;
      unsigned int v34 = 0;
      (*((void (**)(uint64_t *__return_ptr, SipSessionTimer **))*this + 16))(&v33, this);
      if (v33)
      {
        SipSessionTimer::validateIncomingRequestAndUpdateResponse(this[172], *(const SipRequest **)(v11 + 296), v35);
        uint64_t v12 = v39;
        v19[0] = v11;
        v19[1] = v39;
        if (v39) {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipSession::sendResponseToInviteOrUpdateRequest((ImsResult *)v29, (int8x8_t *)this, (SipResponse *)v35, v19);
        ImsLogContainer::logResult((uint64_t)this, (uint64_t)v29, (uint64_t)a2);
        ImsResult::~ImsResult((ImsResult *)v29);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      else
      {
        long long v30 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        v29[0] = &unk_1F20B2680;
        v29[1] = &_bambiDomain;
        void v29[2] = 1073741826;
        if (*((unsigned char *)this + 1352))
        {
          long long v26 = 0uLL;
          long long v27 = 0uLL;
          long long v28 = 0uLL;
          std::string __p = &unk_1F20B2680;
          uint64_t v23 = &_bambiDomain;
          int v24 = 1073741826;
          ImsResult::operator<<<char [66]>((uint64_t)&__p, "Unable to answer lazuli session: no local SDP for lazuli session ");
          int v21 = v6;
          ImsResult::operator<<<BambiCall *>((uint64_t)&__p);
          ImsResult::operator=((uint64_t)v29, (uint64_t)&__p);
        }
        else
        {
          long long v26 = 0uLL;
          long long v27 = 0uLL;
          long long v28 = 0uLL;
          std::string __p = &unk_1F20B2680;
          uint64_t v23 = &_bambiDomain;
          int v24 = 1073741826;
          uint64_t v17 = ImsResult::operator<<<char [55]>((uint64_t)&__p, "Unable to answer call: no local SDP for media session ");
          int v21 = v6;
          ImsResult::operator<<<BambiCall *>(v17);
          ImsResult::operator=((uint64_t)v29, v17);
        }
        ImsResult::~ImsResult((ImsResult *)&__p);
        std::string::basic_string[abi:ne180100]<0>(&__p, "InternalError");
        SipSession::rejectWithReason((SipSession *)v20, (std::__shared_weak_count *)this, (uint64_t)&__p);
        ImsResult::~ImsResult((ImsResult *)v20);
        if (v25 < 0) {
          operator delete(__p);
        }
        uint64_t v18 = ImsLogContainer::logResult((ImsLogContainer *)this, (ImsResult *)v29);
        ImsResult::ImsResult(a2, (const std::string *)v18);
        ImsResult::~ImsResult((ImsResult *)v29);
      }
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      v35[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20DD488;
      if (SHIBYTE(v37) < 0) {
        operator delete((void *)v36);
      }
      SipMessage::~SipMessage((SipMessage *)v35);
    }
    else
    {
      memset(&v35[1], 0, 48);
      v35[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      v35[0].__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v35[0].__r_.__value_.__r.__words[2]) = 1073741826;
      BOOL v13 = (ImsResult *)ImsResult::operator<<<char [55]>((uint64_t)v35, "acceptInvitation: no current server INVITE transaction");
      uint64_t v14 = ImsLogContainer::logResult((ImsLogContainer *)this, v13);
      ImsResult::ImsResult(a2, (const std::string *)v14);
      ImsResult::~ImsResult((ImsResult *)v35);
    }
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
    goto LABEL_34;
  }
  if (this[143]) {
    goto LABEL_12;
  }
  memset(&v35[1], 0, 48);
  v35[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  v35[0].__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  LODWORD(v35[0].__r_.__value_.__r.__words[2]) = 1073741826;
  uint64_t v9 = (ImsResult *)ImsResult::operator<<<char [43]>((uint64_t)v35, "acceptInvitation: no lazuli session object");
  int8x8_t v10 = ImsLogContainer::logResult((ImsLogContainer *)this, v9);
  ImsResult::ImsResult(a2, (const std::string *)v10);
LABEL_22:
  ImsResult::~ImsResult((ImsResult *)v35);
LABEL_34:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5356B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  ImsResult::~ImsResult((ImsResult *)&a33);
  long long v36 = *(std::__shared_weak_count **)(v34 - 216);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  SipResponse::~SipResponse((void **)(v34 - 208));
  uint64_t v37 = *(std::__shared_weak_count **)(v34 - 72);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [60]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5356CF0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [43]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5356D98(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [55]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5356E40(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [66]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5356EE8(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<BambiCall *>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    operator new();
  }
  std::ostream::operator<<();
  *(unsigned char *)(v2 + 17) = 0;
  return a1;
}

void sub_1C5356F80(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipSession::handleSessionConfirmed(SipSession *this)
{
  *((_DWORD *)this + 438) = 0;
  uint64_t v15 = 0;
  long long v13 = 0u;
  long long v14 = 0u;
  __p[0] = 0;
  __p[1] = 0;
  BambiCallEvent::BambiCallEvent((uint64_t)&v13, 9, (uint64_t *)__p);
  *(void *)&long long v13 = &unk_1F20C3338;
  SipSession::fireCallEvent(this, (BambiCallEvent *)&v13);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3) {
      uint64_t v4 = *((void *)this + 97);
    }
    else {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  if (*(unsigned char *)(*((void *)this + 31) + 1928) && *((unsigned char *)this + 876) && v4 && *(_DWORD *)(v4 + 452) == 4)
  {
    uint64_t v5 = *((void *)this + 24);
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
    }
    SipSessionInterface::stack((std::__shared_weak_count *)this, &v12);
    uint64_t v6 = *(void *)(v12 + 136);
    LoggableString::LoggableString((LoggableString *)__p, "sendReInviteBlock");
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v8, (void *)this + 23);
    if (v8) {
      uint64_t v7 = v8 + 104;
    }
    else {
      uint64_t v7 = 0;
    }
    v10[0] = v7;
    v10[1] = v9;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
    }
    BambiClient::performBlock(v6, (uint64_t)__p, (uint64_t)v10);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)&long long v13 = &unk_1F20B8640;
  if (*((void *)&v14 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v14 + 1));
  }
}

void sub_1C53571D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a27)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
    if (!v28)
    {
LABEL_11:
      if (!v27)
      {
LABEL_16:
        *(void *)(v30 - 96) = &unk_1F20B8640;
        long long v32 = *(std::__shared_weak_count **)(v30 - 72);
        if (v32) {
          std::__shared_weak_count::__release_weak(v32);
        }
        _Unwind_Resume(exception_object);
      }
LABEL_15:
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      goto LABEL_16;
    }
  }
  else if (!v28)
  {
    goto LABEL_11;
  }
  std::__shared_weak_count::__release_weak(v28);
  if (!v27) {
    goto LABEL_16;
  }
  goto LABEL_15;
}

void ___ZN10SipSession22handleSessionConfirmedEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (!v2) {
    return;
  }
  uint64_t v3 = (SipSession *)a1[4];
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  uint64_t v5 = v4;
  if (a1[5])
  {
    uint64_t v6 = (std::__shared_weak_count *)*((void *)v3 + 98);
    if (v6)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = *((void *)v3 + 97);
        if (v8)
        {
          if (SipSession::confirmed(v3))
          {
            if (SipSession::terminating(v3)
              || (*(unsigned int (**)(SipSession *))(*(void *)v3 + 264))(v3))
            {
              uint64_t v9 = (*(uint64_t (**)(SipSession *))(*(void *)v3 + 64))(v3);
              (*(void (**)(SipSession *, uint64_t))(*(void *)v3 + 16))(v3, v9);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"sendReInvite: don't need to re-INVITE a terminating session", 59);
              *(unsigned char *)(v9 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            else
            {
              if (*(_DWORD *)(v8 + 452) == 4)
              {
                SipSession::clientInviteTransaction(v3, &v24);
                if (v24)
                {
                  BOOL v11 = 1;
                }
                else
                {
                  SipSession::serverInviteTransaction(v3, &v26);
                  BOOL v11 = v26 != 0;
                  if (v27) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
                  }
                }
                if (v25) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
                }
                if (v11)
                {
                  uint64_t v12 = (*(uint64_t (**)(SipSession *))(*(void *)v3 + 64))(v3);
                  (*(void (**)(SipSession *, uint64_t))(*(void *)v3 + 16))(v3, v12);
                  long long v13 = (unsigned char *)ImsOutStream::operator<<(v12, "sendReInvite: already have an active INVITE transaction");
                  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  v13[17] = 0;
                }
                else
                {
                  uint64_t v14 = *((void *)v3 + 31);
                  uint64_t v15 = *(void *)(v14 + 2072);
                  uint64_t v16 = *(std::__shared_weak_count **)(v14 + 2080);
                  if (v16) {
                    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  if (!v15) {
                    goto LABEL_40;
                  }
                  uint64_t v17 = *(SipOfferAnswer **)(v15 + 656);
                  uint64_t v18 = *(std::__shared_weak_count **)(v15 + 664);
                  if (v18) {
                    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  BOOL v19 = SipOfferAnswer::satisfied(v17);
                  if (v18) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
                  }
                  if (v19)
                  {
                    uint64_t v20 = (*(uint64_t (**)(SipSession *))(*(void *)v3 + 64))(v3);
                    (*(void (**)(SipSession *, uint64_t))(*(void *)v3 + 16))(v3, v20);
                    int v21 = (unsigned char *)ImsOutStream::operator<<(v20, "sending re-INVITE to change media from inactive to sendrecv");
                    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    v21[17] = 0;
                    SipSession::sendInvite((uint64_t *)v3, (uint64_t)"SendRecvInvite", (ImsResult *)&v24);
                    ImsResult::~ImsResult((ImsResult *)&v24);
                  }
                  else
                  {
LABEL_40:
                    uint64_t v22 = (*(uint64_t (**)(SipSession *))(*(void *)v3 + 64))(v3);
                    (*(void (**)(SipSession *, uint64_t))(*(void *)v3 + 16))(v3, v22);
                    uint64_t v23 = (unsigned char *)ImsOutStream::operator<<(v22, "sendReInvite: offer/answer is not satisfied");
                    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    v23[17] = 0;
                  }
                  if (v16) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
                  }
                }
                goto LABEL_17;
              }
              uint64_t v9 = (*(uint64_t (**)(SipSession *))(*(void *)v3 + 64))(v3);
              (*(void (**)(SipSession *, uint64_t))(*(void *)v3 + 16))(v3, v9);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"sendReInvite: media is no longer inactive", 41);
              *(unsigned char *)(v9 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
          }
          else
          {
            uint64_t v9 = (*(uint64_t (**)(SipSession *))(*(void *)v3 + 64))(v3);
            (*(void (**)(SipSession *, uint64_t))(*(void *)v3 + 16))(v3, v9);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"sendReInvite: can't re-INVITE an unconfirmed session", 52);
            *(unsigned char *)(v9 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          *(unsigned char *)(v9 + 17) = 0;
LABEL_17:
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
          goto LABEL_18;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    uint64_t v10 = (*(uint64_t (**)(SipSession *))(*(void *)v3 + 64))(v3);
    (*(void (**)(SipSession *, uint64_t))(*(void *)v3 + 16))(v3, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"sendReInvite: no call", 21);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (!v7) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_18:
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C5357900(_Unwind_Exception *a1)
{
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19SipSessionInterfaceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19SipSessionInterfaceEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

BOOL SipSession::terminating(SipSession *this)
{
  uint64_t v2 = *((void *)this + 90);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v2)
  {
    uint64_t v4 = *((void *)this + 90);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 91);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 48))(v4) == 13)
    {
      BOOL v6 = 0;
    }
    else
    {
      uint64_t v7 = *((void *)this + 90);
      uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 91);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v6 = (*(unsigned int (**)(uint64_t))(*(void *)v7 + 48))(v7) > 7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    BOOL v6 = 0;
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v6;
}

void sub_1C5357A94(_Unwind_Exception *exception_object)
{
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (!v2)
    {
LABEL_3:
      if (!v1) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  else if (!v2)
  {
    goto LABEL_3;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (!v1) {
LABEL_5:
  }
    _Unwind_Resume(exception_object);
LABEL_4:
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  goto LABEL_5;
}

BOOL SipOfferAnswer::satisfied(SipOfferAnswer *this)
{
  uint64_t v1 = *((void *)this + 19);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 24);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!*(void *)(v3 + 40))
  {
    BOOL v4 = 0;
    if (!v2) {
      return v4;
    }
    goto LABEL_5;
  }
  BOOL v4 = *(void *)(v3 + 56) != 0;
  if (v2) {
LABEL_5:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v4;
}

uint64_t SipSession::handleAck(std::__shared_weak_count *this, const SipRequest *a2)
{
  memset(v78, 0, sizeof(v78));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v75, &this[7].__shared_weak_owners_);
  if (v75.__r_.__value_.__r.__words[0]) {
    BOOL v4 = (std::__shared_weak_count *)(v75.__r_.__value_.__r.__words[0] + 104);
  }
  else {
    BOOL v4 = 0;
  }
  int v76 = v4;
  int64_t size = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
  *(_OWORD *)&v75.__r_.__value_.__l.__data_ = 0uLL;
  LoggableString::LoggableString((LoggableString *)__p, "handleAck");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock(v78, &v76, (const std::string *)__p);
  if (SHIBYTE(v69[0]) < 0) {
    operator delete(__p[0]);
  }
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  if (v75.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75.__r_.__value_.__l.__size_);
  }
  uint64_t v5 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].__get_deleter)(this);
  ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"SipSession::handleAck", 21);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SipSessionInterface::handleAck((SipSessionInterface *)this, a2))
  {
    BYTE1(this[65].__shared_owners_) = 1;
    memset(&v75, 0, sizeof(v75));
    SipMessage::transactionId(a2, &v75);
    uint64_t shared_owners = this[10].__shared_owners_;
    if (*(void *)(shared_owners + 2064) == 1)
    {
      uint64_t v7 = *(void *)(shared_owners + 2048);
      uint64_t v9 = *(void *)(v7 + 56);
      uint64_t v8 = *(std::__shared_weak_count **)(v7 + 64);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v9)
      {
        uint64_t v73 = 0;
        uint64_t v74 = 0;
        SipSession::clientInviteTransaction((SipSession *)this, &v73);
        uint64_t v10 = v73;
        if (v73)
        {
          uint64_t v11 = *(void *)(v9 + 656);
          uint64_t v12 = *(std::__shared_weak_count **)(v9 + 664);
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v13 = *(void *)(v11 + 152);
          uint64_t v15 = *(void *)(v13 + 16);
          uint64_t v14 = *(std::__shared_weak_count **)(v13 + 24);
          if (v14)
          {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          uint64_t v16 = *(unsigned __int8 *)(v10 + 351);
          if ((v16 & 0x80u) == 0) {
            uint64_t v17 = *(unsigned __int8 *)(v10 + 351);
          }
          else {
            uint64_t v17 = *(void *)(v10 + 336);
          }
          uint64_t v18 = *(unsigned __int8 *)(v15 + 95);
          int v19 = (char)v18;
          if ((v18 & 0x80u) != 0) {
            uint64_t v18 = *(void *)(v15 + 80);
          }
          if (v17 == v18)
          {
            uint64_t v20 = (const void **)(v10 + 328);
            uint64_t v23 = *(unsigned __int8 **)(v15 + 72);
            uint64_t v22 = (unsigned __int8 *)(v15 + 72);
            int v21 = v23;
            if (v19 >= 0) {
              uint64_t v24 = v22;
            }
            else {
              uint64_t v24 = v21;
            }
            if ((v16 & 0x80) != 0)
            {
              BOOL v32 = memcmp(*v20, v24, *(void *)(v10 + 336)) == 0;
            }
            else
            {
              if (!*(unsigned char *)(v10 + 351))
              {
                if (v12) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v12);
                }
                goto LABEL_101;
              }
              uint64_t v25 = v16 - 1;
              do
              {
                int v27 = *(unsigned __int8 *)v20;
                uint64_t v20 = (const void **)((char *)v20 + 1);
                int v26 = v27;
                int v29 = *v24++;
                int v28 = v29;
                BOOL v31 = v25-- != 0;
                BOOL v32 = v26 == v28;
              }
              while (v26 == v28 && v31);
            }
            if (v12)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
              if (v32) {
                goto LABEL_101;
              }
            }
            else if (v32)
            {
LABEL_101:
              uint64_t v44 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].__get_deleter)(this);
              ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v44);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"handleAck: received ack for session inside client transaction, ignoring", 71);
              *(unsigned char *)(v44 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_102;
            }
          }
          else if (v12)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
        }
        long long v36 = *(SipOfferAnswer **)(v9 + 656);
        uint64_t v37 = *(std::__shared_weak_count **)(v9 + 664);
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v38 = SipOfferAnswer::remoteAnswerPending(v36);
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
        if (!v38)
        {
          uint64_t v41 = SipMessage::body<SipSdpBody>((uint64_t)a2);
          if (!v41) {
            goto LABEL_103;
          }
          uint64_t v43 = *((void *)v41 + 1);
          uint64_t v42 = (std::__shared_weak_count *)*((void *)v41 + 2);
          if (v42)
          {
            atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v42);
          }
          if (!v43) {
            goto LABEL_103;
          }
          uint64_t v44 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].~__shared_weak_count_0)(this);
          ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v44);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"incoming ACK contains SDP, but we aren't expecting any.  Ignoring it.", 69);
          *(unsigned char *)(v44 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_102;
        }
        int v39 = SipMessage::header<SipCSeqHeader>((uint64_t)a2);
        if (v39) {
          int v40 = v39[15];
        }
        else {
          int v40 = 0;
        }
        uint64_t v45 = *(void *)(v9 + 656);
        uint64_t v46 = *(std::__shared_weak_count **)(v9 + 664);
        if (v46) {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v47 = *(void *)(v45 + 152);
        uint64_t v49 = *(void *)(v47 + 16);
        uint64_t v48 = *(std::__shared_weak_count **)(v47 + 24);
        if (v48)
        {
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          int v50 = *(_DWORD *)(v49 + 96);
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
          if (!v46)
          {
LABEL_76:
            if (v40 == v50)
            {
              BOOL v51 = SipMessage::body<SipSdpBody>((uint64_t)a2);
              if (!v51) {
                goto LABEL_93;
              }
              uint64_t v53 = *((void *)v51 + 1);
              BOOL v52 = (std::__shared_weak_count *)*((void *)v51 + 2);
              if (v52)
              {
                atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
                std::__shared_weak_count::__release_shared[abi:ne180100](v52);
              }
              if (!v53)
              {
LABEL_93:
                uint64_t v60 = SipMessage::body<SipSdpBody>((uint64_t)a2);
                if (v60 && !v60[48])
                {
                  if (LOBYTE(this[56].__shared_owners_))
                  {
                    std::string::basic_string[abi:ne180100]<0>(__p, "InvalidSdp");
                    SipSession::logLazuliMessageSessionSetup((uint64_t)this, (uint64_t)__p, 488);
                    if (SHIBYTE(v69[0]) < 0) {
                      operator delete(__p[0]);
                    }
                  }
                  std::string::basic_string[abi:ne180100]<0>(__p, "InvalidSdp");
                  SipSession::bye(this, (uint64_t)__p, 0);
                  int v59 = (ImsResult *)&v72;
                }
                else
                {
                  uint64_t v61 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].~__shared_weak_count_0)(this);
                  ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v61);
                  uint64_t v62 = (unsigned char *)ImsOutStream::operator<<(v61, "expected SDP answer in ACK.  Terminating session.");
                  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  v62[17] = 0;
                  if (LOBYTE(this[56].__shared_owners_))
                  {
                    std::string::basic_string[abi:ne180100]<0>(__p, "MissingSdp");
                    SipSession::logLazuliMessageSessionSetup((uint64_t)this, (uint64_t)__p, 606);
                    if (SHIBYTE(v69[0]) < 0) {
                      operator delete(__p[0]);
                    }
                  }
                  std::string::basic_string[abi:ne180100]<0>(__p, "MissingSdp");
                  SipSession::bye(this, (uint64_t)__p, 0);
                  int v59 = (ImsResult *)&v71;
                }
                goto LABEL_120;
              }
              uint64_t v54 = *(SipOfferAnswer **)(v9 + 656);
              int v55 = *(std::__shared_weak_count **)(v9 + 664);
              if (v55) {
                atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              SipOfferAnswer::updateWithIncomingRequest(v54, a2, &v75, (uint64_t)__p);
              int v56 = (*(uint64_t (**)(void *, void))(*(void *)__p[1] + 24))(__p[1], LODWORD(v69[0]));
              ImsResult::~ImsResult((ImsResult *)__p);
              if (v55) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v55);
              }
              if (v56)
              {
                uint64_t v57 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].~__shared_weak_count_0)(this);
                ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v57);
                uint64_t v58 = (unsigned char *)ImsOutStream::operator<<(v57, "invalid SDP answer in ACK.  Terminating session.");
                (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                v58[17] = 0;
                if (LOBYTE(this[56].__shared_owners_))
                {
                  std::string::basic_string[abi:ne180100]<0>(__p, "InvalidSdp");
                  SipSession::logLazuliMessageSessionSetup((uint64_t)this, (uint64_t)__p, 488);
                  if (SHIBYTE(v69[0]) < 0) {
                    operator delete(__p[0]);
                  }
                }
                std::string::basic_string[abi:ne180100]<0>(__p, "InvalidSdp");
                SipSession::bye(this, (uint64_t)__p, 0);
                int v59 = (ImsResult *)&v67;
LABEL_120:
                ImsResult::~ImsResult(v59);
                if (SHIBYTE(v69[0]) < 0) {
                  operator delete(__p[0]);
                }
              }
LABEL_103:
              uint64_t v63 = this[30].__vftable;
              uint64_t v64 = (std::__shared_weak_count *)this[30].__shared_owners_;
              if (v64) {
                atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              (*((void (**)(std::__shared_weak_count_vtbl *, const SipRequest *))v63->~__shared_weak_count
               + 13))(v63, a2);
              if (v64) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v64);
              }
              if (SipSession::confirmed((SipSession *)this))
              {
                uint64_t v65 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].__get_deleter)(this);
                ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v65);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v65 + 8), (uint64_t)"call confirmed, send session acknowledged", 41);
                *(unsigned char *)(v65 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v65 + 17) = 0;
                if (LOBYTE(this[56].__shared_owners_))
                {
                  __p[0] = 0;
                  __p[1] = 0;
                  v69[0] = 0;
                  SipSession::logLazuliMessageSessionSetup((uint64_t)this, (uint64_t)__p, 200);
                }
                uint64_t v70 = 0;
                *(_OWORD *)std::string __p = 0u;
                *(_OWORD *)uint64_t v69 = 0u;
                v66[0] = 0;
                v66[1] = 0;
                BambiCallEvent::BambiCallEvent((uint64_t)__p, 30, v66);
                SipSession::fireCallEvent((SipSession *)this, (BambiCallEvent *)__p);
                __p[0] = &unk_1F20B8640;
                if (v69[1]) {
                  std::__shared_weak_count::__release_weak(v69[1]);
                }
              }
              if (v74) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v74);
              }
              uint64_t v33 = 1;
              if (!v8) {
                goto LABEL_48;
              }
              goto LABEL_47;
            }
            uint64_t v44 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].__get_deleter)(this);
            ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v44);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"handleAck: received ack for differnt CSeq, ignoring", 51);
            *(unsigned char *)(v44 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_102:
            *(unsigned char *)(v44 + 17) = 0;
            goto LABEL_103;
          }
        }
        else
        {
          int v50 = *(_DWORD *)(v49 + 96);
          if (!v46) {
            goto LABEL_76;
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
        goto LABEL_76;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    uint64_t v34 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].__on_zero_shared)(this);
    ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"handleAck: dialog has no fork", 29);
    *(unsigned char *)(v34 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v34 + 17) = 0;
    if (LOBYTE(this[56].__shared_owners_))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "InternalError");
      SipSession::logLazuliMessageSessionSetup((uint64_t)this, (uint64_t)__p, 481);
      if (SHIBYTE(v69[0]) < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v33 = 0;
    if (!v8) {
      goto LABEL_48;
    }
LABEL_47:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
LABEL_48:
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    goto LABEL_50;
  }
  if (LOBYTE(this[56].__shared_owners_))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "InternalError");
    SipSession::logLazuliMessageSessionSetup((uint64_t)this, (uint64_t)__p, 200);
    if (SHIBYTE(v69[0]) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v33 = 0;
LABEL_50:
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v78);
  return v33;
}

void sub_1C53586E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,std::__shared_weak_count *a27)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(v28 - 160);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (*(char *)(v28 - 129) < 0) {
    operator delete(*(void **)(v28 - 152));
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v28 - 112);
  _Unwind_Resume(a1);
}

void SipSession::logLazuliMessageSessionSetup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  SipSessionInterface::stack((std::__shared_weak_count *)a1, &v33);
  uint64_t v6 = v33;
  if (!v33) {
    goto LABEL_58;
  }
  bzero(v28, 0x9D0uLL);
  SipStackConfig::SipStackConfig((SipStackConfig *)v28, (const SipStackConfig *)(v6 + 208));
  memset(&v27, 0, sizeof(v27));
  std::string::basic_string[abi:ne180100]<0>(&v27, "none");
  if (v29)
  {
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    {
      v27.__r_.__value_.__l.__size_ = 5;
      uint64_t v8 = (std::string *)v27.__r_.__value_.__r.__words[0];
      uint64_t v7 = (std::string::value_type *)(v27.__r_.__value_.__r.__words[0] + 5);
    }
    else
    {
      uint64_t v7 = &v27.__r_.__value_.__s.__data_[5];
      *((unsigned char *)&v27.__r_.__value_.__s + 23) = 5;
      uint64_t v8 = &v27;
    }
    v8->__r_.__value_.__s.__data_[4] = 67;
    LODWORD(v8->__r_.__value_.__l.__data_) = 1163087945;
  }
  else
  {
    if (!v31) {
      goto LABEL_13;
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    {
      v27.__r_.__value_.__l.__size_ = 3;
      uint64_t v9 = (std::string *)v27.__r_.__value_.__r.__words[0];
      uint64_t v7 = (std::string::value_type *)(v27.__r_.__value_.__r.__words[0] + 3);
    }
    else
    {
      uint64_t v7 = &v27.__r_.__value_.__s.__data_[3];
      *((unsigned char *)&v27.__r_.__value_.__s + 23) = 3;
      uint64_t v9 = &v27;
    }
    v9->__r_.__value_.__s.__data_[2] = 83;
    LOWORD(v9->__r_.__value_.__l.__data_) = 19540;
  }
  *uint64_t v7 = 0;
LABEL_13:
  memset(&v26, 0, sizeof(v26));
  std::string::basic_string[abi:ne180100]<0>(&v26, "P2P");
  if (*(char *)(a1 + 1303) < 0)
  {
    if (!*(void *)(a1 + 1288)) {
      goto LABEL_21;
    }
  }
  else if (!*(unsigned char *)(a1 + 1303))
  {
    goto LABEL_21;
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    v26.__r_.__value_.__l.__size_ = 11;
    uint64_t v10 = (std::string *)v26.__r_.__value_.__r.__words[0];
  }
  else
  {
    *((unsigned char *)&v26.__r_.__value_.__s + 23) = 11;
    uint64_t v10 = &v26;
  }
  strcpy((char *)v10, "GroupCreate");
LABEL_21:
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v33 + 136) + 104))(&v24);
  uint64_t v11 = v24;
  int v12 = *(char *)(a2 + 23);
  if (v12 >= 0) {
    uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v13 = *(void *)(a2 + 8);
  }
  if (!*(unsigned char *)(*(void *)(a1 + 1144) + 944))
  {
    uint64_t v14 = 0;
    if ((v12 & 0x80) == 0) {
      goto LABEL_26;
    }
LABEL_28:
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    goto LABEL_29;
  }
  uint64_t v14 = (uint64_t)((double)(std::chrono::steady_clock::now().__d_.__rep_ - *(void *)(a1 + 1360)) / 1000000.0);
  if ((*(unsigned char *)(a2 + 23) & 0x80) != 0) {
    goto LABEL_28;
  }
LABEL_26:
  std::string v23 = *(std::string *)a2;
LABEL_29:
  if (*(unsigned char *)(*(void *)(a1 + 1144) + 944)) {
    uint64_t v15 = "MO";
  }
  else {
    uint64_t v15 = "MT";
  }
  std::string::basic_string[abi:ne180100]<0>(v21, v15);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v20, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else {
    std::string v20 = v26;
  }
  if (v30) {
    uint64_t v16 = "TCP";
  }
  else {
    uint64_t v16 = "UDP";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v16);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v17, v27.__r_.__value_.__l.__data_, v27.__r_.__value_.__l.__size_);
  }
  else {
    std::string v17 = v27;
  }
  IMSMetricsManager::logLazuliMessageSessionSetup(v11, v13 == 0, v14, a3, (uint64_t)&v23, (uint64_t)v21, (uint64_t)&v20, (uint64_t)__p, (uint64_t)&v17, v32);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v22 < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  SipStackConfig::~SipStackConfig(v28);
LABEL_58:
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
}

void sub_1C5358BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  if (a49 < 0) {
    operator delete(a44);
  }
  if (a55 < 0) {
    operator delete(a50);
  }
  SipStackConfig::~SipStackConfig(&a56);
  uint64_t v58 = *(std::__shared_weak_count **)(v56 - 72);
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  _Unwind_Resume(a1);
}

void sub_1C5358CD4()
{
}

void SipSession::bye(std::__shared_weak_count *a1, uint64_t a2, uint64_t a3)
{
  SipSessionInterface::terminationReason(a1, a2, (BambiCallTerminationReason *)v5);
  ((void (*)(std::__shared_weak_count *, unsigned char *, uint64_t))a1->__vftable[3].~__shared_weak_count)(a1, v5, a3);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v11 < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (v7 < 0) {
    operator delete(v6);
  }
}

void sub_1C5358D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BambiCallTerminationReason::~BambiCallTerminationReason((BambiCallTerminationReason *)va);
  _Unwind_Resume(a1);
}

void SipSession::handlePrack(void *a1, SipMessage *a2, void *a3)
{
  uint64_t v6 = SipMessage::header<SipRAckHeader>((uint64_t)a2);
  if (!v6)
  {
    uint64_t v18 = (*(uint64_t (**)(void *))(*a1 + 32))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"no RAck header found in PRACK request", 37);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    char v19 = (std::__shared_weak_count *)a1[31];
    uint64_t v20 = *a3 + 328;
    uint64_t v21 = (*(uint64_t (**)(SipMessage *))(*(void *)a2 + 112))(a2);
    std::string::basic_string[abi:ne180100]<0>(__p, "Missing RAck header");
    SipDialog::sendResponse(__p, v19, v20, v21, 400, (ImsResult *)v64);
    std::string v17 = (ImsResult *)v64;
LABEL_15:
    ImsResult::~ImsResult(v17);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    return;
  }
  uint64_t v7 = a1[81];
  if (!v7) {
    goto LABEL_13;
  }
  unsigned int v8 = v6[16];
  char v9 = a1 + 81;
  do
  {
    unsigned int v10 = *(_DWORD *)(v7 + 32);
    BOOL v11 = v10 >= v8;
    if (v10 >= v8) {
      int v12 = (uint64_t *)v7;
    }
    else {
      int v12 = (uint64_t *)(v7 + 8);
    }
    if (v11) {
      char v9 = (void *)v7;
    }
    uint64_t v7 = *v12;
  }
  while (*v12);
  if (v9 == a1 + 81 || v8 < *((_DWORD *)v9 + 8))
  {
LABEL_13:
    uint64_t v13 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"no provisional response found with CSeq ", 40);
    *(unsigned char *)(v13 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    uint64_t v14 = (std::__shared_weak_count *)a1[31];
    uint64_t v15 = *a3 + 328;
    uint64_t v16 = (*(uint64_t (**)(SipMessage *))(*(void *)a2 + 112))(a2);
    std::string::basic_string[abi:ne180100]<0>(__p, "Invalid CSeq");
    SipDialog::sendResponse(__p, v14, v15, v16, 400, (ImsResult *)v63);
    std::string v17 = (ImsResult *)v63;
    goto LABEL_15;
  }
  uint64_t v22 = a1[31];
  if (*(void *)(v22 + 2064) != 1)
  {
    uint64_t v24 = 0;
LABEL_27:
    uint64_t v29 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"handlePrack: MT dialog doesn't have a fork", 42);
    *(unsigned char *)(v29 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v29 + 17) = 0;
    char v30 = (void *)*a3;
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_23_0);
    SipServerTransaction::sendResponse(v30, 500, __p);
    char v31 = (ImsResult *)&v62;
    goto LABEL_28;
  }
  uint64_t v23 = *(void *)(v22 + 2048);
  uint64_t v25 = *(void *)(v23 + 56);
  uint64_t v24 = *(std::__shared_weak_count **)(v23 + 64);
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v25) {
    goto LABEL_27;
  }
  std::string v26 = SipMessage::body<SipSdpBody>((uint64_t)a2);
  if (!v26) {
    goto LABEL_45;
  }
  int64_t size = (std::__shared_weak_count *)*((void *)v26 + 1);
  std::string v27 = (std::__shared_weak_count *)*((void *)v26 + 2);
  if (v27)
  {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    if (!size) {
      goto LABEL_46;
    }
  }
  else if (!size)
  {
LABEL_46:
    std::string::size_type v39 = 0;
    goto LABEL_47;
  }
  char v32 = *(SipOfferAnswer **)(v25 + 656);
  uint64_t v33 = *(std::__shared_weak_count **)(v25 + 664);
  if (v33) {
    atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipOfferAnswer::updateWithIncomingRequest(v32, a2, (std::string *)(*a3 + 328), (uint64_t)__p);
  int v34 = (*(uint64_t (**)(std::string::size_type, void))(*(void *)__p[0].__r_.__value_.__l.__size_ + 24))(__p[0].__r_.__value_.__l.__size_, LODWORD(__p[0].__r_.__value_.__r.__words[2]));
  ImsResult::~ImsResult((ImsResult *)__p);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v34)
  {
    uint64_t v35 = (void *)*a3;
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_23_0);
    SipServerTransaction::sendResponse(v35, 488, __p);
    char v31 = (ImsResult *)&v60;
LABEL_28:
    ImsResult::~ImsResult(v31);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    goto LABEL_72;
  }
  SipPreconditions::updateFromIncomingMessage((uint64_t)(a1 + 179), (std::string *)(v25 + 152), (uint64_t)a2);
  uint64_t v36 = *(void *)(v25 + 656);
  uint64_t v37 = *(std::__shared_weak_count **)(v25 + 664);
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v38 = SipOfferAnswer::localAnswerPending(*(SipOfferAnswer **)(*(void *)(v36 + 152) + 16), *(std::__shared_weak_count **)(*(void *)(v36 + 152) + 24));
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (!v38)
  {
LABEL_45:
    int64_t size = 0;
    goto LABEL_46;
  }
  SipDialogFork::createSdpToSend((SipDialogFork *)v25, 0, 1, __p);
  int64_t size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
  std::string::size_type v39 = __p[0].__r_.__value_.__r.__words[0];
  if (!__p[0].__r_.__value_.__r.__words[0])
  {
    uint64_t v40 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v40);
    uint64_t v41 = (unsigned char *)ImsOutStream::operator<<(v40, "no local SDP to send in PRACK response");
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v41[17] = 0;
    uint64_t v42 = (void *)*a3;
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_23_0);
    SipServerTransaction::sendResponse(v42, 500, __p);
    ImsResult::~ImsResult((ImsResult *)v59);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    goto LABEL_70;
  }
LABEL_47:
  uint64_t v43 = (int8x8_t *)v9[5];
  uint64_t v44 = (std::__shared_weak_count *)v9[6];
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v45 = (std::__shared_weak_count *)a3[1];
  uint64_t v57 = *a3;
  uint64_t v58 = v45;
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v55 = (SipDialogFork *)v25;
  uint64_t v56 = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v53 = v39;
  uint64_t v54 = size;
  if (size) {
    atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipPrackHandler::handlePrack(v43, (uint64_t)a2, (uint64_t)&v57, &v55, (uint64_t *)&v53);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  uint64_t v46 = (std::__shared_weak_count *)a1[98];
  if (v46)
  {
    uint64_t v47 = std::__shared_weak_count::lock(v46);
    if (v47)
    {
      uint64_t v48 = v47;
      uint64_t v49 = a1[97];
      if (v49)
      {
        uint64_t v50 = *(void *)(v49 + 416);
        if (v50)
        {
          uint64_t v51 = a1[97];
          BOOL v52 = v48;
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          (*(void (**)(uint64_t, SipMessage *, uint64_t *))(*(void *)v50 + 16))(v50, a2, &v51);
          if (v52) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v52);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v48);
    }
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
LABEL_70:
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
LABEL_72:
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_1C5359518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  _Unwind_Resume(exception_object);
}

void *SipMessage::header<SipRAckHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "RAck");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

void SipSession::handleCancel(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  char v32 = 0;
  uint64_t v33 = 0;
  SipDialog::serverTransactionWithIdAndMethod(a1[31], *a3 + 328, (uint64_t)"INVITE", &v32);
  uint64_t v6 = v32;
  if (!v32)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"received CANCEL for unknown transaction ", 40);
    *(unsigned char *)(v14 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&__str, (const std::string *)(*a3 + 328));
    (*(void (**)(uint64_t, std::string *))(*(void *)v14 + 56))(v14, &__str);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v31 < 0) {
      operator delete(v30);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    uint64_t v15 = (std::__shared_weak_count *)a1[31];
    uint64_t v16 = *a3;
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&str_23_0);
    SipDialog::sendResponse(&__str, v15, v16 + 328, v17, 481, (ImsResult *)v28);
    uint64_t v18 = (ImsResult *)v28;
    goto LABEL_25;
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[31];
  uint64_t v8 = *a3;
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)&str_23_0);
  SipDialog::sendResponse(&__str, v7, v8 + 328, v9, 200, (ImsResult *)v27);
  ImsResult::~ImsResult((ImsResult *)v27);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  unsigned int v10 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*v6[37] + 112))(v6[37]);
  uint64_t v11 = v10[23];
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = v10[23];
  }
  else {
    uint64_t v12 = *((void *)v10 + 1);
  }
  if (v12 != 6) {
    goto LABEL_20;
  }
  if ((v11 & 0x80) == 0)
  {
    if (v10[23])
    {
      uint64_t v13 = "INVITE";
      while (*v10 == *(unsigned __int8 *)v13)
      {
        ++v10;
        ++v13;
        if (!--v11) {
          goto LABEL_21;
        }
      }
      goto LABEL_20;
    }
    goto LABEL_21;
  }
  if (memcmp(*(const void **)v10, "INVITE", *((void *)v10 + 1)))
  {
LABEL_20:
    uint64_t v19 = (*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"remote end tried to cancel a ", 29);
    *(unsigned char *)(v19 + 17) = 0;
    uint64_t v20 = (const std::string *)(*(uint64_t (**)(void *))(*v6[37] + 112))(v6[37]);
    LoggableString::LoggableString(&__str, v20);
    (*(void (**)(uint64_t, std::string *))(*(void *)v19 + 40))(v19, &__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)" request. Ignoring", 18);
    *(unsigned char *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v19 + 17) = 0;
    goto LABEL_26;
  }
LABEL_21:
  if (*((unsigned char *)a1 + 1756))
  {
    uint64_t v21 = (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"received CANCEL in a confirmed session. Terminating.", 52);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__str, "RemoteCancel");
    SipSession::bye((std::__shared_weak_count *)a1, (uint64_t)&__str, 0);
    uint64_t v18 = (ImsResult *)&v26;
  }
  else
  {
    if (!((unsigned int (*)(void **))(*v6)[18])(v6))
    {
      uint64_t v23 = (std::__shared_weak_count *)a1[98];
      if (v23) {
        std::__shared_weak_count::lock(v23);
      }
      uint64_t v24 = a1[199];
      if (v24) {
        (*(void (**)(uint64_t))(*(void *)v24 + 8))(v24);
      }
      operator new();
    }
    uint64_t v22 = (*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
    (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"received CANCEL for a completed INVITE. Terminating.", 52);
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v22 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__str, "RemoteCancel");
    SipSession::bye((std::__shared_weak_count *)a1, (uint64_t)&__str, 0);
    uint64_t v18 = (ImsResult *)&v25;
  }
LABEL_25:
  ImsResult::~ImsResult(v18);
LABEL_26:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
}

void sub_1C535A110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (*(char *)(v40 - 105) < 0) {
    operator delete(*(void **)(v40 - 128));
  }
  if (a36 < 0) {
    operator delete(__p);
  }
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v40 - 72);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::handleSessionProgressResponse(SipSession *a1, uint64_t a2)
{
  if (SipSession::confirmed(a1)) {
    return;
  }
  uint64_t v4 = *((void *)a1 + 31);
  uint64_t v5 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
  if (v5) {
    uint64_t v6 = SipUriHeader::tag(v5);
  }
  else {
    uint64_t v6 = &ims::kEmptyString;
  }
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v4 + 2048, (void **)v6);
  if ((void **)(v4 + 2056) == v7)
  {
    uint64_t v9 = 0;
    goto LABEL_14;
  }
  uint64_t v8 = (char *)v7[7];
  uint64_t v9 = (std::__shared_weak_count *)v7[8];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v8)
  {
LABEL_14:
    uint64_t v10 = (*(uint64_t (**)(SipSession *))(*(void *)a1 + 56))(a1);
    (*(void (**)(SipSession *, uint64_t))(*(void *)a1 + 16))(a1, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"no fork for 183 response", 24);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (!v9) {
      return;
    }
    goto LABEL_10;
  }
  SipPreconditions::updateFromIncomingMessage((uint64_t)a1 + 1432, (std::string *)(v8 + 152), a2);
  if (!v9) {
    return;
  }
LABEL_10:
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void sub_1C535A3CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::schedulePendingInvite(std::string *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a2 + 384, (void **)"InviteType");
  if ((void **)(a2 + 392) == v4) {
    uint64_t v5 = (const std::string *)&ims::kEmptyString;
  }
  else {
    uint64_t v5 = (const std::string *)(v4 + 7);
  }
  std::string::operator=(a1 + 72, v5);
  if (SHIBYTE(a1[72].__r_.__value_.__r.__words[2]) < 0)
  {
    if (a1[72].__r_.__value_.__l.__size_) {
      goto LABEL_6;
    }
LABEL_15:
    uint64_t v10 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 32))(a1);
    (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"INVITE transaction doesn't have an InviteType tag. Can't schedule a retry.", 74);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    return;
  }
  if (!*((unsigned char *)&a1[72].__r_.__value_.__s + 23)) {
    goto LABEL_15;
  }
LABEL_6:
  random();
  std::string::size_type v7 = a1[7].__r_.__value_.__r.__words[2];
  data = (std::__shared_weak_count *)a1[8].__r_.__value_.__l.__data_;
  if (data)
  {
    atomic_fetch_add_explicit(&data->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&data->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (*(uint64_t (**)(std::string *))(a1->__r_.__value_.__r.__words[0] + 64))(a1);
  (*(void (**)(std::string *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 16))(a1, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"will re-attempt outgoing ", 25);
  *(unsigned char *)(v8 + 17) = 0;
  LoggableString::LoggableString(&__p, a1 + 72);
  (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" in ", 4);
  *(unsigned char *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"ms", 2);
  *(unsigned char *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (data) {
    atomic_fetch_add_explicit(&data->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = 0;
  uint64_t v9 = operator new(0x20uLL);
  *uint64_t v9 = &unk_1F20C52E8;
  v9[1] = a1;
  uint64_t v9[2] = v7;
  void v9[3] = data;
  uint64_t v13 = v9;
  SipTimerContainer::startTimer((int8x8_t *)&a1[11].__r_.__value_.__r.__words[1], (uint64_t)"GlareTimer");
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v12);
  if (data)
  {
    std::__shared_weak_count::__release_weak(data);
    std::__shared_weak_count::__release_weak(data);
  }
}

void sub_1C535A78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](&a15);
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(a1);
}

void SipSession::schedulePendingReinviteForTTY(SipSession *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 31);
  if (*(unsigned char *)(v2 + 1928))
  {
    uint64_t v3 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v3);
    uint64_t v4 = *(void **)(v3 + 8);
    uint64_t v5 = "Not scheduling Reinvite for TTY for MO call";
    uint64_t v6 = 43;
LABEL_3:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    return;
  }
  uint64_t v7 = *(void *)(v2 + 216);
  if (v7) {
    uint64_t v8 = *(SipUserAgent **)(v7 + 136);
  }
  else {
    uint64_t v8 = 0;
  }
  if (!*(_DWORD *)(SipUserAgent::config(v8) + 820))
  {
    uint64_t v3 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v3);
    uint64_t v4 = *(void **)(v3 + 8);
    uint64_t v5 = "Not scheduling Reinvite for TTY, since timeout value is configured to 0";
    uint64_t v6 = 71;
    goto LABEL_3;
  }
  uint64_t v10 = *((void *)this + 23);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
  (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"will attempt outgoing ", 22);
  *(unsigned char *)(v11 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)this + 72);
  (*(void (**)(uint64_t, std::string *))(*(void *)v11 + 40))(v11, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" in ", 4);
  *(unsigned char *)(v11 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v11 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"ms", 2);
  *(unsigned char *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v11 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = 0;
  uint64_t v12 = operator new(0x20uLL);
  *uint64_t v12 = &unk_1F20C5368;
  v12[1] = this;
  _OWORD v12[2] = v10;
  void v12[3] = v9;
  uint64_t v15 = v12;
  SipTimerContainer::startTimer((int8x8_t *)this + 52, (uint64_t)"TTYReinviteTimer");
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v14);
  if (v9)
  {
    std::__shared_weak_count::__release_weak(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
}

void sub_1C535AB5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](&a15);
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(a1);
}

void SipSession::upgradeToRtt(std::__shared_weak_count *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = this[30].__vftable;
  if (!v6 || (*((unsigned int (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 6))(v6) != 7)
  {
    if (!a2)
    {
      uint64_t v7 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].__get_deleter)(this);
      ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"Skipping reINVITE for existing text session.", 44);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(void *)a3 = &unk_1F20B2680;
      *(void *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
      return;
    }
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    SipSession::sendInvite((uint64_t *)this, (uint64_t)"InviteTypeTTYReinvite", (ImsResult *)&v14);
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v10.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v10.__r_.__value_.__r.__words[2]) = 0;
    if (*((uint64_t **)&v14 + 1) == &_bambiDomain)
    {
      int v8 = v15;
      ImsResult::~ImsResult((ImsResult *)&v10);
      if (!v8)
      {
        ImsResult::ImsResult(a3, (uint64_t)&v14);
        ImsResult::~ImsResult((ImsResult *)&v14);
        return;
      }
    }
    else
    {
      ImsResult::~ImsResult((ImsResult *)&v10);
    }
    uint64_t v9 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].~__shared_weak_count_0)(this);
    ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"unable to send RTT re-INVITE: ", 30);
    *(unsigned char *)(v9 + 17) = 0;
    (*(void (**)(long long *, uint64_t))(v14 + 16))(&v14, v9);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v9 + 17) = 0;
    SipSession::schedulePendingReinviteForTTY((SipSession *)this);
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    v10.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    v10.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v10.__r_.__value_.__r.__words[2]) = 1073741838;
    ims::result::resultWithCause(&v10, (const ImsResult *)&v14, a3);
  }
  SipSession::answerRttUpgradeRequest(this, (ImsResult *)a3);
}

void sub_1C535AF10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult((ImsResult *)va1);
  _Unwind_Resume(a1);
}

void SipSession::answerRttUpgradeRequest(std::__shared_weak_count *this@<X0>, ImsResult *a2@<X8>)
{
  shared_weak_owners = (std::__shared_weak_count *)this[32].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    uint64_t v5 = std::__shared_weak_count::lock(shared_weak_owners);
    if (v5 && this[32].__shared_owners_)
    {
      uint64_t v6 = this[30].__vftable;
      uint64_t shared_owners = (std::__shared_weak_count *)this[30].__shared_owners_;
      if (shared_owners) {
        atomic_fetch_add_explicit(&shared_owners->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v8 = (*((uint64_t (**)(std::__shared_weak_count_vtbl *))v6->~__shared_weak_count + 6))(v6);
      p_shared_weak_owners = &this[27].__shared_weak_owners_;
      if (shared_owners) {
        std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
      }
      if (v8 == 7)
      {
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        SipSession::serverInviteTransaction((SipSession *)this, &v36);
        uint64_t v10 = v36;
        if (!v36)
        {
          (*(void (**)(uint64_t *, uint64_t))(*p_shared_weak_owners + 32))(&this[27].__shared_weak_owners_, 6);
          memset((char *)v28 + 8, 0, 48);
          v27[0] = &unk_1F20B2680;
          v27[1] = &_bambiDomain;
          LODWORD(v28[0]) = 1073741826;
          operator new();
        }
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        ((void (*)(uint64_t *__return_ptr, std::__shared_weak_count *))this->__vftable[3].~__shared_weak_count_0)(&v34, this);
        if (!v34)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "InternalError");
          SipSessionInterface::terminationReason(this, (uint64_t)__p, (BambiCallTerminationReason *)v27);
          SipSession::hangUp((SipSession *)this, (uint64_t)v33);
          ImsResult::~ImsResult((ImsResult *)v33);
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v30[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v30[1]);
          }
          if (SHIBYTE(v29) < 0) {
            operator delete(*((void **)&v28[3] + 1));
          }
          if (SBYTE7(v28[2]) < 0) {
            operator delete(*(void **)&v28[1]);
          }
          if (SHIBYTE(v28[0]) < 0) {
            operator delete(v27[1]);
          }
          if (SBYTE7(v22) < 0) {
            operator delete(__p[0]);
          }
          memset((char *)v28 + 8, 0, 48);
          v27[0] = &unk_1F20B2680;
          v27[1] = &_bambiDomain;
          LODWORD(v28[0]) = 1073741826;
          operator new();
        }
        uint64_t v31 = 0;
        long long v29 = 0u;
        *(_OWORD *)char v30 = 0u;
        memset(v28, 0, sizeof(v28));
        *(_OWORD *)std::string v27 = 0u;
        SipResponse::SipResponse((SipResponse *)v27, 200, *(const SipRequest **)(v10 + 296));
        uint64_t v11 = *(const SipRequest **)(v10 + 296);
        uint64_t v12 = v37;
        v26[0] = v10;
        v26[1] = v37;
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipSession::generateResponseForInviteOrUpdateRequest((uint64_t)this, v11, v26, (SipResponse *)v27);
        if (v12)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          uint64_t v25 = 0;
          long long v23 = 0u;
          long long v24 = 0u;
          *(_OWORD *)std::string __p = 0u;
          long long v22 = 0u;
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        else
        {
          uint64_t v25 = 0;
          long long v23 = 0u;
          long long v24 = 0u;
          *(_OWORD *)std::string __p = 0u;
          long long v22 = 0u;
        }
        v20[0] = v10;
        v20[1] = v12;
        SipSession::sendResponseToInviteOrUpdateRequest((ImsResult *)__p, (int8x8_t *)this, (SipResponse *)v27, v20);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        (*(void (**)(uint64_t *, uint64_t))(*p_shared_weak_owners + 32))(&this[27].__shared_weak_owners_, 6);
        uint64_t v19 = ImsLogContainer::logResult((ImsLogContainer *)this, (ImsResult *)__p);
        ImsResult::ImsResult(a2, (const std::string *)v19);
        ImsResult::~ImsResult((ImsResult *)__p);
        v27[0] = &unk_1F20DD488;
        if (SHIBYTE(v31) < 0) {
          operator delete(v30[0]);
        }
        SipMessage::~SipMessage((SipMessage *)v27);
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
      }
      else
      {
        memset((char *)v28 + 8, 0, 48);
        v27[0] = &unk_1F20B2680;
        v27[1] = &_bambiDomain;
        LODWORD(v28[0]) = 1073741826;
        ImsResult::operator<<<char [66]>((uint64_t)v27, "answerRttUpgradeRequest: RTT upgrade response attempted in state ");
        uint64_t v15 = (*(uint64_t (**)(uint64_t *))(*p_shared_weak_owners + 24))(&this[27].__shared_weak_owners_);
        long long v16 = (const std::string *)(*(uint64_t (**)(uint64_t *, uint64_t))(*p_shared_weak_owners + 16))(&this[27].__shared_weak_owners_, v15);
        LoggableString::LoggableString((std::string *)__p, v16);
        long long v17 = (ImsResult *)ImsResult::operator<<<LoggableString>((uint64_t)v27, (uint64_t)__p);
        uint64_t v18 = ImsLogContainer::logResult((ImsLogContainer *)this, v17);
        ImsResult::ImsResult(a2, (const std::string *)v18);
        if (SBYTE7(v22) < 0) {
          operator delete(__p[0]);
        }
        ImsResult::~ImsResult((ImsResult *)v27);
      }
      goto LABEL_44;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  memset((char *)v28 + 8, 0, 48);
  v27[0] = &unk_1F20B2680;
  v27[1] = &_bambiDomain;
  LODWORD(v28[0]) = 1073741826;
  long long v13 = (ImsResult *)ImsResult::operator<<<char [40]>((uint64_t)v27, "answerRttUpgradeRequest: no call object");
  long long v14 = ImsLogContainer::logResult((ImsLogContainer *)this, v13);
  ImsResult::ImsResult(a2, (const std::string *)v14);
  ImsResult::~ImsResult((ImsResult *)v27);
  if (v5) {
LABEL_44:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C535B538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  MEMORY[0x1C878E320](v27, 0x10A1C4082A5C483);
  ImsResult::~ImsResult((ImsResult *)&a26);
  char v30 = *(std::__shared_weak_count **)(v28 - 104);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  uint64_t v31 = *(std::__shared_weak_count **)(v28 - 88);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

uint64_t SipSession::hangUp@<X0>(SipSession *a1@<X0>, uint64_t a2@<X8>)
{
  memset(v19, 0, sizeof(v19));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v14, (void *)a1 + 23);
  if (v14) {
    uint64_t v4 = (std::__shared_weak_count *)(v14 + 104);
  }
  else {
    uint64_t v4 = 0;
  }
  long long v17 = v4;
  uint64_t v18 = v15;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  LoggableString::LoggableString((LoggableString *)__p, "hangUp");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock(v19, &v17, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  BOOL v5 = SipSession::terminating(a1);
  uint64_t v6 = *(void *)a1;
  if (v5)
  {
    uint64_t v7 = (*(uint64_t (**)(SipSession *))(v6 + 64))(a1);
    (*(void (**)(SipSession *, uint64_t))(*(void *)a1 + 16))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"hangUp: already terminating", 27);
    *(unsigned char *)(v7 + 17) = 0;
    int v8 = (unsigned char *)(v7 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    if (!(*(unsigned int (**)(SipSession *))(v6 + 264))(a1))
    {
      uint64_t v11 = *((void *)a1 + 198);
      if (v11)
      {
        uint64_t v12 = *(std::__shared_weak_count **)(v11 + 120);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        long long v13 = *(std::__shared_weak_count **)(v11 + 104);
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        if (*(char *)(v11 + 95) < 0) {
          operator delete(*(void **)(v11 + 72));
        }
        if (*(char *)(v11 + 55) < 0) {
          operator delete(*(void **)(v11 + 32));
        }
        if (*(char *)(v11 + 31) < 0) {
          operator delete(*(void **)(v11 + 8));
        }
        MEMORY[0x1C878E320](v11, 0x1032C40D4AF1F8FLL);
      }
      operator new();
    }
    uint64_t v9 = (*(uint64_t (**)(SipSession *))(*(void *)a1 + 64))(a1);
    (*(void (**)(SipSession *, uint64_t))(*(void *)a1 + 16))(a1, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"hangUp: already terminated", 26);
    *(unsigned char *)(v9 + 17) = 0;
    int v8 = (unsigned char *)(v9 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  unsigned char *v8 = 0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(void *)a2 = &unk_1F20B2680;
  *(void *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v19);
}

void sub_1C535BCEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v25 - 112);
  _Unwind_Resume(a1);
}

void SipSession::generateResponseForInviteOrUpdateRequest(uint64_t a1, const SipRequest *a2, void *a3, SipResponse *a4)
{
  int v8 = *(std::__shared_weak_count **)(a1 + 784);
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = *(BambiCall **)(a1 + 776);
      if (v10)
      {
        int v11 = 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (*(unsigned char *)(a1 + 1352))
  {
    int v11 = 0;
    uint64_t v10 = 0;
    goto LABEL_8;
  }
  uint64_t v19 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
  uint64_t v20 = v19[23];
  if ((v20 & 0x80u) == 0) {
    uint64_t v21 = v19[23];
  }
  else {
    uint64_t v21 = *((void *)v19 + 1);
  }
  if (v21 != 6) {
    goto LABEL_73;
  }
  if ((v20 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v19, "UPDATE", *((void *)v19 + 1))) {
      goto LABEL_69;
    }
LABEL_73:
    uint64_t v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"handleInviteOrUpdateRequest: no call", 36);
    *(unsigned char *)(v36 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v36 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v106, "InternalError");
    SipSessionInterface::terminationReason((std::__shared_weak_count *)a1, (uint64_t)&v106, (BambiCallTerminationReason *)v109);
    SipSession::generateTerminationResponse((void *)a1, (const BambiCallTerminationReason *)v109, a4);
LABEL_115:
    if (v113) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v113);
    }
    if (v112) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v112);
    }
    if (v111 < 0) {
      operator delete(__p);
    }
    if (v109[2].__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v109[1].__r_.__value_.__l.__size_);
    }
    if (v109[1].__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v109[0].__r_.__value_.__l.__size_);
    }
    if (v108 < 0) {
      operator delete(v106);
    }
    goto LABEL_234;
  }
  if (v19[23])
  {
    long long v22 = "UPDATE";
    while (*v19 == *(unsigned __int8 *)v22)
    {
      ++v19;
      ++v22;
      if (!--v20) {
        goto LABEL_69;
      }
    }
    goto LABEL_73;
  }
LABEL_69:
  uint64_t v33 = SipMessage::body<SipSdpBody>((uint64_t)a2);
  if (v33)
  {
    uint64_t v35 = *((void *)v33 + 1);
    uint64_t v34 = (std::__shared_weak_count *)*((void *)v33 + 2);
    if (v34)
    {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    if (v35) {
      goto LABEL_73;
    }
  }
  uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"handleInviteOrUpdateRequest: allowing empty UPDATE in headless state", 68);
  *(unsigned char *)(v37 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  int v11 = 0;
  uint64_t v10 = 0;
  *(unsigned char *)(v37 + 17) = 0;
LABEL_8:
  if (*(void *)(a1 + 1144) || !*(unsigned char *)(a1 + 1352)) {
    goto LABEL_9;
  }
  uint64_t v15 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
  uint64_t v16 = v15[23];
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = v15[23];
  }
  else {
    uint64_t v17 = *((void *)v15 + 1);
  }
  if (v17 != 6) {
    goto LABEL_114;
  }
  if ((v16 & 0x80) == 0)
  {
    if (v15[23])
    {
      uint64_t v18 = "UPDATE";
      while (*v15 == *(unsigned __int8 *)v18)
      {
        ++v15;
        ++v18;
        if (!--v16) {
          goto LABEL_110;
        }
      }
      goto LABEL_114;
    }
    goto LABEL_110;
  }
  if (memcmp(*(const void **)v15, "UPDATE", *((void *)v15 + 1)))
  {
LABEL_114:
    uint64_t v60 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v60 + 8), (uint64_t)"handleInviteOrUpdateRequest: no lazuli session", 46);
    *(unsigned char *)(v60 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v60 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v106, "InternalError");
    SipSessionInterface::terminationReason((std::__shared_weak_count *)a1, (uint64_t)&v106, (BambiCallTerminationReason *)v109);
    SipSession::generateTerminationResponse((void *)a1, (const BambiCallTerminationReason *)v109, a4);
    goto LABEL_115;
  }
LABEL_110:
  uint64_t v57 = SipMessage::body<SipSdpBody>((uint64_t)a2);
  if (v57)
  {
    uint64_t v59 = *((void *)v57 + 1);
    uint64_t v58 = (std::__shared_weak_count *)*((void *)v57 + 2);
    if (v58)
    {
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v58);
    }
    if (v59) {
      goto LABEL_114;
    }
  }
  uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v61);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)"handleInviteOrUpdateRequest: allowing empty UPDATE in headless state", 68);
  *(unsigned char *)(v61 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v61 + 17) = 0;
LABEL_9:
  uint64_t v12 = *(void *)(a1 + 248);
  long long v13 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2);
  if (v13) {
    uint64_t v14 = SipUriHeader::tag(v13);
  }
  else {
    uint64_t v14 = &ims::kEmptyString;
  }
  long long v23 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v12 + 2048, (void **)v14);
  if ((void **)(v12 + 2056) == v23)
  {
    long long v24 = 0;
LABEL_48:
    uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"handleInviteOrUpdateRequest: couldn't find appropriate fork for remote tag ", 75);
    *(unsigned char *)(v30 + 17) = 0;
    uint64_t v31 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2);
    if (v31) {
      char v32 = SipUriHeader::tag(v31);
    }
    else {
      char v32 = &ims::kEmptyString;
    }
    ObfuscatedString::ObfuscatedString((uint64_t)v109, (const std::string *)v32);
    (*(void (**)(uint64_t, std::string *))(*(void *)v30 + 56))(v30, v109);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v30 + 17) = 0;
    if (SHIBYTE(v109[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109[1].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v109[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v109[0].__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v106, "InternalError");
    SipSessionInterface::terminationReason((std::__shared_weak_count *)a1, (uint64_t)&v106, (BambiCallTerminationReason *)v109);
    SipSession::generateTerminationResponse((void *)a1, (const BambiCallTerminationReason *)v109, a4);
    goto LABEL_56;
  }
  uint64_t v25 = (char *)v23[7];
  long long v24 = (std::__shared_weak_count *)v23[8];
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v25) {
    goto LABEL_48;
  }
  char v26 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
  uint64_t v27 = v26[23];
  if ((v27 & 0x80u) == 0) {
    uint64_t v28 = v26[23];
  }
  else {
    uint64_t v28 = *((void *)v26 + 1);
  }
  char v91 = v25;
  uint64_t v92 = a3;
  if (v28 != 6) {
    goto LABEL_76;
  }
  if ((v27 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v26, "INVITE", *((void *)v26 + 1))) {
      goto LABEL_87;
    }
LABEL_76:
    int v93 = 0;
    char v38 = 1;
    goto LABEL_77;
  }
  if (v26[23])
  {
    long long v29 = "INVITE";
    while (*v26 == *(unsigned __int8 *)v29)
    {
      ++v26;
      ++v29;
      if (!--v27) {
        goto LABEL_87;
      }
    }
    goto LABEL_76;
  }
LABEL_87:
  int v43 = SipSession::confirmed((SipSession *)a1);
  uint64_t v44 = *a3;
  uint64_t v45 = (std::__shared_weak_count *)v92[1];
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)&v109[0].__r_.__value_.__l.__data_ = 0uLL;
  SipSession::serverInviteTransaction((SipSession *)a1, (uint64_t *)v109);
  int v94 = v43;
  if (v109[0].__r_.__value_.__r.__words[0] && v109[0].__r_.__value_.__r.__words[0] != v44)
  {
    *((_DWORD *)a4 + 22) = 500;
    int v46 = random();
    uint64_t v47 = SipMessage::headerWithName(a4, "Retry-After", 1);
    uint64_t v48 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v48 + 8), (uint64_t)"received an incoming INVITE while we're already processing another one", 70);
    *(unsigned char *)(v48 + 17) = 0;
    uint64_t v49 = (unsigned char *)(v48 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_102:
    char v56 = 0;
    *uint64_t v49 = 0;
    goto LABEL_103;
  }
  SipSession::clientInviteTransaction((SipSession *)a1, (uint64_t *)&v106);
  uint64_t v54 = v106;
  if (v107) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v107);
  }
  if (v54)
  {
    *((_DWORD *)a4 + 22) = 491;
    uint64_t v55 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"received an incoming INVITE while we're waiting for a response to our INVITE", 76);
    *(unsigned char *)(v55 + 17) = 0;
    uint64_t v49 = (unsigned char *)(v55 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_102;
  }
  char v56 = 1;
LABEL_103:
  int v93 = v94 ^ 1;
  if (v109[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v109[0].__r_.__value_.__l.__size_);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  char v38 = v93;
  if ((v56 & 1) == 0) {
    goto LABEL_232;
  }
LABEL_77:
  if (!SipSessionTimer::validateIncomingRequestAndUpdateResponse(*(SipSessionTimer **)(a1 + 1376), a2, (std::string *)a4))goto LABEL_232; {
  std::string::size_type v39 = SipMessage::body<SipSdpBody>((uint64_t)a2);
  }
  if (v39 && !v39[48])
  {
    std::string::basic_string[abi:ne180100]<0>(&v106, "InvalidSdp");
    SipSessionInterface::terminationReason((std::__shared_weak_count *)a1, (uint64_t)&v106, (BambiCallTerminationReason *)v109);
    SipSession::generateTerminationResponse((void *)a1, (const BambiCallTerminationReason *)v109, a4);
LABEL_56:
    if (v113) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v113);
    }
    if (v112) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v112);
    }
    if (v111 < 0) {
      operator delete(__p);
    }
    if (v109[2].__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v109[1].__r_.__value_.__l.__size_);
    }
    if (v109[1].__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)v109[0].__r_.__value_.__l.__size_);
    }
    if (v108 < 0) {
      operator delete(v106);
    }
    goto LABEL_232;
  }
  if (!v93)
  {
    if (v38) {
      goto LABEL_151;
    }
    uint64_t v50 = SipMessage::body<SipSdpBody>((uint64_t)a2);
    if (v50)
    {
      uint64_t v51 = *((void *)v50 + 1);
      BOOL v52 = (std::__shared_weak_count *)*((void *)v50 + 2);
      if (v52) {
        atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v51)
      {
        int v53 = 0;
LABEL_146:
        if (v52) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v52);
        }
        if (v53)
        {
          uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), (uint64_t)"Got an empty INVITE, trying to resume the call", 46);
          *(unsigned char *)(v66 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v66 + 17) = 0;
          if (v11) {
            BambiCall::handleEmptyInvite(v10);
          }
        }
LABEL_151:
        SipSessionInterface::stack((std::__shared_weak_count *)a1, v109);
        uint64_t v67 = *(void *)(v109[0].__r_.__value_.__r.__words[0] + 136);
        long long v97 = v10;
        std::string::size_type v98 = v9;
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (BambiClient::callCountExcludingCall(v67, &v97))
        {
          SipSessionInterface::stack((std::__shared_weak_count *)a1, &v106);
          int v68 = v93;
          if (!*(unsigned char *)(*((void *)v106 + 17) + 688)) {
            int v68 = 0;
          }
          if (v68 == 1)
          {
            uint64_t v69 = *(void *)(a1 + 248);
            if (v69 && (uint64_t v70 = *(void *)(v69 + 216)) != 0) {
              char v71 = *(SipUserAgent **)(v70 + 136);
            }
            else {
              char v71 = 0;
            }
            BOOL v72 = *(unsigned char *)(SipUserAgent::config(v71) + 1155) != 0;
          }
          else
          {
            BOOL v72 = 0;
          }
          if (v107) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v107);
          }
        }
        else
        {
          BOOL v72 = 0;
        }
        if (v98) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v98);
        }
        if (v109[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v109[0].__r_.__value_.__l.__size_);
        }
        if (v72)
        {
          uint64_t v73 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v73);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v73 + 8), (uint64_t)"Got INVITE, but in a call and call waiting is disabled", 54);
          *(unsigned char *)(v73 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v73 + 64))(v73, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v73 + 17) = 0;
          std::string::basic_string[abi:ne180100]<0>(&v106, "CallWaitingDisabled");
          SipSessionInterface::terminationReason((std::__shared_weak_count *)a1, (uint64_t)&v106, (BambiCallTerminationReason *)v109);
          SipSession::generateTerminationResponse((void *)a1, (const BambiCallTerminationReason *)v109, a4);
          if (v113) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v113);
          }
          if (v112) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v112);
          }
          if (v111 < 0) {
            operator delete(__p);
          }
          if (v109[2].__r_.__value_.__s.__data_[7] < 0) {
            operator delete((void *)v109[1].__r_.__value_.__l.__size_);
          }
          if (v109[1].__r_.__value_.__s.__data_[7] < 0) {
            operator delete((void *)v109[0].__r_.__value_.__l.__size_);
          }
          if (v108 < 0) {
            operator delete(v106);
          }
          SipSessionInterface::stack((std::__shared_weak_count *)a1, &v106);
          uint64_t v74 = *((void *)v106 + 17);
          SipSessionInterface::stack((std::__shared_weak_count *)a1, &v95);
          if (*(char *)(v95 + 4183) < 0) {
            std::string::__init_copy_ctor_external(v109, *(const std::string::value_type **)(v95 + 4160), *(void *)(v95 + 4168));
          }
          else {
            v109[0] = *(std::string *)(v95 + 4160);
          }
          uint64_t v81 = *(void *)(v74 + 248);
          if (v81) {
            (*(void (**)(uint64_t))(*(void *)v81 + 104))(v81);
          }
          if (SHIBYTE(v109[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v109[0].__r_.__value_.__l.__data_);
          }
          if (v96) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v96);
          }
          if (v107) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v107);
          }
          goto LABEL_232;
        }
        if (v93)
        {
          SipPreconditions::initializeMobileTerminated((_DWORD *)(a1 + 1432), (_OWORD *)(a1 + 844), (uint64_t)a2);
        }
        else if (!SipSession::confirmed((SipSession *)a1) || *(unsigned char *)(a1 + 865))
        {
          SipSession::confirmed((SipSession *)a1);
          SipPreconditions::updateFromIncomingMessage(a1 + 1432, (std::string *)(v91 + 152), (uint64_t)a2);
        }
        memset(v109, 0, sizeof(v109));
        std::string v75 = (SipOfferAnswer *)*((void *)v91 + 82);
        int v76 = (std::__shared_weak_count *)*((void *)v91 + 83);
        if (v76) {
          atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipOfferAnswer::updateWithIncomingRequest(v75, a2, (std::string *)(*v92 + 328), (uint64_t)v109);
        if (v76) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v76);
        }
        if ((*(unsigned int (**)(std::string::size_type, void))(*(void *)v109[0].__r_.__value_.__l.__size_
                                                                            + 24))(v109[0].__r_.__value_.__l.__size_, LODWORD(v109[0].__r_.__value_.__r.__words[2])))
        {
          SipSession::generateTerminationResponse((std::__shared_weak_count *)a1, (const ImsResult *)v109, a4);
          goto LABEL_231;
        }
        if (!v93)
        {
          if ((*((_DWORD *)a4 + 22) - 200) > 0x63)
          {
LABEL_225:
            if (*(char *)(a1 + 1431) < 0) {
              uint64_t v89 = *(void *)(a1 + 1416);
            }
            else {
              uint64_t v89 = *(unsigned __int8 *)(a1 + 1431);
            }
            if (!v89)
            {
              uint64_t v90 = (char *)SipMessage::header<SipPBambiCallIdHeader>((uint64_t)a2);
              if (v90) {
                std::string::operator=((std::string *)(a1 + 1408), (const std::string *)(v90 + 64));
              }
            }
            goto LABEL_231;
          }
          goto LABEL_224;
        }
        SipDialogFork::updateRouteSet((SipDialogFork *)v91, a2, 0);
        uint64_t v77 = *(void *)(*(void *)(*(void *)(a1 + 248) + 216) + 136);
        uint64_t v79 = *(void *)(v77 + 248);
        int v78 = *(std::__shared_weak_count **)(v77 + 256);
        if (v78)
        {
          atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
          int v80 = *(unsigned __int8 *)(v79 + 4176);
          std::__shared_weak_count::__release_shared[abi:ne180100](v78);
          if (!v80) {
            goto LABEL_219;
          }
        }
        else if (!*(unsigned char *)(v79 + 4176))
        {
LABEL_219:
          uint64_t v85 = *(void *)(*(void *)(*(void *)(a1 + 248) + 216) + 136);
          uint64_t v87 = *(void *)(v85 + 248);
          uint64_t v86 = *(std::__shared_weak_count **)(v85 + 256);
          if (v86)
          {
            atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
            int v88 = *(unsigned __int8 *)(v87 + 4177);
            std::__shared_weak_count::__release_shared[abi:ne180100](v86);
            if (!v88) {
              goto LABEL_224;
            }
            goto LABEL_223;
          }
          if (*(unsigned char *)(v87 + 4177)) {
LABEL_223:
          }
            SipSession::parseSpamHeaders((SipSession *)a1, a2);
LABEL_224:
          SipDialogFork::handleTargetRefresh((SipDialogFork *)v91, a2);
          goto LABEL_225;
        }
        SipSession::parseVerstatParams((std::__shared_weak_count *)a1, a2);
        SipSessionInterface::stack((std::__shared_weak_count *)a1, &v106);
        int v82 = (ImsPrefs *)SipStack::prefs(v106);
        EnableBrandedCallingKey = (void **)ImsPrefs::getEnableBrandedCallingKey(v82);
        if (ImsPrefs::BOOLValue(v82, EnableBrandedCallingKey))
        {
          int v84 = *(_DWORD *)(a1 + 1644);
          if (v107) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v107);
          }
          if (v84 == 1) {
            SipSession::parseBrandedCallingHeaders((std::string *)a1, a2);
          }
        }
        else if (v107)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v107);
        }
        goto LABEL_219;
      }
    }
    else
    {
      BOOL v52 = 0;
    }
    uint64_t v63 = *(void *)(a1 + 248);
    if (v63 && (uint64_t v64 = *(void *)(v63 + 216)) != 0) {
      uint64_t v65 = *(SipUserAgent **)(v64 + 136);
    }
    else {
      uint64_t v65 = 0;
    }
    if (*(unsigned char *)(SipUserAgent::config(v65) + 816)) {
      int v53 = 1;
    }
    else {
      int v53 = SipSession::confirmed((SipSession *)a1);
    }
    goto LABEL_146;
  }
  uint64_t v40 = SipMessage::body<SipSdpBody>((uint64_t)a2);
  if (v40)
  {
    uint64_t v42 = *((void *)v40 + 1);
    uint64_t v41 = (std::__shared_weak_count *)*((void *)v40 + 2);
    if (v41)
    {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    if (v42) {
      goto LABEL_151;
    }
  }
  memset(&v109[1], 0, 48);
  v109[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  v109[0].__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  v109[0].__r_.__value_.__r.__words[2] = 0x40000000;
  if (v11)
  {
    uint64_t v104 = 0;
    long long v105 = 0;
    BambiCall::initializeMediaForMTSession(v10, &v104, (uint64_t)&v106);
  }
  else
  {
    long long v101 = 0uLL;
    long long v102 = 0uLL;
    long long v103 = 0uLL;
    v99[0] = &unk_1F20B2680;
    v99[1] = &_bambiDomain;
    int v100 = 0x40000000;
    char v62 = (const std::string *)ImsResult::operator<<<char [8]>((uint64_t)v99, "no call");
    ImsResult::ImsResult((ImsResult *)&v106, v62);
  }
  ImsResult::operator=((uint64_t)v109, (uint64_t)&v106);
  ImsResult::~ImsResult((ImsResult *)&v106);
  if (v11)
  {
    if (v105) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v105);
    }
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)v99);
  }
  if (!(*(unsigned int (**)(std::string::size_type, void))(*(void *)v109[0].__r_.__value_.__l.__size_
                                                                       + 24))(v109[0].__r_.__value_.__l.__size_, LODWORD(v109[0].__r_.__value_.__r.__words[2])))
  {
    ImsResult::~ImsResult((ImsResult *)v109);
    goto LABEL_151;
  }
  SipSession::generateTerminationResponse((std::__shared_weak_count *)a1, (const ImsResult *)v109, a4);
LABEL_231:
  ImsResult::~ImsResult((ImsResult *)v109);
LABEL_232:
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
LABEL_234:
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C535D060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::handleInviteOrUpdateRequest(int8x8_t *a1, const SipRequest *a2, void *a3)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  if (SipSession::confirmed((SipSession *)a1)) {
    goto LABEL_13;
  }
  uint64_t v6 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
  uint64_t v7 = v6[23];
  uint64_t v8 = (v7 & 0x80u) == 0 ? v6[23] : *((void *)v6 + 1);
  if (v8 != 6) {
    goto LABEL_13;
  }
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v6, "INVITE", *((void *)v6 + 1))) {
      goto LABEL_13;
    }
LABEL_27:
    std::string::basic_string[abi:ne180100]<0>(&__p, "100rel");
    BOOL v17 = SipMessage::supportsOption((uint64_t)a2, (void **)&__p);
    BOOL v18 = v17;
    if (SBYTE7(v99) < 0)
    {
      operator delete((void *)__p);
      if (v18)
      {
LABEL_83:
        BOOL v23 = 1;
        goto LABEL_43;
      }
    }
    else if (v17)
    {
      goto LABEL_83;
    }
    uint64_t v44 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v44 + 8), (uint64_t)"Incoming INVITE doesn't support 100rel", 38);
    *(unsigned char *)(v44 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v44 + 17) = 0;
    a1[219].i8[5] = 0;
    goto LABEL_83;
  }
  if (!v6[23]) {
    goto LABEL_27;
  }
  uint64_t v9 = "INVITE";
  while (*v6 == *(unsigned __int8 *)v9)
  {
    ++v6;
    ++v9;
    if (!--v7) {
      goto LABEL_27;
    }
  }
LABEL_13:
  uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
  uint64_t v11 = v10[23];
  if ((v11 & 0x80u) == 0) {
    uint64_t v12 = v10[23];
  }
  else {
    uint64_t v12 = *((void *)v10 + 1);
  }
  if (v12 != 6) {
    goto LABEL_42;
  }
  if ((v11 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v10, "INVITE", *((void *)v10 + 1))) {
      goto LABEL_42;
    }
  }
  else if (v10[23])
  {
    long long v13 = "INVITE";
    while (*v10 == *(unsigned __int8 *)v13)
    {
      ++v10;
      ++v13;
      if (!--v11) {
        goto LABEL_24;
      }
    }
    goto LABEL_42;
  }
LABEL_24:
  uint64_t v14 = SipMessage::body<SipSdpBody>((uint64_t)a2);
  if (v14)
  {
    uint64_t v16 = *((void *)v14 + 1);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v14 + 2);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v19 = (std::__shared_weak_count *)a1[98];
  if (!v19 || (uint64_t v20 = std::__shared_weak_count::lock(v19)) == 0)
  {
    BOOL v23 = 0;
    if (!v15) {
      goto LABEL_68;
    }
    goto LABEL_41;
  }
  uint64_t v21 = v20;
  int8x8_t v22 = a1[97];
  if (!*(void *)&v22) {
    goto LABEL_66;
  }
  BOOL v23 = 0;
  if (!*(unsigned char *)(*(void *)&v22 + 753) && v16)
  {
    for (uint64_t i = *(void *)(v16 + 416); i != *(void *)(v16 + 424); i += 200)
    {
      if (*(_DWORD *)(i + 12) == 4)
      {
        SipSessionInterface::stack((std::__shared_weak_count *)a1, &__p);
        uint64_t v85 = (ImsPrefs *)SipStack::prefs((SipStack *)__p);
        RTTUpgradeResponseTimeoutMillisecondsKey = (void **)ImsPrefs::getRTTUpgradeResponseTimeoutMillisecondsKey(v85);
        BOOL v23 = (int)ImsPrefs::intValue(v85, RTTUpgradeResponseTimeoutMillisecondsKey) > 0;
        if (*((void *)&__p + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&__p + 1));
        }
        goto LABEL_67;
      }
    }
LABEL_66:
    BOOL v23 = 0;
  }
LABEL_67:
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  if (v15)
  {
LABEL_41:
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    if (v23) {
      goto LABEL_69;
    }
LABEL_42:
    BOOL v23 = 0;
LABEL_43:
    uint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)a2 + 4, "Allow");
    if (v25)
    {
      char v26 = (const void *)*((void *)v25 + 5);
      if (v26)
      {
        if (v27)
        {
          if (v27 + 64 != (char *)(*(void *)&a1[31] + 1904)) {
            std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)(*(void *)&a1[31] + 1904), *((void **)v27 + 8), (void *)v27 + 9);
          }
        }
      }
    }
    if (SipSession::confirmed((SipSession *)a1)) {
      goto LABEL_91;
    }
    uint64_t v28 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
    uint64_t v29 = v28[23];
    size_t v30 = *((void *)v28 + 1);
    if ((v29 & 0x80u) == 0) {
      uint64_t v31 = v28[23];
    }
    else {
      uint64_t v31 = *((void *)v28 + 1);
    }
    if (v31 == 5)
    {
      if ((v29 & 0x80) == 0)
      {
        if (v28[23])
        {
          uint64_t v35 = "PRACK";
          while (*v28 == *(unsigned __int8 *)v35)
          {
            ++v28;
            ++v35;
            if (!--v29) {
              goto LABEL_87;
            }
          }
LABEL_91:
          uint64_t v105 = 0;
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          long long v99 = 0u;
          long long v100 = 0u;
          long long __p = 0u;
          SipResponse::SipResponse((SipResponse *)&__p, 200, a2);
          uint64_t v49 = (std::__shared_weak_count *)a3[1];
          v97[0] = *a3;
          v97[1] = v49;
          if (v49) {
            atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          SipSession::generateResponseForInviteOrUpdateRequest((uint64_t)a1, a2, v97, (SipResponse *)&__p);
          if (v49) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v49);
          }
          if (!v23 || (DWORD2(v103) - 200) > 0x63) {
            goto LABEL_165;
          }
          uint64_t v50 = (std::__shared_weak_count *)a1[98];
          if (v50)
          {
            uint64_t v50 = std::__shared_weak_count::lock(v50);
            uint64_t v51 = v50;
            if (v50) {
              uint64_t v50 = (std::__shared_weak_count *)a1[97];
            }
          }
          else
          {
            uint64_t v51 = 0;
          }
          if (a1[169].i8[0])
          {
            if (a1[143]) {
              goto LABEL_117;
            }
            uint64_t v52 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 56))(a1);
            (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v52);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v52 + 8), (uint64_t)"handleInviteOrUpdateRequest couldn't find the attached lazuli session", 69);
            *(unsigned char *)(v52 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          else
          {
            if (v50)
            {
              if (BambiCall::shouldFakeLocalQOS((BambiCall *)v50))
              {
                LoggableString::LoggableString((LoggableString *)&v94, "fakeLocalQoSForMobileTerminated");
                std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v90, &a1[23]);
                if (v90) {
                  uint64_t v53 = v90 + 104;
                }
                else {
                  uint64_t v53 = 0;
                }
                uint64_t v92 = v53;
                int v93 = v91;
                uint64_t v90 = 0;
                char v91 = 0;
                v89[0] = MEMORY[0x1E4F143A8];
                v89[1] = 0x40000000;
                void v89[2] = ___ZN10SipSession27handleInviteOrUpdateRequestERK10SipRequestNSt3__110shared_ptrI20SipServerTransactionEE_block_invoke;
                v89[3] = &__block_descriptor_tmp_176;
                v89[4] = a1;
                SipLockable::performBlock((uint64_t)&a1[13], (uint64_t)&v94, &v92, (uint64_t)v89);
                if (v93) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v93);
                }
                if (v91) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v91);
                }
                if (v96 < 0) {
                  operator delete(v94);
                }
              }
LABEL_117:
              int8x8_t v55 = a1[23];
              uint64_t v54 = (std::__shared_weak_count *)a1[24];
              if (v54)
              {
                atomic_fetch_add_explicit(&v54->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                atomic_fetch_add_explicit(&v54->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              int8x8_t v56 = a1[31];
              if (*(void *)&v56 && (uint64_t v57 = *(void *)(*(void *)&v56 + 216)) != 0) {
                uint64_t v58 = *(SipUserAgent **)(v57 + 136);
              }
              else {
                uint64_t v58 = 0;
              }
              if (*(_DWORD *)(SipUserAgent::config(v58) + 12))
              {
                if (v54) {
                  atomic_fetch_add_explicit(&v54->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                }
                long long v109 = 0;
                uint64_t v59 = operator new(0x20uLL);
                *uint64_t v59 = &unk_1F20C53E8;
                v59[1] = a1;
                v59[2] = v55;
                v59[3] = v54;
                long long v109 = v59;
                SipTimerContainer::startTimer(a1 + 34, (uint64_t)"WaitForRingingTimer");
                std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v108);
              }
              int8x8_t v60 = a1[31];
              if (*(void *)&v60 && (uint64_t v61 = *(void *)(*(void *)&v60 + 216)) != 0) {
                char v62 = *(SipUserAgent **)(v61 + 136);
              }
              else {
                char v62 = 0;
              }
              if (*(_DWORD *)(SipUserAgent::config(v62) + 20)
                && ((uint64_t v63 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2)) == 0
                  ? (uint64_t v64 = &ims::kEmptyString)
                  : (uint64_t v64 = SipUriHeader::tag(v63)),
                    SipPreconditions::preconditionsEnabled((uint64_t)&a1[179], (void **)v64)
                 || SipSession::requireQosBeforeRinging((SipSession *)a1)))
              {
                if (v54) {
                  atomic_fetch_add_explicit(&v54->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                }
                long long v107 = 0;
                uint64_t v65 = operator new(0x20uLL);
                *uint64_t v65 = &unk_1F20C53E8;
                v65[1] = a1;
                v65[2] = v55;
                v65[3] = v54;
                long long v107 = v65;
                std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v106);
              }
              else
              {
                uint64_t v66 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
                (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v66);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v66 + 8), (uint64_t)"no local qos timer", 18);
                *(unsigned char *)(v66 + 17) = 0;
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(unsigned char *)(v66 + 17) = 0;
              }
              int8x8_t v67 = a1[31];
              int v68 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2);
              if (v68) {
                uint64_t v69 = SipUriHeader::tag(v68);
              }
              else {
                uint64_t v69 = &ims::kEmptyString;
              }
              uint64_t v70 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(*(void *)&v67 + 2048, (void **)v69);
              if ((void **)(*(void *)&v67 + 2056) == v70)
              {
                char v71 = 0;
                BOOL v72 = 0;
              }
              else
              {
                char v71 = (void **)v70[7];
                BOOL v72 = (std::__shared_weak_count *)v70[8];
                if (v72) {
                  atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
                }
              }
              if (SipPreconditions::preconditionsActiveInFork((void **)&a1[179], v71 + 19))
              {
                uint64_t v73 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
                (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v73);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v73 + 8), (uint64_t)"preconditions are active. Sending Session Progress.", 51);
                *(unsigned char *)(v73 + 17) = 0;
                uint64_t v74 = (unsigned char *)(v73 + 17);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v73 + 64))(v73, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              }
              else
              {
                int8x8_t v75 = a1[31];
                if (*(void *)&v75 && (uint64_t v76 = *(void *)(*(void *)&v75 + 216)) != 0) {
                  uint64_t v77 = *(SipUserAgent **)(v76 + 136);
                }
                else {
                  uint64_t v77 = 0;
                }
                if (*(unsigned char *)(SipUserAgent::config(v77) + 793))
                {
                  uint64_t v78 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
                  (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v78);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v78 + 8), (uint64_t)"always sending Session Progress", 31);
                  *(unsigned char *)(v78 + 17) = 0;
                  uint64_t v74 = (unsigned char *)(v78 + 17);
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v78 + 64))(v78, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                }
                else if (SipSession::requireQosBeforeRinging((SipSession *)a1))
                {
                  uint64_t v79 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
                  (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v79);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v79 + 8), (uint64_t)"sending Session Progress to establish QoS before ringing", 56);
                  *(unsigned char *)(v79 + 17) = 0;
                  uint64_t v74 = (unsigned char *)(v79 + 17);
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                }
                else
                {
                  if (!SipMessage::hasPreconditions(a2)) {
                    goto LABEL_188;
                  }
                  SipSessionInterface::stack((std::__shared_weak_count *)a1, &v94);
                  int v80 = (ImsPrefs *)SipStack::prefs(v94);
                  IR92PreconditionSupportKey = (void **)ImsPrefs::getIR92PreconditionSupportKey(v80);
                  int v82 = ImsPrefs::BOOLValue(v80, IR92PreconditionSupportKey);
                  if (v95) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v95);
                  }
                  if (!v82)
                  {
LABEL_188:
                    if (!a1[169].i8[0])
                    {
                      if (v72) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v72);
                      }
                      if (v54)
                      {
                        std::__shared_weak_count::__release_weak(v54);
                        std::__shared_weak_count::__release_weak(v54);
                      }
                      goto LABEL_168;
                    }
                    goto LABEL_159;
                  }
                  uint64_t v83 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
                  (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v83);
                  uint64_t v84 = ImsOutStream::operator<<(v83, "Preconditions are present in initial INVITE.  Sending Session Progress.");
                  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v84 + 64))(v84, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  uint64_t v74 = (unsigned char *)(v84 + 17);
                }
              }
              *uint64_t v74 = 0;
              DWORD2(v103) = 183;
LABEL_159:
              if (v72) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v72);
              }
              if (v54)
              {
                std::__shared_weak_count::__release_weak(v54);
                std::__shared_weak_count::__release_weak(v54);
              }
              if (v51) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v51);
              }
LABEL_165:
              uint64_t v51 = (std::__shared_weak_count *)a3[1];
              v87[0] = *a3;
              v87[1] = v51;
              if (v51) {
                atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              SipSession::sendResponseToInviteOrUpdateRequest((ImsResult *)v88, a1, (SipResponse *)&__p, v87);
              ImsResult::~ImsResult((ImsResult *)v88);
LABEL_168:
              if (v51) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v51);
              }
              *(void *)&long long __p = &unk_1F20DD488;
              if (SHIBYTE(v105) < 0) {
                operator delete((void *)v104);
              }
              SipMessage::~SipMessage((SipMessage *)&__p);
              return;
            }
            uint64_t v52 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 56))(a1);
            (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v52);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v52 + 8), (uint64_t)"handleInviteOrUpdateRequest couldn't find the attached call", 59);
            *(unsigned char *)(v52 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          *(unsigned char *)(v52 + 17) = 0;
          goto LABEL_117;
        }
LABEL_87:
        int v46 = SipMessage::header<SipPEarlyMediaHeader>((uint64_t)a2);
        uint64_t v47 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2);
        if (v47) {
          uint64_t v48 = SipUriHeader::tag(v47);
        }
        else {
          uint64_t v48 = &ims::kEmptyString;
        }
        SipSession::processEarlyMediaHeader((uint64_t)a1, (uint64_t)v46, (std::string *)v48);
        goto LABEL_91;
      }
      int v43 = *(const void **)v28;
      uint64_t v42 = "PRACK";
    }
    else
    {
      if (v31 != 6) {
        goto LABEL_91;
      }
      if ((v29 & 0x80) == 0)
      {
        if (v28[23])
        {
          char v32 = "INVITE";
          uint64_t v33 = v28;
          uint64_t v34 = v28[23];
          while (*v33 == *(unsigned __int8 *)v32)
          {
            ++v33;
            ++v32;
            if (!--v34) {
              goto LABEL_87;
            }
          }
          uint64_t v45 = "UPDATE";
          while (*v28 == *(unsigned __int8 *)v45)
          {
            ++v28;
            ++v45;
            if (!--v29) {
              goto LABEL_87;
            }
          }
          goto LABEL_91;
        }
        goto LABEL_87;
      }
      uint64_t v41 = *(const void **)v28;
      if (!memcmp(*(const void **)v28, "INVITE", v30)) {
        goto LABEL_87;
      }
      uint64_t v42 = "UPDATE";
      int v43 = v41;
    }
    if (memcmp(v43, v42, v30)) {
      goto LABEL_91;
    }
    goto LABEL_87;
  }
LABEL_68:
  if (!v23) {
    goto LABEL_43;
  }
LABEL_69:
  uint64_t v36 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"Handling RTT upgrade request", 28);
  *(unsigned char *)(v36 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v36 + 17) = 0;
  SipTypedStateMachine<SipSessionState>::transitionToState(&a1[83], 7);
  uint64_t v37 = (std::__shared_weak_count *)a1[98];
  if (v37)
  {
    char v38 = std::__shared_weak_count::lock(v37);
    if (v38)
    {
      std::string::size_type v39 = v38;
      uint64_t v40 = (BambiCall *)a1[97];
      if (v40) {
        BambiCall::textSessionDetected(v40);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
  }
}

void sub_1C535E230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  _Unwind_Resume(a1);
}

void ___ZN10SipSession27handleInviteOrUpdateRequestERK10SipRequestNSt3__110shared_ptrI20SipServerTransactionEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 64))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Faking local QoS notification for MT Call", 41);
  *(unsigned char *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v2 + 17) = 0;
  uint64_t v3 = operator new(2uLL);
  long long __p = v3;
  *uint64_t v3 = 0;
  BOOL v5 = v3 + 1;
  uint64_t v6 = v3 + 1;
  SipSession::handleQualityOfServiceEstablished(v1, 0xFFFFFFFF, 1, (uint64_t)&__p, 1);
  if (__p)
  {
    BOOL v5 = __p;
    operator delete(__p);
  }
}

void sub_1C535E498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipOfferAnswer::localSdpPending(SipOfferAnswer *this, std::__shared_weak_count *a2)
{
  if (a2) {
    atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SipOfferAnswerExchange::empty(this))
  {
    BOOL v4 = 1;
    if (!a2) {
      return v4;
    }
    goto LABEL_7;
  }
  BOOL v4 = SipOfferAnswerExchange::localAnswerPending(this);
  if (a2) {
LABEL_7:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](a2);
  return v4;
}

void sub_1C535E51C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *SipSession::generateTerminationResponse(void *this, const BambiCallTerminationReason *a2, SipResponse *a3)
{
  if (a3)
  {
    BOOL v4 = this;
    *((_DWORD *)a3 + 22) = *((_DWORD *)a2 + 15);
    std::string::operator=((std::string *)a3 + 4, (const std::string *)((char *)a2 + 32));
    uint64_t v5 = (*(uint64_t (**)(void *))(*v4 + 64))(v4);
    (*(void (**)(void *, uint64_t))(*v4 + 16))(v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Generating response from call termination reason: ", 50);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v5 + 32))(v5, (char *)a2 + 8);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v6 = v4[198];
    if (v6)
    {
      uint64_t v7 = *(std::__shared_weak_count **)(v6 + 120);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      uint64_t v8 = *(std::__shared_weak_count **)(v6 + 104);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      if (*(char *)(v6 + 95) < 0) {
        operator delete(*(void **)(v6 + 72));
      }
      if (*(char *)(v6 + 55) < 0) {
        operator delete(*(void **)(v6 + 32));
      }
      if (*(char *)(v6 + 31) < 0) {
        operator delete(*(void **)(v6 + 8));
      }
      MEMORY[0x1C878E320](v6, 0x1032C40D4AF1F8FLL);
    }
    operator new();
  }
  return this;
}

void sub_1C535E6E0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1032C40D4AF1F8FLL);
  _Unwind_Resume(a1);
}

void SipSession::generateTerminationResponse(std::__shared_weak_count *this, const ImsResult *a2, SipResponse *a3)
{
  uint64_t v6 = (const void *)*((void *)a2 + 5);
  if (v6
  {
    SipSessionInterface::terminationReason(this, (uint64_t)v7 + 8, (BambiCallTerminationReason *)v9);
    SipSession::generateTerminationResponse(this, (const BambiCallTerminationReason *)v9, a3);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v13 < 0) {
      operator delete(v12);
    }
    if (v11 < 0) {
      operator delete(v10);
    }
  }
  else if (a3)
  {
    uint64_t v8 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].~__shared_weak_count_0)(this);
    ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Unable to generate call termination reason from result, using ", 62);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" directly.", 10);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    SipResponse::setStatusFromImsResult(a3, a2);
  }
}

void sub_1C535E914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  BambiCallTerminationReason::~BambiCallTerminationReason((BambiCallTerminationReason *)va);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [8]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C535E9AC(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipSession::parseVerstatParams(std::__shared_weak_count *this, const SipRequest *a2)
{
  memset(&v41, 0, sizeof(v41));
  uint64_t v4 = SipMessage::header<SipPAssertedIdentityHeader>((uint64_t)a2);
  if (!v4) {
    goto LABEL_41;
  }
  size_t v5 = v4;
  if (v4[9] == v4[10]) {
    goto LABEL_41;
  }
  uint64_t v6 = (uint64_t)(v4 + 8);
  long long __p = 0;
  std::string::size_type v39 = 0;
  uint64_t v40 = 0;
  SipRouteSet::allParams((uint64_t)(v4 + 8), (char **)&__p);
  SipSessionInterface::stack(this, &v37);
  uint64_t v7 = (ImsPrefs *)SipStack::prefs((SipStack *)v37.__r_.__value_.__l.__data_);
  EnableBrandedCallingKey = (void **)ImsPrefs::getEnableBrandedCallingKey(v7);
  int v9 = ImsPrefs::BOOLValue(v7, EnableBrandedCallingKey);
  if (v37.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v37.__r_.__value_.__l.__size_);
  }
  if (v9)
  {
    uint64_t v10 = (uint64_t *)v5[9];
    if (v10 == (uint64_t *)v5[10]) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = *v10;
    }
    ims::removeQuotes(v11 + 200, &v37);
    uint64_t v12 = (void **)&this[71].__vftable;
    if (SHIBYTE(this[71].__shared_weak_owners_) < 0) {
      operator delete(*v12);
    }
    *(_OWORD *)uint64_t v12 = *(_OWORD *)&v37.__r_.__value_.__l.__data_;
    this[71].__shared_weak_owners_ = v37.__r_.__value_.__r.__words[2];
  }
  char v13 = (uint64_t *)__p;
  uint64_t v14 = v39;
  if (__p == v39)
  {
LABEL_16:
    memset(&v37, 0, sizeof(v37));
    SipRouteSet::allHops(v6, &v37.__r_.__value_.__l.__data_);
    std::string::size_type size = v37.__r_.__value_.__l.__size_;
    uint64_t v19 = (void ***)v37.__r_.__value_.__r.__words[0];
    if (v37.__r_.__value_.__r.__words[0] == v37.__r_.__value_.__l.__size_)
    {
      char v24 = 1;
      if (v37.__r_.__value_.__r.__words[0]) {
        goto LABEL_37;
      }
      goto LABEL_38;
    }
    while (1)
    {
      uint64_t v21 = *v19;
      if (*v19)
      {
        if (v21 + 10 != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v21 + 9), (void **)"verstat"))
        {
          uint64_t v28 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v21 + 9), (void **)"verstat");
          if (v21 + 10 == v28) {
            uint64_t v29 = &ims::kEmptyString;
          }
          else {
            uint64_t v29 = (long long *)(v28 + 7);
          }
LABEL_35:
          SipSession::setVerstatValueFrom((uint64_t)this, (uint64_t)v29, (uint64_t)"P-Asserted-Identity");
          char v24 = 0;
LABEL_36:
          uint64_t v19 = (void ***)v37.__r_.__value_.__r.__words[0];
          if (v37.__r_.__value_.__r.__words[0])
          {
LABEL_37:
            v37.__r_.__value_.__l.__size_ = (std::string::size_type)v19;
            operator delete(v19);
          }
LABEL_38:
          if (__p)
          {
            std::string::size_type v39 = (uint64_t *)__p;
            operator delete(__p);
          }
          if (v24)
          {
LABEL_41:
            size_t v30 = (char *)SipMessage::header<SipFromHeader>((uint64_t)a2);
            uint64_t v31 = v30;
            if (v30)
            {
              char v32 = (void **)(v30 + 80);
              if (v30 + 80 == (char *)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v30 + 72), (void **)"verstat"))
              {
                uint64_t v34 = SipUri::verstatLevel((SipUri *)(v31 + 104));
              }
              else
              {
                uint64_t v33 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v31 + 72), (void **)"verstat");
                if (v32 == v33) {
                  uint64_t v34 = &ims::kEmptyString;
                }
                else {
                  uint64_t v34 = (long long *)(v33 + 7);
                }
              }
              std::string::operator=(&v41, (const std::string *)v34);
              std::string::size_type v35 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
              char v36 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
              if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v35 = v41.__r_.__value_.__l.__size_;
              }
              if (v35)
              {
                SipSession::setVerstatValueFrom((uint64_t)this, (uint64_t)&v41, (uint64_t)"From");
                char v36 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
              }
              if (v36 < 0)
              {
                uint64_t v27 = (void *)v41.__r_.__value_.__r.__words[0];
LABEL_53:
                operator delete(v27);
              }
            }
          }
          return;
        }
        int8x8_t v22 = SipUri::verstatLevel((SipUri *)v21);
        uint64_t v23 = *((unsigned __int8 *)v22 + 23);
        if ((v23 & 0x80u) != 0) {
          uint64_t v23 = *((void *)v22 + 1);
        }
        if (v23)
        {
          uint64_t v29 = SipUri::verstatLevel((SipUri *)v21);
          goto LABEL_35;
        }
      }
      if (++v19 == (void ***)size)
      {
        char v24 = 1;
        goto LABEL_36;
      }
    }
  }
  while (1)
  {
    uint64_t v15 = *v13;
    if (*v13)
    {
      uint64_t v16 = v15 + 8;
      BOOL v17 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v15 + 8, (void **)"verstat");
      BOOL v18 = (void **)(v15 + 16);
      if (v18 != v17) {
        break;
      }
    }
    if (++v13 == v14) {
      goto LABEL_16;
    }
  }
  uint64_t v25 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v16, (void **)"verstat");
  if (v18 == v25) {
    char v26 = &ims::kEmptyString;
  }
  else {
    char v26 = (long long *)(v25 + 7);
  }
  SipSession::setVerstatValueFrom((uint64_t)this, (uint64_t)v26, (uint64_t)"P-Asserted-Identity");
  uint64_t v27 = __p;
  if (__p)
  {
    std::string::size_type v39 = (uint64_t *)__p;
    goto LABEL_53;
  }
}

void sub_1C535ED00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *SipSession::parseBrandedCallingHeaders(std::string *this, const SipRequest *a2)
{
  uint64_t result = SipMessage::header<SipCallInfoHeader>((uint64_t)a2);
  if (result)
  {
    uint64_t v4 = (uint64_t)result;
    size_t v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)result + 72, (void **)"purpose");
    if ((void **)(v4 + 80) == v5) {
      uint64_t v6 = &ims::kEmptyString;
    }
    else {
      uint64_t v6 = (long long *)(v5 + 7);
    }
    uint64_t v7 = *((unsigned __int8 *)v6 + 23);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *((unsigned __int8 *)v6 + 23);
    }
    else {
      uint64_t v8 = *((void *)v6 + 1);
    }
    if (v8 != 4) {
      goto LABEL_17;
    }
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v6, "icon", *((void *)v6 + 1)))
      {
LABEL_17:
        uint64_t v10 = (*(uint64_t (**)(std::string *))(this->__r_.__value_.__r.__words[0] + 64))(this);
        (*(void (**)(std::string *, uint64_t))(this->__r_.__value_.__r.__words[0] + 16))(this, v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Call-Info Branded Calling header received [imageUrl=", 52);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(void *)v10 + 32))(v10, this + 70);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" companyName=", 13);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, std::string *))(*(void *)v10 + 32))(v10, this + 71);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"]", 1);
        *(unsigned char *)(v10 + 17) = 0;
        uint64_t result = (void *)(*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v10 + 17) = 0;
        return result;
      }
    }
    else if (*((unsigned char *)v6 + 23))
    {
      int v9 = "icon";
      while (*(unsigned __int8 *)v6 == *(unsigned __int8 *)v9)
      {
        uint64_t v6 = (long long *)((char *)v6 + 1);
        ++v9;
        if (!--v7) {
          goto LABEL_16;
        }
      }
      goto LABEL_17;
    }
LABEL_16:
    (*(void (**)(uint64_t, std::string *))(*(void *)v4 + 40))(v4, this + 70);
    ims::chomp(this + 70, "<>", 3);
    goto LABEL_17;
  }
  return result;
}

void SipSession::parseSpamHeaders(SipSession *this, const SipRequest *a2)
{
  memset(&v48, 0, sizeof(v48));
  memset(&v47, 0, sizeof(v47));
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)a2 + 4, (unsigned __int8 *)SipHeader::kHeaderPComNameIdReputation);
  if (v4)
  {
    size_t v5 = (const void *)*((void *)v4 + 5);
    if (v5)
    {
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
        (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"P-Com SPAM header received", 26);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        uint64_t v9 = (uint64_t)(v7 + 72);
        uint64_t v10 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v7 + 72), (void **)"ccat");
        uint64_t v11 = (void **)(v7 + 80);
        if (v11 != v10)
        {
          uint64_t v12 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9, (void **)"ccat");
          if (v11 == v12) {
            char v13 = (const std::string *)&ims::kEmptyString;
          }
          else {
            char v13 = (const std::string *)(v12 + 7);
          }
          std::string::operator=(&v48, v13);
        }
        if (v11 != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9, (void **)"urep"))
        {
          uint64_t v14 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v9, (void **)"urep");
          if (v11 == v14) {
            uint64_t v15 = (const std::string *)&ims::kEmptyString;
          }
          else {
            uint64_t v15 = (const std::string *)(v14 + 7);
          }
          std::string::operator=(&v47, v15);
        }
      }
    }
  }
  uint64_t v16 = (char *)SipMessage::header<SipCallInfoHeader>((uint64_t)a2);
  if (v16)
  {
    uint64_t v17 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Call-Info SPAM header received", 30);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    uint64_t v18 = (uint64_t)(v16 + 72);
    uint64_t v19 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v16 + 72), (void **)"type");
    uint64_t v20 = (void **)(v16 + 80);
    if (v20 != v19)
    {
      uint64_t v21 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v18, (void **)"type");
      if (v20 == v21) {
        int8x8_t v22 = (const std::string *)&ims::kEmptyString;
      }
      else {
        int8x8_t v22 = (const std::string *)(v21 + 7);
      }
      std::string::operator=(&v48, v22);
    }
    if (v20 != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v18, (void **)"confidence"))
    {
      uint64_t v23 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v18, (void **)"confidence");
      if (v20 == v23) {
        char v24 = (const std::string *)&ims::kEmptyString;
      }
      else {
        char v24 = (const std::string *)(v23 + 7);
      }
      std::string::operator=(&v47, v24);
    }
  }
  std::string::size_type size = HIBYTE(v48.__r_.__value_.__r.__words[2]);
  if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v48.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    uint64_t v26 = *((void *)this + 31);
    if (v26 && (uint64_t v27 = *(void *)(v26 + 216)) != 0) {
      uint64_t v28 = *(SipUserAgent **)(v27 + 136);
    }
    else {
      uint64_t v28 = 0;
    }
    uint64_t v29 = SipUserAgent::config(v28);
    *((_DWORD *)this + 412) = SpamCategoryMap::categoryForString(v29 + 1248, (uint64_t)&v48);
    uint64_t v30 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"Found spam category ", 20);
    *(unsigned char *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v30 + 32))(v30, &v48);
    *(unsigned char *)(v30 + 17) = 0;
    ims::toString<ims::SpamCategory>((int *)this + 412, &__p);
    (*(void (**)(uint64_t, std::string *))(*(void *)v30 + 32))(v30, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"')", 2);
    *(unsigned char *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v30 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::string::size_type v31 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v31 = v47.__r_.__value_.__l.__size_;
  }
  if (v31)
  {
    uint64_t v32 = *((void *)this + 31);
    if (v32 && (uint64_t v33 = *(void *)(v32 + 216)) != 0) {
      uint64_t v34 = *(SipUserAgent **)(v33 + 136);
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t v35 = SipUserAgent::config(v34);
    __p.__r_.__value_.__r.__words[0] = 0;
    int v36 = ims::strToLong((uint64_t *)&v47, (uint64_t *)&__p) ? LODWORD(__p.__r_.__value_.__l.__data_) : 0;
    *((_DWORD *)this + 413) = SpamRiskMap::classifyRisk((SpamRiskMap *)(v35 + 1272), v36);
    uint64_t v37 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"Found spam risk ", 16);
    *(unsigned char *)(v37 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v37 + 32))(v37, &v47);
    *(unsigned char *)(v37 + 17) = 0;
    unsigned int v38 = *((_DWORD *)this + 413) - 1;
    std::string::size_type v39 = v38 > 2 ? "none" : off_1E650FD70[v38];
    std::string::basic_string[abi:ne180100]<0>(&__p, v39);
    (*(void (**)(uint64_t, std::string *))(*(void *)v37 + 32))(v37, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"')", 2);
    *(unsigned char *)(v37 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v37 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  std::string v41 = (SipDialog *)*((void *)this + 31);
  uint64_t v40 = (std::__shared_weak_count *)*((void *)this + 32);
  if (!v40)
  {
    if (!v41) {
      goto LABEL_61;
    }
    uint64_t v42 = 0;
    goto LABEL_55;
  }
  atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  if (!v41) {
    goto LABEL_61;
  }
  std::string v41 = (SipDialog *)*((void *)this + 31);
  uint64_t v42 = (std::__shared_weak_count *)*((void *)this + 32);
  if (!v42)
  {
LABEL_55:
    char v43 = 1;
    goto LABEL_56;
  }
  char v43 = 0;
  atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_56:
  SipDialog::dialogId(v41, &__p);
  uint64_t v44 = (void **)((char *)this + 1656);
  if (*((char *)this + 1679) < 0) {
    operator delete(*v44);
  }
  *(_OWORD *)uint64_t v44 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *((void *)this + 209) = *((void *)&__p.__r_.__value_.__l + 2);
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if ((v43 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  uint64_t v45 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
  (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v45 + 8), (uint64_t)"Using dialog-id ", 16);
  *(unsigned char *)(v45 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(void *)v45 + 32))(v45, (char *)this + 1656);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v45 + 17) = 0;
LABEL_61:
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
}

void sub_1C535F7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if ((v28 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void *SipMessage::header<SipPBambiCallIdHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "P-Bambi-Call-ID");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

void SipSession::setVerstatValueFrom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"found verstat parameter '", 25);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"' in ", 5);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 32))(v6, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" header", 7);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  *(unsigned char *)(a1 + 1640) = 1;
  std::string::basic_string[abi:ne180100]<0>(v26, "TN-Validation-Passed");
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v7 = (const char *)a2;
  }
  else {
    uint64_t v7 = *(const char **)a2;
  }
  int v8 = v27;
  uint64_t v9 = (void *)v26[0];
  if (v27 >= 0) {
    uint64_t v10 = (const char *)v26;
  }
  else {
    uint64_t v10 = (const char *)v26[0];
  }
  int v11 = strcasecmp(v7, v10);
  int v12 = v11;
  if ((v8 & 0x80000000) == 0)
  {
    if (v11) {
      goto LABEL_9;
    }
LABEL_27:
    int v25 = 1;
LABEL_30:
    *(_DWORD *)(a1 + 1644) = v25;
    return;
  }
  operator delete(v9);
  if (!v12) {
    goto LABEL_27;
  }
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(v26, "TN-Validation-Failed");
  if (*(char *)(a2 + 23) >= 0) {
    char v13 = (const char *)a2;
  }
  else {
    char v13 = *(const char **)a2;
  }
  int v14 = v27;
  uint64_t v15 = (void *)v26[0];
  if (v27 >= 0) {
    uint64_t v16 = (const char *)v26;
  }
  else {
    uint64_t v16 = (const char *)v26[0];
  }
  int v17 = strcasecmp(v13, v16);
  int v18 = v17;
  if (v14 < 0)
  {
    operator delete(v15);
    if (v18) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }
  if (!v17)
  {
LABEL_29:
    int v25 = 2;
    goto LABEL_30;
  }
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(v26, "No-TN-Validation");
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v19 = (const char *)a2;
  }
  else {
    uint64_t v19 = *(const char **)a2;
  }
  int v20 = v27;
  uint64_t v21 = (void *)v26[0];
  if (v27 >= 0) {
    int8x8_t v22 = (const char *)v26;
  }
  else {
    int8x8_t v22 = (const char *)v26[0];
  }
  int v23 = strcasecmp(v19, v22);
  int v24 = v23;
  if (v20 < 0)
  {
    operator delete(v21);
    if (v24) {
      goto LABEL_25;
    }
  }
  else if (v23)
  {
LABEL_25:
    *(unsigned char *)(a1 + 1640) = 0;
    return;
  }
  *(_DWORD *)(a1 + 1644) = 0;
}

void *SipMessage::header<SipCallInfoHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "Call-Info");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

void *SipMessage::header<SipFromHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "From");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

void SipSession::sendUpdate(uint64_t *a1@<X0>, uint64_t a2@<X1>, ImsResult *a3@<X8>)
{
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 264))(a1))
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v8 = (const char *)a2;
    }
    else {
      int v8 = *(const char **)a2;
    }
    if (byte_1EBBDB027 >= 0) {
      uint64_t v9 = (const char *)&SipSession::kUpdateTypeEmergencyLocationUpdate;
    }
    else {
      uint64_t v9 = (const char *)SipSession::kUpdateTypeEmergencyLocationUpdate;
    }
    strcasecmp(v8, v9);
    SipDialog::createRequestInDialog(a1[31]);
  }
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  __p[0] = &unk_1F20B2680;
  __p[1] = &_bambiDomain;
  int v11 = 1073741826;
  uint64_t v6 = (ImsResult *)ImsResult::operator<<<char [45]>((uint64_t)__p, "can't send an UPDATE in a terminated session");
  uint64_t v7 = ImsLogContainer::logResult((ImsLogContainer *)a1, v6);
  ImsResult::ImsResult(a3, (const std::string *)v7);
  ImsResult::~ImsResult((ImsResult *)__p);
}

void sub_1C535FE88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::handleSessionMovedResponse(uint64_t a1, SipSession *a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  SipUri::SipUri((SipUri *)a1);
  int v8 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*(void *)a4 + 296) + 112))(*(void *)(*(void *)a4 + 296));
  uint64_t v9 = v8[23];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v8[23];
  }
  else {
    uint64_t v10 = *((void *)v8 + 1);
  }
  if (v10 != 6) {
    return;
  }
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v8, "INVITE", *((void *)v8 + 1))) {
      return;
    }
    goto LABEL_12;
  }
  if (!v8[23])
  {
LABEL_12:
    if ((SipSession::confirmed(a2) & 1) == 0)
    {
      int v21 = 0;
      SipMessage::headerValueAsUint32(a3, "Expires", &v21);
      long long v12 = SipMessage::header<SipContactHeader>(a3);
      if (v12)
      {
        uint64_t v13 = v12[9];
        if (v13)
        {
          if (v13 != v12[10])
          {
            int v14 = v21;
            if (!v21) {
              int v14 = SipParameterMap::uintParameter(v13 + 416, (void **)"expires", 0);
            }
            uint64_t v15 = (const SipUri *)(v13 + 8);
            SipUri::operator=((SipUri *)a1, (uint64_t)v15);
            uint64_t v20 = 0;
            memset(v19, 0, sizeof(v19));
            long long v17 = 0u;
            *(_OWORD *)int v18 = 0u;
            int v16 = time(0);
            BambiCallSessionMovedEvent::BambiCallSessionMovedEvent((BambiCallSessionMovedEvent *)&v17, v15, v14 + v16);
            SipSession::fireCallEvent(a2, (BambiCallEvent *)&v17);
            *(void *)&long long v17 = &unk_1F20C3598;
            SipUri::~SipUri((SipUri *)((char *)v19 + 8));
            *(void *)&long long v17 = &unk_1F20B8640;
            if (v18[1]) {
              std::__shared_weak_count::__release_weak(v18[1]);
            }
          }
        }
      }
    }
    return;
  }
  int v11 = "INVITE";
  while (*v8 == *(unsigned __int8 *)v11)
  {
    ++v8;
    ++v11;
    if (!--v9) {
      goto LABEL_12;
    }
  }
}

void sub_1C5360104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BambiCallSessionMovedEvent::~BambiCallSessionMovedEvent((BambiCallSessionMovedEvent *)&a9);
  SipUri::~SipUri(v9);
  _Unwind_Resume(a1);
}

void *SipMessage::header<SipContactHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "Contact");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

void SDPSession::applyOnStreams<SipSession::handleInviteOrUpdateErrorResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>,std::shared_ptr<SipDialogFork>)::$_0>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(void *)(a1 + 16) = 0;
  uint64_t v3 = *(void **)(a2 + 1904);
  uint64_t v4 = (void *)(a2 + 1912);
  if (v3 != (void *)(a2 + 1912))
  {
    while (1)
    {
      uint64_t v7 = v3[5];
      uint64_t v8 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ReInviteUpgradeFailure");
      BambiCall::activateMediaSessionIfAppropriate(v8, v7, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      uint64_t v13 = &unk_1F20B2680;
      int v14 = &_bambiDomain;
      int v15 = 0;
      ImsResult::operator=(a1, (uint64_t)&v13);
      ImsResult::~ImsResult((ImsResult *)&v13);
      long long v16 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      uint64_t v13 = &unk_1F20B2680;
      int v14 = &_bambiDomain;
      int v15 = 0;
      if (*(uint64_t **)(a1 + 8) != &_bambiDomain) {
        break;
      }
      int v9 = *(_DWORD *)(a1 + 16);
      ImsResult::~ImsResult((ImsResult *)&v13);
      if (!v9)
      {
        uint64_t v10 = (void *)v3[1];
        if (v10)
        {
          do
          {
            int v11 = v10;
            uint64_t v10 = (void *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            int v11 = (void *)v3[2];
            BOOL v12 = *v11 == (void)v3;
            uint64_t v3 = v11;
          }
          while (!v12);
        }
        uint64_t v3 = v11;
        if (v11 != v4) {
          continue;
        }
      }
      return;
    }
    ImsResult::~ImsResult((ImsResult *)&v13);
  }
}

void sub_1C5360364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  ImsResult::~ImsResult(v23);
  _Unwind_Resume(a1);
}

void SipSession::handleInviteResponseToCancel(void *a1, const SipResponse *a2, uint64_t *a3)
{
  uint64_t v18 = 0;
  *(_OWORD *)&v19.__r_.__value_.__r.__words[1] = 0u;
  memset(v21, 0, sizeof(v21));
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  *(_OWORD *)uint64_t v20 = 0u;
  *((unsigned char *)&v19.__r_.__value_.__s + 23) = 13;
  qmemcpy(&v19, "InternalError", 13);
  unsigned int v4 = *((_DWORD *)a2 + 22) - 200;
  *(void *)&v21[12] = 0xA000001F4;
  if (v4 <= 0x63)
  {
    size_t v5 = (std::__shared_weak_count *)a3[1];
    uint64_t v16 = *a3;
    long long v17 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipSessionInterface::addAckRetransmitHandlerForClientTransaction((uint64_t)a1, (uint64_t)&v16, a2, 0);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  uint64_t v6 = a1[198];
  if (v6)
  {
    LODWORD(v18) = *(_DWORD *)v6;
    std::string::operator=(&v19, (const std::string *)(v6 + 8));
    std::string::operator=((std::string *)v20, (const std::string *)(v6 + 32));
    uint64_t v7 = *(void *)(v6 + 56);
    *(_DWORD *)&v21[16] = *(_DWORD *)(v6 + 64);
    *(void *)&v21[8] = v7;
    std::string::operator=((std::string *)&v21[24], (const std::string *)(v6 + 72));
    uint64_t v9 = *(void *)(v6 + 96);
    uint64_t v8 = *(void *)(v6 + 104);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v23 + 1);
    *(void *)&long long v23 = v9;
    *((void *)&v23 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v8;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    uint64_t v12 = *(void *)(v6 + 112);
    uint64_t v11 = *(void *)(v6 + 120);
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    *(void *)&long long v24 = v12;
    *((void *)&v24 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v11;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    int v14 = *(_DWORD *)(v6 + 128);
    *(_DWORD *)((char *)&v25 + 3) = *(_DWORD *)(v6 + 131);
    LODWORD(v25) = v14;
  }
  (*(void (**)(void *__return_ptr, void *, uint64_t *, void))(*a1 + 120))(v15, a1, &v18, 0);
  ImsResult::~ImsResult((ImsResult *)v15);
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  if (*((void *)&v23 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(*(void **)&v21[24]);
  }
  if ((v21[7] & 0x80000000) != 0) {
    operator delete(v20[0]);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
}

void sub_1C536058C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, ...)
{
  va_start(va, a13);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  BambiCallTerminationReason::~BambiCallTerminationReason((BambiCallTerminationReason *)va);
  _Unwind_Resume(a1);
}

void *SipMessage::header<SipPEarlyMediaHeader>(uint64_t a1)
{
  uint64_t v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)(a1 + 32), "P-Early-Media");
  if (!v1) {
    return 0;
  }
  uint64_t v2 = (const void *)*((void *)v1 + 5);
  if (!v2) {
    return 0;
  }
}

void SipSession::processEarlyMediaHeader(uint64_t a1, uint64_t a2, std::string *a3)
{
  if (!a2) {
    return;
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Processing early media header", 29);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a2 + 64, (void **)"sendrecv");
  if ((void **)(a2 + 72) != v7)
  {
    int v8 = 1;
LABEL_6:
    int v10 = 2;
    goto LABEL_7;
  }
  uint64_t v9 = v7;
  if (v7 != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a2 + 64, (void **)"sendonly"))
  {
    int v8 = 3;
    goto LABEL_6;
  }
  if (v9 == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a2 + 64, (void **)"inactive"))return; {
  int v14 = *(std::__shared_weak_count **)(a1 + 784);
  }
  if (!v14 || (int v15 = std::__shared_weak_count::lock(v14)) == 0)
  {
    int v8 = 4;
    int v10 = 1;
    goto LABEL_7;
  }
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(a1 + 776);
  if (!v17) {
    goto LABEL_59;
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v17 + 368);
  if (v18)
  {
    uint64_t v18 = std::__shared_weak_count::lock(v18);
    std::string v19 = v18;
    if (v18) {
      uint64_t v18 = *(std::__shared_weak_count **)(v17 + 360);
    }
  }
  else
  {
    std::string v19 = 0;
  }
  char v28 = (ImsPrefs *)SipStack::prefs((SipStack *)v18);
  EnforceEarlyMediaInactiveDirectionKey = (void **)ImsPrefs::getEnforceEarlyMediaInactiveDirectionKey(v28);
  int v30 = ImsPrefs::BOOLValue(v28, EnforceEarlyMediaInactiveDirectionKey);
  char v31 = v30;
  if (!v19)
  {
    if (v30) {
      goto LABEL_57;
    }
LABEL_59:
    int v10 = 1;
    goto LABEL_60;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if ((v31 & 1) == 0) {
    goto LABEL_59;
  }
LABEL_57:
  int v10 = 2;
LABEL_60:
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  int v8 = 4;
LABEL_7:
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 784);
  if (v11)
  {
    uint64_t v12 = std::__shared_weak_count::lock(v11);
    if (v12)
    {
      uint64_t v13 = *(void *)(a1 + 776);
      if (v13)
      {
        if (v8 == 3) {
          int v20 = 2;
        }
        else {
          int v20 = v8;
        }
        *(_DWORD *)(v13 + 456) = v20;
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v21 = *(void *)(a1 + 248);
  long long v22 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v21 + 2048, (void **)&a3->__r_.__value_.__l.__data_);
  if ((void **)(v21 + 2056) == v22)
  {
    long long v24 = 0;
LABEL_29:
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"processEarlyMediaHeader: Fork not found. Fork tag: ", 51);
    *(unsigned char *)(v25 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v32, a3);
    (*(void (**)(uint64_t, std::string *))(*(void *)v25 + 56))(v25, &v32);
    if (v34 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    goto LABEL_35;
  }
  long long v23 = v22[7];
  long long v24 = (std::__shared_weak_count *)v22[8];
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v23) {
    goto LABEL_29;
  }
  if (v8 == 3) {
    int v8 = 2;
  }
  v23[212] = v8;
LABEL_35:
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (*(_DWORD *)(a1 + 1396) != v10)
  {
    uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"Setting early media support level to: ", 38);
    *(unsigned char *)(v26 + 17) = 0;
    if (v10 == 1) {
      char v27 = "kEarlyMediaSupportInactive";
    }
    else {
      char v27 = "kEarlyMediaSupportEnforced";
    }
    std::string::basic_string[abi:ne180100]<0>(&v37, v27);
    LoggableString::LoggableString(&v32, &v37);
    (*(void (**)(uint64_t, std::string *))(*(void *)v26 + 40))(v26, &v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)" was: ", 6);
    *(unsigned char *)(v26 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v35, off_1E650FD88[*(int *)(a1 + 1396)]);
    LoggableString::LoggableString(&v36, &v35);
    (*(void (**)(uint64_t, std::string *))(*(void *)v26 + 40))(v26, &v36);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v26 + 17) = 0;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v35.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    *(_DWORD *)(a1 + 1396) = v10;
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_1C5360B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  _Unwind_Resume(a1);
}

uint64_t SipSession::handleInviteOrUpdateResponse(int8x8_t *a1, uint64_t a2, uint64_t *a3)
{
  int8x8_t v6 = a1[31];
  uint64_t v7 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
  int v8 = &ims::kEmptyString;
  if (v7) {
    int v8 = SipUriHeader::tag(v7);
  }
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(*(void *)&v6 + 2048, (void **)v8);
  if ((void **)(*(void *)&v6 + 2056) == v9)
  {
    int v10 = 0;
LABEL_20:
    uint64_t v18 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 56))(a1);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"handleInviteOrUpdateResponse: no fork with remote tag ", 54);
    *(unsigned char *)(v18 + 17) = 0;
    std::string v19 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
    if (v19) {
      int v20 = SipUriHeader::tag(v19);
    }
    else {
      int v20 = &ims::kEmptyString;
    }
    ObfuscatedString::ObfuscatedString((uint64_t)&v230, (const std::string *)v20);
    (*(void (**)(uint64_t, long long *))(*(void *)v18 + 56))(v18, &v230);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    if (SHIBYTE(v232) < 0) {
      operator delete(*((void **)&v231 + 1));
    }
    if (SBYTE7(v231) < 0) {
      operator delete((void *)v230);
    }
    if (a1[169].i8[0])
    {
      if (*(char *)(a2 + 119) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v230, *(const std::string::value_type **)(a2 + 96), *(void *)(a2 + 104));
      }
      else
      {
        long long v230 = *(_OWORD *)(a2 + 96);
        *(void *)&long long v231 = *(void *)(a2 + 112);
      }
      SipSession::logLazuliMessageSessionSetup((uint64_t)a1, (uint64_t)&v230, *(unsigned int *)(a2 + 88));
      if (SBYTE7(v231) < 0) {
        operator delete((void *)v230);
      }
    }
    uint64_t v21 = 1;
    goto LABEL_327;
  }
  uint64_t v11 = (char *)v9[7];
  int v10 = (std::__shared_weak_count *)v9[8];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v11) {
    goto LABEL_20;
  }
  uint64_t v12 = (SipOfferAnswer *)*((void *)v11 + 82);
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v11 + 83);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*a3 + 296) + 112))(*(void *)(*a3 + 296));
  uint64_t v15 = v14[23];
  if ((v15 & 0x80u) == 0) {
    uint64_t v16 = v14[23];
  }
  else {
    uint64_t v16 = *((void *)v14 + 1);
  }
  if (v16 != 6) {
    goto LABEL_35;
  }
  if ((v15 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v14, "INVITE", *((void *)v14 + 1))) {
      goto LABEL_36;
    }
LABEL_35:
    int v22 = 0;
    goto LABEL_72;
  }
  if (v14[23])
  {
    uint64_t v17 = "INVITE";
    while (*v14 == *(unsigned __int8 *)v17)
    {
      ++v14;
      ++v17;
      if (!--v15) {
        goto LABEL_36;
      }
    }
    goto LABEL_35;
  }
LABEL_36:
  if ((*(_DWORD *)(a2 + 88) - 200) > 0xFFFFFF9B) {
    goto LABEL_66;
  }
  uint64_t v23 = *a3;
  long long v24 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(*a3 + 384, (void **)"InviteType");
  uint64_t v25 = &ims::kEmptyString;
  if ((void **)(v23 + 392) != v24) {
    uint64_t v25 = (long long *)(v24 + 7);
  }
  uint64_t v26 = *((unsigned __int8 *)v25 + 23);
  if ((v26 & 0x80u) == 0) {
    uint64_t v27 = *((unsigned __int8 *)v25 + 23);
  }
  else {
    uint64_t v27 = *((void *)v25 + 1);
  }
  if (v27 != 10) {
    goto LABEL_50;
  }
  if ((v26 & 0x80) == 0)
  {
    if (*((unsigned char *)v25 + 23))
    {
      char v28 = "HoldInvite";
      uint64_t v29 = (std::string *)"HoldTimer";
      while (*(unsigned __int8 *)v25 == *(unsigned __int8 *)v28)
      {
        uint64_t v25 = (long long *)((char *)v25 + 1);
        ++v28;
        if (!--v26) {
          goto LABEL_65;
        }
      }
      goto LABEL_50;
    }
LABEL_62:
    uint64_t v29 = (std::string *)"HoldTimer";
    goto LABEL_65;
  }
  if (!memcmp(*(const void **)v25, "HoldInvite", *((void *)v25 + 1))) {
    goto LABEL_62;
  }
LABEL_50:
  uint64_t v30 = *a3;
  char v31 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(*a3 + 384, (void **)"InviteType");
  std::string v32 = &ims::kEmptyString;
  if ((void **)(v30 + 392) != v31) {
    std::string v32 = (long long *)(v31 + 7);
  }
  uint64_t v33 = *((unsigned __int8 *)v32 + 23);
  if ((v33 & 0x80u) == 0) {
    uint64_t v34 = *((unsigned __int8 *)v32 + 23);
  }
  else {
    uint64_t v34 = *((void *)v32 + 1);
  }
  if (v34 != 12) {
    goto LABEL_66;
  }
  if ((v33 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v32, "ResumeInvite", *((void *)v32 + 1))) {
      goto LABEL_66;
    }
  }
  else if (*((unsigned char *)v32 + 23))
  {
    std::string v35 = "ResumeInvite";
    uint64_t v29 = (std::string *)"ResumeTimer";
    while (*(unsigned __int8 *)v32 == *(unsigned __int8 *)v35)
    {
      std::string v32 = (long long *)((char *)v32 + 1);
      ++v35;
      if (!--v33) {
        goto LABEL_65;
      }
    }
    goto LABEL_66;
  }
  uint64_t v29 = (std::string *)"ResumeTimer";
LABEL_65:
  SipTimerContainer::cancelTimer(a1 + 34, v29);
LABEL_66:
  if ((SipSession::confirmed((SipSession *)a1) & 1) == 0)
  {
    if (SipSession::emergency((std::__shared_weak_count *)a1))
    {
      if ((*(_DWORD *)(a2 + 88) - 300) >= 0xFFFFFF39)
      {
        SipSessionInterface::stack((std::__shared_weak_count *)a1, &v230);
        SipTimerContainer::cancelTimer((int8x8_t *)(*(void *)(v230 + 4240) + 4928), (std::string *)&kEmergencySessionSetupTimer);
        if (*((void *)&v230 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v230 + 1));
        }
      }
    }
  }
  int v22 = 1;
LABEL_72:
  uint64_t v36 = *a3;
  if (*(_DWORD *)(a2 + 88) >= 0x12Cu)
  {
    std::string v37 = (std::__shared_weak_count *)a3[1];
    if (v37) {
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v223 = v13;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v38 = *(void *)(v36 + 296);
    std::string::size_type v39 = SipMessage::body<SipSdpBody>(v38);
    if (v39)
    {
      uint64_t v40 = *((void *)v39 + 1);
      std::string v41 = (std::__shared_weak_count *)*((void *)v39 + 2);
      if (v41)
      {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
        if (!v40)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
          goto LABEL_117;
        }
      }
      else if (!v40)
      {
        goto LABEL_117;
      }
      uint64_t v52 = (SipOfferAnswer *)*((void *)v11 + 82);
      uint64_t v53 = (std::__shared_weak_count *)*((void *)v11 + 83);
      if (v53) {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v54 = SipOfferAnswer::remoteAnswerPending(v52);
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      if (v41)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        if (!v54) {
          goto LABEL_117;
        }
      }
      else if (!v54)
      {
        goto LABEL_117;
      }
      uint64_t v55 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"reverting offer/answer state after failed session renegotiation", 63);
      *(unsigned char *)(v55 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v55 + 17) = 0;
      int8x8_t v56 = (SipOfferAnswer *)*((void *)v11 + 82);
      uint64_t v57 = *((void *)v11 + 83);
      if (v57) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
      }
      SipOfferAnswer::revert(v56);
    }
LABEL_117:
    int v58 = *(_DWORD *)(a2 + 88);
    if (v58 != 301)
    {
      if (v58 == 302)
      {
        v283[0] = v36;
        v283[1] = v37;
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipSession::handleSessionMovedResponse((uint64_t)&v230, (SipSession *)a1, a2, (uint64_t)v283);
        SipUri::~SipUri((SipUri *)&v230);
        goto LABEL_188;
      }
      if (v58 == 422)
      {
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v59 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(v36 + 296) + 112))(*(void *)(v36 + 296));
        uint64_t v60 = v59[23];
        if ((v60 & 0x80u) == 0) {
          uint64_t v61 = v59[23];
        }
        else {
          uint64_t v61 = *((void *)v59 + 1);
        }
        if (v61 == 6)
        {
          if ((v60 & 0x80) == 0)
          {
            if (v59[23])
            {
              char v62 = "INVITE";
              while (*v59 == *(unsigned __int8 *)v62)
              {
                ++v59;
                ++v62;
                if (!--v60) {
                  goto LABEL_181;
                }
              }
              goto LABEL_170;
            }
LABEL_181:
            if ((SipSession::confirmed((SipSession *)a1) & 1) == 0)
            {
              long long v266 = 0u;
              long long v265 = 0u;
              long long v264 = 0u;
              long long v263 = 0u;
              long long v262 = 0u;
              long long v261 = 0u;
              long long v260 = 0u;
              long long v258 = 0u;
              long long v259 = 0u;
              long long v257 = 0u;
              BambiCallSessionIntervalTooSmallEvent::BambiCallSessionIntervalTooSmallEvent((BambiCallSessionIntervalTooSmallEvent *)&v257, (const std::string *)a2);
              SipSession::fireCallEvent((SipSession *)a1, (BambiCallEvent *)&v257);
              *(void *)&long long v257 = &unk_1F20C3540;
              *((void *)&v259 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20DD488;
              if (SHIBYTE(v266) < 0) {
                operator delete(*((void **)&v265 + 1));
              }
              SipMessage::~SipMessage((SipMessage *)((char *)&v259 + 8));
              *(void *)&long long v257 = &unk_1F20B8640;
              if (*((void *)&v258 + 1)) {
                std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v258 + 1));
              }
              goto LABEL_188;
            }
            int v79 = 1;
LABEL_171:
            uint64_t v80 = (uint64_t)a1[172];
            *(void *)&long long v242 = v36;
            *((void *)&v242 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v37;
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v81 = SipSessionTimer::handleIntervalTooSmallResponse(v80, a2, (uint64_t)&v242);
            if (*((void *)&v242 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v242 + 1));
            }
            if (v81)
            {
              uint64_t v82 = v36 + 384;
              uint64_t v83 = (void **)(v36 + 392);
              if (v79)
              {
                uint64_t v84 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v82, (void **)"InviteType");
                if (v83 == v84) {
                  uint64_t v85 = &ims::kEmptyString;
                }
                else {
                  uint64_t v85 = (long long *)(v84 + 7);
                }
                SipSession::sendInvite((uint64_t *)a1, (uint64_t)v85, (ImsResult *)&v257);
              }
              else
              {
                uint64_t v86 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v82, (void **)"UpdateType");
                if (v83 == v86) {
                  uint64_t v87 = &ims::kEmptyString;
                }
                else {
                  uint64_t v87 = (long long *)(v86 + 7);
                }
                SipSession::sendUpdate((uint64_t *)a1, (uint64_t)v87, (ImsResult *)&v257);
              }
              ImsResult::~ImsResult((ImsResult *)&v257);
            }
LABEL_188:
            if (!v37) {
              goto LABEL_304;
            }
            int v88 = v37;
            goto LABEL_303;
          }
          if (!memcmp(*(const void **)v59, "INVITE", *((void *)v59 + 1))) {
            goto LABEL_181;
          }
        }
LABEL_170:
        int v79 = 0;
        goto LABEL_171;
      }
      SipSessionInterface::stack((std::__shared_weak_count *)a1, &v257);
      if (!*(unsigned char *)(v257 + 2639)) {
        goto LABEL_331;
      }
      char v66 = SipSession::confirmed((SipSession *)a1);
      char v67 = *(_DWORD *)(a2 + 88) == 486 ? v66 : 1;
      if (v67) {
        goto LABEL_331;
      }
      int v68 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 112))(v38);
      uint64_t v69 = v68[23];
      uint64_t v70 = (v69 & 0x80u) == 0 ? v68[23] : *((void *)v68 + 1);
      if (v70 != 6) {
        goto LABEL_331;
      }
      if ((v69 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v68, "INVITE", *((void *)v68 + 1)))
        {
LABEL_331:
          if (*((void *)&v257 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v257 + 1));
          }
LABEL_333:
          if (*(_DWORD *)(a2 + 88) == 491)
          {
            if (!SipSession::confirmed((SipSession *)a1)) {
              goto LABEL_304;
            }
            long long v131 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 112))(v38);
            uint64_t v132 = v131[23];
            uint64_t v133 = (v132 & 0x80u) == 0 ? v131[23] : *((void *)v131 + 1);
            if (v133 != 6) {
              goto LABEL_304;
            }
            if ((v132 & 0x80) != 0)
            {
              if (memcmp(*(const void **)v131, "INVITE", *((void *)v131 + 1))) {
                goto LABEL_304;
              }
            }
            else if (v131[23])
            {
              uint64_t v134 = "INVITE";
              while (*v131 == *(unsigned __int8 *)v134)
              {
                ++v131;
                ++v134;
                if (!--v132) {
                  goto LABEL_430;
                }
              }
LABEL_304:
              uint64_t v13 = v223;
              if (!v10)
              {
LABEL_306:
                if (v37) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
                }
                int8x8_t v124 = a1[31];
                if (*(void *)&v124 && (uint64_t v125 = *(void *)(*(void *)&v124 + 216)) != 0) {
                  uint64_t v126 = *(void *)(v125 + 136);
                }
                else {
                  uint64_t v126 = 0;
                }
                unint64_t v127 = *(std::__shared_weak_count **)(v126 + 16);
                if (v127 && (unint64_t v128 = std::__shared_weak_count::lock(v127)) != 0)
                {
                  int v129 = *(unsigned __int8 *)(*(void *)(v126 + 8) + 2681);
                  std::__shared_weak_count::__release_shared[abi:ne180100](v128);
                  if (!v129) {
                    goto LABEL_325;
                  }
                }
                else if (!MEMORY[0xA79])
                {
                  goto LABEL_325;
                }
                if (*(char *)(a2 + 119) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)&v230, *(const std::string::value_type **)(a2 + 96), *(void *)(a2 + 104));
                }
                else
                {
                  long long v230 = *(_OWORD *)(a2 + 96);
                  *(void *)&long long v231 = *(void *)(a2 + 112);
                }
                SipSession::logLazuliMessageSessionSetup((uint64_t)a1, (uint64_t)&v230, *(unsigned int *)(a2 + 88));
                if (SBYTE7(v231) < 0) {
                  operator delete((void *)v230);
                }
                bzero(&v230, 0x250uLL);
                *(void *)&long long v261 = 0;
                *(void *)&long long v257 = &unk_1F20B2680;
                *((void *)&v257 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
                LODWORD(v258) = 0;
                long long v260 = 0uLL;
                *((void *)&v258 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
                long long v259 = 0uLL;
                BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)&v230, 15, (uint64_t)&v257);
                *(void *)&long long v230 = &unk_1F20B85E8;
                ImsResult::~ImsResult((ImsResult *)&v257);
                int v239 = *(_DWORD *)(a2 + 88);
                SipUri::operator=((SipUri *)&v240, *(void *)&a1[31] + 232);
                if ((void)v233) {
                  (*(void (**)(void))(*(void *)v233 + 8))(v233);
                }
                *(void *)&long long v233 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
                SipSession::fireCallEvent((SipSession *)a1, (BambiCallEvent *)&v230);
                BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&v230);
LABEL_325:
                uint64_t v21 = 1;
                if (!v13) {
                  goto LABEL_327;
                }
                goto LABEL_326;
              }
LABEL_305:
              std::__shared_weak_count::__release_shared[abi:ne180100](v10);
              goto LABEL_306;
            }
LABEL_430:
            if (v37) {
              atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipSession::schedulePendingInvite((std::string *)a1, v36);
            goto LABEL_188;
          }
          if (*(void *)(*(void *)&a1[31] + 2064) > 1uLL)
          {
            int v135 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 112))(v38);
            uint64_t v136 = v135[23];
            uint64_t v137 = (v136 & 0x80u) == 0 ? v135[23] : *((void *)v135 + 1);
            if (v137 == 6)
            {
              if ((v136 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v135, "UPDATE", *((void *)v135 + 1))) {
                  goto LABEL_356;
                }
              }
              else if (v135[23])
              {
                long long v138 = "UPDATE";
                while (*v135 == *(unsigned __int8 *)v138)
                {
                  ++v135;
                  ++v138;
                  if (!--v136) {
                    goto LABEL_426;
                  }
                }
                goto LABEL_356;
              }
LABEL_426:
              int8x8_t v177 = a1[31];
              if (*(void *)&v177 && (uint64_t v178 = *(void *)(*(void *)&v177 + 216)) != 0) {
                v179 = *(SipUserAgent **)(v178 + 136);
              }
              else {
                v179 = 0;
              }
              uint64_t v180 = SipUserAgent::config(v179);
              if (SipResponseCodeMap::containsResponseCodeForMethod(v180 + 824, (void **)"UPDATE", *(_DWORD *)(a2 + 88), 0))
              {
                uint64_t v181 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 32))(a1);
                (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v181);
                uint64_t v182 = (unsigned char *)ImsOutStream::operator<<(v181, "killing fork, but not terminating call");
                (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v182 + 64))(v182, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                v182[17] = 0;
                int v183 = *(_DWORD *)(a2 + 88);
                if (v183 == 481 || v183 == 408)
                {
                  uint64_t v184 = (uint64_t)a1[31];
                  v255[0] = v11;
                  v255[1] = v10;
                  if (v10) {
                    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  std::string::basic_string[abi:ne180100]<0>(&v257, "Received 481 response to UPDATE");
                  SipDialog::terminateForkWithBye(v184, (uint64_t)v255);
                }
                uint64_t v200 = (uint64_t)a1[31];
                uint64_t v13 = v223;
                if (v10) {
                  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                SipDialog::removeForkWithRemoteTag(v200, (std::string *)(v11 + 152));
                if (!v10) {
                  goto LABEL_306;
                }
                std::__shared_weak_count::__release_shared[abi:ne180100](v10);
                goto LABEL_305;
              }
            }
          }
LABEL_356:
          unint64_t v139 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 112))(v38);
          uint64_t v140 = v139[23];
          if ((v140 & 0x80u) == 0) {
            uint64_t v141 = v139[23];
          }
          else {
            uint64_t v141 = *((void *)v139 + 1);
          }
          if (v141 != 6) {
            goto LABEL_383;
          }
          if ((v140 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v139, "UPDATE", *((void *)v139 + 1))) {
              goto LABEL_383;
            }
          }
          else if (v139[23])
          {
            unint64_t v142 = "UPDATE";
            while (*v139 == *(unsigned __int8 *)v142)
            {
              ++v139;
              ++v142;
              if (!--v140) {
                goto LABEL_369;
              }
            }
            goto LABEL_383;
          }
LABEL_369:
          long long v257 = 0uLL;
          *(void *)&long long v258 = 0;
          long long v145 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v36 + 384, (void **)"UpdateType");
          uint64_t v146 = &ims::kEmptyString;
          if ((void **)(v36 + 392) != v145) {
            uint64_t v146 = (long long *)(v145 + 7);
          }
          if (*((char *)v146 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v257, *(const std::string::value_type **)v146, *((void *)v146 + 1));
          }
          else
          {
            long long v257 = *v146;
            *(void *)&long long v258 = *((void *)v146 + 2);
          }
          int v147 = SBYTE7(v258);
          unint64_t v148 = (void *)v257;
          if ((SBYTE7(v258) & 0x80u) == 0) {
            unint64_t v149 = (const char *)&v257;
          }
          else {
            unint64_t v149 = (const char *)v257;
          }
          if (byte_1EBBDB027 >= 0) {
            long long v150 = (const char *)&SipSession::kUpdateTypeEmergencyLocationUpdate;
          }
          else {
            long long v150 = (const char *)SipSession::kUpdateTypeEmergencyLocationUpdate;
          }
          if (!strcasecmp(v149, v150))
          {
            uint64_t v175 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
            (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v175);
            unint64_t v176 = (unsigned char *)ImsOutStream::operator<<(v175, "ignoring emergency location update error response");
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v176 + 64))(v176, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v176[17] = 0;
            if (SBYTE7(v258) < 0) {
              operator delete((void *)v257);
            }
            goto LABEL_304;
          }
          if (v147 < 0) {
            operator delete(v148);
          }
LABEL_383:
          unint64_t v151 = (void **)(v36 + 392);
          if ((void **)(v36 + 392) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v36 + 384, (void **)"SessionRefresh"))
          {
            int8x8_t v152 = a1[31];
            if (*(void *)&v152 && (uint64_t v153 = *(void *)(*(void *)&v152 + 216)) != 0) {
              unint64_t v154 = *(SipUserAgent **)(v153 + 136);
            }
            else {
              unint64_t v154 = 0;
            }
            if (*(unsigned char *)(SipUserAgent::config(v154) + 1152))
            {
              uint64_t v155 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
              (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v155);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v155 + 8), (uint64_t)"ignoring session refresh error response", 39);
              *(unsigned char *)(v155 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v155 + 64))(v155, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v155 + 17) = 0;
              goto LABEL_304;
            }
          }
          long long v253 = 0u;
          long long v254 = 0u;
          int8x8_t v156 = a1[31];
          if (*(void *)&v156 && (uint64_t v157 = *(void *)(*(void *)&v156 + 216)) != 0) {
            uint64_t v158 = *(SipUserAgent **)(v157 + 136);
          }
          else {
            uint64_t v158 = 0;
          }
          uint64_t v159 = SipUserAgent::config(v158);
          *(void *)&long long v253 = &unk_1F20E3DD0;
          std::map<std::string,std::set<unsigned int>>::map[abi:ne180100]((uint64_t *)&v253 + 1, v159 + 1096);
          int8x8_t v160 = a1[31];
          if (*(void *)&v160 && (uint64_t v161 = *(void *)(*(void *)&v160 + 216)) != 0) {
            long long v162 = *(SipUserAgent **)(v161 + 136);
          }
          else {
            long long v162 = 0;
          }
          if (!*(unsigned char *)(SipUserAgent::config(v162) + 915))
          {
            long long v257 = 0uLL;
            *(void *)&long long v258 = 0;
            ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()();
          }
          unint64_t v163 = (std::__shared_weak_count *)a1[98];
          if (v163)
          {
            unint64_t v164 = std::__shared_weak_count::lock(v163);
            if (!v164) {
              goto LABEL_412;
            }
            v222 = (BambiCall *)a1[97];
            if (!v222) {
              goto LABEL_412;
            }
            if (!SipSession::confirmed((SipSession *)a1)) {
              goto LABEL_412;
            }
            unint64_t v165 = SipMessage::body<SipSdpBody>(v38);
            if (!v165) {
              goto LABEL_412;
            }
            uint64_t v166 = *((void *)v165 + 1);
            v167 = (std::__shared_weak_count *)*((void *)v165 + 2);
            if (v167) {
              atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v221 = v167;
            if (v166
              && (v168 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v38 + 112))(v38),
                  std::operator==[abi:ne180100]<std::allocator<char>>(v168, "INVITE")))
            {
              SipSessionInterface::stack((std::__shared_weak_count *)a1, &v242);
              uint64_t v169 = *(void *)(v242 + 136);
              long long v257 = 0uLL;
              BOOL v170 = BambiClient::callCountExcludingCall(v169, &v257) == 1;
              if (*((void *)&v242 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v242 + 1));
              }
            }
            else
            {
              BOOL v170 = 0;
            }
            if (v221)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v221);
              if (!v170) {
                goto LABEL_412;
              }
            }
            else if (!v170)
            {
              goto LABEL_412;
            }
            unint64_t v201 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v36 + 384, (void **)"InviteType");
            if (v151 == v201) {
              unint64_t v202 = (unsigned __int8 *)&ims::kEmptyString;
            }
            else {
              unint64_t v202 = (unsigned __int8 *)(v201 + 7);
            }
            if (std::operator==[abi:ne180100]<std::allocator<char>>(v202, "HoldInvite"))
            {
              BOOL v203 = 1;
            }
            else
            {
              v204 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v36 + 384, (void **)"InviteType");
              if (v151 == v204) {
                long long v205 = (unsigned __int8 *)&ims::kEmptyString;
              }
              else {
                long long v205 = (unsigned __int8 *)(v204 + 7);
              }
              BOOL v203 = std::operator==[abi:ne180100]<std::allocator<char>>(v205, "ResumeInvite");
            }
            std::string::basic_string[abi:ne180100]<0>(&v257, "INVITE");
            BOOL v206 = SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)&v253, (void **)&v257, *(_DWORD *)(a2 + 88), 0);
            if (SBYTE7(v258) < 0) {
              operator delete((void *)v257);
            }
            if (v206)
            {
              int v207 = *(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64);
              if (v203)
              {
                uint64_t v208 = v207(a1);
                (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v208);
                uint64_t v209 = ImsOutStream::operator<<(v208, "received ");
                std::ostream::operator<<();
                *(unsigned char *)(v209 + 17) = 0;
                v210 = (unsigned char *)ImsOutStream::operator<<(v209, " response to hold/resume reINVITE; falling back to original call setup");
                (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v210 + 64))(v210, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                v210[17] = 0;
                v211 = SipMessage::body<SipSdpBody>(v38);
                v212 = v211;
                if (v211)
                {
                  v213 = (SDPModel *)*((void *)v211 + 1);
                  v214 = (std::__shared_weak_count *)*((void *)v212 + 2);
                  if (v214) {
                    atomic_fetch_add_explicit(&v214->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                }
                else
                {
                  v213 = 0;
                  v214 = 0;
                }
                BOOL isHeld = SDPModel::isHeld(v213);
                if (v214) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v214);
                }
                if (isHeld) {
                  BambiCall::localHoldFailed(v222);
                }
                else {
                  BambiCall::localResumeFailed(v222);
                }
              }
              else
              {
                uint64_t v215 = v207(a1);
                (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v215);
                uint64_t v216 = ImsOutStream::operator<<(v215, "received ");
                std::ostream::operator<<();
                *(unsigned char *)(v216 + 17) = 0;
                v217 = (unsigned char *)ImsOutStream::operator<<(v216, " to reINVITE; fall back to original call setup");
                (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v217 + 64))(v217, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                v217[17] = 0;
                uint64_t v218 = *((void *)v222 + 25);
                v219 = (std::__shared_weak_count *)*((void *)v222 + 26);
                if (v219) {
                  atomic_fetch_add_explicit(&v219->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                *(void *)&long long v257 = v222;
                *((void *)&v257 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v164;
                atomic_fetch_add_explicit(&v164->__shared_owners_, 1uLL, memory_order_relaxed);
                SDPSession::applyOnStreams<SipSession::handleInviteOrUpdateErrorResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>,std::shared_ptr<SipDialogFork>)::$_0>((uint64_t)v251, v218, (uint64_t *)&v257);
                ImsResult::~ImsResult((ImsResult *)v251);
                std::__shared_weak_count::__release_shared[abi:ne180100](v164);
                if (v219) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v219);
                }
              }
              goto LABEL_476;
            }
          }
          else
          {
            unint64_t v164 = 0;
          }
LABEL_412:
          if ((SipSession::confirmed((SipSession *)a1) & 1) == 0)
          {
            int v171 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(v36 + 296) + 112))(*(void *)(v36 + 296));
            uint64_t v172 = v171[23];
            uint64_t v173 = (v172 & 0x80u) == 0 ? v171[23] : *((void *)v171 + 1);
            if (v173 == 6)
            {
              if ((v172 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v171, "INVITE", *((void *)v171 + 1))) {
                  goto LABEL_475;
                }
              }
              else
              {
                if (!v171[23]) {
                  goto LABEL_475;
                }
                long long v174 = "INVITE";
                while (*v171 == *(unsigned __int8 *)v174)
                {
                  ++v171;
                  ++v174;
                  if (!--v172) {
                    goto LABEL_475;
                  }
                }
              }
            }
          }
          uint64_t v191 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
          (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v191);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v191 + 8), (uint64_t)"ending session due to ", 22);
          *(unsigned char *)(v191 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v191 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v191 + 8), (uint64_t)" response to ", 13);
          *(unsigned char *)(v191 + 17) = 0;
          v192 = (const std::string *)(*(uint64_t (**)(void))(**(void **)(v36 + 296) + 112))(*(void *)(v36 + 296));
          LoggableString::LoggableString((std::string *)&v257, v192);
          (*(void (**)(uint64_t, long long *))(*(void *)v191 + 40))(v191, &v257);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v191 + 8), (uint64_t)" request", 8);
          *(unsigned char *)(v191 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v191 + 64))(v191, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v191 + 17) = 0;
          if (SBYTE7(v258) < 0) {
            operator delete((void *)v257);
          }
          *(void *)&long long v273 = 0;
          long long v272 = 0u;
          long long v271 = 0u;
          long long v270 = 0u;
          long long v269 = 0u;
          long long v268 = 0u;
          long long v267 = 0u;
          long long v266 = 0u;
          long long v265 = 0u;
          long long v264 = 0u;
          long long v263 = 0u;
          long long v262 = 0u;
          long long v261 = 0u;
          long long v260 = 0u;
          long long v258 = 0u;
          long long v259 = 0u;
          long long v257 = 0u;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v257);
          long long v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v257, (uint64_t)"Remote end rejected ", 20);
          uint64_t v194 = (*(uint64_t (**)(void))(**(void **)(v36 + 296) + 112))(*(void *)(v36 + 296));
          int v195 = *(char *)(v194 + 23);
          if (v195 >= 0) {
            uint64_t v196 = v194;
          }
          else {
            uint64_t v196 = *(void *)v194;
          }
          if (v195 >= 0) {
            uint64_t v197 = *(unsigned __int8 *)(v194 + 23);
          }
          else {
            uint64_t v197 = *(void *)(v194 + 8);
          }
          long long v198 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, v196, v197);
          unint64_t v199 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v198, (uint64_t)" request ", 9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)" with response ", 15);
          std::ostream::operator<<();
          uint64_t v250 = 0;
          long long v248 = 0u;
          long long v249 = 0u;
          long long v246 = 0u;
          long long v247 = 0u;
          long long v244 = 0u;
          long long v245 = 0u;
          long long v242 = 0u;
          long long v243 = 0u;
          std::string::basic_string[abi:ne180100]<0>(&v252, "NetworkError");
          SipSessionInterface::terminationReason((std::__shared_weak_count *)a1, (uint64_t)&v252, (BambiCallTerminationReason *)&v242);
          if (SHIBYTE(v252.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v252.__r_.__value_.__l.__data_);
          }
          std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&v257 + 8, &v252);
          if (SBYTE7(v245) < 0) {
            operator delete((void *)v244);
          }
          long long v244 = *(_OWORD *)&v252.__r_.__value_.__l.__data_;
          *(void *)&long long v245 = *((void *)&v252.__r_.__value_.__l + 2);
          SipSession::hangUp((SipSession *)a1, (uint64_t)v241);
          ImsResult::~ImsResult((ImsResult *)v241);
          if (*((void *)&v249 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v249 + 1));
          }
          if (*((void *)&v248 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v248 + 1));
          }
          if (SHIBYTE(v247) < 0) {
            operator delete(*((void **)&v246 + 1));
          }
          if (SBYTE7(v245) < 0) {
            operator delete((void *)v244);
          }
          if (SHIBYTE(v243) < 0) {
            operator delete(*((void **)&v242 + 1));
          }
          *(void *)&long long v257 = *MEMORY[0x1E4FBA418];
          *(void *)((char *)&v257 + *(void *)(v257 - MsrpTransportTcp::connectionResetByPeer((MsrpTransportTcp *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
          *((void *)&v257 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
          if (SHIBYTE(v262) < 0) {
            operator delete(*((void **)&v261 + 1));
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1C878E270](&v264);
LABEL_475:
          if (!v164)
          {
LABEL_477:
            *(void *)&long long v253 = &unk_1F20E3DD0;
            std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy((uint64_t)&v253 + 8, (void *)v254);
            goto LABEL_304;
          }
LABEL_476:
          std::__shared_weak_count::__release_shared[abi:ne180100](v164);
          goto LABEL_477;
        }
      }
      else if (v68[23])
      {
        char v71 = "INVITE";
        while (*v68 == *(unsigned __int8 *)v71)
        {
          ++v68;
          ++v71;
          if (!--v69) {
            goto LABEL_366;
          }
        }
        goto LABEL_331;
      }
LABEL_366:
      v143 = SipMessage::body<SipCallWaitingInfoBody>(v38);
      if (v143) {
        BOOL v144 = v143[96] != 0;
      }
      else {
        BOOL v144 = 0;
      }
      if (*((void *)&v257 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v257 + 1));
      }
      if (v144) {
        goto LABEL_333;
      }
      uint64_t v185 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v185);
      long long v186 = (unsigned char *)ImsOutStream::operator<<(v185, "Faking network based call waiting");
      (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v186 + 64))(v186, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v186[17] = 0;
      unint64_t v187 = (std::__shared_weak_count *)a1[98];
      if (!v187) {
        goto LABEL_304;
      }
      unint64_t v188 = std::__shared_weak_count::lock(v187);
      if (!v188) {
        goto LABEL_304;
      }
      unint64_t v189 = v188;
      unint64_t v190 = (BambiCall *)a1[97];
      if (v190) {
        BambiCall::fakeNetworkBasedCallWaiting(v190);
      }
      int v88 = v189;
LABEL_303:
      std::__shared_weak_count::__release_shared[abi:ne180100](v88);
      goto LABEL_304;
    }
    uint64_t v63 = (std::__shared_weak_count *)a1[98];
    if (v63)
    {
      uint64_t v64 = std::__shared_weak_count::lock(v63);
      if (v64)
      {
        int8x8_t v65 = a1[97];
LABEL_155:
        uint64_t v282 = 0;
        long long v281 = 0u;
        long long v280 = 0u;
        long long v279 = 0u;
        long long v278 = 0u;
        long long v277 = 0u;
        long long v276 = 0u;
        long long v275 = 0u;
        long long v274 = 0u;
        long long v273 = 0u;
        long long v272 = 0u;
        long long v271 = 0u;
        long long v270 = 0u;
        long long v269 = 0u;
        long long v268 = 0u;
        long long v267 = 0u;
        long long v266 = 0u;
        long long v265 = 0u;
        long long v264 = 0u;
        long long v263 = 0u;
        long long v262 = 0u;
        long long v261 = 0u;
        long long v260 = 0u;
        long long v258 = 0u;
        long long v259 = 0u;
        long long v257 = 0u;
        v256[0] = v36;
        v256[1] = v37;
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipSession::handleSessionMovedResponse((uint64_t)&v257, (SipSession *)a1, a2, (uint64_t)v256);
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
        if (*(void *)&v65
          && (*(unsigned int (**)(int8x8_t))(**(void **)&v65 + 96))(v65)
          && SipUri::isValidUri((SipUri *)&v257))
        {
          uint64_t v72 = HIBYTE(v264);
          if (v264 < 0) {
            uint64_t v72 = v264;
          }
          if (v72)
          {
            uint64_t v73 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
            (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v73);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v73 + 8), (uint64_t)"Updating conference server URI to ", 34);
            *(unsigned char *)(v73 + 17) = 0;
            (*(void (**)(long long *, uint64_t))(v257 + 40))(&v257, v73);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v73 + 64))(v73, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v73 + 17) = 0;
            int8x8_t v74 = a1[31];
            if (*(void *)&v74 && (uint64_t v75 = *(void *)(*(void *)&v74 + 216)) != 0) {
              uint64_t v76 = *(SipUserAgent **)(v75 + 136);
            }
            else {
              uint64_t v76 = 0;
            }
            uint64_t v123 = SipUserAgent::config(v76);
            SipUri::operator=((SipUri *)(v123 + 48), (uint64_t)&v257);
          }
        }
        SipUri::~SipUri((SipUri *)&v257);
        if (!v64) {
          goto LABEL_304;
        }
        int v88 = v64;
        goto LABEL_303;
      }
    }
    else
    {
      uint64_t v64 = 0;
    }
    int8x8_t v65 = 0;
    goto LABEL_155;
  }
  uint64_t v42 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(v36 + 296) + 112))(*(void *)(v36 + 296));
  if ((SipSession::confirmed((SipSession *)a1) & 1) == 0)
  {
    int v43 = *(_DWORD *)(a2 + 88);
    if ((v43 - 180) <= 9)
    {
      uint64_t v44 = v42[23];
      size_t v45 = *((void *)v42 + 1);
      if ((v44 & 0x80u) == 0) {
        uint64_t v46 = v42[23];
      }
      else {
        uint64_t v46 = *((void *)v42 + 1);
      }
      if (v46 != 6) {
        goto LABEL_207;
      }
      if ((v44 & 0x80) != 0)
      {
        uint64_t v77 = *(const void **)v42;
        uint64_t v78 = "INVITE";
        goto LABEL_202;
      }
      if (!v42[23]) {
        goto LABEL_203;
      }
      std::string v47 = "INVITE";
      std::string v48 = v42;
      while (*v48 == *(unsigned __int8 *)v47)
      {
        ++v48;
        ++v47;
        if (!--v44) {
          goto LABEL_203;
        }
      }
    }
    if ((v43 - 200) > 0x63) {
      goto LABEL_207;
    }
    uint64_t v49 = v42[23];
    size_t v45 = *((void *)v42 + 1);
    if ((v49 & 0x80u) == 0) {
      uint64_t v50 = v42[23];
    }
    else {
      uint64_t v50 = *((void *)v42 + 1);
    }
    if (v50 != 6)
    {
      if (v50 != 5) {
        goto LABEL_207;
      }
      if ((v49 & 0x80) == 0)
      {
        if (v42[23])
        {
          uint64_t v51 = "PRACK";
          while (*v42 == *(unsigned __int8 *)v51)
          {
            ++v42;
            ++v51;
            if (!--v49) {
              goto LABEL_203;
            }
          }
          goto LABEL_207;
        }
LABEL_203:
        uint64_t v90 = SipMessage::header<SipPEarlyMediaHeader>(a2);
        char v91 = (SipUriHeader *)SipMessage::header<SipToHeader>(a2);
        if (v91) {
          uint64_t v92 = SipUriHeader::tag(v91);
        }
        else {
          uint64_t v92 = &ims::kEmptyString;
        }
        SipSession::processEarlyMediaHeader((uint64_t)a1, (uint64_t)v90, (std::string *)v92);
        goto LABEL_207;
      }
      uint64_t v77 = *(const void **)v42;
      uint64_t v78 = "PRACK";
LABEL_202:
      if (memcmp(v77, v78, v45)) {
        goto LABEL_207;
      }
      goto LABEL_203;
    }
    if ((v49 & 0x80) != 0)
    {
      uint64_t v77 = *(const void **)v42;
      uint64_t v78 = "UPDATE";
      goto LABEL_202;
    }
    if (!v42[23]) {
      goto LABEL_203;
    }
    uint64_t v89 = "UPDATE";
    while (*v42 == *(unsigned __int8 *)v89)
    {
      ++v42;
      ++v89;
      if (!--v49) {
        goto LABEL_203;
      }
    }
  }
LABEL_207:
  long long v257 = 0uLL;
  SipSessionInterface::stack((std::__shared_weak_count *)a1, &v257);
  if ((void)v257)
  {
    if (*(unsigned char *)(v257 + 2681))
    {
      int v93 = SipMessage::header<SipContactHeader>(a2);
      if (v93)
      {
        uint64_t v94 = v93[9];
        if (v94)
        {
          if (v94 != v93[10] && SipUri::isValidUri((SipUri *)(v94 + 8)))
          {
            v224 = v13;
            int8x8_t v95 = a1[31];
            std::string::basic_string[abi:ne180100]<0>(&v230, "+g.gsma.rcs.isbot");
            *(unsigned char *)(*(void *)&v95 + 1800) = v94 + 432 != (void)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v94 + 424, (void **)&v230);
            if (SBYTE7(v231) < 0) {
              operator delete((void *)v230);
            }
            uint64_t v13 = v224;
            SipUri::operator=((SipUri *)(*(void *)&a1[31] + 1104), v94 + 8);
          }
        }
      }
    }
  }
  if (*((void *)&v257 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v257 + 1));
  }
  SipOfferAnswer::updateWithIncomingResponse(v12, (_DWORD *)a2, (unsigned __int8 *)(*a3 + 328), (uint64_t)&v230);
  int v96 = (*(uint64_t (**)(void, void))(**((void **)&v230 + 1) + 24))(*((void *)&v230 + 1), v231);
  ImsResult::~ImsResult((ImsResult *)&v230);
  SipDialogFork::handleTargetRefresh((SipDialogFork *)v11, (const SipMessage *)a2);
  if (v22 && (*(_DWORD *)(a2 + 88) - 200) <= 0x63)
  {
    long long v97 = (std::__shared_weak_count *)a3[1];
    uint64_t v228 = *a3;
    v229 = v97;
    if (v97) {
      atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v98 = SipOfferAnswer::localAnswerPending(*(SipOfferAnswer **)(*((void *)v12 + 19) + 16), *(std::__shared_weak_count **)(*((void *)v12 + 19) + 24));
    SipSessionInterface::addAckRetransmitHandlerForClientTransaction((uint64_t)a1, (uint64_t)&v228, (const SipResponse *)a2, v98);
    if (v229) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v229);
    }
  }
  if (!v96)
  {
    SipSessionTimer::updateFromIncomingResponse(*(SipSessionTimer **)&a1[172], (const SipResponse *)a2);
    if (!SipSession::confirmed((SipSession *)a1) || a1[108].i8[1])
    {
      SipSession::confirmed((SipSession *)a1);
      SipPreconditions::updateFromIncomingMessage((uint64_t)&a1[179], (std::string *)(v11 + 152), a2);
    }
    if (v22)
    {
      char v111 = SipSession::confirmed((SipSession *)a1);
      char v112 = *(_DWORD *)(a2 + 88) == 183 ? v111 : 1;
      if ((v112 & 1) == 0) {
        SipSession::startLocalQosTimerMO(a1);
      }
    }
    if (SipResponse::requiresPrack((SipResponse *)a2))
    {
      uint64_t v113 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v113);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v113 + 8), (uint64_t)"waiting for PRACK to complete before sending precondition update", 64);
      *(unsigned char *)(v113 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v113 + 64))(v113, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v113 + 17) = 0;
    }
    else if (!v22 || (*(_DWORD *)(a2 + 88) - 200) >= 0xFFFFFF9C)
    {
      SipDialogFork::sendPreconditionUpdate((SipDialogFork *)v11, 1, (uint64_t)v225);
      ImsResult::~ImsResult((ImsResult *)v225);
    }
    goto LABEL_325;
  }
  char v99 = v22 ^ 1;
  if ((*(_DWORD *)(a2 + 88) - 200) > 0x63) {
    char v99 = 1;
  }
  if (v99 & 1) != 0 || (SipSession::confirmed((SipSession *)a1))
  {
    uint64_t v238 = 0;
    long long v236 = 0u;
    long long v237 = 0u;
    long long v234 = 0u;
    long long v235 = 0u;
    long long v232 = 0u;
    long long v233 = 0u;
    long long v230 = 0u;
    long long v231 = 0u;
    std::string::basic_string[abi:ne180100]<0>(&v257, "InvalidSdp");
    SipSessionInterface::terminationReason((std::__shared_weak_count *)a1, (uint64_t)&v257, (BambiCallTerminationReason *)&v230);
    if (SBYTE7(v258) < 0) {
      operator delete((void *)v257);
    }
    if (v22
      && (SipSession::confirmed((SipSession *)a1) & 1) == 0
      && SipSession::emergency((std::__shared_weak_count *)a1))
    {
      SipSessionInterface::stack((std::__shared_weak_count *)a1, &v257);
      long long v100 = (ImsPrefs *)SipStack::prefs((SipStack *)v257);
      EmergencyAnonymousAutomaticRedialKey = (void **)ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(v100);
      int v102 = ImsPrefs::BOOLValue(v100, EmergencyAnonymousAutomaticRedialKey);
      if (*((void *)&v257 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v257 + 1));
      }
      if (v102) {
        BYTE6(v238) = 1;
      }
    }
    if (a1[169].i8[0])
    {
      uint64_t v103 = qword_1EBBDAF88;
      if (qword_1EBBDAF88)
      {
        long long v104 = &qword_1EBBDAF88;
        do
        {
          unsigned int v105 = *(_DWORD *)(v103 + 32);
          BOOL v106 = v105 >= 0x1E8;
          if (v105 >= 0x1E8) {
            long long v107 = (uint64_t *)v103;
          }
          else {
            long long v107 = (uint64_t *)(v103 + 8);
          }
          if (v106) {
            long long v104 = (uint64_t *)v103;
          }
          uint64_t v103 = *v107;
        }
        while (*v107);
        char v108 = &ims::kEmptyString;
        if (v104 != &qword_1EBBDAF88)
        {
          unsigned int v109 = *((_DWORD *)v104 + 8);
          uint64_t v110 = (long long *)(v104 + 5);
          if (v109 <= 0x1E8) {
            char v108 = v110;
          }
        }
      }
      else
      {
        char v108 = &ims::kEmptyString;
      }
      SipSession::logLazuliMessageSessionSetup((uint64_t)a1, (uint64_t)v108, 488);
    }
    SipSession::hangUp((SipSession *)a1, (uint64_t)v226);
    ImsResult::~ImsResult((ImsResult *)v226);
    if (*((void *)&v237 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v237 + 1));
    }
    if (*((void *)&v236 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v236 + 1));
    }
    if (SHIBYTE(v235) < 0) {
      operator delete(*((void **)&v234 + 1));
    }
    if (SBYTE7(v233) < 0) {
      operator delete((void *)v232);
    }
    if (SHIBYTE(v231) < 0)
    {
      long long v122 = (void *)*((void *)&v230 + 1);
LABEL_296:
      operator delete(v122);
    }
  }
  else
  {
    if (a1[169].i8[0])
    {
      uint64_t v114 = qword_1EBBDAF88;
      if (qword_1EBBDAF88)
      {
        long long v115 = &qword_1EBBDAF88;
        do
        {
          unsigned int v116 = *(_DWORD *)(v114 + 32);
          BOOL v117 = v116 >= 0x25E;
          if (v116 >= 0x25E) {
            long long v118 = (uint64_t *)v114;
          }
          else {
            long long v118 = (uint64_t *)(v114 + 8);
          }
          if (v117) {
            long long v115 = (uint64_t *)v114;
          }
          uint64_t v114 = *v118;
        }
        while (*v118);
        long long v119 = &ims::kEmptyString;
        if (v115 != &qword_1EBBDAF88)
        {
          unsigned int v120 = *((_DWORD *)v115 + 8);
          long long v121 = (long long *)(v115 + 5);
          if (v120 <= 0x25E) {
            long long v119 = v121;
          }
        }
      }
      else
      {
        long long v119 = &ims::kEmptyString;
      }
      SipSession::logLazuliMessageSessionSetup((uint64_t)a1, (uint64_t)v119, 606);
    }
    std::string::basic_string[abi:ne180100]<0>(&v230, "ReceivedRejectSdp");
    SipSession::bye((std::__shared_weak_count *)a1, (uint64_t)&v230, 0);
    ImsResult::~ImsResult((ImsResult *)v227);
    if (SBYTE7(v231) < 0)
    {
      long long v122 = (void *)v230;
      goto LABEL_296;
    }
  }
  uint64_t v21 = 0;
  if (v13) {
LABEL_326:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_327:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v21;
}

void sub_1C5363124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  STACK[0x4B0] = a11;
  std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::destroy(a12, (void *)STACK[0x4C0]);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(a1);
}

void SipSession::handleBye(std::__shared_weak_count *a1, const SipRequest *a2, void *a3)
{
  if (SipSession::established((SipSession *)a1))
  {
    uint64_t shared_owners = (std::__shared_weak_count *)a1[10].__shared_owners_;
    uint64_t v7 = *a3 + 328;
    uint64_t v8 = (*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_23_0);
    SipDialog::sendResponse(__p, shared_owners, v7, v8, 200, (ImsResult *)v19);
    ImsResult::~ImsResult((ImsResult *)v19);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    shared_weak_owners = (std::__shared_weak_count *)a1[32].__shared_weak_owners_;
    if (shared_weak_owners && (int v10 = std::__shared_weak_count::lock(shared_weak_owners)) != 0)
    {
      uint64_t v11 = v10;
      uint64_t v12 = a1[32].__shared_owners_;
      bzero(__p, 0x250uLL);
      char v13 = 0;
      uint64_t v16 = v12;
      uint64_t v17 = v11;
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      bzero(__p, 0x250uLL);
      uint64_t v11 = 0;
      uint64_t v16 = 0;
      uint64_t v17 = 0;
      char v13 = 1;
    }
    BambiCallSessionTerminatedEvent::BambiCallSessionTerminatedEvent(__p, &v16);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    SipSessionInterface::stack(a1, &v14);
    BambiCallSessionTerminationBaseEvent::setReasonFromIncomingByeOrCancelRequest((BambiCallSessionTerminationBaseEvent *)__p, a2, (void (***)(uint64_t *__return_ptr))(v14 + 2416));
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    BambiCallSessionTerminationBaseEvent::setReferrerFromIncomingByeRequest((BambiCallSessionTerminationBaseEvent *)__p, a2);
    SipSession::terminateWithEvent((BambiCall **)a1, (BambiCallEvent *)__p, 13);
    BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)__p);
    if ((v13 & 1) == 0) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
}

void sub_1C53636C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&__p);
  if ((v20 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(a1);
}

uint64_t SipSession::established(SipSession *this)
{
  uint64_t v2 = *((void *)this + 90);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v2)
  {
    uint64_t v6 = 0;
    if (!v3) {
      return v6;
    }
    goto LABEL_9;
  }
  uint64_t v4 = *((void *)this + 90);
  size_t v5 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 136))(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v3) {
LABEL_9:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v6;
}

void sub_1C53637D0(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::handleOptions(void *a1, SipRequest *a2, uint64_t *a3)
{
  uint64_t v33 = 0;
  long long __p = 0u;
  memset(v31, 0, sizeof(v31));
  SipResponse::SipResponse((SipResponse *)v31, 200, a2);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v27, a1 + 23);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  std::dynamic_pointer_cast[abi:ne180100]<SipSession,SipSessionInterface>((void **)&v29, &v27);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  uint64_t v6 = v29;
  if (v29)
  {
    uint64_t v7 = *(void *)(*(void *)(a1[31] + 216) + 136);
    uint64_t v8 = *(void *)(v7 + 232);
    uint64_t v9 = *(std::__shared_weak_count **)(v7 + 240);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v10 = v30;
    uint64_t v25 = v6;
    uint64_t v26 = v30;
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipOptionsManager::fillOptionsResponse(v8, a2, &v25, (SipResponse *)v31);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    uint64_t v11 = a1[31];
    if (v11 && (uint64_t v12 = *(void *)(v11 + 216)) != 0) {
      uint64_t v13 = *(void *)(v12 + 136);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(std::__shared_weak_count **)(v13 + 16);
    if (v14 && (uint64_t v15 = std::__shared_weak_count::lock(v14)) != 0)
    {
      int v16 = *(unsigned __int8 *)(*(void *)(v13 + 8) + 2681);
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      if (!v16) {
        goto LABEL_25;
      }
    }
    else if (!MEMORY[0xA79])
    {
      goto LABEL_25;
    }
    uint64_t v17 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Routing incoming OPTIONS tags to Lazuli", 39);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    uint64_t v18 = *(void *)(*(void *)(a1[31] + 216) + 136);
    uint64_t v19 = *(void *)(v18 + 208);
    char v20 = *(std::__shared_weak_count **)(v18 + 216);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, SipRequest *, void, void))(*(void *)v19 + 56))(v19, a2, 0, 0);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
LABEL_25:
    uint64_t v21 = (std::__shared_weak_count *)a3[1];
    uint64_t v22 = *a3;
    uint64_t v23 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *__return_ptr, void *, void *, uint64_t *))(*a1 + 240))(v24, a1, v31, &v22);
    ImsResult::~ImsResult((ImsResult *)v24);
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v10) {
      goto LABEL_30;
    }
    goto LABEL_31;
  }
  int v10 = v30;
  if (v30) {
LABEL_30:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
LABEL_31:
  v31[0] = &unk_1F20DD488;
  if (SHIBYTE(v33) < 0) {
    operator delete((void *)__p);
  }
  SipMessage::~SipMessage((SipMessage *)v31);
}

void sub_1C5363AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  SipResponse::~SipResponse(&a27);
  _Unwind_Resume(a1);
}

void SipSession::handleInfo(void *a1, SipRequest *a2, uint64_t *a3)
{
  uint64_t v13 = 0;
  long long __p = 0u;
  memset(v11, 0, sizeof(v11));
  SipResponse::SipResponse((SipResponse *)v11, 200, a2);
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v8 = *a3;
  uint64_t v9 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *__return_ptr, void *, _OWORD *, uint64_t *))(*a1 + 240))(v10, a1, v11, &v8);
  ImsResult::~ImsResult((ImsResult *)v10);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v7 = *(void (****)(void, SipRequest *))(*(void *)(*(void *)(a1[31] + 216) + 136) + 680);
  if (v7) {
    (**v7)(v7, a2);
  }
  *(void *)&v11[0] = &unk_1F20DD488;
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)__p);
  }
  SipMessage::~SipMessage((SipMessage *)v11);
}

void sub_1C5363C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  SipResponse::~SipResponse((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SipSession::handleRequest(uint64_t a1, const SipRequest *a2, uint64_t *a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"handling ", 9);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = (const std::string *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
  LoggableString::LoggableString((std::string *)v31, v7);
  (*(void (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)" request in state ", 18);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 664) + 24))(a1 + 664);
  uint64_t v9 = (const std::string *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 664) + 16))(a1 + 664, v8);
  LoggableString::LoggableString(__p, v9);
  (*(void (**)(uint64_t, std::string *))(*(void *)v6 + 40))(v6, __p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v32) < 0) {
    operator delete(v31[0]);
  }
  int v10 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2);
  if (v10) {
    uint64_t v11 = SipUriHeader::tag(v10);
  }
  else {
    uint64_t v11 = &ims::kEmptyString;
  }
  std::string::operator=((std::string *)(a1 + 1616), (const std::string *)v11);
  uint64_t v12 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(void *)a2 + 112))(a2);
  uint64_t v13 = v12[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = v12[23];
  }
  else {
    uint64_t v14 = *((void *)v12 + 1);
  }
  if (v14 != 6) {
    goto LABEL_24;
  }
  if ((v13 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v12, "INVITE", *((void *)v12 + 1))) {
      goto LABEL_24;
    }
  }
  else if (v12[23])
  {
    uint64_t v15 = "INVITE";
    while (*v12 == *(unsigned __int8 *)v15)
    {
      ++v12;
      ++v15;
      if (!--v13) {
        goto LABEL_19;
      }
    }
    goto LABEL_24;
  }
LABEL_19:
  if (*(void *)(a1 + 1368))
  {
    int v16 = (std::__shared_weak_count *)a3[1];
    uint64_t v45 = *a3;
    uint64_t v46 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 240))(v31, a1);
    uint64_t v17 = (*(unsigned int (**)(void *, void))(*(void *)v31[1] + 24))(v31[1], v32) ^ 1;
    ImsResult::~ImsResult((ImsResult *)v31);
    if (v46) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    }
    return v17;
  }
LABEL_24:
  uint64_t v18 = *(void *)(a1 + 720);
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 728);
  if (v19)
  {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (!v18) {
    goto LABEL_46;
  }
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)char v31 = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v41, (void *)(a1 + 184));
  if (v41) {
    char v20 = (std::__shared_weak_count *)(v41 + 104);
  }
  else {
    char v20 = 0;
  }
  int v43 = v20;
  uint64_t v44 = v42;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  LoggableString::LoggableString((LoggableString *)__p, "handleRequest");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v31, &v43, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  uint64_t v21 = *(void *)(a1 + 720);
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 728);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v23 = (std::__shared_weak_count *)a3[1];
  uint64_t v39 = *a3;
  uint64_t v40 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v24 = (*(uint64_t (**)(uint64_t, const SipRequest *, uint64_t *))(*(void *)v21 + 88))(v21, a2, &v39);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v31);
  if (v24) {
    return 1;
  }
LABEL_46:
  uint64_t v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  *(_OWORD *)char v31 = 0u;
  SipResponse::SipResponse((SipResponse *)v31, 405, a2);
  uint64_t v25 = (std::__shared_weak_count *)a3[1];
  uint64_t v28 = *a3;
  uint64_t v29 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, void **, uint64_t *))(*(void *)a1 + 240))(__p, a1, v31, &v28);
  int v26 = (*(uint64_t (**)(std::string::size_type, void))(*(void *)__p[0].__r_.__value_.__l.__size_ + 24))(__p[0].__r_.__value_.__l.__size_, LODWORD(__p[0].__r_.__value_.__r.__words[2]));
  ImsResult::~ImsResult((ImsResult *)__p);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  uint64_t v17 = v26 ^ 1u;
  v31[0] = &unk_1F20DD488;
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)v37);
  }
  SipMessage::~SipMessage((SipMessage *)v31);
  return v17;
}

void sub_1C5364230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  ImsResult::~ImsResult((ImsResult *)&a24);
  char v31 = *(std::__shared_weak_count **)(v29 - 56);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  _Unwind_Resume(a1);
}

uint64_t SipSession::handleResponse(void *a1, SipResponse *a2, void *a3)
{
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)a2);
  if (v6) {
    uint64_t v7 = SipUriHeader::tag(v6);
  }
  else {
    uint64_t v7 = &ims::kEmptyString;
  }
  std::string::operator=((std::string *)(a1 + 202), (const std::string *)v7);
  uint64_t v8 = (std::__shared_weak_count *)a3[1];
  v88[0] = *a3;
  v88[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v9 = SipSessionInterface::handleResponse((uint64_t)a1, (uint64_t)a2, (uint64_t)v88);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if ((v9 & 1) == 0)
  {
    uint64_t v10 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"handling ", 9);
    *(unsigned char *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" response to ", 13);
    *(unsigned char *)(v10 + 17) = 0;
    uint64_t v11 = (const std::string *)(*(uint64_t (**)(void))(**(void **)(*a3 + 296) + 112))(*(void *)(*a3 + 296));
    LoggableString::LoggableString(&v89, v11);
    (*(void (**)(uint64_t, std::string *))(*(void *)v10 + 40))(v10, &v89);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)" request in state ", 18);
    *(unsigned char *)(v10 + 17) = 0;
    uint64_t v12 = (*(uint64_t (**)(void *))(a1[83] + 24))(a1 + 83);
    uint64_t v13 = (const std::string *)(*(uint64_t (**)(void *, uint64_t))(a1[83] + 16))(a1 + 83, v12);
    LoggableString::LoggableString((std::string *)__p, v13);
    (*(void (**)(uint64_t, void **))(*(void *)v10 + 40))(v10, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    if (SBYTE7(v86) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    long long v86 = 0u;
    long long v87 = 0u;
    *(_OWORD *)long long __p = 0u;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v92, a1 + 23);
    if (v92) {
      uint64_t v14 = (std::__shared_weak_count *)(v92 + 104);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v83 = v14;
    uint64_t v84 = v93;
    uint64_t v92 = 0;
    int v93 = 0;
    LoggableString::LoggableString((LoggableString *)&v89, "handleResponse");
    SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)__p, &v83, &v89);
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    if (v84) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v84);
    }
    if (v93) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v93);
    }
    uint64_t v15 = a1[31];
    int v16 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)a2);
    if (v16) {
      uint64_t v17 = SipUriHeader::tag(v16);
    }
    else {
      uint64_t v17 = &ims::kEmptyString;
    }
    uint64_t v18 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v15 + 2048, (void **)v17);
    if ((void **)(v15 + 2056) == v18)
    {
      uint64_t v19 = 0;
      char v20 = 0;
    }
    else
    {
      char v20 = (char *)v18[7];
      uint64_t v19 = (std::__shared_weak_count *)v18[8];
      if (v19) {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    uint64_t v21 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*a3 + 296) + 112))(*(void *)(*a3 + 296));
    uint64_t v22 = v21[23];
    if ((v22 & 0x80u) == 0) {
      uint64_t v23 = v21[23];
    }
    else {
      uint64_t v23 = *((void *)v21 + 1);
    }
    if (v23 != 5) {
      goto LABEL_40;
    }
    if ((v22 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v21, "PRACK", *((void *)v21 + 1))) {
        goto LABEL_40;
      }
    }
    else if (v21[23])
    {
      char v24 = "PRACK";
      while (*v21 == *(unsigned __int8 *)v24)
      {
        ++v21;
        ++v24;
        if (!--v22) {
          goto LABEL_44;
        }
      }
LABEL_40:
      uint64_t v25 = a1[90];
      int v26 = (std::__shared_weak_count *)a1[91];
      if (v26)
      {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        if (!v25) {
          goto LABEL_66;
        }
        uint64_t v27 = (std::__shared_weak_count *)a1[91];
        uint64_t v25 = a1[90];
        if (v27)
        {
          char v28 = 0;
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_60:
          long long v35 = (std::__shared_weak_count *)a3[1];
          uint64_t v78 = *a3;
          int v79 = v35;
          if (v35) {
            atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, SipResponse *, uint64_t *))(*(void *)v25 + 96))(v25, a2, &v78);
          if (v79) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v79);
          }
          if ((v28 & 1) == 0) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
LABEL_66:
          if (!SipResponse::requiresPrack(a2)) {
            goto LABEL_150;
          }
          if (!*a3) {
            goto LABEL_150;
          }
          if (!v36) {
            goto LABEL_150;
          }
          long long v37 = v36;
          uint64_t v38 = (std::__shared_weak_count *)a3[1];
          if (v38)
          {
            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!SipResponse::requiresPrack(a2)) {
            goto LABEL_147;
          }
          uint64_t v39 = a1[31];
          uint64_t v40 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)a2);
          if (v40) {
            uint64_t v41 = SipUriHeader::tag(v40);
          }
          else {
            uint64_t v41 = &ims::kEmptyString;
          }
          uint64_t v64 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v39 + 2048, (void **)v41);
          if ((void **)(v39 + 2056) == v64)
          {
            int8x8_t v65 = 0;
          }
          else
          {
            char v66 = (char *)v64[7];
            int8x8_t v65 = (std::__shared_weak_count *)v64[8];
            if (v65) {
              atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v66)
            {
              char v67 = SipMessage::header<SipRSeqHeader>((uint64_t)a2);
              if (v67) {
                unsigned int v68 = v67[15];
              }
              else {
                unsigned int v68 = 0;
              }
              uint64_t v73 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v66 + 672), v37 + 41);
              if (v66 + 680 != (char *)v73)
              {
                unsigned int v74 = *((_DWORD *)v73 + 14);
                if (v74)
                {
                  if (v68 <= v74)
                  {
                    uint64_t v76 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
                    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v76);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v76 + 8), (uint64_t)"ignoring duplicate response rseq=", 33);
                    *(unsigned char *)(v76 + 17) = 0;
                    std::ostream::operator<<();
                    *(unsigned char *)(v76 + 17) = 0;
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v76 + 8), (uint64_t)", cseq=", 7);
                    *(unsigned char *)(v76 + 17) = 0;
                    SipMessage::header<SipCSeqHeader>((uint64_t)a2);
                    std::ostream::operator<<();
                    *(unsigned char *)(v76 + 17) = 0;
                    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v76 + 64))(v76, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(unsigned char *)(v76 + 17) = 0;
LABEL_145:
                    if (v65) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v65);
                    }
LABEL_147:
                    if (!v38)
                    {
LABEL_150:
                      if (v19) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
                      }
                      SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)__p);
                      return 1;
                    }
                    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
                    uint64_t v72 = v38;
LABEL_149:
                    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
                    goto LABEL_150;
                  }
                  if (v68 > v74 + 1)
                  {
                    uint64_t v75 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
                    (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v75);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v75 + 8), (uint64_t)"received out-of-order response (rseq=", 37);
                    *(unsigned char *)(v75 + 17) = 0;
                    std::ostream::operator<<();
                    *(unsigned char *)(v75 + 17) = 0;
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v75 + 8), (uint64_t)", expecting ", 12);
                    *(unsigned char *)(v75 + 17) = 0;
                    std::ostream::operator<<();
                    *(unsigned char *)(v75 + 17) = 0;
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v75 + 8), (uint64_t)")", 1);
                    *(unsigned char *)(v75 + 17) = 0;
                    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v75 + 64))(v75, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(unsigned char *)(v75 + 17) = 0;
                    goto LABEL_145;
                  }
                }
              }
              SipDialog::createRequestInDialog(a1[31]);
            }
          }
          uint64_t v69 = (*(uint64_t (**)(void *))(*a1 + 56))(a1);
          (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v69);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v69 + 8), (uint64_t)"sendPrack: no fork with remote tag ", 35);
          *(unsigned char *)(v69 + 17) = 0;
          uint64_t v70 = (SipUriHeader *)SipMessage::header<SipToHeader>((uint64_t)a2);
          if (v70) {
            char v71 = SipUriHeader::tag(v70);
          }
          else {
            char v71 = &ims::kEmptyString;
          }
          ObfuscatedString::ObfuscatedString((uint64_t)&v89, (const std::string *)v71);
          (*(void (**)(uint64_t, std::string *))(*(void *)v69 + 56))(v69, &v89);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v69 + 64))(v69, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v69 + 17) = 0;
          if (v91 < 0) {
            operator delete(v90);
          }
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v89.__r_.__value_.__l.__data_);
          }
          goto LABEL_145;
        }
      }
      else
      {
        if (!v25) {
          goto LABEL_66;
        }
        uint64_t v27 = 0;
      }
      char v28 = 1;
      goto LABEL_60;
    }
LABEL_44:
    if ((*((_DWORD *)a2 + 22) - 200) <= 0x63)
    {
      if (v20)
      {
        uint64_t v29 = SipMessage::body<SipSdpBody>((uint64_t)a2);
        if (v29)
        {
          uint64_t v31 = *((void *)v29 + 1);
          uint64_t v30 = (std::__shared_weak_count *)*((void *)v29 + 2);
          if (v30)
          {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          if (v31)
          {
            long long v32 = (SipOfferAnswer *)*((void *)v20 + 82);
            long long v33 = (std::__shared_weak_count *)*((void *)v20 + 83);
            if (v33) {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipOfferAnswer::updateWithIncomingResponse(v32, a2, (unsigned __int8 *)(*a3 + 328), (uint64_t)&v89);
            int v34 = (*(uint64_t (**)(std::string::size_type, void))(*(void *)v89.__r_.__value_.__l.__size_
                                                                            + 24))(v89.__r_.__value_.__l.__size_, LODWORD(v89.__r_.__value_.__r.__words[2]));
            ImsResult::~ImsResult((ImsResult *)&v89);
            if (v33) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v33);
            }
            if (v34)
            {
              std::string::basic_string[abi:ne180100]<0>(&v89, "InvalidSdp");
              SipSession::hangUp((std::__shared_weak_count *)a1, (uint64_t)&v89, (uint64_t)v82);
              ImsResult::~ImsResult((ImsResult *)v82);
              if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v89.__r_.__value_.__l.__data_);
              }
            }
            else if (!SipSession::confirmed((SipSession *)a1) || *((unsigned char *)a1 + 865))
            {
              SipSession::confirmed((SipSession *)a1);
              SipPreconditions::updateFromIncomingMessage((uint64_t)(a1 + 179), (std::string *)(v20 + 152), (uint64_t)a2);
            }
          }
        }
      }
      goto LABEL_150;
    }
    uint64_t v42 = (std::__shared_weak_count *)a1[98];
    if (v42)
    {
      int v43 = std::__shared_weak_count::lock(v42);
      if (v43)
      {
        uint64_t v44 = a1[97];
        if (v44)
        {
          uint64_t v45 = *(void *)(v44 + 416);
          if (v45)
          {
            uint64_t v80 = a1[97];
            int v81 = v43;
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
            (*(void (**)(uint64_t, SipResponse *, uint64_t *))(*(void *)v45 + 24))(v45, a2, &v80);
            if (v81) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v81);
            }
          }
        }
      }
    }
    else
    {
      int v43 = 0;
    }
    uint64_t v47 = a1[23];
    uint64_t v46 = (std::__shared_weak_count *)a1[24];
    if (v46)
    {
      atomic_fetch_add_explicit(&v46->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v46->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    std::string v48 = SipMessage::body<SipSdpBody>(*(void *)(*a3 + 296));
    if (v48)
    {
      uint64_t v49 = *((void *)v48 + 1);
      uint64_t v50 = (std::__shared_weak_count *)*((void *)v48 + 2);
      if (v50)
      {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v49)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v50);
          goto LABEL_101;
        }
        goto LABEL_89;
      }
      if (v49) {
        goto LABEL_101;
      }
    }
    uint64_t v50 = 0;
LABEL_89:
    uint64_t v51 = a1[31];
    if (v51 && (uint64_t v52 = *(void *)(v51 + 216)) != 0) {
      uint64_t v53 = *(SipUserAgent **)(v52 + 136);
    }
    else {
      uint64_t v53 = 0;
    }
    int v54 = *(_DWORD *)(SipUserAgent::config(v53) + 860);
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    if (v54)
    {
      *((_DWORD *)a1 + 438) = *((_DWORD *)a2 + 22);
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      int8x8_t v95 = 0;
      uint64_t v55 = operator new(0x20uLL);
      *uint64_t v55 = &unk_1F20C5480;
      v55[1] = a1;
      void v55[2] = v47;
      v55[3] = v46;
      int8x8_t v95 = v55;
      uint64_t v56 = a1[31];
      if (v56 && (uint64_t v57 = *(void *)(v56 + 216)) != 0) {
        int v58 = *(SipUserAgent **)(v57 + 136);
      }
      else {
        int v58 = 0;
      }
      SipUserAgent::config(v58);
      SipTimerContainer::startTimer((int8x8_t *)a1 + 34, (uint64_t)"PrackErrorDelayTimer");
      std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v94);
      goto LABEL_125;
    }
LABEL_101:
    unsigned int v59 = *((_DWORD *)a2 + 22);
    if (v59 == 481)
    {
      SipSessionInterface::stack((std::__shared_weak_count *)a1, &v89);
      uint64_t v60 = (ImsPrefs *)SipStack::prefs((SipStack *)v89.__r_.__value_.__l.__data_);
      uint64_t v61 = (void **)ImsPrefs::getRemoveForkOnTransactionDoesNotExistKey(v60);
      char v62 = ImsPrefs::BOOLValue(v60, v61);
      if (v89.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v89.__r_.__value_.__l.__size_);
      }
      if (v62)
      {
        uint64_t v63 = a1[31];
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v20) {
          SipDialog::removeForkWithRemoteTag(v63, (std::string *)(v20 + 152));
        }
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        goto LABEL_125;
      }
      unsigned int v59 = *((_DWORD *)a2 + 22);
    }
    SipSession::handlePrackErrorResponse((SipSession *)a1, v59);
LABEL_125:
    if (v46)
    {
      std::__shared_weak_count::__release_weak(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
    if (!v43) {
      goto LABEL_150;
    }
    uint64_t v72 = v43;
    goto LABEL_149;
  }
  return 1;
}

void sub_1C5365A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (v46)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t SipSession::handleTransactionError(std::__shared_weak_count *a1, uint64_t a2, void *a3)
{
  memset(v47, 0, sizeof(v47));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v40, &a1[7].__shared_weak_owners_);
  if (v40) {
    uint64_t v6 = (std::__shared_weak_count *)((char *)v40 + 104);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v45 = v6;
  uint64_t v46 = v41;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "handleTransactionError");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v47, &v45, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  uint64_t v7 = ((uint64_t (*)(std::__shared_weak_count *))a1->__vftable[1].__get_deleter)(a1);
  ((void (*)(std::__shared_weak_count *, uint64_t))a1->__on_zero_shared)(a1, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"SipSession::handleTransactionError", 34);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  memset(&__p, 0, sizeof(__p));
  uint64_t v8 = *a3;
  char v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(*a3 + 384, (void **)"UpdateType");
  if ((void **)(v8 + 392) == v9) {
    uint64_t v10 = &ims::kEmptyString;
  }
  else {
    uint64_t v10 = (long long *)(v9 + 7);
  }
  if (*((char *)v10 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else {
    std::string __p = *(std::string *)v10;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (byte_1EBBDB027 >= 0) {
    uint64_t v12 = (const char *)&SipSession::kUpdateTypeEmergencyLocationUpdate;
  }
  else {
    uint64_t v12 = (const char *)SipSession::kUpdateTypeEmergencyLocationUpdate;
  }
  if (!strcasecmp((const char *)p_p, v12))
  {
    uint64_t v17 = ((uint64_t (*)(std::__shared_weak_count *))a1->__vftable[1].__get_deleter)(a1);
    ((void (*)(std::__shared_weak_count *, uint64_t))a1->__on_zero_shared)(a1, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"ignoring emergency location update transaction error", 52);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_31:
    *(unsigned char *)(v17 + 17) = 0;
    goto LABEL_32;
  }
  uint64_t v13 = *a3;
  if ((void **)(v13 + 392) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(*a3 + 384, (void **)"SessionRefresh"))
  {
    uint64_t shared_owners = a1[10].__shared_owners_;
    if (shared_owners && (uint64_t v15 = *(void *)(shared_owners + 216)) != 0) {
      int v16 = *(SipUserAgent **)(v15 + 136);
    }
    else {
      int v16 = 0;
    }
    if (*(unsigned char *)(SipUserAgent::config(v16) + 1152))
    {
      uint64_t v17 = ((uint64_t (*)(std::__shared_weak_count *))a1->__vftable[1].__get_deleter)(a1);
      ((void (*)(std::__shared_weak_count *, uint64_t))a1->__on_zero_shared)(a1, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"ignoring session refresh transaction error", 42);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_31;
    }
    if (*(uint64_t **)(a2 + 8) == &SipResultDomain::_domain && *(_DWORD *)(a2 + 16) == 408)
    {
      uint64_t v19 = ((uint64_t (*)(std::__shared_weak_count *))a1->__vftable[1].__on_zero_shared)(a1);
      ((void (*)(std::__shared_weak_count *, uint64_t))a1->__on_zero_shared)(a1, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"timed out sending session refresh.  Terminating session.", 56);
      *(unsigned char *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v19 + 17) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v40, "SessionExpired");
      SipSession::bye(a1, (uint64_t)&v40, 0);
      ImsResult::~ImsResult((ImsResult *)v43);
      if (v42 < 0) {
        operator delete(v40);
      }
      goto LABEL_32;
    }
  }
  uint64_t v20 = a1[10].__shared_owners_;
  if (v20 && (uint64_t v21 = *(void *)(v20 + 216)) != 0) {
    uint64_t v22 = *(SipUserAgent **)(v21 + 136);
  }
  else {
    uint64_t v22 = 0;
  }
  if (*(unsigned char *)(SipUserAgent::config(v22) + 952) && *(unsigned char *)(a1[10].__shared_owners_ + 1928))
  {
    uint64_t v23 = (SipUriHeader *)SipMessage::header<SipToHeader>(*(void *)(*a3 + 296));
    if (v23) {
      char v24 = SipUriHeader::tag(v23);
    }
    else {
      char v24 = &ims::kEmptyString;
    }
    uint64_t v25 = *((unsigned __int8 *)v24 + 23);
    if ((v25 & 0x80u) != 0) {
      uint64_t v25 = *((void *)v24 + 1);
    }
    if (v25)
    {
      uint64_t v26 = a1[10].__shared_owners_;
      uint64_t v27 = (SipUriHeader *)SipMessage::header<SipToHeader>(*(void *)(*a3 + 296));
      char v28 = (void **)(v27 ? SipUriHeader::tag(v27) : &ims::kEmptyString);
      uint64_t v29 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v26 + 2048, v28);
      if ((void **)(v26 + 2056) == v29) {
        goto LABEL_71;
      }
      uint64_t v31 = v29[7];
      uint64_t v30 = (std::__shared_weak_count *)v29[8];
      if (v30)
      {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (!v31)
      {
LABEL_71:
        uint64_t v37 = ((uint64_t (*)(std::__shared_weak_count *))a1->__vftable[1].__get_deleter)(a1);
        ((void (*)(std::__shared_weak_count *, uint64_t))a1->__on_zero_shared)(a1, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"ignoring ", 9);
        *(unsigned char *)(v37 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 16))(a2, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)" in terminated fork", 19);
        *(unsigned char *)(v37 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v37 + 17) = 0;
        goto LABEL_32;
      }
    }
  }
  long long v32 = a1[30].__vftable;
  long long v33 = (std::__shared_weak_count *)a1[30].__shared_owners_;
  if (!v33)
  {
    if (!v32) {
      goto LABEL_32;
    }
    int v34 = 0;
    goto LABEL_64;
  }
  atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  if (!v32) {
    goto LABEL_32;
  }
  int v34 = (std::__shared_weak_count *)a1[30].__shared_owners_;
  long long v32 = a1[30].__vftable;
  if (!v34)
  {
LABEL_64:
    char v35 = 1;
    goto LABEL_65;
  }
  char v35 = 0;
  atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_65:
  long long v36 = (std::__shared_weak_count *)a3[1];
  uint64_t v38 = *a3;
  uint64_t v39 = v36;
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*((void (**)(std::__shared_weak_count_vtbl *, uint64_t, uint64_t *))v32->~__shared_weak_count + 16))(v32, a2, &v38);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  if ((v35 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
LABEL_32:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v47);
}

void sub_1C53663D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v31 - 112);
  _Unwind_Resume(a1);
}

uint64_t SipSession::handleOutgoingResponse(void *a1, uint64_t a2, void *a3)
{
  memset(v31, 0, sizeof(v31));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v25, a1 + 23);
  if (v25.__r_.__value_.__r.__words[0]) {
    uint64_t v6 = (std::__shared_weak_count *)(v25.__r_.__value_.__r.__words[0] + 104);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v29 = v6;
  std::string::size_type size = (std::__shared_weak_count *)v25.__r_.__value_.__l.__size_;
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = 0uLL;
  LoggableString::LoggableString((LoggableString *)&__p, "handleOutgoingResponse");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v31, &v29, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
  if (v25.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v25.__r_.__value_.__l.__size_);
  }
  uint64_t v7 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"SipSession::handleOutgoingResponse", 34);
  *(unsigned char *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v7 + 17) = 0;
  uint64_t v8 = a1[90];
  char v9 = (std::__shared_weak_count *)a1[91];
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    if (!v8) {
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v31);
    }
    uint64_t v10 = (std::__shared_weak_count *)a1[91];
    uint64_t v8 = a1[90];
    if (v10)
    {
      char v11 = 0;
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      goto LABEL_17;
    }
  }
  else
  {
    if (!v8) {
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v31);
    }
    uint64_t v10 = 0;
  }
  char v11 = 1;
LABEL_17:
  uint64_t v12 = (std::__shared_weak_count *)a3[1];
  uint64_t v26 = *a3;
  uint64_t v27 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v8 + 112))(v8, a2, &v26);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if ((v11 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v13 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"sending ", 8);
  *(unsigned char *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" response to ", 13);
  *(unsigned char *)(v13 + 17) = 0;
  uint64_t v14 = (const std::string *)(*(uint64_t (**)(void))(**(void **)(*a3 + 296) + 112))(*(void *)(*a3 + 296));
  LoggableString::LoggableString(&__p, v14);
  (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 40))(v13, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" request in state ", 18);
  *(unsigned char *)(v13 + 17) = 0;
  uint64_t v15 = (*(uint64_t (**)(void *))(a1[83] + 24))(a1 + 83);
  int v16 = (const std::string *)(*(uint64_t (**)(void *, uint64_t))(a1[83] + 16))(a1 + 83, v15);
  LoggableString::LoggableString(&v25, v16);
  (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 40))(v13, &v25);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v17 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*a3 + 296) + 112))(*(void *)(*a3 + 296));
  uint64_t v18 = v17[23];
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = v17[23];
  }
  else {
    uint64_t v19 = *((void *)v17 + 1);
  }
  if (v19 != 6) {
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v31);
  }
  if ((v18 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v17, "INVITE", *((void *)v17 + 1))) {
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v31);
    }
    goto LABEL_38;
  }
  if (!v17[23])
  {
LABEL_38:
    if ((*(_DWORD *)(a2 + 88) - 200) <= 0x63)
    {
      uint64_t v21 = (std::__shared_weak_count *)a3[1];
      uint64_t v23 = *a3;
      char v24 = v21;
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SipSessionInterface::addAckReceiveHandlerForServerTransaction((uint64_t)a1, &v23, a2);
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
    }
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v31);
  }
  uint64_t v20 = "INVITE";
  while (*v17 == *(unsigned __int8 *)v20)
  {
    ++v17;
    ++v20;
    if (!--v18) {
      goto LABEL_38;
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v31);
}

void sub_1C5366964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a27);
  _Unwind_Resume(a1);
}

_DWORD *SipSession::prackHandlerForTransaction@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!*(void *)a2) {
    goto LABEL_16;
  }
  uint64_t v4 = result;
  uint64_t result = SipMessage::header<SipCSeqHeader>(*(void *)(*(void *)a2 + 296));
  unsigned int v5 = result ? result[15] : 0;
  uint64_t v6 = *((void *)v4 + 81);
  if (!v6) {
    goto LABEL_16;
  }
  uint64_t v7 = v4 + 162;
  do
  {
    unsigned int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 >= v5;
    if (v8 >= v5) {
      uint64_t v10 = (uint64_t *)v6;
    }
    else {
      uint64_t v10 = (uint64_t *)(v6 + 8);
    }
    if (v9) {
      uint64_t v7 = (_DWORD *)v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 != v4 + 162 && v5 >= v7[8])
  {
    uint64_t v11 = *((void *)v7 + 6);
    *a3 = *((void *)v7 + 5);
    a3[1] = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_16:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void SipSession::currentPrackHandler(SipSession *this@<X0>, void *a2@<X8>)
{
  SipSession::serverInviteTransaction(this, (uint64_t *)&lpsrc);
  if (!lpsrc)
  {
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  if (!v4)
  {
LABEL_6:
    unsigned int v5 = 0;
    goto LABEL_7;
  }
  unsigned int v5 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (!v4)
  {
    *a2 = 0;
    a2[1] = 0;
    if (!v5) {
      return;
    }
    goto LABEL_15;
  }
  v6[0] = v4;
  v6[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSession::prackHandlerForTransaction(this, (uint64_t)v6, a2);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
LABEL_15:
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5366BDC(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1C5366CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  a14 = (void **)&a11;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

BOOL SipSession::hasOutstandingResponseSdp(SipSession *this)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  SipSession::currentPrackHandler(this, &v3);
  BOOL v1 = v3 && (SipPrackHandler::hasOutstandingSdp(v3) & 1) != 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v1;
}

void sub_1C5366D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::removeClientTransaction(uint64_t **a1, void *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSessionInterface::removeClientTransaction(a1, v9);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unsigned int v5 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*a2 + 296) + 112))(*(void *)(*a2 + 296));
  uint64_t v6 = v5[23];
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = v5[23];
  }
  else {
    uint64_t v7 = *((void *)v5 + 1);
  }
  if (v7 != 6) {
    return;
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v5, "INVITE", *((void *)v5 + 1))) {
      return;
    }
    goto LABEL_17;
  }
  if (!v5[23])
  {
LABEL_17:
    SipSession::sendPendingInvite((std::string *)a1);
    return;
  }
  unsigned int v8 = "INVITE";
  while (*v5 == *(unsigned __int8 *)v8)
  {
    ++v5;
    ++v8;
    if (!--v6) {
      goto LABEL_17;
    }
  }
}

void sub_1C5366EA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSession::removeServerTransaction(SipSessionInterface *a1, void *a2)
{
  memset(v20, 0, sizeof(v20));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v16, (void *)a1 + 23);
  if (v16) {
    uint64_t v4 = (std::__shared_weak_count *)(v16 + 104);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v18 = v4;
  uint64_t v19 = v17;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "removeServerTransaction");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v20, &v18, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v5 = (*(uint64_t (**)(SipSessionInterface *))(*(void *)a1 + 64))(a1);
  (*(void (**)(SipSessionInterface *, uint64_t))(*(void *)a1 + 16))(a1, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"SipSession::removeServerTransaction", 35);
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  v14[0] = *a2;
  v14[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSessionInterface::removeServerTransaction(a1, (uint64_t)v14);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*a2 + 296) + 112))(*(void *)(*a2 + 296));
  uint64_t v8 = v7[23];
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = v7[23];
  }
  else {
    uint64_t v9 = *((void *)v7 + 1);
  }
  if (v9 != 6) {
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v20);
  }
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v7, "INVITE", *((void *)v7 + 1))) {
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v20);
    }
    goto LABEL_25;
  }
  if (!v7[23])
  {
LABEL_25:
    uint64_t v11 = SipMessage::header<SipCSeqHeader>(*(void *)(*a2 + 296));
    if (v11) {
      unsigned int v12 = v11[15];
    }
    else {
      unsigned int v12 = 0;
    }
    SipSession::removePrackHandler(a1, v12);
    SipSession::sendPendingInvite((std::string *)a1);
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v20);
  }
  uint64_t v10 = "INVITE";
  while (*v7 == *(unsigned __int8 *)v10)
  {
    ++v7;
    ++v10;
    if (!--v8) {
      goto LABEL_25;
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v20);
}

void sub_1C5367108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void SipSession::addServerTransaction(uint64_t **a1, void *a2)
{
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(void))(**(void **)(*a2 + 296) + 112))(*(void *)(*a2 + 296));
  uint64_t v6 = v5[23];
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = v5[23];
  }
  else {
    uint64_t v7 = *((void *)v5 + 1);
  }
  if (v7 != 6) {
    return;
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v5, "INVITE", *((void *)v5 + 1))) {
      return;
    }
LABEL_14:
    if (!*a2) {
      return;
    }
    if (!v9) {
      return;
    }
    std::string::size_type v10 = (std::string::size_type)v9;
    uint64_t v11 = (std::__shared_weak_count *)a2[1];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v12 = a1[31];
    if (v12 && (uint64_t v13 = v12[27]) != 0) {
      uint64_t v14 = *(void *)(v13 + 136);
    }
    else {
      uint64_t v14 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "100rel");
    if ((void **)(v14 + 160) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v14 + 152, __p))
    {
      BOOL v16 = 1;
    }
    else
    {
      uint64_t v15 = *(void *)(v10 + 296);
      std::string::basic_string[abi:ne180100]<0>(&v54, "100rel");
      BOOL v16 = !SipMessage::supportsOption(v15, (void **)&v54.__r_.__value_.__l.__data_);
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
    }
    if (SBYTE7(v44) < 0)
    {
      operator delete(__p[0]);
      if (v16) {
        goto LABEL_86;
      }
    }
    else if (v16)
    {
LABEL_86:
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      return;
    }
    uint64_t v17 = SipMessage::header<SipCSeqHeader>(*(void *)(v10 + 296));
    if (v17) {
      unsigned int v18 = v17[15];
    }
    else {
      unsigned int v18 = 0;
    }
    uint64_t v19 = a1 + 81;
    uint64_t v20 = a1[81];
    if (v20)
    {
      uint64_t v21 = a1 + 81;
      do
      {
        unsigned int v22 = *((_DWORD *)v20 + 8);
        BOOL v23 = v22 >= v18;
        if (v22 >= v18) {
          char v24 = v20;
        }
        else {
          char v24 = v20 + 1;
        }
        if (v23) {
          uint64_t v21 = (uint64_t **)v20;
        }
        uint64_t v20 = (uint64_t *)*v24;
      }
      while (*v24);
      if (v21 != v19 && v18 >= *((_DWORD *)v21 + 8))
      {
        uint64_t v31 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
        ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"we already have a prack handler for CSeq ", 41);
        *(unsigned char *)(v31 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v31 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v31 + 17) = 0;
        goto LABEL_86;
      }
    }
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(__p, a1 + 23);
    std::dynamic_pointer_cast[abi:ne180100]<SipSession,SipSessionInterface>(&v52, __p);
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    std::string v25 = v52;
    if (!v52)
    {
LABEL_84:
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      goto LABEL_86;
    }
    uint64_t v26 = v53;
    uint64_t v27 = (std::__shared_weak_count *)operator new(0x190uLL);
    char v28 = v27;
    v27->__shared_owners_ = 0;
    v27->__shared_weak_owners_ = 0;
    v27->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C5500;
    uint64_t v29 = &v27[1].__vftable;
    __p[0] = v25;
    __p[1] = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v54.__r_.__value_.__r.__words[0] = v10;
    v54.__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipPrackHandler::SipPrackHandler((uint64_t)&v27[1], __p, (uint64_t *)&v54);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    uint64_t v30 = (std::__shared_weak_count *)v28[6].__vftable;
    if (v30)
    {
      if (v30->__shared_owners_ != -1)
      {
LABEL_61:
        long long v32 = SipMessage::header<SipCSeqHeader>(*(void *)(v10 + 296));
        if (v32) {
          unsigned int v33 = v32[15];
        }
        else {
          unsigned int v33 = 0;
        }
        int v34 = *v19;
        char v35 = a1 + 81;
        if (*v19)
        {
          while (1)
          {
            while (1)
            {
              char v35 = (uint64_t **)v34;
              unsigned int v36 = *((_DWORD *)v34 + 8);
              if (v36 <= v33) {
                break;
              }
              int v34 = *v35;
              uint64_t v19 = v35;
              if (!*v35) {
                goto LABEL_71;
              }
            }
            if (v36 >= v33) {
              break;
            }
            int v34 = v35[1];
            if (!v34)
            {
              uint64_t v19 = v35 + 1;
              goto LABEL_71;
            }
          }
          uint64_t v37 = v35;
        }
        else
        {
LABEL_71:
          uint64_t v37 = operator new(0x38uLL);
          *((_DWORD *)v37 + 8) = v33;
          *((void *)v37 + 5) = 0;
          *((void *)v37 + 6) = 0;
          *(void *)uint64_t v37 = 0;
          *((void *)v37 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
          *((void *)v37 + 2) = v35;
          std::__shared_weak_count *v19 = (uint64_t *)v37;
          uint64_t v38 = (uint64_t *)*a1[80];
          uint64_t v39 = (uint64_t *)v37;
          if (v38)
          {
            a1[80] = v38;
            uint64_t v39 = *v19;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[81], v39);
          a1[82] = (uint64_t *)((char *)a1[82] + 1);
        }
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v40 = (std::__shared_weak_count *)*((void *)v37 + 6);
        *((void *)v37 + 5) = v29;
        *((void *)v37 + 6) = v28;
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        uint64_t v51 = 0;
        memset(v50, 0, sizeof(v50));
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        *(_OWORD *)uint64_t v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        *(_OWORD *)std::string __p = 0u;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"PrackHandler ", 13);
        std::ostream::operator<<();
        std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], &v42);
        LoggableString::LoggableString(&v54, &v42);
        ((void (*)(uint64_t **, std::string *))a1[13][4])(a1 + 13, &v54);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42.__r_.__value_.__l.__data_);
        }
        uint64_t v41 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
        ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v41 + 8), (uint64_t)"added PRACK handler for cseq ", 29);
        *(unsigned char *)(v41 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v41 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v41 + 17) = 0;
        __p[0] = *(void **)MEMORY[0x1E4FBA418];
        *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x1E4FBA418] + 24);
        __p[1] = (void *)(MEMORY[0x1E4FBA470] + 16);
        if (SHIBYTE(v48) < 0) {
          operator delete(v47[1]);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1C878E270](v50);
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        goto LABEL_84;
      }
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v28[5].__shared_weak_owners_ = (uint64_t)v29;
      v28[6].__vftable = (std::__shared_weak_count_vtbl *)v28;
      std::__shared_weak_count::__release_weak(v30);
    }
    else
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v28[5].__shared_weak_owners_ = (uint64_t)v29;
      v28[6].__vftable = (std::__shared_weak_count_vtbl *)v28;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    goto LABEL_61;
  }
  if (!v5[23]) {
    goto LABEL_14;
  }
  uint64_t v8 = "INVITE";
  while (*v5 == *(unsigned __int8 *)v8)
  {
    ++v5;
    ++v8;
    if (!--v6) {
      goto LABEL_14;
    }
  }
}

void sub_1C53678B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v23 - 105) < 0) {
    operator delete(*(void **)(v23 - 128));
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a16);
  std::string v25 = *(std::__shared_weak_count **)(v23 - 136);
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

void SipSession::sendQueuedResponseInTransaction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  v5[0] = *a3;
  v5[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSessionInterface::sendResponseInTransaction(a1, a2, v5, a4);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1C5367A10(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSession::sendResponseInTransaction@<X0>(void *a1@<X0>, const SipResponse *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  memset(v30, 0, sizeof(v30));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v26, a1 + 23);
  if (v26) {
    uint64_t v8 = (std::__shared_weak_count *)(v26 + 104);
  }
  else {
    uint64_t v8 = 0;
  }
  char v28 = v8;
  uint64_t v29 = v27;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "sendResponseInTransaction");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v30, &v28, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  uint64_t v9 = (*(uint64_t (**)(void *))(*a1 + 64))(a1);
  (*(void (**)(void *, uint64_t))(*a1 + 16))(a1, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"SipSession::sendResponseInTransaction", 37);
  *(unsigned char *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v9 + 17) = 0;
  std::string::size_type v10 = *(const void **)a3;
  if (*(void *)a3
  {
    unsigned int v12 = *(std::__shared_weak_count **)(a3 + 8);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = SipMessage::header<SipCSeqHeader>(v11[37]);
    if (v13) {
      unsigned int v14 = v13[15];
    }
    else {
      unsigned int v14 = 0;
    }
    uint64_t v18 = a1[81];
    if (!v18) {
      goto LABEL_36;
    }
    uint64_t v19 = a1 + 81;
    do
    {
      unsigned int v20 = *(_DWORD *)(v18 + 32);
      BOOL v21 = v20 >= v14;
      if (v20 >= v14) {
        unsigned int v22 = (uint64_t *)v18;
      }
      else {
        unsigned int v22 = (uint64_t *)(v18 + 8);
      }
      if (v21) {
        uint64_t v19 = (void *)v18;
      }
      uint64_t v18 = *v22;
    }
    while (*v22);
    if (v19 != a1 + 81 && v14 >= *((_DWORD *)v19 + 8))
    {
      uint64_t v23 = (SipPrackHandler *)v19[5];
      uint64_t v15 = (std::__shared_weak_count *)v19[6];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
LABEL_36:
      uint64_t v23 = 0;
      uint64_t v15 = 0;
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v23)
    {
      SipPrackHandler::queueResponse(v23, a2);
      *(_OWORD *)(a4 + 24) = 0u;
      *(_OWORD *)(a4 + 40) = 0u;
      *(_OWORD *)(a4 + 56) = 0u;
      *(void *)a4 = &unk_1F20B2680;
      *(void *)(a4 + 8) = &_bambiDomain;
      *(_DWORD *)(a4 + 16) = 0;
      if (!v15) {
        return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v30);
      }
      goto LABEL_22;
    }
    std::string::size_type v10 = *(const void **)a3;
  }
  else
  {
    uint64_t v15 = 0;
  }
  BOOL v16 = *(std::__shared_weak_count **)(a3 + 8);
  v24[0] = (uint64_t)v10;
  v24[1] = (uint64_t)v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSessionInterface::sendResponseInTransaction((uint64_t)a1, (uint64_t)a2, v24, a4);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v15) {
LABEL_22:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v30);
}

void sub_1C5367D28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [34]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C5367E30(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipSession::cancel(SipSession *this, const BambiCallTerminationReason *a2, const BambiCallTerminationReason *a3)
{
  if (*(unsigned char *)(*((void *)a2 + 31) + 1928))
  {
    if (!(*(unsigned int (**)(const BambiCallTerminationReason *))(*(void *)a2 + 264))(a2))
    {
      if (SipSession::confirmed(a2))
      {
        memset((char *)&v27[1] + 8, 0, 48);
        *(void *)&v27[0] = &unk_1F20B2680;
        *((void *)&v27[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
        LODWORD(v27[1]) = 1073741826;
        ImsLogContainer::logResult((uint64_t)a2, (uint64_t)v27, (uint64_t)&v21);
        uint64_t v11 = (const std::string *)ImsResult::operator<<<char [37]>((uint64_t)&v21, "cancel called on a confirmed session");
        ImsResult::ImsResult(this, v11);
      }
      else
      {
        uint64_t v12 = *((void *)a2 + 90);
        uint64_t v13 = (std::__shared_weak_count *)*((void *)a2 + 91);
        if (v13)
        {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        if (!v12)
        {
          long long v24 = 0u;
          long long v25 = 0u;
          long long v26 = 0u;
          BOOL v21 = &unk_1F20B2680;
          unsigned int v22 = (std::__shared_weak_count *)&_bambiDomain;
          int v23 = 1073741826;
          uint64_t v18 = (ImsResult *)ImsResult::operator<<<char [30]>((uint64_t)&v21, "cannot cancel from NULL state");
          uint64_t v19 = ImsLogContainer::logResult(a2, v18);
          ImsResult::ImsResult(this, (const std::string *)v19);
          goto LABEL_5;
        }
        SipSession::clientInviteTransaction(a2, (uint64_t *)&v21);
        unsigned int v14 = v21;
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        if (v14)
        {
          uint64_t v28 = 0;
          memset(v27, 0, sizeof(v27));
          BambiCallTerminationReason::BambiCallTerminationReason((BambiCallTerminationReason *)v27, a3);
          if (!LODWORD(v27[4])) {
            LODWORD(v27[4]) = 4;
          }
          uint64_t v15 = *((void *)a2 + 198);
          if (v15)
          {
            BOOL v16 = *(std::__shared_weak_count **)(v15 + 120);
            if (v16) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
            uint64_t v17 = *(std::__shared_weak_count **)(v15 + 104);
            if (v17) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v17);
            }
            if (*(char *)(v15 + 95) < 0) {
              operator delete(*(void **)(v15 + 72));
            }
            if (*(char *)(v15 + 55) < 0) {
              operator delete(*(void **)(v15 + 32));
            }
            if (*(char *)(v15 + 31) < 0) {
              operator delete(*(void **)(v15 + 8));
            }
            MEMORY[0x1C878E320](v15, 0x1032C40D4AF1F8FLL);
          }
          operator new();
        }
        memset((char *)&v27[1] + 8, 0, 48);
        *(void *)&v27[0] = &unk_1F20B2680;
        *((void *)&v27[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
        LODWORD(v27[1]) = 1073741826;
        ImsLogContainer::logResult((uint64_t)a2, (uint64_t)v27, (uint64_t)&v21);
        unsigned int v20 = (const std::string *)ImsResult::operator<<<char [39]>((uint64_t)&v21, "no client INVITE transaction to cancel");
        ImsResult::ImsResult(this, v20);
      }
      ImsResult::~ImsResult((ImsResult *)&v21);
      std::string::size_type v10 = (ImsResult *)v27;
      goto LABEL_9;
    }
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    BOOL v21 = &unk_1F20B2680;
    unsigned int v22 = (std::__shared_weak_count *)&_bambiDomain;
    int v23 = 1073741826;
    uint64_t v6 = (ImsResult *)ImsResult::operator<<<char [38]>((uint64_t)&v21, "cancel called on a terminated session");
    uint64_t v7 = ImsLogContainer::logResult(a2, v6);
    ImsResult::ImsResult(this, (const std::string *)v7);
  }
  else
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    BOOL v21 = &unk_1F20B2680;
    unsigned int v22 = (std::__shared_weak_count *)&_bambiDomain;
    int v23 = 1073741826;
    uint64_t v8 = (ImsResult *)ImsResult::operator<<<char [25]>((uint64_t)&v21, "cannot cancel an MT call");
    uint64_t v9 = ImsLogContainer::logResult(a2, v8);
    ImsResult::ImsResult(this, (const std::string *)v9);
  }
LABEL_5:
  std::string::size_type v10 = (ImsResult *)&v21;
LABEL_9:
  ImsResult::~ImsResult(v10);
}

void sub_1C536864C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&a9);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  BambiCallTerminationReason::~BambiCallTerminationReason((BambiCallTerminationReason *)(v10 - 192));
  _Unwind_Resume(a1);
}

void SipSession::rejectWithReason(SipSession *this, std::__shared_weak_count *a2, uint64_t a3)
{
  int v6 = *(_DWORD *)(a3 + 60);
  uint64_t v7 = (std::string *)(a3 + 32);
  uint64_t shared_owners = a2[10].__shared_owners_;
  if (shared_owners)
  {
    uint64_t shared_owners = *(void *)(shared_owners + 216);
    if (shared_owners) {
      uint64_t shared_owners = *(void *)(shared_owners + 136);
    }
  }
  uint64_t v18 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v16, 0, sizeof(v16));
  SipResponse::SipResponse((uint64_t)v16, v6, v7, shared_owners + 288);
  ((void (*)(uint64_t *__return_ptr, std::__shared_weak_count *))a2->__vftable[3].~__shared_weak_count_0)(&v14, a2);
  SipSession::addTerminationSdpToMessage(a2, a3, (uint64_t)v16, &v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if ((SipSession::confirmed((SipSession *)a2) & 1) != 0 || *(unsigned char *)(a2[10].__shared_owners_ + 1928))
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    BOOL v21 = &unk_1F20B2680;
    unsigned int v22 = (std::__shared_weak_count *)&_bambiDomain;
    int v23 = 1073741826;
    uint64_t v9 = (ImsResult *)ImsResult::operator<<<char [40]>((uint64_t)&v21, "reject called on confirmed or MT dialog");
    uint64_t v10 = ImsLogContainer::logResult((ImsLogContainer *)a2, v9);
    ImsResult::ImsResult(this, (const std::string *)v10);
    ImsResult::~ImsResult((ImsResult *)&v21);
    goto LABEL_9;
  }
  BOOL v21 = 0;
  unsigned int v22 = 0;
  SipSession::serverInviteTransaction((SipSession *)a2, (uint64_t *)&v21);
  if (v21)
  {
    uint64_t v11 = v22;
    uint64_t v19 = v21;
    unsigned int v20 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ((void (*)(std::__shared_weak_count *, _OWORD *, void **))a2->__vftable[6].~__shared_weak_count)(a2, v16, &v19);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (!v11) {
      goto LABEL_9;
    }
LABEL_22:
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    goto LABEL_9;
  }
  uint64_t v12 = ((uint64_t (*)(std::__shared_weak_count *))a2->__vftable[1].__get_deleter)(a2);
  ((void (*)(std::__shared_weak_count *, uint64_t))a2->__on_zero_shared)(a2, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"rejectWithResponse: no server INVITE transaction", 48);
  *(unsigned char *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v12 + 17) = 0;
  if (!a2[57].__vftable)
  {
    uint64_t v13 = ((uint64_t (*)(std::__shared_weak_count *))a2->__vftable[1].__get_deleter)(a2);
    ((void (*)(std::__shared_weak_count *, uint64_t))a2->__on_zero_shared)(a2, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"saving response for future use.", 31);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
    a2[57].__vftable = (std::__shared_weak_count_vtbl *)(*(uint64_t (**)(_OWORD *))(*(void *)&v16[0] + 32))(v16);
  }
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(void *)this = &unk_1F20B2680;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
  *((_DWORD *)this + 4) = 0;
  uint64_t v11 = v22;
  if (v22) {
    goto LABEL_22;
  }
LABEL_9:
  *(void *)&v16[0] = &unk_1F20DD488;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  SipMessage::~SipMessage((SipMessage *)v16);
}

void sub_1C5368AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  int v6 = *(std::__shared_weak_count **)(v4 - 112);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  SipResponse::~SipResponse((void **)va);
  _Unwind_Resume(a1);
}

void SipSession::silentHangUp(SipSession *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *((void *)this + 90);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v6)
  {
    if ((SipSession::confirmed(this) & 1) == 0)
    {
      uint64_t v8 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
      (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"silentHangUp called for an unconfirmed call in state: ", 54);
      *(unsigned char *)(v8 + 17) = 0;
      uint64_t v9 = (*(uint64_t (**)(char *))(*((void *)this + 83) + 24))((char *)this + 664);
      uint64_t v10 = (const std::string *)(*(uint64_t (**)(char *, uint64_t))(*((void *)this + 83) + 16))((char *)this + 664, v9);
      LoggableString::LoggableString(&__p, v10);
      (*(void (**)(uint64_t, std::string *))(*(void *)v8 + 40))(v8, &__p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    memset(v23, 0, sizeof(v23));
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v19, (void *)this + 23);
    if (v19) {
      uint64_t v11 = (std::__shared_weak_count *)(v19 + 104);
    }
    else {
      uint64_t v11 = 0;
    }
    BOOL v21 = v11;
    unsigned int v22 = v20;
    uint64_t v19 = 0;
    unsigned int v20 = 0;
    LoggableString::LoggableString((LoggableString *)&__p, "silentHangUp");
    SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v23, &v21, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    uint64_t v12 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"SipSession::silentHangUp", 24);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    bzero(&__p, 0x250uLL);
    BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)&__p, 15, a2);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B85E8;
    SipSession::terminateWithEvent((BambiCall **)this, (BambiCallEvent *)&__p, 12);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
    BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&__p);
    SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v23);
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741826;
    uint64_t v13 = (ImsResult *)ImsResult::operator<<<char [40]>((uint64_t)&__p, "silentHangUp called while in NULL state");
    uint64_t v14 = ImsLogContainer::logResult(this, v13);
    ImsResult::ImsResult((ImsResult *)a3, (const std::string *)v14);
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
}

void sub_1C5368F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v14 - 96);
  _Unwind_Resume(a1);
}

void SipSession::addTerminationSdpToMessage(std::__shared_weak_count *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  memset(&v20, 0, sizeof(v20));
  SipSessionInterface::stack(a1, &v13);
  if (v13)
  {
    SipSessionInterface::stack(a1, &__p);
    if (*((char *)__p + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v20, *((const std::string::value_type **)__p + 520), *((void *)__p + 521));
    }
    else {
      std::string v20 = *(std::string *)((char *)__p + 4160);
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, (char *)&str_23_0);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (*(_DWORD *)(a2 + 128))
  {
    if (a3 && *a4)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> const&,void>(a4, &v18);
      if (v18)
      {
        SDPModel::setDesiredPrecondition(v18, *(_DWORD *)(a2 + 128), 4, 3);
        uint64_t v16 = v18;
        long long v17 = v19;
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SipMessage::setSdp();
      }
      std::string::basic_string[abi:ne180100]<0>(&v13, "bambi.call");
      uint64_t v9 = ims::error((uint64_t)&v13, (uint64_t)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Unable to include precondition failure SDP in ", 46);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a3 + 48))(&__p, a3);
      (*(void (**)(uint64_t, void **))(*(void *)v9 + 32))(v9, &__p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
      if (v12 < 0) {
        operator delete(__p);
      }
      if (v15 < 0) {
        operator delete(v13);
      }
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v13, "bambi.call");
      uint64_t v8 = ims::error((uint64_t)&v13, (uint64_t)&v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Unable to include precondition failure SDP in ", 46);
      *(unsigned char *)(v8 + 17) = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a3 + 48))(&__p, a3);
      (*(void (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, &__p);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v8 + 17) = 0;
      if (v12 < 0) {
        operator delete(__p);
      }
      if (v15 < 0) {
        operator delete(v13);
      }
    }
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_1C53692E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (*(char *)(v24 - 41) < 0) {
    operator delete(*(void **)(v24 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSession::sendPendingBye(SipSession *this)
{
  if (*((void *)this + 197))
  {
    memset(v10, 0, sizeof(v10));
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v6, (void *)this + 23);
    if (v6) {
      uint64_t v2 = (std::__shared_weak_count *)(v6 + 104);
    }
    else {
      uint64_t v2 = 0;
    }
    uint64_t v8 = v2;
    uint64_t v9 = v7;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    LoggableString::LoggableString((LoggableString *)__p, "sendPendingBye");
    SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v10, &v8, __p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    SipDialog::createRequestInDialog(*((void *)this + 31));
  }
  uint64_t v3 = (*(uint64_t (**)(SipSession *))(*(void *)this + 56))(this);
  (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"sendPendingBye called, but we don't have a pending termination event", 68);
  *(unsigned char *)(v3 + 17) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  return result;
}

void sub_1C5369A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&__p);
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v15 - 80);
  _Unwind_Resume(a1);
}

void SipSession::bye(SipSession *this@<X0>, ImsResult *a2@<X8>)
{
  if (!(*(unsigned int (**)(SipSession *))(*(void *)this + 264))(this))
  {
    memset(v16, 0, 48);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v12, (void *)this + 23);
    if (v12) {
      uint64_t v7 = (std::__shared_weak_count *)(v12 + 104);
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v14 = v7;
    uint64_t v15 = v13;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    LoggableString::LoggableString((LoggableString *)&__p, "bye");
    SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v16, &v14, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    uint64_t v8 = *((void *)this + 197);
    if (v8)
    {
      uint64_t v9 = *(std::__shared_weak_count **)(v8 + 120);
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      uint64_t v10 = *(std::__shared_weak_count **)(v8 + 104);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      if (*(char *)(v8 + 95) < 0) {
        operator delete(*(void **)(v8 + 72));
      }
      if (*(char *)(v8 + 55) < 0) {
        operator delete(*(void **)(v8 + 32));
      }
      if (*(char *)(v8 + 31) < 0) {
        operator delete(*(void **)(v8 + 8));
      }
      MEMORY[0x1C878E320](v8, 0x1032C40D4AF1F8FLL);
    }
    operator new();
  }
  memset((char *)&v16[1] + 8, 0, 32);
  *(_OWORD *)((char *)&v16[3] + 8) = 0u;
  *(void *)&v16[0] = &unk_1F20B2680;
  *((void *)&v16[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
  LODWORD(v16[1]) = 1073741826;
  size_t v5 = (ImsResult *)ImsResult::operator<<<char [41]>((uint64_t)v16, "can't send a BYE in a terminated session");
  uint64_t v6 = ImsLogContainer::logResult(this, v5);
  ImsResult::ImsResult(a2, (const std::string *)v6);
  ImsResult::~ImsResult((ImsResult *)v16);
}

void sub_1C5369E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  MEMORY[0x1C878E320](v20, 0x1032C40D4AF1F8FLL);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void SipSession::sendSessionRefresh(SipSession *this@<X0>, ImsResult *a2@<X8>)
{
  if (!(*(unsigned int (**)(SipSession *))(*(void *)this + 264))(this))
  {
    memset(&v15, 0, sizeof(v15));
    uint64_t v6 = *((void *)this + 31);
    if (v6 && (uint64_t v7 = *(void *)(v6 + 216)) != 0) {
      uint64_t v8 = *(void *)(v7 + 136);
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(std::__shared_weak_count **)(v8 + 16);
    if (v9)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v9);
      uint64_t v10 = v9;
      if (v9) {
        uint64_t v9 = *(std::__shared_weak_count **)(v8 + 8);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v11 = (ImsPrefs *)SipStack::prefs((SipStack *)v9);
    UseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey = (void **)ImsPrefs::getUseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey(v11);
    if (ImsPrefs::BOOLValue(v11, UseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey)
      && (uint64_t v13 = *((void *)this + 31), !*(unsigned char *)(v13 + 1928)))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "UPDATE");
      BOOL v14 = !SipDialog::remoteSideAllows(v13, (uint64_t)__p);
      if (SHIBYTE(v17[0]) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      BOOL v14 = 0;
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v14)
    {
      std::string::operator=(&v15, (const std::string *)"INVITE");
      *(unsigned char *)(*((void *)this + 172) + 208) = 1;
    }
    else
    {
      std::string::operator=(&v15, (const std::string *)"UPDATE");
    }
    SipDialog::createRequestInDialog(*((void *)this + 31));
  }
  *(_OWORD *)&v17[1] = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  __p[0] = &unk_1F20B2680;
  __p[1] = &_bambiDomain;
  LODWORD(v17[0]) = 1073741826;
  uint64_t v4 = (ImsResult *)ImsResult::operator<<<char [53]>((uint64_t)__p, "can't send a session refresh in a terminated session");
  size_t v5 = ImsLogContainer::logResult(this, v4);
  ImsResult::ImsResult(a2, (const std::string *)v5);
  ImsResult::~ImsResult((ImsResult *)__p);
}

void sub_1C536A458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

double SipSession::sendPublish@<D0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = qword_1EBBDB750;
  if (byte_1EBBDB75F >= 0) {
    uint64_t v6 = byte_1EBBDB75F;
  }
  if (v5 != v6) {
    goto LABEL_17;
  }
  if (byte_1EBBDB75F >= 0) {
    uint64_t v8 = &SipSession::kPublishTypeEmergencyLocation;
  }
  else {
    uint64_t v8 = (uint64_t *)SipSession::kPublishTypeEmergencyLocation;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v8, *((void *)a2 + 1))) {
      goto LABEL_17;
    }
LABEL_16:
    SipDialog::createRequestInDialog(*(void *)(a1 + 248));
  }
  if (!a2[23]) {
    goto LABEL_16;
  }
  while (*a2 == *(unsigned __int8 *)v8)
  {
    ++a2;
    uint64_t v8 = (uint64_t *)((char *)v8 + 1);
    if (!--v4) {
      goto LABEL_16;
    }
  }
LABEL_17:
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void sub_1C536A738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::sendUpdateWithSdpInFork(uint64_t *a1@<X0>, ImsResult *a2@<X8>)
{
  if (!(*(unsigned int (**)(uint64_t *))(*a1 + 264))(a1)) {
    SipDialog::createRequestInDialog(a1[31]);
  }
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  v6[0] = &unk_1F20B2680;
  v6[1] = &_bambiDomain;
  int v7 = 1073741826;
  uint64_t v4 = (ImsResult *)ImsResult::operator<<<char [45]>((uint64_t)v6, "can't send an UPDATE in a terminated session");
  uint64_t v5 = ImsLogContainer::logResult((ImsLogContainer *)a1, v4);
  ImsResult::ImsResult(a2, (const std::string *)v5);
  ImsResult::~ImsResult((ImsResult *)v6);
}

void sub_1C536AFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  MEMORY[0x1C878E320](v31, 0x10A1C4082A5C483);
  ims::AccessNetwork::~AccessNetwork(&a19);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  ImsResult::~ImsResult((ImsResult *)(v32 - 160));
  _Unwind_Resume(a1);
}

void SipReason::~SipReason(SipReason *this)
{
  *((void *)this + 3) = &unk_1F20B37B0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

uint64_t ImsResult::operator<<<char [37]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C536B1E0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [11]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C536B288(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipSession::sendUpdateWithLocalSdpInAllForks(unint64_t **a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (((unsigned int (*)(unint64_t **))(*a1)[33])(a1))
  {
    memset((char *)&v38[1] + 8, 0, 48);
    *(void *)&v38[0] = &unk_1F20B2680;
    *((void *)&v38[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
    LODWORD(v38[1]) = 1073741826;
    long long v8 = (ImsResult *)ImsResult::operator<<<char [45]>((uint64_t)v38, "can't send an UPDATE in a terminated session");
    long long v9 = ImsLogContainer::logResult((ImsLogContainer *)a1, v8);
    ImsResult::ImsResult((ImsResult *)a4, (const std::string *)v9);
    ImsResult::~ImsResult((ImsResult *)v38);
    return;
  }
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  SipDialog::allForks(a1[31], &v35);
  unint64_t v10 = v35;
  uint64_t v11 = v36;
  if (v35 == v36)
  {
    memset((char *)&v38[1] + 8, 0, 48);
    *(void *)&v38[0] = &unk_1F20B2680;
    *((void *)&v38[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
    LODWORD(v38[1]) = 1073741826;
    uint64_t v16 = (ImsResult *)ImsResult::operator<<<char [37]>((uint64_t)v38, "sendUpdate: dialog contains no forks");
    long long v17 = ImsLogContainer::logResult((ImsLogContainer *)a1, v16);
    ImsResult::ImsResult((ImsResult *)a4, (const std::string *)v17);
    goto LABEL_39;
  }
  char v19 = 0;
  do
  {
    uint64_t v33 = 0;
    int v34 = 0;
    SipDialogFork::createSdpOffer(*(SipDialogFork **)v10, "UPDATE", a2, &v33);
    if (v33)
    {
      memset(v38, 0, 72);
      uint64_t v12 = v34;
      uint64_t v31 = v33;
      uint64_t v32 = v34;
      if (v34) {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = *(std::__shared_weak_count **)(v10 + 8);
      uint64_t v29 = *(SipDialogFork **)v10;
      uint64_t v30 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v24 = *(std::string *)a3;
      }
      long long v25 = &unk_1F20B37B0;
      std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>(v26, *(void ***)(a3 + 32), (void **)(a3 + 40));
      char v28 = 1;
      char v27 = *(unsigned char *)(a3 + 56);
      SipSession::sendUpdateWithSdpInFork((uint64_t *)a1, (ImsResult *)v38);
      long long v25 = &unk_1F20B37B0;
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)v26, (void *)v26[1]);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v24.__r_.__value_.__l.__data_);
        if (!v13) {
          goto LABEL_20;
        }
      }
      else if (!v13)
      {
LABEL_20:
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        if ((*(uint64_t (**)(void, void))(**((void **)&v38[0] + 1) + 24))(*((void *)&v38[0] + 1), LODWORD(v38[1])))
        {
          uint64_t v15 = ((uint64_t (*)(unint64_t **))(*a1)[7])(a1);
          ((void (*)(unint64_t **, uint64_t))(*a1)[2])(a1, v15);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"unable to send SDP in fork ", 27);
          *(unsigned char *)(v15 + 17) = 0;
          ObfuscatedString::ObfuscatedString((uint64_t)v20, (const std::string *)(*(void *)v10 + 152));
          (*(void (**)(uint64_t, void **))(*(void *)v15 + 56))(v15, v20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)": ", 2);
          *(unsigned char *)(v15 + 17) = 0;
          (*(void (**)(_OWORD *, uint64_t))(*(void *)&v38[0] + 16))(v38, v15);
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v15 + 17) = 0;
          if (v23 < 0) {
            operator delete(__p);
          }
          if (v21 < 0) {
            operator delete(v20[0]);
          }
        }
        else
        {
          char v19 = 1;
        }
        ImsResult::~ImsResult((ImsResult *)v38);
        goto LABEL_29;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      goto LABEL_20;
    }
    uint64_t v14 = ((uint64_t (*)(unint64_t **))(*a1)[7])(a1);
    ((void (*)(unint64_t **, uint64_t))(*a1)[2])(a1, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"unable to create SDP in fork ", 29);
    *(unsigned char *)(v14 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v38, (const std::string *)(*(void *)v10 + 152));
    (*(void (**)(uint64_t, _OWORD *))(*(void *)v14 + 56))(v14, v38);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (SHIBYTE(v38[2]) < 0) {
      operator delete(*((void **)&v38[1] + 1));
    }
    if (SBYTE7(v38[1]) < 0) {
      operator delete(*(void **)&v38[0]);
    }
LABEL_29:
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    v10 += 16;
  }
  while (v10 != v11);
  if (v19)
  {
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
    goto LABEL_40;
  }
  memset((char *)&v38[1] + 8, 0, 48);
  *(void *)&v38[0] = &unk_1F20B2680;
  *((void *)&v38[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
  LODWORD(v38[1]) = 0x40000000;
  long long v18 = (const std::string *)ImsResult::operator<<<char [35]>((uint64_t)v38, "unable to send UPDATE on any forks");
  ImsResult::ImsResult((ImsResult *)a4, v18);
LABEL_39:
  ImsResult::~ImsResult((ImsResult *)v38);
LABEL_40:
  *(void *)&v38[0] = &v35;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
}

void sub_1C536B8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  ImsResult::~ImsResult((ImsResult *)(v37 - 176));
  *(void *)(v37 - 176) = &a37;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 176));
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [35]>(uint64_t a1, char *__s)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    operator new();
  }
  size_t v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)__s, v5);
  *(unsigned char *)(v4 + 17) = 0;
  return a1;
}

void sub_1C536BA64(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t SipSession::exitWPSCleanup(SipSession *this)
{
  uint64_t result = *((void *)this + 90);
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 48))(result) == 14
      || (uint64_t result = *((void *)this + 90)) != 0
      && (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result), result == 15))
    {
      return SipTypedStateMachine<SipSessionState>::transitionToState((void *)this + 83, 13);
    }
  }
  return result;
}

ImsOutStream *SipSession::printSessionInfo(SipSession *this, ImsOutStream *a2)
{
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (*((char *)this + 1431) < 0)
  {
    if (!*((void *)this + 177)) {
      goto LABEL_9;
    }
  }
  else if (!*((unsigned char *)this + 1431))
  {
    goto LABEL_9;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Bambi Call ID:   ", 19);
  *((unsigned char *)a2 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v23, (const std::string *)((char *)this + 1408));
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 56))(a2, &v23);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (v25 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
LABEL_9:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Established:     ", 19);
  *((unsigned char *)a2 + 17) = 0;
  int v4 = SipSession::established(this);
  if (v4) {
    size_t v5 = "yes";
  }
  else {
    size_t v5 = "no";
  }
  if (v4) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)v5, v6);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Confirmed:       ", 19);
  *((unsigned char *)a2 + 17) = 0;
  int v7 = SipSession::confirmed(this);
  if (v7) {
    long long v8 = "yes";
  }
  else {
    long long v8 = "no";
  }
  if (v7) {
    uint64_t v9 = 3;
  }
  else {
    uint64_t v9 = 2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)v8, v9);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  State:           ", 19);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v10 = (*(uint64_t (**)(char *))(*((void *)this + 83) + 24))((char *)this + 664);
  uint64_t v11 = (const std::string *)(*(uint64_t (**)(char *, uint64_t))(*((void *)this + 83) + 16))((char *)this + 664, v10);
  LoggableString::LoggableString(&v23, v11);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v23);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Preconditions:   ", 19);
  *((unsigned char *)a2 + 17) = 0;
  SipPreconditions::printInfo((SipSession *)((char *)this + 1432), a2);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  uint64_t v12 = *((void *)this + 31);
  memset(&v23, 0, sizeof(v23));
  uint64_t v26 = 0;
  char v27 = 0;
  SipDialog::currentClientTransactions(v12, (unint64_t *)&v23, "INVITE", &v26);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  std::string::size_type size = v23.__r_.__value_.__l.__size_;
  std::string::size_type v13 = v23.__r_.__value_.__r.__words[0];
  if (v23.__r_.__value_.__r.__words[0] != v23.__r_.__value_.__l.__size_)
  {
    while (1)
    {
      uint64_t v16 = *(void **)v13;
      uint64_t v15 = *(std::__shared_weak_count **)(v13 + 8);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!(*(unsigned int (**)(void *))(*v16 + 144))(v16)) {
        break;
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      v13 += 16;
      if (v13 == size) {
        goto LABEL_32;
      }
    }
    char v28 = &v23;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    goto LABEL_38;
  }
LABEL_32:
  char v28 = &v23;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  SipSession::serverInviteTransaction(this, (uint64_t *)&v23);
  uint64_t v15 = (std::__shared_weak_count *)v23.__r_.__value_.__l.__size_;
  uint64_t v16 = (void *)v23.__r_.__value_.__r.__words[0];
  if (v23.__r_.__value_.__l.__size_)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v16)
  {
LABEL_38:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Current INVITE:  ", 19);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(std::string *__return_ptr, void *))(v16[12] + 24))(&v23, v16 + 12);
    (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &v23);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v17 = *((void *)this + 76);
  long long v18 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v17)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Transport:       ", 19);
    *((unsigned char *)a2 + 17) = 0;
    uint64_t v19 = *((void *)this + 76);
    uint64_t v20 = (std::__shared_weak_count *)*((void *)this + 77);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, ImsOutStream *))(*(void *)v19 + 104))(v19, a2);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"  Session locks:   ", 19);
  *((unsigned char *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((unsigned char *)a2 + 17) = 0;
  SipLockable::printLocks((SipSession *)((char *)this + 104), a2);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  char v21 = (const std::string *)*((void *)this + 31);
  if (v21) {
    SipDialog::printDialogInfo(v21, a2);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  return a2;
}

void sub_1C536C1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipSession::nameForStateId(SipSession *this, unsigned int a2)
{
  if (a2 <= 0x10) {
    unsigned int v2 = a2;
  }
  else {
    unsigned int v2 = 0;
  }
  return (uint64_t)&_MergedGlobals_9 + 24 * v2 + 24;
}

uint64_t non-virtual thunk to'SipSession::nameForStateId(SipSession *this, unsigned int a2)
{
  if (a2 <= 0x10) {
    unsigned int v2 = a2;
  }
  else {
    unsigned int v2 = 0;
  }
  return (uint64_t)&_MergedGlobals_9 + 24 * v2 + 24;
}

BOOL SipSession::terminated(SipSession *this)
{
  uint64_t v2 = *((void *)this + 90);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v2)
  {
    BOOL v6 = 0;
    if (!v3) {
      return v6;
    }
    goto LABEL_9;
  }
  uint64_t v4 = *((void *)this + 90);
  size_t v5 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v6 = (*(unsigned int (**)(uint64_t))(*(void *)v4 + 48))(v4) == 13;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v3) {
LABEL_9:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v6;
}

void sub_1C536C364(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::handleAuthChallengeTimeout(std::__shared_weak_count *this)
{
  if ((((uint64_t (*)(std::__shared_weak_count *))this->__vftable[6].__get_deleter)(this) & 1) == 0)
  {
    uint64_t v2 = ((uint64_t (*)(std::__shared_weak_count *))this->__vftable[1].__on_zero_shared)(this);
    ((void (*)(std::__shared_weak_count *, uint64_t))this->__on_zero_shared)(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"Terminating call due to auth challenge timeout", 46);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "InternalError");
    SipSession::hangUp(this, (uint64_t)__p, (uint64_t)v5);
    ImsResult::~ImsResult((ImsResult *)v5);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C536C4C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::handleNewFork(uint64_t a1, SipDialogFork **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"handleNewFork: setting need to send update to ", 46);
  *(unsigned char *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 304))(a1, (uint64_t)*a2 + 152);
  std::ostream::operator<<();
  *(unsigned char *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)" in fork ", 9);
  *(unsigned char *)(v4 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v14, (const std::string *)((char *)*a2 + 152));
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 56))(v4, &v14);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v4 + 17) = 0;
  if (v18 < 0) {
    operator delete(__p);
  }
  if (v16 < 0) {
    operator delete(v14);
  }
  size_t v5 = (std::string *)((char *)*a2 + 152);
  int v6 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)a1 + 304))(a1, v5);
  SipPreconditions::setNeedToSendUpdateInFork((long long *)(a1 + 1432), v5, v6);
  if (*((void *)*a2 + 109))
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"handleNewFork: fork ", 20);
    *(unsigned char *)(v7 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v14, (const std::string *)((char *)*a2 + 152));
    (*(void (**)(uint64_t, void **))(*(void *)v7 + 56))(v7, &v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)" already has some bearer information!", 37);
    *(unsigned char *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v7 + 17) = 0;
    if (v18 < 0) {
      operator delete(__p);
    }
    if (v16 < 0) {
      operator delete(v14);
    }
    SipPreconditions::handleLocalQoSEstablished((void *)(a1 + 1432), (void **)*a2 + 19);
  }
  long long v8 = *(std::__shared_weak_count **)(a1 + 784);
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 776);
      if (v10)
      {
        if (*(unsigned char *)(v10 + 1496) && *(_DWORD *)(a1 + 1516) != 1)
        {
          uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v11);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"We offered preconditions, setting up status for new fork", 56);
          *(unsigned char *)(v11 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v11 + 17) = 0;
          SipPreconditions::initializeNewFork(a1 + 1432, (std::string *)((char *)*a2 + 152));
        }
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  if (*(unsigned char *)(a1 + 1352))
  {
    uint64_t v12 = *(void *)(a1 + 1144);
    if (!v12) {
      goto LABEL_25;
    }
    SDPSession::localLazuliSdp(*(SDPSession **)(v12 + 120), &v14);
  }
  else
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 128))(&v14, a1);
  }
  if (v14 && (*(unsigned int (**)(char *))(*((void *)v14 + 5) + 24))((char *)v14 + 40))
  {
    SipDialogFork::setSdpVersion(*a2, *((void *)v14 + 17));
    goto LABEL_26;
  }
LABEL_25:
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"handleNewFork: no local SDP to initialize SDP version", 53);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
LABEL_26:
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C536CA68(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipSession::updateBearerForPorts(uint64_t *a1, unsigned int a2, int a3, unsigned __int16 **a4, char a5)
{
  unsigned int v26 = 2;
  size_t v5 = *a4;
  int v6 = a4[1];
  if (*a4 != v6)
  {
    uint64_t v12 = (SipPreconditions *)(a1 + 179);
    do
    {
      unsigned int v13 = *v5;
      uint64_t v24 = 0;
      char v25 = 0;
      SipDialog::forkForBearerPort((SipDialog *)a1[31], v13, a3, &v26, &v24);
      uint64_t v14 = *a1;
      if (!v24)
      {
        uint64_t v17 = (*(uint64_t (**)(uint64_t *))(v14 + 48))(a1);
        (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"No fork using bearer port ", 26);
        *(unsigned char *)(v17 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v17 + 17) = 0;
        goto LABEL_19;
      }
      uint64_t v15 = (*(uint64_t (**)(uint64_t *))(v14 + 64))(a1);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v15 + 8), (uint64_t)"Updating bearer information for fork ", 37);
      *(unsigned char *)(v15 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v20, (const std::string *)(v24 + 152));
      (*(void (**)(uint64_t, void **))(*(void *)v15 + 56))(v15, v20);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v15 + 17) = 0;
      if (v23 < 0) {
        operator delete(__p);
      }
      if (v21 < 0)
      {
        operator delete(v20[0]);
        if (a5)
        {
LABEL_8:
          uint64_t v16 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
          (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Faking QoS indication, do not store bearer information", 54);
          *(unsigned char *)(v16 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v16 + 17) = 0;
          goto LABEL_12;
        }
      }
      else if (a5)
      {
        goto LABEL_8;
      }
      SipDialogFork::setBearer(v24, a2, (uint64_t)a4, v26);
LABEL_12:
      uint64_t v18 = a1[188];
      int v19 = *((_DWORD *)a1 + 380);
      if (v18 && v19 == 5)
      {
        if ((SipPreconditions::preconditionsActiveInAnyFork(v12) & 1) == 0) {
          goto LABEL_19;
        }
LABEL_18:
        SipPreconditions::handleLocalQoSEstablished(v12, (void **)(v24 + 152));
        goto LABEL_19;
      }
      if (!v18 && v19 == 5) {
        goto LABEL_18;
      }
LABEL_19:
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      ++v5;
    }
    while (v5 != v6);
  }
}

void sub_1C536CE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::handleRemoteQoSEstablished(uint64_t a1, unsigned int a2, int a3, uint64_t a4, char a5)
{
  SipSessionInterface::stack((std::__shared_weak_count *)a1, &v25);
  uint64_t v10 = (ImsPrefs *)SipStack::prefs(v25);
  UseStrictBearerPreconditionsKey = (void **)ImsPrefs::getUseStrictBearerPreconditionsKey(v10);
  int v12 = ImsPrefs::BOOLValue(v10, UseStrictBearerPreconditionsKey);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v12)
  {
    if (*(void *)a4 != *(void *)(a4 + 8))
    {
      SipSession::updateBearerForPorts((uint64_t *)a1, a2, a3, (unsigned __int16 **)a4, a5);
      return;
    }
    uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"Bearer does not contain port information, we will use the only fork by default", 78);
    *(unsigned char *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v16 + 17) = 0;
    uint64_t v17 = *(void **)(a1 + 248);
    if (v17[258] == 1)
    {
      uint64_t v18 = v17[256];
      uint64_t v20 = *(void *)(v18 + 56);
      int v19 = *(std::__shared_weak_count **)(v18 + 64);
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v17 = *(void **)(a1 + 248);
      }
      if (v20)
      {
        if (v17[258] != 1)
        {
          uint64_t v23 = 0;
          unsigned int v22 = 0;
          if (!v19)
          {
LABEL_29:
            if (v23)
            {
              if ((a5 & 1) == 0) {
                SipDialogFork::setBearer(v23, a2, a4, 2u);
              }
              SipPreconditions::handleLocalQoSEstablished((void *)(a1 + 1432), (void **)(v23 + 152));
              if (!v22) {
                return;
              }
            }
            else
            {
              uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
              (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v24);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"More than one fork exists, rejecting QoS for ambiguous bearer", 61);
              *(unsigned char *)(v24 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v24 + 17) = 0;
              if (!v22) {
                return;
              }
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
            return;
          }
LABEL_28:
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
          goto LABEL_29;
        }
        uint64_t v21 = v17[256];
        uint64_t v23 = *(void *)(v21 + 56);
        unsigned int v22 = *(std::__shared_weak_count **)(v21 + 64);
        if (!v22)
        {
LABEL_27:
          if (!v19) {
            goto LABEL_29;
          }
          goto LABEL_28;
        }
LABEL_26:
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_27;
      }
    }
    else
    {
      int v19 = 0;
    }
    uint64_t v23 = v17[261];
    unsigned int v22 = (std::__shared_weak_count *)v17[262];
    if (!v22) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  SipDialog::bestAvailableFork(*(SipDialog **)(a1 + 248), &v30);
  uint64_t v13 = v30;
  if (v30)
  {
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"Using fork ", 11);
    *(unsigned char *)(v14 + 17) = 0;
    uint64_t v15 = (std::string *)(v13 + 152);
    ObfuscatedString::ObfuscatedString((uint64_t)&v25, v15);
    (*(void (**)(uint64_t, SipStack **))(*(void *)v14 + 56))(v14, &v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)" for bearer ", 12);
    *(unsigned char *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (v29 < 0) {
      operator delete(__p);
    }
    if (v27 < 0) {
      operator delete(v25);
    }
    SipPreconditions::handleLocalQoSEstablished((void *)(a1 + 1432), (void **)&v15->__r_.__value_.__l.__data_);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
}

void sub_1C536D2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void SipSession::handleLocalQoSEstablished(unint64_t **this)
{
  uint64_t v18 = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  SipDialog::allForks(this[31], (unint64_t *)&v18);
  uint64_t v2 = v18;
  for (uint64_t i = v19; v2 != i; v2 += 2)
  {
    uint64_t v5 = *v2;
    uint64_t v4 = (std::__shared_weak_count *)v2[1];
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    int v6 = *(SipOfferAnswer **)(v5 + 656);
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 664);
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      SipOfferAnswer::activeRemoteSdp(v6, &v16);
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    else
    {
      SipOfferAnswer::activeRemoteSdp(v6, &v16);
    }
    long long v8 = *this;
    if (v16)
    {
      uint64_t v9 = ((uint64_t (*)(unint64_t **))v8[8])(this);
      ((void (*)(unint64_t **, uint64_t))(*this)[2])(this, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Fork ", 5);
      *(unsigned char *)(v9 + 17) = 0;
      uint64_t v10 = (std::string *)(v5 + 152);
      ObfuscatedString::ObfuscatedString((uint64_t)v12, v10);
      (*(void (**)(uint64_t, void **))(*(void *)v9 + 56))(v9, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)" has remote SDP, setting QoS established", 40);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      SipPreconditions::handleLocalQoSEstablished(this + 179, (void **)&v10->__r_.__value_.__l.__data_);
    }
    else
    {
      uint64_t v11 = ((uint64_t (*)(unint64_t **))v8[6])(this);
      ((void (*)(unint64_t **, uint64_t))(*this)[2])(this, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"Fork ", 5);
      *(unsigned char *)(v11 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v12, (const std::string *)(v5 + 152));
      (*(void (**)(uint64_t, void **))(*(void *)v11 + 56))(v11, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)" does not contain remote SDP", 28);
      *(unsigned char *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v11 + 17) = 0;
      if (v15 < 0) {
        operator delete(__p);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  v12[0] = &v18;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
}

void sub_1C536D64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  a10 = (void **)&a18;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void ___ZN10SipSession33handleQualityOfServiceEstablishedEjbRKNSt3__16vectorItNS0_9allocatorItEEEEb_block_invoke(uint64_t a1, SipDialogFork **a2)
{
  SipDialogFork::sendPreconditionUpdate(*a2, 1, (uint64_t)v2);
  ImsResult::~ImsResult((ImsResult *)v2);
}

void ___ZN10SipSession33handleQualityOfServiceEstablishedEjbRKNSt3__16vectorItNS0_9allocatorItEEEEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
}

void SipSession::sendPreconditionEvents(uint64_t a1, const std::string *a2)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 264))(a1) & 1) == 0)
  {
    *(_OWORD *)std::string __p = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    *(_OWORD *)uint64_t v10 = 0u;
    BambiCallPreconditionsSatisfiedEvent::BambiCallPreconditionsSatisfiedEvent((uint64_t)&v9, a2);
    SipSession::fireCallEvent((SipSession *)a1, (BambiCallEvent *)&v9);
    if (!*(unsigned char *)(a1 + 1392))
    {
      uint64_t v4 = *(void *)(a1 + 248);
      if (v4)
      {
        if (!*(unsigned char *)(v4 + 1928))
        {
          uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, v5);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Alerting user of incoming call", 30);
          *(unsigned char *)(v5 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v5 + 17) = 0;
          *(unsigned char *)(a1 + 1392) = 1;
          uint64_t v8 = 0;
          long long v6 = 0u;
          *(_OWORD *)uint64_t v7 = 0u;
          v13[0] = 0;
          v13[1] = 0;
          BambiCallEvent::BambiCallEvent((uint64_t)&v6, 2, v13);
          *(void *)&long long v6 = &unk_1F20C32F8;
          SipSession::fireCallEvent((SipSession *)a1, (BambiCallEvent *)&v6);
          *(void *)&long long v6 = &unk_1F20B8640;
          if (v7[1]) {
            std::__shared_weak_count::__release_weak(v7[1]);
          }
        }
      }
    }
    *(void *)&long long v9 = &unk_1F20C35F0;
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[1]);
    }
    *(void *)&long long v9 = &unk_1F20B8640;
    if (v10[1]) {
      std::__shared_weak_count::__release_weak(v10[1]);
    }
  }
}

void sub_1C536D904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  BambiCallPreconditionsSatisfiedEvent::~BambiCallPreconditionsSatisfiedEvent(&a15);
  _Unwind_Resume(a1);
}

void SipSession::localSdp(SipSession *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 98);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    long long v6 = v5;
    uint64_t v7 = (BambiCall *)*((void *)this + 97);
    if (v7)
    {
      BambiCall::localSdp(v7, a2);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1C536D9C8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipSession::createLocalSdpForFork(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 784);
  if (v5 && (uint64_t v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(a1 + 776);
    if (v9)
    {
      uint64_t v10 = *a2;
      uint64_t v11 = (std::__shared_weak_count *)a2[1];
      v12[0] = v10;
      v12[1] = (uint64_t)v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BambiCall::createLocalSdpForFork(v9, v12, (uint64_t)a3);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_1C536DA94(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipSession::handleLocalPreconditionsSatisfied(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 784);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 776);
      if (v5)
      {
        uint64_t v6 = *(void *)(v5 + 200);
        if (v6) {
          SDPSession::enableRTCPBandwidthSpecifiers(v6);
        }
        *(unsigned char *)(v5 + 463) = 1;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_1C536DB24(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipSession::handleLocalPreconditionsSatisfied(uint64_t a1)
{
}

void SipSession::handlePreconditionsSatisfiedInFork(int8x8_t *a1, uint64_t a2)
{
  if (SipPreconditions::preconditionsEnabled((uint64_t)&a1[179], (void **)a2))
  {
    SipTimerContainer::cancelTimer(a1 + 34, (std::string *)"WaitForRingingTimer");
    char v4 = 0;
  }
  else
  {
    char v4 = SipSession::requireQosBeforeRinging((SipSession *)a1);
  }
  int8x8_t v5 = a1[31];
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(*(void *)&v5 + 2048, (void **)a2);
  if ((void **)(*(void *)&v5 + 2056) == v6)
  {
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = (SipDialogFork *)v6[7];
    uint64_t v7 = (std::__shared_weak_count *)v6[8];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8)
    {
      uint64_t v9 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 64))(a1);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"Preconditions satisfied for session for ", 40);
      *(unsigned char *)(v9 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)&v20, (const std::string *)a2);
      (*(void (**)(uint64_t, std::string *))(*(void *)v9 + 56))(v9, &v20);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
      if (v22 < 0) {
        operator delete(v21);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      SipDialogFork::handlePreconditionsSatisfied(v8);
      if ((v4 & 1) == 0)
      {
        memset(&v20, 0, sizeof(v20));
        if (*(char *)(a2 + 23) < 0) {
          std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string v20 = *(std::string *)a2;
        }
        int8x8_t v11 = a1[24];
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v11 + 16), 1uLL, memory_order_relaxed);
        }
        SipSessionInterface::stack((std::__shared_weak_count *)a1, &v19);
        uint64_t v12 = *(void *)(v19 + 136);
        LoggableString::LoggableString((LoggableString *)__p, "sendPreconditionEventsBlock");
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v15, &a1[23]);
        if (v15) {
          uint64_t v13 = v15 + 104;
        }
        else {
          uint64_t v13 = 0;
        }
        v17[0] = v13;
        v17[1] = v16;
        uint64_t v15 = 0;
        uint64_t v16 = 0;
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v11 + 16), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v14, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
        }
        else {
          std::string v14 = v20;
        }
        BambiClient::performBlock(v12, (uint64_t)__p, (uint64_t)v17);
      }
      goto LABEL_32;
    }
  }
  uint64_t v10 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 48))(a1);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)a1 + 16))(a1, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Preconditions satisfied for unknown fork ", 41);
  *(unsigned char *)(v10 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v20, (const std::string *)a2);
  (*(void (**)(uint64_t, std::string *))(*(void *)v10 + 56))(v10, &v20);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v22 < 0) {
    operator delete(v21);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
LABEL_32:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1C536DFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  uint64_t v37 = *(std::__shared_weak_count **)(v35 - 120);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (v33) {
    std::__shared_weak_count::__release_weak(v33);
  }
  if (*(char *)(v35 - 89) < 0) {
    operator delete(*(void **)(v35 - 112));
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10SipSession34handlePreconditionsSatisfiedInForkERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    char v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      int8x8_t v5 = v4;
      if (*(void *)(a1 + 40)) {
        SipSession::sendPreconditionEvents(v3, (const std::string *)(a1 + 56));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C536E0F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19SipSessionInterfaceEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  char v4 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    a1[9] = *(void *)(a2 + 72);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
}

void sub_1C536E170(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c44_ZTSNSt3__18weak_ptrI19SipSessionInterfaceEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void non-virtual thunk to'SipSession::handlePreconditionsSatisfiedInFork(uint64_t a1, uint64_t a2)
{
}

uint64_t SipSession::isLocalQualityOfServiceEstablished(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1568)) {
    uint64_t v2 = *(unsigned char *)(a1 + 1560) != 0;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 784);
  if (v3)
  {
    char v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = *(void *)(a1 + 776);
      if (v5)
      {
        if (*(unsigned char *)(v5 + 463)) {
          uint64_t v2 = 1;
        }
        else {
          uint64_t v2 = v2;
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  return v2;
}

uint64_t non-virtual thunk to'SipSession::isLocalQualityOfServiceEstablished(uint64_t a1)
{
  return SipSession::isLocalQualityOfServiceEstablished(a1 - 632);
}

double SipSession::fillCommonRequestHeaders@<D0>(SipSession *this@<X0>, SipRequest *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)this + 793))
  {
    memset(&__str, 0, sizeof(__str));
    uint64_t v6 = *((void *)this + 31);
    if (v6 && (uint64_t v7 = *(void *)(v6 + 216)) != 0) {
      uint64_t v8 = *(SipUserAgent **)(v7 + 136);
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = SipUserAgent::config(v8);
    if (*(char *)(v9 + 663) < 0) {
      std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v9 + 640), *(void *)(v9 + 648));
    }
    else {
      std::string __str = *(std::string *)(v9 + 640);
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (!size) {
      std::string::operator=(&__str, (const std::string *)&SipPrivacyHeader::kPrivacyId);
    }
    std::string v14 = SipMessage::header<SipPrivacyHeader>(a2);
    std::string::operator=((std::string *)((char *)v14 + 64), &__str);
    uint64_t v45 = 0;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v20 = 0u;
    SipUri::SipUri((SipUri *)&v20);
    SipUri::makeAnonymous((SipUri *)&v20);
    uint64_t v15 = SipMessage::header<SipFromHeader>(a2, 1);
    SipUri::operator=((SipHeader *)((char *)v15 + 104), (uint64_t)&v20);
    SipUri::~SipUri((SipUri *)&v20);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v10 = *((void *)this + 31);
    if (v10 && (uint64_t v11 = *(void *)(v10 + 216)) != 0) {
      uint64_t v12 = *(SipUserAgent **)(v11 + 136);
    }
    else {
      uint64_t v12 = 0;
    }
    if (*(unsigned char *)(SipUserAgent::config(v12) + 613) || *((unsigned char *)this + 792))
    {
      uint64_t v16 = SipMessage::header<SipPrivacyHeader>(a2);
      std::string::operator=((std::string *)((char *)v16 + 64), (const std::string *)"none");
    }
  }
  if (*((char *)this + 903) < 0)
  {
    if (!*((void *)this + 111)) {
      goto LABEL_29;
    }
  }
  else if (!*((unsigned char *)this + 903))
  {
    goto LABEL_29;
  }
  uint64_t v45 = 0;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  SipUri::SipUri((SipUri *)&v20);
  if (SipUri::fromString((uint64_t)&v20, (std::string *)((char *)this + 880)))
  {
    uint64_t v17 = (*(uint64_t (**)(SipSession *))(*(void *)this + 64))(this);
    (*(void (**)(SipSession *, uint64_t))(*(void *)this + 16))(this, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Updating To Uri to ", 19);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(void *)v17 + 32))(v17, (char *)this + 880);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
    uint64_t v18 = SipMessage::header<SipToHeader>(a2, 1);
    SipUri::operator=((SipHeader *)((char *)v18 + 104), (uint64_t)&v20);
  }
  SipUri::~SipUri((SipUri *)&v20);
LABEL_29:
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void sub_1C536E59C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 57) < 0) {
    operator delete(*(void **)(v1 - 80));
  }
  _Unwind_Resume(exception_object);
}

SipHeader *SipMessage::header<SipPrivacyHeader>(SipMessage *a1)
{
  double result = SipMessage::headerWithName(a1, "Privacy", 1);
  if (result)
  {
  }
  return result;
}

void SipSession::handleActiveForkChanged(uint64_t a1, std::string::size_type *a2, int a3)
{
  char v4 = *(std::__shared_weak_count **)(a1 + 784);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 776);
      if (v9)
      {
        uint64_t v10 = (std::__shared_weak_count *)a2[1];
        std::string::size_type v11 = *a2;
        uint64_t v12 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BambiCall::handleActiveForkChanged(v9, &v11, a3);
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C536E6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t SipSession::setWPSErrorResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 1600);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  *(void *)(a1 + 1600) = result;
  return result;
}

void SipSession::sendAck(uint64_t a1@<X0>, SipRequest *a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, ImsResult *a5@<X8>)
{
  if (*(unsigned char *)(a1 + 1352))
  {
    v22[0] = 0;
    v22[1] = 0;
    uint64_t v23 = 0;
    SipSession::logLazuliMessageSessionSetup(a1, (uint64_t)v22, 200);
  }
  uint64_t v11 = *(void *)(a1 + 184);
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 192);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  LoggableString::LoggableString((LoggableString *)v22, "sendAck");
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v18, (void *)(a1 + 184));
  if (v18) {
    uint64_t v12 = v18 + 104;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v20 = v12;
  long long v21 = v19;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 1174405120;
  void v16[2] = ___ZN10SipSession7sendAckEP10SipRequestNSt3__110shared_ptrI26SipClientInviteTransactionEEb_block_invoke;
  void v16[3] = &__block_descriptor_tmp_386;
  _OWORD v16[4] = a1;
  _OWORD v16[5] = v11;
  uint64_t v17 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  SipLockable::performBlock(a1 + 104, (uint64_t)v22, &v20, (uint64_t)v16);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
  uint64_t v13 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = *a3;
  uint64_t v15 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSessionInterface::sendAck(a1, a2, &v14, a4, a5);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1C536E928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10SipSession7sendAckEP10SipRequestNSt3__110shared_ptrI26SipClientInviteTransactionEEb_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (SipSession *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        if (((*(uint64_t (**)(SipSession *))(*(void *)v3 + 264))(v3) & 1) != 0
          || SipSession::terminating(v3))
        {
          uint64_t v6 = (*(uint64_t (**)(SipSession *))(*(void *)v3 + 64))(v3);
          (*(void (**)(SipSession *, uint64_t))(*(void *)v3 + 16))(v3, v6);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"Session already terminated or terminating, not sending SessionAcknowledged event", 80);
          *(unsigned char *)(v6 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v6 + 17) = 0;
        }
        else
        {
          uint64_t v10 = 0;
          long long v8 = 0u;
          *(_OWORD *)uint64_t v9 = 0u;
          v7[0] = 0;
          v7[1] = 0;
          BambiCallEvent::BambiCallEvent((uint64_t)&v8, 30, v7);
          SipSession::fireCallEvent(v3, (BambiCallEvent *)&v8);
          *(void *)&long long v8 = &unk_1F20B8640;
          if (v9[1]) {
            std::__shared_weak_count::__release_weak(v9[1]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C536EB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void SipSession::getMostRecentRemoteFork(SipSession *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 31);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v4 + 2048, (void **)this + 202);
  if ((void **)(v4 + 2056) == v5)
  {
    *a2 = 0;
    a2[1] = 0;
    if (!v3) {
      return;
    }
    goto LABEL_7;
  }
  uint64_t v6 = (atomic_ullong *)v5[8];
  *a2 = v5[7];
  a2[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(v6 + 1, 1uLL, memory_order_relaxed);
  }
  if (v3)
  {
LABEL_7:
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_1C536EC24(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

const char *SipSimpleStateMachine<SipSessionState>::nameForStateId(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v3) {
    return "Unknown";
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return "Unknown";
  }
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(a1 + 72);
  if (v7) {
    long long v8 = (const char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a2);
  }
  else {
    long long v8 = "Unknown";
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void sub_1C536ED48(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipSimpleStateMachine<SipSessionState>::handleStateTransition(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      long long v8 = v7;
      uint64_t v9 = *(void *)(a1 + 72);
      if (v9)
      {
        if (*a2) {
          uint64_t v10 = (*(uint64_t (**)(void))(*(void *)*a2 + 48))(*a2);
        }
        else {
          uint64_t v10 = 0;
        }
        uint64_t v11 = (*(uint64_t (**)(void))(**(void **)a3 + 48))();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 24))(v9, v10, v11);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1C536EE5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipSession::desiredServices(SipSession *this)
{
  return 1;
}

uint64_t SipSimpleStateMachine<SipSessionState>::~SipSimpleStateMachine(uint64_t a1)
{
  *(void *)a1 = &unk_1F20C46B0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  *(void *)a1 = &unk_1F20C4708;
  if (*(void *)(a1 + 40))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(*(void **)(a1 + 32));
    *(void *)(a1 + 32) = 0;
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*(void *)(a1 + 16) + 8 * i) = 0;
    }
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(*(void **)(a1 + 32));
  uint64_t v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v6) {
    operator delete(v6);
  }
  return a1;
}

void SipSimpleStateMachine<SipSessionState>::~SipSimpleStateMachine(uint64_t a1)
{
  SipSimpleStateMachine<SipSessionState>::~SipSimpleStateMachine(a1);
  JUMPOUT(0x1C878E320);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::weak_ptr<LazuliGroupParticipant>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void SipCallWaitingInfoBody::SipCallWaitingInfoBody(SipCallWaitingInfoBody *this, char a2)
{
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1F20C3DC0;
  SipCallWaitingInfo::SipCallWaitingInfo((SipCallWaitingInfoBody *)((char *)this + 32), a2);
}

void sub_1C536F034(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_1F20CC498;
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

BOOL SipOfferAnswerExchange::empty(SipOfferAnswerExchange *this)
{
  uint64_t v1 = *((void *)this + 5);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v1)
  {
    BOOL v3 = 0;
    if (!v2) {
      return v3;
    }
    goto LABEL_8;
  }
  uint64_t v5 = *((void *)this + 7);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
  if (!v4)
  {
    BOOL v3 = v5 == 0;
    if (!v2) {
      return v3;
    }
    goto LABEL_8;
  }
  atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  BOOL v3 = v5 == 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  if (v2) {
LABEL_8:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v3;
}

void BambiCallTerminationReason::BambiCallTerminationReason(BambiCallTerminationReason *this, const BambiCallTerminationReason *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  uint64_t v6 = *((void *)a2 + 7);
  *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
  *((void *)this + 7) = v6;
  uint64_t v7 = (std::string *)((char *)this + 72);
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v8 = *(_OWORD *)((char *)a2 + 72);
    *((void *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *((void *)a2 + 11);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  uint64_t v9 = *((void *)a2 + 13);
  *((void *)this + 12) = *((void *)a2 + 12);
  *((void *)this + 13) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *((void *)a2 + 15);
  *((void *)this + 14) = *((void *)a2 + 14);
  *((void *)this + 15) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  int v11 = *((_DWORD *)a2 + 32);
  *(_DWORD *)((char *)this + 13bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *(_DWORD *)((char *)a2 + 131);
  *((_DWORD *)this + 32) = v11;
}

void sub_1C536F240(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallSessionTerminatingEvent::~BambiCallSessionTerminatingEvent(BambiCallSessionTerminatingEvent *this)
{
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent(this);
  JUMPOUT(0x1C878E320);
}

void BambiCallSessionTerminatingEvent::clone(BambiCallSessionTerminatingEvent *this)
{
}

void sub_1C536F310(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C4000B006BBLL);
  _Unwind_Resume(a1);
}

char *std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(void *)result) >> 1)
  {
    if (v9)
    {
      *((void *)result + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<IMSCallInfo *>::__throw_length_error[abi:ne180100]();
    }
    if (v8 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned short>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_17:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 1;
  if (v15 >= a4) {
    goto LABEL_17;
  }
  uint64_t v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_19:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *uint64_t v12 = &v9[v17];
  return result;
}

void **std::unique_ptr<ImsPowerAssertion>::reset[abi:ne180100](void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    ImsPowerAssertion::~ImsPowerAssertion(result);
    JUMPOUT(0x1C878E320);
  }
  return result;
}

void std::__shared_ptr_emplace<SipSessionTimer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C47B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionTimer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C47B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionTimer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<SipSession,std::allocator<SipSession>,std::string const&,void>(const std::string *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x6F8uLL);
  std::__shared_ptr_emplace<SipSession>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<SipSession>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4 + 26, (uint64_t)(v4 + 3));
}

void sub_1C536F584(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SipSession>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<SipSession>,0>(void *a1, const std::string *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20C4808;
  SipSession::SipSession((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1C536F5E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSession>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<SipSessionConfirmedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4858;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionConfirmedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4858;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionConfirmedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

SipSessionState *SipSessionConfirmedState::SipSessionConfirmedState(SipSessionState *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  v6[0] = a2;
  v6[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSessionState::SipSessionState(a1, v6);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *(void *)a1 = &unk_1F20E0A08;
  *((void *)a1 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20E0AB0;
  return a1;
}

void sub_1C536F7C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<SipSessionSilentHangUpState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C48A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionSilentHangUpState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C48A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionSilentHangUpState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipSessionSentByeState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C48F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionSentByeState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C48F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionSentByeState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipSessionTerminatedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionTerminatedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4948;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionTerminatedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipSessionRttUpgradeRequestedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionRttUpgradeRequestedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4998;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionRttUpgradeRequestedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipSessionClientInviteState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C49E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionClientInviteState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C49E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionClientInviteState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

SipSessionState *SipSessionClientInviteState::SipSessionClientInviteState(SipSessionState *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSessionClientUnconfirmedState::SipSessionClientUnconfirmedState(a1, a2, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *(void *)a1 = &unk_1F20C0458;
  *((void *)a1 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C0508;
  return a1;
}

void sub_1C536FB74(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

SipSessionState *SipSessionClientUnconfirmedState::SipSessionClientUnconfirmedState(SipSessionState *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  v6[0] = a2;
  v6[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSessionState::SipSessionState(a1, v6);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *(void *)a1 = &unk_1F20C0538;
  *((void *)a1 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C05E0;
  return a1;
}

void sub_1C536FC24(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<SipSessionClientReceivedTryingResponseState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4A38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionClientReceivedTryingResponseState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4A38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionClientReceivedTryingResponseState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipSessionClientEarlyState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4A88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionClientEarlyState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4A88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionClientEarlyState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void SipSessionClientEarlyState::~SipSessionClientEarlyState(SipSessionClientEarlyState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionClientEarlyState::id(SipSessionClientEarlyState *this)
{
  return 4;
}

void non-virtual thunk to'SipSessionClientEarlyState::~SipSessionClientEarlyState(SipSessionClientEarlyState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionClientEarlyState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<SipSessionClientCanceledState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4BC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionClientCanceledState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4BC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionClientCanceledState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

uint64_t SipSessionClientCanceledState::SipSessionClientCanceledState(uint64_t a1, uint64_t a2, std::__shared_weak_count *a3)
{
  v6[0] = a2;
  v6[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSessionState::SipSessionState((SipSessionState *)a1, v6);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *(void *)a1 = &unk_1F20C0708;
  *(void *)(a1 + 8) = &unk_1F20C07B8;
  *(unsigned char *)(a1 + 224) = 0;
  return a1;
}

void sub_1C536FF34(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<SipSessionClientWPSCanceledState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4C18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionClientWPSCanceledState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4C18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionClientWPSCanceledState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipSessionClientWPSNetworkTerminatedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4C68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionClientWPSNetworkTerminatedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4C68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionClientWPSNetworkTerminatedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipSessionServerInviteState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4CB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionServerInviteState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4CB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionServerInviteState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

SipSessionState *SipSessionServerUnconfirmedState::SipSessionServerUnconfirmedState(SipSessionState *a1, uint64_t a2, std::__shared_weak_count *a3)
{
  v6[0] = a2;
  v6[1] = a3;
  if (a3) {
    atomic_fetch_add_explicit(&a3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipSessionState::SipSessionState(a1, v6);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  *(void *)a1 = &unk_1F20D5C38;
  *((void *)a1 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20D5CE0;
  return a1;
}

void sub_1C53701B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<SipSessionServerEarlyState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4D08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionServerEarlyState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4D08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionServerEarlyState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void SipSessionServerEarlyState::~SipSessionServerEarlyState(SipSessionServerEarlyState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C878E320);
}

uint64_t SipSessionServerEarlyState::id(SipSessionServerEarlyState *this)
{
  return 5;
}

void non-virtual thunk to'SipSessionServerEarlyState::~SipSessionServerEarlyState(SipSessionServerEarlyState *this)
{
}

{
  uint64_t vars8;

  SipSessionState::~SipSessionState((SipSessionServerEarlyState *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<SipSessionServerCanceledState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4E48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionServerCanceledState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4E48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionServerCanceledState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<SipSessionServerTerminateAfterAckState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4E98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipSessionServerTerminateAfterAckState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C4E98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipSessionServerTerminateAfterAckState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void *std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C4EE8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C4EE8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C4EE8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C4EE8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5370678(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<SipSession::startRingingTimer(void)::$_0,std::allocator<SipSession::startRingingTimer(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C4F68;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C4F68;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C4F68;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C4F68;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5370920(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<SipSession::startRingbackTimer(void)::$_0,std::allocator<SipSession::startRingbackTimer(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C4FE8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C4FE8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C4FE8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C4FE8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5370BC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<SipSession::startPingTimer(void)::$_0,std::allocator<SipSession::startPingTimer(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5068;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5068;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C5068;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C5068;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5370E70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::handleTimer(std::string const&)::$_0,std::allocator<SipSession::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void *SipMessageEncodingMap::headerPrototype<SipReplacesHeader>(void *a1)
{
  uint64_t result = (void *)SipMessageEncodingMap::headerPrototypeWithName(a1, (uint64_t)"Replaces");
  if (result)
  {
  }
  return result;
}

void std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> const&,void>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x1D0uLL);
  std::__shared_ptr_emplace<SDPModel>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SDPModel> const&,std::allocator<SDPModel>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4 + 5, (uint64_t)(v4 + 3));
}

void sub_1C5370FA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SDPModel>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SDPModel> const&,std::allocator<SDPModel>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20B6750;
  std::construct_at[abi:ne180100]<SDPModel,std::shared_ptr<SDPModel> const&,SDPModel*>(a1 + 3, a2);
  return a1;
}

void sub_1C5371004(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::construct_at[abi:ne180100]<SDPModel,std::shared_ptr<SDPModel> const&,SDPModel*>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SDPModel::SDPModel(a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_1C5371074(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C50E8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C50E8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C50E8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C50E8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C53712D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::sendInvite(std::string const&)::$_0,std::allocator<SipSession::sendInvite(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void *std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5168;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5168;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C5168;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C5168;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C537157C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::sendLazuliInvite(std::string const&)::$_0,std::allocator<SipSession::sendLazuliInvite(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void *std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C51E8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C51E8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C51E8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C51E8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5371824(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<SipSession::startLocalQosTimerMO(void)::$_0,std::allocator<SipSession::startLocalQosTimerMO(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5268;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5268;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C5268;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C5268;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5371ACC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::sendInvite(SipRequest *,std::string const&)::$_0,std::allocator<SipSession::sendInvite(SipRequest *,std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void *std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C52E8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C52E8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C52E8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C52E8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5371D74(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::schedulePendingInvite(std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5368;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5368;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C5368;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C5368;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C537201C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::schedulePendingReinviteForTTY(void)::$_0,std::allocator<SipSession::schedulePendingReinviteForTTY(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C53E8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C53E8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C53E8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C53E8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C53722C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0,std::allocator<SipSession::handleInviteOrUpdateRequest(SipRequest const&,std::shared_ptr<SipServerTransaction>)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5480;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5480;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = &unk_1F20C5480;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C5480;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 112))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C537256C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0,std::allocator<SipSession::handleResponse(SipResponse const&,std::shared_ptr<SipClientTransaction>)::$_0>,void ()(std::string &)>::target_type()
{
}

void std::__shared_ptr_emplace<SipPrackHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C5500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipPrackHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C5500;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipPrackHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<SDPModel,std::allocator<SDPModel>,std::shared_ptr<SDPModel> &,void>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x1D0uLL);
  std::__shared_ptr_emplace<SDPModel>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SDPModel> &,std::allocator<SDPModel>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a2, v4 + 5, (uint64_t)(v4 + 3));
}

void sub_1C53726C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<SDPModel>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SDPModel> &,std::allocator<SDPModel>,0>(void *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20B6750;
  std::construct_at[abi:ne180100]<SDPModel,std::shared_ptr<SDPModel> &,SDPModel*>(a1 + 3, a2);
  return a1;
}

void sub_1C5372724(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::construct_at[abi:ne180100]<SDPModel,std::shared_ptr<SDPModel> &,SDPModel*>(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v5[0] = *a2;
  v5[1] = (uint64_t)v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SDPModel::SDPModel(a1, v5);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void sub_1C5372794(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void __cxx_global_array_dtor_0()
{
  for (uint64_t i = 0; i != -384; i -= 24)
  {
    if (*((char *)&_MergedGlobals_9 + i + 407) < 0) {
      operator delete(*(void **)((char *)&_MergedGlobals_9 + i + 384));
    }
  }
}

uint64_t _GLOBAL__sub_I_SipSession_cpp()
{
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  std::string::basic_string[abi:ne180100]<0>(&SipSession::kInviteTypeFakeNetworkBasedCallWaiting, "FakeNetworkBasedCallWaiting");
  __cxa_atexit(v0, &SipSession::kInviteTypeFakeNetworkBasedCallWaiting, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(SipSession::kInviteTypeAccessNetworkRefresh, "InviteTypeAccessNetworkRefresh");
  __cxa_atexit(v0, SipSession::kInviteTypeAccessNetworkRefresh, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&SipSession::kInviteTypeSessionRefresh, "InviteTypeSessionRefresh");
  __cxa_atexit(v0, &SipSession::kInviteTypeSessionRefresh, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(SipSession::kUpdateTypePreconditions, "UpdateTypePreconditions");
  __cxa_atexit(v0, SipSession::kUpdateTypePreconditions, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(_MergedGlobals_9, "UpdateTypeSessionRefresh");
  __cxa_atexit(v0, _MergedGlobals_9, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(SipSession::kUpdateTypeAccessNetworkRefresh, "UpdateTypeAccessNetworkRefresh");
  __cxa_atexit(v0, SipSession::kUpdateTypeAccessNetworkRefresh, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&SipSession::kUpdateTypeEmergencyLocationUpdate, "UpdateTypeEmergencyLocationUpdate");
  __cxa_atexit(v0, &SipSession::kUpdateTypeEmergencyLocationUpdate, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&SipSession::kPublishTypeEmergencyLocation, "PublishTypeEmergencyLocation");
  __cxa_atexit(v0, &SipSession::kPublishTypeEmergencyLocation, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDBE28, "Unknown");
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDBE28[3], "ClientInvite");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDBE58, "ClientReceivedTryingResponse");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDBE70, "ServerInvite");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDBE88, "ClientEarly");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDBEA0, "ServerEarly");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDBEB8, "Confirmed");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDBED0, "RttUpgradeRequested");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDBEE8, "ClientCanceled");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDBF00, "ServerCanceled");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDBF18, "SentBye");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDBF30, "ServerTerminateAfterAck");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDBF48, "SilentHangUp");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDBF60, "Terminated");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDBF78, "WPSCanceled");
  std::string::basic_string[abi:ne180100]<0>(qword_1EBBDBF90, "WPSNetworkTerminated");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_0, 0, &dword_1C51D1000);
}

void sub_1C5372B38(_Unwind_Exception *exception_object)
{
  while (1)
  {
    if (*((char *)v1 - 1) < 0) {
      operator delete((void *)*(v1 - 3));
    }
    v1 -= 3;
    if (v1 == qword_1EBBDBE28) {
      _Unwind_Resume(exception_object);
    }
  }
}

void XcapDocumentCommDiversion::XcapDocumentCommDiversion(XcapDocumentCommDiversion *this)
{
  unsigned __int8 v3 = 0;
  long long v4 = (char *)&v3;
  uint64_t v2 = (long long *)(std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v3, (uint64_t)&std::piecewise_construct, &v4)+ 5);
  *(void *)this = &unk_1F20C81E8;
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)this + 8, (long long *)&XcapDocumentCommDiversion::kName, v2);
  *((void *)this + 8) = &XcapDocumentCommDiversion::kName;
  *((void *)this + 9) = v2;
  *((unsigned char *)this + 80) = 1;
  *(void *)this = &unk_1F20C5640;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C56D8;
  XcapCDNoReplyTimer::XcapCDNoReplyTimer((XcapDocumentCommDiversion *)((char *)this + 88));
  *((void *)this + 20) = 0;
  *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *((void *)this + 22) = 0;
}

void sub_1C5372C58(_Unwind_Exception *a1)
{
  bambi::XmlTreeItem::~XmlTreeItem(v1);
  _Unwind_Resume(a1);
}

void XcapDocumentCommDiversion::~XcapDocumentCommDiversion(XcapDocumentCommDiversion *this)
{
  *(void *)this = &unk_1F20C5640;
  uint64_t v2 = (void **)((char *)this + 8);
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20C56D8;
  unsigned __int8 v3 = (void *)*((void *)this + 20);
  long long v4 = (void *)*((void *)this + 21);
  if (v3 != v4)
  {
    do
    {
      if (*v3) {
        (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      }
      ++v3;
    }
    while (v3 != v4);
    unsigned __int8 v3 = (void *)*((void *)this + 20);
  }
  if (v3)
  {
    *((void *)this + 2bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v3;
    operator delete(v3);
  }
  bambi::XmlTreeItem::~XmlTreeItem((void **)this + 12);
  bambi::XmlTreeItem::~XmlTreeItem(v2);
}

{
  uint64_t vars8;

  XcapDocumentCommDiversion::~XcapDocumentCommDiversion(this);
  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'XcapDocumentCommDiversion::~XcapDocumentCommDiversion(XcapDocumentCommDiversion *this)
{
}

{
  uint64_t vars8;

  XcapDocumentCommDiversion::~XcapDocumentCommDiversion((XcapDocumentCommDiversion *)((char *)this - 8));
  JUMPOUT(0x1C878E320);
}

uint64_t XcapDocumentCommDiversion::createChild(uint64_t a1, uint64_t a2)
{
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  uint64_t v3 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  int v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size_t size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v6 = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v7 = qword_1EBBDB360;
  if (byte_1EBBDB36F >= 0) {
    uint64_t v7 = byte_1EBBDB36F;
  }
  if (v6 != v7)
  {
LABEL_16:
    if (v6 == 4) {
      goto LABEL_40;
    }
    if (v6 != 7)
    {
LABEL_31:
      if (v6 != 12) {
        goto LABEL_38;
      }
      if ((v4 & 0x80) == 0)
      {
        if (v4)
        {
          p_s1 = &__s1;
          size_t v17 = "NoReplyTimer";
          while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v17)
          {
            p_s1 = (std::string *)((char *)p_s1 + 1);
            ++v17;
            if (!--v3) {
              goto LABEL_48;
            }
          }
LABEL_38:
          uint64_t v14 = 0;
          if ((v4 & 0x80) != 0)
          {
LABEL_53:
            unint64_t v15 = (void *)__s1.__r_.__value_.__r.__words[0];
            goto LABEL_54;
          }
          return v14;
        }
LABEL_48:
        uint64_t v14 = a1 + 88;
        if ((v4 & 0x80) != 0) {
          goto LABEL_53;
        }
        return v14;
      }
      unint64_t v15 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, "NoReplyTimer", size)) {
        goto LABEL_48;
      }
      goto LABEL_51;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
        return a1;
      }
      uint64_t v11 = &__s1;
      uint64_t v12 = "ruleset";
      uint64_t v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (v11->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v12)
      {
        uint64_t v11 = (std::string *)((char *)v11 + 1);
        ++v12;
        if (!--v13) {
          goto LABEL_23;
        }
      }
LABEL_30:
      if (v6 != 4) {
        goto LABEL_31;
      }
LABEL_40:
      if ((v4 & 0x80) != 0)
      {
        unint64_t v15 = (void *)__s1.__r_.__value_.__r.__words[0];
        if (memcmp(__s1.__r_.__value_.__l.__data_, "rule", size))
        {
LABEL_51:
          uint64_t v14 = 0;
          goto LABEL_54;
        }
      }
      else if (v4)
      {
        uint64_t v18 = &__s1;
        uint64_t v19 = "rule";
        uint64_t v20 = v3;
        while (v18->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v19)
        {
          uint64_t v18 = (std::string *)((char *)v18 + 1);
          ++v19;
          if (!--v20) {
            goto LABEL_52;
          }
        }
        goto LABEL_31;
      }
LABEL_52:
      operator new();
    }
    unint64_t v15 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_29;
  }
  if (byte_1EBBDB36F >= 0) {
    unint64_t v8 = &XcapDocumentCommDiversion::kName;
  }
  else {
    unint64_t v8 = (uint64_t *)XcapDocumentCommDiversion::kName;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    unint64_t v15 = (void *)__s1.__r_.__value_.__r.__words[0];
    if (!memcmp(__s1.__r_.__value_.__l.__data_, v8, __s1.__r_.__value_.__l.__size_)) {
      goto LABEL_46;
    }
    if (size != 7) {
      goto LABEL_30;
    }
LABEL_29:
    if (memcmp(v15, "ruleset", size)) {
      goto LABEL_30;
    }
LABEL_46:
    uint64_t v14 = a1;
LABEL_54:
    operator delete(v15);
    return v14;
  }
  if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
  {
    uint64_t v9 = &__s1;
    uint64_t v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    do
    {
      if (v9->__r_.__value_.__s.__data_[0] != *(unsigned __int8 *)v8) {
        goto LABEL_16;
      }
      uint64_t v9 = (std::string *)((char *)v9 + 1);
      unint64_t v8 = (uint64_t *)((char *)v8 + 1);
      --v10;
    }
    while (v10);
LABEL_23:
    uint64_t v14 = a1;
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v14;
    }
    goto LABEL_53;
  }
  return a1;
}

void sub_1C53730F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  MEMORY[0x1C878E320](v15, 0x10B3C405FE64821);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void XcapDocumentCommDiversion::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  uint64_t v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  int v7 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size_t size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = qword_1EBBDB360;
  if (byte_1EBBDB36F >= 0) {
    uint64_t v10 = byte_1EBBDB36F;
  }
  if (v9 == v10)
  {
    if (byte_1EBBDB36F >= 0) {
      uint64_t v11 = &XcapDocumentCommDiversion::kName;
    }
    else {
      uint64_t v11 = (uint64_t *)XcapDocumentCommDiversion::kName;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      size_t v17 = (const void *)__s1.__r_.__value_.__r.__words[0];
      if (!memcmp(__s1.__r_.__value_.__l.__data_, v11, __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_46;
      }
      if (size != 7) {
        goto LABEL_29;
      }
      goto LABEL_28;
    }
    if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
      goto LABEL_46;
    }
    p_s1 = &__s1;
    uint64_t v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v11)
    {
      p_s1 = (std::string *)((char *)p_s1 + 1);
      uint64_t v11 = (uint64_t *)((char *)v11 + 1);
      if (!--v13) {
        goto LABEL_46;
      }
    }
  }
  if (v9 == 4) {
    goto LABEL_37;
  }
  if (v9 != 7) {
    goto LABEL_30;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
      goto LABEL_46;
    }
    uint64_t v14 = &__s1;
    uint64_t v15 = "ruleset";
    uint64_t v16 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    while (v14->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v15)
    {
      uint64_t v14 = (std::string *)((char *)v14 + 1);
      ++v15;
      if (!--v16) {
        goto LABEL_46;
      }
    }
    goto LABEL_29;
  }
  size_t v17 = (const void *)__s1.__r_.__value_.__r.__words[0];
LABEL_28:
  if (!memcmp(v17, "ruleset", size)) {
    goto LABEL_46;
  }
LABEL_29:
  if (v9 != 4) {
    goto LABEL_30;
  }
LABEL_37:
  if ((v7 & 0x80) != 0)
  {
    uint64_t v23 = (void *)__s1.__r_.__value_.__r.__words[0];
    long long v24 = "rule";
LABEL_45:
    if (memcmp(v23, v24, size)) {
      goto LABEL_49;
    }
    goto LABEL_46;
  }
  if (!v7)
  {
LABEL_46:
    bambi::XmlParserItem::parseChild(a1, a2, a3);
    LOBYTE(v7) = *((unsigned char *)&__s1.__r_.__value_.__s + 23);
    goto LABEL_47;
  }
  uint64_t v20 = &__s1;
  long long v21 = "rule";
  uint64_t v22 = v6;
  while (v20->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v21)
  {
    uint64_t v20 = (std::string *)((char *)v20 + 1);
    ++v21;
    if (!--v22) {
      goto LABEL_46;
    }
  }
LABEL_30:
  if (v9 == 12)
  {
    if ((v7 & 0x80) == 0)
    {
      if (v7)
      {
        uint64_t v18 = &__s1;
        uint64_t v19 = "NoReplyTimer";
        while (v18->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v19)
        {
          uint64_t v18 = (std::string *)((char *)v18 + 1);
          ++v19;
          if (!--v6) {
            goto LABEL_46;
          }
        }
        goto LABEL_47;
      }
      goto LABEL_46;
    }
    uint64_t v23 = (void *)__s1.__r_.__value_.__r.__words[0];
    long long v24 = "NoReplyTimer";
    goto LABEL_45;
  }
LABEL_47:
  if ((v7 & 0x80) == 0) {
    return;
  }
  uint64_t v23 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_49:
  operator delete(v23);
}

void sub_1C537336C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void XcapDocumentCommDiversion::constructTree(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  bambi::XmlTreeItem::makeNode(a1);
}

void sub_1C53737A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,std::__shared_weak_count *a21,void *__p,std::__shared_weak_count *a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  std::ostringstream::~ostringstream((uint64_t)&a30);
  long long v32 = *(std::__shared_weak_count **)(v30 + 8);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'XcapDocumentCommDiversion::constructTree(void *a1@<X8>)
{
}

uint64_t XcapDocumentCommDiversion::asString@<X0>(XcapDocumentCommDiversion *this@<X0>, void *a2@<X8>)
{
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  long long v17 = 0u;
  long long v18 = 0u;
  *(_OWORD *)std::string __p = 0u;
  memset(v15, 0, sizeof(v15));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"CDIV Document: ", 15);
  int v4 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)", Rules: ", 9);
  uint64_t v5 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(void *)(*v5 - 24)));
  uint64_t v6 = std::locale::use_facet(&v12, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v12);
  std::ostream::put();
  std::ostream::flush();
  unint64_t v8 = (XcapCDRule **)*((void *)this + 20);
  for (uint64_t i = (XcapCDRule **)*((void *)this + 21); v8 != i; ++v8)
  {
    XcapCDRule::asString(*v8, &v12);
    if ((v14 & 0x80u) == 0) {
      locale = &v12;
    }
    else {
      locale = v12.__locale_;
    }
    if ((v14 & 0x80u) == 0) {
      uint64_t v10 = v14;
    }
    else {
      uint64_t v10 = v13;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)locale, v10);
    if ((char)v14 < 0) {
      operator delete(v12.__locale_);
    }
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15 + 8, a2);
  *(void *)&v15[0] = *MEMORY[0x1E4FBA418];
  *(void *)((char *)v15 + *(void *)(*(void *)&v15[0] - MsrpTransportTcp::connectionResetByPeer((MsrpTransportTcp *)((char *)this - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  *((void *)&v15[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = MEMORY[0x1E4FBA470] + 16;
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C878E270](v19);
}

void sub_1C5373AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t XcapDocumentCommDiversion::findRuleById(uint64_t *a1, uint64_t *a2, unsigned __int8 **a3)
{
  if (a1 != a2)
  {
    for (uint64_t i = a1; i != a2; ++i)
    {
      uint64_t v6 = *i;
      if (*(char *)(*i + 87) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 64), *(void *)(v6 + 72));
      }
      else {
        std::string __p = *(std::string *)(v6 + 64);
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      unint64_t v8 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
      int v9 = (char)v8;
      if ((char)v8 < 0) {
        unint64_t v8 = a3[1];
      }
      if ((unsigned __int8 *)size == v8)
      {
        if (v9 >= 0) {
          uint64_t v10 = (unsigned __int8 *)a3;
        }
        else {
          uint64_t v10 = *a3;
        }
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          uint64_t v15 = (void *)__p.__r_.__value_.__r.__words[0];
          int v16 = memcmp(__p.__r_.__value_.__l.__data_, v10, __p.__r_.__value_.__l.__size_);
          operator delete(v15);
          if (!v16) {
            return v6;
          }
        }
        else
        {
          if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
            return v6;
          }
          uint64_t v11 = 0;
          do
          {
            int v12 = __p.__r_.__value_.__s.__data_[v11];
            int v13 = v10[v11];
          }
          while (v12 == v13 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v11++);
          if (v12 == v13) {
            return v6;
          }
        }
      }
      else if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  return 0;
}

uint64_t XcapDocumentCommDiversion::findRuleForCondition(uint64_t a1, int a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 160);
  uint64_t v3 = *(uint64_t **)(a1 + 168);
  if (v2 == v3) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    uint64_t v6 = *v2;
    uint64_t v8 = *(void *)(*v2 + 88);
    int v7 = *(std::__shared_weak_count **)(*v2 + 96);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v8 && *(unsigned __int8 *)(v8 + 64) == a2) {
      uint64_t v5 = v6;
    }
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    ++v2;
  }
  while (v2 != v3);
  return v5;
}

void XcapDocumentCommDiversion::addRule(XcapDocumentCommDiversion *this, const XcapCDRule *a2)
{
}

void *XcapDocumentCommDiversion::deleteRule(void *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    uint64_t v3 = result[20];
    int v4 = (void *)result[21];
    if ((void *)v3 != v4)
    {
      uint64_t v5 = -v3;
      while (*(void *)v3 != a2)
      {
        v3 += 8;
        v5 -= 8;
        if ((void *)v3 == v4) {
          return result;
        }
      }
      uint64_t result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 8))(a2);
      uint64_t v6 = -v5;
      int v7 = (const void *)(8 - v5);
      size_t v8 = v2[21] - (8 - v5);
      if (v8) {
        uint64_t result = memmove((void *)v6, v7, v8);
      }
      v2[21] = v6 + v8;
    }
  }
  return result;
}

void XcapDocumentCommDiversion::getItemForPath(uint64_t a1@<X0>, std::string **a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5 = *a2;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3) <= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, 0);
    return;
  }
  memset(&v24, 0, sizeof(v24));
  XcapNs::stripXcapNs((uint64_t)v5, &v24);
  uint64_t v7 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v24.__r_.__value_.__l.__size_;
  }
  if (size != 7) {
    goto LABEL_43;
  }
  if ((*((unsigned char *)&v24.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (*((unsigned char *)&v24.__r_.__value_.__s + 23))
    {
      int v9 = &v24;
      uint64_t v10 = "ruleset";
      while (v9->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
      {
        int v9 = (std::string *)((char *)v9 + 1);
        ++v10;
        if (!--v7) {
          goto LABEL_16;
        }
      }
      goto LABEL_43;
    }
LABEL_16:
    memset(v23, 0, sizeof(v23));
    if (ims::tokenize(*a2 + 1, v23, 0x22u) != 3)
    {
LABEL_42:
      v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
      goto LABEL_43;
    }
    memset(&v22, 0, sizeof(v22));
    if (*(char *)(v23[0] + 47) < 0) {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)(v23[0] + 24), *(void *)(v23[0] + 32));
    }
    else {
      std::string v22 = *(std::string *)(v23[0] + 24);
    }
    uint64_t RuleById = XcapDocumentCommDiversion::findRuleById(*(uint64_t **)(a1 + 160), *(uint64_t **)(a1 + 168), (unsigned __int8 **)&v22);
    uint64_t v12 = RuleById;
    if (!RuleById)
    {
LABEL_40:
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      goto LABEL_42;
    }
    int v13 = *a2;
    if ((char *)a2[1] - (char *)*a2 == 48)
    {
      bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)(RuleById + 8), 1, 0, a3);
LABEL_23:
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v22.__r_.__value_.__l.__data_);
      }
      v22.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
      goto LABEL_44;
    }
    memset(&__s1, 0, sizeof(__s1));
    XcapNs::stripXcapNs((uint64_t)&v13[2], &__s1);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v14 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v14 = __s1.__r_.__value_.__l.__size_;
    }
    if (v14 != 10) {
      goto LABEL_36;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      long long v18 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, "conditions", __s1.__r_.__value_.__l.__size_))
      {
LABEL_39:
        operator delete(v18);
        goto LABEL_40;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      int v16 = "conditions";
      uint64_t v17 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v16)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v16;
        if (!--v17) {
          goto LABEL_47;
        }
      }
LABEL_36:
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_40;
      }
      long long v18 = (void *)__s1.__r_.__value_.__r.__words[0];
      goto LABEL_39;
    }
LABEL_47:
    uint64_t v19 = *(void *)(v12 + 88);
    uint64_t v20 = *(std::__shared_weak_count **)(v12 + 96);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)(v19 + 8), 1, 0, a3);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s1.__r_.__value_.__l.__data_);
    }
    goto LABEL_23;
  }
  if (!memcmp(v24.__r_.__value_.__l.__data_, "ruleset", v24.__r_.__value_.__l.__size_)) {
    goto LABEL_16;
  }
LABEL_43:
  std::string::basic_string[abi:ne180100]<0>(a3, 0);
LABEL_44:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_1C5374150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  a16 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (*(char *)(v24 - 33) < 0) {
    operator delete(*(void **)(v24 - 56));
  }
  _Unwind_Resume(a1);
}

uint64_t XcapDocumentCommDiversion::setItemForPath(uint64_t a1, std::string **a2, bambi::XmlParser *a3)
{
  int v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 == v5) {
    return 0;
  }
  if ((char *)v5 - (char *)v4 != 24)
  {
    memset(&v41, 0, sizeof(v41));
    XcapNs::stripXcapNs((uint64_t)v4, &v41);
    uint64_t v13 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v41.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v41.__r_.__value_.__l.__size_;
    }
    if (size != 7) {
      goto LABEL_57;
    }
    if ((*((unsigned char *)&v41.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(v41.__r_.__value_.__l.__data_, "ruleset", v41.__r_.__value_.__l.__size_)) {
        goto LABEL_57;
      }
    }
    else if (*((unsigned char *)&v41.__r_.__value_.__s + 23))
    {
      uint64_t v15 = &v41;
      int v16 = "ruleset";
      while (v15->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v16)
      {
        uint64_t v15 = (std::string *)((char *)v15 + 1);
        ++v16;
        if (!--v13) {
          goto LABEL_28;
        }
      }
      goto LABEL_57;
    }
LABEL_28:
    memset(v40, 0, sizeof(v40));
    if (ims::tokenize(*a2 + 1, v40, 0x22u) != 3)
    {
LABEL_56:
      *(void *)&long long v34 = v40;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      goto LABEL_57;
    }
    memset(&v39, 0, sizeof(v39));
    if (*(char *)(v40[0] + 47) < 0) {
      std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(v40[0] + 24), *(void *)(v40[0] + 32));
    }
    else {
      std::string v39 = *(std::string *)(v40[0] + 24);
    }
    uint64_t RuleById = XcapDocumentCommDiversion::findRuleById(*(uint64_t **)(a1 + 160), *(uint64_t **)(a1 + 168), (unsigned __int8 **)&v39);
    uint64_t v20 = *a2;
    if ((char *)a2[1] - (char *)*a2 == 48)
    {
      bzero(&v34, 0x208uLL);
      XcapCDRule::XcapCDRule((XcapCDRule *)&v34);
      if (bambi::XmlParser::parseXml(a3, (uint64_t)&v34, v21, v22))
      {
        XcapDocumentCommDiversion::deleteRule((void *)a1, RuleById);
        XcapDocumentCommDiversion::addRule((XcapDocumentCommDiversion *)a1, (const XcapCDRule *)&v34);
      }
      XcapCDRule::~XcapCDRule((XcapCDRule *)&v34);
      goto LABEL_54;
    }
    memset(&__s1, 0, sizeof(__s1));
    XcapNs::stripXcapNs((uint64_t)&v20[2], &__s1);
    uint64_t v23 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    char v24 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v25 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v25 = __s1.__r_.__value_.__l.__size_;
    }
    if (v25 != 10) {
      goto LABEL_51;
    }
    if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v28 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, "conditions", __s1.__r_.__value_.__l.__size_)) {
        goto LABEL_53;
      }
    }
    else if (*((unsigned char *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      long long v27 = "conditions";
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v27)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v27;
        if (!--v23) {
          goto LABEL_48;
        }
      }
      goto LABEL_51;
    }
LABEL_48:
    uint64_t v38 = 0;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    XcapCDCondition::XcapCDCondition((XcapCDCondition *)&v34);
    if (bambi::XmlParser::parseXml(a3, (uint64_t)&v34, v29, v30))
    {
      v32[0] = 0;
      v32[1] = 0;
      _ZNSt3__115allocate_sharedB8ne180100I15XcapCDConditionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v32);
      XcapCDCondition::clone((XcapCDCondition *)&v34);
    }
    bambi::XmlTreeItem::~XmlTreeItem((void **)&v34 + 1);
    char v24 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
LABEL_51:
    if ((v24 & 0x80) == 0) {
      goto LABEL_54;
    }
    long long v28 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_53:
    operator delete(v28);
LABEL_54:
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    goto LABEL_56;
  }
  memset(&v41, 0, sizeof(v41));
  XcapNs::stripXcapNs((uint64_t)v4, &v41);
  uint64_t v7 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  if ((v41.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v8 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v8 = v41.__r_.__value_.__l.__size_;
  }
  if (v8 != 12) {
    goto LABEL_57;
  }
  if ((*((unsigned char *)&v41.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v41.__r_.__value_.__l.__data_, "NoReplyTimer", v41.__r_.__value_.__l.__size_)) {
      goto LABEL_57;
    }
  }
  else if (*((unsigned char *)&v41.__r_.__value_.__s + 23))
  {
    int v9 = &v41;
    uint64_t v10 = "NoReplyTimer";
    while (v9->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
    {
      int v9 = (std::string *)((char *)v9 + 1);
      ++v10;
      if (!--v7) {
        goto LABEL_25;
      }
    }
    goto LABEL_57;
  }
LABEL_25:
  uint64_t v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  XcapCDNoReplyTimer::XcapCDNoReplyTimer((XcapCDNoReplyTimer *)&v34);
  if (bambi::XmlParser::parseXml(a3, (uint64_t)&v34, v17, v18))
  {
    *(_DWORD *)(a1 + 152) = v38;
    bambi::XmlTreeItem::~XmlTreeItem((void **)&v34 + 1);
    uint64_t v11 = 1;
    goto LABEL_58;
  }
  bambi::XmlTreeItem::~XmlTreeItem((void **)&v34 + 1);
LABEL_57:
  uint64_t v11 = 0;
LABEL_58:
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v41.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_1C53745E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19)
{
  bambi::XmlTreeItem::~XmlTreeItem(&a19);
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 - 105) < 0) {
    operator delete(*(void **)(v19 - 128));
  }
  a18 = v19 - 104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (*(char *)(v19 - 57) < 0) {
    operator delete(*(void **)(v19 - 80));
  }
  _Unwind_Resume(a1);
}

void XcapCDRule::~XcapCDRule(XcapCDRule *this)
{
  *(void *)this = &unk_1F20CFFF0;
  uint64_t v2 = (void **)((char *)this + 8);
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20D0068;
  SipUri::~SipUri((XcapCDRule *)((char *)this + 112));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  bambi::XmlTreeItem::~XmlTreeItem(v2);
}

{
  void **v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_1F20CFFF0;
  uint64_t v2 = (void **)((char *)this + 8);
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &unk_1F20D0068;
  SipUri::~SipUri((XcapCDRule *)((char *)this + 112));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(*((void **)this + 8));
  }
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  JUMPOUT(0x1C878E320);
}

void std::shared_ptr<XcapCDCondition>::reset[abi:ne180100]<XcapCDCondition,void>()
{
}

void sub_1C53747B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void XcapDocumentCommDiversion::clone(XcapDocumentCommDiversion *this)
{
}

void sub_1C5374BB0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 112) = v3;
  uint64_t v6 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 168) = v6;
    operator delete(v6);
  }
  bambi::XmlTreeItem::~XmlTreeItem((void **)(v1 + 96));
  bambi::XmlTreeItem::~XmlTreeItem(v4);
  MEMORY[0x1C878E320](v1, 0x10F3C403C81E1ECLL);
  _Unwind_Resume(a1);
}

void std::vector<XcapCDRule *>::__throw_length_error[abi:ne180100]()
{
}

void *_ZNSt3__115allocate_sharedB8ne180100I15XcapCDConditionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceI15XcapCDConditionNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1C5374C98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceI15XcapCDConditionNS_9allocatorIS1_EEEC2B8ne180100IJES3_Li0EEES3_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1F20C57E0;
  XcapCDCondition::XcapCDCondition((XcapCDCondition *)(a1 + 3));
  return a1;
}

void sub_1C5374CF4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<XcapCDCondition>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C57E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<XcapCDCondition>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C57E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<XcapCDCondition>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_pointer<XcapCDCondition *,std::shared_ptr<XcapCDCondition>::__shared_ptr_default_delete<XcapCDCondition,XcapCDCondition>,std::allocator<XcapCDCondition>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_pointer<XcapCDCondition *,std::shared_ptr<XcapCDCondition>::__shared_ptr_default_delete<XcapCDCondition,XcapCDCondition>,std::allocator<XcapCDCondition>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<XcapCDCondition *,std::shared_ptr<XcapCDCondition>::__shared_ptr_default_delete<XcapCDCondition,XcapCDCondition>,std::allocator<XcapCDCondition>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t _GLOBAL__sub_I_XcapDocumentCommDiversion_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&XcapDocumentCommDiversion::kName, "communication-diversion");
  uint64_t v0 = (void (*)(void *))MEMORY[0x1E4FBA210];
  return __cxa_atexit(v0, &XcapDocumentCommDiversion::kName, &dword_1C51D1000);
}

void RTCPReceiverReport::packetize(RTCPReceiverReport *this@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<unsigned int>::resize(a2, 6uLL);
  std::vector<unsigned int>::pointer begin = a2->__begin_;
  *std::vector<unsigned int>::pointer begin = bswap32(*(_DWORD *)this);
  begin[1] = *((_DWORD *)this + 2) | (*((unsigned __int8 *)this + 4) << 24);
  begin[2] = bswap32(*((_DWORD *)this + 3));
  begin[3] = bswap32(*((_DWORD *)this + 4));
  begin[4] = bswap32(*((_DWORD *)this + 5));
  begin[5] = bswap32(*((_DWORD *)this + 6));
}

void sub_1C5374F3C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

void RTCPReceiverReports::addReport(void **a1, long long *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (((char *)v7 - (unsigned char *)*a1) >> 2);
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) > 0x924924924924924) {
      std::vector<RTCPReceiverReport>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - (void)*a1) >> 2);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x492492492492492) {
      unint64_t v13 = 0x924924924924924;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      std::string::size_type v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPReceiverReport>>(v4, v13);
    }
    else {
      std::string::size_type v14 = 0;
    }
    uint64_t v15 = &v14[28 * v10];
    int v16 = &v14[28 * v13];
    long long v17 = *a2;
    *(_OWORD *)(v15 + 12) = *(long long *)((char *)a2 + 12);
    *(_OWORD *)uint64_t v15 = v17;
    int v9 = v15 + 28;
    uint64_t v19 = (char *)*a1;
    long long v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 28);
        *((_OWORD *)v15 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = *((_OWORD *)v18 - 1);
        *(_OWORD *)(v15 - 28) = v20;
        v15 -= 28;
        v18 -= 28;
      }
      while (v18 != v19);
      long long v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v8 = *a2;
    *(_OWORD *)((char *)v7 + 12) = *(long long *)((char *)a2 + 12);
    *uint64_t v7 = v8;
    int v9 = (char *)v7 + 28;
  }
  a1[1] = v9;
}

void RTCPReceiverReports::packetize(RTCPReceiverReports *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  std::vector<unsigned int>::size_type v2 = *(_OWORD **)this;
  uint64_t v3 = (_OWORD *)*((void *)this + 1);
  if (*(_OWORD **)this != v3)
  {
    do
    {
      v6[0] = *v2;
      *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)v2 + 12);
      memset(&__p, 0, sizeof(__p));
      RTCPReceiverReport::packetize((RTCPReceiverReport *)v6, &__p);
      std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>((std::vector<unsigned int> *)a2, *(void *)(a2 + 8), (char *)__p.__begin_, (char *)__p.__end_, __p.__end_ - __p.__begin_);
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      std::vector<unsigned int>::size_type v2 = (_OWORD *)((char *)v2 + 28);
    }
    while (v2 != v3);
  }
}

void sub_1C5375164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  unint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *RTCPReceiverReports::toStream(RTCPReceiverReports *this, ImsOutStream *a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *((void *)this + 1);
  while (v3 != v4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" SSRC: ", 7);
    *((unsigned char *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" Fraction lost: ", 16);
    *((unsigned char *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" Packets lost: ", 15);
    *((unsigned char *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" Max Sequence Number: ", 22);
    *((unsigned char *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" Jitter: ", 9);
    *((unsigned char *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" Last SR: ", 10);
    *((unsigned char *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)" Delay since last SR: ", 22);
    *((unsigned char *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
    v3 += 28;
  }
  return a2;
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  unint64_t v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      std::string::size_type v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)p_end_cap, v13);
      std::vector<unsigned int>::pointer begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      std::string::size_type v14 = 0;
    }
    uint64_t v15 = &v14[4 * v11];
    int v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    long long v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::vector<RTCPReceiverReport>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<RTCPReceiverReport>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x924924924924925) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(28 * a2);
}

unsigned int *std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(std::vector<unsigned int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = (unsigned int *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = (unsigned int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  unint64_t v10 = value;
  unint64_t v12 = *((void *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    std::vector<unsigned int>::pointer begin = a1->__begin_;
    unint64_t v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62) {
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)begin) >> 2;
    uint64_t v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17) {
      int v18 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)p_end_cap, v17);
    }
    else {
      int v18 = 0;
    }
    long long v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[a5];
    do
    {
      unsigned int v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    unint64_t v5 = std::vector<unsigned int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_) {
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
    }
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    uint64_t v21 = &__src[4 * a5];
    uint64_t v23 = (unsigned int *)*((void *)p_end_cap - 1);
LABEL_17:
    char v24 = &v5[a5];
    std::string::size_type v25 = &v23[-a5];
    long long v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      long long v26 = v23;
      do
      {
        unsigned int v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24) {
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    }
    if (v21 != (char *)v7) {
      memmove(v5, v7, v21 - (char *)v7);
    }
    return v5;
  }
  uint64_t v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (unsigned int *)(v12 + v22);
  a1->__end_ = (std::vector<unsigned int>::pointer)(v12 + v22);
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_1C53756B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int>::pointer std::vector<unsigned int>::__swap_out_circular_buffer(std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  std::vector<unsigned int>::pointer begin = __v->__begin_;
  std::vector<unsigned int>::pointer v6 = this->__begin_;
  uint64_t v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<unsigned int>::pointer v8 = __p;
    uint64_t v7 = __v->__begin_;
    do
    {
      unsigned int v9 = *--v8;
      *--uint64_t v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  std::__split_buffer<unsigned int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    uint64_t v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  unint64_t v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  unint64_t v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void SipSecurityClientHeader::~SipSecurityClientHeader(SipSecurityClientHeader *this)
{
  SipPolymorphicVectorHeader<SipSecurityMechanism>::~SipPolymorphicVectorHeader(this);
  JUMPOUT(0x1C878E320);
}

void SipSecurityClientHeader::clone(SipSecurityClientHeader *this)
{
}

void sub_1C5375850(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x1093C40888A45CFLL);
  _Unwind_Resume(a1);
}

uint64_t std::vector<unsigned int>::~vector[abi:ne180100](uint64_t a1)
{
  std::vector<unsigned int>::size_type v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void SipTransportLayer::State::~State(void **this)
{
  *this = &unk_1F20C5BE0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_1F20C5BE0;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  JUMPOUT(0x1C878E320);
}

void SipTransportLayer::IncomingMessageList::clear(SipTransportLayer::IncomingMessageList *this)
{
  std::__list_imp<unsigned long long>::clear((void *)this + 4);
  std::vector<unsigned int>::size_type v2 = *(uint64_t ***)this;
  if (v2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    PowerAssertionLock::deinitialize(v2, (uint64_t)__p);
    if (v4 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_1C537595C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipTransportLayer::IncomingMessageList::add(SipTransportLayer::IncomingMessageList *this, IncomingSipMessage *a2)
{
  char v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4)
  {
    unint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5) {
      uint64_t v6 = *((void *)this + 2);
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v5 = 0;
  }
  if (!*((void *)this + 6))
  {
    uint64_t v7 = *(uint64_t ***)this;
    if (*(void *)this && v6 != 0)
    {
      unsigned int v9 = (ims::AccessNetwork *)(v6 + 3160);
      BOOL isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v6 + 3160));
      uint64_t v11 = *((unsigned __int8 *)a2 + 56);
      BOOL v12 = ims::AccessNetwork::isWifi(v9);
      SipTransportLayer::assertionStringForCategory((uint64_t)__p, v11, v12);
      uint64_t v19 = __p;
      unint64_t v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, __p, (uint64_t)&std::piecewise_construct, (long long **)&v19);
      AssertionCounter::initialize((atomic_uint *)v13[7], 300.0, !isWifi, (uint64_t)v18);
      ImsResult::~ImsResult((ImsResult *)v18);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  unint64_t v14 = operator new(0x18uLL);
  v14[1] = (char *)this + 32;
  void v14[2] = a2;
  uint64_t v15 = *((void *)this + 4);
  *unint64_t v14 = v15;
  *(void *)(v15 + 8) = v14;
  *((void *)this + 4) = v14;
  ++*((void *)this + 6);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_1C5375AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void SipTransportLayer::assertionStringForCategory(uint64_t a1, uint64_t a2, int a3)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  if (a3) {
    uint64_t v3 = ".wifi";
  }
  else {
    uint64_t v3 = ".cell";
  }
  std::string::basic_string[abi:ne180100]<0>(__p, v3);
  std::operator+<char>();
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C5375B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipTransportLayer::isEmergency(SipTransportLayer *this)
{
  std::vector<unsigned int>::size_type v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    BOOL v5 = *(unsigned __int8 *)(v4 + 176) != 0;
  }
  else {
    BOOL v5 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v5;
}

uint64_t SipTransportLayer::userAgent(SipTransportLayer *this)
{
  std::vector<unsigned int>::size_type v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 1);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 144);
  }
  else {
    uint64_t v5 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v5;
}

uint64_t SipTransportLayer::messageEncoding(SipTransportLayer *this)
{
  uint64_t result = SipTransportLayer::userAgent(this);
  if (result) {
    return SipTransportLayer::userAgent(this) + 288;
  }
  return result;
}

void SipTransportLayer::dumpMessage(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  unint64_t v14 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  if (!(void)xmmword_1EA3D5530)
  {
    ctu::XpcJetsamAssertion::create_default_global((uint64_t *)&v31, v14);
    long long v15 = v31;
    long long v31 = 0uLL;
    uint64_t v16 = (std::__shared_weak_count *)*((void *)&xmmword_1EA3D5530 + 1);
    xmmword_1EA3D5530 = v15;
    if (v16)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      if (*((void *)&v31 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
      }
    }
  }
  char v17 = (std::__shared_weak_count *)*((void *)&xmmword_1EA3D5530 + 1);
  if (*((void *)&xmmword_1EA3D5530 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_1EA3D5530 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  std::string::basic_string[abi:ne180100]<0>(&v35, "sipDump");
  ctu::XpcJetsamAssertion::createActivity();
  if (v36 < 0) {
    operator delete(v35);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  int v18 = (std::__shared_weak_count *)a1[2];
  if (v18)
  {
    uint64_t v19 = (ims *)std::__shared_weak_count::lock(v18);
    if (v19)
    {
      uint64_t v20 = a1[1];
      if (v20)
      {
        uint64_t v29 = v19;
        uint64_t v21 = *(void *)(v20 + 136);
        uint64_t v22 = *(void *)(v21 + 272);
        if (v22)
        {
          uint64_t v23 = (*(uint64_t (**)(void *))(*a1 + 72))(a1);
          uint64_t v19 = (ims *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)v22 + 24))(v22, v21, a2, a6, a7, a8, a9, v23);
        }
        memset(&v34, 0, sizeof(v34));
        uint64_t v24 = ims::logger(v19);
        std::string::basic_string[abi:ne180100]<0>(&v31, "sip.dump");
        if (*(char *)(v20 + 4183) < 0) {
          std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v20 + 4160), *(void *)(v20 + 4168));
        }
        else {
          std::string v30 = *(std::string *)(v20 + 4160);
        }
        ImsLogger::getFacilityWithStackTag(v24, (uint64_t)&v31, (uint64_t)&v30, &v34);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
        if (SBYTE7(v32) < 0) {
          operator delete((void *)v31);
        }
        uint64_t v26 = ims::logger(v25);
        uint64_t v27 = ImsLogger::facilityWithName(v26, (unsigned __int8 *)&v34, 0);
        uint64_t v28 = v26 + 96;
        if (v27) {
          uint64_t v28 = v27;
        }
        if (*(int *)(v28 + 80) >= 7)
        {
          uint64_t v33 = 0;
          long long v31 = 0u;
          long long v32 = 0u;
          ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v31);
        }
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v34.__r_.__value_.__l.__data_);
        }
        uint64_t v19 = v29;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19);
    }
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
}

void sub_1C537669C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a40);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a49);
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)&a58);
  if (*(char *)(v63 - 233) < 0) {
    operator delete(*(void **)(v63 - 256));
  }
  if (*(char *)(v63 - 209) < 0) {
    operator delete(*(void **)(v63 - 232));
  }
  ImsStringOutStream::~ImsStringOutStream((ImsStringOutStream *)(v63 - 208));
  if (*(char *)(v63 - 137) < 0) {
    operator delete(*(void **)(v63 - 160));
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  if (*(void *)(v63 - 104)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)(v63 - 104));
  }
  _Unwind_Resume(a1);
}

void sub_1C5376890()
{
  if (*(char *)(v0 - 113) < 0) {
    operator delete(*(void **)(v0 - 136));
  }
  JUMPOUT(0x1C537687CLL);
}

void sub_1C53768A8()
{
}

void SipTransportLayer::SipTransportLayer(uint64_t a1, std::string::size_type *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  std::string::size_type v4 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    __str.__r_.__value_.__l.__size_ = 0;
  }
  __str.__r_.__value_.__r.__words[0] = v4;
  SipStackLayer::SipStackLayer((void *)a1, (uint64_t *)&__str);
  if (__str.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
  }
  *(void *)a1 = &unk_1F20C5C28;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)(a1 + 24) = &unk_1F20C5D08;
  *(void *)(a1 + 32) = &unk_1F20C5D30;
  std::string::basic_string[abi:ne180100]<0>(&__str, "sip.tport");
  std::string::size_type v6 = *a2;
  if (*a2)
  {
    if (*(char *)(v6 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v6 + 4160), *(void *)(v6 + 4168));
    }
    else {
      std::string v15 = *(std::string *)(v6 + 4160);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "");
  }
  ImsLogContainer::ImsLogContainer(a1 + 40, &__str, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)a1 = &unk_1F20C58E0;
  *(void *)(a1 + 24) = &unk_1F20C59F8;
  *(void *)(a1 + 32) = &unk_1F20C5A20;
  *(void *)(a1 + 40) = &unk_1F20C5A48;
  *(void *)(a1 + 144) = &unk_1F20C5AA8;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 152) = &unk_1F20C5AD8;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = &unk_1F20C5BE0;
  uint64_t v7 = (std::string *)(a1 + 240);
  if (byte_1EBBDC017 < 0)
  {
    std::string::__init_copy_ctor_external(v7, (const std::string::value_type *)xmmword_1EBBDC000, *((std::string::size_type *)&xmmword_1EBBDC000 + 1));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = xmmword_1EBBDC000;
    *(void *)(a1 + 256) = unk_1EBBDC010;
  }
  SipUri::SipUri((SipUri *)(a1 + 288));
  *(void *)(a1 + 696) = &unk_1F20E5228;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(void *)(a1 + 752) = &unk_1F20E5228;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 808));
  *(void *)(a1 + 976) = 0;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_DWORD *)(a1 + 1112) = 1065353216;
  SipUri::SipUri((SipUri *)(a1 + 1120));
  SipUri::SipUri((SipUri *)(a1 + 1528));
  *(void *)(a1 + 280) = 0;
  long long v8 = 0uLL;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)(a1 + 1968) = 0u;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 2000) = 0u;
  *(_WORD *)(a1 + 2016) = 0;
  unsigned int v9 = *(std::__shared_weak_count **)(a1 + 1000);
  *(_OWORD *)(a1 + 992) = 0u;
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    long long v8 = 0uLL;
  }
  unint64_t v10 = *(std::__shared_weak_count **)(a1 + 1016);
  *(_OWORD *)(a1 + 1008) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 1032);
  long long v12 = 0uLL;
  *(_OWORD *)(a1 + 1024) = 0u;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    long long v12 = 0uLL;
  }
  unint64_t v13 = *(std::__shared_weak_count **)(a1 + 1048);
  *(_OWORD *)(a1 + 1040) = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  *(_DWORD *)(a1 + 952) = 0;
  *(void *)(a1 + 912) = a1 + 144;
  std::string::basic_string[abi:ne180100]<0>(&__str, "sip.tport");
  std::string::size_type v14 = *a2;
  if (*(char *)(*a2 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v14 + 4160), *(void *)(v14 + 4168));
  }
  else {
    std::string v15 = *(std::string *)(v14 + 4160);
  }
  std::string::operator=((std::string *)(a1 + 856), &__str);
  std::string::operator=((std::string *)(a1 + 880), &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_1C5377018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, SipUri *a10, SipUri *a11, uint64_t a12, SipTimerContainer *a13, SipRouteSet *a14, SipRouteSet *a15, SipUri *a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 121) < 0) {
    operator delete(*(void **)(v35 - 144));
  }
  std::deque<SipUri>::~deque[abi:ne180100]((void *)(v34 + 1968));
  uint64_t v37 = *(std::__shared_weak_count **)(v34 + 1960);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  SipUri::~SipUri(a10);
  SipUri::~SipUri(a11);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a12);
  uint64_t v38 = *(std::__shared_weak_count **)(v34 + 1048);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  std::string v39 = *(std::__shared_weak_count **)(v34 + 1032);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  long long v40 = *(std::__shared_weak_count **)(v34 + 1016);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  std::string v41 = *(std::__shared_weak_count **)(v34 + 1000);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (*(char *)(v34 + 983) < 0) {
    operator delete(*(void **)(v34 + 960));
  }
  SipTimerContainer::~SipTimerContainer(a13);
  SipRouteSet::~SipRouteSet(a14);
  SipRouteSet::~SipRouteSet(a15);
  SipUri::~SipUri(a16);
  *(void *)(v34 + 232) = a17;
  if (*(char *)(v34 + 263) < 0) {
    operator delete(*a18);
  }
  std::__tree<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>>>::destroy(*(void **)(v34 + 208));
  std::__tree<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>>>::destroy(*(void **)(v34 + 184));
  long long v42 = *(std::__shared_weak_count **)(v34 + 168);
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  ImsLogContainer::~ImsLogContainer(v33);
  *(void *)uint64_t v34 = &unk_1F20BC510;
  long long v43 = *(std::__shared_weak_count **)(v34 + 16);
  if (v43) {
    std::__shared_weak_count::__release_weak(v43);
  }
  _Unwind_Resume(a1);
}

void SipTransportLayer::~SipTransportLayer(SipTransportLayer *this)
{
  *(void *)this = &unk_1F20C58E0;
  *((void *)this + 3) = &unk_1F20C59F8;
  *((void *)this + 4) = &unk_1F20C5A20;
  *((void *)this + 5) = &unk_1F20C5A48;
  *((void *)this + 18) = &unk_1F20C5AA8;
  *((void *)this + 19) = &unk_1F20C5AD8;
  SipTransportLayer::dropDeferredIncomingMessages(this);
  SipTransportLayer::closeTransports(this);
  if (*((char *)this + 983) < 0) {
    uint64_t v2 = *((void *)this + 121);
  }
  else {
    uint64_t v2 = *((unsigned __int8 *)this + 983);
  }
  if (v2)
  {
    if (!NetworkInterfaceMonotorManager::_instance) {
      operator new();
    }
    NetworkInterfaceMonotorManager::releaseMonitor((void *)NetworkInterfaceMonotorManager::_instance, (unsigned __int8 *)this + 960);
  }
  uint64_t v3 = *((void *)this + 134);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::string::size_type v4 = (CFTypeRef *)*((void *)this + 123);
  if (v4)
  {
    ImsNetworkReachabilityMonitor::~ImsNetworkReachabilityMonitor(v4);
    MEMORY[0x1C878E320]();
  }
  uint64_t v5 = (void *)*((void *)this + 243);
  if (v5)
  {
    SipTransportLayer::IncomingMessageList::clear(*((SipTransportLayer::IncomingMessageList **)this + 243));
    std::__list_imp<unsigned long long>::clear(v5 + 4);
    std::string::size_type v6 = (std::__shared_weak_count *)v5[3];
    if (v6) {
      std::__shared_weak_count::__release_weak(v6);
    }
    uint64_t v7 = (std::__shared_weak_count *)v5[1];
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    MEMORY[0x1C878E320](v5, 0x1020C405B906368);
  }
  uint64_t v8 = *((void *)this + 133);
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  std::deque<SipUri>::~deque[abi:ne180100]((void *)this + 246);
  unsigned int v9 = (std::__shared_weak_count *)*((void *)this + 245);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  SipUri::~SipUri((SipTransportLayer *)((char *)this + 1528));
  SipUri::~SipUri((SipTransportLayer *)((char *)this + 1120));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 1080);
  unint64_t v10 = (std::__shared_weak_count *)*((void *)this + 131);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 129);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  long long v12 = (std::__shared_weak_count *)*((void *)this + 127);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  unint64_t v13 = (std::__shared_weak_count *)*((void *)this + 125);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (*((char *)this + 983) < 0) {
    operator delete(*((void **)this + 120));
  }
  SipTimerContainer::~SipTimerContainer((SipTransportLayer *)((char *)this + 808));
  SipRouteSet::~SipRouteSet((SipTransportLayer *)((char *)this + 752));
  SipRouteSet::~SipRouteSet((SipTransportLayer *)((char *)this + 696));
  SipUri::~SipUri((SipTransportLayer *)((char *)this + 288));
  *((void *)this + 29) = &unk_1F20C5BE0;
  if (*((char *)this + 263) < 0) {
    operator delete(*((void **)this + 30));
  }
  std::__tree<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>>>::destroy(*((void **)this + 26));
  std::__tree<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>>>::destroy(*((void **)this + 23));
  std::string::size_type v14 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  *((void *)this + 5) = &unk_1F20C9CA0;
  if (*((char *)this + 95) < 0) {
    operator delete(*((void **)this + 9));
  }
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  *(void *)this = &unk_1F20BC510;
  std::string v15 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
}

{
  uint64_t vars8;

  SipTransportLayer::~SipTransportLayer(this);
  JUMPOUT(0x1C878E320);
}

void *SipTransportLayer::dropDeferredIncomingMessages(SipTransportLayer *this)
{
  uint64_t v11 = 0;
  std::vector<unsigned int> __p = 0;
  uint64_t v13 = 0;
  std::list<IncomingSipMessage *>::list(&v11, *((void *)this + 243) + 32);
  uint64_t v2 = v13;
  if (v13)
  {
    uint64_t v3 = (char *)this + 40;
    do
    {
      std::string::size_type v4 = (void **)__p;
      uint64_t v5 = (IncomingSipMessage *)*((void *)__p + 2);
      uint64_t v6 = *(void *)__p;
      *(void *)(v6 + 8) = *((void *)__p + 1);
      *v4[1] = v6;
      uint64_t v13 = v2 - 1;
      operator delete(v4);
      uint64_t v7 = (*(uint64_t (**)(char *))(*(void *)v3 + 48))((char *)this + 40);
      (*(void (**)(char *, uint64_t))(*(void *)v3 + 16))((char *)this + 40, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"dropping deferred ", 18);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(void **__return_ptr))(**(void **)v5 + 48))(v9);
      (*(void (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, v9);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
      if (v10 < 0) {
        operator delete(v9[0]);
      }
      IncomingSipMessage::~IncomingSipMessage(v5);
      MEMORY[0x1C878E320]();
      uint64_t v2 = v13;
    }
    while (v13);
  }
  SipTransportLayer::IncomingMessageList::clear(*((SipTransportLayer::IncomingMessageList **)this + 243));
  return std::__list_imp<unsigned long long>::clear(&v11);
}

void sub_1C5377708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
}

void SipTransportLayer::closeTransports(SipTransportLayer *this)
{
  uint64_t v2 = *((void *)this + 124);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 272))(v2);
    uint64_t v3 = *((void *)this + 124);
    LoggableString::LoggableString((LoggableString *)__p, "TransportLayer");
    (*(void (**)(uint64_t, void **))(*(void *)v3 + 40))(v3, __p);
    if (SHIBYTE(v22) < 0) {
      operator delete(__p[0]);
    }
    std::string::size_type v4 = (std::__shared_weak_count *)*((void *)this + 125);
    *((_OWORD *)this + 62) = 0u;
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  uint64_t v5 = *((void *)this + 126);
  if (v5)
  {
    (*(void (**)(uint64_t))(*(void *)v5 + 272))(v5);
    uint64_t v6 = *((void *)this + 126);
    LoggableString::LoggableString((LoggableString *)__p, "TransportLayer");
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, __p);
    if (SHIBYTE(v22) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 127);
    *((_OWORD *)this + 63) = 0u;
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
  uint64_t v8 = *((void *)this + 128);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(void *)v8 + 272))(v8);
    uint64_t v9 = *((void *)this + 128);
    LoggableString::LoggableString((LoggableString *)__p, "TransportLayer");
    (*(void (**)(uint64_t, void **))(*(void *)v9 + 40))(v9, __p);
    if (SHIBYTE(v22) < 0) {
      operator delete(__p[0]);
    }
    char v10 = (std::__shared_weak_count *)*((void *)this + 129);
    *((_OWORD *)this + 64) = 0u;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 131);
  *((_OWORD *)this + 65) = 0u;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  *((unsigned char *)this + 1056) = 0;
  SipTransportLayer::setInterface(this, 0);
  long long v12 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v12)
  {
    uint64_t v13 = std::__shared_weak_count::lock(v12);
    if (v13)
    {
      std::string::size_type v14 = v13;
      uint64_t v15 = *((void *)this + 1);
      if (v15)
      {
        uint64_t v17 = *((void *)this + 5);
        uint64_t v16 = (char *)this + 40;
        uint64_t v18 = (*(uint64_t (**)(char *))(v17 + 64))(v16);
        (*(void (**)(char *, uint64_t))(*(void *)v16 + 16))(v16, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"Force transactions to error out as transport layer is going away.", 65);
        *(unsigned char *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v18 + 17) = 0;
        long long v23 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        __p[0] = &unk_1F20B2680;
        __p[1] = &_bambiDomain;
        int v22 = 0;
        int v21 = 1073741844;
        uint64_t v19 = *(SipTransactionLayer **)(v15 + 152);
        if (v19) {
          SipTransactionLayer::errorOutAllTransactions(v19, (const ImsResult *)__p);
        }
        ImsResult::~ImsResult((ImsResult *)__p);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
}

void sub_1C5377A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipTransportLayer::~SipTransportLayer(SipTransportLayer *this)
{
}

{
  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 32));
}

{
  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 40));
}

{
  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 144));
}

{
  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 152));
}

{
  uint64_t vars8;

  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 24));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 32));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 40));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 144));
  JUMPOUT(0x1C878E320);
}

{
  uint64_t vars8;

  SipTransportLayer::~SipTransportLayer((SipTransportLayer *)((char *)this - 152));
  JUMPOUT(0x1C878E320);
}

void SipTransportLayer::setInterface(SipTransportLayer *this, NetworkInterface *a2)
{
  if (*((void *)this + 133))
  {
    std::string::size_type v4 = (char *)this + 40;
    uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 64))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))((char *)this + 40, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"Updating old interface", 22);
    *(unsigned char *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v5 + 17) = 0;
    uint64_t v6 = *((void *)this + 134);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *((void *)this + 134) = *((void *)this + 133);
  }
  else if (a2)
  {
    uint64_t v7 = (char *)this + 40;
    uint64_t v8 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 64))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))((char *)this + 40, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"Initializing old interface", 26);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    uint64_t v9 = *((void *)this + 134);
    if (v9) {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
    }
    operator new();
  }
  *((void *)this + 133) = a2;
  if (*((void *)this + 138))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(this + 1080, *((void ***)this + 137));
    *((void *)this + 137) = 0;
    uint64_t v10 = *((void *)this + 136);
    if (v10)
    {
      for (uint64_t i = 0; i != v10; ++i)
        *(void *)(*((void *)this + 135) + 8 * i) = 0;
    }
    *((void *)this + 138) = 0;
  }
}

void sub_1C5377EC0(_Unwind_Exception *a1)
{
  MEMORY[0x1C878E320](v1, 0x10B3C40F64ECF8ALL);
  _Unwind_Resume(a1);
}

uint64_t SipTransportLayer::setState(SipTransportLayer *this, const SipTransportLayer::State *a2)
{
  std::string::size_type v4 = (char *)this + 232;
  uint64_t result = ImsUuid::operator==((uint64_t)a2, (uint64_t)this + 232);
  if ((result & 1) == 0)
  {
    uint64_t v7 = *((void *)this + 5);
    uint64_t v6 = (char *)this + 40;
    uint64_t v8 = (*(uint64_t (**)(char *))(v7 + 64))(v6);
    (*(void (**)(char *, uint64_t))(*(void *)v6 + 16))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"state transition [", 18);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((void *)v6 + 24) + 16))(v4, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" --> ", 5);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(const SipTransportLayer::State *, uint64_t))(*(void *)a2 + 16))(a2, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v8 + 17) = 0;
    return (uint64_t)std::string::operator=((std::string *)(v6 + 200), (const std::string *)((char *)a2 + 8));
  }
  return result;
}

uint64_t SipTransportLayer::initialize(SipTransportLayer *this)
{
  uint64_t v2 = (char *)this + 40;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 64))((char *)this + 40);
  (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Initializing TransportLayer", 27);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  *((_DWORD *)this + 484) = 0;
  uint64_t v4 = (*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 16))(this);
  SipUri::operator=((SipTransportLayer *)((char *)this + 1120), v4 + 24);
  return SipTransportLayer::setState(this, (const SipTransportLayer::State *)&unk_1EBBDBFF8);
}

uint64_t SipTransportLayer::deinitialize(SipTransportLayer *this)
{
  uint64_t v2 = (char *)this + 40;
  uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 64))((char *)this + 40);
  (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"Tearing down TransportLayer", 27);
  *(unsigned char *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v3 + 17) = 0;
  SipTransportLayer::dropDeferredIncomingMessages(this);
  std::string::basic_string[abi:ne180100]<0>(&__p, "deinitialization");
  SipTransportLayer::resetTransportErrors((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  SipTransportLayer::cancelTransportInit(this);
  SipTransportLayer::closeTransports(this);
  return SipTransportLayer::setState(this, (const SipTransportLayer::State *)&unk_1EBBDBFD8);
}

void sub_1C53782E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipTransportLayer::resetTransportErrors(uint64_t a1, const std::string *a2)
{
  uint64_t v4 = a1 + 40;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 40) + 64))(a1 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"resetting transport errors on ", 30);
  *(unsigned char *)(v5 + 17) = 0;
  LoggableString::LoggableString(&__p, a2);
  (*(void (**)(uint64_t, std::string *))(*(void *)v5 + 40))(v5, &__p);
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(_DWORD *)(a1 + 1936) = 0;
}

void sub_1C5378430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipTransportLayer::cancelTransportInit(SipTransportLayer *this)
{
  *((void *)this + 35) = 0;
  *((_DWORD *)this + 238) = 0;
  SipTimerContainer::cancelAllTimers((SipTransportLayer *)((char *)this + 808));
  uint64_t v2 = (void *)NetworkInterfaceMonotorManager::_instance;
  if (!NetworkInterfaceMonotorManager::_instance) {
    operator new();
  }
  NetworkInterfaceMonotorManager::stopMonitoring(v2, (unsigned __int8 *)this + 960);
}

uint64_t SipTransportLayer::localClientAddress(SipTransportLayer *this, void *a2)
{
  uint64_t result = a2[124];
  if (!result)
  {
    if (!a2[130]
      || (uint64_t v6 = (ImsPrefs *)(*(uint64_t (**)(void *))(*a2 + 184))(a2),
          AlwaysUseDefaultTransportKey = (void **)ImsPrefs::getAlwaysUseDefaultTransportKey(v6),
          uint64_t result = ImsPrefs::BOOLValue(v6, AlwaysUseDefaultTransportKey),
          (result & 1) != 0))
    {
      *(void *)this = 0;
      *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
      return result;
    }
    uint64_t result = a2[130];
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 184);
  return v4();
}

void SipTransportLayer::initializeTransportToProxy(int8x8_t *a1@<X0>, int8x8_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v309 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1 + 246;
  if (&a1[246] == a2) {
    goto LABEL_157;
  }
  int8x8_t v7 = a2[4];
  int8x8_t v8 = a2[1];
  uint64_t v9 = (void *)(*(void *)&v8 + 8 * (*(void *)&v7 >> 4));
  if (*(void *)&a2[2] == *(void *)&v8)
  {
    uint64_t v10 = 0;
    uint64_t v13 = 0;
    long long v12 = (char *)(*(void *)&v8 + 8 * ((*(void *)&a2[5] + *(void *)&v7) >> 4));
  }
  else
  {
    uint64_t v10 = (void *)(*v9 + 408 * (*(void *)&a2[4] & 0xFLL));
    unint64_t v11 = *(void *)&a2[5] + *(void *)&v7;
    long long v12 = (char *)(*(void *)&v8 + 8 * (v11 >> 4));
    uint64_t v13 = *(void *)v12 + 408 * (v11 & 0xF);
  }
  if ((void *)v13 == v10)
  {
    unint64_t v14 = 0;
    v294 = a1 + 251;
LABEL_10:
    int8x8_t v20 = a1[247];
    int v21 = (void *)(*(void *)&v20 + 8 * (*(void *)&a1[250] >> 4));
    if (*(void *)&a1[248] == *(void *)&v20) {
      int v22 = 0;
    }
    else {
      int v22 = (void *)(*v21 + 408 * (*(void *)&a1[250] & 0xFLL));
    }
    __p[0] = v9;
    __p[1] = v10;
    std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>::operator+=[abi:ne180100]((uint64_t **)__p, v14);
    long long v23 = (uint64_t *)__p[0];
    long long v24 = __p[1];
    __p[0] = v21;
    __p[1] = v22;
    std::__for_each_segment[abi:ne180100]<std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>,std::__deque_iterator<SipUri,SipUri*,SipUri&,SipUri**,long,16l>>>(v9, (uint64_t)v10, v23, (uint64_t)v24, (uint64_t)__p);
    int8x8_t v25 = a1[251];
    int8x8_t v26 = a1[250];
    int8x8_t v27 = a1[247];
    uint64_t v28 = (char *)(*(void *)&v27 + 8 * ((*(void *)&v26 + *(void *)&v25) >> 4));
    uint64_t v29 = (uint64_t)a1[248];
    if (v29 == *(void *)&v27) {
      std::string v30 = 0;
    }
    else {
      std::string v30 = (void (***)(void))(*(void *)v28 + 408 * ((v26.i8[0] + v25.i8[0]) & 0xF));
    }
    if (v30 != __p[1])
    {
      uint64_t v31 = ((uint64_t)__p[1] - *(void *)__p[0]) >> 3;
      int64_t v32 = 0xFAFAFAFAFAFAFAFBLL * (((uint64_t)v30 - *(void *)v28) >> 3)
          + 2 * (v28 - (char *)__p[0])
          + 0x505050505050505 * v31;
      if (v32 >= 1)
      {
        uint64_t v33 = (void *)(*(void *)&v27 + 8 * (*(void *)&v26 >> 4));
        if (v29 == *(void *)&v27) {
          uint64_t v34 = 0;
        }
        else {
          uint64_t v34 = (void *)(*v33 + 408 * (*(void *)&a1[250] & 0xFLL));
        }
        if (__p[1] == v34) {
          uint64_t v55 = 0;
        }
        else {
          uint64_t v55 = 0xFAFAFAFAFAFAFAFBLL * v31
        }
              + 2 * ((char *)__p[0] - (char *)v33)
              + 0x505050505050505 * (((uint64_t)v34 - *v33) >> 3);
        __p[0] = (void *)(*(void *)&v27 + 8 * (*(void *)&v26 >> 4));
        __p[1] = v34;
        std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>::operator+=[abi:ne180100]((uint64_t **)__p, v55);
        uint64_t v56 = (void (***)(void))__p[1];
        if (__p[1] != v30)
        {
          uint64_t v57 = __p[0];
          do
          {
            (**v56)(v56);
            v56 += 51;
            if ((void (***)(void))((char *)v56 - *v57) == (void (***)(void))6528)
            {
              int v58 = (void (***)(void))v57[1];
              ++v57;
              uint64_t v56 = v58;
            }
          }
          while (v56 != v30);
          int8x8_t v25 = a1[251];
          uint64_t v29 = (uint64_t)a1[248];
          int8x8_t v27 = a1[247];
          int8x8_t v26 = a1[250];
        }
        uint64_t v59 = 2 * (v29 - *(void *)&v27) - 1;
        if (v29 == *(void *)&v27) {
          uint64_t v59 = 0;
        }
        int8x8_t *v294 = (int8x8_t)(*(void *)&v25 - v32);
        if ((unint64_t)(v59 - (*(void *)&v25 - v32 + *(void *)&v26)) >= 0x20)
        {
          do
          {
            operator delete(*(void **)(v29 - 8));
            uint64_t v29 = *(void *)&a1[248] - 8;
            int8x8_t v60 = a1[247];
            a1[248] = (int8x8_t)v29;
            if (v29 == *(void *)&v60) {
              uint64_t v61 = 0;
            }
            else {
              uint64_t v61 = 2 * (v29 - *(void *)&v60) - 1;
            }
          }
          while ((unint64_t)(v61 - (*(void *)&a1[251] + *(void *)&a1[250])) > 0x1F);
        }
      }
    }
    goto LABEL_157;
  }
  unint64_t v14 = 0xFAFAFAFAFAFAFAFBLL * ((v13 - *(void *)v12) >> 3)
      + 2 * (v12 - (char *)v9)
      + 0x505050505050505 * (((uint64_t)v10 - *v9) >> 3);
  unint64_t v15 = (unint64_t)a1[251];
  v294 = a1 + 251;
  if (v15 >= v14) {
    goto LABEL_10;
  }
  __p[0] = v9;
  __p[1] = v10;
  std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>::operator+=[abi:ne180100]((uint64_t **)__p, v15);
  uint64_t v16 = (uint64_t *)__p[0];
  uint64_t v17 = (const SipUri *)__p[1];
  int8x8_t v18 = a1[247];
  if (*(void *)&a1[248] == *(void *)&v18) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = (void *)(*(void *)(*(void *)&v18 + 8 * (*(void *)&a1[250] >> 4)) + 408 * (*(void *)&a1[250] & 0xFLL));
  }
  __p[0] = (void *)(*(void *)&v18 + 8 * (*(void *)&a1[250] >> 4));
  __p[1] = v19;
  std::__for_each_segment[abi:ne180100]<std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>,std::__deque_iterator<SipUri,SipUri*,SipUri&,SipUri**,long,16l>>>(v9, (uint64_t)v10, v16, (uint64_t)v17, (uint64_t)__p);
  uint64_t v35 = (char *)a1[248];
  char v36 = (char *)a1[247];
  uint64_t v37 = v35 - v36;
  int8x8_t v38 = a1[251];
  if (v35 == v36) {
    uint64_t v39 = 0;
  }
  else {
    uint64_t v39 = 2 * (v35 - v36) - 1;
  }
  int8x8_t v40 = a1[250];
  unint64_t v41 = *(void *)&v40 + *(void *)&v38;
  unint64_t v42 = v39 - (*(void *)&v40 + *(void *)&v38);
  BOOL v43 = v14 - *(void *)&v38 >= v42;
  unint64_t v44 = v14 - *(void *)&v38 - v42;
  uint64_t v284 = v14 - *(void *)&v38;
  if (v44 != 0 && v43)
  {
    if (v35 == v36) {
      unint64_t v45 = v44 + 1;
    }
    else {
      unint64_t v45 = v44;
    }
    if ((v45 & 0xF) != 0) {
      unint64_t v46 = (v45 >> 4) + 1;
    }
    else {
      unint64_t v46 = v45 >> 4;
    }
    if (v46 >= *(void *)&v40 >> 4) {
      uint64_t v47 = *(void *)&v40 >> 4;
    }
    else {
      uint64_t v47 = v46;
    }
    if (v46 <= *(void *)&v40 >> 4)
    {
      for (a1[250] = (int8x8_t)(*(void *)&v40 - 16 * v47); v47; --v47)
      {
        char v62 = (void *)a1[247];
        uint64_t v65 = *v62;
        uint64_t v63 = (char *)(v62 + 1);
        uint64_t v64 = v65;
        a1[247] = (int8x8_t)v63;
        if (v35 == (char *)a1[249])
        {
          uint64_t v66 = (uint64_t)&v63[-*(void *)v6];
          if ((unint64_t)v63 <= *(void *)v6)
          {
            if (v35 == (char *)*v6) {
              unint64_t v74 = 1;
            }
            else {
              unint64_t v74 = (uint64_t)&v35[-*(void *)v6] >> 2;
            }
            uint64_t v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&a1[249], v74);
            uint64_t v77 = &v75[8 * (v74 >> 2)];
            uint64_t v78 = (uint64_t *)a1[247];
            uint64_t v35 = v77;
            uint64_t v79 = *(void *)&a1[248] - (void)v78;
            if (v79)
            {
              uint64_t v35 = &v77[v79 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v80 = 8 * (v79 >> 3);
              int v81 = &v75[8 * (v74 >> 2)];
              do
              {
                uint64_t v82 = *v78++;
                *(void *)int v81 = v82;
                v81 += 8;
                v80 -= 8;
              }
              while (v80);
            }
            uint64_t v83 = (void *)a1[246];
            a1[246] = (int8x8_t)v75;
            a1[247] = (int8x8_t)v77;
            a1[248] = (int8x8_t)v35;
            a1[249] = (int8x8_t)&v75[8 * v76];
            if (v83)
            {
              operator delete(v83);
              uint64_t v35 = (char *)a1[248];
            }
          }
          else
          {
            uint64_t v67 = v66 >> 3;
            BOOL v68 = v66 >> 3 < -1;
            uint64_t v69 = (v66 >> 3) + 2;
            if (v68) {
              uint64_t v70 = v69;
            }
            else {
              uint64_t v70 = v67 + 1;
            }
            char v71 = &v63[-8 * (v70 >> 1)];
            int64_t v72 = v35 - v63;
            if (v35 != v63)
            {
              memmove(&v63[-8 * (v70 >> 1)], v63, v35 - v63);
              uint64_t v35 = (char *)a1[247];
            }
            uint64_t v73 = &v35[-8 * (v70 >> 1)];
            uint64_t v35 = &v71[v72];
            a1[248] = (int8x8_t)&v71[v72];
            a1[247] = (int8x8_t)v73;
          }
        }
        *(void *)uint64_t v35 = v64;
        uint64_t v35 = (char *)(*(void *)&a1[248] + 8);
        a1[248] = (int8x8_t)v35;
      }
    }
    else
    {
      uint64_t v48 = v46 - v47;
      uint64_t v49 = (uint64_t)&a1[249];
      uint64_t v50 = *(void *)&a1[249] - *(void *)&a1[246];
      if (v46 - v47 <= (v50 >> 3) - (v37 >> 3))
      {
        if (v48)
        {
          while (*(void *)&a1[249] != *(void *)&a1[248])
          {
            __p[0] = operator new(0x1980uLL);
            std::__split_buffer<SipUri *>::push_back(v6, __p);
            --v46;
            if (!--v48)
            {
              uint64_t v35 = (char *)a1[248];
              uint64_t v49 = (uint64_t)&a1[249];
              goto LABEL_119;
            }
          }
          for (uint64_t i = 0; i != v48; ++i)
          {
            __p[0] = operator new(0x1980uLL);
            std::__split_buffer<SipUri *>::push_front((uint64_t)v6, __p);
            uint64_t v35 = (char *)a1[248];
            if (&v35[-*(void *)&a1[247]] == (char *)8) {
              uint64_t v109 = 15;
            }
            else {
              uint64_t v109 = 16;
            }
            uint64_t v110 = v109 + *(void *)&a1[250];
            a1[250] = (int8x8_t)v110;
          }
          uint64_t v47 = v46;
          uint64_t v49 = (uint64_t)&a1[249];
        }
        else
        {
LABEL_119:
          uint64_t v110 = (uint64_t)a1[250];
        }
        a1[250] = (int8x8_t)(v110 - 16 * v47);
        if (v47)
        {
          uint64_t v111 = v49;
          do
          {
            char v112 = (void *)a1[247];
            uint64_t v115 = *v112;
            uint64_t v113 = (char *)(v112 + 1);
            uint64_t v114 = v115;
            a1[247] = (int8x8_t)v113;
            if (v35 == (char *)a1[249])
            {
              uint64_t v116 = (uint64_t)&v113[-*(void *)v6];
              if ((unint64_t)v113 <= *(void *)v6)
              {
                if (v35 == (char *)*v6) {
                  unint64_t v123 = 1;
                }
                else {
                  unint64_t v123 = (uint64_t)&v35[-*(void *)v6] >> 2;
                }
                int8x8_t v124 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v111, v123);
                uint64_t v126 = &v124[8 * (v123 >> 2)];
                unint64_t v127 = (uint64_t *)a1[247];
                uint64_t v35 = v126;
                uint64_t v128 = *(void *)&a1[248] - (void)v127;
                if (v128)
                {
                  uint64_t v35 = &v126[v128 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v129 = 8 * (v128 >> 3);
                  unint64_t v130 = &v124[8 * (v123 >> 2)];
                  do
                  {
                    uint64_t v131 = *v127++;
                    *(void *)unint64_t v130 = v131;
                    v130 += 8;
                    v129 -= 8;
                  }
                  while (v129);
                }
                uint64_t v132 = (void *)a1[246];
                a1[246] = (int8x8_t)v124;
                a1[247] = (int8x8_t)v126;
                a1[248] = (int8x8_t)v35;
                a1[249] = (int8x8_t)&v124[8 * v125];
                if (v132)
                {
                  operator delete(v132);
                  uint64_t v35 = (char *)a1[248];
                }
              }
              else
              {
                uint64_t v117 = v116 >> 3;
                BOOL v68 = v116 >> 3 < -1;
                uint64_t v118 = (v116 >> 3) + 2;
                if (v68) {
                  uint64_t v119 = v118;
                }
                else {
                  uint64_t v119 = v117 + 1;
                }
                unsigned int v120 = &v113[-8 * (v119 >> 1)];
                int64_t v121 = v35 - v113;
                if (v35 != v113)
                {
                  memmove(&v113[-8 * (v119 >> 1)], v113, v35 - v113);
                  uint64_t v35 = (char *)a1[247];
                }
                long long v122 = &v35[-8 * (v119 >> 1)];
                uint64_t v35 = &v120[v121];
                a1[248] = (int8x8_t)&v120[v121];
                a1[247] = (int8x8_t)v122;
              }
            }
            *(void *)uint64_t v35 = v114;
            uint64_t v35 = (char *)(*(void *)&a1[248] + 8);
            a1[248] = (int8x8_t)v35;
            --v47;
          }
          while (v47);
        }
      }
      else
      {
        uint64_t v51 = v37 >> 3;
        unint64_t v52 = v50 >> 2;
        if (v52 <= v48 + (v37 >> 3)) {
          unint64_t v53 = v48 + (v37 >> 3);
        }
        else {
          unint64_t v53 = v52;
        }
        *(void *)&v300[16] = a1 + 249;
        if (v53) {
          std::string v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v49, v53);
        }
        else {
          std::string v54 = 0;
        }
        uint64_t v84 = 16 * v47;
        __p[0] = v54;
        __p[1] = &v54[8 * (v51 - v47)];
        *(void **)v300 = __p[1];
        *(void *)&v300[8] = &v54[8 * v53];
        do
        {
          v306.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1980uLL);
          std::__split_buffer<SipUri *>::push_back(__p, &v306);
          --v48;
        }
        while (v48);
        if (v47)
        {
          uint64_t v85 = (void *)a1[247];
          long long v86 = *(char **)v300;
          do
          {
            if (v86 == *(char **)&v300[8])
            {
              int64_t v87 = (char *)__p[1] - (char *)__p[0];
              if (__p[1] <= __p[0])
              {
                if (v86 == __p[0]) {
                  unint64_t v94 = 1;
                }
                else {
                  unint64_t v94 = (v86 - (char *)__p[0]) >> 2;
                }
                int8x8_t v95 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(*(uint64_t *)&v300[16], v94);
                long long v97 = (uint64_t *)__p[1];
                long long v86 = &v95[8 * (v94 >> 2)];
                int64_t v98 = *(void *)v300 - (unint64_t)__p[1];
                if (*(void **)v300 != __p[1])
                {
                  long long v86 = &v95[8 * (v94 >> 2) + (v98 & 0xFFFFFFFFFFFFFFF8)];
                  uint64_t v99 = 8 * (v98 >> 3);
                  long long v100 = &v95[8 * (v94 >> 2)];
                  do
                  {
                    uint64_t v101 = *v97++;
                    *(void *)long long v100 = v101;
                    v100 += 8;
                    v99 -= 8;
                  }
                  while (v99);
                }
                int v102 = __p[0];
                __p[0] = v95;
                __p[1] = &v95[8 * (v94 >> 2)];
                *(void *)v300 = v86;
                *(void *)&v300[8] = &v95[8 * v96];
                if (v102)
                {
                  operator delete(v102);
                  long long v86 = *(char **)v300;
                }
              }
              else
              {
                uint64_t v88 = v87 >> 3;
                BOOL v68 = v87 >> 3 < -1;
                uint64_t v89 = (v87 >> 3) + 2;
                if (v68) {
                  uint64_t v90 = v89;
                }
                else {
                  uint64_t v90 = v88 + 1;
                }
                char v91 = (char *)__p[1] - 8 * (v90 >> 1);
                int64_t v92 = v86 - (char *)__p[1];
                if (v86 != __p[1])
                {
                  memmove((char *)__p[1] - 8 * (v90 >> 1), __p[1], v86 - (char *)__p[1]);
                  long long v86 = (char *)__p[1];
                }
                int v93 = &v86[-8 * (v90 >> 1)];
                long long v86 = &v91[v92];
                __p[1] = v93;
                *(void *)v300 = &v91[v92];
              }
            }
            *(void *)long long v86 = *v85;
            long long v86 = (char *)(*(void *)v300 + 8);
            *(void *)v300 += 8;
            uint64_t v85 = (void *)(*(void *)&a1[247] + 8);
            a1[247] = (int8x8_t)v85;
            --v47;
          }
          while (v47);
        }
        uint64_t v103 = (void *)a1[248];
        uint64_t v104 = -7 - (void)v103;
        while (v103 != *(void **)&a1[247])
        {
          --v103;
          v104 += 8;
          std::__split_buffer<SipUri *>::push_front((uint64_t)__p, v103);
        }
        unsigned int v105 = (void *)a1[246];
        long long v106 = *(_OWORD *)v300;
        *(_OWORD *)a1[246].i8 = *(_OWORD *)__p;
        __p[0] = v105;
        __p[1] = v103;
        long long v107 = *(_OWORD *)a1[248].i8;
        *(_OWORD *)a1[248].i8 = v106;
        *(_OWORD *)v300 = v107;
        *(void *)&a1[250] -= v84;
        if (v103 != (void *)v107) {
          *(void *)v300 = v107 + (-(v107 + v104) & 0xFFFFFFFFFFFFFFF8);
        }
        if (v105)
        {
          operator delete(v105);
          uint64_t v35 = (char *)a1[248];
        }
        else
        {
          uint64_t v35 = (char *)v106;
        }
      }
    }
    int8x8_t v38 = a1[251];
    char v36 = (char *)a1[247];
    unint64_t v41 = *(void *)&a1[250] + *(void *)&v38;
  }
  uint64_t v133 = &v36[8 * (v41 >> 4)];
  if (v35 == v36) {
    uint64_t v134 = 0;
  }
  else {
    uint64_t v134 = (char *)(*(void *)v133 + 408 * (v41 & 0xF));
  }
  __p[0] = &v36[8 * (v41 >> 4)];
  __p[1] = v134;
  std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>::operator+=[abi:ne180100]((uint64_t **)__p, v284);
  int v135 = (char *)__p[1];
  if (v134 != __p[1])
  {
    uint64_t v136 = (char *)__p[0];
    do
    {
      if (v133 == v136) {
        uint64_t v137 = (uint64_t)v135;
      }
      else {
        uint64_t v137 = *(void *)v133 + 6528;
      }
      if (v134 == (char *)v137)
      {
        uint64_t v137 = (uint64_t)v134;
        uint64_t v140 = v294;
      }
      else
      {
        uint64_t v138 = 0;
        do
        {
          SipUri::SipUri((SipUri *)&v134[v138], v17);
          uint64_t v17 = (const SipUri *)((char *)v17 + 408);
          if ((const SipUri *)((char *)v17 - *v16) == (const SipUri *)6528)
          {
            unint64_t v139 = (const SipUri *)v16[1];
            ++v16;
            uint64_t v17 = v139;
          }
          v138 += 408;
        }
        while (&v134[v138] != (char *)v137);
        uint64_t v140 = v294;
        int8x8_t v38 = *v294;
      }
      *(void *)&v38 -= 0x505050505050505 * ((v137 - (uint64_t)v134) >> 3);
      *uint64_t v140 = v38;
      if (v133 == v136) {
        break;
      }
      uint64_t v141 = (char *)*((void *)v133 + 1);
      v133 += 8;
      uint64_t v134 = v141;
    }
    while (v141 != v135);
  }
LABEL_157:
  SipTransportLayer::localClientAddress((SipTransportLayer *)__p, a1);
  unint64_t v142 = __p[0];
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (!v142)
  {
    uint64_t v145 = (*(uint64_t (**)(int8x8_t *))(*(void *)&a1[5] + 64))(a1 + 5);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)&a1[5] + 16))(a1 + 5, v145);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v145 + 8), (uint64_t)"no existing usable transport", 28);
    *(unsigned char *)(v145 + 17) = 0;
    uint64_t v146 = (unsigned char *)(v145 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v145 + 64))(v145, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_191:
    *uint64_t v146 = 0;
    goto LABEL_192;
  }
  __p[0] = 0;
  __p[1] = 0;
  *(void *)v300 = 0;
  int8x8_t v143 = a1[133];
  if (v143)
  {
    BOOL v144 = (const std::string *)(*(void *)&v143 + 32);
LABEL_167:
    std::string::operator=((std::string *)__p, v144);
    goto LABEL_168;
  }
  uint64_t v147 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 16))(a1);
  uint64_t v148 = *(unsigned __int8 *)(v147 + 23);
  if ((v148 & 0x80u) != 0) {
    uint64_t v148 = *(void *)(v147 + 8);
  }
  if (v148)
  {
    BOOL v144 = (const std::string *)(*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 16))(a1);
    goto LABEL_167;
  }
LABEL_168:
  unint64_t v149 = (void *)v300[7];
  if (v300[7] < 0) {
    unint64_t v149 = __p[1];
  }
  if (!v149)
  {
    BOOL v158 = 0;
    if ((v300[7] & 0x80) == 0) {
      goto LABEL_180;
    }
LABEL_189:
    operator delete(__p[0]);
    if (v158) {
      goto LABEL_181;
    }
    goto LABEL_190;
  }
  long long v150 = (std::__shared_weak_count *)a1[2];
  if (v150)
  {
    unint64_t v151 = std::__shared_weak_count::lock(v150);
    if (v151)
    {
      int8x8_t v152 = v151;
      int8x8_t v153 = a1[1];
      if (v153)
      {
        uint64_t v154 = *(void *)(*(void *)&v153 + 136);
        uint64_t v155 = *(void *)(v154 + 656);
        int8x8_t v156 = *(std::__shared_weak_count **)(v154 + 664);
        if (v156) {
          atomic_fetch_add_explicit(&v156->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v157 = (NetworkInterface *)(*(uint64_t (**)(uint64_t, void **))(*(void *)v155 + 64))(v155, __p);
        SipTransportLayer::setInterface((SipTransportLayer *)a1, v157);
        if (v156) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v156);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v152);
    }
  }
  BOOL v158 = *(void *)&a1[133] != 0;
  if ((v300[7] & 0x80) != 0) {
    goto LABEL_189;
  }
LABEL_180:
  if (!v158)
  {
LABEL_190:
    uint64_t v168 = (*(uint64_t (**)(int8x8_t *))(*(void *)&a1[5] + 64))(a1 + 5);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)&a1[5] + 16))(a1 + 5, v168);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v168 + 8), (uint64_t)"no existing network interface", 29);
    *(unsigned char *)(v168 + 17) = 0;
    uint64_t v146 = (unsigned char *)(v168 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v168 + 64))(v168, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_191;
  }
LABEL_181:
  int8x8_t v159 = a1[133];
  SipTransportLayer::localClientAddress((SipTransportLayer *)__p, a1);
  uint64_t v160 = *(void *)(*(void *)&v159 + 8);
  uint64_t v161 = *(void *)(*(void *)&v159 + 16);
  if (v160 == v161)
  {
    char v166 = 0;
    unint64_t v164 = a3;
    unint64_t v163 = a2;
  }
  else
  {
    uint64_t v162 = v160 + 16;
    unint64_t v164 = a3;
    unint64_t v163 = a2;
    do
    {
      int v165 = (*(uint64_t (**)(void, void **, void))(**(void **)(v162 - 16) + 104))(*(void *)(v162 - 16), __p, 0);
      char v166 = v165;
      if (v162 == v161) {
        int v167 = 1;
      }
      else {
        int v167 = v165;
      }
      v162 += 16;
    }
    while (v167 != 1);
  }
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if ((v166 & 1) == 0)
  {
    uint64_t v235 = (*(uint64_t (**)(int8x8_t *))(*(void *)&a1[5] + 64))(a1 + 5);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)&a1[5] + 16))(a1 + 5, v235);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v235 + 8), (uint64_t)"interface ", 10);
    *(unsigned char *)(v235 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(void *)v235 + 32))(v235, *(void *)&a1[133] + 32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v235 + 8), (uint64_t)" no longer contains address ", 28);
    *(unsigned char *)(v235 + 17) = 0;
    SipTransportLayer::localClientAddress((SipTransportLayer *)&v306, a1);
    IpAddress::asString(__p);
  }
  unint64_t v204 = (unint64_t)v163[5];
  if (v204 > v164)
  {
    int8x8_t v205 = v163[1];
    if (*(void *)&v163[2] != *(void *)&v205)
    {
      unint64_t v206 = (unint64_t)v163[4];
      int v207 = (const SipUri **)(*(void *)&v205 + 8 * (v206 >> 4));
      uint64_t v208 = *v207;
      uint64_t v209 = (const SipUri *)((char *)*v207 + 408 * (v206 & 0xF));
      for (uint64_t j = *(void *)(*(void *)&v205 + (((v206 + v204) >> 1) & 0x7FFFFFFFFFFFFFF8))
              + 408 * ((v206 + v204) & 0xF); v209 != (const SipUri *)j; --v164)
      {
        if (!v164)
        {
          if (SipUri::equals((SipUri *)&a1[36], v209, 1))
          {
            uint64_t v259 = (*(uint64_t (**)(int8x8_t *))(*(void *)&a1[5] + 64))(a1 + 5);
            (*(void (**)(int8x8_t *, uint64_t))(*(void *)&a1[5] + 16))(a1 + 5, v259);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v259 + 8), (uint64_t)"found existing proxy at same offset: ", 37);
            *(unsigned char *)(v259 + 17) = 0;
            (*(void (**)(const SipUri *, uint64_t))(*(void *)v209 + 40))(v209, v259);
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v259 + 64))(v259, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v259 + 17) = 0;
            goto LABEL_362;
          }
          uint64_t v208 = *v207;
        }
        uint64_t v209 = (const SipUri *)((char *)v209 + 408);
        if (v209 - v208 == 6528)
        {
          v211 = v207[1];
          ++v207;
          uint64_t v208 = v211;
          uint64_t v209 = v211;
        }
      }
    }
  }
  int8x8_t v212 = a1[247];
  if (*(void *)&a1[248] != *(void *)&v212)
  {
    int8x8_t v213 = a1[250];
    v214 = (void *)(*(void *)&v212 + 8 * (*(void *)&v213 >> 4));
    uint64_t v215 = *v214 + 408 * (v213.i8[0] & 0xF);
    uint64_t v216 = *(void *)(*(void *)&v212 + (((*(void *)&a1[251] + *(void *)&v213) >> 1) & 0x7FFFFFFFFFFFFFF8))
         + 408 * ((a1[251].i32[0] + v213.i32[0]) & 0xF);
    if (v215 != v216)
    {
      while (1)
      {
        __p[0] = 0;
        __p[1] = 0;
        *(void *)v300 = 0;
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v215 + 48))(&v306, v215);
        uint64_t v217 = (*(uint64_t (**)(std::string::size_type))(*(void *)v306.__r_.__value_.__l.__data_ + 128))(v306.__r_.__value_.__r.__words[0]);
        if (*(char *)(v217 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v217, *(void *)(v217 + 8));
        }
        else
        {
          long long v218 = *(_OWORD *)v217;
          *(void *)v300 = *(void *)(v217 + 16);
          *(_OWORD *)std::string __p = v218;
        }
        if (v306.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v306.__r_.__value_.__l.__size_);
        }
        v219 = (void *)v300[7];
        if (v300[7] < 0) {
          v219 = __p[1];
        }
        if (v219) {
          break;
        }
        BOOL v233 = 0;
        if ((v300[7] & 0x80) != 0) {
          goto LABEL_305;
        }
LABEL_306:
        if (v233) {
          goto LABEL_192;
        }
        v215 += 408;
        if (v215 - *v214 == 6528)
        {
          uint64_t v234 = v214[1];
          ++v214;
          uint64_t v215 = v234;
        }
        if (v215 == v216) {
          goto LABEL_362;
        }
      }
      SipTransportLayer::localClientAddress((SipTransportLayer *)&v306, a1);
      if (v306.__r_.__value_.__r.__words[0])
      {
        SipTransportLayer::localClientAddress((SipTransportLayer *)&v303, a1);
        uint64_t v220 = ((uint64_t (*)(std::__shared_weak_count *))v303->__vftable[3].~__shared_weak_count_0)(v303);
        if (v300[7] >= 0) {
          v221 = (void *)v300[7];
        }
        else {
          v221 = __p[1];
        }
        v222 = (void *)*(unsigned __int8 *)(v220 + 23);
        int v223 = (char)v222;
        if ((char)v222 < 0) {
          v222 = *(void **)(v220 + 8);
        }
        if (v221 == v222)
        {
          if (v223 >= 0) {
            v224 = (unsigned __int8 *)v220;
          }
          else {
            v224 = *(unsigned __int8 **)v220;
          }
          if ((v300[7] & 0x80) != 0)
          {
            BOOL v232 = memcmp(__p[0], v224, (size_t)__p[1]) == 0;
          }
          else if (v300[7])
          {
            uint64_t v225 = v300[7] - 1;
            v226 = __p;
            do
            {
              int v228 = *(unsigned __int8 *)v226;
              v226 = (void **)((char *)v226 + 1);
              int v227 = v228;
              int v230 = *v224++;
              int v229 = v230;
              BOOL v43 = v225-- != 0;
              char v231 = v43;
              BOOL v232 = v227 == v229;
            }
            while (v227 == v229 && (v231 & 1) != 0);
          }
          else
          {
            BOOL v232 = 1;
          }
        }
        else
        {
          BOOL v232 = 0;
        }
        if (v304) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v304);
        }
        BOOL v233 = !v232;
      }
      else
      {
        BOOL v233 = 0;
      }
      if (v306.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v306.__r_.__value_.__l.__size_);
      }
      if ((v300[7] & 0x80) == 0) {
        goto LABEL_306;
      }
LABEL_305:
      operator delete(__p[0]);
      goto LABEL_306;
    }
  }
LABEL_362:
  int8x8_t v260 = a1[247];
  if (*(void *)&a1[248] == *(void *)&v260) {
    goto LABEL_192;
  }
  int8x8_t v261 = a1[250];
  long long v262 = (void *)(*(void *)&v260 + 8 * (*(void *)&v261 >> 4));
  long long v263 = (void *)(*v262 + 408 * (v261.i8[0] & 0xF));
  uint64_t v264 = *(void *)(*(void *)&v260 + (((*(void *)&a1[251] + *(void *)&v261) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 408 * ((a1[251].i32[0] + v261.i32[0]) & 0xF);
  if (v263 == (void *)v264) {
    goto LABEL_192;
  }
  char v296 = 0;
  long long v265 = a1 + 5;
  uint64_t v290 = *(void *)(*(void *)&v260 + (((*(void *)&a1[251] + *(void *)&v261) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 408 * ((a1[251].i32[0] + v261.i32[0]) & 0xF);
  while (1)
  {
    uint64_t v266 = (*(uint64_t (**)(int8x8_t *))(*(void *)v265 + 64))(a1 + 5);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v265 + 16))(a1 + 5, v266);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v266 + 8), (uint64_t)"trying to match proxy ", 22);
    *(unsigned char *)(v266 + 17) = 0;
    (*(void (**)(void *, uint64_t))(*v263 + 40))(v263, v266);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v266 + 64))(v266, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v266 + 17) = 0;
    if (v263[6]) {
      break;
    }
    SipHost::resolve((SipHost *)(v263 + 1), 1, (uint64_t)__p);
    int v267 = (*(uint64_t (**)(void *, void))(*(void *)__p[1] + 24))(__p[1], *(unsigned int *)v300);
    ImsResult::~ImsResult((ImsResult *)__p);
    if (!v267) {
      break;
    }
    uint64_t v268 = (*(uint64_t (**)(int8x8_t *))(*(void *)v265 + 64))(a1 + 5);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v265 + 16))(a1 + 5, v268);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v268 + 8), (uint64_t)"unable to resolve proxy ", 24);
    *(unsigned char *)(v268 + 17) = 0;
    (*(void (**)(void *, uint64_t))(*v263 + 40))(v263, v268);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v268 + 64))(v268, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v268 + 17) = 0;
LABEL_386:
    v263 += 51;
    if ((void *)((char *)v263 - *v262) == (void *)6528)
    {
      long long v276 = (void *)v262[1];
      ++v262;
      long long v263 = v276;
    }
    if (v263 == (void *)v264) {
      goto LABEL_407;
    }
  }
  long long v269 = (std::__shared_weak_count *)a1[2];
  if (v269)
  {
    long long v270 = std::__shared_weak_count::lock(v269);
    if (v270) {
      int8x8_t v271 = a1[1];
    }
    else {
      int8x8_t v271 = 0;
    }
  }
  else
  {
    int8x8_t v271 = 0;
    long long v270 = 0;
  }
  (*(void (**)(void **__return_ptr, void *))v263[1])(__p, v263 + 1);
  long long v272 = __p[0];
  (**(void (***)(std::string *__return_ptr, uint64_t))&a1[37])(&v306, (uint64_t)&a1[37]);
  int v273 = (*(uint64_t (**)(void *, std::string *, uint64_t))(*(void *)v272 + 104))(v272, &v306, 1);
  if (v306.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v306.__r_.__value_.__l.__size_);
  }
  if (__p[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
  }
  if (v273)
  {
    SipUri::operator=((SipUri *)&a1[36], (uint64_t)v263);
    uint64_t v274 = (*(uint64_t (**)(int8x8_t *))(*(void *)v265 + 64))(a1 + 5);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v265 + 16))(a1 + 5, v274);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v274 + 8), (uint64_t)"found proxy to use (addresses equal): ", 38);
    *(unsigned char *)(v274 + 17) = 0;
    (*(void (**)(void *, uint64_t))(*v263 + 40))(v263, v274);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v274 + 64))(v274, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_381:
    int v275 = 0;
    *(unsigned char *)(v274 + 17) = 0;
LABEL_382:
    char v296 = 1;
    goto LABEL_383;
  }
  if (SipTransportLayer::usingNullTransport((std::__shared_weak_count **)a1))
  {
    SipUri::operator=((SipUri *)&a1[36], (uint64_t)v263);
    uint64_t v274 = (*(uint64_t (**)(int8x8_t *))(*(void *)v265 + 64))(a1 + 5);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v265 + 16))(a1 + 5, v274);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v274 + 8), (uint64_t)"found proxy to use (using null transport): ", 43);
    *(unsigned char *)(v274 + 17) = 0;
    (*(void (**)(void *, uint64_t))(*v263 + 40))(v263, v274);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v274 + 64))(v274, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_381;
  }
  if (v271)
  {
    uint64_t v277 = *(void *)(*(void *)&v271 + 136);
    uint64_t v278 = *(void *)(v277 + 656);
    long long v279 = *(std::__shared_weak_count **)(v277 + 664);
    if (v279) {
      atomic_fetch_add_explicit(&v279->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SipTransportLayer::localClientAddress((SipTransportLayer *)__p, a1);
    (*(void (**)(std::string *__return_ptr, void *))(*v263 + 48))(&v306, v263);
    int v280 = (*(uint64_t (**)(uint64_t, void **, std::string *))(*(void *)v278 + 96))(v278, __p, &v306);
    if (v306.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v306.__r_.__value_.__l.__size_);
    }
    if (__p[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
    }
    if (v279)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v279);
      if (v280)
      {
LABEL_399:
        SipUri::operator=((SipUri *)&a1[36], (uint64_t)v263);
        uint64_t v264 = v290;
        uint64_t v281 = (*(uint64_t (**)(int8x8_t *))(*(void *)v265 + 64))(a1 + 5);
        (*(void (**)(int8x8_t *, uint64_t))(*(void *)v265 + 16))(a1 + 5, v281);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v281 + 8), (uint64_t)"found proxy to use (reachable): ", 32);
        *(unsigned char *)(v281 + 17) = 0;
        (*(void (**)(void *, uint64_t))(*v263 + 40))(v263, v281);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v281 + 64))(v281, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v281 + 17) = 0;
        uint64_t v282 = (uint64_t)a1[123];
        SipTransportLayer::localClientAddress((SipTransportLayer *)__p, a1);
        SipHost::ipAddress((SipHost *)&a1[37], &v306);
        ImsNetworkReachabilityMonitor::startMonitoring(v282, (uint64_t)__p, (uint64_t)&v306);
        if (v306.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v306.__r_.__value_.__l.__size_);
        }
        if (__p[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
        }
        int v275 = 0;
        goto LABEL_382;
      }
    }
    else if (v280)
    {
      goto LABEL_399;
    }
    int v275 = 1;
    uint64_t v264 = v290;
  }
  else
  {
    int v275 = 1;
  }
LABEL_383:
  if (v270) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v270);
  }
  if (v275) {
    goto LABEL_386;
  }
LABEL_407:
  if (v296)
  {
    uint64_t v283 = (*(uint64_t (**)(int8x8_t *))(*(void *)&a1[5] + 64))(a1 + 5);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)&a1[5] + 16))(a1 + 5, v283);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v283 + 8), (uint64_t)"transport is already initialized", 32);
    *(unsigned char *)(v283 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v283 + 64))(v283, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v283 + 17) = 0;
    *(_OWORD *)&v300[8] = 0u;
    long long v301 = 0u;
    long long v302 = 0u;
    __p[0] = &unk_1F20B2680;
    __p[1] = &_bambiDomain;
    *(_DWORD *)v300 = 0;
    SipTransportLayer::notifyDelegate((SipTransportLayer *)a5, (const ImsResult *)a1, (const std::string *)__p, a4);
    ImsResult::~ImsResult((ImsResult *)__p);
    return;
  }
LABEL_192:
  uint64_t v169 = a1 + 5;
  uint64_t v170 = (*(uint64_t (**)(int8x8_t *))(*(void *)&a1[5] + 64))(a1 + 5);
  (*(void (**)(int8x8_t *, uint64_t))(*(void *)&a1[5] + 16))(a1 + 5, v170);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v170 + 8), (uint64_t)"Desired proxies cannot be reached by the existing transport.  Transport will be initialized.", 92);
  *(unsigned char *)(v170 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v170 + 64))(v170, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v170 + 17) = 0;
  SipTransportLayer::closeTransports((SipTransportLayer *)a1);
  SipTransportLayer::cancelTransportInit((SipTransportLayer *)a1);
  int8x8_t v171 = a1[20];
  uint64_t v172 = (std::__shared_weak_count *)a1[21];
  if (v172)
  {
    atomic_fetch_add_explicit(&v172->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v172->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(_DWORD *)((*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 16))(a1) + 568))
  {
    if (v172) {
      atomic_fetch_add_explicit(&v172->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    v308 = 0;
    uint64_t v173 = operator new(0x20uLL);
    *uint64_t v173 = &unk_1F20C5DA8;
    v173[1] = a1;
    v173[2] = v171;
    v173[3] = v172;
    v308 = v173;
    (*(void (**)(int8x8_t *))(*(void *)a1 + 16))(a1);
    SipTimerContainer::startTimer(a1 + 101, (uint64_t)"TransportInitTimeout");
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v307);
  }
  a1[35] = (int8x8_t)a4;
  a1[119].i32[0] = 0;
  memset(&v298, 0, sizeof(v298));
  uint64_t v174 = (*(uint64_t (**)(int8x8_t *))(*(void *)a1 + 16))(a1);
  if (*(char *)(v174 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v298, *(const std::string::value_type **)v174, *(void *)(v174 + 8));
  }
  else {
    std::string v298 = *(std::string *)v174;
  }
  std::string::size_type v175 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
  LOBYTE(v176) = *((unsigned char *)&v298.__r_.__value_.__s + 23);
  std::string::size_type size = v298.__r_.__value_.__l.__size_;
  if ((v298.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v178 = HIBYTE(v298.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v178 = v298.__r_.__value_.__l.__size_;
  }
  if (!v178)
  {
    uint64_t v179 = (*(uint64_t (**)(int8x8_t *))(*(void *)v169 + 64))(a1 + 5);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v169 + 16))(a1 + 5, v179);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v179 + 8), (uint64_t)"no local interface specified.  I'll pick one.", 45);
    *(unsigned char *)(v179 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v179 + 64))(v179, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v179 + 17) = 0;
    memset(&v306, 0, sizeof(v306));
    v303 = 0;
    v304 = 0;
    uint64_t v305 = 0;
    uint64_t v180 = (std::__shared_weak_count *)a1[2];
    if (v180)
    {
      uint64_t v181 = std::__shared_weak_count::lock(v180);
      if (v181)
      {
        int8x8_t v182 = a1[1];
        if (v182)
        {
          uint64_t v183 = *(void *)(*(void *)&v182 + 136);
          uint64_t v184 = *(void *)(v183 + 656);
          uint64_t v185 = *(std::__shared_weak_count **)(v183 + 664);
          if (v185) {
            atomic_fetch_add_explicit(&v185->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(void **__return_ptr))(*(void *)v184 + 56))(__p);
          int v186 = (*(uint64_t (**)(void *, void))(*(void *)__p[1] + 24))(__p[1], *(unsigned int *)v300);
          ImsResult::~ImsResult((ImsResult *)__p);
          if (v185) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v185);
          }
          if (v186)
          {
            uint64_t v187 = (*(uint64_t (**)(int8x8_t *))(*(void *)v169 + 56))(a1 + 5);
            (*(void (**)(int8x8_t *, uint64_t))(*(void *)v169 + 16))(a1 + 5, v187);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v187 + 8), (uint64_t)"No network interfaces available", 31);
            *(unsigned char *)(v187 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v187 + 64))(v187, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v187 + 17) = 0;
            std::string::basic_string[abi:ne180100]<0>(&v297, "");
            goto LABEL_225;
          }
          v289 = v304;
          v293 = v303;
          if (v303 != v304)
          {
            v285 = v181;
            v287 = v172;
            uint64_t v238 = "can't reach ";
            do
            {
              int8x8_t v239 = a1[247];
              if (*(void *)&a1[248] != *(void *)&v239)
              {
                int8x8_t v240 = a1[250];
                v241 = (void *)(*(void *)&v239 + 8 * (*(void *)&v240 >> 4));
                uint64_t v242 = *v241 + 408 * (v240.i8[0] & 0xF);
                uint64_t v243 = *(void *)(*(void *)&v239
                                 + (((*(void *)&a1[251] + *(void *)&v240) >> 1) & 0x7FFFFFFFFFFFFFF8))
                     + 408 * ((a1[251].i32[0] + v240.i32[0]) & 0xF);
                if (v242 != v243)
                {
                  v295 = v293->__vftable;
                  p_on_zero_shared_weauint64_t k = (const std::string *)&v293->__on_zero_shared_weak;
                  do
                  {
                    long long v245 = (std::__shared_weak_count *)a1[2];
                    if (v245)
                    {
                      long long v246 = std::__shared_weak_count::lock(v245);
                      if (v246)
                      {
                        int8x8_t v247 = a1[1];
                        if (v247)
                        {
                          long long v248 = v238;
                          uint64_t v249 = *(void *)(*(void *)&v247 + 136);
                          uint64_t v250 = *(void *)(v249 + 656);
                          v251 = *(std::__shared_weak_count **)(v249 + 664);
                          if (v251) {
                            atomic_fetch_add_explicit(&v251->__shared_owners_, 1uLL, memory_order_relaxed);
                          }
                          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v242 + 48))(__p, v242);
                          int v252 = (*(uint64_t (**)(uint64_t, std::__shared_weak_count_vtbl *, void **))(*(void *)v250 + 88))(v250, v295, __p);
                          if (__p[1]) {
                            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
                          }
                          if (v251)
                          {
                            std::__shared_weak_count::__release_shared[abi:ne180100](v251);
                            if (v252) {
                              goto LABEL_359;
                            }
                          }
                          else if (v252)
                          {
LABEL_359:
                            uint64_t v258 = (*(uint64_t (**)(int8x8_t *))(*(void *)v169 + 64))(a1 + 5);
                            (*(void (**)(int8x8_t *, uint64_t))(*(void *)v169 + 16))(a1 + 5, v258);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v258 + 8), (uint64_t)"proxy ", 6);
                            *(unsigned char *)(v258 + 17) = 0;
                            (*(void (**)(uint64_t, uint64_t))(*(void *)v242 + 40))(v242, v258);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v258 + 8), (uint64_t)" is reachable via interface ", 28);
                            *(unsigned char *)(v258 + 17) = 0;
                            (*(void (**)(uint64_t, const std::string *))(*(void *)v258 + 32))(v258, p_on_zero_shared_weak);
                            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v258 + 64))(v258, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                            *(unsigned char *)(v258 + 17) = 0;
                            std::__shared_weak_count::__release_shared[abi:ne180100](v246);
                            std::string::operator=(&v306, p_on_zero_shared_weak);
                            SipUri::operator=((SipUri *)&a1[36], v242);
                            goto LABEL_360;
                          }
                          uint64_t v238 = v248;
                        }
                      }
                    }
                    else
                    {
                      long long v246 = 0;
                    }
                    uint64_t v253 = (*(uint64_t (**)(int8x8_t *))(*(void *)v169 + 64))(a1 + 5);
                    (*(void (**)(int8x8_t *, uint64_t))(*(void *)v169 + 16))(a1 + 5, v253);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v253 + 8), (uint64_t)v238, 12);
                    *(unsigned char *)(v253 + 17) = 0;
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v242 + 40))(v242, v253);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v253 + 8), (uint64_t)" via interface ", 15);
                    *(unsigned char *)(v253 + 17) = 0;
                    (*(void (**)(uint64_t, const std::string *))(*(void *)v253 + 32))(v253, p_on_zero_shared_weak);
                    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v253 + 64))(v253, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(unsigned char *)(v253 + 17) = 0;
                    if (v246) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v246);
                    }
                    v242 += 408;
                    if (v242 - *v241 == 6528)
                    {
                      uint64_t v254 = v241[1];
                      ++v241;
                      uint64_t v242 = v254;
                    }
                  }
                  while (v242 != v243);
                }
              }
              v293 = (std::__shared_weak_count *)((char *)v293 + 8);
            }
            while (v293 != v289);
LABEL_360:
            uint64_t v181 = v285;
            uint64_t v172 = v287;
          }
        }
      }
    }
    else
    {
      uint64_t v181 = 0;
    }
    unint64_t v188 = v303;
    unint64_t v189 = v304;
    while (v188 != v189)
    {
      if (v188->__vftable) {
        (*((void (**)(std::__shared_weak_count_vtbl *))v188->~__shared_weak_count + 1))(v188->__vftable);
      }
      unint64_t v188 = (std::__shared_weak_count *)((char *)v188 + 8);
    }
    std::string::size_type v190 = HIBYTE(v306.__r_.__value_.__r.__words[2]);
    if ((v306.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v190 = v306.__r_.__value_.__l.__size_;
    }
    if (!v190)
    {
      uint64_t v191 = (*(uint64_t (**)(int8x8_t *))(*(void *)v169 + 56))(a1 + 5);
      (*(void (**)(int8x8_t *, uint64_t))(*(void *)v169 + 16))(a1 + 5, v191);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v191 + 8), (uint64_t)"can't find a suitable local address for proxies in list", 55);
      *(unsigned char *)(v191 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v191 + 64))(v191, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v191 + 17) = 0;
    }
    std::string v297 = v306;
    memset(&v306, 0, sizeof(v306));
    if (v181) {
LABEL_225:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v181);
    if (v303)
    {
      v304 = v303;
      operator delete(v303);
    }
    if (SHIBYTE(v306.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v306.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v298.__r_.__value_.__l.__data_);
    }
    std::string v298 = v297;
    std::string::size_type v175 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v297.__r_.__value_.__l.__size_;
    std::string::size_type v176 = HIBYTE(v297.__r_.__value_.__r.__words[2]);
  }
  if ((v176 & 0x80u) != 0) {
    std::string::size_type v175 = size;
  }
  if (v175)
  {
    v192 = (std::__shared_weak_count *)a1[2];
    if (v192)
    {
      long long v193 = std::__shared_weak_count::lock(v192);
      if (v193)
      {
        uint64_t v194 = v193;
        int8x8_t v195 = a1[1];
        if (v195)
        {
          SipTransportLayer::setState((SipTransportLayer *)a1, (const SipTransportLayer::State *)&unk_1EBBDC018);
          uint64_t v196 = *(void *)(*(void *)&v195 + 136);
          uint64_t v197 = *(void *)(v196 + 656);
          long long v198 = *(std::__shared_weak_count **)(v196 + 664);
          if (v198) {
            atomic_fetch_add_explicit(&v198->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v199 = (NetworkInterface *)(*(uint64_t (**)(uint64_t, std::string *))(*(void *)v197 + 64))(v197, &v298);
          SipTransportLayer::setInterface((SipTransportLayer *)a1, v199);
          if (v198) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v198);
          }
          *(_OWORD *)&v306.__r_.__value_.__l.__data_ = 0uLL;
          if (a1[133])
          {
            SipTransportLayer::resolveLocalAddressFromProxies((SipTransportLayer *)__p, (uint64_t)a1, 1);
            uint64_t v200 = __p[0];
            unint64_t v201 = (std::__shared_weak_count *)__p[1];
            if (__p[1])
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
              std::__shared_weak_count::__release_shared[abi:ne180100](v201);
            }
            v306.__r_.__value_.__r.__words[0] = (std::string::size_type)v200;
            v306.__r_.__value_.__l.__size_ = (std::string::size_type)v201;
            if (v200)
            {
              uint64_t v202 = (*(uint64_t (**)(int8x8_t *))(*(void *)v169 + 64))(a1 + 5);
              (*(void (**)(int8x8_t *, uint64_t))(*(void *)v169 + 16))(a1 + 5, v202);
              LoggableString::LoggableString((std::string *)__p, &v298);
              (*(void (**)(uint64_t, void **))(*(void *)v202 + 40))(v202, __p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v202 + 8), (uint64_t)" is already up", 14);
              *(unsigned char *)(v202 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v202 + 64))(v202, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v202 + 17) = 0;
              if ((v300[7] & 0x80000000) != 0) {
                operator delete(__p[0]);
              }
              SipHost::SipHost((uint64_t)__p, (uint64_t)&v306);
              SipUri::makeSipUri((uint64_t)&a1[140]);
              SipHost::operator=((uint64_t)&a1[141], (uint64_t)__p);
              a1[180].i8[0] = 0;
              SipHost::~SipHost((SipHost *)__p);
              SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress((SipTransportLayer *)a1);
              goto LABEL_350;
            }
          }
          else
          {
            uint64_t v236 = (*(uint64_t (**)(int8x8_t *))(*(void *)v169 + 64))(a1 + 5);
            (*(void (**)(int8x8_t *, uint64_t))(*(void *)v169 + 16))(a1 + 5, v236);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v236 + 8), (uint64_t)"waiting for ", 12);
            *(unsigned char *)(v236 + 17) = 0;
            LoggableString::LoggableString((std::string *)__p, &v298);
            (*(void (**)(uint64_t, void **))(*(void *)v236 + 40))(v236, __p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v236 + 8), (uint64_t)" to come up", 11);
            *(unsigned char *)(v236 + 17) = 0;
            (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v236 + 64))(v236, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(unsigned char *)(v236 + 17) = 0;
            if ((v300[7] & 0x80000000) != 0) {
              operator delete(__p[0]);
            }
            unint64_t v201 = 0;
          }
          if (!NetworkInterfaceMonotorManager::_instance) {
            operator new();
          }
          if (a1[122].i8[7] < 0) {
            int8x8_t v237 = a1[121];
          }
          else {
            int8x8_t v237 = (int8x8_t)a1[122].u8[7];
          }
          if (!*(void *)&v237)
          {
            uint64_t v255 = *(void *)(*(void *)&v195 + 136);
            v256 = *(std::__shared_weak_count **)(v255 + 656);
            long long v257 = *(std::__shared_weak_count **)(v255 + 664);
            v303 = v256;
            v304 = v257;
            if (v257) {
              atomic_fetch_add_explicit(&v257->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            NetworkInterfaceMonotorManager::createMonitor((std::string *)__p);
          }
          NetworkInterfaceMonotorManager::startMonitoring((void *)NetworkInterfaceMonotorManager::_instance, (unsigned __int8 *)&a1[120], &v298, 3);
LABEL_350:
          if (v201) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v201);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v194);
      }
    }
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(void *)a5 = &unk_1F20B2680;
    *(void *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 0;
  }
  else
  {
    *(_OWORD *)&v300[8] = 0u;
    long long v301 = 0u;
    long long v302 = 0u;
    __p[0] = &unk_1F20B2680;
    __p[1] = &_bambiDomain;
    *(_DWORD *)v300 = 0x40000000;
    BOOL v203 = (const std::string *)ImsResult::operator<<<char [39]>((uint64_t)__p, "no usable network interfaces available");
    ImsResult::ImsResult((ImsResult *)a5, v203);
    ImsResult::~ImsResult((ImsResult *)__p);
  }
  if (SHIBYTE(v298.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v298.__r_.__value_.__l.__data_);
  }
  if (v172)
  {
    std::__shared_weak_count::__release_weak(v172);
    std::__shared_weak_count::__release_weak(v172);
  }
}

void sub_1C537AF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28)
{
}

uint64_t SipTransportLayer::usingNullTransport(std::__shared_weak_count **this)
{
  uint64_t v2 = std::__shared_weak_count::lock(this[2]);
  uint64_t shared_weak_owners = this[1][5].__shared_weak_owners_;
  uint64_t v4 = *(void *)(shared_weak_owners + 656);
  uint64_t v5 = *(std::__shared_weak_count **)(shared_weak_owners + 664);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 136))(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v6;
}

void sub_1C537B3D8(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipTransportLayer::notifyDelegate(SipTransportLayer *this, const ImsResult *a2, const std::string *a3, uint64_t a4)
{
  int8x8_t v7 = (char *)a2 + 40;
  uint64_t v6 = *((void *)a2 + 5);
  if (a4)
  {
    uint64_t v10 = (*(uint64_t (**)(char *))(v6 + 64))((char *)a2 + 40);
    (*(void (**)(char *, uint64_t))(*((void *)a2 + 5) + 16))(v7, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"notifying delegate of transport initialization with result ", 59);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(const std::string *, uint64_t))(a3->__r_.__value_.__r.__words[0] + 16))(a3, v10);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, char *, const std::string *))(*(void *)a4 + 16))(a4, (char *)a2 + 288, a3);
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(char *))(v6 + 48))((char *)a2 + 40);
    (*(void (**)(char *, uint64_t))(*(void *)v7 + 16))(v7, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"no delegate to notify of transport initialization", 49);
    *(unsigned char *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v11 + 17) = 0;
  }
  ImsResult::ImsResult(this, a3);
}

void SipTransportLayer::initializeTransportGroup(SipTransportLayer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 1);
      if (!v5)
      {
LABEL_72:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return;
      }
      SipTransportLayer::setState(this, (const SipTransportLayer::State *)&unk_1EBBDC058);
      v47.__r_.__value_.__r.__words[2] = 0;
      uint64_t v48 = 0;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      v47.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      uint64_t v49 = 0;
      uint64_t v45 = 0;
      unint64_t v46 = 0;
      if (*(unsigned char *)((*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 16))(this) + 441)
        && !*((_WORD *)this + 164))
      {
        uint64_t v6 = (*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 16))(this);
        SipHop::setHostPort((SipTransportLayer *)((char *)this + 288), *(_WORD *)(v6 + 434));
      }
      memset(&v44, 0, sizeof(v44));
      uint64_t v7 = *((void *)this + 133);
      if (v7)
      {
        if (*(char *)(v7 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)(v7 + 32), *(void *)(v7 + 40));
        }
        else {
          std::string v44 = *(std::string *)(v7 + 32);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v44, "");
      }
      if (*(unsigned char *)(v5 + 2681))
      {
        uint64_t v8 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 64))((char *)this + 40);
        (*(void (**)(char *, uint64_t))(*((void *)this + 5) + 16))((char *)this + 40, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"setting local SIP port to be ephemeral", 38);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        unsigned __int16 v9 = 0;
        *(unsigned char *)(v8 + 17) = 0;
      }
      else
      {
        if (!*(_WORD *)((*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 16))(this) + 432)) {
          goto LABEL_17;
        }
        uint64_t v10 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 64))((char *)this + 40);
        (*(void (**)(char *, uint64_t))(*((void *)this + 5) + 16))((char *)this + 40, v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"defaulting local SIP port to ", 29);
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(SipTransportLayer *))(*(void *)this + 16))(this);
        std::ostream::operator<<();
        *(unsigned char *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v10 + 17) = 0;
        unsigned __int16 v9 = *(_WORD *)((*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 16))(this) + 432);
      }
      SipHop::setHostPort((SipTransportLayer *)((char *)this + 1120), v9);
LABEL_17:
      uint64_t v11 = *(void *)(v5 + 136);
      uint64_t v12 = *(void *)(v11 + 656);
      uint64_t v13 = *(std::__shared_weak_count **)(v11 + 664);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v14 = (std::__shared_weak_count *)*((void *)this + 21);
      if (!v14 || (uint64_t v15 = *((void *)this + 20), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v39 = v15;
      int8x8_t v40 = v16;
      SipHost::ipAddress((SipTransportLayer *)((char *)this + 1128), &v56);
      (**((void (***)(uint64_t *__return_ptr, char *))this + 37))(&v54, (char *)this + 296);
      uint64_t v17 = (*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 16))(this);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t *, uint64_t *, long long *, uint64_t *, std::string *, void))(*(void *)v12 + 128))(&__p, v12, &v45, &v39, &v56, &v54, &v44, *(unsigned __int8 *)(v17 + 441));
      ImsResult::operator=((uint64_t)&v47, (uint64_t)&__p);
      ImsResult::~ImsResult((ImsResult *)&__p);
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
      if (*((void *)&v56 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v56 + 1));
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      SipUri::operator=((SipTransportLayer *)((char *)this + 1528), (uint64_t)this + 1120);
      char v18 = (*(uint64_t (**)(std::string::size_type, void))(*(void *)v47.__r_.__value_.__l.__size_ + 24))(v47.__r_.__value_.__l.__size_, LODWORD(v47.__r_.__value_.__r.__words[2]));
      if (v45) {
        char v19 = v18;
      }
      else {
        char v19 = 1;
      }
      int v21 = (char *)this + 40;
      uint64_t v20 = *((void *)this + 5);
      if ((v19 & 1) == 0)
      {
        uint64_t v25 = (*(uint64_t (**)(char *))(v20 + 64))((char *)this + 40);
        (*(void (**)(char *, uint64_t))(*(void *)v21 + 16))((char *)this + 40, v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v25 + 8), (uint64_t)"initialized transport ", 22);
        *(unsigned char *)(v25 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(void *)v45 + 104))(v45, v25);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v25 + 17) = 0;
        SipTransportLayer::setState(this, (const SipTransportLayer::State *)&unk_1EBBDBFF8);
        uint64_t v27 = v45;
        int8x8_t v26 = v46;
        if (v46) {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((void *)this + 124) = v27;
        uint64_t v28 = (std::__shared_weak_count *)*((void *)this + 125);
        *((void *)this + 125) = v26;
        if (v28)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
          uint64_t v27 = v45;
        }
        *((unsigned char *)this + 2017) = 0;
        uint64_t v29 = v46;
        if (v46) {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((void *)this + 130) = v27;
        std::string v30 = (std::__shared_weak_count *)*((void *)this + 131);
        *((void *)this + 13bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v29;
        if (v30)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          uint64_t v27 = *((void *)this + 130);
        }
        LoggableString::LoggableString((LoggableString *)&__p, "TransportLayer");
        (*(void (**)(uint64_t, void **))(*(void *)v27 + 32))(v27, &__p);
        if (v43 < 0) {
          operator delete(__p);
        }
        SipTransportLayer::notifyDelegate((SipTransportLayer *)v38, this, &v47, *((void *)this + 35));
        ImsResult::~ImsResult((ImsResult *)v38);
        SipTransportLayer::cancelTransportInit(this);
        goto LABEL_67;
      }
      uint64_t v22 = (*(uint64_t (**)(char *))(v20 + 56))((char *)this + 40);
      (*(void (**)(char *, uint64_t))(*(void *)v21 + 16))((char *)this + 40, v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"unable to initialize transport: ", 32);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(std::string *, uint64_t))(v47.__r_.__value_.__r.__words[0] + 16))(&v47, v22);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v22 + 17) = 0;
      (*(void (**)(SipTransportLayer *, std::string *))(*(void *)this + 64))(this, &v47);
      if (v49 && *(_DWORD *)(v49 + 16) == 65 && *(uint64_t **)(v49 + 8) == &_posixDomain && *(unsigned char *)(v5 + 2681))
      {
        uint64_t v23 = (*(uint64_t (**)(char *))(*(void *)v21 + 56))((char *)this + 40);
        (*(void (**)(char *, uint64_t))(*(void *)v21 + 16))((char *)this + 40, v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"Proxy ", 6);
        *(unsigned char *)(v23 + 17) = 0;
        (*(void (**)(char *, uint64_t))(*((void *)this + 36) + 40))((char *)this + 288, v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" is unreachable via local interface address ", 44);
        *(unsigned char *)(v23 + 17) = 0;
        (*(void (**)(char *, uint64_t))(*((void *)this + 140) + 40))((char *)this + 1120, v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)".  Trying the next one", 22);
        *(unsigned char *)(v23 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v23 + 17) = 0;
        if (*((void *)this + 133) && SipUri::isValidUri((SipTransportLayer *)((char *)this + 288)))
        {
          SipHost::ipAddress((SipTransportLayer *)((char *)this + 1128), &__p);
          int v24 = (*(uint64_t (**)(void *))(*(void *)__p + 88))(__p);
          if (v42) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v42);
          }
          if (v24)
          {
            SipHost::ipAddress((SipTransportLayer *)((char *)this + 1128), &v54);
            IpAddress::asString(&v56);
          }
          long long v56 = 0uLL;
          uint64_t v57 = 0;
          if (NetworkInterface::allAddresses(*((unint64_t **)this + 133), (unint64_t *)&v56, 3, 1))
          {
            uint64_t v33 = *((void *)&v56 + 1);
            uint64_t v34 = v56;
            if ((void)v56 == *((void *)&v56 + 1))
            {
              uint64_t v37 = (*(uint64_t (**)(char *))(*(void *)v21 + 56))((char *)this + 40);
              (*(void (**)(char *, uint64_t))(*(void *)v21 + 16))((char *)this + 40, v37);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"No addresses on ", 16);
              *(unsigned char *)(v37 + 17) = 0;
              (*(void (**)(void, uint64_t))(**((void **)this + 133) + 16))(*((void *)this + 133), v37);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_64;
            }
            if (*((void *)&v56 + 1) - (void)v56 == 16)
            {
              uint64_t v35 = *(void *)v56;
              SipHost::ipAddress((SipTransportLayer *)((char *)this + 1128), &__p);
              char v36 = (*(uint64_t (**)(uint64_t, void **, void))(*(void *)v35 + 104))(v35, &__p, 0);
              if (v42) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v42);
              }
              if (v36)
              {
                uint64_t v37 = (*(uint64_t (**)(char *))(*(void *)v21 + 56))((char *)this + 40);
                (*(void (**)(char *, uint64_t))(*(void *)v21 + 16))((char *)this + 40, v37);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"No other addresses on ", 22);
                *(unsigned char *)(v37 + 17) = 0;
                (*(void (**)(void, uint64_t))(**((void **)this + 133) + 16))(*((void *)this + 133), v37);
                (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_64:
                *(unsigned char *)(v37 + 17) = 0;
LABEL_65:
                std::string __p = &v56;
                std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                goto LABEL_66;
              }
              uint64_t v33 = *((void *)&v56 + 1);
              uint64_t v34 = v56;
            }
            if (v34 != v33) {
              IpAddress::asString(&__p);
            }
            goto LABEL_65;
          }
          uint64_t v37 = (*(uint64_t (**)(char *))(*(void *)v21 + 56))((char *)this + 40);
          (*(void (**)(char *, uint64_t))(*(void *)v21 + 16))((char *)this + 40, v37);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"Unable to get addresses on current interface", 44);
          *(unsigned char *)(v37 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_64;
        }
        uint64_t v31 = (*(uint64_t (**)(char *))(*(void *)v21 + 56))((char *)this + 40);
        (*(void (**)(char *, uint64_t))(*(void *)v21 + 16))((char *)this + 40, v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v31 + 8), (uint64_t)"Invalid state ", 14);
        *(unsigned char *)(v31 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v31 + 17) = 0;
        int64_t v32 = *(void **)(v31 + 8);
        LOBYTE(__p) = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)&__p, 1);
        *(unsigned char *)(v31 + 17) = 0;
        (*(void (**)(char *, uint64_t))(*((void *)this + 36) + 40))((char *)this + 288, v31);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v31 + 17) = 0;
      }
LABEL_66:
      SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(this);
LABEL_67:
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v46);
      }
      ImsResult::~ImsResult((ImsResult *)&v47);
      goto LABEL_72;
    }
  }
}

void sub_1C537CDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  SipHost::~SipHost((SipHost *)&a26);
  a26 = (void *)(v44 - 112);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (a43 < 0) {
    operator delete(__p);
  }
  unint64_t v46 = *(std::__shared_weak_count **)(v44 - 208);
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  ImsResult::~ImsResult((ImsResult *)(v44 - 200));
  std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  _Unwind_Resume(a1);
}

void SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(SipTransportLayer *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  SipTransportLayer::setState(this, (const SipTransportLayer::State *)&unk_1EBBDC038);
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  SipHost::resolve((SipTransportLayer *)((char *)this + 296), 1, (uint64_t)&v25);
  uint64_t v2 = (char *)this + 288;
  if ((*(unsigned int (**)(void, void))(**((void **)&v25 + 1) + 24))(*((void *)&v25 + 1), v26))
  {
    uint64_t v3 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 56))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*((void *)this + 5) + 16))((char *)this + 40, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)"unable to resolve proxy ", 24);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*(void *)v2 + 40))((char *)this + 288, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v3 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v3 + 17) = 0;
    (*(void (**)(long long *, uint64_t))(v25 + 16))(&v25, v3);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v3 + 17) = 0;
    SipTransportLayer::notifyDelegate((SipTransportLayer *)v24, this, (const std::string *)&v25, *((void *)this + 35));
    ImsResult::~ImsResult((ImsResult *)v24);
    SipTransportLayer::cancelTransportInit(this);
  }
  else
  {
    ++*((_DWORD *)this + 238);
    uint64_t v5 = *((void *)this + 20);
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 21);
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v31 = 0;
    uint64_t v6 = operator new(0x20uLL);
    void *v6 = &unk_1F20C5E28;
    v6[1] = this;
    _OWORD v6[2] = v5;
    void v6[3] = v4;
    uint64_t v31 = v6;
    SipTimerContainer::startTimer((int8x8_t *)this + 101, (uint64_t)&qword_1EBBDBFC0);
    std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v30);
    uint64_t v8 = (char *)this + 40;
    uint64_t v7 = *((void *)this + 5);
    if (*((unsigned char *)this + 1056))
    {
      uint64_t v9 = (*(uint64_t (**)(char *))(v7 + 64))((char *)this + 40);
      (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))(v8, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"proxy is already reachable.  Not monitoring reachability, just throttling next attempt", 86);
      *(unsigned char *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v9 + 17) = 0;
    }
    else
    {
      uint64_t v10 = (*(uint64_t (**)(char *))(v7 + 32))((char *)this + 40);
      (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))((char *)this + 40, v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"will attempt transport initialization in ", 41);
      *(unsigned char *)(v10 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"ms", 2);
      *(unsigned char *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v10 + 17) = 0;
      uint64_t v11 = *((void *)this + 123);
      SipHost::ipAddress((SipTransportLayer *)((char *)this + 1128), &v15);
      SipHost::ipAddress((SipTransportLayer *)((char *)this + 296), &v22);
      unsigned __int8 started = ImsNetworkReachabilityMonitor::startMonitoring(v11, (uint64_t)&v15, (uint64_t)&v22);
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if ((started & 1) == 0)
      {
        uint64_t v13 = (*(uint64_t (**)(char *))(*(void *)v8 + 56))((char *)this + 40);
        (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))((char *)this + 40, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"waitUntilProxyIsReachable: unable to monitor reachability to ", 61);
        *(unsigned char *)(v13 + 17) = 0;
        (*(void (**)(char *, uint64_t))(*(void *)v2 + 40))((char *)this + 288, v13);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v13 + 17) = 0;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        uint64_t v15 = &unk_1F20B2680;
        uint64_t v16 = (std::__shared_weak_count *)&_bambiDomain;
        int v17 = 0x40000000;
        unint64_t v14 = (const std::string *)ImsResult::operator<<<char [31]>((uint64_t)&v15, "unable to monitor reachability");
        SipTransportLayer::notifyDelegate((SipTransportLayer *)v21, this, v14, *((void *)this + 35));
        ImsResult::~ImsResult((ImsResult *)v21);
        ImsResult::~ImsResult((ImsResult *)&v15);
        SipTransportLayer::cancelTransportInit(this);
      }
    }
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  ImsResult::~ImsResult((ImsResult *)&v25);
}

void sub_1C537D560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  ImsResult::~ImsResult((ImsResult *)(v3 - 176));
  _Unwind_Resume(a1);
}

void SipTransportLayer::handleTimer(SipTransportLayer *this, unsigned __int8 *a2)
{
  uint64_t v3 = a2[23];
  size_t v4 = *((void *)a2 + 1);
  if ((v3 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = qword_1EBBDBFC8;
  if (byte_1EBBDBFD7 >= 0) {
    uint64_t v6 = byte_1EBBDBFD7;
  }
  if (v5 != v6) {
    goto LABEL_16;
  }
  if (byte_1EBBDBFD7 >= 0) {
    uint64_t v7 = &qword_1EBBDBFC0;
  }
  else {
    uint64_t v7 = (uint64_t *)qword_1EBBDBFC0;
  }
  if ((v3 & 0x80) != 0)
  {
    uint64_t v12 = *(const void **)a2;
    if (memcmp(*(const void **)a2, v7, v4))
    {
      if (v4 != 20)
      {
        if (v4 != 21) {
          return;
        }
        goto LABEL_38;
      }
      goto LABEL_45;
    }
LABEL_34:
    SipTransportLayer::initializeTransportGroup(this);
    return;
  }
  if (!a2[23]) {
    goto LABEL_34;
  }
  uint64_t v8 = a2;
  uint64_t v9 = a2[23];
  while (*v8 == *(unsigned __int8 *)v7)
  {
    ++v8;
    uint64_t v7 = (uint64_t *)((char *)v7 + 1);
    if (!--v9) {
      goto LABEL_34;
    }
  }
LABEL_16:
  if (v5 != 20)
  {
    if (v5 != 21) {
      return;
    }
    if ((v3 & 0x80) == 0)
    {
      if (a2[23])
      {
        uint64_t v10 = "SystemWakeWaitTimeout";
        while (*a2 == *(unsigned __int8 *)v10)
        {
          ++a2;
          ++v10;
          if (!--v3) {
            goto LABEL_39;
          }
        }
        return;
      }
LABEL_39:
      uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 2);
      if (v13)
      {
        unint64_t v14 = std::__shared_weak_count::lock(v13);
        if (v14)
        {
          uint64_t v15 = *((void *)this + 1);
          if (v15)
          {
            if (!*(unsigned char *)(*(void *)(v15 + 136) + 672))
            {
LABEL_49:
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
              return;
            }
          }
        }
      }
      else
      {
        unint64_t v14 = 0;
      }
      uint64_t v17 = *((void *)this + 5);
      *((unsigned char *)this + 2016) = 1;
      uint64_t v18 = (*(uint64_t (**)(char *))(v17 + 64))((char *)this + 40);
      (*(void (**)(char *, uint64_t))(*((void *)this + 5) + 16))((char *)this + 40, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"timed out waiting for system wake event. Processing deferred incoming messages.", 79);
      *(unsigned char *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v18 + 17) = 0;
      SipTransportLayer::processDeferredIncomingMessages(this);
      if (!v14) {
        return;
      }
      goto LABEL_49;
    }
    uint64_t v12 = *(const void **)a2;
LABEL_38:
    if (memcmp(v12, "SystemWakeWaitTimeout", v4)) {
      return;
    }
    goto LABEL_39;
  }
  if ((v3 & 0x80) != 0)
  {
    uint64_t v12 = *(const void **)a2;
LABEL_45:
    if (memcmp(v12, "TransportInitTimeout", v4)) {
      return;
    }
    goto LABEL_46;
  }
  if (!a2[23])
  {
LABEL_46:
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    v19[0] = &unk_1F20B2680;
    v19[1] = &_bambiDomain;
    int v20 = 0x40000000;
    uint64_t v16 = (const std::string *)ImsResult::operator<<<char [25]>((uint64_t)v19, "transport init timed out");
    SipTransportLayer::notifyDelegate((SipTransportLayer *)v24, this, v16, *((void *)this + 35));
    ImsResult::~ImsResult((ImsResult *)v24);
    ImsResult::~ImsResult((ImsResult *)v19);
    SipTransportLayer::cancelTransportInit(this);
    return;
  }
  uint64_t v11 = "TransportInitTimeout";
  while (*a2 == *(unsigned __int8 *)v11)
  {
    ++a2;
    ++v11;
    if (!--v3) {
      goto LABEL_46;
    }
  }
}

void sub_1C537D948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *SipTransportLayer::processDeferredIncomingMessages(SipTransportLayer *this)
{
  if (*((void *)this + 34))
  {
    uint64_t v27 = 0;
    std::string __p = 0;
    uint64_t v29 = 0;
    std::list<IncomingSipMessage *>::list(&v27, *((void *)this + 243) + 32);
    uint64_t v2 = v29;
    if (v29)
    {
      uint64_t v3 = (char *)this + 40;
      while (1)
      {
        size_t v4 = (void **)__p;
        uint64_t v5 = (IncomingSipMessage *)*((void *)__p + 2);
        uint64_t v6 = *(void *)__p;
        *(void *)(v6 + 8) = *((void *)__p + 1);
        *v4[1] = v6;
        uint64_t v29 = v2 - 1;
        operator delete(v4);
        uint64_t v7 = (*(uint64_t (**)(char *))(*(void *)v3 + 32))((char *)this + 40);
        (*(void (**)(char *, uint64_t))(*(void *)v3 + 16))((char *)this + 40, v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"processing deferred ", 20);
        *(unsigned char *)(v7 + 17) = 0;
        (*(void (**)(void **__return_ptr))(**(void **)v5 + 48))(&v24);
        (*(void (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, &v24);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v7 + 17) = 0;
        if (v26 < 0) {
          operator delete(v24);
        }
        uint64_t v8 = *((void *)this + 34);
        uint64_t v9 = *(void *)v5;
        uint64_t v10 = (std::__shared_weak_count *)*((void *)v5 + 2);
        int v24 = (void *)*((void *)v5 + 1);
        long long v25 = v10;
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v11 = *((void *)v5 + 5);
        if (!v11)
        {
          uint64_t v16 = (std::__shared_weak_count *)*((void *)v5 + 4);
          uint64_t v22 = *((void *)v5 + 3);
          long long v23 = v16;
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_21;
        }
        uint64_t v12 = *(std::__shared_weak_count **)(v11 + 304);
        if (!v12) {
          break;
        }
        uint64_t v13 = *(void *)(v11 + 296);
        atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        unint64_t v14 = std::__shared_weak_count::lock(v12);
        std::__shared_weak_count::__release_weak(v12);
        if (!v14 || !v13) {
          goto LABEL_17;
        }
        uint64_t v15 = (std::__shared_weak_count *)*((void *)v5 + 6);
        uint64_t v22 = *((void *)v5 + 5);
        long long v23 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
LABEL_20:
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
LABEL_21:
        (*(void (**)(uint64_t, uint64_t, void **, uint64_t *))(*(void *)v8 + 24))(v8, v9, &v24, &v22);
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
        IncomingSipMessage::~IncomingSipMessage(v5);
        MEMORY[0x1C878E320](v18);
        uint64_t v2 = v29;
        if (!v29) {
          goto LABEL_26;
        }
      }
      unint64_t v14 = 0;
LABEL_17:
      uint64_t v17 = (std::__shared_weak_count *)*((void *)v5 + 4);
      uint64_t v22 = *((void *)v5 + 3);
      long long v23 = v17;
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v14) {
        goto LABEL_21;
      }
      goto LABEL_20;
    }
LABEL_26:
    SipTransportLayer::IncomingMessageList::clear(*((SipTransportLayer::IncomingMessageList **)this + 243));
    return std::__list_imp<unsigned long long>::clear(&v27);
  }
  else
  {
    int v20 = (char *)this + 40;
    uint64_t v21 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 48))((char *)this + 40);
    (*(void (**)(char *, uint64_t))(*(void *)v20 + 16))((char *)this + 40, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"no delegate. Dropping deferred incoming messages", 48);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v21 + 17) = 0;
    return SipTransportLayer::dropDeferredIncomingMessages(this);
  }
}

void sub_1C537DD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
}

void SipTransportLayer::resolveLocalAddressFromProxies(SipTransportLayer *this, uint64_t a2, int a3)
{
  int v3 = a3;
  *(void *)this = 0;
  *((void *)this + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  v49.__r_.__value_.__r.__words[2] = 0;
  uint64_t v50 = 0;
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
  v49.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  uint64_t v51 = 0;
  uint64_t v5 = *(void *)(a2 + 1976);
  if (*(void *)(a2 + 1984) == v5
    || (unint64_t v6 = *(void *)(a2 + 2000),
        uint64_t v7 = (void *)(v5 + 8 * (v6 >> 4)),
        uint64_t v8 = (void *)(*v7 + 408 * (v6 & 0xF)),
        uint64_t v33 = *(void *)(v5 + (((*(void *)(a2 + 2008) + v6) >> 1) & 0x7FFFFFFFFFFFFFF8))
            + 408 * ((*(_DWORD *)(a2 + 2008) + v6) & 0xF),
        v8 == (void *)v33))
  {
    char v10 = 0;
    goto LABEL_42;
  }
  int v9 = 0;
  char v10 = 0;
  uint64_t v11 = a2 + 40;
  std::string v30 = (SipHost *)(a2 + 296);
  uint64_t v31 = (SipUri *)(a2 + 288);
  while (1)
  {
    long long v48 = 0uLL;
    char v43 = (void (**)(void **, uint64_t))&unk_1F20B2680;
    uint64_t v12 = &_bambiDomain;
    uint64_t v44 = (std::__shared_weak_count *)&_bambiDomain;
    uint64_t v45 = 0;
    long long v47 = 0uLL;
    long long v46 = 0uLL;
    if (v8[6])
    {
      uint64_t v13 = 0;
    }
    else
    {
      SipHost::resolve((SipHost *)(v8 + 1), 1, (uint64_t)v42);
      ImsResult::operator=((uint64_t)&v43, (uint64_t)v42);
      ImsResult::~ImsResult((ImsResult *)v42);
      uint64_t v12 = (uint64_t *)v44;
      uint64_t v13 = v45;
    }
    if (!(*(unsigned int (**)(uint64_t *, uint64_t))(*v12 + 24))(v12, v13)) {
      break;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 56))(a2 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(a2 + 40, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"unable to resolve proxy ", 24);
    *(unsigned char *)(v14 + 17) = 0;
    (*(void (**)(void *, uint64_t))(*v8 + 40))(v8, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)": ", 2);
    *(unsigned char *)(v14 + 17) = 0;
    v43[2]((void **)&v43, v14);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v14 + 17) = 0;
    if (!v9
      || ((*(uint64_t (**)(std::string::size_type, void))(*(void *)v49.__r_.__value_.__l.__size_ + 24))(v49.__r_.__value_.__l.__size_, LODWORD(v49.__r_.__value_.__r.__words[2])) & 1) == 0)
    {
      ImsResult::operator=((uint64_t)&v49, (uint64_t)&v43);
    }
    ++v9;
    ImsResult::~ImsResult((ImsResult *)&v43);
LABEL_36:
    v8 += 51;
    if ((void *)((char *)v8 - *v7) == (void *)6528)
    {
      int v24 = (void *)v7[1];
      ++v7;
      uint64_t v8 = v24;
    }
    if (v8 == (void *)v33) {
      goto LABEL_39;
    }
  }
  (*(void (**)(std::string *__return_ptr, void *))(*v8 + 48))(v42, v8);
  int v15 = (*(uint64_t (**)(std::string::size_type))(*(void *)v42[0].__r_.__value_.__l.__data_ + 136))(v42[0].__r_.__value_.__r.__words[0]);
  if (v42[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v42[0].__r_.__value_.__l.__size_);
  }
  uint64_t v16 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 64))(a2 + 40);
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v11 + 16))(a2 + 40, v16);
  (*(void (**)(void, unsigned char *))(**(void **)(a2 + 1064) + 16))(*(void *)(a2 + 1064), v16);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v16[17] = 0;
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 64))(a2 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(a2 + 40, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"looking for a local ", 20);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr, void *))(*v8 + 48))(&v40, v8);
  uint64_t v18 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)v40 + 128))(v40);
  LoggableString::LoggableString(v42, v18);
  (*(void (**)(uint64_t, std::string *))(*(void *)v17 + 40))(v17, v42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" address on ", 12);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(a2 + 1064) + 24))(__p);
  (*(void (**)(uint64_t, void **))(*(void *)v17 + 40))(v17, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" to contact ", 12);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr, void *))(*v8 + 48))(&v36, v8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 40))(v36, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)" whose addressTypeMask=", 23);
  *(unsigned char *)(v17 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (v39 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v42[0].__r_.__value_.__l.__data_);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  uint64_t v40 = 0;
  unint64_t v41 = 0;
  NetworkInterface::firstAddress(*(NetworkInterface **)(a2 + 1064), v15, (int **)&_MergedGlobals_10, &v40);
  uint64_t v19 = v40;
  if (v40)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v40 + 32))(v42, v40);
    long long v20 = *(_OWORD *)&v42[0].__r_.__value_.__l.__data_;
    *(_OWORD *)&v42[0].__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v21 = (std::__shared_weak_count *)*((void *)this + 1);
    *(_OWORD *)this = v20;
    if (v21)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      if (v42[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v42[0].__r_.__value_.__l.__size_);
      }
    }
    SipUri::operator=(v31, (uint64_t)v8);
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 64))(a2 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(a2 + 40, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)"found ", 6);
    *(unsigned char *)(v22 + 17) = 0;
    SipHost::ipAddress(v30, &v36);
    long long v23 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(void *)v36 + 128))(v36);
    LoggableString::LoggableString(v42, v23);
    (*(void (**)(uint64_t, std::string *))(*(void *)v22 + 40))(v22, v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" address ", 9);
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(void, uint64_t))(**(void **)this + 40))(*(void *)this, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v22 + 8), (uint64_t)" on ", 4);
    *(unsigned char *)(v22 + 17) = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a2 + 1064) + 24))(__p);
    (*(void (**)(uint64_t, void **))(*(void *)v22 + 40))(v22, __p);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v22 + 17) = 0;
    if (v39 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42[0].__r_.__value_.__l.__data_);
    }
    if (v37) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    }
  }
  else
  {
    ++v9;
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  ImsResult::~ImsResult((ImsResult *)&v43);
  char v10 = 1;
  if (!v19) {
    goto LABEL_36;
  }
LABEL_39:
  int v3 = a3;
  if (!*(void *)this)
  {
LABEL_42:
    NetworkInterface::firstAddress(*(NetworkInterface **)(a2 + 1064), 3, 1, &v43);
    long long v25 = v43;
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    if (v25)
    {
      uint64_t v26 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 40) + 56))(a2 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 + 40) + 16))(a2 + 40, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)"local address cannot reach any proxies", 38);
      *(unsigned char *)(v26 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v26 + 17) = 0;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      char v43 = (void (**)(void **, uint64_t))&unk_1F20B2680;
      uint64_t v44 = (std::__shared_weak_count *)&_bambiDomain;
      LODWORD(v45) = 1073741842;
      uint64_t v27 = (const std::string *)ImsResult::operator<<<char [31]>((uint64_t)&v43, "network configuration mismatch");
      SipTransportLayer::notifyDelegate((SipTransportLayer *)v35, (const ImsResult *)a2, v27, *(void *)(a2 + 280));
      ImsResult::~ImsResult((ImsResult *)v35);
      ImsResult::~ImsResult((ImsResult *)&v43);
      SipTransportLayer::cancelTransportInit((SipTransportLayer *)a2);
    }
  }
  if (v3 && (v10 & 1) == 0)
  {
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 40) + 56))(a2 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 + 40) + 16))(a2 + 40, v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v28 + 8), (uint64_t)"unable to find resolvable proxy", 31);
    *(unsigned char *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v28 + 17) = 0;
    SipTransportLayer::notifyDelegate((SipTransportLayer *)v34, (const ImsResult *)a2, &v49, *(void *)(a2 + 280));
    ImsResult::~ImsResult((ImsResult *)v34);
    SipTransportLayer::cancelTransportInit((SipTransportLayer *)a2);
  }
  ImsResult::~ImsResult((ImsResult *)&v49);
}

void sub_1C537E960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  ImsResult::~ImsResult((ImsResult *)(v49 - 168));
  uint64_t v51 = *(std::__shared_weak_count **)(a13 + 8);
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
  _Unwind_Resume(a1);
}

void SipTransportLayer::reachabilityChanged(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + 40) & 2) != 0)
  {
    if (ImsUuid::operator==(a1 + 232, (uint64_t)&unk_1EBBDC038))
    {
      *(unsigned char *)(a1 + 1056) = 1;
      if (SipUri::isValidUri((SipUri *)(a1 + 288)) && !*(void *)(a1 + 992) && *(_DWORD *)(a1 + 952) >= 2u)
      {
        SipTimerContainer::cancelAllTimers((SipTimerContainer *)(a1 + 808));
        SipTransportLayer::initializeTransportGroup((SipTransportLayer *)a1);
      }
    }
    else
    {
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v5 = a1 + 40;
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(v6 + 64))(v5);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v7 + 8), (uint64_t)"not waiting for reachability", 28);
      *(unsigned char *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v7 + 17) = 0;
    }
  }
  else
  {
    int v3 = (unsigned char *)(a1 + 40);
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 40) + 64))(a1 + 40);
    (*(void (**)(unsigned char *, uint64_t))(*(void *)v3 + 16))(v3, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"proxy is no longer reachable", 28);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
    v3[1016] = 0;
  }
}

void non-virtual thunk to'SipTransportLayer::reachabilityChanged(uint64_t a1, uint64_t a2)
{
}

void SipTransportLayer::networkInterfaceChanged(SipTransportLayer *this, uint64_t a2, NetworkInterface **a3)
{
  uint64_t v5 = *a3;
  if (*a3)
  {
    uint64_t v7 = *((unsigned __int8 *)this + 263);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *((unsigned __int8 *)this + 263);
    }
    else {
      uint64_t v8 = *((void *)this + 31);
    }
    uint64_t v9 = qword_1EBBDC028;
    if (byte_1EBBDC037 >= 0) {
      uint64_t v9 = byte_1EBBDC037;
    }
    if (v8 == v9)
    {
      char v10 = (const void **)((char *)this + 240);
      if (byte_1EBBDC037 >= 0) {
        uint64_t v11 = &qword_1EBBDC020;
      }
      else {
        uint64_t v11 = (uint64_t *)qword_1EBBDC020;
      }
      if ((v7 & 0x80) == 0)
      {
        if (*((unsigned char *)this + 263))
        {
          while (*(unsigned __int8 *)v10 == *(unsigned __int8 *)v11)
          {
            char v10 = (const void **)((char *)v10 + 1);
            uint64_t v11 = (uint64_t *)((char *)v11 + 1);
            if (!--v7) {
              goto LABEL_23;
            }
          }
          goto LABEL_21;
        }
        goto LABEL_23;
      }
      if (!memcmp(*v10, v11, *((void *)this + 31)))
      {
LABEL_23:
        *a3 = 0;
        SipTransportLayer::setInterface(this, v5);
        uint64_t v19 = *((void *)this + 33);
        if (v19)
        {
          (*(void (**)(void *__return_ptr))(*(void *)v19 + 56))(v32);
          ImsResult::~ImsResult((ImsResult *)v32);
        }
        long long v20 = (char *)this + 40;
        uint64_t v21 = (unsigned char *)(*(uint64_t (**)(char *))(*((void *)this + 5) + 64))((char *)this + 40);
        (*(void (**)(char *, unsigned char *))(*((void *)this + 5) + 16))((char *)this + 40, v21);
        (*(void (**)(NetworkInterface *, unsigned char *))(*(void *)v5 + 16))(v5, v21);
        (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v21[17] = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        SipTransportLayer::resolveLocalAddressFromProxies((SipTransportLayer *)&v30, (uint64_t)this, 0);
        uint64_t v22 = v30;
        if (v30)
        {
          uint64_t v23 = (*(uint64_t (**)(char *))(*(void *)v20 + 64))((char *)this + 40);
          (*(void (**)(char *, uint64_t))(*(void *)v20 + 16))((char *)this + 40, v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)"interface ", 10);
          *(unsigned char *)(v23 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 32))(v23, a2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v23 + 8), (uint64_t)" is up", 6);
          *(unsigned char *)(v23 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v23 + 17) = 0;
          uint64_t v24 = (*(uint64_t (**)(char *))(*(void *)v20 + 64))((char *)this + 40);
          (*(void (**)(char *, uint64_t))(*(void *)v20 + 16))((char *)this + 40, v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v24 + 8), (uint64_t)"local IP address is ", 20);
          *(unsigned char *)(v24 + 17) = 0;
          long long v25 = (unsigned char *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v22 + 40))(v22, v24);
          (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v25[17] = 0;
          SipHost::SipHost((uint64_t)&v28, (uint64_t)&v30);
          SipUri::makeSipUri((uint64_t)this + 1120);
          SipHost::operator=((uint64_t)this + 1128, (uint64_t)&v28);
          *((unsigned char *)this + 1440) = 0;
          SipHost::~SipHost((SipHost *)&v28);
          if (!NetworkInterfaceMonotorManager::_instance) {
            operator new();
          }
          NetworkInterfaceMonotorManager::releaseMonitor((void *)NetworkInterfaceMonotorManager::_instance, (unsigned __int8 *)this + 960);
          if (*((char *)this + 983) < 0)
          {
            **((unsigned char **)this + 120) = 0;
            *((void *)this + 12bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
          }
          else
          {
            *((unsigned char *)this + 960) = 0;
            *((unsigned char *)this + 983) = 0;
          }
          SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(this);
        }
        else
        {
          SipUri::operator=((SipTransportLayer *)((char *)this + 288), *(void *)(*((void *)this + 247) + ((*((void *)this + 250) >> 1) & 0x7FFFFFFFFFFFFFF8))+ 408 * (*((void *)this + 250) & 0xFLL));
          uint64_t v26 = (*(uint64_t (**)(char *))(*(void *)v20 + 64))((char *)this + 40);
          (*(void (**)(char *, uint64_t))(*(void *)v20 + 16))((char *)this + 40, v26);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 32))(v26, a2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)" is up, but it doesn't have an ", 31);
          *(unsigned char *)(v26 + 17) = 0;
          SipHost::ipAddress((SipTransportLayer *)((char *)this + 296), &v28);
          uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 128))(v28);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 32))(v26, v27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v26 + 8), (uint64_t)" address.", 9);
          *(unsigned char *)(v26 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v26 + 17) = 0;
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
        }
        if (v31) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v31);
        }
        return;
      }
    }
LABEL_21:
    uint64_t v17 = *((void *)this + 5);
    uint64_t v16 = (char *)this + 40;
    uint64_t v18 = (*(uint64_t (**)(char *))(v17 + 64))(v16);
    (*(void (**)(char *, uint64_t))(*(void *)v16 + 16))(v16, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"not waiting for interface", 25);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    return;
  }
  uint64_t v12 = (void *)((char *)this + 40);
  uint64_t v13 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 64))((char *)this + 40);
  (*(void (**)(void *, uint64_t))(*v12 + 16))(v12, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"interface ", 10);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 32))(v13, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" is not up", 10);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  uint64_t v14 = v12[28];
  if (v14)
  {
    int v15 = *(void (**)(void))(*(void *)v14 + 72);
    v15();
  }
}

void sub_1C537F454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipTransportLayer::networkInterfaceChanged(uint64_t a1, uint64_t a2, NetworkInterface **a3)
{
}

uint64_t SipTransportLayer::isIPSecAvailableAndEnabled(SipTransportLayer *this)
{
  if (!*(unsigned char *)((*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 16))(this) + 438)) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 33);
  if (!v2) {
    return 0;
  }
  int v3 = *(uint64_t (**)(void))(*(void *)v2 + 16);
  return v3();
}

uint64_t SipTransportLayer::maxUdpMessageSize(SipTransportLayer *this)
{
  if (*(_DWORD *)((*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 256))(this) + 496)) {
    return *(unsigned int *)((*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 256))(this) + 496);
  }
  uint64_t v3 = *((void *)this + 133);
  if (!v3) {
    return 1300;
  }
  uint64_t result = *(unsigned int *)(v3 + 56);
  if (result > 0x5DB) {
    return 1300;
  }
  if (result >= 0xC9) {
    return (result - 200);
  }
  return result;
}

void SipTransportLayer::fillContactHost(SipTransportLayer *this@<X0>, SipUri *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *((void *)this + 130);
  if (v5)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v5 + 192))(&v16);
    if (v16)
    {
      SipUri::operator=(a2, (uint64_t)this + 1120);
      memset(v18, 0, sizeof(v18));
      SipHost::SipHost((uint64_t)v18, (uint64_t)this + 1128);
      SipHost::setAddress((uint64_t)v18, &v16);
      (*(void (**)(SipUri *, unsigned char *))(*(void *)a2 + 32))(a2, v18);
      uint64_t v7 = (*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 256))(this);
      SipHop::setSupportsCompression((uint64_t **)a2, *(unsigned __int8 *)(v7 + 437));
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(void *)a3 = &unk_1F20B2680;
      *(void *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
      SipHost::~SipHost((SipHost *)v18);
    }
    else
    {
      uint64_t v13 = *((void *)this + 5);
      uint64_t v12 = (char *)this + 40;
      uint64_t v14 = (*(uint64_t (**)(char *))(v13 + 48))(v12);
      (*(void (**)(char *, uint64_t))(*(void *)v12 + 16))(v12, v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v14 + 8), (uint64_t)"fillContactHost: no local address", 33);
      *(unsigned char *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v14 + 17) = 0;
      memset(&v18[24], 0, 32);
      long long v19 = 0u;
      *(void *)uint64_t v18 = &unk_1F20B2680;
      *(void *)&v18[8] = &_bambiDomain;
      *(_DWORD *)&v18[16] = 1073741826;
      int v15 = (const std::string *)ImsResult::operator<<<char [17]>((uint64_t)v18, "no local address");
      ImsResult::ImsResult((ImsResult *)a3, v15);
      ImsResult::~ImsResult((ImsResult *)v18);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  else
  {
    uint64_t v9 = *((void *)this + 5);
    uint64_t v8 = (char *)this + 40;
    uint64_t v10 = (*(uint64_t (**)(char *, SipUri *))(v9 + 48))(v8, a2);
    (*(void (**)(char *, uint64_t))(*(void *)v8 + 16))(v8, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"fillContactHost: no active transport", 36);
    *(unsigned char *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v10 + 17) = 0;
    memset(&v18[24], 0, 32);
    long long v19 = 0u;
    *(void *)uint64_t v18 = &unk_1F20B2680;
    *(void *)&v18[8] = &_bambiDomain;
    *(_DWORD *)&v18[16] = 1073741826;
    uint64_t v11 = (const std::string *)ImsResult::operator<<<char [20]>((uint64_t)v18, "no active transport");
    ImsResult::ImsResult((ImsResult *)a3, v11);
    ImsResult::~ImsResult((ImsResult *)v18);
  }
}

void sub_1C537F978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SipTransportLayer::sendMessage(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, ImsResult *a5@<X8>)
{
  int v7 = *(_DWORD *)(a1 + 224);
  if (v7 < 0)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v21 = &unk_1F20B2680;
    uint64_t v22 = &_bambiDomain;
    int v23 = 0x40000000;
    uint64_t v8 = (ImsResult *)ImsResult::operator<<<char [38]>((uint64_t)&v21, "sendMessage: failing send for testing");
    uint64_t v9 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 40), v8);
    ImsResult::ImsResult(a5, (const std::string *)v9);
    goto LABEL_5;
  }
  if (v7)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v21 = &unk_1F20B2680;
    uint64_t v22 = &_posixDomain;
    int v23 = v7;
    ImsLogContainer::logResult(a1 + 40, (uint64_t)&v21, (uint64_t)a5);
LABEL_5:
    ImsResult::~ImsResult((ImsResult *)&v21);
    return;
  }
  if (a3)
  {
    uint64_t v14 = *a3;
    uint64_t v13 = (std::__shared_weak_count *)a3[1];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v14)
    {
      uint64_t v15 = a1 + 40;
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 40) + 64))(a1 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(a1 + 40, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v16 + 8), (uint64_t)"upper layer requested transport ", 32);
      *(unsigned char *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 104))(v14, v16);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v16 + 17) = 0;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void *)(a1 + 1040);
  if (!v14)
  {
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    uint64_t v21 = &unk_1F20B2680;
    uint64_t v22 = &_bambiDomain;
    int v23 = 1073741827;
    long long v19 = (ImsResult *)ImsResult::operator<<<char [33]>((uint64_t)&v21, "sendMessage: no active transport");
    long long v20 = ImsLogContainer::logResult((ImsLogContainer *)(a1 + 40), v19);
    ImsResult::ImsResult(a5, (const std::string *)v20);
    ImsResult::~ImsResult((ImsResult *)&v21);
    if (!v13) {
      return;
    }
LABEL_25:
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    return;
  }
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 1048);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v13 = v17;
LABEL_19:
  SipTransportLayer::logMessageMetrics((void *)a1, a2, 0, (uint64_t)&ims::kEmptyString);
  if (a4)
  {
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = (std::__shared_weak_count *)a4[1];
    *a4 = v14;
    a4[1] = v13;
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  (*(void (**)(uint64_t, const void *, uint64_t *))(*(void *)v14 + 56))(v14, a2, a3);
  if (v13) {
    goto LABEL_25;
  }
}

void sub_1C537FD04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

void SipTransportLayer::logMessageMetrics(void *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
  {
    uint64_t v9 = 0;
LABEL_34:
    uint64_t v33 = a1[5];
    uint64_t v32 = a1 + 5;
    uint64_t v34 = (*(uint64_t (**)(void *))(v33 + 64))(v32);
    (*(void (**)(void *, uint64_t))(*v32 + 16))(v32, v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v34 + 8), (uint64_t)"logMessageMetrics() no stack or no bambi client", 47);
    *(unsigned char *)(v34 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v34 + 17) = 0;
    goto LABEL_35;
  }
  uint64_t v9 = std::__shared_weak_count::lock(v5);
  if (!v9) {
    goto LABEL_34;
  }
  uint64_t v10 = a1[1];
  if (!v10) {
    goto LABEL_34;
  }
  uint64_t v11 = *(void *)(v10 + 136);
  if (!v11) {
    goto LABEL_34;
  }
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v11 + 104))(&v50);
  uint64_t v12 = v50;
  if (!v50)
  {
    uint64_t v36 = a1[5];
    uint64_t v35 = a1 + 5;
    uint64_t v37 = (*(uint64_t (**)(void *))(v36 + 64))(v35);
    (*(void (**)(void *, uint64_t))(*v35 + 16))(v35, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"logMessageMetrics() no metrics logger", 37);
    *(unsigned char *)(v37 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v37 + 17) = 0;
    goto LABEL_68;
  }
  if (!a2) {
    goto LABEL_68;
  }
  if (!v13)
  {
    if (v38)
    {
      v48[0] = v10;
      v48[1] = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      IMSMetricsManager::logSipResponse(v12, v48, (uint64_t)v38, a3, a4);
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    goto LABEL_68;
  }
  uint64_t v14 = v13;
  v49[0] = v10;
  v49[1] = v9;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  IMSMetricsManager::logSipRequest(v12, v49, (uint64_t)v13, a3, a4);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  uint64_t v15 = (char *)SipMessage::header<SipConversationIdHeader>((uint64_t)a2);
  uint64_t v16 = (long long *)(v15 + 64);
  if (!v15) {
    uint64_t v16 = &ims::kEmptyString;
  }
  uint64_t v17 = *((unsigned __int8 *)v16 + 23);
  uint64_t v18 = *((void *)v16 + 1);
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = v17;
  }
  if (!v18)
  {
    long long v19 = (char *)SipMessage::header<SipContributionIdHeader>((uint64_t)a2);
    long long v20 = (long long *)(v19 + 64);
    if (!v19) {
      long long v20 = &ims::kEmptyString;
    }
    uint64_t v21 = *((unsigned __int8 *)v20 + 23);
    uint64_t v22 = *((void *)v20 + 1);
    if ((v21 & 0x80u) == 0) {
      uint64_t v22 = v21;
    }
    if (!v22)
    {
      int v23 = (char *)SipMessage::header<SipInReplyToContributionIdHeader>((uint64_t)a2);
      long long v24 = (long long *)(v23 + 64);
      if (!v23) {
        long long v24 = &ims::kEmptyString;
      }
      uint64_t v25 = *((unsigned __int8 *)v24 + 23);
      uint64_t v26 = *((void *)v24 + 1);
      if ((v25 & 0x80u) == 0) {
        uint64_t v26 = v25;
      }
      if (!v26) {
        goto LABEL_68;
      }
    }
  }
  BOOL isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v10 + 3160));
  uint64_t v28 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(void *)v14 + 112))(v14);
  uint64_t v29 = v28[23];
  if ((v29 & 0x80u) == 0) {
    uint64_t v30 = v28[23];
  }
  else {
    uint64_t v30 = *((void *)v28 + 1);
  }
  if (v30 == 6)
  {
    if ((v29 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v28, "INVITE", *((void *)v28 + 1))) {
        goto LABEL_42;
      }
    }
    else if (v28[23])
    {
      uint64_t v31 = "INVITE";
      while (*v28 == *(unsigned __int8 *)v31)
      {
        ++v28;
        ++v31;
        if (!--v29) {
          goto LABEL_52;
        }
      }
      goto LABEL_42;
    }
LABEL_52:
    uint64_t v43 = 1;
LABEL_67:
    powerlog::PowerLogger::logLazuliSipRequest(*(void *)(v50 + 136), a3, isWifi, v43, 0);
    goto LABEL_68;
  }
LABEL_42:
  char v39 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(void *)v14 + 112))(v14);
  uint64_t v40 = v39[23];
  if ((v40 & 0x80u) == 0) {
    uint64_t v41 = v39[23];
  }
  else {
    uint64_t v41 = *((void *)v39 + 1);
  }
  if (v41 != 3) {
    goto LABEL_54;
  }
  if ((v40 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v39, &SipRequest::kMethodBye, *((void *)v39 + 1))) {
      goto LABEL_54;
    }
    goto LABEL_64;
  }
  if (!v39[23])
  {
LABEL_64:
    uint64_t v43 = 2;
    goto LABEL_67;
  }
  unint64_t v42 = &SipRequest::kMethodBye;
  while (*v39 == *(unsigned __int8 *)v42)
  {
    ++v39;
    unint64_t v42 = (long long *)((char *)v42 + 1);
    if (!--v40) {
      goto LABEL_64;
    }
  }
LABEL_54:
  uint64_t v44 = (unsigned __int8 *)(*(uint64_t (**)(void *))(*(void *)v14 + 112))(v14);
  uint64_t v45 = v44[23];
  if ((v45 & 0x80u) == 0) {
    uint64_t v46 = v44[23];
  }
  else {
    uint64_t v46 = *((void *)v44 + 1);
  }
  if (v46 == 5)
  {
    if ((v45 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v44, "REFER", *((void *)v44 + 1))) {
        goto LABEL_68;
      }
    }
    else if (v44[23])
    {
      long long v47 = "REFER";
      while (*v44 == *(unsigned __int8 *)v47)
      {
        ++v44;
        ++v47;
        if (!--v45) {
          goto LABEL_66;
        }
      }
      goto LABEL_68;
    }
LABEL_66:
    uint64_t v43 = 3;
    goto LABEL_67;
  }
LABEL_68:
  if (v51) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v51);
  }
LABEL_35:
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1C53802A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(a1);
}

void SipTransportLayer::setServiceRouteFromMessage(SipTransportLayer *this, const SipMessage *a2)
{
  uint64_t v3 = this;
  uint64_t v4 = (SipTransportLayer *)((char *)this + 696);
  SipRouteSet::clear((void *)this + 87);
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 2);
  if (v5 == v6)
  {
    int v7 = 0;
  }
  else
  {
    int8x8_t v38 = v3;
    char v39 = v4;
    int v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unsigned int v12 = 0;
    do
    {
      uint64_t v13 = *(unsigned __int8 **)(v6 + 8 * v11);
      if ((char)v13[31] < 0)
      {
        uint64_t v14 = (const void *)*((void *)v13 + 1);
        unint64_t v15 = *((void *)v13 + 2);
      }
      else
      {
        uint64_t v14 = v13 + 8;
        unint64_t v15 = v13[31];
      }
      if (v15 >= 0xD) {
        size_t v16 = 13;
      }
      else {
        size_t v16 = v15;
      }
      if (!memcmp(v14, "Service-Route", v16) && v15 == 13)
      {
        long long v19 = v18;
        if (v10 >= v9)
        {
          uint64_t v20 = (v10 - v7) >> 3;
          unint64_t v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 61) {
            std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
          }
          if ((v9 - v7) >> 2 > v21) {
            unint64_t v21 = (v9 - v7) >> 2;
          }
          if ((unint64_t)(v9 - v7) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22)
          {
            if (v22 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            int v23 = (char *)operator new(8 * v22);
          }
          else
          {
            int v23 = 0;
          }
          long long v24 = &v23[8 * v20];
          *(void *)long long v24 = v19;
          uint64_t v8 = v24 + 8;
          while (v10 != v7)
          {
            uint64_t v25 = *((void *)v10 - 1);
            v10 -= 8;
            *((void *)v24 - bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v25;
            v24 -= 8;
          }
          uint64_t v9 = &v23[8 * v22];
          if (v7) {
            operator delete(v7);
          }
          int v7 = v24;
        }
        else
        {
          *(void *)uint64_t v10 = v18;
          uint64_t v8 = v10 + 8;
        }
        uint64_t v6 = *((void *)a2 + 1);
        uint64_t v5 = *((void *)a2 + 2);
        uint64_t v10 = v8;
      }
      uint64_t v11 = ++v12;
    }
    while (v12 < (unint64_t)((v5 - v6) >> 3));
    if (v7 == v10)
    {
      uint64_t v3 = v38;
      uint64_t v4 = v39;
    }
    else
    {
      uint64_t v26 = v8 - v7;
      uint64_t v4 = v39;
      if (v8 != v7)
      {
        uint64_t v27 = 0;
        unint64_t v28 = v26 >> 3;
        if (v28 <= 1) {
          uint64_t v29 = 1;
        }
        else {
          uint64_t v29 = v28;
        }
        do
          SipRouteSet::addHops(v39, (const SipRouteSet *)(*(void *)&v7[8 * v27++] + 64), 0, 0, 0);
        while (v29 != v27);
      }
      uint64_t v3 = v38;
    }
  }
  if (*((void *)v3 + 88) != *((void *)v3 + 89))
  {
    uint64_t v30 = (*(uint64_t (**)(uint64_t))(*((void *)v3 + 5) + 64))((uint64_t)v3 + 40);
    (*(void (**)(uint64_t, uint64_t))(*((void *)v3 + 5) + 16))((uint64_t)v3 + 40, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"service route: ", 15);
    *(unsigned char *)(v30 + 17) = 0;
    SipRouteSet::toStream(v4, (ImsOutStream *)v30);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v30 + 17) = 0;
  }
  uint64_t v31 = (SipTransportLayer *)((char *)v3 + 752);
  SipRouteSet::clear((void *)v3 + 94);
  uint64_t v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((void *)a2 + 4, "Path");
  if (v32)
  {
    uint64_t v33 = (const void *)*((void *)v32 + 5);
    if (v33)
    {
      if (v34) {
        SipRouteSet::addHops((SipTransportLayer *)((char *)v3 + 752), (const SipRouteSet *)(v34 + 64), 0, 0, 0);
      }
    }
  }
  if (*((void *)v3 + 95) != *((void *)v3 + 96))
  {
    uint64_t v36 = *((void *)v3 + 5);
    uint64_t v35 = (char *)v3 + 40;
    uint64_t v37 = (*(uint64_t (**)(char *))(v36 + 64))(v35);
    (*(void (**)(char *, uint64_t))(*(void *)v35 + 16))(v35, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"registration path: ", 19);
    *(unsigned char *)(v37 + 17) = 0;
    SipRouteSet::toStream(v31, (ImsOutStream *)v37);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v37 + 17) = 0;
  }
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1C538076C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void SipTransportLayer::printTransportInfo(SipTransportLayer *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"Transport:", 10);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    State:             ", 23);
  *((unsigned char *)a2 + 17) = 0;
  (*(void (**)(char *, ImsOutStream *))(*((void *)this + 29) + 16))((char *)this + 232, a2);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (*((void *)this + 124))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Default transport: ", 23);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(void))(**((void **)this + 124) + 264))();
  }
  if (*((void *)this + 126))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Secure transport:  ", 23);
    *((unsigned char *)a2 + 17) = 0;
    (*(void (**)(void))(**((void **)this + 126) + 264))();
  }
  if (*((void *)this + 88) != *((void *)this + 89))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Service route:     ", 23);
    *((unsigned char *)a2 + 17) = 0;
    SipRouteSet::toStream((SipTransportLayer *)((char *)this + 696), a2);
    (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((unsigned char *)a2 + 17) = 0;
  }
  if (*((char *)this + 415) < 0)
  {
    if (!*((void *)this + 50)) {
      return;
    }
  }
  else if (!*((unsigned char *)this + 415))
  {
    return;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)"    Proxy:             ", 23);
  *((unsigned char *)a2 + 17) = 0;
  SipUri::asString((uint64_t)this + 288, &v4);
  LoggableString::LoggableString(&__p, &v4);
  (*(void (**)(ImsOutStream *, std::string *))(*(void *)a2 + 40))(a2, &__p);
  (*(void (**)(ImsOutStream *, void *(*)(void *)))(*(void *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((unsigned char *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_1C5380AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **SipTransportLayer::dropInfoForMethod(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = 200;
  if (a3) {
    uint64_t v4 = 176;
  }
  uint64_t v5 = a1 + v4;
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + v4, (void **)a2);
  if ((void **)(v5 + 8) == v6)
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    if (v7 != 1 || (v8 >= 0 ? (uint64_t v9 = (unsigned char *)a2) : (uint64_t v9 = *(unsigned char **)a2), *v9 != 42))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "*");
      uint64_t v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v5, __p);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  if (v6 == (void **)(v5 + 8)) {
    return 0;
  }
  else {
    return v6 + 7;
  }
}

uint64_t SipTransportLayer::shouldDropMessage(SipTransportLayer *this, const SipMessage *a2, int a3)
{
  if (a3)
  {
    if (*((void *)this + 24))
    {
      uint64_t v6 = "incoming";
      goto LABEL_6;
    }
    return 0;
  }
  if (!*((void *)this + 27)) {
    return 0;
  }
  uint64_t v6 = "outgoing";
LABEL_6:
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v40 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, v6);
  if (v7)
  {
    int v8 = v7;
    uint64_t v9 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)v7);
    uint64_t v10 = v9 ? (long long *)(v9 + 64) : &ims::kEmptyString;
    uint64_t v11 = SipTransportLayer::dropInfoForMethod((uint64_t)this, (uint64_t)v10, a3);
    if (v11)
    {
      uint64_t v14 = (char *)v11[5];
      char v12 = v11 + 5;
      uint64_t v13 = v14;
      if (v14)
      {
        unsigned int v15 = v8[22];
        size_t v16 = v12;
        uint64_t v17 = v12;
        uint64_t v18 = v13;
        do
        {
          unsigned int v19 = *((_DWORD *)v18 + 7);
          BOOL v20 = v19 >= v15;
          if (v19 >= v15) {
            unint64_t v21 = (char **)v18;
          }
          else {
            unint64_t v21 = (char **)(v18 + 8);
          }
          if (v20) {
            uint64_t v17 = (void **)v18;
          }
          uint64_t v18 = *v21;
        }
        while (*v21);
        if (v17 != v12 && v15 >= *((_DWORD *)v17 + 7)) {
          goto LABEL_29;
        }
        do
        {
          int v22 = *((_DWORD *)v13 + 7);
          BOOL v23 = v22 == -1;
          if (v22 == -1) {
            long long v24 = (void **)v13;
          }
          else {
            long long v24 = (void **)(v13 + 8);
          }
          if (v23) {
            size_t v16 = (void **)v13;
          }
          uint64_t v13 = (char *)*v24;
        }
        while (*v24);
        if (v16 != v12)
        {
LABEL_29:
          uint64_t v26 = *((void *)this + 5);
          uint64_t v25 = (char *)this + 40;
          uint64_t v27 = (*(uint64_t (**)(char *))(v26 + 64))(v25);
          (*(void (**)(char *, uint64_t))(*(void *)v25 + 16))(v25, v27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"DROPPING ", 9);
          *(unsigned char *)(v27 + 17) = 0;
          unint64_t v28 = (unsigned char *)(v27 + 17);
          (*(void (**)(uint64_t, void **))(*(void *)v27 + 32))(v27, __p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)" ", 1);
          *(unsigned char *)(v27 + 17) = 0;
          std::ostream::operator<<();
          *(unsigned char *)(v27 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)" response", 9);
          *(unsigned char *)(v27 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_35:
          unsigned char *v28 = 0;
          uint64_t v29 = 1;
          goto LABEL_37;
        }
      }
    }
  }
  if (v30)
  {
    uint64_t v31 = v30;
    uint64_t v32 = (*(uint64_t (**)(void *))(*(void *)v30 + 112))(v30);
    uint64_t v33 = SipTransportLayer::dropInfoForMethod((uint64_t)this, v32, a3);
    if (v33)
    {
      if (*((unsigned char *)v33 + 24))
      {
        uint64_t v35 = *((void *)this + 5);
        uint64_t v34 = (char *)this + 40;
        uint64_t v36 = (*(uint64_t (**)(char *))(v35 + 64))(v34);
        (*(void (**)(char *, uint64_t))(*(void *)v34 + 16))(v34, v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"DROPPING ", 9);
        *(unsigned char *)(v36 + 17) = 0;
        unint64_t v28 = (unsigned char *)(v36 + 17);
        (*(void (**)(uint64_t, void **))(*(void *)v36 + 32))(v36, __p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)" ", 1);
        *(unsigned char *)(v36 + 17) = 0;
        uint64_t v37 = (*(uint64_t (**)(void *))(*(void *)v31 + 112))(v31);
        (*(void (**)(uint64_t, uint64_t))(*(void *)v36 + 32))(v36, v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)" request", 8);
        *(unsigned char *)(v36 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_35;
      }
    }
  }
  uint64_t v29 = 0;
LABEL_37:
  if (SHIBYTE(v40) < 0) {
    operator delete(__p[0]);
  }
  return v29;
}

void sub_1C5381040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SipTransportLayer::processMessageFromTransport(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, unsigned int a5, void *a6, std::string::size_type *a7, std::string::size_type *a8)
{
  uint64_t v94 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 2017)) {
    BOOL v15 = (*(uint64_t (**)(void))(*(void *)*a7 + 208))() == 5060;
  }
  else {
    BOOL v15 = 0;
  }
  size_t v16 = (const void *)*a7;
  uint64_t v17 = (std::__shared_weak_count *)a7[1];
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v16) {
    goto LABEL_11;
  }
  if (*(const void **)(a1 + 1040) != v16)
  {
    {
      if (!v17)
      {
        int v77 = 0;
        int v18 = 1;
        goto LABEL_16;
      }
      int v18 = 1;
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      goto LABEL_12;
    }
LABEL_11:
    unsigned int v19 = (ImsPrefs *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 184))(a1);
    DropTrafficOnUnknownTransportsKey = (void **)ImsPrefs::getDropTrafficOnUnknownTransportsKey(v19);
    int v18 = ImsPrefs::BOOLValue(v19, DropTrafficOnUnknownTransportsKey) ^ 1;
    if (!v17) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  int v18 = 1;
  if (v17) {
LABEL_12:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
LABEL_13:
  if ((v15 | v18))
  {
    int v77 = 0;
  }
  else
  {
    int v18 = (*(uint64_t (**)(void))(*(void *)*a7 + 208))() == 5060;
    int v77 = v18;
  }
LABEL_16:
  memset(&v90, 0, sizeof(v90));
  std::string::basic_string[abi:ne180100]<0>(&v90, " ");
  BOOL v81 = v15;
  uint64_t v74 = a3;
  unsigned int v75 = a5;
  uint64_t v21 = *(void *)(a1 + 1976);
  int v80 = v18;
  uint64_t v76 = a8;
  if (*(void *)(a1 + 1984) != v21)
  {
    unint64_t v22 = *(void *)(a1 + 2000);
    uint64_t v23 = *(void *)(v21 + 8 * (v22 >> 4)) + 408 * (v22 & 0xF);
    if (v23 != *(void *)(v21 + (((*(void *)(a1 + 2008) + v22) >> 1) & 0x7FFFFFFFFFFFFFF8))
              + 408 * ((*(_DWORD *)(a1 + 2008) + v22) & 0xF))
    {
      (*(void (**)(IpAddress **__return_ptr, uint64_t))(*(void *)v23 + 48))(&v91, v23);
      IpAddress::asString(&v89);
    }
  }
  long long v24 = *(std::__shared_weak_count **)(a1 + 16);
  if (v24)
  {
    uint64_t v25 = std::__shared_weak_count::lock(v24);
    if (v25) {
      uint64_t v26 = *(void *)(a1 + 8);
    }
    else {
      uint64_t v26 = 0;
    }
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v25 = 0;
  }
  uint64_t v78 = v25;
  if (v26)
  {
    uint64_t v27 = (ImsPrefs *)SipStack::prefs((SipStack *)v26);
    AcceptMsgFromNonProxyKey = (void **)ImsPrefs::getAcceptMsgFromNonProxyKey(v27);
    if (ImsPrefs::BOOLValue(v27, AcceptMsgFromNonProxyKey))
    {
      uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 40) + 48))(a1 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(a1 + 40, v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"stack ", 6);
      *(unsigned char *)(v29 + 17) = 0;
      if (*(char *)(v26 + 4183) < 0) {
        std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)(v26 + 4160), *(void *)(v26 + 4168));
      }
      else {
        std::string v93 = *(std::string *)(v26 + 4160);
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)v29 + 32))(v29, &v93);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)": will still accept ", 20);
      *(unsigned char *)(v29 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v29 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)" bytes from ", 12);
      *(unsigned char *)(v29 + 17) = 0;
      (*(void (**)(void, uint64_t))(*(void *)*a6 + 40))(*a6, v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)", which is not from myProxies at [", 34);
      *(unsigned char *)(v29 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v29 + 32))(v29, &v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"]", 1);
      *(unsigned char *)(v29 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v29 + 17) = 0;
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      int v30 = 0;
    }
    else
    {
      int v30 = 1;
    }
    int v18 = v80;
  }
  else
  {
    int v30 = 1;
  }
  memset(&v89, 0, sizeof(v89));
  if (((v81 | v18 ^ 1) & 1) == 0)
  {
    if (!v30) {
      goto LABEL_56;
    }
    strcpy((char *)&v89, "DroppedMsgFromNonProxy");
    *((unsigned char *)&v89.__r_.__value_.__s + 23) = 22;
    uint64_t v33 = *(std::__shared_weak_count **)(a1 + 16);
    if (v33)
    {
      uint64_t v34 = std::__shared_weak_count::lock(v33);
      if (v34)
      {
        uint64_t v35 = *(IpAddress **)(a1 + 8);
        if (v35)
        {
          uint64_t v36 = *((void *)v35 + 17);
          if (v36)
          {
            *(_OWORD *)&v93.__r_.__value_.__l.__data_ = 0uLL;
            (*(void (**)(std::string *__return_ptr))(*(void *)v36 + 104))(&v93);
            uint64_t v37 = v93.__r_.__value_.__r.__words[0];
            if (v93.__r_.__value_.__r.__words[0])
            {
              char v91 = v35;
              int64_t v92 = v34;
              atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
              IMSMetricsManager::logSipRequestFromNonProxyDropped(v37, (uint64_t *)&v91);
              std::__shared_weak_count::__release_shared[abi:ne180100](v34);
            }
            else
            {
              uint64_t v72 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 40) + 64))(a1 + 40);
              (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(a1 + 40, v72);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v72 + 8), (uint64_t)"logSipRequestFromNonProxyDropped() no metrics logger", 52);
              *(unsigned char *)(v72 + 17) = 0;
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v72 + 17) = 0;
            }
            if (v93.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v93.__r_.__value_.__l.__size_);
            }
LABEL_55:
            std::__shared_weak_count::__release_shared[abi:ne180100](v34);
            goto LABEL_56;
          }
        }
      }
    }
    else
    {
      uint64_t v34 = 0;
    }
    uint64_t v38 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 40) + 64))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(a1 + 40, v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"logSipRequestFromNonProxyDropped() no stack or no bambi client", 62);
    *(unsigned char *)(v38 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v38 + 17) = 0;
    if (!v34) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v81) {
    std::string::size_type v31 = 23;
  }
  else {
    std::string::size_type v31 = 25;
  }
  if (v81) {
    uint64_t v32 = "DroppedOnDefaultSipPort";
  }
  else {
    uint64_t v32 = "DroppedOnInvalidTransport";
  }
  std::string::__assign_external(&v89, v32, v31);
LABEL_56:
  SipTransportLayer::logMessageMetrics((void *)a1, a2, 1, (uint64_t)&v89);
  uint64_t v39 = v26;
  std::chrono::steady_clock::now();
  uint64_t v40 = *(void *)(a1 + 272);
  if (v40) {
    unsigned int v79 = (*(uint64_t (**)(uint64_t, const void *))(*(void *)v40 + 16))(v40, a2);
  }
  else {
    unsigned int v79 = 0;
  }
  std::chrono::steady_clock::now();
  uint64_t v41 = a1 + 40;
  uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 40) + 64))(a1 + 40);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(a1 + 40, v42);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"Time taken to determine IncomingMessageCategory ", 48);
  *(unsigned char *)(v42 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v42 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v42 + 17) = 0;
  char v91 = 0;
  int64_t v92 = 0;
  uint64_t v43 = *(IpAddress **)(a1 + 1952);
  uint64_t v44 = *(std::__shared_weak_count **)(a1 + 1960);
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v39 + 3160));
  BOOL v46 = isWifi;
  SipTransportLayer::assertionStringForCategory((uint64_t)__p, v79, isWifi);
  char v91 = 0;
  int64_t v92 = 0;
  if (!v44)
  {
    char v91 = v43;
    int64_t v92 = 0;
    if (!v43) {
      goto LABEL_68;
    }
    goto LABEL_67;
  }
  atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  long long v47 = v92;
  char v91 = v43;
  int64_t v92 = v44;
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  if (v43)
  {
LABEL_67:
    v93.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    long long v48 = std::__tree<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<AssertionCounter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<AssertionCounter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v43, __p, (uint64_t)&std::piecewise_construct, (long long **)&v93);
    AssertionCounter::initialize((atomic_uint *)v48[7], 300.0, !v46, (uint64_t)&v93);
    ImsResult::~ImsResult((ImsResult *)&v93);
  }
LABEL_68:
  if (v88 < 0) {
    operator delete(__p[0]);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  uint64_t v49 = *(void *)(a1 + 1024);
  if (v49)
  {
    if (*a7 == *(void *)(a1 + 1008))
    {
      uint64_t v51 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 64))(a1 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(a1 + 40, v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v51 + 8), (uint64_t)"received a message over new SAs.  Removing old SAs ", 51);
      *(unsigned char *)(v51 + 17) = 0;
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 1024) + 104))(*(void *)(a1 + 1024), v51);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v51 + 17) = 0;
      uint64_t v52 = *(void *)(a1 + 1024);
      LoggableString::LoggableString((LoggableString *)&v93, "TransportLayer");
      (*(void (**)(uint64_t, std::string *))(*(void *)v52 + 40))(v52, &v93);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v93.__r_.__value_.__l.__data_);
      }
      uint64_t v53 = *(std::__shared_weak_count **)(a1 + 1032);
      *(_OWORD *)(a1 + 1024) = 0u;
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
    }
    else if (*a7 == v49)
    {
      uint64_t v50 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 64))(a1 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(a1 + 40, v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v50 + 8), (uint64_t)"received message over old SAs ", 30);
      *(unsigned char *)(v50 + 17) = 0;
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 1024) + 104))(*(void *)(a1 + 1024), v50);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v50 + 64))(v50, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v50 + 17) = 0;
    }
  }
  if (v81)
  {
    uint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 48))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(a1 + 40, v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)"dropping ", 9);
    *(unsigned char *)(v54 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v54 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)" bytes on DefaultSipPort of ", 28);
    *(unsigned char *)(v54 + 17) = 0;
    (*(void (**)(std::string::size_type, uint64_t))(*(void *)*a7 + 104))(*a7, v54);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_88;
  }
  if ((v80 & 1) == 0)
  {
    uint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 48))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(a1 + 40, v54);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)"dropping ", 9);
    *(unsigned char *)(v54 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v54 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v54 + 8), (uint64_t)" bytes on inactive transport ", 29);
    *(unsigned char *)(v54 + 17) = 0;
    (*(void (**)(std::string::size_type, uint64_t))(*(void *)*a7 + 104))(*a7, v54);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_88:
    *(unsigned char *)(v54 + 17) = 0;
    int v58 = v78;
    if (!a2) {
      goto LABEL_90;
    }
    goto LABEL_89;
  }
  if (v77)
  {
    uint64_t v55 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 48))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(a1 + 40, v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)"skipped dropping ", 17);
    *(unsigned char *)(v55 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v55 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v55 + 8), (uint64_t)" bytes on inactive transport ", 29);
    *(unsigned char *)(v55 + 17) = 0;
    (*(void (**)(std::string::size_type, uint64_t))(*(void *)*a7 + 104))(*a7, v55);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v55 + 17) = 0;
  }
  (*(void (**)(std::string *__return_ptr, const void *, void *))(*(void *)a2 + 80))(&v93, a2, a6);
  int v56 = (*(uint64_t (**)(std::string::size_type, void))(*(void *)v93.__r_.__value_.__l.__size_ + 24))(v93.__r_.__value_.__l.__size_, LODWORD(v93.__r_.__value_.__r.__words[2]));
  ImsResult::~ImsResult((ImsResult *)&v93);
  if (v56)
  {
    uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 48))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(a1 + 40, v57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v57 + 8), (uint64_t)"incoming message has invalid Via header.  Dropping.", 51);
    *(unsigned char *)(v57 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v57 + 17) = 0;
    (*(void (**)(const void *))(*(void *)a2 + 8))(a2);
    int v58 = v78;
    goto LABEL_90;
  }
  if (v39 && ((v30 ^ 1) & 1) == 0)
  {
    uint64_t v59 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 48))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(a1 + 40, v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v59 + 8), (uint64_t)"stack ", 6);
    *(unsigned char *)(v59 + 17) = 0;
    if (*(char *)(v39 + 4183) < 0) {
      std::string::__init_copy_ctor_external(&v93, *(const std::string::value_type **)(v39 + 4160), *(void *)(v39 + 4168));
    }
    else {
      std::string v93 = *(std::string *)(v39 + 4160);
    }
    int v58 = v78;
    (*(void (**)(uint64_t, std::string *))(*(void *)v59 + 32))(v59, &v93);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v59 + 8), (uint64_t)": dropping ", 11);
    *(unsigned char *)(v59 + 17) = 0;
    std::ostream::operator<<();
    *(unsigned char *)(v59 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v59 + 8), (uint64_t)" bytes from ", 12);
    *(unsigned char *)(v59 + 17) = 0;
    (*(void (**)(void, uint64_t))(*(void *)*a6 + 40))(*a6, v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v59 + 8), (uint64_t)", which is not from myProxies at [", 34);
    *(unsigned char *)(v59 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(void *)v59 + 32))(v59, &v90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v59 + 8), (uint64_t)"]", 1);
    *(unsigned char *)(v59 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v59 + 64))(v59, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v59 + 17) = 0;
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v93.__r_.__value_.__l.__data_);
    }
LABEL_89:
    (*(void (**)(const void *))(*(void *)a2 + 8))(a2);
    goto LABEL_90;
  }
  std::string::size_type v60 = *v76;
  if (*v76) {
    uint64_t v61 = &SipTransport::kTransportTCP;
  }
  else {
    uint64_t v61 = &SipTransport::kTransportUDP;
  }
  uint64_t v85 = 0;
  long long v86 = 0;
  if (!v60)
  {
LABEL_113:
    (*(void (**)(uint64_t *__return_ptr))(*(void *)*a7 + 192))(&v85);
    int v58 = v78;
    if (!v60) {
      goto LABEL_116;
    }
    goto LABEL_114;
  }
  uint64_t v62 = *(void *)(v60 + 280);
  if (!v62)
  {
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    goto LABEL_113;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v62 + 136))(&v83);
  if (!v83) {
    goto LABEL_113;
  }
  uint64_t v63 = *(void *)(*v76 + 280);
  if (v63)
  {
    int v58 = v78;
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v63 + 136))(&v85);
  }
  else
  {
    uint64_t v85 = 0;
    long long v86 = 0;
    int v58 = v78;
  }
LABEL_114:
  if (v84) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v84);
  }
LABEL_116:
  uint64_t v64 = a4;
  uint64_t v65 = a2;
  if (v85)
  {
    HIBYTE(v73) = (*(uint64_t (**)(void))(*(void *)*a7 + 216))();
    LOBYTE(v73) = 1;
    (*(void (**)(uint64_t, const void *, uint64_t, uint64_t, void, char *, uint64_t *, void *, __int16))(*(void *)a1 + 40))(a1, a2, v74, v64, v75, v61, &v85, a6, v73);
  }
  if (*(unsigned char *)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1) + 582)
    && v39
    && !*(unsigned char *)(a1 + 2016)
    && *(unsigned char *)(*(void *)(v39 + 136) + 672))
  {
    uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)v41 + 32))(a1 + 40);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v41 + 16))(a1 + 40, v66);
    uint64_t v67 = ImsOutStream::operator<<(v66, "deferring delivery of incoming ");
    (*(void (**)(std::string *__return_ptr, const void *))(*(void *)a2 + 48))(&v93, a2);
    (*(void (**)(uint64_t, std::string *))(*(void *)v67 + 32))(v67, &v93);
    BOOL v68 = (unsigned char *)ImsOutStream::operator<<(v67, " until system wake");
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v68[17] = 0;
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v93.__r_.__value_.__l.__data_);
    }
    operator new();
  }
  if (*v76)
  {
    uint64_t v69 = (std::__shared_weak_count *)v76[1];
    std::string::size_type v70 = *v76;
    if (!v69)
    {
      std::string::size_type v70 = *v76;
      goto LABEL_130;
    }
  }
  else
  {
    std::string::size_type v70 = *a7;
    uint64_t v69 = (std::__shared_weak_count *)a7[1];
    if (!v69) {
      goto LABEL_130;
    }
  }
  atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_130:
  if (*(void *)(a1 + 272)
    && ((*(uint64_t (**)(uint64_t, const void *, uint64_t))(*(void *)a1 + 32))(a1, v65, 1) & 1) == 0)
  {
    uint64_t v71 = *(void *)(a1 + 272);
    v93.__r_.__value_.__r.__words[0] = v70;
    v93.__r_.__value_.__l.__size_ = (std::string::size_type)v69;
    if (v69) {
      atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, const void *, void *, std::string *))(*(void *)v71 + 24))(v71, v65, a6, &v93);
    if (v93.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v93.__r_.__value_.__l.__size_);
    }
  }
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  (*(void (**)(const void *))(*(void *)v65 + 8))(v65);
  if (v86) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v86);
  }
LABEL_90:
  PowerAssertionTerminationLock::~PowerAssertionTerminationLock((PowerAssertionTerminationLock *)&v91);
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v89.__r_.__value_.__l.__data_);
  }
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
}

void sub_1C53829C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47)
{
  if (v47)
  {
    std::__shared_weak_count::__release_weak(v47);
    std::__shared_weak_count::__release_weak(v47);
    std::__shared_weak_count::__release_weak(v47);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  PowerAssertionTerminationLock::~PowerAssertionTerminationLock((PowerAssertionTerminationLock *)&a46);
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  _Unwind_Resume(a1);
}

void SipTransportLayer::createIPSecTransport(SipTransportLayer *this@<X0>, ImsResult *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      int v8 = (SipStack *)*((void *)this + 1);
      if (v8)
      {
        SipTransportLayer::localClientAddress((SipTransportLayer *)v37, this);
        uint64_t v9 = *(void *)&v37[0];
        if (*((void *)&v37[0] + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37[0] + 1));
        }
        if (!v9)
        {
          if (a2)
          {
            memset((char *)&v37[1] + 8, 0, 48);
            *(void *)&v37[0] = &unk_1F20B2680;
            *((void *)&v37[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
            LODWORD(v37[1]) = 1073741826;
            uint64_t v12 = ImsResult::operator<<<char [55]>((uint64_t)v37, "creating secure transport requires an active transport");
            ImsResult::operator=((uint64_t)a2, v12);
            ImsResult::~ImsResult((ImsResult *)v37);
          }
          *a3 = 0;
          a3[1] = 0;
          goto LABEL_31;
        }
        memset(v37, 0, 72);
        SipHost::resolve((SipTransportLayer *)((char *)this + 296), 1, (uint64_t)v37);
        if ((*(unsigned int (**)(void, void))(**((void **)&v37[0] + 1) + 24))(*((void *)&v37[0] + 1), LODWORD(v37[1])))
        {
          if (a2)
          {
            long long v33 = 0u;
            long long v34 = 0u;
            long long v35 = 0u;
            v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
            v32.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
            LODWORD(v32.__r_.__value_.__r.__words[2]) = 1073741826;
            uint64_t v10 = (const std::string *)ImsResult::operator<<<char [20]>((uint64_t)&v32, "can't resolve proxy");
            ims::result::resultWithCause(v10, (const ImsResult *)v37, (uint64_t)v36);
          }
LABEL_29:
          *a3 = 0;
          a3[1] = 0;
LABEL_30:
          ImsResult::~ImsResult((ImsResult *)v37);
LABEL_31:
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
          return;
        }
        uint64_t v13 = *((void *)this + 33);
        if (!v13 || ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 16))(v13, 1) & 1) == 0)
        {
          if (a2)
          {
            memset((char *)&v36[1] + 8, 0, 48);
            *(void *)&v36[0] = &unk_1F20B2680;
            *((void *)&v36[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
            LODWORD(v36[1]) = 1073741833;
            uint64_t v21 = ImsResult::operator<<<char [31]>((uint64_t)v36, "IPSec support is not available");
            ImsResult::operator=((uint64_t)a2, v21);
            ImsResult::~ImsResult((ImsResult *)v36);
          }
          goto LABEL_29;
        }
        *a3 = 0;
        a3[1] = 0;
        uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 21);
        if (!v14 || (uint64_t v15 = *((void *)this + 20), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        uint64_t v17 = v16;
        int v18 = (std::__shared_weak_count *)operator new(0x210uLL);
        v18->__shared_owners_ = 0;
        v18->__shared_weak_owners_ = 0;
        v18->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C5F40;
        uint64_t v19 = (uint64_t)&v18[1];
        *(void *)&v36[0] = v15;
        *((void *)&v36[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v17;
        SipIPSecTransportGroup::SipIPSecTransportGroup((uint64_t)&v18[1], v36);
        if (*((void *)&v36[0] + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36[0] + 1));
        }
        *a3 = v19;
        a3[1] = (uint64_t)v18;
        BOOL v20 = (std::__shared_weak_count *)v18[9].__vftable;
        if (v20)
        {
          if (v20->__shared_owners_ != -1)
          {
LABEL_34:
            unint64_t v22 = (ImsPrefs *)SipStack::prefs(v8);
            VirtualInterfaceMtuKey = (void **)ImsPrefs::getVirtualInterfaceMtuKey(v22);
            ImsPrefs::intValue(v22, VirtualInterfaceMtuKey);
            long long v24 = (ImsPrefs *)SipStack::prefs(v8);
            MaxUdpMessageSizeKey = (void **)ImsPrefs::getMaxUdpMessageSizeKey(v24);
            ImsPrefs::intValue(v24, MaxUdpMessageSizeKey);
            memset(v36, 0, 72);
            SipTransportLayer::localClientAddress((SipTransportLayer *)v30, this);
            uint64_t v26 = *((void *)this + 133);
            if (v26)
            {
              if (*(char *)(v26 + 55) < 0) {
                std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(v26 + 32), *(void *)(v26 + 40));
              }
              else {
                std::string v32 = *(std::string *)(v26 + 32);
              }
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&v32, "");
            }
            uint64_t v27 = (std::__shared_weak_count *)*((void *)this + 127);
            uint64_t v28 = *((void *)this + 126);
            uint64_t v29 = v27;
            if (v27) {
              atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            SipIPSecTransportGroup::initialize(v19, (uint64_t)v30, &v32, &v28, (ImsResult *)v36);
            if (v29) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v29);
            }
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v32.__r_.__value_.__l.__data_);
            }
            if (v31) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v31);
            }
            if ((*(unsigned int (**)(void, void))(**((void **)&v36[0] + 1) + 24))(*((void *)&v36[0] + 1), LODWORD(v36[1])))
            {
              *a3 = 0;
              a3[1] = 0;
              std::__shared_weak_count::__release_shared[abi:ne180100](v18);
            }
            if (a2) {
              ImsResult::operator=((uint64_t)a2, (uint64_t)v36);
            }
            ImsResult::~ImsResult((ImsResult *)v36);
            goto LABEL_30;
          }
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v18[8].__shared_weak_owners_ = v19;
          v18[9].__vftable = (std::__shared_weak_count_vtbl *)v18;
          std::__shared_weak_count::__release_weak(v20);
        }
        else
        {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          v18[8].__shared_weak_owners_ = v19;
          v18[9].__vftable = (std::__shared_weak_count_vtbl *)v18;
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        goto LABEL_34;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (a2)
  {
    memset((char *)&v37[1] + 8, 0, 48);
    *(void *)&v37[0] = &unk_1F20B2680;
    *((void *)&v37[0] + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = &_bambiDomain;
    LODWORD(v37[1]) = 1073741826;
    uint64_t v11 = ImsResult::operator<<<char [14]>((uint64_t)v37, "stack is null");
    ImsResult::operator=((uint64_t)a2, v11);
    ImsResult::~ImsResult((ImsResult *)v37);
  }
  *a3 = 0;
  a3[1] = 0;
  if (v7) {
    goto LABEL_31;
  }
}

void sub_1C5383190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  ImsResult::~ImsResult((ImsResult *)(v29 - 176));
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

void SipTransportLayer::setIPSecTransport(void *a1, void *a2)
{
  if (*a2 != a1[126])
  {
    uint64_t v4 = a1[128];
    if (v4)
    {
      LoggableString::LoggableString((LoggableString *)__p, "TransportLayer");
      (*(void (**)(uint64_t, void **))(*(void *)v4 + 40))(v4, __p);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v5 = (std::__shared_weak_count *)a1[129];
      *((_OWORD *)a1 + 64) = 0u;
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
    uint64_t v6 = a1[126];
    if (v6)
    {
      if (*a2)
      {
        uint64_t v7 = a1[127];
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        a1[128] = v6;
        int v8 = (std::__shared_weak_count *)a1[129];
        a1[129] = v7;
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        uint64_t v9 = (*(uint64_t (**)(void *))(a1[5] + 64))(a1 + 5);
        (*(void (**)(void *, uint64_t))(a1[5] + 16))(a1 + 5, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"keeping old SAs around for a bit: ", 34);
        *(unsigned char *)(v9 + 17) = 0;
        (*(void (**)(void, uint64_t))(*(void *)a1[128] + 104))(a1[128], v9);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v9 + 17) = 0;
      }
      else
      {
        LoggableString::LoggableString((LoggableString *)__p, "TransportLayer");
        (*(void (**)(uint64_t, void **))(*(void *)v6 + 40))(v6, __p);
        if (v41 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v10 = (std::__shared_weak_count *)a1[127];
      *((_OWORD *)a1 + 63) = 0u;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
    }
    uint64_t v11 = *a2;
    if (*a2)
    {
      uint64_t v12 = a1[130];
      uint64_t v13 = (std::__shared_weak_count *)a1[131];
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v11 = *a2;
      }
      LoggableString::LoggableString((LoggableString *)__p, "TransportLayer");
      (*(void (**)(uint64_t, void **))(*(void *)v11 + 32))(v11, __p);
      if (v41 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v14 = *a2;
      *(void *)(*a2 + 488) = a1 + 19;
      uint64_t v15 = a2[1];
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
      a1[126] = v14;
      size_t v16 = (std::__shared_weak_count *)a1[127];
      a1[127] = v15;
      if (v16)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        uint64_t v15 = a1[127];
        uint64_t v14 = a1[126];
      }
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
      a1[130] = v14;
      uint64_t v17 = (std::__shared_weak_count *)a1[131];
      a1[131] = v15;
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      int v18 = a1 + 5;
      uint64_t v19 = (*(uint64_t (**)(void *))(a1[5] + 32))(a1 + 5);
      (*(void (**)(void *, uint64_t))(a1[5] + 16))(a1 + 5, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v19 + 8), (uint64_t)"set active transport to ", 24);
      *(unsigned char *)(v19 + 17) = 0;
      (*(void (**)(void, uint64_t))(*(void *)*a2 + 104))(*a2, v19);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v19 + 17) = 0;
      if (v12)
      {
        uint64_t v20 = (*(uint64_t (**)(void *))(*v18 + 64))(a1 + 5);
        (*(void (**)(void *, uint64_t))(*v18 + 16))(a1 + 5, v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v20 + 8), (uint64_t)"old transport using port ", 25);
        *(unsigned char *)(v20 + 17) = 0;
        (*(void (**)(uint64_t))(*(void *)v12 + 208))(v12);
        std::ostream::operator<<();
        *(unsigned char *)(v20 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v20 + 17) = 0;
        uint64_t v21 = (std::__shared_weak_count *)a1[2];
        if (v21) {
          unint64_t v22 = std::__shared_weak_count::lock(v21);
        }
        else {
          unint64_t v22 = 0;
        }
        if (v12 == a1[124])
        {
          std::string::size_type v31 = (ImsPrefs *)(*(uint64_t (**)(void *))(*a1 + 184))(a1);
          AlwaysUseDefaultTransportKey = (void **)ImsPrefs::getAlwaysUseDefaultTransportKey(v31);
          if ((ImsPrefs::BOOLValue(v31, AlwaysUseDefaultTransportKey) & 1) == 0)
          {
            int v33 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 208))(v12);
            uint64_t v34 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
            long long v35 = *(uint64_t (**)(void *))(*v18 + 64);
            if (v33 == *(__int16 *)(v34 + 432))
            {
              uint64_t v36 = v35(a1 + 5);
              (*(void (**)(void *, uint64_t))(*v18 + 16))(a1 + 5, v36);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"will drop msg arriving on DefaultSipPort of ", 44);
              *(unsigned char *)(v36 + 17) = 0;
              (*(void (**)(void, uint64_t))(*(void *)a1[124] + 104))(a1[124], v36);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v36 + 17) = 0;
              *((unsigned char *)a1 + 2017) = 1;
            }
            else
            {
              uint64_t v37 = v35(a1 + 5);
              (*(void (**)(void *, uint64_t))(*v18 + 16))(a1 + 5, v37);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"removing old default transport ", 31);
              *(unsigned char *)(v37 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 104))(v12, v37);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v37 + 17) = 0;
              (*(void (**)(void))(*(void *)a1[124] + 272))(a1[124]);
              uint64_t v38 = a1[124];
              LoggableString::LoggableString((LoggableString *)__p, "TransportLayer");
              (*(void (**)(uint64_t, void **))(*(void *)v38 + 40))(v38, __p);
              if (v41 < 0) {
                operator delete(__p[0]);
              }
              uint64_t v39 = (std::__shared_weak_count *)a1[125];
              *((_OWORD *)a1 + 62) = 0u;
              if (v39) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v39);
              }
            }
          }
        }
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
      }
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    else
    {
      uint64_t v23 = (std::__shared_weak_count *)a1[127];
      *((_OWORD *)a1 + 63) = 0u;
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      uint64_t v24 = a1[124];
      uint64_t v25 = a1[125];
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      a1[130] = v24;
      uint64_t v26 = (std::__shared_weak_count *)a1[131];
      a1[131] = v25;
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (*((unsigned char *)a1 + 2017))
      {
        uint64_t v27 = (*(uint64_t (**)(void *))(a1[5] + 64))(a1 + 5);
        (*(void (**)(void *, uint64_t))(a1[5] + 16))(a1 + 5, v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v27 + 8), (uint64_t)"will no longer drop msg arriving on DefaultSipPort of ", 54);
        *(unsigned char *)(v27 + 17) = 0;
        (*(void (**)(void, uint64_t))(*(void *)a1[124] + 104))(a1[124], v27);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v27 + 17) = 0;
        *((unsigned char *)a1 + 2017) = 0;
      }
      uint64_t v29 = a1[5];
      uint64_t v28 = a1 + 5;
      uint64_t v30 = (*(uint64_t (**)(void *))(v29 + 32))(v28);
      (*(void (**)(void *, uint64_t))(*v28 + 16))(v28, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v30 + 8), (uint64_t)"set active transport to default transport", 41);
      *(unsigned char *)(v30 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v30 + 17) = 0;
    }
  }
}

void sub_1C5383C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void SipTransportLayer::handleTransportError(SipTransportLayer *this, const ImsResult *a2)
{
  uint64_t v4 = (*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 16))(this);
  uint64_t v5 = a2;
  do
  {
    uint64_t v6 = v5;
    uint64_t v5 = (const ImsResult *)*((void *)v5 + 4);
  }
  while (v5);
  if (ImsResultSet::containsResult((ImsResultSet *)(v4 + 536), *((_DWORD *)v6 + 4)))
  {
    ++*((_DWORD *)this + 484);
    unsigned int v7 = *(_DWORD *)((*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 16))(this) + 532);
    if (v7)
    {
      if (*((_DWORD *)this + 484) <= v7)
      {
        uint64_t v8 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 48))((char *)this + 40);
        (*(void (**)(char *, uint64_t))(*((void *)this + 5) + 16))((char *)this + 40, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)"handling transport error ", 25);
        *(unsigned char *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)" of ", 4);
        *(unsigned char *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(unsigned char *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v8 + 8), (uint64_t)": ", 2);
        *(unsigned char *)(v8 + 17) = 0;
        (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v8);
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v8 + 17) = 0;
        if (*((_DWORD *)this + 484) == v7)
        {
          uint64_t v9 = (*(uint64_t (**)(char *))(*((void *)this + 5) + 56))((char *)this + 40);
          (*(void (**)(char *, uint64_t))(*((void *)this + 5) + 16))((char *)this + 40, v9);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v9 + 8), (uint64_t)"too many transport errors", 25);
          *(unsigned char *)(v9 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v9 + 17) = 0;
          uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 2);
          if (v10)
          {
            uint64_t v11 = std::__shared_weak_count::lock(v10);
            if (v11)
            {
              uint64_t v12 = v11;
              uint64_t v13 = *((void *)this + 1);
              if (v13)
              {
                uint64_t v14 = *(void *)(v13 + 136);
                if (*(char *)(v13 + 4183) < 0) {
                  std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v13 + 4160), *(void *)(v13 + 4168));
                }
                else {
                  std::string __p = *(std::string *)(v13 + 4160);
                }
                uint64_t v18 = *(void *)(v14 + 248);
                if (v18) {
                  (*(void (**)(uint64_t, std::string *))(*(void *)v18 + 48))(v18, &__p);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v12);
            }
          }
        }
      }
    }
  }
  else
  {
    uint64_t v16 = *((void *)this + 5);
    uint64_t v15 = (char *)this + 40;
    uint64_t v17 = (*(uint64_t (**)(char *))(v16 + 64))(v15);
    (*(void (**)(char *, uint64_t))(*(void *)v15 + 16))(v15, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"not a fatal transport error: ", 29);
    *(unsigned char *)(v17 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(void *)a2 + 16))(a2, v17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v17 + 17) = 0;
  }
}

void sub_1C53840F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  _Unwind_Resume(a1);
}

void SipTransportLayer::logPrefix(SipTransportLayer *this, ImsOutStream *a2)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 240))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(void *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a2 + 1), (uint64_t)": ", 2);
  *((unsigned char *)a2 + 17) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1C53841C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'SipTransportLayer::logPrefix(SipTransportLayer *this, ImsOutStream *a2)
{
}

void SipTransportLayer::loggableName(SipTransportLayer *this@<X0>, LoggableString *a2@<X8>)
{
  char v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v4)
  {
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v4);
  if (!v5 || (uint64_t v6 = *((void *)this + 1)) == 0 || !*(unsigned char *)(v6 + 176))
  {
LABEL_7:
    LoggableString::LoggableString(a2, "TransportLayer");
    if (!v5) {
      return;
    }
    goto LABEL_8;
  }
  LoggableString::LoggableString(a2, "TransportLayer(EMERGENCY)");
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_1C5384288(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipTransportLayer::loggableName(SipTransportLayer *this@<X0>, LoggableString *a2@<X8>)
{
}

void SipTransportLayer::ipsecTransportExpired(uint64_t a1, void *a2)
{
  if (SipTransportLayer::usingNullTransport((std::__shared_weak_count **)a1)) {
    goto LABEL_2;
  }
  if (!*a2) {
    return;
  }
  if (*a2 == *(void *)(a1 + 1008))
  {
LABEL_2:
    v14[0] = 0;
    v14[1] = 0;
    SipTransportLayer::setIPSecTransport((void *)a1, v14);
    char v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (v4)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(void *)(a1 + 8);
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 144);
          uint64_t v9 = *(void *)(v8 + 248);
          uint64_t v10 = *(std::__shared_weak_count **)(v8 + 256);
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v9 + 168))(v9, 16, 0, 0);
          if (v10) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v11 = a1 + 40;
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(v12 + 64))(v11);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"unknown secure transport ", 25);
    *(unsigned char *)(v13 + 17) = 0;
    (*(void (**)(void, uint64_t))(*(void *)*a2 + 104))(*a2, v13);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v13 + 17) = 0;
  }
}

void sub_1C5384480(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'SipTransportLayer::ipsecTransportExpired(uint64_t a1, void *a2)
{
}

void SipTransportLayer::removeConnections(SipTransportLayer *this, int a2, int a3, int a4)
{
  uint64_t v8 = (SipTransportGroup *)*((void *)this + 124);
  if (v8) {
    SipTransportGroup::removeConnections(v8, a2, a3, a4);
  }
  uint64_t v9 = (SipTransportGroup *)*((void *)this + 126);
  if (v9) {
    SipTransportGroup::removeConnections(v9, a2, a3, a4);
  }
  uint64_t v10 = (SipTransportGroup *)*((void *)this + 128);
  if (v10)
  {
    SipTransportGroup::removeConnections(v10, a2, a3, a4);
  }
}

uint64_t SipTransportLayer::updateServiceClass(SipTransportLayer *this)
{
  uint64_t v2 = *((void *)this + 124);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 288))(v2);
  }
  uint64_t v3 = *((void *)this + 126);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 288))(v3);
  }
  uint64_t result = *((void *)this + 128);
  if (result)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 288);
    return v5();
  }
  return result;
}

uint64_t SipTransportLayer::updateCrlfKeepAliveInterval(SipTransportLayer *this, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)((*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 16))(this) + 452) = a2;
  *(_DWORD *)((*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 16))(this) + 448) = a3;
  *(_DWORD *)((*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 16))(this) + 444) = a3;
  uint64_t v6 = *((void *)this + 124);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 296))(v6, a2, a3);
  }
  uint64_t v7 = *((void *)this + 126);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 296))(v7, a2, a3);
  }
  uint64_t result = *((void *)this + 128);
  if (result)
  {
    uint64_t v9 = *(uint64_t (**)(void))(*(void *)result + 296);
    return v9();
  }
  return result;
}

uint64_t SipTransportLayer::updateCrlfKeepAliveNetwork(SipTransportLayer *this, uint64_t a2)
{
  uint64_t v4 = *((void *)this + 124);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 304))(v4, a2);
  }
  uint64_t v5 = *((void *)this + 126);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 304))(v5, a2);
  }
  uint64_t result = *((void *)this + 128);
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 304);
    return v7();
  }
  return result;
}

uint64_t SipTransportLayer::config(SipTransportLayer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2) {
    return 1608;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 1608;
  }
  uint64_t v4 = *((void *)this + 1) + 1608;
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v4;
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2) {
    return 1608;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 1608;
  }
  uint64_t v4 = *((void *)this + 1) + 1608;
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v4;
}

void SipTransportLayer::setDropMaskFromString(uint64_t a1, std::string *a2, int a3)
{
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  ims::tokenize(a2, &v42, 0x2Cu);
  uint64_t v5 = v42;
  uint64_t v6 = v43;
  if (v42 != v43)
  {
    uint64_t v7 = a1 + 40;
    uint64_t v8 = "outgoing ";
    if (a3) {
      uint64_t v8 = "incoming ";
    }
    uint64_t v38 = (uint64_t)v8;
    if (a3) {
      uint64_t v9 = 176;
    }
    else {
      uint64_t v9 = 200;
    }
    if (a3) {
      uint64_t v10 = a1 + 176;
    }
    else {
      uint64_t v10 = a1 + 200;
    }
    uint64_t v11 = (void **)(v10 + 8);
    while (1)
    {
      memset(&__str, 0, sizeof(__str));
      if (*(char *)(v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
      }
      else
      {
        long long v12 = *(_OWORD *)v5;
        __str.__r_.__value_.__r.__words[2] = *(void *)(v5 + 16);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v12;
      }
      memset(&v40, 0, sizeof(v40));
      unsigned int v39 = 0;
      size_t v13 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? HIBYTE(__str.__r_.__value_.__r.__words[2])
          : __str.__r_.__value_.__l.__size_;
      if (!v13) {
        break;
      }
      uint64_t v14 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      uint64_t v15 = memchr(v14, 58, v13);
      std::string::size_type v16 = v15 - (unsigned char *)v14;
      if (!v15 || v16 == -1) {
        break;
      }
      std::string::basic_string(&v46, &__str, 0, v16, (std::allocator<char> *)&v45);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      std::string v40 = v46;
      memset(&v46, 0, sizeof(v46));
      std::string::basic_string(&v46, &__str, v16 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v45);
      std::string::size_type size = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      char v19 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        uint64_t v20 = &v46;
      }
      else
      {
        std::string::size_type size = v46.__r_.__value_.__l.__size_;
        uint64_t v20 = (std::string *)v46.__r_.__value_.__r.__words[0];
      }
      if (size == 1 && v20->__r_.__value_.__s.__data_[0] == 42)
      {
        unsigned int v21 = -1;
      }
      else
      {
        unsigned int v21 = strtoul((const char *)v20, 0, 10);
        char v19 = HIBYTE(v46.__r_.__value_.__r.__words[2]);
      }
      unsigned int v39 = v21;
      if (v19 < 0)
      {
        operator delete(v46.__r_.__value_.__l.__data_);
        if (v21) {
          goto LABEL_40;
        }
      }
      else if (v21)
      {
        goto LABEL_40;
      }
LABEL_70:
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      v5 += 24;
      if (v5 == v6) {
        goto LABEL_75;
      }
    }
    std::string::operator=(&v40, &__str);
LABEL_40:
    unint64_t v22 = *v11;
    uint64_t v23 = (std::string::size_type *)(v10 + 8);
    uint64_t v24 = (std::string::size_type *)(v10 + 8);
    if (!*v11) {
      goto LABEL_60;
    }
    uint64_t v25 = (void **)(v10 + 8);
    do
    {
      char v26 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22 + 4, (void **)&v40.__r_.__value_.__l.__data_);
      if (v26 >= 0) {
        uint64_t v27 = v22;
      }
      else {
        uint64_t v27 = v22 + 1;
      }
      if (v26 >= 0) {
        uint64_t v25 = (void **)v22;
      }
      unint64_t v22 = (void *)*v27;
    }
    while (*v27);
    if (v25 != v11
      && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v40, v25 + 4) & 0x80) == 0)
    {
      std::string::size_type v28 = (std::string::size_type)(v25 + 7);
      goto LABEL_67;
    }
    uint64_t v29 = (std::string::size_type *)*v11;
    uint64_t v23 = (std::string::size_type *)(v10 + 8);
    uint64_t v24 = (std::string::size_type *)(v10 + 8);
    if (!*v11) {
      goto LABEL_60;
    }
    uint64_t v23 = (std::string::size_type *)(v10 + 8);
    while (1)
    {
      while (1)
      {
        uint64_t v24 = v29;
        uint64_t v30 = v29 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v40, (void **)v29 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v29 = (std::string::size_type *)*v24;
        uint64_t v23 = v24;
        if (!*v24) {
          goto LABEL_60;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v30, (void **)&v40.__r_.__value_.__l.__data_) & 0x80) == 0)break; {
      uint64_t v23 = v24 + 1;
      }
      uint64_t v29 = (std::string::size_type *)v24[1];
      if (!v29) {
        goto LABEL_60;
      }
    }
    std::string::size_type v31 = *v23;
    if (!*v23)
    {
LABEL_60:
      v46.__r_.__value_.__r.__words[2] = 0;
      std::string v32 = (char *)operator new(0x70uLL);
      v46.__r_.__value_.__r.__words[0] = (std::string::size_type)v32;
      v46.__r_.__value_.__l.__size_ = v10 + 8;
      int v33 = (std::string *)(v32 + 32);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v33, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)&v33->__r_.__value_.__l.__data_ = *(_OWORD *)&v40.__r_.__value_.__l.__data_;
        *((void *)v32 + 6) = *((void *)&v40.__r_.__value_.__l + 2);
      }
      *(_OWORD *)(v32 + 88) = 0u;
      *((void *)v32 + 13) = 0;
      *(_OWORD *)(v32 + 72) = 0u;
      *(_OWORD *)(v32 + 56) = 0u;
      *((void *)v32 + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v32 + 96;
      v46.__r_.__value_.__s.__data_[16] = 1;
      *(void *)std::string v32 = 0;
      *((void *)v32 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
      *((void *)v32 + 2) = v24;
      std::string::size_type *v23 = (std::string::size_type)v32;
      uint64_t v34 = **(void **)(a1 + v9);
      if (v34)
      {
        *(void *)(a1 + v9) = v34;
        std::string v32 = (char *)*v23;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v10 + 8), (uint64_t *)v32);
      ++*(void *)(v10 + 16);
      std::string::size_type v31 = v46.__r_.__value_.__r.__words[0];
      v46.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&v46);
    }
    std::string::size_type v28 = v31 + 56;
    std::string::operator=((std::string *)v28, &v40);
LABEL_67:
    long long v35 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 64);
    if (v39)
    {
      uint64_t v36 = v35(a1 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(a1 + 40, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"will drop ", 10);
      *(unsigned char *)(v36 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), v38, 9);
      *(unsigned char *)(v36 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v36 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)" responses to ", 14);
      *(unsigned char *)(v36 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v36 + 32))(v36, &v40);
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v36 + 17) = 0;
      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)(v28 + 32), &v39, &v39);
    }
    else
    {
      uint64_t v37 = v35(a1 + 40);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(a1 + 40, v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)"will drop ", 10);
      *(unsigned char *)(v37 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), v38, 9);
      *(unsigned char *)(v37 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(void *)v37 + 32))(v37, &v40);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v37 + 8), (uint64_t)" requests", 9);
      *(unsigned char *)(v37 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v37 + 17) = 0;
      *(unsigned char *)(v28 + 24) = 1;
    }
    goto LABEL_70;
  }
LABEL_75:
  v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v42;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
}

void sub_1C5384EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  a18 = &a24;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

void SipTransportLayer::networkManager(std::__shared_weak_count **this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = std::__shared_weak_count::lock(this[2]);
  uint64_t shared_weak_owners = this[1][5].__shared_weak_owners_;
  uint64_t v6 = *(void *)(shared_weak_owners + 656);
  uint64_t v7 = *(void *)(shared_weak_owners + 664);
  *a2 = v6;
  a2[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

uint64_t SipTransportLayer::prefs(SipTransportLayer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2)
  {
    uint64_t v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 1);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = SipStack::prefs((SipStack *)v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

void sub_1C5384FFC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *SipTransportLayer::handleSystemWake(int8x8_t *this)
{
  if (*(void *)&this[124]
    && *(_DWORD *)((*(uint64_t (**)(int8x8_t *))(*(void *)this + 16))(this) + 460))
  {
    uint64_t v2 = (*(uint64_t (**)(int8x8_t *))(*(void *)&this[5] + 64))(this + 5);
    (*(void (**)(int8x8_t *, uint64_t))(*(void *)&this[5] + 16))(this + 5, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v2 + 8), (uint64_t)"SipTransportLayer::handleSystemWake()", 37);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v2 + 17) = 0;
    (*(void (**)(void))(**(void **)&this[124] + 240))(*(void *)&this[124]);
  }
  SipTimerContainer::cancelTimer(this + 101, (std::string *)"SystemWakeWaitTimeout");
  this[252].i8[0] = 0;
  return SipTransportLayer::processDeferredIncomingMessages((SipTransportLayer *)this);
}

uint64_t SipTransportLayer::handleKeepAliveWake(uint64_t this)
{
  if (*(void *)(this + 992))
  {
    uint64_t v1 = this;
    this = (*(uint64_t (**)(uint64_t))(*(void *)this + 16))(this);
    if (*(_DWORD *)(this + 460))
    {
      uint64_t v3 = *(void *)(v1 + 40);
      uint64_t v2 = (void **)(v1 + 40);
      uint64_t v4 = (*(uint64_t (**)(void **))(v3 + 64))(v2);
      ((void (*)(void **, uint64_t))(*v2)[2])(v2, v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"SipTransportLayer::handleKeepAliveWake()", 40);
      *(unsigned char *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v4 + 17) = 0;
      uint64_t v5 = *(uint64_t (**)(void))(*v2[119] + 312);
      return v5();
    }
  }
  return this;
}

void SipTransportLayer::terminateRegistration(SipTransportLayer *a1, uint64_t a2)
{
  if (SipTransportLayer::userAgent(a1))
  {
    uint64_t v4 = SipTransportLayer::userAgent(a1);
    uint64_t v5 = *(void *)(v4 + 248);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 256);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v5 + 168))(v5, a2, 0, 0);
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1C538536C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *SipTransportLayer::addUAHeaders(SipTransportLayer *this, SipMessage *a2)
{
  uint64_t result = (std::string *)SipTransportLayer::userAgent(this);
  if (result)
  {
    uint64_t v5 = (SipUserAgent *)SipTransportLayer::userAgent(this);
    return SipUserAgent::addUAHeaders(v5, a2);
  }
  return result;
}

uint64_t SipTransportLayer::currentAccessNetwork(SipTransportLayer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2 && (uint64_t v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    uint64_t v4 = *((void *)this + 1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4 + 3160;
}

uint64_t SipTransportLayer::accessNetworks(SipTransportLayer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2) {
    return 3160;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 3160;
  }
  uint64_t v4 = *((void *)this + 1) + 3160;
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v4;
}

uint64_t SipTransportLayer::countryOfOrigination(SipTransportLayer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2) {
    return 4112;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 4112;
  }
  uint64_t v4 = *((void *)this + 1) + 4112;
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v4;
}

uint64_t SipTransportLayer::routableLocalAddress(SipTransportLayer *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2) {
    return 4136;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 4136;
  }
  uint64_t v4 = *((void *)this + 1) + 4136;
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v4;
}

uint64_t SipTransportLayer::lastRegistrationTime(SipTransportLayer *this)
{
  uint64_t v1 = SipTransportLayer::userAgent(this);
  uint64_t v3 = *(void *)(v1 + 248);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 256);
  if (!v2) {
    return *(void *)(v3 + 496);
  }
  atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v4 = *(void *)(v3 + 496);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v4;
}

uint64_t SipTransportLayer::uaConfig(SipTransportLayer *this)
{
  uint64_t v1 = (SipUserAgent *)SipTransportLayer::userAgent(this);
  return SipUserAgent::config(v1);
}

void SipTransportLayer::preferredSeviceClass(SipTransportLayer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    uint64_t v7 = (SipStack *)*((void *)this + 1);
    if (v7
      && (uint64_t v8 = (ImsPrefs *)SipStack::prefs(*((SipStack **)this + 1)),
          AddQosOptionsToSocketsKey = (void **)ImsPrefs::getAddQosOptionsToSocketsKey(v8),
          ImsPrefs::BOOLValue(v8, AddQosOptionsToSocketsKey)))
    {
      uint64_t v10 = (ims::AccessNetwork *)(*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 80))(this);
      BOOL isWifi = ims::AccessNetwork::isWifi(v10);
      uint64_t v12 = *(void *)this;
      if (isWifi)
      {
        if (*(unsigned char *)((*(uint64_t (**)(SipTransportLayer *))(v12 + 80))(this) + 48)
          && (size_t v13 = (ImsPrefs *)SipStack::prefs(v7),
              IgnoreWifiHotspotKey = (void **)ImsPrefs::getIgnoreWifiHotspotKey(v13),
              (ImsPrefs::BOOLValue(v13, IgnoreWifiHotspotKey) & 1) == 0))
        {
          uint64_t v15 = (*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 256))(this) + 588;
        }
        else
        {
          uint64_t v15 = (*(uint64_t (**)(SipTransportLayer *))(*(void *)this + 256))(this) + 600;
        }
      }
      else
      {
        uint64_t v15 = (*(uint64_t (**)(SipTransportLayer *))(v12 + 256))(this) + 612;
      }
      *(void *)a2 = *(void *)v15;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(v15 + 8);
    }
    else
    {
      *(void *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *(void *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
  }
}

void sub_1C5385748(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t SipTransportLayer::serviceRoute(SipTransportLayer *this)
{
  return (uint64_t)this + 696;
}

uint64_t SipTransportLayer::registrationPath(SipTransportLayer *this)
{
  return (uint64_t)this + 752;
}

uint64_t SipTransportLayer::proxy(SipTransportLayer *this)
{
  return (uint64_t)this + 288;
}

uint64_t SipTransportLayer::securityDelegate(SipTransportLayer *this)
{
  return *((void *)this + 33);
}

uint64_t SipTransportLayer::localInterface(SipTransportLayer *this)
{
  return *((void *)this + 133);
}

uint64_t SipTransportLayer::State::State(uint64_t a1, const std::string *a2)
{
  *(void *)a1 = &unk_1F20C5BE0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  return a1;
}

void sub_1C53857E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *SipTransportLayer::State::loggableName@<X0>(SipTransportLayer::State *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 8));
}

uint64_t IncomingSipMessage::IncomingSipMessage(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, char a6)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = *a4;
  uint64_t v8 = a4[1];
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 40) = *a5;
  uint64_t v9 = a5[1];
  *(void *)(a1 + 48) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 56) = a6;
  *(void *)a1 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  (*(void (**)(long long *__return_ptr))(**(void **)a3 + 32))(&v13);
  long long v10 = v13;
  long long v13 = 0uLL;
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (*((void *)&v13 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  return a1;
}

void sub_1C5385988(_Unwind_Exception *exception_object)
{
  uint64_t v3 = (std::__shared_weak_count *)v1[6];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[4];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)v1[2];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(exception_object);
}

void PowerAssertionTerminationLock::~PowerAssertionTerminationLock(PowerAssertionTerminationLock *this)
{
  uint64_t v2 = *(uint64_t ***)this;
  if (*(void *)this)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    PowerAssertionLock::deinitialize(v2, (uint64_t)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *std::list<IncomingSipMessage *>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      uint64_t v7[2] = v8;
      *uint64_t v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      uint64_t v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1C5385AB4(_Unwind_Exception *a1)
{
  std::__list_imp<unsigned long long>::clear(v1);
  _Unwind_Resume(a1);
}

void IncomingSipMessage::~IncomingSipMessage(IncomingSipMessage *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void std::__tree<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipTransportLayer::DropMessageInfo>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipTransportLayer::DropMessageInfo>,0>(uint64_t a1)
{
  std::__tree<unsigned int>::destroy(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__shared_ptr_emplace<PowerAssertionLock>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C5D58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<PowerAssertionLock>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C5D58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

void std::__shared_ptr_emplace<PowerAssertionLock>::__on_zero_shared(uint64_t a1)
{
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t **std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>::operator+=[abi:ne180100](uint64_t **result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *result;
    uint64_t v3 = a2 - 0x505050505050505 * (((uint64_t)result[1] - **result) >> 3);
    if (v3 < 1)
    {
      unint64_t v7 = 15 - v3;
      uint64_t v8 = &v2[-(v7 >> 4)];
      *uint64_t result = v8;
      uint64_t v5 = *v8;
      unsigned int v6 = ~v7 & 0xF;
    }
    else
    {
      uint64_t v4 = (uint64_t *)((char *)v2 + (((unint64_t)v3 >> 1) & 0x7FFFFFFFFFFFFFF8));
      *uint64_t result = v4;
      uint64_t v5 = *v4;
      unsigned int v6 = v3 & 0xF;
    }
    result[1] = (uint64_t *)(v5 + 408 * v6);
  }
  return result;
}

double std::__for_each_segment[abi:ne180100]<std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>,std::__copy_loop<std::_ClassicAlgPolicy>::_CopySegment<std::__deque_iterator<SipUri,SipUri const*,SipUri const&,SipUri const* const*,long,16l>,std::__deque_iterator<SipUri,SipUri*,SipUri&,SipUri**,long,16l>>>(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = *(void **)a5;
  uint64_t v8 = *(SipUri **)(a5 + 8);
  if (a1 != a3)
  {
    long long v10 = a1 + 1;
    uint64_t v11 = *a1 + 6528;
    uint64_t v14 = 0;
    long long v15 = 0uLL;
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipUri const*,std::__deque_iterator<SipUri,SipUri*,SipUri&,SipUri**,long,16l>,0>((SipUri *)&v14, a2, v11, v7, v8);
    uint64_t v8 = (SipUri *)*((void *)&v15 + 1);
    unint64_t v7 = (void *)v15;
    *(void *)a5 = v15;
    for (*(void *)(a5 + 8) = v8; v10 != a3; *(void *)(a5 + 8) = v8)
    {
      uint64_t v12 = *v10++;
      uint64_t v14 = 0;
      long long v15 = 0uLL;
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipUri const*,std::__deque_iterator<SipUri,SipUri*,SipUri&,SipUri**,long,16l>,0>((SipUri *)&v14, v12, v12 + 6528, v7, v8);
      uint64_t v8 = (SipUri *)*((void *)&v15 + 1);
      unint64_t v7 = (void *)v15;
      *(void *)a5 = v15;
    }
    a2 = *a3;
  }
  uint64_t v14 = 0;
  long long v15 = 0uLL;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipUri const*,std::__deque_iterator<SipUri,SipUri*,SipUri&,SipUri**,long,16l>,0>((SipUri *)&v14, a2, a4, v7, v8);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

SipUri *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<SipUri const*,std::__deque_iterator<SipUri,SipUri*,SipUri&,SipUri**,long,16l>,0>(SipUri *result, uint64_t a2, uint64_t a3, void *a4, SipUri *this)
{
  unsigned int v6 = a4;
  uint64_t v7 = a2;
  uint64_t v8 = result;
  if (a2 == a3)
  {
    uint64_t v9 = a2;
  }
  else
  {
    uint64_t v9 = a3;
    long long v10 = (SipUri *)*a4;
    while (1)
    {
      int64_t v11 = 0xFAFAFAFAFAFAFAFBLL * ((v10 - this + 6528) >> 3);
      if ((uint64_t)(0xFAFAFAFAFAFAFAFBLL * ((v9 - v7) >> 3)) < v11) {
        int64_t v11 = 0xFAFAFAFAFAFAFAFBLL * ((v9 - v7) >> 3);
      }
      if (v11)
      {
        uint64_t v12 = v7 + 408 * v11;
        uint64_t v13 = 408 * v11;
        do
        {
          double result = SipUri::operator=(this, v7);
          v7 += 408;
          this = (SipUri *)((char *)this + 408);
          v13 -= 408;
        }
        while (v13);
        uint64_t v7 = v12;
      }
      if (v7 == v9) {
        break;
      }
      uint64_t v14 = (SipUri *)v6[1];
      ++v6;
      long long v10 = v14;
      this = v14;
    }
    if ((SipUri *)(*v6 + 6528) == this)
    {
      long long v15 = (SipUri *)v6[1];
      ++v6;
      this = v15;
    }
  }
  *(void *)uint64_t v8 = v9;
  *((void *)v8 + bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v6;
  *((void *)v8 + 2) = this;
  return result;
}

void *std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5DA8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5DA8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20C5DA8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C5DA8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    unsigned int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 208))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C53861E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0,std::allocator<SipTransportLayer::initializeTransportToProxy(std::deque<SipUri> const&,unsigned long,SipTransportInitDelegate *)::$_0>,void ()(std::string &)>::target_type()
{
}

void *std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5E28;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5E28;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20C5E28;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C5E28;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    unsigned int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 208))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5386490(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0,std::allocator<SipTransportLayer::waitUntilProxyIsReachableViaLocalAddress(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,SipTransportLayer::DropMessageInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,SipTransportLayer::DropMessageInfo>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void *std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5EC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::~__func(void *a1)
{
  *a1 = &unk_1F20C5EC0;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  JUMPOUT(0x1C878E320);
}

char *std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  double result = (char *)operator new(0x20uLL);
  *(void *)double result = &unk_1F20C5EC0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F20C5EC0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete(__p);
}

void std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::operator()(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    uint64_t v5 = a1[1];
    unsigned int v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2]) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v5 + 208))(v5, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1C5386790(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0,std::allocator<SipTransportLayer::processMessageFromTransport(SipMessage *,unsigned char const*,unsigned long,BOOL,std::shared_ptr<IpAddress> const&,std::shared_ptr<SipTransportGroup>,std::shared_ptr<SipTcpConnection>)::$_0>,void ()(std::string &)>::target_type()
{
}

void std::__shared_ptr_emplace<SipIPSecTransportGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C5F40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipIPSecTransportGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F20C5F40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C878E320);
}

uint64_t std::__shared_ptr_emplace<SipIPSecTransportGroup>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t __cxx_global_var_init_182()
{
  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_1C51D1000);
  }
  return result;
}

uint64_t _GLOBAL__sub_I_SipTransportLayer_cpp()
{
  _MergedGlobals_10 = 0;
  qword_1EBBDBFB0 = 0;
  qword_1EBBDBFB8 = 0;
  uint64_t v0 = operator new(8uLL);
  _MergedGlobals_10 = (uint64_t)v0;
  *uint64_t v0 = 0x800000001;
  qword_1EBBDBFB0 = (uint64_t)(v0 + 1);
  qword_1EBBDBFB8 = (uint64_t)(v0 + 1);
  __cxa_atexit((void (*)(void *))std::vector<unsigned int>::~vector[abi:ne180100], &_MergedGlobals_10, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Uninitialized");
  SipTransportLayer::State::State((uint64_t)&unk_1EBBDBFD8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTransportLayer::State::~State, &unk_1EBBDBFD8, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "Idle");
  SipTransportLayer::State::State((uint64_t)&unk_1EBBDBFF8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTransportLayer::State::~State, &unk_1EBBDBFF8, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WaitingForInterface");
  SipTransportLayer::State::State((uint64_t)&unk_1EBBDC018, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTransportLayer::State::~State, &unk_1EBBDC018, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WaitingForReachability");
  SipTransportLayer::State::State((uint64_t)&unk_1EBBDC038, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTransportLayer::State::~State, &unk_1EBBDC038, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "InitializingTransport");
  SipTransportLayer::State::State((uint64_t)&unk_1EBBDC058, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __cxa_atexit((void (*)(void *))SipTransportLayer::State::~State, &unk_1EBBDC058, &dword_1C51D1000);
  std::string::basic_string[abi:ne180100]<0>(&qword_1EBBDBFC0, "WaitForReachabilityTimer");
  return __cxa_atexit(MEMORY[0x1E4FBA210], &qword_1EBBDBFC0, &dword_1C51D1000);
}

void sub_1C5386B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void BambiCallOptions::initializeFromPrefs(BambiCallOptions *this, const ImsPrefs *a2)
{
  SessionExpiresSecondsKey = (void **)ImsPrefs::getSessionExpiresSecondsKey(this);
  uint64_t v5 = (ImsPrefs *)ImsPrefs::intValue(a2, SessionExpiresSecondsKey);
  *((_DWORD *)this + 8) = v5;
  MinSessionExpiresSecondsKey = (void **)ImsPrefs::getMinSessionExpiresSecondsKey(v5);
  uint64_t v7 = (ImsPrefs *)ImsPrefs::intValue(a2, MinSessionExpiresSecondsKey);
  *((_DWORD *)this + 9) = v7;
  SessionExpiresCushionKey = (void **)ImsPrefs::getSessionExpiresCushionKey(v7);
  uint64_t v9 = (ImsPrefs *)ImsPrefs::intValue(a2, SessionExpiresCushionKey);
  *((_DWORD *)this + 1bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v9;
  SendOfferWithInviteKey = (void **)ImsPrefs::getSendOfferWithInviteKey(v9);
  int64_t v11 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, SendOfferWithInviteKey);
  *((unsigned char *)this + 50) = (_BYTE)v11;
  StrictTS24930PreconditionHeadersKey = (void **)ImsPrefs::getStrictTS24930PreconditionHeadersKey(v11);
  uint64_t v13 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, StrictTS24930PreconditionHeadersKey);
  *((unsigned char *)this + 60) = (_BYTE)v13;
  EchoRemotePreconditionStrengthKey = (void **)ImsPrefs::getEchoRemotePreconditionStrengthKey(v13);
  long long v15 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, EchoRemotePreconditionStrengthKey);
  *((unsigned char *)this + 6bambi::XmlTreeItem::~XmlTreeItem(this + 1) = (_BYTE)v15;
  std::string v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  InitialRemotePreconditionStrengthKey = (void **)ImsPrefs::getInitialRemotePreconditionStrengthKey(v15);
  uint64_t v17 = (ImsPrefs *)ImsPrefs::stringValue(a2, InitialRemotePreconditionStrengthKey);
  OnlyUpdatePreconditionsIfConfPresentKey = (void **)ImsPrefs::getOnlyUpdatePreconditionsIfConfPresentKey(v17);
  char v19 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, OnlyUpdatePreconditionsIfConfPresentKey);
  *((unsigned char *)this + 62) = (_BYTE)v19;
  PreconditionUpdateDelayTimerMillisecondsKey = (void **)ImsPrefs::getPreconditionUpdateDelayTimerMillisecondsKey(v19);
  unsigned int v21 = (ImsPrefs *)ImsPrefs::intValue(a2, PreconditionUpdateDelayTimerMillisecondsKey);
  *((_DWORD *)this + 16) = v21;
  PreconditionAllowMTUpdateKey = (void **)ImsPrefs::getPreconditionAllowMTUpdateKey(v21);
  uint64_t v23 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, PreconditionAllowMTUpdateKey);
  *((unsigned char *)this + 72) = (_BYTE)v23;
  SendPreconditionsInConfirmedSessionsKey = (void **)ImsPrefs::getSendPreconditionsInConfirmedSessionsKey(v23);
  uint64_t v25 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, SendPreconditionsInConfirmedSessionsKey);
  *((unsigned char *)this + 73) = (_BYTE)v25;
  SendPreconditionsInPrackKey = (void **)ImsPrefs::getSendPreconditionsInPrackKey(v25);
  uint64_t v27 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, SendPreconditionsInPrackKey);
  *((unsigned char *)this + 74) = (_BYTE)v27;
  RequirePreconditionsWhenSdpPresentKey = (void **)ImsPrefs::getRequirePreconditionsWhenSdpPresentKey(v27);
  uint64_t v29 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, RequirePreconditionsWhenSdpPresentKey);
  *((unsigned char *)this + 63) = (_BYTE)v29;
  IgnoreNonCompliantSupportedHeadersKey = (void **)ImsPrefs::getIgnoreNonCompliantSupportedHeadersKey(v29);
  std::string::size_type v31 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, IgnoreNonCompliantSupportedHeadersKey);
  *((unsigned char *)this + 75) = (_BYTE)v31;
  RequirePreconditionsWhenMandatoryKey = (void **)ImsPrefs::getRequirePreconditionsWhenMandatoryKey(v31);
  int v33 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, RequirePreconditionsWhenMandatoryKey);
  *((unsigned char *)this + 76) = (_BYTE)v33;
  PreconditionsKey = (const ImsPrefsKeyEnum *)ImsPrefs::getPreconditionsKey(v33);
  ImsPrefs::stringValue(a2, PreconditionsKey, &__p);
  long long v35 = (ImsPrefs *)SipPreconditions::supportLevelFromString((uint64_t)&__p);
  *((_DWORD *)this + 13) = v35;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  SetSessionTimerRefresherInInitialRequestKey = (void **)ImsPrefs::getSetSessionTimerRefresherInInitialRequestKey(v35);
  uint64_t v37 = (ImsPrefs *)ImsPrefs::BOOLValue(a2, SetSessionTimerRefresherInInitialRequestKey);
  *((unsigned char *)this + 49) = (_BYTE)v37;
  SendReInviteInInactiveSessionsKey = (void **)ImsPrefs::getSendReInviteInInactiveSessionsKey(v37);
  *((unsigned char *)this + 84) = ImsPrefs::BOOLValue(a2, SendReInviteInInactiveSessionsKey);
  if (SHIBYTE(v42) < 0) {
    operator delete(v40);
  }
}

void sub_1C5386D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCall::BambiCall(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10 = a2[1];
  *(void *)a1 = v10;
  *(void *)(a1 + *(void *)(v10 - 4XcapDocumentCommDiversion::~XcapDocumentCommDiversion((XcapDocumentCommDiversion *)((char *)this - 8)) = a2[2];
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 12) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call");
  uint64_t v11 = *a3;
  if (*(char *)(*a3 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)(v11 + 4160), *(void *)(v11 + 4168));
  }
  else {
    std::string v24 = *(std::string *)(v11 + 4160);
  }
  ImsLogContainer::ImsLogContainer(a1 + 80, &__p, &v24);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  uint64_t v12 = *a2;
  *(void *)a1 = *a2;
  *(void *)(a1 + *(void *)(v12 - 4XcapDocumentCommDiversion::~XcapDocumentCommDiversion((XcapDocumentCommDiversion *)((char *)this - 8)) = a2[3];
  *(void *)(a1 + 80) = &unk_1F20C6048;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 216));
  *(_DWORD *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 462) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 560) = 0x40A7700000000000;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 658) = 0u;
  *(void *)(a1 + 712) = 90;
  *(_WORD *)(a1 + 720) = 1;
  *(unsigned char *)(a1 + 722) = 1;
  *(void *)(a1 + 724) = 0x200000001;
  *(_WORD *)(a1 + 732) = 256;
  *(unsigned char *)(a1 + 734) = 1;
  *(void *)(a1 + 735) = 0;
  *(_WORD *)(a1 + 743) = 256;
  *(_DWORD *)(a1 + 745) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_DWORD *)(a1 + 752) = 0;
  *(unsigned char *)(a1 + 756) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(unsigned char *)(a1 + 808) = 0;
  *(void *)(a1 + 848) = 0x40A7700000000000;
  *(unsigned char *)(a1 + 992) = 0;
  *(unsigned char *)(a1 + 1016) = 0;
  *(unsigned char *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(void *)(a1 + 1040) = 0;
  SipUri::SipUri((SipUri *)(a1 + 1048));
  *(void *)(a1 + 1560) = 0;
  *(unsigned char *)(a1 + 1568) = 0;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(unsigned char *)(a1 + 1552) = 0;
  *(void *)(a1 + 1632) = 0;
  *(unsigned char *)(a1 + 1640) = 0;
  *(unsigned char *)(a1 + 1624) = 0;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(void *)(a1 + 1488) = 0;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1708) = 0u;
  *(unsigned char *)(a1 + 1752) = 0;
  *(void *)(a1 + 1744) = 0;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_DWORD *)(a1 + 1756) = 0x10000;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_DWORD *)(a1 + 1807) = 0;
  *(void *)(a1 + 1812) = 0;
  *(unsigned char *)(a1 + 1820) = 0;
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 400);
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 208);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v16 = *a3;
  uint64_t v15 = a3[1];
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 368);
  *(void *)(a1 + 360) = v16;
  *(void *)(a1 + 368) = v15;
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  uint64_t v19 = *a4;
  uint64_t v18 = a4[1];
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v19;
  *(void *)(a1 + 384) = v18;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  *(void *)(a1 + 320) = a1 + *(void *)(*(void *)a1 - 48);
  uint64_t v21 = *a3;
  if (*(char *)(*a3 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v21 + 4160), *(void *)(v21 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v21 + 4160);
  }
  std::string::operator=((std::string *)(a1 + 264), (const std::string *)(a1 + 88));
  std::string::operator=((std::string *)(a1 + 288), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = time(0);
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 448) = 1;
  *(unsigned char *)(a1 + 46bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *(_WORD *)(a1 + 463) = 0;
  unint64_t v22 = *(std::__shared_weak_count **)(a1 + 1488);
  *(_OWORD *)(a1 + 1480) = 0u;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  *(_DWORD *)(a1 + 452) = 1;
  *(unsigned char *)(a1 + 460) = 0;
  *(void *)(a1 + 520) = a5;
  *(_WORD *)(a1 + 1496) = 0;
  *(unsigned char *)(a1 + 465) = 0;
  return a1;
}

void sub_1C5387280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, SipUri *a10, SipTimerContainer *a11, void **a12, uint64_t *a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  long long v35 = *(void **)(v27 + 1784);
  if (v35)
  {
    *(void *)(v27 + 1792) = v35;
    operator delete(v35);
  }
  uint64_t v36 = *v33;
  if (*v33)
  {
    *(void *)(v27 + 1768) = v36;
    operator delete(v36);
  }
  if (*(char *)(v27 + 1695) < 0) {
    operator delete(*(void **)(v27 + 1672));
  }
  if (*(char *)(v27 + 1671) < 0) {
    operator delete(*v28);
  }
  ims::AccessNetwork::~AccessNetwork(v29);
  ims::AccessNetwork::~AccessNetwork((void **)(v27 + 1504));
  uint64_t v37 = *(std::__shared_weak_count **)(v27 + 1488);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (*(char *)(v27 + 1479) < 0) {
    operator delete(*(void **)(v27 + 1456));
  }
  SipUri::~SipUri(a10);
  if (*(char *)(v27 + 1047) < 0) {
    operator delete(*(void **)(v27 + 1024));
  }
  BambiCallOptions::~BambiCallOptions(v32);
  ims::LocationInfo::~LocationInfo(v31);
  if (*(char *)(v27 + 519) < 0) {
    operator delete(*(void **)(v27 + 496));
  }
  if (*(char *)(v27 + 495) < 0) {
    operator delete(*v30);
  }
  uint64_t v38 = *(std::__shared_weak_count **)(v27 + 400);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  unsigned int v39 = *(std::__shared_weak_count **)(v27 + 384);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  std::string v40 = *(std::__shared_weak_count **)(v27 + 368);
  if (v40) {
    std::__shared_weak_count::__release_weak(v40);
  }
  SipTimerContainer::~SipTimerContainer(a11);
  uint64_t v41 = *(std::__shared_weak_count **)(v27 + 208);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(v27 + 192);
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  ImsLogContainer::~ImsLogContainer(a12);
  SipLockable::~SipLockable((SipLockable *)v27, a13);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::BambiCall(uint64_t a1, void *a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = off_1F20C62A0;
  *(unsigned char *)(a1 + 12) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call");
  uint64_t v8 = *a2;
  if (*(char *)(*a2 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(v8 + 4160), *(void *)(v8 + 4168));
  }
  else {
    std::string v20 = *(std::string *)(v8 + 4160);
  }
  ImsLogContainer::ImsLogContainer(a1 + 80, &__p, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)a1 = &unk_1F20C5FB0;
  *(void *)(a1 + 80) = &unk_1F20C6048;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 216));
  *(_DWORD *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 462) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 560) = 0x40A7700000000000;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 658) = 0u;
  *(void *)(a1 + 712) = 90;
  *(_WORD *)(a1 + 720) = 1;
  *(unsigned char *)(a1 + 722) = 1;
  *(void *)(a1 + 724) = 0x200000001;
  *(_WORD *)(a1 + 732) = 256;
  *(unsigned char *)(a1 + 734) = 1;
  *(void *)(a1 + 735) = 0;
  *(_WORD *)(a1 + 743) = 256;
  *(_DWORD *)(a1 + 745) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_DWORD *)(a1 + 752) = 0;
  *(unsigned char *)(a1 + 756) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(unsigned char *)(a1 + 808) = 0;
  *(void *)(a1 + 848) = 0x40A7700000000000;
  *(unsigned char *)(a1 + 992) = 0;
  *(unsigned char *)(a1 + 1016) = 0;
  *(unsigned char *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(void *)(a1 + 1040) = 0;
  SipUri::SipUri((SipUri *)(a1 + 1048));
  *(void *)(a1 + 1560) = 0;
  *(unsigned char *)(a1 + 1568) = 0;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(unsigned char *)(a1 + 1552) = 0;
  *(void *)(a1 + 1632) = 0;
  *(unsigned char *)(a1 + 1640) = 0;
  *(unsigned char *)(a1 + 1624) = 0;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1456) = 0u;
  *(_OWORD *)(a1 + 1472) = 0u;
  *(void *)(a1 + 1488) = 0;
  *(_OWORD *)(a1 + 1648) = 0u;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_OWORD *)(a1 + 1696) = 0u;
  *(_OWORD *)(a1 + 1708) = 0u;
  *(unsigned char *)(a1 + 1752) = 0;
  *(void *)(a1 + 1744) = 0;
  *(_OWORD *)(a1 + 1728) = 0u;
  *(_DWORD *)(a1 + 1756) = 0x10000;
  *(_OWORD *)(a1 + 1760) = 0u;
  *(_OWORD *)(a1 + 1776) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_DWORD *)(a1 + 1807) = 0;
  *(void *)(a1 + 1812) = 0;
  *(unsigned char *)(a1 + 1820) = 0;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 400);
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 208);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v12 = *a2;
  uint64_t v11 = a2[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 368);
  *(void *)(a1 + 360) = v12;
  *(void *)(a1 + 368) = v11;
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v15 = *a3;
  uint64_t v14 = a3[1];
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v15;
  *(void *)(a1 + 384) = v14;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  *(void *)(a1 + 320) = a1 + *(void *)(*(void *)a1 - 48);
  uint64_t v17 = *a2;
  if (*(char *)(*a2 + 4183) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v17 + 4160), *(void *)(v17 + 4168));
  }
  else {
    std::string __p = *(std::string *)(v17 + 4160);
  }
  std::string::operator=((std::string *)(a1 + 264), (const std::string *)(a1 + 88));
  std::string::operator=((std::string *)(a1 + 288), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = time(0);
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 448) = 1;
  *(unsigned char *)(a1 + 46bambi::XmlTreeItem::~XmlTreeItem(this + 1) = 0;
  *(_WORD *)(a1 + 463) = 0;
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 1488);
  *(_OWORD *)(a1 + 1480) = 0u;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  *(_DWORD *)(a1 + 452) = 1;
  *(unsigned char *)(a1 + 460) = 0;
  *(void *)(a1 + 520) = a4;
  *(_WORD *)(a1 + 1496) = 0;
  *(unsigned char *)(a1 + 465) = 0;
  return a1;
}

void sub_1C5387858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, SipUri *a9, SipTimerContainer *a10, void **a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  int v33 = *(void **)(v25 + 1784);
  if (v33)
  {
    *(void *)(v25 + 1792) = v33;
    operator delete(v33);
  }
  uint64_t v34 = *v30;
  if (*v30)
  {
    *(void *)(v25 + 1768) = v34;
    operator delete(v34);
  }
  if (*(char *)(v25 + 1695) < 0) {
    operator delete(*(void **)(v25 + 1672));
  }
  if (*(char *)(v25 + 1671) < 0) {
    operator delete(*v26);
  }
  ims::AccessNetwork::~AccessNetwork(v31);
  ims::AccessNetwork::~AccessNetwork((void **)(v25 + 1504));
  long long v35 = *(std::__shared_weak_count **)(v25 + 1488);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (*(char *)(v25 + 1479) < 0) {
    operator delete(*(void **)(v25 + 1456));
  }
  SipUri::~SipUri(a9);
  if (*(char *)(v25 + 1047) < 0) {
    operator delete(*(void **)(v25 + 1024));
  }
  BambiCallOptions::~BambiCallOptions(v29);
  ims::LocationInfo::~LocationInfo(v28);
  if (*(char *)(v25 + 519) < 0) {
    operator delete(*(void **)(v25 + 496));
  }
  if (*(char *)(v25 + 495) < 0) {
    operator delete(*v27);
  }
  uint64_t v36 = *(std::__shared_weak_count **)(v25 + 400);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  uint64_t v37 = *(std::__shared_weak_count **)(v25 + 384);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  uint64_t v38 = *(std::__shared_weak_count **)(v25 + 368);
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  SipTimerContainer::~SipTimerContainer(a10);
  unsigned int v39 = *(std::__shared_weak_count **)(v25 + 208);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
  std::string v40 = *(std::__shared_weak_count **)(v25 + 192);
  if (v40) {
    std::__shared_weak_count::__release_weak(v40);
  }
  ImsLogContainer::~ImsLogContainer(a11);
  SipLockable::~SipLockable((SipLockable *)v25, (uint64_t *)off_1F20C60A0);
  _Unwind_Resume(a1);
}

void BambiCall::~BambiCall(BambiCall *this, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)this = *a2;
  *(void *)((char *)this + *(void *)(v4 - 4XcapDocumentCommDiversion::~XcapDocumentCommDiversion((XcapDocumentCommDiversion *)((char *)this - 8)) = a2[3];
  uint64_t v5 = (char *)this + 80;
  *((void *)this + 10) = &unk_1F20C6048;
  uint64_t v6 = ImsLogContainer::debugStream((BambiCall *)((char *)this + 80));
  (*(void (**)(char *, uint64_t))(*(void *)v5 + 16))((char *)this + 80, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v6 + 8), (uint64_t)"~BambiCall()", 12);
  *(unsigned char *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v6 + 17) = 0;
  uint64_t v7 = *((void *)this + 49);
  if (v7)
  {
    uint64_t v8 = *(std::__shared_weak_count **)(v7 + 784);
    *(_OWORD *)(v7 + 776) = 0u;
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  uint64_t v9 = *((void *)this + 65);
  if (v9)
  {
    if (*(char *)(v9 + 4695) < 0) {
      operator delete(*(void **)(v9 + 4672));
    }
    SipUri::~SipUri((SipUri *)(v9 + 4264));
    SipStackConfig::~SipStackConfig((void **)(v9 + 1752));
    SipRegistrationConfig::~SipRegistrationConfig((void **)(v9 + 80));
    if (*(char *)(v9 + 71) < 0) {
      operator delete(*(void **)(v9 + 48));
    }
    if (*(char *)(v9 + 47) < 0) {
      operator delete(*(void **)(v9 + 24));
    }
    if (*(char *)(v9 + 23) < 0) {
      operator delete(*(void **)v9);
    }
    MEMORY[0x1C878E320](v9, 0x10B2C40AA878D3ELL);
  }
  uint64_t v10 = (void *)*((void *)this + 223);
  if (v10)
  {
    *((void *)this + 224) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 220);
  if (v11)
  {
    *((void *)this + 22bambi::XmlTreeItem::~XmlTreeItem(this + 1) = v11;
    operator delete(v11);
  }
  if (*((char *)this + 1695) < 0) {
    operator delete(*((void **)this + 209));
  }
  if (*((char *)this + 1671) < 0) {
    operator delete(*((void **)this + 206));
  }
  if (*((char *)this + 1623) < 0) {
    operator delete(*((void **)this + 200));
  }
  if (*((char *)this + 1599) < 0) {
    operator delete(*((void **)this + 197));
  }
  if (*((char *)this + 1551) < 0) {
    operator delete(*((void **)this + 191));
  }
  if (*((char *)this + 1527) < 0) {
    operator delete(*((void **)this + 188));
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 186);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (*((char *)this + 1479) < 0) {
    operator delete(*((void **)this + 182));
  }
  SipUri::~SipUri((BambiCall *)((char *)this + 1048));
  if (*((char *)this + 1047) < 0) {
    operator delete(*((void **)this + 128));
  }
  BambiCallOptions::~BambiCallOptions((void **)this + 84);
  if (*((char *)this + 671) < 0) {
    operator delete(*((void **)this + 81));
  }
  if (*((char *)this + 647) < 0) {
    operator delete(*((void **)this + 78));
  }
  if (*((char *)this + 623) < 0) {
    operator delete(*((void **)this + 75));
  }
  if (*((char *)this + 599) < 0) {
    operator delete(*((void **)this + 72));
  }
  if (*((char *)this + 519) < 0) {
    operator delete(*((void **)this + 62));
  }
  if (*((char *)this + 495) < 0) {
    operator delete(*((void **)this + 59));
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 50);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 48);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 46);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  SipTimerContainer::~SipTimerContainer((BambiCall *)((char *)this + 216));
  uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v17 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  *((void *)this + 10) = &unk_1F20C9CA0;
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  SipLockable::~SipLockable(this, a2 + 1);
}

void BambiCall::~BambiCall(BambiCall *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

void non-virtual thunk to'BambiCall::~BambiCall(BambiCall *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x1C878E320);
}

BOOL BambiCall::setMediaDirection(uint64_t a1, uint64_t a2, int a3, int a4)
{
  BOOL result = 0;
  if (!a2 || !a3) {
    return result;
  }
  unsigned int v8 = *(_DWORD *)(a2 + 44);
  unsigned int v22 = v8;
  if (a3 == 2)
  {
    *(_DWORD *)(a2 + 44) = 3;
    goto LABEL_11;
  }
  if (a3 != 3)
  {
    *(_DWORD *)(a2 + 44) = a3;
LABEL_11:
    if ((*(_DWORD *)(a1 + 448) & 0xFFFFFFFE) != 2) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  *(_DWORD *)(a2 + 44) = 2;
  if ((*(_DWORD *)(a1 + 448) & 0xFFFFFFFE) != 2)
  {
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 368);
    if (v9)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v9);
      uint64_t v10 = v9;
      if (v9) {
        uint64_t v9 = *(std::__shared_weak_count **)(a1 + 360);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    uint64_t v14 = (ImsPrefs *)SipStack::prefs((SipStack *)v9);
    AllowHoldMusicKey = (void **)ImsPrefs::getAllowHoldMusicKey(v14);
    char v16 = ImsPrefs::BOOLValue(v14, AllowHoldMusicKey);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (v16) {
      goto LABEL_13;
    }
  }
LABEL_12:
  *(_DWORD *)(a2 + 44) = 4;
LABEL_13:
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 44);
  if (a4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "SetMediaDirection");
    BambiCall::activateMediaSessionIfAppropriate(a1, a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v11 = a1 + 80;
  uint64_t v13 = (*(uint64_t (**)(uint64_t))(v12 + 64))(v11);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)"Stream ", 7);
  *(unsigned char *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" direction set to ", 18);
  *(unsigned char *)(v13 + 17) = 0;
  unsigned int v19 = *(_DWORD *)(a2 + 44);
  ims::toString<MediaDirection>(&v19, &v20);
  LoggableString::LoggableString(&__p, &v20);
  (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 40))(v13, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)" (was ", 6);
  *(unsigned char *)(v13 + 17) = 0;
  ims::toString<MediaDirection>(&v22, &v17);
  LoggableString::LoggableString(&v18, &v17);
  (*(void (**)(uint64_t, std::string *))(*(void *)v13 + 40))(v13, &v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v13 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v13 + 17) = 0;
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  return v8 != *(_DWORD *)(a2 + 44);
}

void sub_1C5388148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCall::activateMediaSessionIfAppropriate(uint64_t a1, uint64_t a2, std::string *a3)
{
  if (a2)
  {
    uint64_t v5 = *(void *)(a1 + 392);
    if (!v5) {
      goto LABEL_21;
    }
    uint64_t v8 = *(void *)(v5 + 248);
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 256);
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (v8)
    {
      if (*(unsigned char *)(a1 + 461))
      {
        uint64_t v9 = *(void *)(a1 + 392);
        uint64_t v11 = *(void *)(v9 + 248);
        uint64_t v10 = *(std::__shared_weak_count **)(v9 + 256);
        if (v10) {
          atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = *(SipDialogFork **)(v11 + 2072);
        uint64_t v13 = *(std::__shared_weak_count **)(v11 + 2080);
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v10) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        }
        if (v12)
        {
          if (*(unsigned char *)(a1 + 464))
          {
            if (SipSession::confirmed(*(SipSession **)(a1 + 392))) {
              goto LABEL_16;
            }
            if (!*(unsigned char *)(a1 + 1496))
            {
              uint64_t v41 = *(void *)(a1 + 80);
              uint64_t v40 = a1 + 80;
              uint64_t v42 = (*(uint64_t (**)(uint64_t))(v41 + 64))(v40);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 16))(v40, v42);
              uint64_t v43 = ImsOutStream::operator<<(v42, "activateMediaSession (");
              LoggableString::LoggableString(&v113, a3);
              (*(void (**)(uint64_t, std::string *))(*(void *)v43 + 40))(v43, &v113);
              uint64_t v36 = (unsigned char *)ImsOutStream::operator<<(v43, "): waiting for session to be confirmed");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_43;
            }
            if ((SipDialogFork::preconditionsSatisfied(v12) & 1) == 0)
            {
              uint64_t v45 = *(void *)(a1 + 80);
              uint64_t v44 = a1 + 80;
              uint64_t v46 = (*(uint64_t (**)(uint64_t))(v45 + 64))(v44);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v44 + 16))(v44, v46);
              uint64_t v47 = ImsOutStream::operator<<(v46, "activateMediaSession (");
              LoggableString::LoggableString(&v113, a3);
              (*(void (**)(uint64_t, std::string *))(*(void *)v47 + 40))(v47, &v113);
              uint64_t v48 = ImsOutStream::operator<<(v47, "): fork ");
              (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 32))(v48, (uint64_t)v12 + 152);
              uint64_t v36 = (unsigned char *)ImsOutStream::operator<<(v48, " preconditions have not been met yet, can’t activate the session");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_43;
            }
            if (*(_DWORD *)(*(void *)(a1 + 392) + 1396) == 1)
            {
              uint64_t v33 = *(void *)(a1 + 80);
              uint64_t v32 = a1 + 80;
              uint64_t v34 = (*(uint64_t (**)(uint64_t))(v33 + 64))(v32);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 16))(v32, v34);
              uint64_t v35 = ImsOutStream::operator<<(v34, "activateMediaSession (");
              LoggableString::LoggableString(&v113, a3);
              (*(void (**)(uint64_t, std::string *))(*(void *)v35 + 40))(v35, &v113);
              uint64_t v36 = (unsigned char *)ImsOutStream::operator<<(v35, "): no early media, waiting for session to be confirmed");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_43:
              v36[17] = 0;
              goto LABEL_57;
            }
            uint64_t v51 = *(std::__shared_weak_count **)(a1 + 368);
            if (v51)
            {
              uint64_t v51 = std::__shared_weak_count::lock(v51);
              uint64_t v52 = v51;
              if (v51) {
                uint64_t v51 = *(std::__shared_weak_count **)(a1 + 360);
              }
            }
            else
            {
              uint64_t v52 = 0;
            }
            uint64_t v74 = (ImsPrefs *)SipStack::prefs((SipStack *)v51);
            UseRTPDetectionAutoStartKey = (void **)ImsPrefs::getUseRTPDetectionAutoStartKey(v74);
            if (ImsPrefs::BOOLValue(v74, UseRTPDetectionAutoStartKey))
            {
              int v76 = *(unsigned __int8 *)(a1 + 462);
              if (v52) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v52);
              }
              if (!v76)
              {
                int v77 = *(std::__shared_weak_count **)(a1 + 368);
                if (v77)
                {
                  int v77 = std::__shared_weak_count::lock(v77);
                  uint64_t v78 = v77;
                  if (v77) {
                    int v77 = *(std::__shared_weak_count **)(a1 + 360);
                  }
                }
                else
                {
                  uint64_t v78 = 0;
                }
                uint64_t v99 = (ImsPrefs *)SipStack::prefs((SipStack *)v77);
                EnforceEarlyMediaInactiveDirectionKey = (void **)ImsPrefs::getEnforceEarlyMediaInactiveDirectionKey(v99);
                if (!ImsPrefs::BOOLValue(v99, EnforceEarlyMediaInactiveDirectionKey))
                {
                  if (v78) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v78);
                  }
                  goto LABEL_152;
                }
                int v101 = *(_DWORD *)(a1 + 456);
                if (v78) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v78);
                }
                if (v101 != 4)
                {
LABEL_152:
                  uint64_t v103 = *(void *)(a1 + 80);
                  uint64_t v102 = a1 + 80;
                  uint64_t v104 = (*(uint64_t (**)(uint64_t))(v103 + 64))(v102);
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v102 + 16))(v102, v104);
                  uint64_t v105 = ImsOutStream::operator<<(v104, "activateMediaSession (");
                  LoggableString::LoggableString(&v113, a3);
                  (*(void (**)(uint64_t, std::string *))(*(void *)v105 + 40))(v105, &v113);
                  uint64_t v36 = (unsigned char *)ImsOutStream::operator<<(v105, "): RTP auto detection running");
                  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  goto LABEL_43;
                }
              }
            }
            else if (v52)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v52);
            }
LABEL_16:
            if ((*(_DWORD *)(a1 + 448) & 0xFFFFFFFE) == 2)
            {
              uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
              (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, v14);
              uint64_t v15 = ImsOutStream::operator<<(v14, "activateMediaSession (");
              LoggableString::LoggableString(&v113, a3);
              (*(void (**)(uint64_t, std::string *))(*(void *)v15 + 40))(v15, &v113);
              uint64_t v16 = ImsOutStream::operator<<(v15, "): call is ");
              int v17 = *(_DWORD *)(a1 + 448);
              if (v17 == 3)
              {
                v111.__r_.__value_.__r.__words[2] = 0x400000000000000;
                std::string v18 = "held";
              }
              else if (v17 == 2)
              {
                v111.__r_.__value_.__r.__words[2] = 0x700000000000000;
                std::string v18 = "holding";
              }
              else if (v17)
              {
                v111.__r_.__value_.__r.__words[2] = 0x700000000000000;
                std::string v18 = "resumed";
              }
              else
              {
                v111.__r_.__value_.__r.__words[2] = 0x800000000000000;
                std::string v18 = "resuming";
              }
              *(_OWORD *)&v111.__r_.__value_.__l.__data_ = *(_OWORD *)v18;
              LoggableString::LoggableString(&__p, &v111);
              (*(void (**)(uint64_t, std::string *))(*(void *)v16 + 40))(v16, &__p);
              uint64_t v53 = (unsigned char *)ImsOutStream::operator<<(v16, ", can't activate the session");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v53[17] = 0;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v111.__r_.__value_.__l.__data_);
              }
              goto LABEL_57;
            }
            uint64_t v37 = (unsigned int *)(a1 + 452);
            if ((*(_DWORD *)(a1 + 452) - 1) < 2)
            {
LABEL_36:
              uint64_t v109 = 0;
              uint64_t v110 = 0;
              BambiCall::localSdp((BambiCall *)a1, &v109);
              if (v109)
              {
                int v38 = *(_DWORD *)(a2 + 48);
                for (uint64_t i = *(void *)(v109 + 416); i != *(void *)(v109 + 424); i += 200)
                {
                  if (*(_DWORD *)(i + 12) == v38) {
                    goto LABEL_64;
                  }
                }
                if (v38 != 2)
                {
                  uint64_t v66 = *(void *)(a1 + 80);
                  uint64_t v65 = a1 + 80;
                  uint64_t v67 = (*(uint64_t (**)(uint64_t))(v66 + 64))(v65);
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v65 + 16))(v65, v67);
                  BOOL v68 = (unsigned char *)ImsOutStream::operator<<(v67, "activateMediaSession: local SDP does not contain a media stream for type ");
                  (*(void (**)(unsigned char *, std::string *))(*(void *)v68 + 32))(v68, &v113);
                  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_123:
                  v68[17] = 0;
                  if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_126:
                    uint64_t v23 = 0;
LABEL_142:
                    if (v110) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v110);
                    }
                    goto LABEL_61;
                  }
                  __int16 v73 = (void *)v113.__r_.__value_.__r.__words[0];
LABEL_125:
                  operator delete(v73);
                  goto LABEL_126;
                }
              }
LABEL_64:
              signed int v55 = *v37;
              unsigned int v108 = *v37;
              if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&a3->__r_.__value_.__l.__data_, "PreconditionsSatisfied"))
              {
                if (*(_DWORD *)(*(void *)(a1 + 392) + 1396) != 2)
                {
                  uint64_t v70 = *(void *)(a1 + 80);
                  uint64_t v69 = a1 + 80;
                  uint64_t v71 = (*(uint64_t (**)(uint64_t))(v70 + 64))(v69);
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v69 + 16))(v69, v71);
                  uint64_t v72 = (unsigned char *)ImsOutStream::operator<<(v71, "activateMediaSession: preconditions are satisfied, but early media is not enforced, won't activate the session with direction ");
                  ims::toString<MediaDirection>(v37, &__p);
                  LoggableString::LoggableString(&v113, &__p);
                  (*(void (**)(unsigned char *, std::string *))(*(void *)v72 + 40))(v72, &v113);
                  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v72 + 64))(v72, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  v72[17] = 0;
                  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v113.__r_.__value_.__l.__data_);
                  }
                  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                    goto LABEL_126;
                  }
                  __int16 v73 = (void *)__p.__r_.__value_.__r.__words[0];
                  goto LABEL_125;
                }
                BOOL v56 = 0;
                goto LABEL_114;
              }
              uint64_t v57 = *(std::__shared_weak_count **)(a1 + 368);
              if (v57)
              {
                uint64_t v57 = std::__shared_weak_count::lock(v57);
                int v58 = v57;
                if (v57) {
                  uint64_t v57 = *(std::__shared_weak_count **)(a1 + 360);
                }
              }
              else
              {
                int v58 = 0;
              }
              unsigned int v79 = (ImsPrefs *)SipStack::prefs((SipStack *)v57);
              EnforceEarlyMediaDirectionKey = (void **)ImsPrefs::getEnforceEarlyMediaDirectionKey(v79);
              if (ImsPrefs::BOOLValue(v79, EnforceEarlyMediaDirectionKey) && *(unsigned char *)(a1 + 1496))
              {
                char v81 = SipSession::confirmed(*(SipSession **)(a1 + 392));
                if (v58) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v58);
                }
                if ((v81 & 1) == 0 && *(_DWORD *)(a1 + 456) > v55)
                {
                  uint64_t v82 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
                  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, v82);
                  uint64_t v83 = ImsOutStream::operator<<(v82, "Changing early media direction from ");
                  ims::toString<MediaDirection>(&v108, &__p);
                  LoggableString::LoggableString(&v113, &__p);
                  (*(void (**)(uint64_t, std::string *))(*(void *)v83 + 40))(v83, &v113);
                  uint64_t v84 = (unsigned char *)ImsOutStream::operator<<(v83, " to ");
                  ims::toString<MediaDirection>((unsigned int *)(a1 + 456), &v107);
                  LoggableString::LoggableString(&v111, &v107);
                  (*(void (**)(unsigned char *, std::string *))(*(void *)v84 + 40))(v84, &v111);
                  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v84 + 64))(v84, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  v84[17] = 0;
                  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v111.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v107.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v113.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  unsigned int v108 = *(_DWORD *)(a1 + 456);
                  BOOL v56 = v108 != 4;
                  goto LABEL_114;
                }
              }
              else if (v58)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v58);
              }
              BOOL v56 = 1;
LABEL_114:
              char shouldContinueUpdatingSession = BambiCall::shouldContinueUpdatingSession((SipSession **)a1);
              uint64_t v86 = a1 + 80;
              int64_t v87 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64);
              if (shouldContinueUpdatingSession)
              {
                uint64_t v88 = v87(a1 + 80);
                (*(void (**)(uint64_t, uint64_t))(*(void *)v86 + 16))(a1 + 80, v88);
                uint64_t v89 = ImsOutStream::operator<<(v88, "activating ");
                (*(void (**)(uint64_t, std::string *))(*(void *)v89 + 32))(v89, &v113);
                uint64_t v90 = ImsOutStream::operator<<(v89, " media session (");
                LoggableString::LoggableString(&__p, a3);
                (*(void (**)(uint64_t, std::string *))(*(void *)v90 + 40))(v90, &__p);
                char v91 = (unsigned char *)ImsOutStream::operator<<(v90, ")");
                (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v91 + 64))(v91, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                v91[17] = 0;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v113.__r_.__value_.__l.__data_);
                }
                *(_OWORD *)&v113.__r_.__value_.__l.__data_ = 0uLL;
                SipSession::getMostRecentRemoteFork(*(SipSession **)(a1 + 392), &v113);
                if (v113.__r_.__value_.__r.__words[0])
                {
                  if (SipSession::confirmed(*(SipSession **)(a1 + 392)))
                  {
                    std::string::size_type v92 = v113.__r_.__value_.__r.__words[0];
                  }
                  else
                  {
                    std::string::size_type v92 = v113.__r_.__value_.__r.__words[0];
                    if ((*(_DWORD *)(a1 + 456) & 0xFFFFFFFB) != 0
                      && (*(_DWORD *)(v113.__r_.__value_.__r.__words[0] + 848) & 0xFFFFFFFB) != 0)
                    {
                      *(unsigned char *)(v113.__r_.__value_.__r.__words[0] + 852) = 1;
                      *(unsigned char *)(*(void *)(a1 + 392) + 1400) = 1;
                    }
                  }
                  if (!std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)(v92 + 152), (unsigned __int8 *)(a1 + 1024)))
                  {
                    uint64_t v96 = (*(uint64_t (**)(uint64_t))(*(void *)v86 + 64))(a1 + 80);
                    (*(void (**)(uint64_t, uint64_t))(*(void *)v86 + 16))(a1 + 80, v96);
                    long long v97 = (unsigned char *)ImsOutStream::operator<<(v96, "Media settings mismatch: maybe we should update media settings");
                    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v97 + 64))(v97, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    v97[17] = 0;
                    std::string::size_type size = (std::__shared_weak_count *)v113.__r_.__value_.__l.__size_;
                    long long v106 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
                    if (v113.__r_.__value_.__l.__size_) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v113.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
                    }
                    BambiCall::applyMediaSettingsUsingForkIfRequired((BambiCall *)a1, (BambiCallMediaStream *)a2, (uint64_t)&v106, 1);
                    if (size) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](size);
                    }
                  }
                }
                if (v113.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v113.__r_.__value_.__l.__size_);
                }
                RTPManager::activateSessionWithId(*(void *)(a1 + 376), *(uint64_t **)(a2 + 32), v108, v56);
                uint64_t v23 = 1;
                goto LABEL_142;
              }
              uint64_t v93 = v87(a1 + 80);
              (*(void (**)(uint64_t, uint64_t))(*(void *)v86 + 16))(v86, v93);
              uint64_t v94 = ImsOutStream::operator<<(v93, "Skipped activating media session (");
              LoggableString::LoggableString(&v113, a3);
              (*(void (**)(uint64_t, std::string *))(*(void *)v94 + 40))(v94, &v113);
              BOOL v68 = (unsigned char *)ImsOutStream::operator<<(v94, ")");
              (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              goto LABEL_123;
            }
            uint64_t v49 = *(std::__shared_weak_count **)(a1 + 368);
            if (v49)
            {
              uint64_t v49 = std::__shared_weak_count::lock(v49);
              uint64_t v50 = v49;
              if (v49) {
                uint64_t v49 = *(std::__shared_weak_count **)(a1 + 360);
              }
            }
            else
            {
              uint64_t v50 = 0;
            }
            uint64_t v59 = (ImsPrefs *)SipStack::prefs((SipStack *)v49);
            std::string::size_type v60 = (void **)ImsPrefs::getEnforceEarlyMediaInactiveDirectionKey(v59);
            if (ImsPrefs::BOOLValue(v59, v60)
              && *(unsigned char *)(a1 + 1496)
              && (SipSession::confirmed(*(SipSession **)(a1 + 392)) & 1) == 0)
            {
              int v95 = *(_DWORD *)(a1 + 456);
              if (v50) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v50);
              }
              if (v95 != 4) {
                goto LABEL_36;
              }
            }
            else if (v50)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v50);
            }
            uint64_t v62 = *(void *)(a1 + 80);
            uint64_t v61 = a1 + 80;
            uint64_t v63 = (*(uint64_t (**)(uint64_t))(v62 + 64))(v61);
            (*(void (**)(uint64_t, uint64_t))(*(void *)v61 + 16))(v61, v63);
            uint64_t v64 = (unsigned char *)ImsOutStream::operator<<(v63, "activateMediaSession: session is not expecting remote RTP packets, won't activate the session with direction ");
            ims::toString<MediaDirection>(v37, &__p);
            LoggableString::LoggableString(&v113, &__p);
            (*(void (**)(unsigned char *, std::string *))(*(void *)v64 + 40))(v64, &v113);
            (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v64[17] = 0;
            if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v113.__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_60;
            }
            uint64_t v54 = (void *)__p.__r_.__value_.__r.__words[0];
            goto LABEL_59;
          }
          uint64_t v31 = *(void *)(a1 + 80);
          uint64_t v30 = a1 + 80;
          uint64_t v29 = (*(uint64_t (**)(uint64_t))(v31 + 64))(v30);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v30 + 16))(v30, v29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"activateMediaSession (", 22);
          *(unsigned char *)(v29 + 17) = 0;
          LoggableString::LoggableString(&v113, a3);
          (*(void (**)(uint64_t, std::string *))(*(void *)v29 + 40))(v29, &v113);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"): no valid remote IP address", 29);
          *(unsigned char *)(v29 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        else
        {
          uint64_t v28 = *(void *)(a1 + 80);
          uint64_t v27 = a1 + 80;
          uint64_t v29 = (*(uint64_t (**)(uint64_t))(v28 + 64))(v27);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v27 + 16))(v27, v29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"activateMediaSession (", 22);
          *(unsigned char *)(v29 + 17) = 0;
          LoggableString::LoggableString(&v113, a3);
          (*(void (**)(uint64_t, std::string *))(*(void *)v29 + 40))(v29, &v113);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v29 + 8), (uint64_t)"): no active fork", 17);
          *(unsigned char *)(v29 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        *(unsigned char *)(v29 + 17) = 0;
LABEL_57:
        if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_60:
          uint64_t v23 = 0;
LABEL_61:
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          return v23;
        }
        uint64_t v54 = (void *)v113.__r_.__value_.__r.__words[0];
LABEL_59:
        operator delete(v54);
        goto LABEL_60;
      }
      uint64_t v26 = *(void *)(a1 + 80);
      uint64_t v25 = a1 + 80;
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(v26 + 64))(v25);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 16))(v25, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"activateMediaSession (", 22);
      *(unsigned char *)(v21 + 17) = 0;
      LoggableString::LoggableString(&v113, a3);
      (*(void (**)(uint64_t, std::string *))(*(void *)v21 + 40))(v21, &v113);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"): waiting for media session to be configured", 45);
      *(unsigned char *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
LABEL_21:
      uint64_t v20 = *(void *)(a1 + 80);
      uint64_t v19 = a1 + 80;
      uint64_t v21 = (*(uint64_t (**)(uint64_t))(v20 + 56))(v19);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 16))(v19, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"activateMediaSession (", 22);
      *(unsigned char *)(v21 + 17) = 0;
      LoggableString::LoggableString(&v113, a3);
      (*(void (**)(uint64_t, std::string *))(*(void *)v21 + 40))(v21, &v113);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"): no SIP session", 17);
      *(unsigned char *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    uint64_t v22 = a1 + 80;
    uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 56))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 16))(v22, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"activateMediaSession (", 22);
    *(unsigned char *)(v21 + 17) = 0;
    LoggableString::LoggableString(&v113, a3);
    (*(void (**)(uint64_t, std::string *))(*(void *)v21 + 40))(v21, &v113);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v21 + 8), (uint64_t)"): no media stream", 18);
    *(unsigned char *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(unsigned char *)(v21 + 17) = 0;
  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v113.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1C5389894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 65) < 0) {
    operator delete(*(void **)(v33 - 88));
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCall::checkForPause(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4 = a2;
  int v25 = a3;
  if (!a2) {
    goto LABEL_24;
  }
  uint64_t v8 = a1 + 80;
  int v9 = *(_DWORD *)(a1 + 448);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)"Checking for pause (local= ", 27);
  *(unsigned char *)(v10 + 17) = 0;
  unsigned int v22 = *(_DWORD *)(v4 + 44);
  ims::toString<MediaDirection>(&v22, v23);
  (*(void (**)(uint64_t, void **))(*(void *)v10 + 32))(v10, v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)", remote= ", 10);
  *(unsigned char *)(v10 + 17) = 0;
  ims::toString<MediaDirection>((unsigned int *)&v25, __p);
  (*(void (**)(uint64_t, void **))(*(void *)v10 + 32))(v10, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v10 + 8), (uint64_t)")", 1);
  *(unsigned char *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v10 + 17) = 0;
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  unsigned int v11 = v9 & 0xFFFFFFFE;
  int v12 = *(_DWORD *)(v4 + 44);
  if (v12 == 3)
  {
    int v12 = 2;
  }
  else if (v12 == 2)
  {
    int v12 = 3;
  }
  if (v11 == 2) {
    int v13 = a4;
  }
  else {
    int v13 = 0;
  }
  BOOL v14 = v12 >= a3 || a3 == 1;
  if (!v14 || v13)
  {
    BOOL v15 = BambiCall::setMediaDirection(a1, v4, a3, 0);
    if (BambiCall::shouldContinueUpdatingSession((SipSession **)a1))
    {
      if (v11 == 2) {
        unsigned int v16 = 4;
      }
      else {
        unsigned int v16 = *(_DWORD *)(v4 + 44);
      }
      RTPManager::deactivateSessionWithId(*(void *)(a1 + 376), *(void *)(v4 + 32), v16);
      if (!v15)
      {
        int v18 = 0;
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 64))(v8);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 16))(v8, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Skipped deactivating media session (", 36);
      *(unsigned char *)(v17 + 17) = 0;
      std::ostream::operator<<();
      *(unsigned char *)(v17 + 17) = 0;
      LODWORD(v4) = 1;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)")", 1);
      *(unsigned char *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v17 + 17) = 0;
      if (!v15) {
        goto LABEL_24;
      }
    }
    int v18 = 256;
LABEL_29:
    LODWORD(v4) = 1;
    return v18 | v4;
  }
  LODWORD(v4) = 0;
LABEL_24:
  int v18 = 0;
  return v18 | v4;
}

void sub_1C5389E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCall::shouldContinueUpdatingSession(SipSession **this)
{
  if (SipSession::confirmed(this[49])) {
    return 1;
  }
  uint64_t v2 = this[49];
  if (!*((unsigned char *)v2 + 1400)) {
    return 1;
  }
  SipSessionInterface::stack((std::__shared_weak_count *)v2, &v11);
  uint64_t v3 = (ImsPrefs *)SipStack::prefs(v11);
  SelectLatestForkWithActiveEarlyMediaKey = (void **)ImsPrefs::getSelectLatestForkWithActiveEarlyMediaKey(v3);
  int v5 = ImsPrefs::BOOLValue(v3, SelectLatestForkWithActiveEarlyMediaKey);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (!v5)
  {
    SipSessionInterface::stack((std::__shared_weak_count *)this[49], &v11);
    uint64_t v6 = (ImsPrefs *)SipStack::prefs(v11);
    SelectForkWithActiveEarlyMediaKey = (void **)ImsPrefs::getSelectForkWithActiveEarlyMediaKey(v6);
    int v8 = ImsPrefs::BOOLValue(v6, SelectForkWithActiveEarlyMediaKey);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    if (v8)
    {
      unsigned int v11 = 0;
      int v12 = 0;
      SipSession::getMostRecentRemoteFork(this[49], &v11);
      if (!v11 || !*((unsigned char *)v11 + 852)) {
        goto LABEL_17;
      }
LABEL_14:
      uint64_t v9 = 1;
      goto LABEL_18;
    }
    return 1;
  }
  unsigned int v11 = 0;
  int v12 = 0;
  SipSession::getMostRecentRemoteFork(this[49], &v11);
  if (v11 && (*((_DWORD *)v11 + 212) & 0xFFFFFFFB) != 0) {
    goto LABEL_14;
  }
LABEL_17:
  uint64_t v9 = 0;
LABEL_18:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v9;
}

void sub_1C5389F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::handleSdpOfferInFork(uint64_t a1@<X0>, uint64_t *a2@<X1>, SipDialogFork **a3@<X2>, uint64_t a4@<X8>)
{
  long long v110 = 0u;
  long long v111 = 0u;
  long long v112 = 0u;
  v109[1] = &_bambiDomain;
  v109[2] = 0;
  int v8 = (std::__shared_weak_count *)a2[1];
  v108[0] = *a2;
  v108[1] = (uint64_t)v8;
  v109[0] = &unk_1F20B2680;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiCall::checkRemoteSdpForValidAddress(a1, v108);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (void *)*a2;
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 368);
  if (v10)
  {
    uint64_t v10 = std::__shared_weak_count::lock(v10);
    unsigned int v11 = v10;
    if (v10) {
      uint64_t v10 = *(std::__shared_weak_count **)(a1 + 360);
    }
  }
  else
  {
    unsigned int v11 = 0;
  }
  int v12 = (ImsPrefs *)SipStack::prefs((SipStack *)v10);
  UseRestrictiveDirectionWhenCreatingAnswerKey = (void **)ImsPrefs::getUseRestrictiveDirectionWhenCreatingAnswerKey(v12);
  int v14 = ImsPrefs::BOOLValue(v12, UseRestrictiveDirectionWhenCreatingAnswerKey);
  int v90 = SDPModel::preferredDirection(v9, 2, v14);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v15 = *(void *)(a1 + 200);
  if (!v15)
  {
    if (*(unsigned char *)(a1 + 1496)) {
      goto LABEL_109;
    }
LABEL_111:
    uint64_t v64 = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 80) + 64))(a1 + 80);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 16))(a1 + 80, v64);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v64 + 8), (uint64_t)"handleSdpOffer: initializing MT media session", 45);
    *(unsigned char *)(v64 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v64 + 17) = 0;
    uint64_t v65 = *a2;
    for (uint64_t i = *(void *)(*a2 + 416); ; i += 200)
    {
      if (i == *(void *)(*a2 + 424)) {
        goto LABEL_116;
      }
      if (*(_DWORD *)(i + 12) == 3) {
        break;
      }
    }
    *(unsigned char *)(a1 + 1752) = 1;
LABEL_116:
    uint64_t v67 = (std::__shared_weak_count *)a2[1];
    v107[0] = v65;
    v107[1] = (uint64_t)v67;
    if (v67) {
      atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BambiCall::initializeMediaForMTSession((BambiCall *)a1, v107, (uint64_t)&v113);
    ImsResult::operator=((uint64_t)v109, (uint64_t)&v113);
    ImsResult::~ImsResult((ImsResult *)&v113);
    if (v67) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v67);
    }
    BOOL v68 = *(std::__shared_weak_count **)(a1 + 368);
    if (!v68) {
      goto LABEL_141;
    }
    uint64_t v69 = std::__shared_weak_count::lock(v68);
    if (!v69) {
      goto LABEL_141;
    }
    uint64_t v70 = v69;
    uint64_t v71 = *(void *)(a1 + 360);
    if (v71 && *(unsigned char *)(v71 + 1024))
    {
      uint64_t v72 = *(void *)(a1 + 200);
      uint64_t v102 = &_bambiDomain;
      uint64_t v103 = 0;
      long long v104 = 0u;
      long long v105 = 0u;
      long long v106 = 0u;
      int v101 = &unk_1F20B2680;
      __int16 v73 = *(void **)(v72 + 1904);
      uint64_t v74 = (void *)(v72 + 1912);
      if (v73 != (void *)(v72 + 1912))
      {
        while (1)
        {
          BambiCall::checkForPause(a1, v73[5], v90, 0);
          long long v116 = 0u;
          long long v117 = 0u;
          long long v118 = 0u;
          std::string v113 = &unk_1F20B2680;
          uint64_t v114 = &_bambiDomain;
          int v115 = 0;
          ImsResult::operator=((uint64_t)&v101, (uint64_t)&v113);
          ImsResult::~ImsResult((ImsResult *)&v113);
          long long v116 = 0u;
          long long v117 = 0u;
          long long v118 = 0u;
          std::string v113 = &unk_1F20B2680;
          uint64_t v114 = &_bambiDomain;
          int v115 = 0;
          if (v102 != &_bambiDomain) {
            break;
          }
          int v76 = v103;
          ImsResult::~ImsResult(v75);
          if (!v76)
          {
            int v77 = (void *)v73[1];
            if (v77)
            {
              do
              {
                uint64_t v78 = v77;
                int v77 = (void *)*v77;
              }
              while (v77);
            }
            else
            {
              do
              {
                uint64_t v78 = (void *)v73[2];
                BOOL v58 = *v78 == (void)v73;
                __int16 v73 = v78;
              }
              while (!v58);
            }
            __int16 v73 = v78;
            if (v78 != v74) {
              continue;
            }
          }
          goto LABEL_137;
        }
        ImsResult::~ImsResult(v75);
      }
LABEL_137:
      ImsResult::~ImsResult((ImsResult *)&v101);
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
    goto LABEL_141;
  }
  int hasStream = SDPSession::hasStream(*(SDPSession **)(a1 + 200));
  if (!*(unsigned char *)(a1 + 1496) && (hasStream & 1) == 0) {
    goto LABEL_111;
  }
  if (!hasStream)
  {
LABEL_109:
    uint64_t v60 = *(void *)(a1 + 80);
    uint64_t v59 = a1 + 80;
    uint64_t v61 = (*(uint64_t (**)(uint64_t))(v60 + 48))(v59);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v59 + 16))(v59, v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)"Received a new offer/answer, but we don't have any media streams to handle it!", 78);
    *(unsigned char *)(v61 + 17) = 0;
    uint64_t v62 = (unsigned char *)(v61 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    int v63 = 491;
LABEL_110:
    *uint64_t v62 = 0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &SipResultDomain::_domain;
    *(_DWORD *)(a4 + 16) = v63;
    goto LABEL_146;
  }
  uint64_t v17 = *a3;
  if (!*a3)
  {
    uint64_t v80 = *(void *)(a1 + 80);
    uint64_t v79 = a1 + 80;
    uint64_t v81 = (*(uint64_t (**)(uint64_t))(v80 + 56))(v79);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v79 + 16))(v79, v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v81 + 8), (uint64_t)"handleSdpOffer: fork is null", 28);
    *(unsigned char *)(v81 + 17) = 0;
    uint64_t v62 = (unsigned char *)(v81 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    int v63 = 481;
    goto LABEL_110;
  }
  int v18 = (std::__shared_weak_count *)a2[1];
  uint64_t v99 = *a2;
  long long v100 = v18;
  if (v18)
  {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = *a3;
  }
  uint64_t v97 = 0;
  int64_t v98 = 0;
  uint64_t v19 = SipDialogFork::incrementSdpVersion(v17);
  int v20 = SDPSession::handleOfferAnswer(v15, &v99, &v97, v19);
  if (v98) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v98);
  }
  if (v100) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v100);
  }
  if (!v20)
  {
    uint64_t v83 = *(void *)(a1 + 80);
    uint64_t v82 = a1 + 80;
    uint64_t v84 = (*(uint64_t (**)(uint64_t))(v83 + 56))(v82);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v82 + 16))(v82, v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v84 + 8), (uint64_t)"handleSdpOffer: couldn't create answer for offer", 48);
    *(unsigned char *)(v84 + 17) = 0;
    uint64_t v62 = (unsigned char *)(v84 + 17);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v84 + 64))(v84, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    int v63 = 488;
    goto LABEL_110;
  }
  uint64_t v21 = *(void *)(a1 + 200);
  std::string::size_type v92 = &_bambiDomain;
  uint64_t v93 = 0;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  char v91 = &unk_1F20B2680;
  unsigned int v22 = *(void **)(v21 + 1904);
  uint64_t v88 = (void *)(v21 + 1912);
  if (v22 == (void *)(v21 + 1912)) {
    goto LABEL_140;
  }
  BOOL v89 = v20 == 2;
  uint64_t v87 = a1 + 80;
  while (1)
  {
    uint64_t v23 = v22[5];
    int v24 = BambiCall::checkForPause(a1, v23, v90, 0);
    if (*(unsigned char *)(a1 + 464)) {
      int v25 = v90;
    }
    else {
      int v25 = 4;
    }
    BOOL v26 = BambiCall::setMediaDirection(a1, v23, v25, 0);
    int v27 = (unsigned __int16)v24 > 0xFFu || v26;
    BambiCall::localSdp((BambiCall *)a1, (uint64_t *)v121);
    int v28 = *(_DWORD *)(v23 + 48);
    uint64_t v29 = *(void *)(*(void *)v121 + 416);
    if (*(_DWORD *)(v29 + 12) != v28)
    {
      uint64_t v30 = v29 + 200;
      do
      {
        int v31 = *(_DWORD *)(v30 + 12);
        v30 += 200;
      }
      while (v31 != v28);
      uint64_t v29 = v30 - 200;
    }
    for (uint64_t j = *(void *)(v29 + 144); *(_DWORD *)(j + 136) != 4; uint64_t j = *(void *)(j + 8))
      ;
    int v33 = *(_DWORD *)(j + 56) - 1;
    if (v33 > 2) {
      int v34 = 0;
    }
    else {
      int v34 = dword_1C56D0474[v33];
    }
    if (*(void *)&v121[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v121[8]);
    }
    if ((v24 & v27) == 1)
    {
      int v35 = *(_DWORD *)(v23 + 44);
      if ((v35 == 4 || v35 == 2) && *(_DWORD *)(v23 + 48) == 4 && *(void *)(a1 + 408))
      {
        *(unsigned char *)(a1 + 1820) = 1;
        uint64_t v36 = (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 64))();
        (*(void (**)(uint64_t, uint64_t))(*(void *)v87 + 16))(v87, v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v36 + 8), (uint64_t)"RTT remote hold detected!!", 26);
        *(unsigned char *)(v36 + 17) = 0;
        (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(unsigned char *)(v36 + 17) = 0;
        (*(void (**)(void, void))(**(void **)(a1 + 408) + 248))(*(void *)(a1 + 408), 0);
      }
    }
    if (v27)
    {
      int v37 = *(_DWORD *)(v23 + 44);
      if (v37 != 2 && v37 != 4 && *(unsigned char *)(a1 + 1820))
      {
        int v38 = *(_DWORD *)(v23 + 48);
        uint64_t v39 = *(void *)(a1 + 408);
        if (v38 != 4) {
          goto LABEL_57;
        }
        if (v39)
        {
          *(unsigned char *)(a1 + 1820) = 0;
          uint64_t v40 = (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 64))();
          (*(void (**)(uint64_t, uint64_t))(*(void *)v87 + 16))(v87, v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v40 + 8), (uint64_t)"RTT remote resume detected!!", 28);
          *(unsigned char *)(v40 + 17) = 0;
          (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(unsigned char *)(v40 + 17) = 0;
          (*(void (**)(void, uint64_t))(**(void **)(a1 + 408) + 248))(*(void *)(a1 + 408), 1);
        }
      }
    }
    int v38 = *(_DWORD *)(v23 + 48);
    uint64_t v39 = *(void *)(a1 + 408);
LABEL_57:
    *(_DWORD *)(v23 + 52) = v34;
    if (v39)
    {
      long long v122 = 0u;
      memset(v121, 0, sizeof(v121));
      unsigned int v41 = v38 - 1;
      if (v41 > 3) {
        int v42 = 0;
      }
      else {
        int v42 = dword_1C56D0480[v41];
      }
      int v43 = *(_DWORD *)(a1 + 448);
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v119, (void *)(a1 + 184));
      BambiCallHoldResumeIndicationEvent::BambiCallHoldResumeIndicationEvent((uint64_t)v121, (v43 & 0xFFFFFFFE) == 2, v34, v42, &v119);
      if (v120) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v120);
      }
      (*(void (**)(void, unsigned char *))(**(void **)(a1 + 408) + 16))(*(void *)(a1 + 408), v121);
      *(void *)int64_t v121 = &unk_1F20B8640;
      if (*(void *)&v121[24]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v121[24]);
      }
      int v38 = *(_DWORD *)(v23 + 48);
    }
    uint64_t v44 = *(unsigned char **)(a1 + 200);
    if (v38 == 2)
    {
      if (v44[584])
      {
        uint64_t v45 = v44 + 152;
        goto LABEL_74;
      }
    }
    else if (v38 == 6 && v44[1856])
    {
      uint64_t v45 = v44 + 1496;
      goto LABEL_74;
    }
    if (!v44[1328]) {
      goto LABEL_75;
    }
    uint64_t v45 = v44 + 1032;
LABEL_74:
    *(_WORD *)(v23 + 56) = *((_WORD *)v45 + 13);
LABEL_75:
    uint64_t v46 = *(std::__shared_weak_count **)(a1 + 368);
    if (v46)
    {
      uint64_t v47 = std::__shared_weak_count::lock(v46);
      if (v47)
      {
        uint64_t v48 = *(void *)(a1 + 376);
        if (*(_DWORD *)(v48 + 340) == 2)
        {
          uint64_t v49 = *(void *)(a1 + 360);
          if (v49)
          {
            if (*(char *)(v49 + 4183) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v121, *(const std::string::value_type **)(v49 + 4160), *(void *)(v49 + 4168));
            }
            else
            {
              uint64_t v50 = v49 + 4160;
              *(_OWORD *)int64_t v121 = *(_OWORD *)v50;
              *(void *)&v121[16] = *(void *)(v50 + 16);
            }
            uint64_t v51 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v48 + 312, (void **)v121);
            if ((void **)(v48 + 320) == v51) {
              int v52 = 0;
            }
            else {
              int v52 = *((_DWORD *)v51 + 14);
            }
            if ((v121[23] & 0x80000000) != 0) {
              operator delete(*(void **)v121);
            }
            if (v52 == 2)
            {
              if (v89) {
                char v53 = 1;
              }
              else {
                char v53 = v27;
              }
              BOOL v89 = v53;
            }
          }
        }
      }
    }
    else
    {
      uint64_t v47 = 0;
    }
    if (v89) {
      BambiCall::updateMediaSettings((BambiCall *)a1, (BambiCallMediaStream *)v23);
    }
    std::string::basic_string[abi:ne180100]<0>(v121, "HandleSdpOffer");
    BambiCall::activateMediaSessionIfAppropriate(a1, v23, (std::string *)v121);
    if ((v121[23] & 0x80000000) != 0) {
      operator delete(*(void **)v121);
    }
    long long v116 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    std::string v113 = &unk_1F20B2680;
    uint64_t v114 = &_bambiDomain;
    int v115 = 0;
    if (v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v47);
    }
    ImsResult::operator=((uint64_t)&v91, (uint64_t)&v113);
    ImsResult::~ImsResult((ImsResult *)&v113);
    long long v116 = 0u;
    long long v117 = 0u;
    long long v118 = 0u;
    std::string v113 = &unk_1F20B2680;
    uint64_t v114 = &_bambiDomain;
    int v115 = 0;
    if (v92 != &_bambiDomain) {
      break;
    }
    int v55 = v93;
    ImsResult::~ImsResult(v54);
    if (!v55)
    {
      BOOL v56 = (void *)v22[1];
      if (v56)
      {
        do
        {
          uint64_t v57 = v56;
          BOOL v56 = (void *)*v56;
        }
        while (v56);
      }
      else
      {
        do
        {
          uint64_t v57 = (void *)v22[2];
          BOOL v58 = *v57 == (void)v22;
          unsigned int v22 = v57;
        }
        while (!v58);
      }
      unsigned int v22 = v57;
      if (v57 != v88) {
        continue;
      }
    }
    goto LABEL_140;
  }
  ImsResult::~ImsResult(v54);
LABEL_140:
  ImsResult::operator=((uint64_t)v109, (uint64_t)&v91);
  ImsResult::~ImsResult((ImsResult *)&v91);
LABEL_141:
  uint64_t v85 = *a2;
  uint64_t v86 = (std::__shared_weak_count *)a2[1];
  if (v86) {
    atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiCall::handleRttInSDP((int8x8_t *)a1, *(void *)(v85 + 416), *(void *)(v85 + 424));
  if (v86) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v86);
  }
  ImsResult::ImsResult(a4, (uint64_t)v109);
LABEL_146:
  ImsResult::~ImsResult((ImsResult *)v109);
}

void sub_1C538ACAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  ImsResult::~ImsResult((ImsResult *)&a13);
  ImsResult::~ImsResult((ImsResult *)&a39);
  _Unwind_Resume(a1);
}

void BambiCall::checkRemoteSdpForValidAddress(uint64_t a1, uint64_t *a2)
{
  *(unsigned char *)(a1 + 464) = 0;
  uint64_t v4 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "0.0.0.0");
  char v5 = SDPModel::validateRemoteAddress(v4, (const void **)__p);
  char v6 = v5;
  if (v14 < 0)
  {
    operator delete(__p[0]);
    if (v6)
    {
LABEL_12:
      *(unsigned char *)(a1 + 464) = 1;
      return;
    }
  }
  else if (v5)
  {
    goto LABEL_12;
  }
  uint64_t v7 = *a2;
  uint64_t v9 = *(void *)(*a2 + 416);
  uint64_t v8 = *(void *)(v7 + 424);
  while (v9 != v8)
  {
    if (*(_DWORD *)(v9 + 12) == 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v11, "0.0.0.0");
      int v10 = SDPMedia::validateRemoteAddress(v9, (const void **)v11);
      if (v12 < 0) {
        operator delete(v11[0]);
      }
      if (!v10) {
        return;
      }
      goto LABEL_12;
    }
    v9 += 200;
  }
}

void BambiCall::initializeMediaForMTSession(BambiCall *this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v6 = (SDPSession *)*((void *)this + 25);
  if (v6 && SDPSession::hasStream(v6))
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(void *)a3 = &unk_1F20B2680;
    *(void *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
    return;
  }
  uint64_t v7 = *a2;
  if (*a2)
  {
    for (uint64_t i = *(void *)(v7 + 416); i != *(void *)(v7 + 424); i += 200)
    {
      if (*(_DWORD *)(i + 12) == 4)
      {
        if (!*((unsigned char *)this + 753))
        {
          BambiCall::textSessionDetected(this);
          uint64_t v7 = *a2;
        }
        *((_WORD *)this + 376) = 256;
        break;
      }
    }
  }
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  v15[0] = v7;
  v15[1] = (uint64_t)v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiCall::initializeMediaForSession((uint64_t)&v16, (uint64_t)this, v15);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if ((*(unsigned int (**)(void, void))(**((void **)&v16 + 1) + 24))(*((void *)&v16 + 1), v17))
  {
    uint64_t v11 = *((void *)this + 10);
    int v10 = (char *)this + 80;
    uint64_t v12 = (*(uint64_t (**)(char *))(v11 + 56))(v10);
    (*(void (**)(char *, uint64_t))(*(void *)v10 + 16))(v10, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v12 + 8), (uint64_t)"unable to create media session for incoming call: ", 50);
    *(unsigned char *)(v12 + 17) = 0;
    (*(void (**)(long long *, uint64_t))(v16 + 16))(&v16, v12);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v12 + 17) = 0;
    int v13 = &SipResultDomain::_domain;
    if (*((uint64_t **)&v16 + 1) == &SipResultDomain::_domain)
    {
      ImsResult::ImsResult(a3, (uint64_t)&v16);
      goto LABEL_21;
    }
    int v14 = 500;
  }
  else
  {
    int v14 = 0;
    int v13 = &_bambiDomain;
  }
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)a3 = &unk_1F20B2680;
  *(void *)(a3 + 8) = v13;
  *(_DWORD *)(a3 + 16) = v14;
LABEL_21:
  ImsResult::~ImsResult((ImsResult *)&v16);
}

void sub_1C538B15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::handleRttInSDP(int8x8_t *this, uint64_t a2, uint64_t a3)
{
  _OWORD v17[4] = *MEMORY[0x1E4F143B8];
  while (a2 != a3)
  {
    if (*(_DWORD *)(a2 + 12) == 4) {
      goto LABEL_6;
    }
    a2 += 200;
  }
  a2 = 0;
LABEL_6:
  if (this[94].i8[1])
  {
    int8x8_t v4 = this[25];
    if (!*(unsigned char *)(*(void *)&v4 + 1328)
      || ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)&v4 + 1032) + 24))(*(void *)&v4 + 1032, a2) & 1) == 0)
    {
      char v5 = (std::__shared_weak_count *)this[46];
      if (v5)
      {
        char v5 = std::__shared_weak_count::lock(v5);
        char v6 = v5;
        if (v5) {
          char v5 = (std::__shared_weak_count *)this[45];
        }
      }
      else
      {
        char v6 = 0;
      }
      uint64_t v7 = (ImsPrefs *)SipStack::prefs((SipStack *)v5);
      RTTNegotiationTimerSecondsKey = (void **)ImsPrefs::getRTTNegotiationTimerSecondsKey(v7);
      int v9 = ImsPrefs::intValue(v7, RTTNegotiationTimerSecondsKey);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      if (v9)
      {
        int8x8_t v11 = this[23];
        int v10 = (std::__shared_weak_count *)this[24];
        if (v10)
        {
          atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = operator new(0x20uLL);
        *uint64_t v12 = &unk_1F20C62F8;
        v12[1] = this;
        uint64_t v12[2] = v11;
        void v12[3] = v10;
        void v17[3] = v12;
        int v13 = (std::__shared_weak_count *)this[46];
        if (v13)
        {
          int v13 = std::__shared_weak_count::lock(v13);
          int v14 = v13;
          if (v13) {
            int v13 = (std::__shared_weak_count *)this[45];
          }
        }
        else
        {
          int v14 = 0;
        }
        uint64_t v15 = (ImsPrefs *)SipStack::prefs((SipStack *)v13);
        long long v16 = (void **)ImsPrefs::getRTTNegotiationTimerSecondsKey(v15);
        ImsPrefs::intValue(v15, v16);
        SipTimerContainer::startTimer(this + 27, (uint64_t)"RTTNegotiatedTimer");
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        std::__function::__value_func<void ()(std::string &)>::~__value_func[abi:ne180100](v17);
        if (v10)
        {
          std::__shared_weak_count::__release_weak(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      else
      {
        BambiCall::textSessionDeactivated((BambiCall *)this);
      }
    }
  }
  else if (a2 && !this[94].i8[0] && *(void *)(a2 + 16))
  {
    BambiCall::textSessionDetected((BambiCall *)this);
  }
}

void sub_1C538B3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10)
  {
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::handleSdpAnswerInFork(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a1 + 200);
  int v9 = *(std::__shared_weak_count **)(a1 + 384);
  v89[0] = *(void *)(a1 + 376);
  v89[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v10 = SDPSession::streamsValidForManager(v8, (uint64_t)v89);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if ((v10 & 1) == 0)
  {
    uint64_t v60 = *(void *)(a1 + 80);
    uint64_t v59 = a1 + 80;
    uint64_t v61 = (*(uint64_t (**)(uint64_t))(v60 + 56))(v59);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v59 + 16))(v59, v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v61 + 8), (uint64_t)"recieved SDP, but one or more media streams are invalid", 55);
    *(unsigned char *)(v61 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v61 + 17) = 0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &_bambiDomain;
    int v62 = 1073741826;
LABEL_108:
    *(_DWORD *)(a4 + 16) = v62;
    return;
  }
  if (((*(uint64_t (**)(void))(*(void *)*a3 + 24))() & 1) == 0)
  {
    uint64_t v64 = *(void *)(a1 + 80);
    uint64_t v63 = a1 + 80;
    uint64_t v65 = (*(uint64_t (**)(uint64_t))(v64 + 56))(v63);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v63 + 16))(v63, v65);
    uint64_t v66 = *(void **)(v65 + 8);
    uint64_t v67 = "received invalid SDP answer:";
    uint64_t v68 = 28;
LABEL_107:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
    *(unsigned char *)(v65 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v65 + 64))(v65, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v65 + 17) = 0;
    uint64_t v70 = (unsigned char *)(*(uint64_t (**)(uint64_t))(*(void *)v63 + 56))(v63);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v63 + 16))(v63, v70);
    (*(void (**)(void, unsigned char *))(*(void *)*a3 + 16))(*a3, v70);
    (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v70[17] = 0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(void *)a4 = &unk_1F20B2680;
    *(void *)(a4 + 8) = &SipResultDomain::_domain;
    int v62 = 488;
    goto LABEL_108;
  }
  uint64_t v11 = *(void *)(a1 + 200);
  uint64_t v12 = (std::__shared_weak_count *)a2[1];
  uint64_t v87 = *a2;
  uint64_t v88 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = (std::__shared_weak_count *)a3[1];
  uint64_t v85 = *a3;
  uint64_t v86 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v14 = SDPSession::handleOfferAnswer(v11, &v87, &v85, *(void *)(*a2 + 144));
  if (v86) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v86);
  }
  if (v88) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v88);
  }
  if (!v14)
  {
    uint64_t v69 = *(void *)(a1 + 80);
    uint64_t v63 = a1 + 80;
    uint64_t v65 = (*(uint64_t (**)(uint64_t))(v69 + 56))(v63);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v63 + 16))(v63, v65);
    uint64_t v66 = *(void **)(v65 + 8);
    uint64_t v67 = "received rejection answer: ";
    uint64_t v68 = 27;
    goto LABEL_107;
  }
  BOOL v79 = v14 == 2;
  uint64_t v15 = (std::__shared_weak_count *)a3[1];
  v84[0] = *a3;
  v84[1] = (uint64_t)v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiCall::checkRemoteSdpForValidAddress(a1, v84);
  uint64_t v78 = a2;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v16 = *(void *)(a1 + 200);
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(void *)a4 = &unk_1F20B2680;
  *(void *)(a4 + 8) = &_bambiDomain;
  *(void *)(a4 + 16) = 0;
  long long v17 = *(void **)(v16 + 1904);
  uint64_t v81 = (void *)(v16 + 1912);
  if (v17 != (void *)(v16 + 1912))
  {
    uint64_t v77 = a1 + 80;
    __int16 v73 = (void *)(a1 + 184);
    uint64_t v74 = (const std::string *)(a1 + 472);
    uint64_t v83 = a3;
    while (1)
    {
      long long v18 = (BambiCallMediaStream *)v17[5];
      if (v18)
      {
        long long v19 = (void *)*a3;
        int v20 = *((_DWORD *)v18 + 12);
        uint64_t v21 = *(std::__shared_weak_count **)(a1 + 368);
        if (v21)
        {
          uint64_t v21 = std::__shared_weak_count::lock(v21);
          unsigned int v22 = v21;
          if (v21) {
            uint64_t v21 = *(std::__shared_weak_count **)(a1 + 360);
          }
        }
        else
        {
          unsigned int v22 = 0;
        }
        uint64_t v23 = (ImsPrefs *)SipStack::prefs((SipStack *)v21);
        UseRestrictiveDirectionWhenCreatingAnswerKey = (void **)ImsPrefs::getUseRestrictiveDirectionWhenCreatingAnswerKey(v23);
        int v25 = ImsPrefs::BOOLValue(v23, UseRestrictiveDirectionWhenCreatingAnswerKey);
        int v26 = SDPModel::preferredDirection(v19, v20, v25);
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        int v27 = *((_DWORD *)v18 + 12);
        uint64_t v29 = (void *)*v78;
        int v28 = (std::__shared_weak_count *)v78[1];
        if (v28) {
          atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v30 = (std::__shared_weak_count *)v83[1];
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v82 = v30;
        if (*(unsigned char *)(a1 + 461))
        {
          uint64_t v80 = v28;
          int v31 = *(std::__shared_weak_count **)(a1 + 368);
          if (v31)
          {
            int v31 = std::__shared_weak_count::lock(v31);
            uint64_t v32 = v31;
            if (v31) {
              int v31 = *(std::__shared_weak_count **)(a1 + 360);
            }
          }
          else
          {
            uint64_t v32 = 0;
          }
          int v33 = (ImsPrefs *)SipStack::prefs((SipStack *)v31);
          int v34 = (void **)ImsPrefs::getUseRestrictiveDirectionWhenCreatingAnswerKey(v33);
          int v35 = ImsPrefs::BOOLValue(v33, v34);
          int v36 = SDPModel::preferredDirection(v29, v27, v35);
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          int v37 = *(_DWORD *)(a1 + 448);
          if (v36 < 3)
          {
            int v28 = v80;
            if (!v37)
            {
              *(_DWORD *)(a1 + 448) = 1;
              *(unsigned char *)(a1 + 1810) = 0;
              uint64_t v42 = (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 64))();
              (*(void (**)(uint64_t, uint64_t))(*(void *)v77 + 16))(v77, v42);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"resumed call ", 13);
              *(unsigned char *)(v42 + 17) = 0;
              ObfuscatedString::ObfuscatedString((uint64_t)&v105, v74);
              (*(void (**)(uint64_t, std::string *))(*(void *)v42 + 56))(v42, &v105);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v42 + 17) = 0;
              if (SBYTE7(v107) < 0) {
                operator delete((void *)v106);
              }
              if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v105.__r_.__value_.__l.__data_);
              }
              uint64_t v44 = *(void *)(a1 + 184);
              int v43 = *(std::__shared_weak_count **)(a1 + 192);
              if (v43) {
                atomic_fetch_add_explicit(&v43->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              int v76 = v43;
              uint64_t v45 = BambiCall::bambiClient((BambiCall *)a1);
              LoggableString::LoggableString((LoggableString *)&v105, "localResumeCompletedBlock");
              std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v109, v73);
              uint64_t v103 = v109;
              uint64_t v104 = v110;
              uint64_t v109 = 0;
              uint64_t v110 = 0;
              uint64_t v96 = MEMORY[0x1E4F143A8];
              uint64_t v97 = 1174405120;
              int64_t v98 = ___ZN9BambiCall20localResumeCompletedEv_block_invoke;
              uint64_t v99 = &__block_descriptor_tmp_31;
              uint64_t v100 = a1;
              uint64_t v101 = v44;
              uint64_t v102 = v76;
              if (v76) {
                atomic_fetch_add_explicit(&v76->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              BambiClient::performBlock(v45, (uint64_t)&v105, (uint64_t)&v103);
            }
          }
          else
          {
            int v28 = v80;
            if (v37 == 2)
            {
              *(_DWORD *)(a1 + 448) = 3;
              uint64_t v38 = (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 64))();
              (*(void (**)(uint64_t, uint64_t))(*(void *)v77 + 16))(v77, v38);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)"held call ", 10);
              *(unsigned char *)(v38 + 17) = 0;
              ObfuscatedString::ObfuscatedString((uint64_t)&v105, v74);
              (*(void (**)(uint64_t, std::string *))(*(void *)v38 + 56))(v38, &v105);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v38 + 8), (uint64_t)" to ", 4);
              *(unsigned char *)(v38 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 1048) + 40))(a1 + 1048, v38);
              (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(unsigned char *)(v38 + 17) = 0;
              if (SBYTE7(v107) < 0) {
                operator delete((void *)v106);
              }
              if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v105.__r_.__value_.__l.__data_);
              }
              uint64_t v40 = *(void *)(a1 + 184);
              uint64_t v39 = *(std::__shared_weak_count **)(a1 + 192);
              if (v39) {
                atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              unsigned int v75 = v39;
              uint64_t v41 = BambiCall::bambiClient((BambiCall *)a1);
              LoggableString::LoggableString((LoggableString *)&v105, "localHoldCompletedBlock");
              std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v109, v73);
              uint64_t v103 = v109;
              uint64_t v104 = v110;
              uint64_t v109 = 0;
              uint64_t v110 = 0;
              uint64_t v96 = MEMORY[0x1E4F143A8];
              uint64_t v97 = 1174405120;
              int64_t v98 = ___ZN9BambiCall18localHoldCompletedEv_block_invoke;
              uint64_t v99 = &__block_descriptor_tmp_36;
              uint64_t v100 = a1;
              uint64_t v101 = v40;
              uint64_t v102 = v75;
              if (v75) {
                atomic_fetch_add_explicit(&v75->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              BambiClient::performBlock(v41, (uint64_t)&v105, (uint64_t)&v103);
            }
          }
        }
        BambiCall::checkForPause(a1, (uint64_t)v18, v26, 0);
        if (v82) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v82);
        }
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        int v46 = *(unsigned char *)(a1 + 464) ? v26 : 4;
        BOOL v47 = BambiCall::setMediaDirection(a1, (uint64_t)v18, v46, 0);
        uint64_t v48 = *(std::__shared_weak_count **)(a1 + 368);
        if (v48)
        {
          uint64_t v49 = std::__shared_weak_count::lock(v48);
          if (v49)
          {
            uint64_t v50 = *(void *)(a1 + 376);
            if (*(_DWORD *)(v50 + 340) == 2)
            {
              uint64_t v51 = *(void *)(a1 + 360);
              if (v51)
              {
                if (*(char *)(v51 + 4183) < 0) {
                  std::string::__init_copy_ctor_external(&v105, *(const std::string::value_type **)(v51 + 4160), *(void *)(v51 + 4168));
                }
                else {
                  std::string v105 = *(std::string *)(v51 + 4160);
                }
                int v52 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v50 + 312, (void **)&v105.__r_.__value_.__l.__data_);
                if ((void **)(v50 + 320) == v52) {
                  int v53 = 0;
                }
                else {
                  int v53 = *((_DWORD *)v52 + 14);
                }
                if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v105.__r_.__value_.__l.__data_);
                }
                if (v53 == 2)
                {
                  char v54 = v79 || v47;
                  BOOL v79 = v54;
                }
              }
            }
          }
        }
        else
        {
          uint64_t v49 = 0;
        }
        if (v79) {
          BambiCall::updateMediaSettings((BambiCall *)a1, v18);
        }
        std::string::basic_string[abi:ne180100]<0>(&v105, "HandleSdpAnswer");
        BambiCall::activateMediaSessionIfAppropriate(a1, (uint64_t)v18, &v105);
        if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v105.__r_.__value_.__l.__data_);
        }
        long long v93 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        int v90 = &unk_1F20B2680;
        char v91 = &_bambiDomain;
        int v92 = 0;
        if (v49) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v49);
        }
        a3 = v83;
      }
      else
      {
        long long v93 = 0u;
        long long v94 = 0u;
        long long v95 = 0u;
        int v90 = &unk_1F20B2680;
        char v91 = &_bambiDomain;
        int v92 = 1073741825;
      }
      ImsResult::operator=(a4, (uint64_t)&v90);
      ImsResult::~ImsResult((ImsResult *)&v90);
      long long v106 = 0u;
      long long v107 = 0u;
      long long v108 = 0u;
      v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F20B2680;
      v105.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(v105.__r_.__value_.__r.__words[2]) = 0;
      if (*(uint64_t **)(a4 + 8) != &_bambiDomain) {
        break;
      }
      int v55 = *(_DWORD *)(a4 + 16);
      ImsResult::~ImsResult((ImsResult *)&v105);
      if (!v55)
      {
        BOOL v56 = (void *)v17[1];
        if (v56)
        {
          do
          {
            uint64_t v57 = v56;
            BOOL v56 = (void *)*v56;
          }
          while (v56);
        }
        else
        {
          do
          {
            uint64_t v57 = (void *)v17[2];
            BOOL v58 = *v57 == (void)v17;
            long long v17 = v57;
          }
          while (!v58);
        }
        long long v17 = v57;
        if (v57 != v81) {
          continue;
        }
      }
      goto LABEL_111;
    }
    ImsResult::~ImsResult((ImsResult *)&v105);
  }
LABEL_111:
  uint64_t v71 = *a3;
  uint64_t v72 = (std::__shared_weak_count *)a3[1];
  if (v72) {
    atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiCall::handleRttInSDP((int8x8_t *)a1, *(void *)(v71 + 416), *(void *)(v71 + 424));
  if (v72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  }
}

void sub_1C538C4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,std::__shared_weak_count *a56)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  ImsResult::~ImsResult(v56);
  _Unwind_Resume(a1);
}

void BambiCall::textSessionDetected(BambiCall *this)
{
  if (*((unsigned char *)this + 1496) || *((unsigned char *)this + 1497))
  {
    if (!*((unsigned char *)this + 1808))
    {
      *((_WORD *)this + 904) = 1;
      if (*((void *)this + 51))
      {
        uint64_t v9 = 0;
        long long v7 = 0u;
        *(_OWORD *)uint64_t v8 = 0u;
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v5, (void *)this + 23);
        BambiCallEvent::BambiCallEvent((uint64_t)&v7, 29, &v5);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        (*(void (**)(void, long long *))(**((void **)this + 51) + 16))(*((void *)this + 51), &v7);
        *(void *)&long long v7 = &unk_1F20B8640;
        if (v8[1]) {
          std::__shared_weak_count::__release_weak(v8[1]);
        }
      }
    }
  }
  else
  {
    uint64_t v3 = *((void *)this + 10);
    uint64_t v2 = (char *)this + 80;
    *((unsigned char *)this + 1809) = 1;
    uint64_t v4 = (*(uint64_t (**)(char *))(v3 + 64))((char *)this + 80);
    (*(void (**)(char *, uint64_t))(*(void *)v2 + 16))(v2, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v4 + 8), (uint64_t)"Text session detected, but call is still hidden. Delaying notification", 70);
    *(unsigned char *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v4 + 17) = 0;
  }
}

void sub_1C538C820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::textSessionDeactivated(BambiCall *this)
{
  *((unsigned char *)this + 1808) = 0;
  *((unsigned char *)this + 753) = 0;
  uint64_t v6 = 0;
  long long v4 = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v2, (void *)this + 23);
  BambiCallEvent::BambiCallEvent((uint64_t)&v4, 31, &v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  (*(void (**)(void, long long *))(**((void **)this + 51) + 16))(*((void *)this + 51), &v4);
  *(void *)&long long v4 = &unk_1F20B8640;
  if (v5[1]) {
    std::__shared_weak_count::__release_weak(v5[1]);
  }
}

void sub_1C538C910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  _Unwind_Resume(exception_object);
}

void BambiCall::sendHoldResumeIndication(BambiCall *this, int a2)
{
  long long v4 = (char *)this + 80;
  uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 10) + 64))((char *)this + 80);
  (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)"BambiCall::sendHoldResumeIndication called for ", 47);
  *(unsigned char *)(v5 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)&v25, (const std::string *)(v4 + 392));
  (*(void (**)(uint64_t, void **))(*(void *)v5 + 56))(v5, &v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v5 + 8), (uint64_t)" with BOOL isHeld = ", 15);
  *(unsigned char *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(unsigned char *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v5 + 17) = 0;
  if (SBYTE7(v30) < 0) {
    operator delete((void *)__p);
  }
  if (v28 < 0) {
    operator delete(v25);
  }
  uint64_t v6 = *((void *)this + 25);
  if (v6)
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v19 = &unk_1F20B2680;
    int v20 = &_bambiDomain;
    uint64_t v21 = 0;
    long long v7 = *(void **)(v6 + 1904);
    uint64_t v8 = (void *)(v6 + 1912);
    if (v7 != (void *)(v6 + 1912))
    {
      while (1)
      {
        uint64_t v9 = v7[5];
        long long v35 = 0u;
        long long v36 = 0u;
        long long v34 = 0u;
        int v10 = *(_DWORD *)(v9 + 48) - 1;
        if (v10 > 3) {
          int v11 = 0;
        }
        else {
          int v11 = dword_1C56D0480[v10];
        }
        int v12 = *(_DWORD *)(v9 + 52);
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v32, (void *)this + 23);
        BambiCallHoldResumeIndicationEvent::BambiCallHoldResumeIndicationEvent((uint64_t)&v34, a2, v12, v11, &v32);
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        uint64_t v13 = *((void *)this + 51);
        if (v13) {
          (*(void (**)(uint64_t, long long *))(*(void *)v13 + 16))(v13, &v34);
        }
        long long __p = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        int v25 = &unk_1F20B2680;
        int v26 = &_bambiDomain;
        int v27 = 0;
        *(void *)&long long v34 = &unk_1F20B8640;
        if (*((void *)&v35 + 1)) {
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v35 + 1));
        }
        ImsResult::operator=((uint64_t)&v19, (uint64_t)&v25);
        ImsResult::~ImsResult((ImsResult *)&v25);
        long long __p = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        int v25 = &unk_1F20B2680;
        int v26 = &_bambiDomain;
        int v27 = 0;
        if (v20 != &_bambiDomain) {
          break;
        }
        int v14 = v21;
        ImsResult::~ImsResult((ImsResult *)&v25);
        if (!v14)
        {
          uint64_t v15 = (void *)v7[1];
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              uint64_t v15 = (void *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (void *)v7[2];
              BOOL v17 = *v16 == (void)v7;
              long long v7 = v16;
            }
            while (!v17);
          }
          long long v7 = v16;
          if (v16 != v8) {
            continue;
          }
        }
        goto LABEL_27;
      }
      ImsResult::~ImsResult((ImsResult *)&v25);
    }
LABEL_27:
    ImsResult::~ImsResult((ImsResult *)&v19);
  }
  else
  {
    uint64_t v18 = (*(uint64_t (**)(char *))(*(void *)v4 + 64))(v4);
    (*(void (**)(char *, uint64_t))(*(void *)v4 + 16))(v4, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"BambiCall::sendHoldResumeIndication _sdpSession no longer valid", 63);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
  }
}

void sub_1C538CD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  *(void *)(v18 - 144) = &unk_1F20B8640;
  int v20 = *(std::__shared_weak_count **)(v18 - 120);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

uint64_t BambiCall::bambiClient(BambiCall *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 46);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 45);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 136);
  }
  else {
    uint64_t v5 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  return v5;
}

void ___ZN9BambiCall18localHoldCompletedEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(std::__shared_weak_count **)(v3 + 368);
        if (v6)
        {
          long long v7 = std::__shared_weak_count::lock(v6);
          if (v7)
          {
            uint64_t v8 = v7;
            uint64_t v9 = *(void *)(v3 + 360);
            if (v9) {
              (*(void (**)(void))(**(void **)(v9 + 2912) + 136))(*(void *)(v9 + 2912));
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
        }
        if (*(void *)(v3 + 408))
        {
          uint64_t v19 = 0;
          long long v17 = 0u;
          *(_OWORD *)uint64_t v18 = 0u;
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v15, (void *)(v3 + 184));
          BambiCallEvent::BambiCallEvent((uint64_t)&v17, 12, &v15);
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          (*(void (**)(void, long long *))(**(void **)(v3 + 408) + 16))(*(void *)(v3 + 408), &v17);
          uint64_t v14 = 0;
          long long v12 = 0u;
          *(_OWORD *)uint64_t v13 = 0u;
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v10, (void *)(v3 + 184));
          BambiCallEvent::BambiCallEvent((uint64_t)&v12, 13, &v10);
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          (*(void (**)(void, long long *))(**(void **)(v3 + 408) + 16))(*(void *)(v3 + 408), &v12);
          BambiCall::sendHoldResumeIndication((BambiCall *)v3, 1);
          *(void *)&long long v12 = &unk_1F20B8640;
          if (v13[1]) {
            std::__shared_weak_count::__release_weak(v13[1]);
          }
          *(void *)&long long v17 = &unk_1F20B8640;
          if (v18[1]) {
            std::__shared_weak_count::__release_weak(v18[1]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C538D000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c33_ZTSNSt3__18weak_ptrI9BambiCallEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN9BambiCall20localResumeCompletedEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(std::__shared_weak_count **)(v3 + 368);
        if (v6)
        {
          long long v7 = std::__shared_weak_count::lock(v6);
          if (v7)
          {
            uint64_t v8 = v7;
            uint64_t v9 = *(void *)(v3 + 360);
            if (v9) {
              (*(void (**)(void))(**(void **)(v9 + 2912) + 144))(*(void *)(v9 + 2912));
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v8);
          }
        }
        if (*(void *)(v3 + 408))
        {
          uint64_t v19 = 0;
          long long v17 = 0u;
          *(_OWORD *)uint64_t v18 = 0u;
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v15, (void *)(v3 + 184));
          BambiCallEvent::BambiCallEvent((uint64_t)&v17, 10, &v15);
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          (*(void (**)(void, long long *))(**(void **)(v3 + 408) + 16))(*(void *)(v3 + 408), &v17);
          uint64_t v14 = 0;
          long long v12 = 0u;
          *(_OWORD *)uint64_t v13 = 0u;
          std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v10, (void *)(v3 + 184));
          BambiCallEvent::BambiCallEvent((uint64_t)&v12, 11, &v10);
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          (*(void (**)(void, long long *))(**(void **)(v3 + 408) + 16))(*(void *)(v3 + 408), &v12);
          BambiCall::sendHoldResumeIndication((BambiCall *)v3, 0);
          *(void *)&long long v12 = &unk_1F20B8640;
          if (v13[1]) {
            std::__shared_weak_count::__release_weak(v13[1]);
          }
          *(void *)&long long v17 = &unk_1F20B8640;
          if (v18[1]) {
            std::__shared_weak_count::__release_weak(v18[1]);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_1C538D290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  _Unwind_Resume(a1);
}

void BambiCall::initializeMobileOriginated(BambiCall *this@<X0>, const SipUri *a2@<X1>, const BambiCallOptions *a3@<X2>, uint64_t a4@<X8>)
{
  long long v7 = (std::__shared_weak_count *)*((void *)this + 46);
  if (!v7 || (uint64_t v9 = std::__shared_weak_count::lock(v7)) == 0)
  {
    uint64_t v10 = 0;
    goto LABEL_15;
  }
  uint64_t v10 = v9;
  uint64_t v11 = *((void *)this + 45);
  uint64_t v26 = 0;
  int v27 = 0;
  if (!v11)
  {
LABEL_15:
    uint64_t v26 = 0;
    int v27 = 0;
LABEL_16:
    uint64_t v17 = *((void *)this + 10);
    uint64_t v16 = (char *)this + 80;
    uint64_t v18 = (*(uint64_t (**)(char *))(v17 + 56))(v16);
    (*(void (**)(char *, uint64_t))(*(void *)v16 + 16))(v16, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v18 + 8), (uint64_t)"unable to create SipSession for call to ", 40);
    *(unsigned char *)(v18 + 17) = 0;
    (*(void (**)(const SipUri *, uint64_t))(*(void *)a2 + 40))(a2, v18);
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v18 + 17) = 0;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    v21[0] = &unk_1F20B2680;
    v21[1] = &_bambiDomain;
    int v22 = 0x40000000;
    uint64_t v19 = (const std::string *)ImsResult::operator<<<char [28]>((uint64_t)v21, "unable to create SipSession");
    ImsResult::ImsResult((ImsResult *)a4, v19);
    ImsResult::~ImsResult((ImsResult *)v21);
    goto LABEL_17;
  }
  uint64_t v12 = *(void *)(v11 + 144);
  uint64_t v13 = *(SipDialogManager **)(v12 + 176);
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 184);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  SipDialogManager::initializeSession(v13, a2, a3, (uint64_t)&v26);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (!v26) {
    goto LABEL_16;
  }
  uint64_t v15 = v27;
  v20[0] = v26;
  v20[1] = v27;
  if (v27) {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiCall::attachSipSession((uint64_t)this, v20);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  *((unsigned char *)this + 1496) = 1;
  *((unsigned char *)this + 460) = 1;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(void *)a4 = &unk_1F20B2680;
  *(void *)(a4 + 8) = &_bambiDomain;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_17:
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1C538D58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 56);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t BambiCall::attachSipSession(uint64_t result, void *a2)
{
  if (*a2)
  {
    uint64_t v3 = result;
    memset(v33, 0, sizeof(v33));
    uint64_t v4 = (void *)(result + 184);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v31, (void *)(result + 184));
    long long v32 = v31;
    long long v31 = 0uLL;
    LoggableString::LoggableString((LoggableString *)&__p, "attachSipSession");
    SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((std::__shared_weak_count **)v33, (std::__shared_weak_count **)&v32, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v32 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v32 + 1));
    }
    if (*((void *)&v31 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v31 + 1));
    }
    if (*(void *)(v3 + 392)) {
      BambiCall::detachSipSession((BambiCall *)v3);
    }
    uint64_t v5 = *(void *)(*a2 + 248);
    uint64_t v6 = *(std::__shared_weak_count **)(*a2 + 256);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::operator=((std::string *)(v3 + 472), (const std::string *)(v5 + 1544));
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *(std::__shared_weak_count **)(v3 + 400);
    *(void *)(v3 + 392) = v8;
    *(void *)(v3 + 400) = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    LoggableString::LoggableString((LoggableString *)&__p, "Session");
    (*(void (**)(uint64_t, std::string *))(*(void *)v3 + 32))(v3, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v10 = *(void *)(v3 + 392);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v28, v4);
    uint64_t v12 = v28;
    uint64_t v11 = v29;
    if (v29) {
      atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)(v10 + 776) = v12;
    uint64_t v13 = *(std::__shared_weak_count **)(v10 + 784);
    *(void *)(v10 + 784) = v11;
    if (v13)
    {
      std::__shared_weak_count::__release_weak(v13);
      uint64_t v11 = v29;
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    uint64_t v14 = *(void *)(*a2 + 248);
    uint64_t v15 = *(std::__shared_weak_count **)(*a2 + 256);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = *(void *)(v14 + 640);
    uint64_t v17 = v14 + 232;
    if (v16) {
      uint64_t v18 = v16;
    }
    else {
      uint64_t v18 = v17;
    }
    SipUri::operator=((SipUri *)(v3 + 1048), v18);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    uint64_t v19 = *(const std::string **)(*a2 + 248);
    int v20 = *(std::__shared_weak_count **)(*a2 + 256);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::string::operator=((std::string *)(v3 + 1456), v19 + 27);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    uint64_t v21 = *a2;
    *(_WORD *)(v3 + 672) = *(_WORD *)(v21 + 792);
    std::string::operator=((std::string *)(v3 + 680), (const std::string *)(v21 + 800));
    long long v22 = *(_OWORD *)(v21 + 824);
    long long v23 = *(_OWORD *)(v21 + 840);
    long long v24 = *(_OWORD *)(v21 + 856);
    *(void *)(v3 + 749) = *(void *)(v21 + 869);
    *(_OWORD *)(v3 + 720) = v23;
    *(_OWORD *)(v3 + 736) = v24;
    *(_OWORD *)(v3 + 704) = v22;
    std::string::operator=((std::string *)(v3 + 760), (const std::string *)(v21 + 880));
    std::string::operator=((std::string *)(v3 + 784), (const std::string *)(v21 + 904));
    *(unsigned char *)(v3 + 808) = *(unsigned char *)(v21 + 928);
    long long v25 = *(_OWORD *)(v21 + 936);
    long long v26 = *(_OWORD *)(v21 + 968);
    *(_OWORD *)(v3 + 832) = *(_OWORD *)(v21 + 952);
    *(_OWORD *)(v3 + 848) = v26;
    *(_OWORD *)(v3 + 816) = v25;
    std::string::operator=((std::string *)(v3 + 864), (const std::string *)(v21 + 984));
    std::string::operator=((std::string *)(v3 + 888), (const std::string *)(v21 + 1008));
    std::string::operator=((std::string *)(v3 + 912), (const std::string *)(v21 + 1032));
    std::string::operator=((std::string *)(v3 + 936), (const std::string *)(v21 + 1056));
    std::string::operator=((std::string *)(v3 + 960), (const std::string *)(v21 + 1080));
    *(unsigned char *)(v3 + 984) = *(unsigned char *)(v21 + 1104);
    std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(v3 + 992), (const std::string *)(v21 + 1112));
    ims::makeAwdCallId(v3 + 472, &__p);
    int v27 = (void **)(v3 + 496);
    if (*(char *)(v3 + 519) < 0) {
      operator delete(*v27);
    }
    *(_OWORD *)int v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v3 + 512) = *((void *)&__p.__r_.__value_.__l + 2);
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v33);
  }
  return result;
}

void sub_1C538D8F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
}

void BambiCall::initializeMediaForSession(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a2 + 368);
  if (v6)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v6);
    uint64_t v7 = v6;
    if (v6) {
      uint64_t v6 = *(std::__shared_weak_count **)(a2 + 360);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  memset(&v72, 0, sizeof(v72));
  uint64_t v8 = (ImsPrefs *)SipStack::prefs((SipStack *)v6);
  OriginUsernameKey = (void **)ImsPrefs::getOriginUsernameKey(v8);
  ImsPrefs::stringValue(v8, OriginUsernameKey);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::string::size_type size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
  if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v72.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    uint64_t v71 = 0;
    long long v69 = 0u;
    memset(v70, 0, sizeof(v70));
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    memset(v62, 0, sizeof(v62));
    *(_OWORD *)uint64_t v61 = 0u;
    SipUri::SipUri((SipUri *)v61);
    if (*(unsigned char *)(a2 + 673))
    {
      SipUri::makeAnonymous((SipUri *)v61);
    }
    else
    {
      uint64_t v11 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a2 + 368));
      uint64_t v12 = SipUserAgent::publicUri(*(SipUserAgent **)(*(void *)(a2 + 360) + 144));
      SipUri::operator=((SipUri *)v61, v12);
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    std::string::basic_string[abi:ne180100]<0>(__str, (char *)&str_35_0);
    std::string::operator=((std::string *)((char *)v70 + 8), (const std::string *)__str);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    SipUri::asString((uint64_t)v61, __str);
    if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v72.__r_.__value_.__l.__data_);
    }
    std::string v72 = *(std::string *)__str;
    SipUri::~SipUri((SipUri *)v61);
  }
  std::string::basic_string[abi:ne180100]<0>(__str, " ");
  std::string::basic_string[abi:ne180100]<0>(&v73, (char *)&str_35_0);
  ims::substituteVar(&v72, (uint64_t)__str, (uint64_t)&v73, v61);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v72.__r_.__value_.__l.__data_ = *(_OWORD *)v61;
  v72.__r_.__value_.__r.__words[2] = *(void *)&v62[0];
  BYTE7(v62[0]) = 0;
  LOBYTE(v61[0]) = 0;
  if (v75 < 0) {
    operator delete(v73);
  }
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  uint64_t v60 = 0;
  long long v59 = 0u;
  memset(__str, 0, sizeof(__str));
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 368);
  if (v13)
  {
    uint64_t v13 = std::__shared_weak_count::lock(v13);
    uint64_t v14 = v13;
    if (v13) {
      uint64_t v13 = *(std::__shared_weak_count **)(a2 + 360);
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  SipStack::mediaAddress((SipStack *)v13, (uint64_t)__str);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  SipHost::address((SipHost *)__str, &v56);
  uint64_t v15 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a2 + 368));
  unint64_t PreferredMedia = SipUserAgent::getPreferredMedia(*(void *)(*(void *)(a2 + 360) + 144), a2 + 784);
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  if (HIDWORD(PreferredMedia) != 3)
  {
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v54, (void *)(a2 + 184));
    int v19 = *(unsigned __int8 *)(a2 + 753);
    int v20 = *(std::__shared_weak_count **)(a2 + 368);
    if (v20)
    {
      uint64_t v21 = std::__shared_weak_count::lock(v20);
      if (v21) {
        long long v22 = *(void **)(a2 + 360);
      }
      else {
        long long v22 = 0;
      }
    }
    else
    {
      long long v22 = 0;
      uint64_t v21 = 0;
    }
    long long v23 = operator new(0x7D8uLL);
    v23[1] = 0;
    v23[2] = 0;
    void *v23 = &unk_1F20C6540;
    v61[0] = v54;
    v61[1] = v55;
    char v54 = 0;
    int v55 = 0;
    __int16 v73 = v22;
    uint64_t v74 = v21;
    uint64_t v24 = *(void *)(a2 + 384);
    v76[0] = *(void *)(a2 + 376);
    v76[1] = v24;
    if (v24) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    }
    SDPSession::SDPSession((uint64_t)(v23 + 3), v61, (long long *)&v72, (uint64_t)&v56, (2 * v19), &v73, v76);
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)(a2 + 80) + 32))(a2 + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 + 80) + 16))(a2 + 80, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v17 + 8), (uint64_t)"Requested to create outgoing video call - behavior is undefined", 63);
  *(unsigned char *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(unsigned char *)(v17 + 17) = 0;
  uint64_t v18 = *(std::__shared_weak_count **)(a2 + 208);
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  long long v25 = *(SDPSession **)(a2 + 200);
  if (!v25)
  {
    uint64_t v32 = *(void *)(a2 + 80);
    uint64_t v31 = a2 + 80;
    uint64_t v33 = (*(uint64_t (**)(uint64_t))(v32 + 56))(v31);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 16))(v31, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v33 + 8), (uint64_t)"Unable to create SDP session", 28);
    *(unsigned char *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(unsigned char *)(v33 + 17) = 0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(void *)a1 = &unk_1F20B2680;
    *(void *)(a1 + 8) = &SipResultDomain::_domain;
    *(_DWORD *)(a1 + 16) = 500;
    goto LABEL_100;
  }
  if (*a3)
  {
    long long v26 = (std::__shared_weak_count *)a3[1];
    uint64_t v52 = *a3;
    int v53 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    int v27 = SDPSession::handleOfferAnswer((uint64_t)v25, &v52, &v50, 0);
    if (v51) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v51);
    }
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    if (v27 != 2)
    {
      uint64_t v28 = *(std::__shared_weak_count **)(a2 + 368);
      if (v28)
      {
        uint64_t v29 = std::__shared_weak_count::lock(v28);
        if (v29) {
          uint64_t v30 = *(void *)(a2 + 360);
        }
        else {
          uint64_t v30 = 0;
        }
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v29 = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(&v73, "CodecNotSupported");
      SipStack::callTerminationReason(v30, (uint64_t)&v73, (BambiCallTerminationReason *)v61);
      SipResultDomain::makeResult((SipResultDomain *)v61, a1);
      if (*((void *)&v65 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v65 + 1));
      }
      if (*((void *)&v64 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v64 + 1));
      }
      if (SHIBYTE(v63) < 0) {
        operator delete(*((void **)&v62[3] + 1));
      }
      if (SBYTE7(v62[2]) < 0) {
        operator delete(*(void **)&v62[1]);
      }
      if (SHIBYTE(v62[0]) < 0) {
        operator delete(v61[1]);
      }
      if (v75 < 0) {
        operator delete(v73);
      }
      if (v29) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v29);
      }
      goto LABEL_100;
    }
  }
  else
  {
    SDPSession::initializeOffer(v25);
  }
  uint64_t v34 = *(void *)(a2 + 200);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)a1 = &unk_1F20B2680;
  *(void *)(a1 + 8) = &_bambiDomain;
  *(void *)(a1 + 16) = 0;
  long long v35 = *(void **)(v34 + 1904);
  long long v36 = (void *)(v34 + 1912);
  if (v35 != (void *)(v34 + 1912))
  {
    uint64_t v37 = a2 + 80;
    while (1)
    {
      uint64_t v38 = v35[5];
      uint64_t v39 = *(std::__shared_weak_count **)(v38 + 24);
      if (v39)
      {
        uint64_t v40 = *(void *)(v38 + 16);
        atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v41 = std::__shared_weak_count::lock(v39);
        if (!v41) {
          uint64_t v40 = 0;
        }
        std::__shared_weak_count::__release_weak(v39);
      }
      else
      {
        uint64_t v40 = 0;
        uint64_t v41 = 0;
      }
      uint64_t v42 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 64))(a2 + 80);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v37 + 16))(a2 + 80, v42);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"creating media session for ", 27);
      *(unsigned char *)(v42 + 17) = 0;
      (*(void (**)(uint64_t, void **))(*(void *)v42 + 32))(v42, &v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)" stream on ", 11);
      *(unsigned char *)(v42 + 17) = 0;
      if (v75 < 0) {
        operator delete(v73);
      }
      if (v40) {
        std::ostream::operator<<();
      }
      else {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v42 + 8), (uint64_t)"Unknown Call", 12);
      }
      *(unsigned char *)(v42 + 17) = 0;
      (*(void (**)(uint64_t, void *(*)(void *)))(*(void *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(unsigned char *)(v42 + 17) = 0;
      uint64_t v43 = BambiCall::bambiClient((BambiCall *)a2);
      unsigned int v44 = *(_DWORD *)(a2 + 452);
      uint64_t v45 = *(std::__shared_weak_count **)(a2 + 208);
      __int16 v73 = *(void **)(a2 + 200);
      uint64_t v74 = v45;
      if (v45) {
        atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BambiClient::createMediaSessionForStream(v43, v38, (uint64_t)&v56, v44, (uint64_t)&v73, (uint64_t)v61);
      if (v74) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v74);
      }
      if (v41) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v41);
      }
      ImsResult::operator=(a1, (uint64_t)v61);
      ImsResult::~ImsResult((ImsResult *)v61);
      memset((char *)v62 + 8, 0, 48);
      v61[0] = &unk_1F20B2680;
      v61[1] = &_bambiDomain;
      LODWORD(v62[0]) = 0;
      if (*(uint64_t **)(a1 + 8) != &_bambiDomain) {
        break;
      }
      int v46 = *(_DWORD *)(a1 + 16);
      ImsResult::~ImsResult((ImsResult *)v61);
      if (!v46)
      {
        BOOL v47 = (void *)v35[1];
        if (v47)
        {
          do
          {
            uint64_t v48 = v47;
            BOOL v47 = (void *)*v47;
          }
          while (v47);
        }
        else
        {
          do
          {
            uint64_t v48 = (void *)v35[2];
            BOOL v49 = *v48 == (void)v35;
            long long v35 = v48;
          }
          while (!v49);
        }
        long long v35 = v48;
        if (v48 != v36) {
          continue;
        }
      }
      goto LABEL_100;
    }
    ImsResult::~ImsResult((ImsResult *)v61);
  }
LABEL_100:
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  SipHost::~SipHost((SipHost *)__str);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v72.__r_.__value_.__l.__data_);
  }
}

void sub_1C538E2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  BambiCallTerminationReason::~BambiCallTerminationReason((BambiCallTerminationReason *)&a28);
  if (*(char *)(v29 - 105) < 0) {
    operator delete(*(void **)(v29 - 128));
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  SipHost::~SipHost((SipHost *)&__p);
  if (*(char *)(v29 - 137) < 0) {
    operator delete(*(void **)(v29 - 160));
  }
  _Unwind_Resume(a1);
}

void BambiCall::initializeMobileTerminated(uint64_t a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  v13[0] = *a2;
  v13[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BambiCall::attachSipSession(a1, v13);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(unsigned char *)(a1 + 1496) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 368);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    if (v5) {
      uint64_t v6 = *(void *)(a1 + 360);
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = a1 + 1576;
  std::string::operator=((std::string *)(a1 + 1576), (const std::string *)(v6 + 3160));
  std::string::operator=((std::string *)(a1 + 1600), (const std::string *)(v6 + 3184));
  long long v8 = *(_OWORD *)(v6 + 3208);
  *(unsigned char *)(a1 + 1640) = *(unsigned char *)(v6 + 3224);
  *(_OWORD *)(a1 + 1624) = v8;
  std::string::operator=((std::string *)(a1 + 1504), (const std::string *)(a1 + 1576));
  std::string::operator=((std::string *)(a1 + 1528), (const std::string *)(a1 + 1600));
  *(_OWORD *)(a1 + 1552) = *(_OWORD *)(a1 + 1624);
  *(unsigned char *)(a1 + 1568) = *(unsigned char *)(a1 + 1640);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*(char *)(a1 + 1599) < 0)
  {
    if (!*(void *)(a1 + 1584)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 1599))
  {
    return;
  }
  if (*(char *)(a1 + 1623) < 0)
  {
    if (!*(void *)(a1 + 1608)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 1623))
  {
    return;
  }
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v9 = a1 + 80;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(v10 + 64))(v9);
  (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(v11 + 8), (uint64_t)"starting MT call on access network ", 35);
  *(unsigned char *)(v11 + 17) = 0;
  uint64_t v12 = (unsigned char *)ims::operator<<(v11, v7);
  (*(void (**)(unsigned char *, void *(*)(void *)))(*(void *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v12[17] = 0;
}

void sub_1C538E6E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ims::AccessNetwork::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  char v4 = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = v4;
  return a1;
}