@interface HFUtilities
+ (BOOL)forceTestUtilityMode;
+ (BOOL)hasInternalDiagnostics;
+ (BOOL)invertCellTaps;
+ (BOOL)isAVisionPro;
+ (BOOL)isAnIPad;
+ (BOOL)isAnIPhone;
+ (BOOL)isCloudPhotosOn;
+ (BOOL)isCurrentAccount2FAEnabled;
+ (BOOL)isDetailedSignpostLoggingEnabled;
+ (BOOL)isDeviceUnlocked;
+ (BOOL)isHostProcessHCSTestApp;
+ (BOOL)isHostProcessProxControl;
+ (BOOL)isHostProcessProxViewService;
+ (BOOL)isInAirplaneMode;
+ (BOOL)isInternalInstall;
+ (BOOL)isInternalTest;
+ (BOOL)isMonitoredInterfaceWifiOrEthernet;
+ (BOOL)isPressDemoModeEnabled;
+ (BOOL)isProxHandOffV2Config;
+ (BOOL)isRunningInStoreDemoMode;
+ (BOOL)isSiriForiCloudEnabled;
+ (BOOL)isUsingiCloud;
+ (BOOL)perfUpgradeIsEnabled:(unint64_t)a3;
+ (BOOL)shouldHideBanners;
+ (BOOL)shouldShowFakeContentForPerformanceTesting;
+ (BOOL)shouldShowReachabilityErrors;
+ (BOOL)shouldSuppressAllErrorsForDemo;
+ (BOOL)shouldUseControlCenterMaterials;
+ (BOOL)shouldUseLegacyQuickControlPresentation;
+ (BOOL)shouldUseProxHandOffMaterials;
+ (BOOL)showEducationTip;
+ (BOOL)supportsAccessorySetup;
+ (BOOL)supportsAnalytics;
+ (BOOL)supportsBeingCurrentLocationDevice;
+ (BOOL)supportsEditView;
+ (BOOL)supportsMediaPicker;
+ (BOOL)supportsThreadService;
+ (BOOL)useDefaultAccentColor;
+ (BOOL)useMacIdiom;
+ (BOOL)useWLANInsteadOfWiFi;
+ (BOOL)wallpaperTransition;
+ (id)OAuthURLOverride;
+ (id)applicationSupportDirectoryURL;
+ (id)cachesDirectoryURL;
+ (id)comparatorWithSortedClasses:(id)a3 secondaryComparator:(id)a4;
+ (id)comparatorWithSortedObjects:(id)a3;
+ (id)demoModeDirectoryURL;
+ (id)deviceAirDropIdentifier;
+ (id)documentsDirectoryURL;
+ (id)itemIdentifierForAccessories:(id)a3;
+ (id)libraryDirectoryURL;
+ (id)narrowNoBreakSpaceString;
+ (id)networkSSID;
+ (id)preferredNameFromUserID:(id)a3;
+ (id)sanitizeAutoGeneratedHomeKitName:(id)a3;
+ (id)sanitizeUserEnteredHomeKitName:(id)a3;
+ (id)sharedAnnouncementsDirectoryURL;
+ (id)sharedApplicationSupportDirectoryURL;
+ (id)sharedLibraryDirectoryURL;
+ (id)sharedUserDirectoryURL;
+ (id)sortedLockAccessoryArrayForSetup:(id)a3;
+ (id)uniqueHomeKitNameForName:(id)a3 allNames:(id)a4;
+ (id)utilityLookupOverride;
+ (id)utilityOverride;
+ (id)voiceInfoFromSettingLanguageValue:(id)a3;
+ (id)wallpaperURL;
+ (int64_t)gridCellTitleLabelMaxLineCount;
+ (int64_t)outputGenderFromString:(id)a3;
+ (unint64_t)enabledPerformanceUpgrades;
+ (void)setShowEducationTip:(BOOL)a3;
+ (void)updateSiriForiCloudEnabled:(BOOL)a3 completionHandler:(id)a4;
+ (void)warmUpStaticPreferences;
@end

@implementation HFUtilities

+ (BOOL)isInternalTest
{
  char v8 = 0;
  Class v2 = NSClassFromString(&cfstr_Xctestprobe.isa);
  if (v2)
  {
    Class v3 = v2;
    SEL v4 = NSSelectorFromString(&cfstr_Istesting.isa);
    v5 = [(objc_class *)v3 methodSignatureForSelector:v4];
    v6 = [MEMORY[0x263EFF958] invocationWithMethodSignature:v5];
    [v6 setSelector:v4];
    [v6 invokeWithTarget:v3];
    [v6 getReturnValue:&v8];

    LOBYTE(v2) = v8 != 0;
  }
  return (char)v2;
}

+ (id)comparatorWithSortedObjects:(id)a3
{
  id v3 = a3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 3221225472;
  aBlock[2] = __43__HFUtilities_comparatorWithSortedObjects___block_invoke;
  aBlock[3] = &unk_26408DF60;
  id v9 = v3;
  id v4 = v3;
  v5 = _Block_copy(aBlock);
  v6 = _Block_copy(v5);

  return v6;
}

uint64_t __43__HFUtilities_comparatorWithSortedObjects___block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  v5 = *(void **)(a1 + 32);
  id v6 = a3;
  uint64_t v7 = [v5 indexOfObject:a2];
  uint64_t v8 = [*(id *)(a1 + 32) indexOfObject:v6];

  if (v7 == v8) {
    return 0;
  }
  uint64_t result = -1;
  if (v7 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v7 < v8) {
      uint64_t v10 = -1;
    }
    else {
      uint64_t v10 = 1;
    }
    if (v8 == 0x7FFFFFFFFFFFFFFFLL) {
      return 1;
    }
    else {
      return v10;
    }
  }
  return result;
}

+ (BOOL)hasInternalDiagnostics
{
  if (qword_26AB2EC68 != -1) {
    dispatch_once(&qword_26AB2EC68, &__block_literal_global_52);
  }
  return byte_26AB2EC51;
}

+ (BOOL)isAnIPad
{
  Class v2 = [MEMORY[0x263F1C5C0] currentDevice];
  BOOL v3 = [v2 userInterfaceIdiom] == 1;

  return v3;
}

+ (BOOL)useMacIdiom
{
  Class v2 = [MEMORY[0x263F1C5C0] currentDevice];
  BOOL v3 = [v2 userInterfaceIdiom] == 5;

  return v3;
}

+ (BOOL)isPressDemoModeEnabled
{
  if (qword_26AB2ECA0 != -1) {
    dispatch_once(&qword_26AB2ECA0, &__block_literal_global_95);
  }
  return byte_26AB2EC56;
}

+ (BOOL)isRunningInStoreDemoMode
{
  if (qword_26AB2ECC8 != -1) {
    dispatch_once(&qword_26AB2ECC8, &__block_literal_global_109);
  }
  return byte_26AB2EC59;
}

+ (BOOL)isDetailedSignpostLoggingEnabled
{
  int v2 = [a1 isInternalInstall];
  if (v2)
  {
    if (qword_26AB2EC98 != -1) {
      dispatch_once(&qword_26AB2EC98, &__block_literal_global_93);
    }
    LOBYTE(v2) = byte_26AB2EC55 != 0;
  }
  return v2;
}

+ (BOOL)isInternalInstall
{
  if (qword_26AB2EC60 != -1) {
    dispatch_once(&qword_26AB2EC60, &__block_literal_global_13);
  }
  return _MergedGlobals_215;
}

+ (BOOL)shouldSuppressAllErrorsForDemo
{
  if (qword_26AB2ECB8 != -1) {
    dispatch_once(&qword_26AB2ECB8, &__block_literal_global_102);
  }
  if (byte_26AB2EC57) {
    return 1;
  }
  return [a1 isPressDemoModeEnabled];
}

+ (BOOL)shouldUseControlCenterMaterials
{
  int v2 = +[HFExecutionEnvironment sharedInstance];
  uint64_t v3 = [v2 hostProcess];

  return v3 == 3 || v3 == 100;
}

+ (BOOL)shouldHideBanners
{
  if (qword_26AB2EC90 != -1) {
    dispatch_once(&qword_26AB2EC90, &__block_literal_global_76);
  }
  return byte_26AB2EC54;
}

+ (int64_t)gridCellTitleLabelMaxLineCount
{
  if (qword_26AB2EC88 != -1) {
    dispatch_once(&qword_26AB2EC88, &__block_literal_global_71);
  }
  return qword_26AB2EC80;
}

+ (BOOL)isAVisionPro
{
  return 0;
}

+ (id)wallpaperURL
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if ([a1 isAMac]) {
    [a1 applicationSupportDirectoryURL];
  }
  else {
  uint64_t v3 = [a1 sharedApplicationSupportDirectoryURL];
  }
  id v4 = [v3 URLByAppendingPathComponent:@"com.apple.Home"];
  v5 = [v4 URLByAppendingPathComponent:@"Wallpapers"];
  id v6 = [MEMORY[0x263F08850] defaultManager];
  uint64_t v7 = [v5 path];
  char v8 = [v6 isReadableFileAtPath:v7];

  if ((v8 & 1) == 0)
  {
    id v9 = HFLogForCategory(0x48uLL);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v15 = [v5 path];
      *(_DWORD *)buf = 138412290;
      v19 = v15;
      _os_log_error_impl(&dword_20B986000, v9, OS_LOG_TYPE_ERROR, "Unable to access wallpaper directory at path \"%@\"", buf, 0xCu);
    }
  }
  uint64_t v10 = [v5 path];
  id v17 = 0;
  char v11 = [v6 createDirectoryAtPath:v10 withIntermediateDirectories:1 attributes:0 error:&v17];
  id v12 = v17;

  if ((v11 & 1) == 0)
  {
    v13 = HFLogForCategory(0x48uLL);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v16 = [v5 path];
      *(_DWORD *)buf = 138412290;
      v19 = v16;
      _os_log_error_impl(&dword_20B986000, v13, OS_LOG_TYPE_ERROR, "Unable to create wallpaper directory at path\"%@\"", buf, 0xCu);
    }
  }

  return v5;
}

+ (BOOL)supportsAccessorySetup
{
  return [a1 isAMac] ^ 1;
}

+ (id)sharedApplicationSupportDirectoryURL
{
  int v2 = [a1 sharedLibraryDirectoryURL];
  uint64_t v3 = [v2 URLByAppendingPathComponent:@"Application Support" isDirectory:1];

  if (!v3)
  {
    id v4 = HFLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v6 = 0;
      _os_log_error_impl(&dword_20B986000, v4, OS_LOG_TYPE_ERROR, "Unable to access sharedApplicationSupportDirectoryURL", v6, 2u);
    }
  }
  return v3;
}

+ (id)sharedLibraryDirectoryURL
{
  int v2 = [a1 sharedUserDirectoryURL];
  uint64_t v3 = [v2 URLByAppendingPathComponent:@"Library" isDirectory:1];

  if (!v3)
  {
    id v4 = HFLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v6 = 0;
      _os_log_error_impl(&dword_20B986000, v4, OS_LOG_TYPE_ERROR, "Unable to access sharedLibraryDirectoryURL", v6, 2u);
    }
  }
  return v3;
}

+ (id)sharedUserDirectoryURL
{
  int v2 = [NSURL fileURLWithPath:CPSharedResourcesDirectory() isDirectory:1];
  if (!v2)
  {
    uint64_t v3 = HFLogForCategory(0);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)v5 = 0;
      _os_log_error_impl(&dword_20B986000, v3, OS_LOG_TYPE_ERROR, "Unable to access sharedUserDirectoryURL", v5, 2u);
    }
  }
  return v2;
}

+ (BOOL)isAnIPhone
{
  int v2 = (void *)MGGetStringAnswer();
  char v3 = [v2 isEqualToString:@"iPhone"];

  return v3;
}

uint64_t __39__HFUtilities_isRunningInStoreDemoMode__block_invoke()
{
  uint64_t result = [MEMORY[0x263F1C408] isRunningInStoreDemoMode];
  byte_26AB2EC59 = result;
  return result;
}

+ (void)warmUpStaticPreferences
{
  [a1 enabledPerformanceUpgrades];
  [a1 isInternalInstall];
  [a1 isPressDemoModeEnabled];
  [a1 shouldSuppressAllErrorsForDemo];
  [a1 isRunningInStoreDemoMode];
  [a1 hasInternalDiagnostics];
}

+ (unint64_t)enabledPerformanceUpgrades
{
  if (qword_26AB2ECB0 != -1) {
    dispatch_once(&qword_26AB2ECB0, &__block_literal_global_100);
  }
  return qword_26AB2ECA8;
}

CFIndex __41__HFUtilities_enabledPerformanceUpgrades__block_invoke()
{
  CFIndex result = CFPreferencesGetAppIntegerValue(@"HFEnabledPerfUpgradesKey", @"com.apple.Home", 0);
  qword_26AB2ECA8 = result;
  return result;
}

uint64_t __45__HFUtilities_shouldSuppressAllErrorsForDemo__block_invoke()
{
  uint64_t result = CFPreferencesGetAppBooleanValue(@"HFSuppressAllErrorsForDemoKey", @"com.apple.Home", 0);
  byte_26AB2EC57 = result != 0;
  return result;
}

uint64_t __37__HFUtilities_isPressDemoModeEnabled__block_invoke()
{
  uint64_t result = CFPreferencesGetAppBooleanValue(@"HFEnablePressDemoModeKey", @"com.apple.Home", 0);
  byte_26AB2EC56 = result != 0;
  return result;
}

uint64_t __47__HFUtilities_isDetailedSignpostLoggingEnabled__block_invoke()
{
  uint64_t result = CFPreferencesGetAppBooleanValue(@"HFEnableDetailedSignpostLoggingKey", @"com.apple.Home", 0);
  byte_26AB2EC55 = result != 0;
  return result;
}

uint64_t __32__HFUtilities_shouldHideBanners__block_invoke()
{
  uint64_t result = CFPreferencesGetAppBooleanValue(@"hideBanners", @"com.apple.Home", 0);
  byte_26AB2EC54 = result != 0;
  return result;
}

uint64_t __32__HFUtilities_isInternalInstall__block_invoke()
{
  uint64_t result = MGGetBoolAnswer();
  _MergedGlobals_215 = result;
  if (result)
  {
    uint64_t result = HFForceNonInternalInstallBehavior();
    if (result) {
      _MergedGlobals_215 = 0;
    }
  }
  return result;
}

unint64_t __45__HFUtilities_gridCellTitleLabelMaxLineCount__block_invoke()
{
  unint64_t result = CFPreferencesGetAppIntegerValue(@"gridCellTitleLabelMaxLineCount", @"com.apple.Home", 0);
  if (result <= 1) {
    uint64_t v1 = 1;
  }
  else {
    uint64_t v1 = result;
  }
  if (v1 <= 1) {
    uint64_t v1 = 1;
  }
  qword_26AB2EC80 = v1;
  return result;
}

void __37__HFUtilities_hasInternalDiagnostics__block_invoke()
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  byte_26AB2EC51 = os_variant_has_internal_diagnostics();
  v0 = HFLogForCategory(0);
  if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
  {
    v1[0] = 67109120;
    v1[1] = byte_26AB2EC51;
    _os_log_impl(&dword_20B986000, v0, OS_LOG_TYPE_INFO, "hasInternalDiagnostics: %{BOOL}d", (uint8_t *)v1, 8u);
  }
}

+ (BOOL)shouldShowReachabilityErrors
{
  return [a1 shouldSuppressAllErrorsForDemo] ^ 1;
}

+ (id)comparatorWithSortedClasses:(id)a3 secondaryComparator:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 3221225472;
  v12[2] = __63__HFUtilities_comparatorWithSortedClasses_secondaryComparator___block_invoke;
  v12[3] = &unk_26408DF38;
  id v13 = v5;
  id v14 = v6;
  id v7 = v6;
  id v8 = v5;
  id v9 = _Block_copy(v12);
  uint64_t v10 = _Block_copy(v9);

  return v10;
}

uint64_t __63__HFUtilities_comparatorWithSortedClasses_secondaryComparator___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [*(id *)(a1 + 32) indexOfObject:objc_opt_class()];
  uint64_t v8 = [*(id *)(a1 + 32) indexOfObject:objc_opt_class()];
  if (v7 == v8)
  {
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9) {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, id, id))(v9 + 16))(v9, v5, v6);
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v11 = -1;
    if (v7 < v8) {
      uint64_t v12 = -1;
    }
    else {
      uint64_t v12 = 1;
    }
    if (v8 != 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v11 = v12;
    }
    if (v7 == 0x7FFFFFFFFFFFFFFFLL) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v11;
    }
  }

  return v10;
}

+ (BOOL)useWLANInsteadOfWiFi
{
  return MGGetBoolAnswer();
}

+ (BOOL)isMonitoredInterfaceWifiOrEthernet
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  default_evaluator = (void *)nw_path_create_default_evaluator();
  char v3 = nw_path_evaluator_copy_path();
  BOOL v4 = nw_path_uses_interface_type(v3, nw_interface_type_wifi);
  BOOL v5 = nw_path_uses_interface_type(v3, nw_interface_type_wired);
  id v6 = HFLogForCategory(0);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315650;
    uint64_t v9 = "+[HFUtilities isMonitoredInterfaceWifiOrEthernet]";
    __int16 v10 = 1024;
    BOOL v11 = v4;
    __int16 v12 = 1024;
    BOOL v13 = v5;
    _os_log_impl(&dword_20B986000, v6, OS_LOG_TYPE_DEFAULT, "%s, isConnectedOverWiFi: %d, isConnectedOverEthernet: %d", (uint8_t *)&v8, 0x18u);
  }

  return v4 || v5;
}

+ (BOOL)invertCellTaps
{
  if (qword_26AB2EC70 != -1) {
    dispatch_once(&qword_26AB2EC70, &__block_literal_global_64);
  }
  return byte_26AB2EC52;
}

uint64_t __29__HFUtilities_invertCellTaps__block_invoke()
{
  uint64_t result = CFPreferencesGetAppBooleanValue(@"invertCellTaps", @"com.apple.Home", 0);
  byte_26AB2EC52 = result != 0;
  return result;
}

+ (BOOL)wallpaperTransition
{
  if (qword_26AB2EC78 != -1) {
    dispatch_once(&qword_26AB2EC78, &__block_literal_global_69);
  }
  return byte_26AB2EC53;
}

uint64_t __34__HFUtilities_wallpaperTransition__block_invoke()
{
  uint64_t result = CFPreferencesGetAppBooleanValue(@"wallpaperTransition", @"com.apple.Home", 0);
  byte_26AB2EC53 = result != 0;
  return result;
}

+ (BOOL)shouldUseLegacyQuickControlPresentation
{
  return +[HFExecutionEnvironment isSpringBoard]
      && !_os_feature_enabled_impl();
}

+ (BOOL)useDefaultAccentColor
{
  return +[HFUtilities isAMac] && (_os_feature_enabled_impl() & 1) != 0;
}

+ (BOOL)supportsMediaPicker
{
  return [a1 isAMac] ^ 1;
}

+ (BOOL)supportsAnalytics
{
  return [a1 isAMac] ^ 1;
}

+ (BOOL)supportsEditView
{
  return [a1 isAMac] ^ 1;
}

+ (BOOL)supportsThreadService
{
  if ((_os_feature_enabled_impl() & 1) != 0
    || (int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"MatteriPhoneOnlyPairingEnabled", @"/Library/Managed Preferences/mobile/com.apple.homed.plist", 0)) != 0)
  {
    LOBYTE(AppBooleanValue) = MGGetBoolAnswer();
  }
  return AppBooleanValue;
}

+ (BOOL)supportsBeingCurrentLocationDevice
{
  return [a1 isAMac] ^ 1;
}

+ (BOOL)perfUpgradeIsEnabled:(unint64_t)a3
{
  return ([a1 enabledPerformanceUpgrades] & a3) != 0;
}

+ (BOOL)shouldShowFakeContentForPerformanceTesting
{
  int v2 = [a1 isInternalInstall];
  if (v2)
  {
    if (qword_26AB2ECC0 != -1) {
      dispatch_once(&qword_26AB2ECC0, &__block_literal_global_107);
    }
    LOBYTE(v2) = byte_26AB2EC58 != 0;
  }
  return v2;
}

uint64_t __57__HFUtilities_shouldShowFakeContentForPerformanceTesting__block_invoke()
{
  uint64_t result = CFPreferencesGetAppBooleanValue(@"HFEnableShowFakeContentForPerformanceKey", @"com.apple.Home", 0);
  byte_26AB2EC58 = result != 0;
  return result;
}

+ (BOOL)isHostProcessHCSTestApp
{
  int v2 = +[HFExecutionEnvironment sharedInstance];
  BOOL v3 = [v2 hostProcess] == 103;

  return v3;
}

+ (BOOL)isHostProcessProxControl
{
  int v2 = +[HFExecutionEnvironment sharedInstance];
  BOOL v3 = [v2 hostProcess] == 104;

  return v3;
}

+ (BOOL)isHostProcessProxViewService
{
  int v2 = +[HFExecutionEnvironment sharedInstance];
  BOOL v3 = [v2 hostProcess] == 105;

  return v3;
}

+ (BOOL)isProxHandOffV2Config
{
  if (([a1 isHostProcessProxControl] & 1) != 0
    || ([a1 isHostProcessProxViewService] & 1) != 0)
  {
    return 1;
  }
  return [a1 isHostProcessHCSTestApp];
}

+ (BOOL)shouldUseProxHandOffMaterials
{
  if ([a1 isHostProcessProxControl]) {
    return 1;
  }
  return [a1 isHostProcessHCSTestApp];
}

+ (BOOL)isInAirplaneMode
{
  return MGGetBoolAnswer();
}

+ (BOOL)isCloudPhotosOn
{
  id v2 = objc_alloc_init(MEMORY[0x263EFB210]);
  BOOL v3 = objc_msgSend(v2, "aa_primaryAppleAccount");
  char v4 = [v3 isEnabledForDataclass:*MEMORY[0x263EFAC58]];

  return v4;
}

+ (BOOL)isUsingiCloud
{
  id v2 = +[HFMediaDispatcher sharedDispatcher];
  char v3 = [v2 isUsingiCloud];

  return v3;
}

+ (BOOL)isSiriForiCloudEnabled
{
  id v2 = (void *)MEMORY[0x21053EE50](a1, a2);
  id v3 = objc_alloc_init(MEMORY[0x263EFB210]);
  char v4 = objc_msgSend(v3, "aa_primaryAppleAccount");
  char v5 = [v4 isEnabledForDataclass:*MEMORY[0x263EFB4A8]];

  return v5;
}

+ (void)updateSiriForiCloudEnabled:(BOOL)a3 completionHandler:(id)a4
{
  BOOL v4 = a3;
  uint64_t v25 = *MEMORY[0x263EF8340];
  id v5 = a4;
  id v6 = +[HFMediaDispatcher sharedDispatcher];
  char v7 = [v6 isUsingiCloud];

  if (v7)
  {
    int v8 = (void *)MEMORY[0x21053EE50]();
    id v9 = objc_alloc_init(MEMORY[0x263EFB210]);
    __int16 v10 = objc_msgSend(v9, "aa_primaryAppleAccount");
    BOOL v11 = v10;
    if (v10)
    {
      if (!v4 || ([v10 isProvisionedForDataclass:*MEMORY[0x263EFB420]] & 1) != 0)
      {
        __int16 v12 = HFLogForCategory(0);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v13 = @"disabled";
          if (v4) {
            BOOL v13 = @"enabled";
          }
          *(_DWORD *)buf = 138412290;
          v24 = v13;
          _os_log_impl(&dword_20B986000, v12, OS_LOG_TYPE_DEFAULT, "Updating Siri iCloud setting to %@", buf, 0xCu);
        }

        [v11 setEnabled:v4 forDataclass:*MEMORY[0x263EFB4A8]];
        v20[0] = MEMORY[0x263EF8330];
        v20[1] = 3221225472;
        v20[2] = __60__HFUtilities_updateSiriForiCloudEnabled_completionHandler___block_invoke;
        v20[3] = &unk_26408DFB0;
        BOOL v22 = v4;
        id v21 = v5;
        [v9 saveVerifiedAccount:v11 withCompletionHandler:v20];
        uint64_t v14 = v21;
        goto LABEL_21;
      }
      v19 = HFLogForCategory(0);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_20B986000, v19, OS_LOG_TYPE_ERROR, "Unable to enable Siri iCloud switch for account. Account currently unprovisioned for data class Siri", buf, 2u);
      }

      if (!v5) {
        goto LABEL_22;
      }
      id v17 = (void *)MEMORY[0x263F087E8];
      uint64_t v18 = 97;
    }
    else
    {
      v16 = HFLogForCategory(0);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl(&dword_20B986000, v16, OS_LOG_TYPE_ERROR, "Failed to update Siri iCloud setting, there is no primary account", buf, 2u);
      }

      if (!v5) {
        goto LABEL_22;
      }
      id v17 = (void *)MEMORY[0x263F087E8];
      uint64_t v18 = 30;
    }
    uint64_t v14 = objc_msgSend(v17, "hf_errorWithCode:", v18);
    (*((void (**)(id, void *))v5 + 2))(v5, v14);
LABEL_21:

LABEL_22:
    goto LABEL_23;
  }
  if (v5)
  {
    v15 = objc_msgSend(MEMORY[0x263F087E8], "hf_errorWithCode:", 79);
    (*((void (**)(id, void *))v5 + 2))(v5, v15);
  }
LABEL_23:
}

void __60__HFUtilities_updateSiriForiCloudEnabled_completionHandler___block_invoke(uint64_t a1, int a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  id v5 = a3;
  id v6 = HFLogForCategory(0);
  char v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 40)) {
        int v8 = @"enabled";
      }
      else {
        int v8 = @"disabled";
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v14 = v8;
      _os_log_impl(&dword_20B986000, v7, OS_LOG_TYPE_DEFAULT, "Saved account setting change for Siri iCloud setting, new value: %@", buf, 0xCu);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v14 = v5;
    _os_log_error_impl(&dword_20B986000, v7, OS_LOG_TYPE_ERROR, "Failed to save iCloud setting with error: %@", buf, 0xCu);
  }

  id v9 = *(void **)(a1 + 32);
  if (v9)
  {
    v10[0] = MEMORY[0x263EF8330];
    v10[1] = 3221225472;
    v10[2] = __60__HFUtilities_updateSiriForiCloudEnabled_completionHandler___block_invoke_123;
    v10[3] = &unk_26408DF88;
    id v12 = v9;
    BOOL v11 = v5;
    dispatch_async(MEMORY[0x263EF83A0], v10);
  }
}

uint64_t __60__HFUtilities_updateSiriForiCloudEnabled_completionHandler___block_invoke_123(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

+ (BOOL)isCurrentAccount2FAEnabled
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  id v2 = objc_alloc_init(MEMORY[0x263EFB210]);
  id v3 = objc_msgSend(v2, "aa_primaryAppleAccount");
  BOOL v4 = [MEMORY[0x263F290F0] sharedInstance];
  id v5 = objc_msgSend(v3, "aa_altDSID");
  id v6 = [v4 authKitAccountWithAltDSID:v5];

  if (v3)
  {
    unint64_t v7 = [v4 securityLevelForAccount:v6];
    int v8 = HFLogForCategory(0);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 134217984;
      unint64_t v13 = v7;
      _os_log_impl(&dword_20B986000, v8, OS_LOG_TYPE_DEFAULT, "primary iCloud account level: %lu", (uint8_t *)&v12, 0xCu);
    }

    BOOL v9 = v7 > 2;
  }
  else
  {
    __int16 v10 = HFLogForCategory(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v12) = 0;
      _os_log_error_impl(&dword_20B986000, v10, OS_LOG_TYPE_ERROR, "Failed to find a primary iCloud account, there is no primary account", (uint8_t *)&v12, 2u);
    }

    BOOL v9 = 0;
  }

  return v9;
}

+ (id)deviceAirDropIdentifier
{
  id v2 = (void *)CFPreferencesCopyValue(@"AirDropID", @"com.apple.sharingd", (CFStringRef)*MEMORY[0x263EFFE70], (CFStringRef)*MEMORY[0x263EFFE50]);
  return v2;
}

+ (id)sanitizeAutoGeneratedHomeKitName:(id)a3
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v3 = (__CFString *)a3;
  BOOL v4 = [MEMORY[0x263F089C0] alphanumericCharacterSet];
  unint64_t v5 = [(__CFString *)v3 rangeOfCharacterFromSet:v4 options:129];
  if (v5 >= [(__CFString *)v3 length])
  {
    v16 = HFLogForCategory(0);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      int v18 = 136315394;
      v19 = "+[HFUtilities sanitizeAutoGeneratedHomeKitName:]";
      __int16 v20 = 2112;
      id v21 = v3;
      _os_log_impl(&dword_20B986000, v16, OS_LOG_TYPE_INFO, "%s attempted to sanitize a name consisting exlusively of invalid characters: %@, returning an empty string", (uint8_t *)&v18, 0x16u);
    }

    uint64_t v15 = &stru_26C081158;
    uint64_t v14 = v3;
  }
  else
  {
    id v6 = [(__CFString *)v3 substringFromIndex:v5];

    [v4 addCharactersInString:@"."];
    unint64_t v7 = [v4 invertedSet];
    int v8 = [v6 stringByTrimmingCharactersInSet:v7];

    BOOL v9 = [MEMORY[0x263F08708] whitespaceCharacterSet];
    [v4 formUnionWithCharacterSet:v9];

    [v4 addCharactersInString:@"’',-&#"];
    __int16 v10 = [v4 invertedSet];
    BOOL v11 = [v8 componentsSeparatedByCharactersInSet:v10];
    int v12 = objc_msgSend(v11, "na_map:", &__block_literal_global_145);
    unint64_t v13 = [v12 componentsJoinedByString:@" "];

    uint64_t v14 = v13;
    uint64_t v15 = v14;
  }

  return v15;
}

id __48__HFUtilities_sanitizeAutoGeneratedHomeKitName___block_invoke(uint64_t a1, void *a2)
{
  id v2 = (void *)MEMORY[0x263F08708];
  id v3 = a2;
  BOOL v4 = [v2 whitespaceCharacterSet];
  unint64_t v5 = [v3 stringByTrimmingCharactersInSet:v4];

  if ([v5 length]) {
    id v6 = v5;
  }
  else {
    id v6 = 0;
  }
  id v7 = v6;

  return v7;
}

+ (id)sanitizeUserEnteredHomeKitName:(id)a3
{
  id v3 = (void *)MEMORY[0x263F08708];
  id v4 = a3;
  unint64_t v5 = [v3 whitespaceAndNewlineCharacterSet];
  id v6 = [v4 stringByTrimmingCharactersInSet:v5];

  return v6;
}

+ (id)uniqueHomeKitNameForName:(id)a3 allNames:(id)a4
{
  id v5 = a3;
  id v6 = objc_msgSend(a4, "na_map:", &__block_literal_global_150);
  id v7 = v5;
  int v8 = [v7 lowercaseString];
  int v9 = [v6 containsObject:v8];

  v16 = v7;
  if (v9)
  {
    uint64_t v17 = 2;
    int v18 = v7;
    do
    {
      v16 = HFLocalizedStringWithFormat(@"HFUniqueNameFormat", @"%@ %ld", v10, v11, v12, v13, v14, v15, (uint64_t)v7);

      ++v17;
      v19 = [v16 lowercaseString];
      char v20 = [v6 containsObject:v19];

      int v18 = v16;
    }
    while ((v20 & 1) != 0);
  }

  return v16;
}

uint64_t __49__HFUtilities_uniqueHomeKitNameForName_allNames___block_invoke(uint64_t a1, void *a2)
{
  return [a2 lowercaseString];
}

+ (id)libraryDirectoryURL
{
  id v2 = [MEMORY[0x263F08850] defaultManager];
  id v3 = [v2 URLsForDirectory:5 inDomains:1];
  if (![v3 count])
  {
    id v4 = HFLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v7 = 0;
      _os_log_error_impl(&dword_20B986000, v4, OS_LOG_TYPE_ERROR, "Unable to access libraryDirectoryURL", v7, 2u);
    }
  }
  id v5 = [v3 firstObject];

  return v5;
}

+ (id)applicationSupportDirectoryURL
{
  id v2 = [MEMORY[0x263F08850] defaultManager];
  id v3 = [v2 URLsForDirectory:14 inDomains:1];
  if (![v3 count])
  {
    id v4 = HFLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v7 = 0;
      _os_log_error_impl(&dword_20B986000, v4, OS_LOG_TYPE_ERROR, "Unable to access applicationSupportDirectoryURL", v7, 2u);
    }
  }
  id v5 = [v3 firstObject];

  return v5;
}

+ (id)cachesDirectoryURL
{
  id v2 = [MEMORY[0x263F08850] defaultManager];
  id v3 = [v2 URLsForDirectory:13 inDomains:1];
  if (![v3 count])
  {
    id v4 = HFLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v7 = 0;
      _os_log_error_impl(&dword_20B986000, v4, OS_LOG_TYPE_ERROR, "Unable to access cachesDirectoryURL", v7, 2u);
    }
  }
  id v5 = [v3 firstObject];

  return v5;
}

+ (id)documentsDirectoryURL
{
  id v2 = [MEMORY[0x263F08850] defaultManager];
  id v3 = [v2 URLsForDirectory:9 inDomains:1];

  if (![v3 count])
  {
    id v4 = HFLogForCategory(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v7 = 0;
      _os_log_error_impl(&dword_20B986000, v4, OS_LOG_TYPE_ERROR, "Unable to access documentsDirectoryURL", v7, 2u);
    }
  }
  id v5 = [v3 firstObject];

  return v5;
}

+ (id)sharedAnnouncementsDirectoryURL
{
  id v2 = [a1 sharedLibraryDirectoryURL];
  id v3 = [v2 URLByAppendingPathComponent:@"Caches" isDirectory:1];

  id v4 = [v3 URLByAppendingPathComponent:@"com.apple.announce"];

  if (!v4)
  {
    id v5 = HFLogForCategory(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)id v7 = 0;
      _os_log_error_impl(&dword_20B986000, v5, OS_LOG_TYPE_ERROR, "Unable to access sharedCachesDirectoryURL", v7, 2u);
    }
  }
  return v4;
}

+ (id)demoModeDirectoryURL
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  id v2 = [a1 sharedApplicationSupportDirectoryURL];
  id v3 = [v2 URLByAppendingPathComponent:@"com.apple.Home"];

  id v4 = [v3 URLByAppendingPathComponent:@"demoMode"];
  id v5 = [MEMORY[0x263F08850] defaultManager];
  id v6 = [v4 path];
  char v7 = [v5 fileExistsAtPath:v6];

  if (v7)
  {
    id v8 = 0;
  }
  else
  {
    int v9 = [v4 path];
    id v14 = 0;
    char v10 = [v5 createDirectoryAtPath:v9 withIntermediateDirectories:1 attributes:0 error:&v14];
    id v8 = v14;

    if ((v10 & 1) == 0)
    {
      uint64_t v11 = HFLogForCategory(0x21uLL);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        uint64_t v13 = [v4 path];
        *(_DWORD *)buf = 138412290;
        v16 = v13;
        _os_log_error_impl(&dword_20B986000, v11, OS_LOG_TYPE_ERROR, "Unable to create demoMode directory at %@", buf, 0xCu);
      }
    }
  }

  return v4;
}

+ (BOOL)isDeviceUnlocked
{
  int v2 = MKBGetDeviceLockState();
  return !v2 || v2 == 3;
}

+ (id)preferredNameFromUserID:(id)a3
{
  v13[4] = *MEMORY[0x263EF8340];
  id v3 = a3;
  uint64_t v4 = *MEMORY[0x263EFDFC8];
  v13[0] = *MEMORY[0x263EFE050];
  v13[1] = v4;
  v13[2] = *MEMORY[0x263EFDFB8];
  id v5 = [MEMORY[0x263EFEA20] descriptorForRequiredKeysForStyle:0];
  v13[3] = v5;
  id v6 = [MEMORY[0x263EFF8C0] arrayWithObjects:v13 count:4];

  if (objc_msgSend(v3, "hf_isEmail"))
  {
    char v7 = +[HFContactStore defaultStore];
    uint64_t v8 = [v7 contactForEmailAddress:v3 withKeys:v6];
  }
  else
  {
    if (!objc_msgSend(v3, "hf_isPhoneNumber"))
    {
LABEL_9:
      id v11 = v3;
      goto LABEL_10;
    }
    char v7 = +[HFContactStore defaultStore];
    uint64_t v8 = [v7 contactForPhoneNumber:v3 withKeys:v6];
  }
  int v9 = (void *)v8;

  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = [MEMORY[0x263EFEA20] stringFromContact:v9 style:1000];
  if (!v10)
  {
    uint64_t v10 = [v9 givenName];
  }
  id v11 = (id)v10;

LABEL_10:
  return v11;
}

+ (id)voiceInfoFromSettingLanguageValue:(id)a3
{
  id v4 = a3;
  id v5 = [v4 outputVoiceGenderCode];
  uint64_t v6 = [a1 outputGenderFromString:v5];

  char v7 = [v4 voiceName];
  uint64_t v8 = v7;
  if (v7)
  {
    id v9 = v7;
  }
  else
  {
    uint64_t v10 = [MEMORY[0x263F28530] sharedInstance];
    id v11 = [v4 outputVoiceLanguageCode];
    uint64_t v12 = [v10 voiceNamesForOutputLanguageCode:v11 gender:v6];
    id v9 = [v12 firstObject];
  }
  id v13 = objc_alloc(MEMORY[0x263F286E0]);
  id v14 = [v4 outputVoiceLanguageCode];
  uint64_t v15 = (void *)[v13 initWithLanguageCode:v14 gender:v6 isCustom:0 name:v9 footprint:0 contentVersion:0 masteredVersion:0];

  return v15;
}

+ (int64_t)outputGenderFromString:(id)a3
{
  id v3 = a3;
  if ([v3 isEqualToString:@"m"])
  {
    int64_t v4 = 1;
  }
  else if ([v3 isEqualToString:@"f"])
  {
    int64_t v4 = 2;
  }
  else if ([v3 isEqualToString:@"n"])
  {
    int64_t v4 = 3;
  }
  else
  {
    if (([v3 isEqualToString:@"?"] & 1) == 0) {
      NSLog(&cfstr_UnknownGenderO.isa, v3);
    }
    int64_t v4 = 0;
  }

  return v4;
}

+ (id)networkSSID
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v2 = (void *)[objc_alloc(MEMORY[0x263F386E0]) initWithServiceType:3];
  [v2 resume];
  id v3 = [v2 networkName];
  int64_t v4 = v3;
  if (!v2 || ![v3 length])
  {
    id v5 = HFLogForCategory(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      char v7 = [v2 networkName];
      int v8 = 138412546;
      id v9 = v2;
      __int16 v10 = 2112;
      id v11 = v7;
      _os_log_error_impl(&dword_20B986000, v5, OS_LOG_TYPE_ERROR, "Can't find WiFi network SSID name: interface = %@, name = %@", (uint8_t *)&v8, 0x16u);
    }
  }
  [v2 invalidate];

  return v4;
}

+ (id)itemIdentifierForAccessories:(id)a3
{
  id v3 = [a3 allObjects];
  int64_t v4 = [v3 sortedArrayUsingComparator:&__block_literal_global_200];
  id v5 = [v4 firstObject];
  uint64_t v6 = [v5 uniqueIdentifier];

  return v6;
}

uint64_t __44__HFUtilities_itemIdentifierForAccessories___block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  id v5 = [a2 uniqueIdentifier];
  uint64_t v6 = [v4 uniqueIdentifier];

  uint64_t v7 = [v5 compare:v6];
  return v7;
}

+ (id)narrowNoBreakSpaceString
{
  if (qword_26AB2ECD8 != -1) {
    dispatch_once(&qword_26AB2ECD8, &__block_literal_global_202);
  }
  int v2 = (void *)qword_26AB2ECD0;
  return v2;
}

uint64_t __39__HFUtilities_narrowNoBreakSpaceString__block_invoke()
{
  uint64_t v0 = [NSString stringWithCharacters:&narrowNoBreakSpaceString_narrowNoBreakSpaceUnichar length:1];
  uint64_t v1 = qword_26AB2ECD0;
  qword_26AB2ECD0 = v0;
  return MEMORY[0x270F9A758](v0, v1);
}

+ (BOOL)showEducationTip
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v2 = [MEMORY[0x263EFFA40] standardUserDefaults];
  id v3 = [v2 objectForKey:@"showEnergyEducationTip"];

  if (v3) {
    int v4 = [v2 BOOLForKey:@"showEnergyEducationTip"];
  }
  else {
    int v4 = 1;
  }
  id v5 = HFLogForCategory(0x24uLL);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315394;
    int v8 = "+[HFUtilities showEducationTip]";
    __int16 v9 = 1024;
    int v10 = v4;
    _os_log_impl(&dword_20B986000, v5, OS_LOG_TYPE_DEFAULT, "%s Show education tip? --> %{BOOL}d", (uint8_t *)&v7, 0x12u);
  }

  return v4;
}

+ (void)setShowEducationTip:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v4 = [MEMORY[0x263EFFA40] standardUserDefaults];
  id v5 = v4;
  if (v4)
  {
    [v4 setBool:v3 forKey:@"showEnergyEducationTip"];
  }
  else
  {
    uint64_t v6 = HFLogForCategory(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      int v8 = "+[HFUtilities setShowEducationTip:]";
      _os_log_error_impl(&dword_20B986000, v6, OS_LOG_TYPE_ERROR, "%s Failed to fetch shared app suite user defaults!", (uint8_t *)&v7, 0xCu);
    }
  }
}

+ (BOOL)forceTestUtilityMode
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  if ([a1 isInternalInstall])
  {
    int v2 = [MEMORY[0x263EFFA40] standardUserDefaults];
    BOOL v3 = [v2 objectForKey:@"forceShowQAUtility1"];

    if (v3) {
      int v4 = [v2 BOOLForKey:@"forceShowQAUtility1"];
    }
    else {
      int v4 = 0;
    }
    id v5 = HFLogForCategory(0x24uLL);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      int v8 = "+[HFUtilities forceTestUtilityMode]";
      __int16 v9 = 1024;
      int v10 = v4;
      _os_log_impl(&dword_20B986000, v5, OS_LOG_TYPE_DEFAULT, "%s Force Utility to QAUtility1 --> %{BOOL}d", (uint8_t *)&v7, 0x12u);
    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return v4;
}

+ (id)utilityOverride
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if ([a1 isInternalInstall])
  {
    int v2 = [MEMORY[0x263EFFA40] standardUserDefaults];
    BOOL v3 = [v2 dictionaryForKey:@"utilityOverride"];
    int v4 = HFLogForCategory(0x22uLL);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      int v7 = "+[HFUtilities utilityOverride]";
      __int16 v8 = 2112;
      __int16 v9 = v3;
      _os_log_impl(&dword_20B986000, v4, OS_LOG_TYPE_DEFAULT, "%s Override Utility --> %@", (uint8_t *)&v6, 0x16u);
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  return v3;
}

+ (id)utilityLookupOverride
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if ([a1 isInternalInstall])
  {
    int v2 = [MEMORY[0x263EFFA40] standardUserDefaults];
    BOOL v3 = [v2 dictionaryForKey:@"utilityLookupOverride"];
    int v4 = HFLogForCategory(0x22uLL);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 136315394;
      int v7 = "+[HFUtilities utilityLookupOverride]";
      __int16 v8 = 2112;
      __int16 v9 = v3;
      _os_log_impl(&dword_20B986000, v4, OS_LOG_TYPE_DEFAULT, "%s Override Utility Lookup --> %@", (uint8_t *)&v6, 0x16u);
    }
  }
  else
  {
    BOOL v3 = 0;
  }
  return v3;
}

+ (id)OAuthURLOverride
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if ([a1 isInternalInstall])
  {
    int v2 = [MEMORY[0x263EFFA40] standardUserDefaults];
    BOOL v3 = [v2 objectForKey:@"OAuthURLOverride"];

    if (v3)
    {
      int v4 = NSURL;
      id v5 = [v2 stringForKey:@"OAuthURLOverride"];
      int v6 = [v4 URLWithString:v5];
    }
    else
    {
      int v6 = 0;
    }
    int v7 = HFLogForCategory(0x22uLL);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = "+[HFUtilities OAuthURLOverride]";
      __int16 v11 = 2112;
      uint64_t v12 = v6;
      _os_log_impl(&dword_20B986000, v7, OS_LOG_TYPE_DEFAULT, "%s OAuthURL --> %@", (uint8_t *)&v9, 0x16u);
    }
  }
  else
  {
    int v6 = 0;
  }
  return v6;
}

+ (id)sortedLockAccessoryArrayForSetup:(id)a3
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  id v3 = a3;
  int v4 = HFLogForCategory(0x43uLL);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 136315394;
    uint64_t v15 = "+[HFUtilities sortedLockAccessoryArrayForSetup:]";
    __int16 v16 = 2112;
    id v17 = v3;
    _os_log_impl(&dword_20B986000, v4, OS_LOG_TYPE_DEFAULT, "(%s) accessories = %@", (uint8_t *)&v14, 0x16u);
  }

  id v5 = (void *)[MEMORY[0x263EFFA68] mutableCopy];
  if (_os_feature_enabled_impl())
  {
    int v6 = (void *)[objc_alloc(MEMORY[0x263F08B30]) initWithKey:@"supportsUWBUnlock" ascending:0];
    [v5 addObject:v6];
  }
  int v7 = (void *)[objc_alloc(MEMORY[0x263F08B30]) initWithKey:@"supportsWalletKey" ascending:0];
  [v5 addObject:v7];

  __int16 v8 = (void *)[objc_alloc(MEMORY[0x263F08B30]) initWithKey:@"supportsAccessCodes" ascending:0];
  [v5 addObject:v8];

  int v9 = [v3 allObjects];
  uint64_t v10 = objc_msgSend(v9, "na_filter:", &__block_literal_global_219);

  __int16 v11 = [v10 sortedArrayUsingDescriptors:v5];
  uint64_t v12 = HFLogForCategory(0x43uLL);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 136315394;
    uint64_t v15 = "+[HFUtilities sortedLockAccessoryArrayForSetup:]";
    __int16 v16 = 2112;
    id v17 = v11;
    _os_log_impl(&dword_20B986000, v12, OS_LOG_TYPE_DEFAULT, "(%s) uint64_t result = %@", (uint8_t *)&v14, 0x16u);
  }

  return v11;
}

uint64_t __48__HFUtilities_sortedLockAccessoryArrayForSetup___block_invoke(uint64_t a1, void *a2)
{
  int v2 = [a2 category];
  id v3 = [v2 categoryType];
  uint64_t v4 = [v3 isEqualToString:*MEMORY[0x263F0B058]];

  return v4;
}

@end