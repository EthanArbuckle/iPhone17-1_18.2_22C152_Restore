uint64_t static MatchedMedName.supportsSecureCoding.getter()
{
  return 1;
}

id MatchedMedName.__allocating_init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v20 = objc_allocWithZone(v6);
  if (a2)
  {
    uint64_t v12 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    v13 = (void *)v12;
  }
  else
  {
    v13 = 0;
  }
  id v11 = (id)MEMORY[0x2611C8860](a3, a4);
  if (a6)
  {
    uint64_t v9 = MEMORY[0x2611C8860](a5);
    swift_bridgeObjectRelease();
    v10 = (void *)v9;
  }
  else
  {
    v10 = 0;
  }
  id v8 = objc_msgSend(v20, sel_initWithIdentifier_displayString_pronunciationHint_, v13, v11);

  swift_bridgeObjectRelease();
  return v8;
}

id MatchedMedName.init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v27 = 0;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  swift_bridgeObjectRetain();
  if (a2)
  {
    uint64_t v12 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    v13 = (void *)v12;
  }
  else
  {
    v13 = 0;
  }
  swift_bridgeObjectRetain();
  id v11 = (id)MEMORY[0x2611C8860](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a6)
  {
    uint64_t v9 = MEMORY[0x2611C8860](a5);
    swift_bridgeObjectRelease();
    v10 = (void *)v9;
  }
  else
  {
    v10 = 0;
  }
  v20.receiver = 0;
  v20.super_class = (Class)type metadata accessor for MatchedMedName();
  id v8 = objc_msgSendSuper2(&v20, sel_initWithIdentifier_displayString_pronunciationHint_, v13, v11, v10);

  id v6 = v8;
  id v27 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v8;
}

uint64_t type metadata accessor for MatchedMedName()
{
  return self;
}

id MatchedMedName.__allocating_init(coder:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id MatchedMedName.init(coder:)(void *a1)
{
  id v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for MatchedMedName();
  id v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    id v1 = v5;
    id v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id MatchedMedName.__deallocating_deinit()
{
  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MatchedMedName();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static MatchedMedNameResolutionResult.success(with:)(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v6 = v1;
  v5.receiver = (id)swift_getObjCClassFromMetadata();
  v5.super_class = (Class)&OBJC_METACLASS___MatchedMedNameResolutionResult;
  id v2 = objc_msgSendSuper2(&v5, sel_successWithResolvedObject_, a1);
  return v2;
}

id static MatchedMedNameResolutionResult.disambiguation(with:)(uint64_t a1)
{
  uint64_t v8 = a1;
  uint64_t v7 = v1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  swift_bridgeObjectRetain();
  type metadata accessor for MatchedMedName();
  type metadata accessor for INObject();
  _arrayForceCast<A, B>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6.receiver = ObjCClassFromMetadata;
  v6.super_class = (Class)&OBJC_METACLASS___MatchedMedNameResolutionResult;
  id v5 = objc_msgSendSuper2(&v6, sel_disambiguationWithObjectsToDisambiguate_, isa);

  return v5;
}

unint64_t type metadata accessor for INObject()
{
  uint64_t v2 = lazy cache variable for type metadata for INObject;
  if (!lazy cache variable for type metadata for INObject)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for INObject);
    return ObjCClassMetadata;
  }
  return v2;
}

id static MatchedMedNameResolutionResult.confirmationRequired(with:)(void *a1)
{
  id v11 = a1;
  uint64_t v10 = v1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v2 = a1;
  if (a1) {
    objc_super v6 = a1;
  }
  else {
    objc_super v6 = 0;
  }
  v9.receiver = ObjCClassFromMetadata;
  v9.super_class = (Class)&OBJC_METACLASS___MatchedMedNameResolutionResult;
  id v5 = objc_msgSendSuper2(&v9, sel_confirmationRequiredWithObjectToConfirm_, v6);

  return v5;
}

void static MatchedMedNameResolutionResult.success(with:)()
{
}

id sub_25DE03478(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return a1;
}

void static MatchedMedNameResolutionResult.disambiguation(with:)()
{
}

id sub_25DE03584(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  swift_bridgeObjectRelease();

  return a1;
}

void static MatchedMedNameResolutionResult.confirmationRequired(with:)()
{
}

id sub_25DE0367C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return a1;
}

id MatchedMedNameResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v7 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_);

  swift_bridgeObjectRelease();
  return v7;
}

id MatchedMedNameResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v11 = 0;
  uint64_t v10 = a1;
  objc_super v9 = a2;
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = 0;
  v8.super_class = (Class)type metadata accessor for MatchedMedNameResolutionResult();
  id v7 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  if (v7)
  {
    id v2 = v7;
    id v11 = v7;

    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id MatchedMedNameResolutionResult.__deallocating_deinit()
{
  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MatchedMedNameResolutionResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t variable initialization expression of LogQuantityIntentResponse.code()
{
  return 0;
}

unint64_t variable initialization expression of HealthKitPersistor.store()
{
  return (unint64_t)NSDateFormatter.__allocating_init()();
}

void variable initialization expression of GetHealthQuantityIntentHandler.storage(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
}

uint64_t variable initialization expression of LogPeriodIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of LogSpecificMedicationsIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of GetSleepAnalysisIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of GetHealthQuantityIntentResponse.code()
{
  return 0;
}

unint64_t variable initialization expression of DataProviderFactory.store()
{
  return (unint64_t)NSDateFormatter.__allocating_init()();
}

uint64_t variable initialization expression of DeleteHealthSampleIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of GetAcitivitySummaryIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of GetCardioFitnessIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of GetBloodPressureIntentHandler.signposter()
{
  return OSSignposter.init()();
}

uint64_t variable initialization expression of GetBloodPressureIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of LogBloodPressureIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of GetMenstruationPredictionIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of LogGenericMedicationsIntentResponse.code()
{
  return 0;
}

unint64_t variable initialization expression of BloodPressurePersistor.store()
{
  return (unint64_t)NSDateFormatter.__allocating_init()();
}

uint64_t variable initialization expression of GetAmbiguousDistanceIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of UndoMedsIntentResponse.code()
{
  return 0;
}

uint64_t variable initialization expression of Statistics.queryDateRange@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = type metadata accessor for DateInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(a1, 1);
}

uint64_t protocol witness for Error._domain.getter in conformance related decl 'e' for HKErrorCode()
{
  return Error<>._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance related decl 'e' for HKErrorCode()
{
  return Error<>._code.getter();
}

uint64_t protocol witness for Error._userInfo.getter in conformance related decl 'e' for HKErrorCode()
{
  return Error._userInfo.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance related decl 'e' for HKErrorCode()
{
  return _BridgedStoredNSError._getEmbeddedNSError()();
}

void *protocol witness for _BridgedStoredNSError._nsError.getter in conformance related decl 'e' for HKErrorCode()
{
  return related decl 'e' for HKErrorCode._nsError.getter(*v0);
}

void *related decl 'e' for HKErrorCode._nsError.getter(void *a1)
{
  id v1 = a1;
  return a1;
}

void *protocol witness for _BridgedStoredNSError.init(_nsError:) in conformance related decl 'e' for HKErrorCode@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  result = related decl 'e' for HKErrorCode.init(_nsError:)(a1);
  *a2 = result;
  return result;
}

void *related decl 'e' for HKErrorCode.init(_nsError:)(void *a1)
{
  id v1 = a1;

  return a1;
}

uint64_t protocol witness for SetAlgebra.init() in conformance HKStatisticsOptions()
{
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance HKStatisticsOptions()
{
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance HKStatisticsOptions()
{
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance HKStatisticsOptions()
{
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance HKStatisticsOptions()
{
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance HKStatisticsOptions()
{
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance HKStatisticsOptions()
{
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance HKStatisticsOptions()
{
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance HKStatisticsOptions()
{
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance HKStatisticsOptions()
{
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance HKStatisticsOptions()
{
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance HKStatisticsOptions()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance HKStatisticsOptions()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance HKStatisticsOptions()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance HKStatisticsOptions()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance HKStatisticsOptions()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance HKStatisticsOptions()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance HKStatisticsOptions()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for SetAlgebra.init() in conformance HKQueryOptions()
{
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance HKQueryOptions()
{
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance HKQueryOptions()
{
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance HKQueryOptions()
{
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance HKQueryOptions()
{
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance HKQueryOptions()
{
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance HKQueryOptions()
{
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance HKQueryOptions()
{
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance HKQueryOptions()
{
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance HKQueryOptions()
{
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance HKQueryOptions()
{
  return OptionSet<>.formSymmetricDifference(_:)();
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance HKMedicationDoseEventStatus(uint64_t a1@<X8>)
{
  HKMedicationDoseEventStatus.init(rawValue:)();
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = v2 & 1;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance HKMedicationDoseEventStatus(void *a1@<X8>)
{
  HKMedicationDoseEventStatus.rawValue.getter();
  *a1 = v1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKManualEntryValidationResult()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKMedicationDoseEventStatus()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.init() in conformance HKSleepDaySummaryQueryOptions()
{
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance HKSleepDaySummaryQueryOptions()
{
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance HKSleepDaySummaryQueryOptions()
{
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.init() in conformance HKDeleteObjectOptions()
{
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance HKDeleteObjectOptions()
{
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance HKDeleteObjectOptions()
{
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance HKDeleteObjectOptions()
{
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance HKDeleteObjectOptions()
{
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance HKDeleteObjectOptions()
{
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance HKDeleteObjectOptions()
{
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance HKDeleteObjectOptions()
{
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance HKDeleteObjectOptions()
{
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance HKDeleteObjectOptions()
{
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance HKDeleteObjectOptions()
{
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance related decl 'e' for HKErrorCode()
{
  return static related decl 'e' for HKErrorCode.errorDomain.getter();
}

uint64_t static related decl 'e' for HKErrorCode.errorDomain.getter()
{
  id v2 = (id)*MEMORY[0x263F09548];
  id v0 = (id)*MEMORY[0x263F09548];
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance related decl 'e' for HKErrorCode()
{
  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance related decl 'e' for HKErrorCode()
{
  return _BridgedStoredNSError.errorUserInfo.getter();
}

uint64_t protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance related decl 'e' for HKErrorCode(void *a1)
{
  id v1 = a1;
  lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
  return _BridgedStoredNSError.init(_bridgedNSError:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance related decl 'e' for HKErrorCode()
{
  return _BridgedStoredNSError.hashValue.getter();
}

uint64_t _BridgedStoredNSError.hashValue.getter()
{
  id v1 = (id)dispatch thunk of _BridgedStoredNSError._nsError.getter();
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance related decl 'e' for HKErrorCode()
{
  return _BridgedStoredNSError.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance related decl 'e' for HKErrorCode(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKStatisticsOptions()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance HKStatisticsOptions()
{
  return SetAlgebra<>.init(arrayLiteral:)();
}

__C::HKQueryOptions protocol witness for OptionSet.init(rawValue:) in conformance HKStatisticsOptions@<X0>(Swift::UInt *a1@<X0>, __C::HKQueryOptions *a2@<X8>)
{
  result.rawValue = HKQueryOptions.init(rawValue:)(*a1).rawValue;
  a2->rawValue = result.rawValue;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKQueryOptions()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance HKQueryOptions()
{
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKSleepDaySummaryQueryOptions()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance HKSleepDaySummaryQueryOptions()
{
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKDeleteObjectOptions()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance HKDeleteObjectOptions()
{
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance related decl 'e' for HKErrorCode()
{
  return static _BridgedStoredNSError.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HKErrorCode()
{
  return == infix<A>(_:_:)() & 1;
}

__C::HKQueryOptions protocol witness for RawRepresentable.init(rawValue:) in conformance HKStatisticsOptions@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X8>)
{
  result.rawValue = HKQueryOptions.init(rawValue:)(*a1).rawValue;
  *(__C::HKQueryOptions *)a2 = result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

__C::HKQueryOptions protocol witness for RawRepresentable.rawValue.getter in conformance HKStatisticsOptions@<X0>(__C::HKQueryOptions *a1@<X8>)
{
  result.rawValue = HKQueryOptions.init(rawValue:)(*v1).rawValue;
  a1->rawValue = result.rawValue;
  return result;
}

uint64_t implicit closure #1 in default argument 0 of fatalError(_:file:line:)()
{
  return 0;
}

uint64_t type metadata accessor for MatchedMedNameResolutionResult()
{
  return self;
}

unint64_t type metadata accessor for HKHealthStore()
{
  uint64_t v2 = lazy cache variable for type metadata for HKHealthStore;
  if (!lazy cache variable for type metadata for HKHealthStore)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKHealthStore);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t type metadata accessor for HKDeleteObjectOptions()
{
  uint64_t v4 = lazy cache variable for type metadata for HKDeleteObjectOptions;
  if (!lazy cache variable for type metadata for HKDeleteObjectOptions)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKDeleteObjectOptions);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKMedicationDoseEventStatus()
{
  uint64_t v4 = lazy cache variable for type metadata for HKMedicationDoseEventStatus;
  if (!lazy cache variable for type metadata for HKMedicationDoseEventStatus)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMedicationDoseEventStatus);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKWheelchairUse()
{
  uint64_t v4 = lazy cache variable for type metadata for HKWheelchairUse;
  if (!lazy cache variable for type metadata for HKWheelchairUse)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKWheelchairUse);
      return v1;
    }
  }
  return v4;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HKDayIndexRange(uint64_t a1, int a2)
{
  if (a2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      int v3 = *(_OWORD *)a1;
    }
    else {
      int v3 = -1;
    }
  }
  else
  {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for HKDayIndexRange(uint64_t result, int a2, int a3)
{
  BOOL v3 = a3 != 0;
  if (a2)
  {
    *(_OWORD *)__n128 result = (a2 - 1);
    if (a3)
    {
      if (v3) {
        *(unsigned char *)(result + 16) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else if (a3)
  {
    if (v3) {
      *(unsigned char *)(result + 16) = 0;
    }
    else {
      __break(1u);
    }
  }
  return result;
}

uint64_t type metadata accessor for HKDayIndexRange()
{
  uint64_t v4 = lazy cache variable for type metadata for HKDayIndexRange;
  if (!lazy cache variable for type metadata for HKDayIndexRange)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKDayIndexRange);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKMedicationDoseEventLogOrigin()
{
  uint64_t v4 = lazy cache variable for type metadata for HKMedicationDoseEventLogOrigin;
  if (!lazy cache variable for type metadata for HKMedicationDoseEventLogOrigin)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMedicationDoseEventLogOrigin);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKStatisticsOptions()
{
  uint64_t v4 = lazy cache variable for type metadata for HKStatisticsOptions;
  if (!lazy cache variable for type metadata for HKStatisticsOptions)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKStatisticsOptions);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for related decl 'e' for HKErrorCode()
{
  uint64_t v4 = lazy cache variable for type metadata for related decl 'e' for HKErrorCode;
  if (!lazy cache variable for type metadata for related decl 'e' for HKErrorCode)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for related decl 'e' for HKErrorCode);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKManualEntryValidationResult()
{
  uint64_t v4 = lazy cache variable for type metadata for HKManualEntryValidationResult;
  if (!lazy cache variable for type metadata for HKManualEntryValidationResult)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKManualEntryValidationResult);
      return v1;
    }
  }
  return v4;
}

unint64_t base witness table accessor for Equatable in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
}

unint64_t lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode()
{
  uint64_t v2 = lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode;
  if (!lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode)
  {
    type metadata accessor for related decl 'e' for HKErrorCode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode;
  if (!lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode)
  {
    type metadata accessor for related decl 'e' for HKErrorCode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode;
  if (!lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode)
  {
    type metadata accessor for related decl 'e' for HKErrorCode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode;
  if (!lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode)
  {
    type metadata accessor for related decl 'e' for HKErrorCode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode;
  if (!lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode)
  {
    type metadata accessor for related decl 'e' for HKErrorCode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode;
  if (!lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode)
  {
    type metadata accessor for related decl 'e' for HKErrorCode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Error in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
}

unint64_t base witness table accessor for RawRepresentable in HKStatisticsOptions()
{
  return lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
}

unint64_t lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions;
  if (!lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions)
  {
    type metadata accessor for HKStatisticsOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions;
  if (!lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions)
  {
    type metadata accessor for HKStatisticsOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions;
  if (!lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions)
  {
    type metadata accessor for HKStatisticsOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions;
  if (!lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions)
  {
    type metadata accessor for HKStatisticsOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions;
  if (!lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions)
  {
    type metadata accessor for HKStatisticsOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKStatisticsOptions and conformance HKStatisticsOptions);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for SetAlgebra in HKStatisticsOptions()
{
  return lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
}

unint64_t base witness table accessor for RawRepresentable in HKDeleteObjectOptions()
{
  return lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
}

unint64_t lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions;
  if (!lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions)
  {
    type metadata accessor for HKDeleteObjectOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions;
  if (!lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions)
  {
    type metadata accessor for HKDeleteObjectOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions;
  if (!lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions)
  {
    type metadata accessor for HKDeleteObjectOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions;
  if (!lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions)
  {
    type metadata accessor for HKDeleteObjectOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions;
  if (!lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions)
  {
    type metadata accessor for HKDeleteObjectOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for SetAlgebra in HKDeleteObjectOptions()
{
  return lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
}

unint64_t base witness table accessor for Equatable in HKDeleteObjectOptions()
{
  return lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in HKDeleteObjectOptions()
{
  return lazy protocol witness table accessor for type HKDeleteObjectOptions and conformance HKDeleteObjectOptions();
}

unint64_t base witness table accessor for Equatable in HKStatisticsOptions()
{
  return lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in HKStatisticsOptions()
{
  return lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
}

unint64_t base witness table accessor for CustomNSError in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
}

unint64_t base witness table accessor for _ObjectiveCBridgeableError in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
}

unint64_t base witness table accessor for Hashable in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
}

unint64_t associated type witness table accessor for _BridgedStoredNSError.Code : _ErrorCodeProtocol in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type HKErrorCode and conformance HKErrorCode();
}

unint64_t lazy protocol witness table accessor for type HKErrorCode and conformance HKErrorCode()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode;
  if (!lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode)
  {
    type metadata accessor for HKErrorCode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode;
  if (!lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode)
  {
    type metadata accessor for HKErrorCode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode;
  if (!lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode)
  {
    type metadata accessor for HKErrorCode();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKErrorCode and conformance HKErrorCode);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata accessor for HKErrorCode()
{
  uint64_t v4 = lazy cache variable for type metadata for HKErrorCode;
  if (!lazy cache variable for type metadata for HKErrorCode)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKErrorCode);
      return v1;
    }
  }
  return v4;
}

unint64_t associated type witness table accessor for _BridgedStoredNSError.Code : RawRepresentable in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type HKErrorCode and conformance HKErrorCode();
}

unint64_t associated type witness table accessor for _BridgedStoredNSError.Code.RawRepresentable.RawValue : FixedWidthInteger in related decl 'e' for HKErrorCode()
{
  return lazy protocol witness table accessor for type Int and conformance Int();
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in HKErrorCode()
{
  return lazy protocol witness table accessor for type HKErrorCode and conformance HKErrorCode();
}

unint64_t associated type witness table accessor for _ErrorCodeProtocol._ErrorType : _BridgedStoredNSError in HKErrorCode()
{
  return lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
}

unint64_t lazy protocol witness table accessor for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult;
  if (!lazy protocol witness table cache variable for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult)
  {
    type metadata accessor for HKManualEntryValidationResult();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult;
  if (!lazy protocol witness table cache variable for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult)
  {
    type metadata accessor for HKManualEntryValidationResult();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus;
  if (!lazy protocol witness table cache variable for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus)
  {
    type metadata accessor for HKMedicationDoseEventStatus();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus;
  if (!lazy protocol witness table cache variable for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus)
  {
    type metadata accessor for HKMedicationDoseEventStatus();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata accessor for HKSiriAuthorizationStatus()
{
  uint64_t v4 = lazy cache variable for type metadata for HKSiriAuthorizationStatus;
  if (!lazy cache variable for type metadata for HKSiriAuthorizationStatus)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKSiriAuthorizationStatus);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKSleepDaySummaryQueryOptions()
{
  uint64_t v4 = lazy cache variable for type metadata for HKSleepDaySummaryQueryOptions;
  if (!lazy cache variable for type metadata for HKSleepDaySummaryQueryOptions)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKSleepDaySummaryQueryOptions);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for HKQueryOptions()
{
  uint64_t v4 = lazy cache variable for type metadata for HKQueryOptions;
  if (!lazy cache variable for type metadata for HKQueryOptions)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    uint64_t v4 = ForeignTypeMetadata;
    if (!v0)
    {
      unint64_t v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HKQueryOptions);
      return v1;
    }
  }
  return v4;
}

unint64_t base witness table accessor for RawRepresentable in HKQueryOptions()
{
  return lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
}

unint64_t lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions;
  if (!lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions)
  {
    type metadata accessor for HKQueryOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions;
  if (!lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions)
  {
    type metadata accessor for HKQueryOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions;
  if (!lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions)
  {
    type metadata accessor for HKQueryOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions;
  if (!lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions)
  {
    type metadata accessor for HKQueryOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions;
  if (!lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions)
  {
    type metadata accessor for HKQueryOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKQueryOptions and conformance HKQueryOptions);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for SetAlgebra in HKQueryOptions()
{
  return lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
}

unint64_t base witness table accessor for RawRepresentable in HKSleepDaySummaryQueryOptions()
{
  return lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
}

unint64_t lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions;
  if (!lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions)
  {
    type metadata accessor for HKSleepDaySummaryQueryOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions;
  if (!lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions)
  {
    type metadata accessor for HKSleepDaySummaryQueryOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions;
  if (!lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions)
  {
    type metadata accessor for HKSleepDaySummaryQueryOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions;
  if (!lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions)
  {
    type metadata accessor for HKSleepDaySummaryQueryOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions;
  if (!lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions)
  {
    type metadata accessor for HKSleepDaySummaryQueryOptions();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions);
    return WitnessTable;
  }
  return v2;
}

unint64_t base witness table accessor for SetAlgebra in HKSleepDaySummaryQueryOptions()
{
  return lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
}

unint64_t base witness table accessor for Equatable in HKSleepDaySummaryQueryOptions()
{
  return lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in HKSleepDaySummaryQueryOptions()
{
  return lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
}

unint64_t base witness table accessor for Equatable in HKQueryOptions()
{
  return lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in HKQueryOptions()
{
  return lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
}

uint64_t getFormattedTimeString(time:)(uint64_t a1)
{
  uint64_t v21 = a1;
  v32 = 0;
  v31 = 0;
  Class v30 = 0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  unint64_t v20 = (*(void *)(*(void *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v1);
  uint64_t v29 = (uint64_t)&v9 - v20;
  uint64_t v28 = type metadata accessor for Date();
  uint64_t v26 = *(void *)(v28 - 8);
  uint64_t v27 = v28 - 8;
  unint64_t v22 = (*(void *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v21);
  uint64_t v23 = (char *)&v9 - v22;
  unint64_t v24 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (const void *)MEMORY[0x270FA5388](v2);
  uint64_t v25 = (char *)&v9 - v24;
  v32 = (char *)&v9 - v24;
  v31 = v4;
  outlined init with copy of Date?(v4, v5);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v29, 1, v28) == 1)
  {
    uint64_t v10 = 0;
    outlined destroy of Date?(v29);
    uint64_t v18 = v10;
    uint64_t v19 = v10;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v25, v29, v28);
    type metadata accessor for NSDateFormatter();
    NSDateFormatter v33 = NSDateFormatter.__allocating_init()();
    objc_super v6 = v23;
    Class isa = v33.super.super.isa;
    Class v30 = v33.super.super.isa;
    -[objc_class setTimeStyle:](v33.super.super.isa, sel_setTimeStyle_, 1, v33._counter);
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v6, v25, v28);
    Class v11 = Date._bridgeToObjectiveC()().super.isa;
    v15 = *(void (**)(char *, uint64_t))(v26 + 8);
    uint64_t v14 = v26 + 8;
    v15(v23, v28);
    id v12 = [(objc_class *)isa stringFromDate:v11];

    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v7;

    v15(v25, v28);
    uint64_t v18 = v16;
    uint64_t v19 = v17;
  }
  return v18;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t v4 = *a1;
  if (*a1 < 0)
  {
    uint64_t TypeByMangledNameInContext2 = swift_getTypeByMangledNameInContext2();
    *a1 = TypeByMangledNameInContext2;
    return TypeByMangledNameInContext2;
  }
  return v4;
}

void *outlined init with copy of Date?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of Date?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

unint64_t type metadata accessor for NSDateFormatter()
{
  uint64_t v2 = lazy cache variable for type metadata for NSDateFormatter;
  if (!lazy cache variable for type metadata for NSDateFormatter)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSDateFormatter);
    return ObjCClassMetadata;
  }
  return v2;
}

NSDateFormatter __swiftcall NSDateFormatter.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v1 = (objc_class *)@nonobjc NSDateFormatter.init()();
  result._counter = v4;
  result._formatter = v3;
  result._attributes = v2;
  result.super.super.Class isa = v1;
  return result;
}

uint64_t Date.startOfDay.getter@<X0>(uint64_t a1@<X8>)
{
  v3[1] = a1;
  uint64_t v8 = 0;
  uint64_t v7 = type metadata accessor for Calendar();
  uint64_t v4 = *(void *)(v7 - 8);
  uint64_t v5 = v7 - 8;
  v3[0] = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  uint64_t v6 = (char *)v3 - v3[0];
  uint64_t v8 = v1;
  static Calendar.current.getter();
  Calendar.startOfDay(for:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v7);
}

uint64_t Date.endOfDay.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v31 = a1;
  v32 = "Fatal error";
  NSDateFormatter v33 = "Unexpectedly found nil while unwrapping an Optional value";
  v34 = "SiriWellnessIntents/DateFormatter.swift";
  v68 = 0;
  uint64_t v67 = 0;
  uint64_t v45 = 0;
  uint64_t v66 = type metadata accessor for Date();
  uint64_t v62 = *(void *)(v66 - 8);
  uint64_t v63 = v66 - 8;
  unint64_t v35 = (*(void *)(v62 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v51 = (uint64_t)&v30 - v35;
  uint64_t v61 = type metadata accessor for Calendar();
  uint64_t v58 = *(void *)(v61 - 8);
  uint64_t v59 = v61 - 8;
  unint64_t v36 = (*(void *)(v58 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v61);
  v60 = (char *)&v30 - v36;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  unint64_t v37 = (*(void *)(*(void *)(v1 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v1);
  v64 = (char *)&v30 - v37;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  unint64_t v38 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  v44 = (char *)&v30 - v38;
  unint64_t v39 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v45);
  v43 = (char *)&v30 - v39;
  uint64_t v55 = type metadata accessor for DateComponents();
  uint64_t v52 = *(void *)(v55 - 8);
  uint64_t v53 = v55 - 8;
  uint64_t v41 = *(void *)(v52 + 64);
  unint64_t v40 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v43);
  v54 = (char *)&v30 - v40;
  unint64_t v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  v50 = (char *)&v30 - v42;
  v68 = (char *)&v30 - v42;
  uint64_t v67 = v49;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v58 + 56);
  unsigned int v65 = 1;
  v5(v4, 1);
  uint64_t v6 = type metadata accessor for TimeZone();
  (*(void (**)(char *, void))(*(void *)(v6 - 8) + 56))(v44, v65);
  v46 = &v8;
  uint64_t v8 = 0;
  int v47 = 1;
  char v9 = 1;
  uint64_t v10 = 0;
  char v11 = 1;
  uint64_t v12 = 0;
  char v13 = 1;
  uint64_t v14 = 0;
  char v15 = 1;
  uint64_t v16 = 0;
  char v17 = 1;
  uint64_t v18 = 0;
  char v19 = 1;
  uint64_t v20 = 0;
  char v21 = 1;
  uint64_t v22 = 0;
  char v23 = 1;
  uint64_t v24 = 0;
  char v25 = 1;
  uint64_t v26 = 0;
  LOBYTE(v27) = 1;
  uint64_t v28 = 0;
  char v29 = 1;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  int v48 = 0;
  DateComponents.day.setter();
  DateComponents.second.setter();
  static Calendar.current.getter();
  (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v54, v50, v55);
  Date.startOfDay.getter(v51);
  default argument 2 of Calendar.date(byAdding:to:wrappingComponents:)();
  Calendar.date(byAdding:to:wrappingComponents:)();
  (*(void (**)(uint64_t, uint64_t))(v62 + 8))(v51, v66);
  v56 = *(void (**)(char *, uint64_t))(v52 + 8);
  uint64_t v57 = v52 + 8;
  v56(v54, v55);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v61);
  if ((*(unsigned int (**)(char *, void, uint64_t))(v62 + 48))(v64, v65, v66) == 1)
  {
    LOBYTE(v26) = 2;
    uint64_t v27 = 27;
    LODWORD(v28) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v31, v64, v66);
  return ((uint64_t (*)(char *, uint64_t))v56)(v50, v55);
}

uint64_t default argument 2 of Calendar.date(byAdding:to:wrappingComponents:)()
{
  return 0;
}

id @nonobjc NSDateFormatter.init()()
{
  return objc_msgSend(v0, sel_init);
}

id LogQuantityIntent.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id LogQuantityIntent.init()()
{
  id v4 = 0;
  v3.receiver = 0;
  v3.super_class = (Class)type metadata accessor for LogQuantityIntent();
  id v2 = objc_msgSendSuper2(&v3, sel_init);
  id v0 = v2;
  id v4 = v2;

  return v2;
}

uint64_t type metadata accessor for LogQuantityIntent()
{
  return self;
}

id LogQuantityIntent.__allocating_init(coder:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id LogQuantityIntent.init(coder:)(void *a1)
{
  id v8 = 0;
  uint64_t v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for LogQuantityIntent();
  id v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    id v1 = v5;
    id v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id LogQuantityIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v11 = objc_allocWithZone(v3);
  if (a2)
  {
    uint64_t v6 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  id v5 = objc_msgSend(v11, sel_initWithIdentifier_backingStore_);

  return v5;
}

id LogQuantityIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v15 = 0;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v12 = a3;
  swift_bridgeObjectRetain();
  if (a2)
  {
    uint64_t v6 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  v11.receiver = 0;
  v11.super_class = (Class)type metadata accessor for LogQuantityIntent();
  id v5 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_backingStore_, v7, a3);

  id v3 = v5;
  id v15 = v5;

  swift_bridgeObjectRelease();
  return v5;
}

id LogQuantityIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v13 = objc_allocWithZone(v5);
  uint64_t v16 = (void *)MEMORY[0x2611C8860](a1, a2);
  uint64_t v18 = (void *)MEMORY[0x2611C8860](a3, a4);
  if (a5)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, isa);
  }
  else
  {
    id v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, 0);
  }
  id v9 = v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

id LogQuantityIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v23 = 0;
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v18 = a5;
  swift_bridgeObjectRetain();
  id v12 = (id)MEMORY[0x2611C8860](a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  id v15 = (void *)MEMORY[0x2611C8860](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a5)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v9 = isa;
  }
  else
  {
    Class v9 = 0;
  }
  v17.receiver = 0;
  v17.super_class = (Class)type metadata accessor for LogQuantityIntent();
  id v7 = objc_msgSendSuper2(&v17, sel_initWithDomain_verb_parametersByName_, v12, v15, v9);

  id v5 = v7;
  id v23 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v7;
}

id LogQuantityIntent.__deallocating_deinit()
{
  id v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LogQuantityIntent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t LogQuantityIntentResponseCode.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 100:
      return 100;
    case 101:
      return 101;
    case 102:
      return 102;
    case 103:
      return 103;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LogQuantityIntentResponseCode()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LogQuantityIntentResponseCode()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LogQuantityIntentResponseCode()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance LogQuantityIntentResponseCode()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LogQuantityIntentResponseCode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = LogQuantityIntentResponseCode.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LogQuantityIntentResponseCode(void *a1@<X8>)
{
  LogQuantityIntentResponseCode.rawValue.getter();
  *a1 = v1;
}

uint64_t LogQuantityIntentResponse.code.getter()
{
  objc_super v2 = (uint64_t *)(v0 + OBJC_IVAR___LogQuantityIntentResponse_code);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t LogQuantityIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___LogQuantityIntentResponse_code);
  swift_beginAccess();
  void *v3 = a1;
  return swift_endAccess();
}

uint64_t (*LogQuantityIntentResponse.code.modify())()
{
  return LogQuantityIntentResponse.code.modify;
}

uint64_t LogQuantityIntentResponse.code.modify()
{
  return swift_endAccess();
}

void key path getter for LogQuantityIntentResponse.code : LogQuantityIntentResponse(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  id v2 = *a1;
  *a2 = LogQuantityIntentResponse.code.getter();
}

void key path setter for LogQuantityIntentResponse.code : LogQuantityIntentResponse(uint64_t *a1, id *a2)
{
  uint64_t v4 = *a1;
  id v3 = *a2;
  id v2 = *a2;
  LogQuantityIntentResponse.code.setter(v4);
}

char *LogQuantityIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  id v3 = objc_allocWithZone(v2);
  return LogQuantityIntentResponse.init(code:userActivity:)(a1, a2);
}

char *LogQuantityIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  Class v9 = (char *)objc_msgSend(v10, sel_init);
  id v2 = v9;
  id v3 = v9;
  uint64_t v4 = v9;
  id v6 = &v9[OBJC_IVAR___LogQuantityIntentResponse_code];
  swift_beginAccess();
  *(void *)id v6 = a1;
  swift_endAccess();

  objc_msgSend(v9, sel_setUserActivity_, a2);
  return v9;
}

id LogQuantityIntentResponse.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id LogQuantityIntentResponse.init()()
{
  uint64_t v1 = v0;
  id v6 = v0;
  *(void *)&v0[OBJC_IVAR___LogQuantityIntentResponse_code] = 0;

  v5.receiver = v6;
  v5.super_class = (Class)type metadata accessor for LogQuantityIntentResponse();
  id v4 = objc_msgSendSuper2(&v5, sel_init);
  id v2 = v4;
  id v6 = v4;

  return v4;
}

uint64_t type metadata accessor for LogQuantityIntentResponse()
{
  return self;
}

id LogQuantityIntentResponse.__allocating_init(coder:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id LogQuantityIntentResponse.init(coder:)(void *a1)
{
  Class v9 = a1;
  id v2 = v1;
  id v10 = v1;
  *(void *)&v1[OBJC_IVAR___LogQuantityIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for LogQuantityIntentResponse();
  id v7 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);
  if (v7)
  {
    id v3 = v7;
    id v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id LogQuantityIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v4;
}

id LogQuantityIntentResponse.init(backingStore:)(void *a1)
{
  Class v9 = a1;
  id v2 = v1;
  id v10 = v1;
  *(void *)&v1[OBJC_IVAR___LogQuantityIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for LogQuantityIntentResponse();
  id v7 = objc_msgSendSuper2(&v8, sel_initWithBackingStore_, a1);
  if (v7)
  {
    id v3 = v7;
    id v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id LogQuantityIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  id v8 = objc_allocWithZone(v1);
  if (a1)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, isa);
  }
  else
  {
    id v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, 0);
  }
  id v5 = v2;

  return v5;
}

id LogQuantityIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  uint64_t v11 = a1;
  id v2 = v1;
  id v12 = v1;
  *(void *)&v1[OBJC_IVAR___LogQuantityIntentResponse_code] = 0;

  swift_bridgeObjectRetain();
  if (a1)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v8 = isa;
  }
  else
  {
    Class v8 = 0;
  }
  v10.receiver = v12;
  v10.super_class = (Class)type metadata accessor for LogQuantityIntentResponse();
  id v6 = objc_msgSendSuper2(&v10, sel_initWithPropertiesByName_, v8);

  if (v6)
  {
    id v3 = v6;
    id v12 = v6;
    swift_bridgeObjectRelease();

    return v6;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id LogQuantityIntentResponse.__deallocating_deinit()
{
  id v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LogQuantityIntentResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in LogQuantityIntentResponseCode()
{
  return lazy protocol witness table accessor for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode();
}

unint64_t lazy protocol witness table accessor for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode()
{
  uint64_t v2 = lazy protocol witness table cache variable for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode;
  if (!lazy protocol witness table cache variable for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode;
  if (!lazy protocol witness table cache variable for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type LogQuantityIntentResponseCode and conformance LogQuantityIntentResponseCode);
    return WitnessTable;
  }
  return v2;
}

void sub_25DE093F4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_25DE0940C(uint64_t *a1, id *a2)
{
}

ValueMetadata *type metadata accessor for LogQuantityIntentResponseCode()
{
  return &type metadata for LogQuantityIntentResponseCode;
}

id LogQuantityIntentHandler.__allocating_init(storage:)(void *a1)
{
  id v2 = objc_allocWithZone(v1);
  return LogQuantityIntentHandler.init(storage:)(a1);
}

id LogQuantityIntentHandler.init(storage:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  id v2 = v1;
  id v13 = v1;
  outlined init with copy of QuantityPersisting?(a1, v11);
  if (v11[3])
  {
    outlined init with take of QuantityPersisting(v11, __dst);
  }
  else
  {
    v3.store.super.Class isa = HealthKitPersistor.init()().store.super.isa;
    __dst[3] = &type metadata for HealthKitPersistor;
    __dst[4] = &protocol witness table for HealthKitPersistor;
    __dst[0] = v3.store.super.isa;
    outlined destroy of QuantityPersisting?((uint64_t)v11);
  }
  outlined init with take of QuantityPersisting(__dst, &v7[OBJC_IVAR____TtC19SiriWellnessIntents24LogQuantityIntentHandler_storage]);

  v10.receiver = v13;
  v10.super_class = ObjectType;
  id v6 = objc_msgSendSuper2(&v10, sel_init);
  id v4 = v6;
  id v13 = v6;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v6;
}

void *outlined init with copy of QuantityPersisting?(void *a1, void *a2)
{
  if (a1[3])
  {
    uint64_t v2 = a1[3];
    a2[3] = v2;
    a2[4] = a1[4];
    (**(void (***)(void))(v2 - 8))();
  }
  else
  {
    memcpy(a2, a1, 0x28uLL);
  }
  return a2;
}

SiriWellnessIntents::HealthKitPersistor __swiftcall HealthKitPersistor.init()()
{
  id v3 = 0;
  type metadata accessor for HKHealthStore();
  uint64_t v2 = NSDateFormatter.__allocating_init()();
  id v0 = v2;
  id v3 = v2;
  outlined destroy of HealthKitPersistor(&v3);
  return (SiriWellnessIntents::HealthKitPersistor)v2;
}

uint64_t outlined destroy of QuantityPersisting?(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((*(_DWORD *)(*(void *)(v2 - 8) + 80) & 0x20000) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(uint64_t))(*(void *)(v2 - 8) + 8))(a1);
  }
}

void *outlined init with take of QuantityPersisting(const void *a1, void *__dst)
{
  return __dst;
}

uint64_t LogQuantityIntentHandler.handle(intent:)(uint64_t a1)
{
  v2[38] = v1;
  v2[37] = a1;
  v2[29] = v2;
  v2[30] = 0;
  v2[31] = 0;
  v2[27] = 0;
  v2[28] = 0;
  uint64_t v3 = type metadata accessor for Logger();
  v2[39] = v3;
  v2[40] = *(void *)(v3 - 8);
  v2[41] = swift_task_alloc();
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v2[46] = swift_task_alloc();
  v2[47] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v2[48] = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  v2[49] = v6;
  v2[50] = *(void *)(v6 + 64);
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v2[54] = swift_task_alloc();
  v2[30] = a1;
  v2[31] = v1;
  return MEMORY[0x270FA2498](LogQuantityIntentHandler.handle(intent:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 232) = *v1;
  *(void *)(v3 + 592) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](LogQuantityIntentHandler.handle(intent:), 0);
}

uint64_t LogQuantityIntentHandler.handle(intent:)()
{
  uint64_t v104 = v0;
  uint64_t v1 = *(void **)(v0 + 296);
  *(void *)(v0 + 232) = v0;
  id v93 = objc_msgSend(v1, sel_start);
  if (v93)
  {
    uint64_t v89 = *(void *)(v92 + 424);
    uint64_t v90 = *(void *)(v92 + 384);
    uint64_t v91 = *(void *)(v92 + 376);
    uint64_t v88 = *(void *)(v92 + 392);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 32))(v91, v89, v90);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v88 + 56))(v91, 0, 1, v90);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v92 + 392) + 56))(*(void *)(v92 + 376), 1, 1, *(void *)(v92 + 384));
  }
  uint64_t v2 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v92 + 392) + 48);
  v87 = *v2;
  if ((*v2)(*(void *)(v92 + 376), 1, *(void *)(v92 + 384)) == 1)
  {
    uint64_t v86 = *(void *)(v92 + 376);
    Date.init()();
    outlined destroy of Date?(v86);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v92 + 392) + 32))(*(void *)(v92 + 432), *(void *)(v92 + 376), *(void *)(v92 + 384));
  }
  id v85 = objc_msgSend(*(id *)(v92 + 296), sel_end);
  if (v85)
  {
    uint64_t v82 = *(void *)(v92 + 424);
    uint64_t v83 = *(void *)(v92 + 384);
    uint64_t v84 = *(void *)(v92 + 368);
    uint64_t v81 = *(void *)(v92 + 392);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 32))(v84, v82, v83);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v81 + 56))(v84, 0, 1, v83);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v92 + 392) + 56))(*(void *)(v92 + 368), 1, 1, *(void *)(v92 + 384));
  }
  uint64_t v3 = *(void *)(v92 + 432);
  uint64_t v4 = *(void *)(v92 + 408);
  uint64_t v79 = *(void *)(v92 + 384);
  uint64_t v80 = *(void *)(v92 + 368);
  uint64_t v5 = *(void *)(v92 + 392) + 16;
  v78 = *(void (**)(uint64_t, uint64_t))v5;
  *(void *)(v92 + 440) = *(void *)v5;
  *(void *)(v92 + 448) = v5 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v78(v4, v3);
  if (v87(v80, 1, v79) == 1)
  {
    uint64_t v77 = *(void *)(v92 + 368);
    ((void (*)(void, void, void))v78)(*(void *)(v92 + 416), *(void *)(v92 + 408), *(void *)(v92 + 384));
    outlined destroy of Date?(v77);
  }
  else
  {
    (*(void (**)(void, void, void))(*(void *)(v92 + 392) + 32))(*(void *)(v92 + 416), *(void *)(v92 + 368), *(void *)(v92 + 384));
  }
  uint64_t v6 = *(void *)(v92 + 408);
  uint64_t v7 = *(void *)(v92 + 384);
  id v75 = *(id *)(v92 + 296);
  uint64_t v8 = *(void *)(v92 + 392) + 8;
  v74 = *(void (**)(uint64_t, uint64_t))v8;
  *(void *)(v92 + 456) = *(void *)v8;
  *(void *)(v92 + 464) = v8 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v74(v6, v7);
  id v76 = objc_msgSend(v75, sel_quantityIdentifier);
  if (v76)
  {
    uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v71 = v9;

    uint64_t v72 = v70;
    uint64_t v73 = v71;
  }
  else
  {
    uint64_t v72 = 0;
    uint64_t v73 = 0;
  }
  *(void *)(v92 + 480) = v73;
  *(void *)(v92 + 472) = v72;
  if (v73)
  {
    uint64_t v10 = *(void *)(v92 + 360);
    uint64_t v60 = *(void *)(v92 + 312);
    uint64_t v58 = *(void *)(v92 + 320);
    *(void *)(v92 + 216) = v72;
    *(void *)(v92 + 224) = v73;
    uint64_t v59 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16);
    *(void *)(v92 + 488) = v11;
    *(void *)(v92 + 496) = (v58 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v11(v10, v59, v60);
    swift_endAccess();
    swift_bridgeObjectRetain();
    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = v72;
    *(void *)(v62 + 24) = v73;
    oslog = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.debug.getter();
    *(void *)(v92 + 264) = 12;
    *(void *)(v92 + 504) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    *(void *)(v92 + 512) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    *(void *)(v92 + 520) = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v92 + 604);
    uint64_t v64 = swift_allocObject();
    *(unsigned char *)(v64 + 16) = 32;
    uint64_t v65 = swift_allocObject();
    *(unsigned char *)(v65 + 16) = 8;
    uint64_t v63 = swift_allocObject();
    *(void *)(v63 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v63 + 24) = v62;
    uint64_t v66 = swift_allocObject();
    *(void *)(v66 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v66 + 24) = v63;
    *(void *)(v92 + 528) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    uint64_t v67 = v12;
    swift_retain();
    *uint64_t v67 = partial apply for closure #1 in OSLogArguments.append(_:);
    v67[1] = v64;
    swift_retain();
    v67[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v67[3] = v65;
    swift_retain();
    v67[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v67[5] = v66;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v69))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v56 = createStorage<A>(capacity:type:)(0);
      uint64_t v57 = createStorage<A>(capacity:type:)(1);
      v99 = buf;
      uint64_t v100 = v56;
      uint64_t v101 = v57;
      serialize(_:at:)(2, &v99);
      serialize(_:at:)(1, &v99);
      v102 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v103 = v64;
      closure #1 in osLogInternal(_:log:type:)(&v102, (uint64_t)&v99, (uint64_t)&v100, (uint64_t)&v101);
      v102 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v103 = v65;
      closure #1 in osLogInternal(_:log:type:)(&v102, (uint64_t)&v99, (uint64_t)&v100, (uint64_t)&v101);
      v102 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v103 = v66;
      closure #1 in osLogInternal(_:log:type:)(&v102, (uint64_t)&v99, (uint64_t)&v100, (uint64_t)&v101);
      _os_log_impl(&dword_25DE00000, oslog, v69, "Checking authorization for %s...", buf, size);
      destroyStorage<A>(_:count:)(v56, 0, v54);
      destroyStorage<A>(_:count:)(v57, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    *(void *)(v92 + 536) = 0;
    uint64_t v46 = *(void *)(v92 + 360);
    uint64_t v47 = *(void *)(v92 + 312);
    uint64_t v48 = *(void *)(v92 + 304);
    uint64_t v45 = *(void *)(v92 + 320);

    id v13 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    *(void *)(v92 + 544) = v13;
    *(void *)(v92 + 552) = (v45 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v13(v46, v47);
    outlined init with copy of QuantityPersisting(v48 + OBJC_IVAR____TtC19SiriWellnessIntents24LogQuantityIntentHandler_storage, v92 + 16);
    uint64_t v51 = *(void *)(v92 + 40);
    uint64_t v52 = *(void *)(v92 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v92 + 16), v51);
    uint64_t v49 = _allocateUninitializedArray<A>(_:)();
    v50 = v14;
    swift_bridgeObjectRetain();
    uint64_t *v50 = v72;
    v50[1] = v73;
    _finalizeUninitializedArray<A>(_:)();
    *(void *)(v92 + 560) = v49;
    uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 + 8) + **(int **)(v52 + 8));
    id v15 = (void *)swift_task_alloc();
    *(void *)(v92 + 568) = v15;
    *id v15 = *(void *)(v92 + 232);
    v15[1] = LogQuantityIntentHandler.handle(intent:);
    return v53(v49, v51, v52);
  }
  else
  {
    uint64_t v17 = *(void *)(v92 + 328);
    uint64_t v34 = *(void *)(v92 + 312);
    id v35 = *(id *)(v92 + 296);
    uint64_t v32 = *(void *)(v92 + 320);
    uint64_t v33 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v17, v33, v34);
    swift_endAccess();
    id v18 = v35;
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = v35;
    log = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    *(void *)(v92 + 256) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v36 = *(_DWORD *)(v92 + 600);
    uint64_t v39 = swift_allocObject();
    *(unsigned char *)(v39 + 16) = 64;
    uint64_t v40 = swift_allocObject();
    *(unsigned char *)(v40 + 16) = 8;
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v38 + 24) = v37;
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(void *)(v41 + 24) = v38;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    unint64_t v42 = v19;
    swift_retain();
    *unint64_t v42 = partial apply for closure #1 in OSLogArguments.append(_:);
    v42[1] = v39;
    swift_retain();
    v42[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v42[3] = v40;
    swift_retain();
    v42[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v42[5] = v41;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v44))
    {
      char v29 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v30 = createStorage<A>(capacity:type:)(1);
      uint64_t v31 = createStorage<A>(capacity:type:)(0);
      v94 = v29;
      uint64_t v95 = v30;
      uint64_t v96 = v31;
      serialize(_:at:)(2, &v94);
      serialize(_:at:)(1, &v94);
      v97 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v98 = v39;
      closure #1 in osLogInternal(_:log:type:)(&v97, (uint64_t)&v94, (uint64_t)&v95, (uint64_t)&v96);
      v97 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v98 = v40;
      closure #1 in osLogInternal(_:log:type:)(&v97, (uint64_t)&v94, (uint64_t)&v95, (uint64_t)&v96);
      v97 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v98 = v41;
      closure #1 in osLogInternal(_:log:type:)(&v97, (uint64_t)&v94, (uint64_t)&v95, (uint64_t)&v96);
      _os_log_impl(&dword_25DE00000, log, v44, "Intent with missing slots! You must perform slot filling before handling the intent. Intent: %@", v29, v36);
      destroyStorage<A>(_:count:)(v30, 1, v28);
      destroyStorage<A>(_:count:)(v31, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v29, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v25 = *(void *)(v92 + 432);
    uint64_t v24 = *(void *)(v92 + 416);
    uint64_t v26 = *(void *)(v92 + 384);
    uint64_t v22 = *(void *)(v92 + 328);
    uint64_t v23 = *(void *)(v92 + 312);
    uint64_t v21 = *(void *)(v92 + 320);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
    type metadata accessor for LogQuantityIntentResponse();
    uint64_t v27 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    v74(v24, v26);
    v74(v25, v26);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(char *))(*(void *)(v92 + 232) + 8);
    return v20(v27);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)(char *);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  char *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint32_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  unint64_t v57;
  id v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t, uint64_t);
  int v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(unint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint32_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  NSObject *log;
  os_log_type_t v109;
  uint64_t v110;
  uint64_t v111;
  uint8_t *buf;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint32_t size;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  NSObject *oslog;
  os_log_type_t v128;
  uint64_t v129;
  char v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t (*v134)(uint64_t, uint64_t, uint64_t);
  uint64_t v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, uint64_t, uint64_t);
  uint64_t v140;
  uint8_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(uint64_t, uint64_t, uint64_t);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;

  v146 = v0;
  v130 = *(unsigned char *)(v0 + 620);
  *(void *)(v0 + 232) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (v130)
  {
    v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 488);
    v118 = *(void *)(v129 + 472);
    uint64_t v1 = *(void *)(v129 + 352);
    v116 = *(void *)(v129 + 312);
    v119 = *(void *)(v129 + 480);
    v115 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v117(v1, v115, v116);
    swift_endAccess();
    swift_bridgeObjectRetain();
    v121 = swift_allocObject();
    *(void *)(v121 + 16) = v118;
    *(void *)(v121 + 24) = v119;
    oslog = Logger.logObject.getter();
    v128 = static os_log_type_t.debug.getter();
    *(void *)(v129 + 280) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v129 + 612);
    v123 = swift_allocObject();
    *(unsigned char *)(v123 + 16) = 32;
    v124 = swift_allocObject();
    *(unsigned char *)(v124 + 16) = 8;
    v122 = swift_allocObject();
    *(void *)(v122 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v122 + 24) = v121;
    v125 = swift_allocObject();
    *(void *)(v125 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v125 + 24) = v122;
    _allocateUninitializedArray<A>(_:)();
    v126 = v2;
    swift_retain();
    *v126 = partial apply for closure #1 in OSLogArguments.append(_:);
    v126[1] = v123;
    swift_retain();
    v126[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v126[3] = v124;
    swift_retain();
    v126[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v126[5] = v125;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v128))
    {
      uint64_t v3 = *(void *)(v129 + 536);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v113 = createStorage<A>(capacity:type:)(0);
      v114 = createStorage<A>(capacity:type:)(1);
      v141 = buf;
      v142 = v113;
      v143 = v114;
      serialize(_:at:)(2, &v141);
      serialize(_:at:)(1, &v141);
      v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v145 = v123;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      if (v3) {
        return result;
      }
      v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v145 = v124;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v145 = v125;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      _os_log_impl(&dword_25DE00000, oslog, v128, "Authorization check successful for %s!", buf, size);
      destroyStorage<A>(_:count:)(v113, 0, v111);
      destroyStorage<A>(_:count:)(v114, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      v110 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      v110 = *(void *)(v129 + 536);
    }
    uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v129 + 544);
    uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 488);
    v68 = *(void *)(v129 + 472);
    id v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 440);
    uint64_t v71 = *(void *)(v129 + 432);
    uint64_t v77 = *(void *)(v129 + 424);
    v74 = *(void *)(v129 + 416);
    v78 = *(void *)(v129 + 384);
    uint64_t v63 = *(void *)(v129 + 352);
    uint64_t v5 = *(void *)(v129 + 344);
    uint64_t v66 = *(void *)(v129 + 312);
    uint64_t v70 = *(id *)(v129 + 296);
    os_log_type_t v69 = *(void *)(v129 + 480);
    uint64_t v72 = *(void *)(v129 + 392);

    v64(v63, v66);
    uint64_t v65 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v67(v5, v65, v66);
    swift_endAccess();
    swift_bridgeObjectRetain();
    uint64_t v82 = swift_allocObject();
    *(void *)(v82 + 16) = v68;
    *(void *)(v82 + 24) = v69;
    uint64_t v6 = v70;
    uint64_t v84 = swift_allocObject();
    *(void *)(v84 + 16) = v70;
    uint64_t v7 = v70;
    uint64_t v86 = swift_allocObject();
    *(void *)(v86 + 16) = v70;
    v75(v77, v71, v78);
    id v76 = *(_DWORD *)(v72 + 80);
    uint64_t v73 = swift_allocObject();
    uint64_t v79 = *(void (**)(unint64_t, uint64_t, uint64_t))(v72 + 32);
    v79(v73 + ((v76 + 16) & ~(unint64_t)v76), v77, v78);
    swift_retain();
    uint64_t v88 = swift_allocObject();
    *(void *)(v88 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v88 + 24) = v73;
    swift_release();
    v75(v77, v74, v78);
    uint64_t v80 = swift_allocObject();
    v79(v80 + ((v76 + 16) & ~(unint64_t)v76), v77, v78);
    swift_retain();
    uint64_t v90 = swift_allocObject();
    *(void *)(v90 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v90 + 24) = v80;
    swift_release();
    log = Logger.logObject.getter();
    v109 = static os_log_type_t.debug.getter();
    *(void *)(v129 + 288) = 52;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v81 = *(_DWORD *)(v129 + 616);
    uint64_t v92 = swift_allocObject();
    *(unsigned char *)(v92 + 16) = 32;
    id v93 = swift_allocObject();
    *(unsigned char *)(v93 + 16) = 8;
    uint64_t v83 = swift_allocObject();
    *(void *)(v83 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v83 + 24) = v82;
    v94 = swift_allocObject();
    *(void *)(v94 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v94 + 24) = v83;
    uint64_t v95 = swift_allocObject();
    *(unsigned char *)(v95 + 16) = 0;
    uint64_t v96 = swift_allocObject();
    *(unsigned char *)(v96 + 16) = 8;
    id v85 = swift_allocObject();
    *(void *)(v85 + 16) = partial apply for implicit closure #8 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v85 + 24) = v84;
    v97 = swift_allocObject();
    *(void *)(v97 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:);
    *(void *)(v97 + 24) = v85;
    uint64_t v98 = swift_allocObject();
    *(unsigned char *)(v98 + 16) = 32;
    v99 = swift_allocObject();
    *(unsigned char *)(v99 + 16) = 8;
    v87 = swift_allocObject();
    *(void *)(v87 + 16) = partial apply for implicit closure #9 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v87 + 24) = v86;
    uint64_t v100 = swift_allocObject();
    *(void *)(v100 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v100 + 24) = v87;
    uint64_t v101 = swift_allocObject();
    *(unsigned char *)(v101 + 16) = 32;
    v102 = swift_allocObject();
    *(unsigned char *)(v102 + 16) = 8;
    uint64_t v89 = swift_allocObject();
    *(void *)(v89 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
    *(void *)(v89 + 24) = v88;
    uint64_t v103 = swift_allocObject();
    *(void *)(v103 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v103 + 24) = v89;
    uint64_t v104 = swift_allocObject();
    *(unsigned char *)(v104 + 16) = 32;
    uint64_t v105 = swift_allocObject();
    *(unsigned char *)(v105 + 16) = 8;
    uint64_t v91 = swift_allocObject();
    *(void *)(v91 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
    *(void *)(v91 + 24) = v90;
    v106 = swift_allocObject();
    *(void *)(v106 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v106 + 24) = v91;
    _allocateUninitializedArray<A>(_:)();
    v107 = v8;
    swift_retain();
    *v107 = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[1] = v92;
    swift_retain();
    v107[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[3] = v93;
    swift_retain();
    v107[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[5] = v94;
    swift_retain();
    v107[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[7] = v95;
    swift_retain();
    v107[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[9] = v96;
    swift_retain();
    v107[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[11] = v97;
    swift_retain();
    v107[12] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[13] = v98;
    swift_retain();
    v107[14] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[15] = v99;
    swift_retain();
    v107[16] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[17] = v100;
    swift_retain();
    v107[18] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[19] = v101;
    swift_retain();
    v107[20] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[21] = v102;
    swift_retain();
    v107[22] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[23] = v103;
    swift_retain();
    v107[24] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[25] = v104;
    swift_retain();
    v107[26] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[27] = v105;
    swift_retain();
    v107[28] = partial apply for closure #1 in OSLogArguments.append(_:);
    v107[29] = v106;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v109))
    {
      uint64_t v60 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v61 = createStorage<A>(capacity:type:)(0);
      uint64_t v62 = createStorage<A>(capacity:type:)(4);
      v136 = v60;
      v137 = v61;
      v138 = v62;
      serialize(_:at:)(2, &v136);
      serialize(_:at:)(5, &v136);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v92;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      if (v110) {
        return result;
      }
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v93;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v94;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v95;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v96;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v97;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v98;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v99;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v100;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v101;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v102;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v103;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v104;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v105;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v106;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      _os_log_impl(&dword_25DE00000, log, v109, "Persisting sample...\n  identifier: %s\n  value: %f\n  unit: %s\n  start: %s\n  end: %s", v60, v81);
      destroyStorage<A>(_:count:)(v61, 0, v59);
      destroyStorage<A>(_:count:)(v62, 4, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v60, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v129 + 544);
    v50 = *(void *)(v129 + 344);
    uint64_t v51 = *(void *)(v129 + 312);
    uint64_t v53 = *(void *)(v129 + 304);
    uint64_t v56 = *(id *)(v129 + 296);

    v52(v50, v51);
    outlined init with copy of QuantityPersisting(v53 + OBJC_IVAR____TtC19SiriWellnessIntents24LogQuantityIntentHandler_storage, v129 + 56);
    uint64_t v54 = *(void *)(v129 + 80);
    uint64_t v55 = *(void *)(v129 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v129 + 56), v54);
    objc_msgSend(v56, sel_value);
    uint64_t v57 = v9;
    uint64_t v58 = objc_msgSend(v56, sel_units);
    if (v58)
    {
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v47 = v10;

      uint64_t v48 = v46;
      uint64_t v49 = v47;
    }
    else
    {
      uint64_t v48 = 0;
      uint64_t v49 = 0;
    }
    *(void *)(v129 + 576) = v49;
    os_log_type_t v44 = *(void *)(v129 + 480);
    uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v55 + 16)
                                                                                               + **(int **)(v55 + 16));
    uint64_t v11 = (void *)swift_task_alloc();
    v12.n128_u64[0] = v57;
    *(void *)(v129 + 584) = v11;
    *uint64_t v11 = *(void *)(v129 + 232);
    v11[1] = LogQuantityIntentHandler.handle(intent:);
    id v13 = *(void *)(v129 + 472);
    return v45(v13, v44, v48, v49, v54, v55, v12);
  }
  else
  {
    uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v129 + 488);
    uint64_t v33 = *(void *)(v129 + 472);
    uint64_t v14 = *(void *)(v129 + 336);
    uint64_t v31 = *(void *)(v129 + 312);
    uint64_t v34 = *(void *)(v129 + 480);
    uint64_t v30 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v32(v14, v30, v31);
    swift_endAccess();
    swift_bridgeObjectRetain();
    uint32_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = v33;
    *(void *)(v36 + 24) = v34;
    unint64_t v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.error.getter();
    *(void *)(v129 + 272) = 12;
    UnsignedInteger<>.init<A>(_:)();
    id v35 = *(_DWORD *)(v129 + 608);
    uint64_t v38 = swift_allocObject();
    *(unsigned char *)(v38 + 16) = 32;
    uint64_t v39 = swift_allocObject();
    *(unsigned char *)(v39 + 16) = 8;
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v37 + 24) = v36;
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v40 + 24) = v37;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v41 = v15;
    swift_retain();
    *uint64_t v41 = partial apply for closure #1 in OSLogArguments.append(_:);
    v41[1] = v38;
    swift_retain();
    v41[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v41[3] = v39;
    swift_retain();
    v41[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v41[5] = v40;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v16 = *(void *)(v129 + 536);
      uint64_t v27 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v28 = createStorage<A>(capacity:type:)(0);
      char v29 = createStorage<A>(capacity:type:)(1);
      v131 = v27;
      v132 = v28;
      v133 = v29;
      serialize(_:at:)(2, &v131);
      serialize(_:at:)(1, &v131);
      v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v135 = v38;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v133);
      if (v16) {
        return result;
      }
      v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v135 = v39;
      closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v133);
      v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v135 = v40;
      closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v133);
      _os_log_impl(&dword_25DE00000, v42, v43, "Not authorized to write to: %s", v27, v35);
      destroyStorage<A>(_:count:)(v28, 0, v26);
      destroyStorage<A>(_:count:)(v29, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v27, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v129 + 544);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v129 + 456);
    uint64_t v22 = *(void *)(v129 + 432);
    uint64_t v21 = *(void *)(v129 + 416);
    uint64_t v23 = *(void *)(v129 + 384);
    id v18 = *(void *)(v129 + 336);
    uint64_t v19 = *(void *)(v129 + 312);

    v20(v18, v19);
    type metadata accessor for LogQuantityIntentResponse();
    uint64_t v25 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(101, 0);
    swift_bridgeObjectRelease();
    v24(v21, v23);
    v24(v22, v23);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = *(uint64_t (**)(char *))(*(void *)(v129 + 232) + 8);
    return v17(v25);
  }
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[57];
  uint64_t v4 = v0[54];
  uint64_t v3 = v0[52];
  uint64_t v5 = v0[48];
  v0[29] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  swift_bridgeObjectRelease();
  v6(v3, v5);
  v6(v4, v5);
  uint64_t v7 = v0[74];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0[29] + 8);
  return v1(v7);
}

uint64_t LogQuantityIntentHandler.handle(intent:)(char a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 232) = *v1;
  *(unsigned char *)(v3 + 620) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](LogQuantityIntentHandler.handle(intent:), 0);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #4 in LogQuantityIntentHandler.handle(intent:)()
{
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
}

id implicit closure #8 in LogQuantityIntentHandler.handle(intent:)(void *a1)
{
  return objc_msgSend(a1, sel_value);
}

uint64_t implicit closure #9 in LogQuantityIntentHandler.handle(intent:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_units);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #10 in LogQuantityIntentHandler.handle(intent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1);
}

uint64_t @objc closure #1 in LogQuantityIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  v3[4] = a3;
  v3[3] = a1;
  void v3[2] = v3;
  id v5 = a1;
  v3[5] = _Block_copy(a2);
  id v6 = a3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 48) = v7;
  void *v7 = *(void *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return LogQuantityIntentHandler.handle(intent:)((uint64_t)a1);
}

uint64_t @objc closure #1 in LogQuantityIntentHandler.handle(intent:)(void *a1)
{
  uint64_t v8 = *v1;
  aBlock = *(void (***)(void *, void *))(*v1 + 40);
  uint64_t v4 = *(void **)(*v1 + 32);
  id v5 = *(void **)(*v1 + 24);
  *(void *)(v8 + 16) = *v1;
  swift_task_dealloc();

  aBlock[2](aBlock, a1);
  _Block_release(aBlock);

  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v8 + 16) + 8);
  return v2();
}

uint64_t _runTaskForBridgedAsyncMethod(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = a1;
  uint64_t v17 = a2;
  uint64_t v15 = 0;
  uint64_t v23 = &_sIeghH_IeAgH_TRTATu;
  uint64_t v25 = &_sIeAgH_ytIeAgHr_TRTATu;
  unint64_t v16 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v26 = (char *)&v15 - v16;
  uint64_t v2 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 56))(v26, 1);
  uint64_t v19 = 48;
  uint64_t v20 = 7;
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = v17;
  id v5 = (void *)v3;
  uint64_t v6 = v18;
  uint64_t v24 = v5;
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v6;
  v5[5] = v4;
  uint64_t v21 = v5[2];
  uint64_t v22 = v5[3];
  swift_unknownObjectRetain();
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = v22;
  uint64_t v9 = v23;
  uint64_t v10 = v24;
  uint64_t v11 = (uint64_t)v25;
  uint64_t v12 = (void *)v7;
  uint64_t v13 = (uint64_t)v26;
  v12[2] = v21;
  v12[3] = v8;
  v12[4] = v9;
  v12[5] = v10;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(v13, v11, (uint64_t)v12);
  return swift_release();
}

id LogQuantityIntentHandler.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t LogQuantityIntentHandler.init()()
{
  if (!"SiriWellnessIntents.LogQuantityIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.LogQuantityIntentHandler", 44, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/LogQuantityIntentHandler.swift", 50, 2, v1, 0xFuLL, 0x14uLL);
  __break(1u);
  return result;
}

id LogQuantityIntentHandler.__deallocating_deinit()
{
  uint64_t v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HealthKitPersistor(id *a1)
{
}

uint64_t sub_25DE0DEC0()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:)()
{
  return related decl 'e' for HKErrorCode._nsError.getter(*(void **)(v0 + 16));
}

uint64_t HealthKitPersistor.isLoggingAuthorized(for:)(uint64_t a1, id a2)
{
  v2[5] = a2;
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v2[3] = a1;
  v2[4] = a2;
  id v3 = a2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 48) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = HealthKitPersistor.isLoggingAuthorized(for:);
  return isSiriAuthorizedToAccessHealthData(store:)((uint64_t)a2);
}

uint64_t HealthKitPersistor.isLoggingAuthorized(for:)(unsigned int a1)
{
  uint64_t v5 = *v1;
  uint64_t v4 = *(void **)(*v1 + 40);
  *(void *)(v5 + 16) = *v1;
  swift_task_dealloc();

  objc_super v2 = *(uint64_t (**)(void))(*(void *)(v5 + 16) + 8);
  return v2(a1);
}

id HealthKitPersistor.getHKUnit(from:)()
{
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("mmol/L", 6uLL, 1);
  char v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  if (v2) {
    return objc_msgSend(self, sel__millimolesBloodGlucosePerLiterUnit);
  }
  type metadata accessor for HKUnit();
  swift_bridgeObjectRetain();
  return @nonobjc HKUnit.__allocating_init(from:)();
}

id @nonobjc HKUnit.__allocating_init(from:)()
{
  id v1 = (id)MEMORY[0x2611C8860]();
  id v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_unitFromString_, v1);

  swift_bridgeObjectRelease();
  return v2;
}

uint64_t HealthKitPersistor.save(quantityIdentifier:value:units:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  *(void *)(v6 + 984) = a5;
  *(void *)(v6 + 976) = a4;
  *(void *)(v6 + 968) = a3;
  *(double *)(v6 + 960) = a6;
  *(void *)(v6 + 952) = a2;
  *(void *)(v6 + 944) = a1;
  *(void *)(v6 + 456) = v6;
  *(void *)(v6 + 408) = 0;
  *(void *)(v6 + 416) = 0;
  *(void *)(v6 + 464) = 0;
  *(void *)(v6 + 424) = 0;
  *(void *)(v6 + 432) = 0;
  *(void *)(v6 + 472) = 0;
  *(void *)(v6 + 488) = 0;
  *(void *)(v6 + 496) = 0;
  *(void *)(v6 + 512) = 0;
  *(void *)(v6 + 576) = 0;
  *(void *)(v6 + 584) = 0;
  *(void *)(v6 + 592) = 0;
  *(void *)(v6 + 608) = 0;
  *(void *)(v6 + 632) = 0;
  *(void *)(v6 + 656) = 0;
  *(void *)(v6 + 664) = 0;
  *(void *)(v6 + 688) = 0;
  *(void *)(v6 + 440) = 0;
  *(void *)(v6 + 448) = 0;
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v6 + 992) = v7;
  *(void *)(v6 + 1000) = *(void *)(v7 - 8);
  *(void *)(v6 + 1008) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Date();
  *(void *)(v6 + 1016) = v8;
  *(void *)(v6 + 1024) = *(void *)(v8 - 8);
  *(void *)(v6 + 1032) = swift_task_alloc();
  *(void *)(v6 + 1040) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v6 + 1048) = v9;
  *(void *)(v6 + 1056) = *(void *)(v9 - 8);
  *(void *)(v6 + 1064) = swift_task_alloc();
  *(void *)(v6 + 1072) = swift_task_alloc();
  *(void *)(v6 + 1080) = swift_task_alloc();
  *(void *)(v6 + 1088) = swift_task_alloc();
  *(void *)(v6 + 1096) = swift_task_alloc();
  *(void *)(v6 + 1104) = swift_task_alloc();
  *(void *)(v6 + 1112) = swift_task_alloc();
  *(void *)(v6 + 1120) = swift_task_alloc();
  *(void *)(v6 + 1128) = swift_task_alloc();
  *(void *)(v6 + 1136) = swift_task_alloc();
  *(void *)(v6 + 1144) = swift_task_alloc();
  *(void *)(v6 + 1152) = swift_task_alloc();
  *(void *)(v6 + 408) = a1;
  *(void *)(v6 + 416) = a2;
  *(double *)(v6 + 464) = a6;
  *(void *)(v6 + 424) = a3;
  *(void *)(v6 + 432) = a4;
  *(void *)(v6 + 472) = a5;
  return MEMORY[0x270FA2498](HealthKitPersistor.save(quantityIdentifier:value:units:), 0);
}

uint64_t HealthKitPersistor.save(quantityIdentifier:value:units:)()
{
  uint64_t v1 = *(void *)(v0 + 1152);
  uint64_t v23 = *(void *)(v0 + 1056);
  uint64_t v25 = *(void *)(v0 + 1048);
  *(void *)(v0 + 456) = v0;
  uint64_t v24 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  id v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
  *(void *)(v0 + 1160) = v2;
  *(void *)(v0 + 1168) = (v23 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v2(v1, v24, v25);
  swift_endAccess();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 480) = 2;
  *(void *)(v0 + 1176) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 1184) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 1192) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v26 = *(unsigned int *)(v0 + 1312);
  *(void *)(v0 + 1200) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v29 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v28, v27))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v19 = createStorage<A>(capacity:type:)(0);
    uint64_t v20 = createStorage<A>(capacity:type:)(0);
    *(void *)(v22 + 912) = buf;
    *(void *)(v22 + 920) = v19;
    *(void *)(v22 + 928) = v20;
    serialize(_:at:)(0, (unsigned char **)(v22 + 912));
    serialize(_:at:)(0, (unsigned char **)(v22 + 912));
    *(void *)(v22 + 936) = v29;
    uint64_t v21 = (void *)swift_task_alloc();
    v21[2] = v22 + 912;
    v21[3] = v22 + 920;
    v21[4] = v22 + 928;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v28, v27, "Starting to save quantity.", buf, v26);
    destroyStorage<A>(_:count:)(v19, 0, v17);
    destroyStorage<A>(_:count:)(v20, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v22 + 1152);
  uint64_t v11 = *(void *)(v22 + 1048);
  id v15 = *(id *)(v22 + 984);
  uint64_t v13 = *(void *)(v22 + 952);
  uint64_t v12 = *(void *)(v22 + 944);
  uint64_t v9 = *(void *)(v22 + 1056);

  id v3 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  *(void *)(v22 + 1208) = v3;
  *(void *)(v22 + 1216) = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v3(v10, v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v14 = (id)MEMORY[0x2611C8860](v12, v13);
  *(void *)(v22 + 1224) = v14;
  id v4 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(void *)(v22 + 488) = v14;
  type metadata accessor for HKQuantityType();
  id v5 = v14;
  uint64_t v16 = MEMORY[0x2611C8CE0](v14);
  *(void *)(v22 + 1232) = v16;
  *(void *)(v22 + 496) = v16;
  id v6 = v15;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v22 + 1240) = v7;
  void *v7 = *(void *)(v22 + 456);
  v7[1] = HealthKitPersistor.save(quantityIdentifier:value:units:);
  return getPreferredUnit(for:store:)(v16, (uint64_t)v15);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t (*v24)(char *);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  id v28;
  id v29;
  char *v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  uint32_t v39;
  os_log_type_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint32_t v58;
  os_log_type_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);
  id v74;
  uint32_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  id v87;
  id v88;
  char *v89;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t, uint64_t, uint64_t);
  uint32_t v98;
  os_log_type_t v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  NSString *identifier;
  uint64_t v106;
  uint64_t v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t, uint64_t);
  id v115;
  uint32_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  NSObject *v123;
  os_log_type_t v124;
  id v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, uint64_t);
  id v130;
  id v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t, uint64_t);
  id v142;
  uint32_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  NSObject *v155;
  os_log_type_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t);
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint8_t *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(uint64_t, uint64_t, uint64_t);
  uint32_t v170;
  os_log_type_t v171;
  NSObject *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void (*v176)(uint64_t, uint64_t);
  uint64_t v177;
  uint64_t v178;
  uint8_t *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(uint64_t, uint64_t, uint64_t);
  uint32_t v186;
  os_log_type_t v187;
  NSObject *log;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, uint64_t);
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint8_t *buf;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  void (*v202)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v204;
  NSObject *oslog;
  uint64_t v206;
  uint64_t v207;
  id v208;
  uint64_t v209;
  uint64_t v210;
  uint8_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t (*v214)(uint64_t, uint64_t, uint64_t);
  uint64_t v215;
  uint8_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t (*v219)(uint64_t, uint64_t, uint64_t);
  uint64_t v220;
  uint8_t *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t (*v224)(uint64_t, uint64_t, uint64_t);
  uint64_t v225;
  void *v226;
  uint64_t v227;

  v226 = v0;
  v208 = (id)v0[156];
  v0[57] = v0;
  v209 = v0[157];
  v0[158] = v208;
  v210 = v0[122];
  v0[64] = v208;
  swift_bridgeObjectRetain();
  if (v210)
  {
    uint64_t v1 = *(void *)(v207 + 976);
    v202 = *(void (**)(uint64_t, uint64_t, uint64_t))(v207 + 1160);
    id v2 = *(void *)(v207 + 1144);
    v201 = *(void *)(v207 + 1048);
    *(void *)(v207 + 440) = *(void *)(v207 + 968);
    *(void *)(v207 + 448) = v1;
    v200 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v202(v2, v200, v201);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    v204 = static os_log_type_t.debug.getter();
    *(void *)(v207 + 872) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v207 + 1356);
    v206 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v204))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v197 = createStorage<A>(capacity:type:)(0);
      v198 = createStorage<A>(capacity:type:)(0);
      *(void *)(v207 + 880) = buf;
      *(void *)(v207 + 888) = v197;
      *(void *)(v207 + 896) = v198;
      serialize(_:at:)(0, (unsigned char **)(v207 + 880));
      serialize(_:at:)(0, (unsigned char **)(v207 + 880));
      *(void *)(v207 + 904) = v206;
      v199 = (void *)swift_task_alloc();
      v199[2] = v207 + 880;
      v199[3] = v207 + 888;
      v199[4] = v207 + 896;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v209) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, oslog, v204, "Trying to convert unit to HKUnit.", buf, size);
      destroyStorage<A>(_:count:)(v197, 0, v195);
      destroyStorage<A>(_:count:)(v198, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
      v194 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      v194 = v209;
    }
    v192 = *(void (**)(uint64_t, uint64_t))(v207 + 1208);
    v190 = *(void *)(v207 + 1144);
    v191 = *(void *)(v207 + 1048);

    v192(v190, v191);
    *(void *)(v207 + 504) = HealthKitPersistor.getHKUnit(from:)();
    swift_bridgeObjectRelease();
    v193 = v194;
  }
  else
  {
    v185 = *(void (**)(uint64_t, uint64_t, uint64_t))(v207 + 1160);
    id v4 = *(void *)(v207 + 1136);
    v184 = *(void *)(v207 + 1048);
    v183 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v185(v4, v183, v184);
    swift_endAccess();
    log = Logger.logObject.getter();
    v187 = static os_log_type_t.debug.getter();
    *(void *)(v207 + 520) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v186 = *(_DWORD *)(v207 + 1316);
    v189 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v187))
    {
      v179 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v180 = createStorage<A>(capacity:type:)(0);
      v181 = createStorage<A>(capacity:type:)(0);
      *(void *)(v207 + 840) = v179;
      *(void *)(v207 + 848) = v180;
      *(void *)(v207 + 856) = v181;
      serialize(_:at:)(0, (unsigned char **)(v207 + 840));
      serialize(_:at:)(0, (unsigned char **)(v207 + 840));
      *(void *)(v207 + 864) = v189;
      v182 = (void *)swift_task_alloc();
      v182[2] = v207 + 840;
      v182[3] = v207 + 848;
      v182[4] = v207 + 856;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v209) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, log, v187, "Using preferred unit.", v179, v186);
      destroyStorage<A>(_:count:)(v180, 0, v178);
      destroyStorage<A>(_:count:)(v181, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v179, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
      v177 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      v177 = v209;
    }
    v176 = *(void (**)(uint64_t, uint64_t))(v207 + 1208);
    v174 = *(void *)(v207 + 1136);
    v175 = *(void *)(v207 + 1048);

    v176(v174, v175);
    id v5 = v208;
    *(void *)(v207 + 504) = v208;
    v193 = v177;
  }
  v169 = *(void (**)(uint64_t, uint64_t, uint64_t))(v207 + 1160);
  id v6 = *(void *)(v207 + 1128);
  v168 = *(void *)(v207 + 1048);
  v167 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v169(v6, v167, v168);
  swift_endAccess();
  v172 = Logger.logObject.getter();
  v171 = static os_log_type_t.debug.getter();
  *(void *)(v207 + 528) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v170 = *(_DWORD *)(v207 + 1320);
  v173 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v172, v171))
  {
    v163 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v164 = createStorage<A>(capacity:type:)(0);
    v165 = createStorage<A>(capacity:type:)(0);
    *(void *)(v207 + 808) = v163;
    *(void *)(v207 + 816) = v164;
    *(void *)(v207 + 824) = v165;
    serialize(_:at:)(0, (unsigned char **)(v207 + 808));
    serialize(_:at:)(0, (unsigned char **)(v207 + 808));
    *(void *)(v207 + 832) = v173;
    v166 = (void *)swift_task_alloc();
    v166[2] = v207 + 808;
    v166[3] = v207 + 816;
    v166[4] = v207 + 824;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    uint64_t result = Sequence.forEach(_:)();
    if (v193) {
      return result;
    }
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v172, v171, "Starting to convert optional HKUnit to non-optional HKUnit.", v163, v170);
    destroyStorage<A>(_:count:)(v164, 0, v162);
    destroyStorage<A>(_:count:)(v165, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v163, MEMORY[0x263F8E778]);
    swift_bridgeObjectRelease();
    v161 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v161 = v193;
  }
  v159 = *(void (**)(uint64_t, uint64_t))(v207 + 1208);
  v157 = *(void *)(v207 + 1128);
  v158 = *(void *)(v207 + 1048);

  v159(v157, v158);
  v160 = *(void **)(v207 + 504);
  *(void *)(v207 + 1272) = v160;
  uint64_t v7 = v160;
  if (!v160)
  {
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v207 + 1160);
    uint64_t v23 = *(void *)(v207 + 1072);
    uint64_t v37 = *(void *)(v207 + 1048);
    uint32_t v36 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v38(v23, v36, v37);
    swift_endAccess();
    uint64_t v41 = Logger.logObject.getter();
    uint64_t v40 = static os_log_type_t.error.getter();
    *(void *)(v207 + 536) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v39 = *(_DWORD *)(v207 + 1324);
    unint64_t v42 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v41, v40))
    {
      uint64_t v32 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v33 = createStorage<A>(capacity:type:)(0);
      uint64_t v34 = createStorage<A>(capacity:type:)(0);
      *(void *)(v207 + 544) = v32;
      *(void *)(v207 + 552) = v33;
      *(void *)(v207 + 560) = v34;
      serialize(_:at:)(0, (unsigned char **)(v207 + 544));
      serialize(_:at:)(0, (unsigned char **)(v207 + 544));
      *(void *)(v207 + 568) = v42;
      id v35 = (void *)swift_task_alloc();
      v35[2] = v207 + 544;
      v35[3] = v207 + 552;
      v35[4] = v207 + 560;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v161) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v41, v40, "Could not create an HKUnit.", v32, v39);
      destroyStorage<A>(_:count:)(v33, 0, v31);
      destroyStorage<A>(_:count:)(v34, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v32, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v28 = *(id *)(v207 + 1232);
    uint64_t v29 = *(id *)(v207 + 1224);
    os_log_type_t v27 = *(void (**)(uint64_t, uint64_t))(v207 + 1208);
    uint64_t v25 = *(void *)(v207 + 1072);
    uint64_t v26 = *(void *)(v207 + 1048);

    v27(v25, v26);
    type metadata accessor for LogQuantityIntentResponse();
    uint64_t v30 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    outlined destroy of HealthKitPersistor((id *)(v207 + 504));
    v133 = v30;
    goto LABEL_60;
  }
  uint64_t v8 = *(void **)(v207 + 1232);
  *(void *)(v207 + 576) = v160;
  if ((objc_msgSend(v8, sel_isCompatibleWithUnit_) & 1) == 0)
  {
    v142 = *(id *)(v207 + 1232);
    v141 = *(void (**)(uint64_t, uint64_t, uint64_t))(v207 + 1160);
    uint64_t v9 = *(void *)(v207 + 1120);
    v140 = *(void *)(v207 + 1048);
    v139 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v141(v9, v139, v140);
    swift_endAccess();
    uint64_t v10 = v160;
    v144 = swift_allocObject();
    *(void *)(v144 + 16) = v160;
    uint64_t v11 = v142;
    v146 = swift_allocObject();
    *(void *)(v146 + 16) = v142;
    v155 = Logger.logObject.getter();
    v156 = static os_log_type_t.error.getter();
    *(void *)(v207 + 800) = 22;
    UnsignedInteger<>.init<A>(_:)();
    v143 = *(_DWORD *)(v207 + 1352);
    v148 = swift_allocObject();
    *(unsigned char *)(v148 + 16) = 64;
    v149 = swift_allocObject();
    *(unsigned char *)(v149 + 16) = 8;
    v145 = swift_allocObject();
    *(void *)(v145 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v145 + 24) = v144;
    v150 = swift_allocObject();
    *(void *)(v150 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(void *)(v150 + 24) = v145;
    v151 = swift_allocObject();
    *(unsigned char *)(v151 + 16) = 64;
    v152 = swift_allocObject();
    *(unsigned char *)(v152 + 16) = 8;
    v147 = swift_allocObject();
    *(void *)(v147 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v147 + 24) = v146;
    v153 = swift_allocObject();
    *(void *)(v153 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(void *)(v153 + 24) = v147;
    _allocateUninitializedArray<A>(_:)();
    v154 = v12;
    swift_retain();
    *v154 = partial apply for closure #1 in OSLogArguments.append(_:);
    v154[1] = v148;
    swift_retain();
    v154[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v154[3] = v149;
    swift_retain();
    v154[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v154[5] = v150;
    swift_retain();
    v154[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v154[7] = v151;
    swift_retain();
    v154[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v154[9] = v152;
    swift_retain();
    v154[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v154[11] = v153;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v155, v156))
    {
      v136 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v137 = createStorage<A>(capacity:type:)(2);
      v138 = createStorage<A>(capacity:type:)(0);
      v221 = v136;
      v222 = v137;
      v223 = v138;
      serialize(_:at:)(2, &v221);
      serialize(_:at:)(2, &v221);
      v224 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v225 = v148;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v224, (uint64_t)&v221, (uint64_t)&v222, (uint64_t)&v223);
      if (v161) {
        return result;
      }
      v224 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v225 = v149;
      closure #1 in osLogInternal(_:log:type:)(&v224, (uint64_t)&v221, (uint64_t)&v222, (uint64_t)&v223);
      v224 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v225 = v150;
      closure #1 in osLogInternal(_:log:type:)(&v224, (uint64_t)&v221, (uint64_t)&v222, (uint64_t)&v223);
      v224 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v225 = v151;
      closure #1 in osLogInternal(_:log:type:)(&v224, (uint64_t)&v221, (uint64_t)&v222, (uint64_t)&v223);
      v224 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v225 = v152;
      closure #1 in osLogInternal(_:log:type:)(&v224, (uint64_t)&v221, (uint64_t)&v222, (uint64_t)&v223);
      v224 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v225 = v153;
      closure #1 in osLogInternal(_:log:type:)(&v224, (uint64_t)&v221, (uint64_t)&v222, (uint64_t)&v223);
      _os_log_impl(&dword_25DE00000, v155, v156, "%@ is incompatible with %@.", v136, v143);
      destroyStorage<A>(_:count:)(v137, 2, v135);
      destroyStorage<A>(_:count:)(v138, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v136, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v130 = *(id *)(v207 + 1232);
    v131 = *(id *)(v207 + 1224);
    v129 = *(void (**)(uint64_t, uint64_t))(v207 + 1208);
    v127 = *(void *)(v207 + 1120);
    v128 = *(void *)(v207 + 1048);

    v129(v127, v128);
    type metadata accessor for LogQuantityIntentResponse();
    v132 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(102, 0);

    outlined destroy of HealthKitPersistor((id *)(v207 + 504));
    v133 = v132;
LABEL_60:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(char *))(*(void *)(v207 + 456) + 8);
    return v24(v133);
  }
  *(void *)(v207 + 584) = *(void *)(v207 + 960);
  type metadata accessor for NSObject();
  v125 = objc_msgSend(self, sel_percentUnit);
  v126 = static NSObject.== infix(_:_:)();

  if (v126) {
    *(double *)(v207 + 584) = *(double *)(v207 + 960) / 100.0;
  }
  v114 = *(void (**)(uint64_t, uint64_t, uint64_t))(v207 + 1160);
  v111 = *(void *)(v207 + 1112);
  v113 = *(void *)(v207 + 1048);
  type metadata accessor for HKQuantity();
  uint64_t v13 = v160;
  v115 = @nonobjc HKQuantity.__allocating_init(unit:doubleValue:)(v160, *(double *)(v207 + 584));
  *(void *)(v207 + 1280) = v115;
  *(void *)(v207 + 592) = v115;
  v112 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v114(v111, v112, v113);
  swift_endAccess();
  id v14 = v115;
  v117 = swift_allocObject();
  *(void *)(v117 + 16) = v115;
  v123 = Logger.logObject.getter();
  v124 = static os_log_type_t.debug.getter();
  *(void *)(v207 + 600) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v116 = *(_DWORD *)(v207 + 1328);
  v119 = swift_allocObject();
  *(unsigned char *)(v119 + 16) = 64;
  v120 = swift_allocObject();
  *(unsigned char *)(v120 + 16) = 8;
  v118 = swift_allocObject();
  *(void *)(v118 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v118 + 24) = v117;
  v121 = swift_allocObject();
  *(void *)(v121 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v121 + 24) = v118;
  _allocateUninitializedArray<A>(_:)();
  v122 = v15;
  swift_retain();
  *v122 = partial apply for closure #1 in OSLogArguments.append(_:);
  v122[1] = v119;
  swift_retain();
  v122[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v122[3] = v120;
  swift_retain();
  v122[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v122[5] = v121;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v123, v124))
  {
    v108 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v109 = createStorage<A>(capacity:type:)(1);
    v110 = createStorage<A>(capacity:type:)(0);
    v216 = v108;
    v217 = v109;
    v218 = v110;
    serialize(_:at:)(2, &v216);
    serialize(_:at:)(1, &v216);
    v219 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v220 = v119;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v219, (uint64_t)&v216, (uint64_t)&v217, (uint64_t)&v218);
    if (v161) {
      return result;
    }
    v219 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v220 = v120;
    closure #1 in osLogInternal(_:log:type:)(&v219, (uint64_t)&v216, (uint64_t)&v217, (uint64_t)&v218);
    v219 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v220 = v121;
    closure #1 in osLogInternal(_:log:type:)(&v219, (uint64_t)&v216, (uint64_t)&v217, (uint64_t)&v218);
    _os_log_impl(&dword_25DE00000, v123, v124, "Created HKQuantity: %@", v108, v116);
    destroyStorage<A>(_:count:)(v109, 1, v107);
    destroyStorage<A>(_:count:)(v110, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v108, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    v106 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v106 = v161;
  }
  identifier = *(NSString **)(v207 + 1224);
  uint64_t v104 = *(void (**)(uint64_t, uint64_t))(v207 + 1208);
  v102 = *(void *)(v207 + 1112);
  uint64_t v103 = *(void *)(v207 + 1048);

  v104(v102, v103);
  if (!validateQuantity(identifier:quantity:)(identifier, (HKQuantity)v115))
  {
    v97 = *(void (**)(uint64_t, uint64_t, uint64_t))(v207 + 1160);
    uint64_t v16 = *(void *)(v207 + 1104);
    uint64_t v96 = *(void *)(v207 + 1048);
    uint64_t v95 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v97(v16, v95, v96);
    swift_endAccess();
    uint64_t v100 = Logger.logObject.getter();
    v99 = static os_log_type_t.error.getter();
    *(void *)(v207 + 760) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v98 = *(_DWORD *)(v207 + 1348);
    uint64_t v101 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v100, v99))
    {
      uint64_t v91 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v92 = createStorage<A>(capacity:type:)(0);
      id v93 = createStorage<A>(capacity:type:)(0);
      *(void *)(v207 + 768) = v91;
      *(void *)(v207 + 776) = v92;
      *(void *)(v207 + 784) = v93;
      serialize(_:at:)(0, (unsigned char **)(v207 + 768));
      serialize(_:at:)(0, (unsigned char **)(v207 + 768));
      *(void *)(v207 + 792) = v101;
      v94 = (void *)swift_task_alloc();
      v94[2] = v207 + 768;
      v94[3] = v207 + 776;
      v94[4] = v207 + 784;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v106) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v100, v99, "Quantity validation failed - value outside valid bounds.", v91, v98);
      destroyStorage<A>(_:count:)(v92, 0, v90);
      destroyStorage<A>(_:count:)(v93, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v91, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v87 = *(id *)(v207 + 1232);
    uint64_t v88 = *(id *)(v207 + 1224);
    uint64_t v86 = *(void (**)(uint64_t, uint64_t))(v207 + 1208);
    uint64_t v84 = *(void *)(v207 + 1104);
    id v85 = *(void *)(v207 + 1048);

    v86(v84, v85);
    type metadata accessor for LogQuantityIntentResponse();
    uint64_t v89 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(102, 0);

    outlined destroy of HealthKitPersistor((id *)(v207 + 504));
    v133 = v89;
    goto LABEL_60;
  }
  uint64_t v67 = *(id *)(v207 + 1232);
  uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t))(v207 + 1160);
  uint64_t v70 = *(void *)(v207 + 1096);
  uint64_t v72 = *(void *)(v207 + 1048);
  v68 = *(void *)(v207 + 1040);
  os_log_type_t v69 = *(void *)(v207 + 1032);
  type metadata accessor for HKQuantitySample();
  uint64_t v17 = v67;
  uint64_t v18 = v115;
  Date.init()();
  Date.init()();
  v74 = @nonobjc HKQuantitySample.__allocating_init(type:quantity:start:end:)(v67, v115, v68, v69);
  *(void *)(v207 + 1288) = v74;
  *(void *)(v207 + 608) = v74;
  uint64_t v71 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v73(v70, v71, v72);
  swift_endAccess();
  uint64_t v19 = v74;
  id v76 = swift_allocObject();
  *(void *)(v76 + 16) = v74;
  uint64_t v82 = Logger.logObject.getter();
  uint64_t v83 = static os_log_type_t.debug.getter();
  *(void *)(v207 + 616) = 12;
  UnsignedInteger<>.init<A>(_:)();
  id v75 = *(_DWORD *)(v207 + 1332);
  v78 = swift_allocObject();
  *(unsigned char *)(v78 + 16) = 64;
  uint64_t v79 = swift_allocObject();
  *(unsigned char *)(v79 + 16) = 8;
  uint64_t v77 = swift_allocObject();
  *(void *)(v77 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v77 + 24) = v76;
  uint64_t v80 = swift_allocObject();
  *(void *)(v80 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v80 + 24) = v77;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v81 = v20;
  swift_retain();
  *uint64_t v81 = partial apply for closure #1 in OSLogArguments.append(_:);
  v81[1] = v78;
  swift_retain();
  v81[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v81[3] = v79;
  swift_retain();
  v81[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v81[5] = v80;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v82, v83))
  {
    uint64_t v64 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v65 = createStorage<A>(capacity:type:)(1);
    uint64_t v66 = createStorage<A>(capacity:type:)(0);
    v211 = v64;
    v212 = v65;
    v213 = v66;
    serialize(_:at:)(2, &v211);
    serialize(_:at:)(1, &v211);
    v214 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v215 = v78;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v214, (uint64_t)&v211, (uint64_t)&v212, (uint64_t)&v213);
    if (v106) {
      return result;
    }
    v214 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v215 = v79;
    closure #1 in osLogInternal(_:log:type:)(&v214, (uint64_t)&v211, (uint64_t)&v212, (uint64_t)&v213);
    v214 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v215 = v80;
    closure #1 in osLogInternal(_:log:type:)(&v214, (uint64_t)&v211, (uint64_t)&v212, (uint64_t)&v213);
    _os_log_impl(&dword_25DE00000, v82, v83, "Created HKQuantitySample: %@", v64, v75);
    destroyStorage<A>(_:count:)(v65, 1, v63);
    destroyStorage<A>(_:count:)(v66, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v64, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v62 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v62 = v106;
  }
  uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v207 + 1208);
  uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v207 + 1160);
  uint64_t v53 = *(void *)(v207 + 1096);
  uint64_t v21 = *(void *)(v207 + 1088);
  uint64_t v56 = *(void *)(v207 + 1048);

  v54(v53, v56);
  uint64_t v55 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v57(v21, v55, v56);
  swift_endAccess();
  uint64_t v60 = Logger.logObject.getter();
  uint64_t v59 = static os_log_type_t.debug.getter();
  *(void *)(v207 + 624) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v58 = *(_DWORD *)(v207 + 1336);
  uint64_t v61 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v60, v59))
  {
    uint64_t v49 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v50 = createStorage<A>(capacity:type:)(0);
    uint64_t v51 = createStorage<A>(capacity:type:)(0);
    *(void *)(v207 + 728) = v49;
    *(void *)(v207 + 736) = v50;
    *(void *)(v207 + 744) = v51;
    serialize(_:at:)(0, (unsigned char **)(v207 + 728));
    serialize(_:at:)(0, (unsigned char **)(v207 + 728));
    *(void *)(v207 + 752) = v61;
    uint64_t v52 = (void *)swift_task_alloc();
    v52[2] = v207 + 728;
    v52[3] = v207 + 736;
    v52[4] = v207 + 744;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    uint64_t result = Sequence.forEach(_:)();
    if (v62) {
      return result;
    }
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v60, v59, "Trying to save to store.", v49, v58);
    destroyStorage<A>(_:count:)(v50, 0, v48);
    destroyStorage<A>(_:count:)(v51, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v49, MEMORY[0x263F8E778]);
    swift_bridgeObjectRelease();
    uint64_t v47 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v47 = v62;
  }
  *(void *)(v207 + 1296) = v47;
  uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v207 + 1208);
  v43 = *(void *)(v207 + 1088);
  os_log_type_t v44 = *(void *)(v207 + 1048);
  uint64_t v46 = *(id *)(v207 + 984);

  v45(v43, v44);
  uint64_t v22 = v46;
  *(void *)(v207 + 16) = *(void *)(v207 + 456);
  *(void *)(v207 + 56) = v134;
  *(void *)(v207 + 24) = HealthKitPersistor.save(quantityIdentifier:value:units:);
  *(void *)(v207 + 112) = swift_continuation_init();
  *(void *)(v207 + 80) = MEMORY[0x263EF8330];
  *(_DWORD *)(v207 + 88) = 0x40000000;
  *(_DWORD *)(v207 + 92) = 0;
  *(void *)(v207 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) @Sendable (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
  *(void *)(v207 + 104) = &block_descriptor;
  objc_msgSend(v46, sel_saveObject_withCompletion_, v74);
  return __swift_continuation_await_point();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  id v4 = *v0;
  id v5 = *v0;
  *(void *)(v5 + 456) = *v0;
  uint64_t v1 = *(void *)(v4 + 48);
  *(void *)(v5 + 1304) = v1;
  if (v1)
  {
    id v2 = HealthKitPersistor.save(quantityIdentifier:value:units:);
  }
  else
  {
    id v2 = HealthKitPersistor.save(quantityIdentifier:value:units:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t result;
  id v5;
  id v6;
  double v7;
  double v8;
  id v9;
  Swift::String v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t (*v16)(char *);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Class v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  id v39;
  Class isa;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  id v44;
  Class v45;
  id v46;
  id v47;
  double v48;
  Swift::Double value;
  id store;
  char *v51;
  id v52;
  void *v53;
  uint64_t v54;
  HKUnit v55;
  uint64_t v56;
  uint8_t *buf;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint32_t v65;
  os_log_type_t v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  HKHealthStore_optional v70;
  Swift::Double_optional v71;

  uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1160);
  uint64_t v1 = *(void *)(v0 + 1080);
  uint64_t v63 = *(void *)(v0 + 1048);
  id v2 = *(void **)(v0 + 984);
  *(void *)(v0 + 456) = v0;

  uint64_t v62 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v64(v1, v62, v63);
  swift_endAccess();
  uint64_t v67 = Logger.logObject.getter();
  uint64_t v66 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 648) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v65 = *(_DWORD *)(v0 + 1344);
  v68 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v67, v66))
  {
    id v3 = *(void *)(v61 + 1296);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v58 = createStorage<A>(capacity:type:)(0);
    uint64_t v59 = createStorage<A>(capacity:type:)(0);
    *(void *)(v61 + 696) = buf;
    *(void *)(v61 + 704) = v58;
    *(void *)(v61 + 712) = v59;
    serialize(_:at:)(0, (unsigned char **)(v61 + 696));
    serialize(_:at:)(0, (unsigned char **)(v61 + 696));
    *(void *)(v61 + 720) = v68;
    uint64_t v60 = (void *)swift_task_alloc();
    v60[2] = v61 + 696;
    v60[3] = v61 + 704;
    v60[4] = v61 + 712;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    uint64_t result = Sequence.forEach(_:)();
    if (v3) {
      return result;
    }
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v67, v66, "Getting intent response.", buf, v65);
    destroyStorage<A>(_:count:)(v58, 0, v56);
    destroyStorage<A>(_:count:)(v59, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v46 = *(id *)(v61 + 1288);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v61 + 1208);
  id v35 = *(void *)(v61 + 1080);
  uint32_t v36 = *(void *)(v61 + 1048);
  uint64_t v41 = *(void *)(v61 + 1040);
  unint64_t v42 = *(void *)(v61 + 1016);
  store = *(id *)(v61 + 984);
  v55.super.Class isa = *(Class *)(v61 + 1272);
  uint64_t v38 = *(void *)(v61 + 1024);

  v37(v35, v36);
  type metadata accessor for LogQuantityIntentResponse();
  uint64_t v51 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(4, 0);
  *(void *)(v61 + 656) = v51;
  id v5 = v46;
  uint64_t v39 = objc_msgSend(v46, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  Class isa = Date._bridgeToObjectiveC()().super.isa;

  v43 = *(void (**)(uint64_t, uint64_t))(v38 + 8);
  v43(v41, v42);

  objc_msgSend(v51, sel_setStart_, isa);
  id v6 = v46;
  os_log_type_t v44 = objc_msgSend(v46, sel_endDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = Date._bridgeToObjectiveC()().super.isa;

  v43(v41, v42);
  objc_msgSend(v51, sel_setEnd_, v45);

  uint64_t v47 = objc_msgSend(v46, sel_quantity);
  objc_msgSend(v47, sel_doubleValueForUnit_, v55.super.isa);
  uint64_t v48 = v7;

  objc_msgSend(v51, sel_setDoubleValue_, v48);
  objc_msgSend(v51, sel_doubleValue);
  value = v8;
  uint64_t v9 = store;
  v71.value = value;
  v70.is_nil = (char)store;
  v71.is_nil = LOBYTE(value);
  v70.value.super.Class isa = 0;
  uint64_t v10 = localizedUnitName(for:value:store:)(v55, v71, v70);

  uint64_t v52 = (id)MEMORY[0x2611C8860](v10._countAndFlagsBits, v10._object);
  swift_bridgeObjectRelease();
  objc_msgSend(v51, sel_setUnits_, v52);

  type metadata accessor for HKUnit();
  uint64_t v54 = _allocateUninitializedArray<A>(_:)();
  uint64_t v53 = v11;
  *uint64_t v11 = objc_msgSend(self, sel_countUnit);
  v53[1] = objc_msgSend(self, sel__countPerMinuteUnit);
  v53[2] = objc_msgSend(self, sel_percentUnit);
  _finalizeUninitializedArray<A>(_:)();
  *(void *)(v61 + 664) = v54;
  *(void *)(v61 + 672) = v54;
  *(HKUnit *)(v61 + 680) = v55;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUnit]);
  lazy protocol witness table accessor for type [HKUnit] and conformance [A]();
  lazy protocol witness table accessor for type HKUnit and conformance NSObject();
  if (Sequence<>.contains(_:)())
  {
    uint64_t v32 = *(id *)(v61 + 1232);
    uint64_t v33 = *(id *)(v61 + 984);
    uint64_t v12 = v33;
    uint64_t v34 = objc_msgSend(v32, sel_hk_metadataValueDisplayTypeInStore_, v33);

    if (v34)
    {
      uint64_t v28 = *(id *)(v61 + 984);
      *(void *)(v61 + 688) = v34;
      uint64_t v13 = v28;
      uint64_t v29 = localizedUnitName(for:store:)((uint64_t)v34, v28);
      uint64_t v30 = v14;

      uint64_t v31 = (id)MEMORY[0x2611C8860](v29, v30);
      swift_bridgeObjectRelease();
      objc_msgSend(v51, sel_setUnits_, v31);
    }
  }
  uint64_t v22 = *(id *)(v61 + 1288);
  uint64_t v23 = *(id *)(v61 + 1280);
  uint64_t v25 = *(id *)(v61 + 1264);
  uint64_t v26 = *(id *)(v61 + 1232);
  os_log_type_t v27 = *(id *)(v61 + 1224);
  uint64_t v18 = *(void *)(v61 + 1008);
  uint64_t v19 = *(void *)(v61 + 992);
  uint64_t v24 = *(id *)(v61 + 1272);
  uint64_t v17 = *(void *)(v61 + 1000);
  id v15 = v22;
  uint64_t v20 = objc_msgSend(v22, sel_UUID);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = UUID._bridgeToObjectiveC()().super.isa;

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
  objc_msgSend(v51, sel_setUuidOfLastSavedSample_, v21);

  swift_bridgeObjectRelease();
  outlined destroy of HealthKitPersistor((id *)(v61 + 504));

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(char *))(*(void *)(v61 + 456) + 8);
  return v16(v51);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v24;
  uint64_t (*v25)(char *);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  id v29;
  id v30;
  char *v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint32_t v40;
  os_log_type_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  id v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint32_t v58;
  os_log_type_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  id v73;
  uint32_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  id v86;
  id v87;
  char *v88;
  uint64_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, uint64_t);
  uint32_t v97;
  os_log_type_t v98;
  NSObject *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t);
  NSString *identifier;
  uint64_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t, uint64_t);
  id v113;
  uint32_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  NSObject *v121;
  os_log_type_t v122;
  id v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  id v128;
  id v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint8_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void (*v139)(uint64_t, uint64_t, uint64_t);
  id v140;
  uint32_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  NSObject *v153;
  os_log_type_t v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(uint64_t, uint64_t);
  void *v158;
  uint64_t v159;
  uint8_t *v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t, uint64_t, uint64_t);
  uint32_t v167;
  os_log_type_t v168;
  NSObject *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void (*v173)(uint64_t, uint64_t);
  uint64_t v174;
  uint8_t *v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(uint64_t, uint64_t, uint64_t);
  uint32_t v182;
  os_log_type_t v183;
  NSObject *log;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void (*v188)(uint64_t, uint64_t);
  uint64_t v189;
  uint8_t *buf;
  uint64_t v191;
  uint64_t v192;
  void *v193;
  uint64_t v194;
  uint64_t v195;
  void (*v196)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v198;
  NSObject *oslog;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  uint64_t v203;
  uint8_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t (*v207)(uint64_t, uint64_t, uint64_t);
  uint64_t v208;
  uint8_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t (*v212)(uint64_t, uint64_t, uint64_t);
  uint64_t v213;
  uint8_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t (*v217)(uint64_t, uint64_t, uint64_t);
  uint64_t v218;
  void *v219;
  uint64_t v220;

  v219 = v0;
  v202 = (void *)v0[157];
  uint64_t v1 = (void *)v0[123];
  v0[57] = v0;

  v0[158] = 0;
  v203 = v0[122];
  v0[64] = 0;
  swift_bridgeObjectRetain();
  if (v203)
  {
    id v2 = *(void *)(v201 + 976);
    v196 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1160);
    id v3 = *(void *)(v201 + 1144);
    v195 = *(void *)(v201 + 1048);
    *(void *)(v201 + 440) = *(void *)(v201 + 968);
    *(void *)(v201 + 448) = v2;
    v194 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v196(v3, v194, v195);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    v198 = static os_log_type_t.debug.getter();
    *(void *)(v201 + 872) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v201 + 1356);
    v200 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v198))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v189 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v191 = createStorage<A>(capacity:type:)(0);
      v192 = createStorage<A>(capacity:type:)(0);
      *(void *)(v201 + 880) = buf;
      *(void *)(v201 + 888) = v191;
      *(void *)(v201 + 896) = v192;
      serialize(_:at:)(0, (unsigned char **)(v201 + 880));
      serialize(_:at:)(0, (unsigned char **)(v201 + 880));
      *(void *)(v201 + 904) = v200;
      v193 = (void *)swift_task_alloc();
      v193[2] = v201 + 880;
      v193[3] = v201 + 888;
      v193[4] = v201 + 896;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, oslog, v198, "Trying to convert unit to HKUnit.", buf, size);
      destroyStorage<A>(_:count:)(v191, 0, v189);
      destroyStorage<A>(_:count:)(v192, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    v188 = *(void (**)(uint64_t, uint64_t))(v201 + 1208);
    v186 = *(void *)(v201 + 1144);
    v187 = *(void *)(v201 + 1048);

    v188(v186, v187);
    *(void *)(v201 + 504) = HealthKitPersistor.getHKUnit(from:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    v181 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1160);
    id v4 = *(void *)(v201 + 1136);
    v180 = *(void *)(v201 + 1048);
    v179 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v181(v4, v179, v180);
    swift_endAccess();
    log = Logger.logObject.getter();
    v183 = static os_log_type_t.debug.getter();
    *(void *)(v201 + 520) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v182 = *(_DWORD *)(v201 + 1316);
    v185 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v183))
    {
      v175 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v176 = createStorage<A>(capacity:type:)(0);
      v177 = createStorage<A>(capacity:type:)(0);
      *(void *)(v201 + 840) = v175;
      *(void *)(v201 + 848) = v176;
      *(void *)(v201 + 856) = v177;
      serialize(_:at:)(0, (unsigned char **)(v201 + 840));
      serialize(_:at:)(0, (unsigned char **)(v201 + 840));
      *(void *)(v201 + 864) = v185;
      v178 = (void *)swift_task_alloc();
      v178[2] = v201 + 840;
      v178[3] = v201 + 848;
      v178[4] = v201 + 856;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, log, v183, "Using preferred unit.", v175, v182);
      destroyStorage<A>(_:count:)(v176, 0, v174);
      destroyStorage<A>(_:count:)(v177, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v175, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    v173 = *(void (**)(uint64_t, uint64_t))(v201 + 1208);
    v171 = *(void *)(v201 + 1136);
    v172 = *(void *)(v201 + 1048);

    v173(v171, v172);
    id v5 = 0;
    *(void *)(v201 + 504) = 0;
  }
  v166 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1160);
  id v6 = *(void *)(v201 + 1128);
  v165 = *(void *)(v201 + 1048);
  v164 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v166(v6, v164, v165);
  swift_endAccess();
  v169 = Logger.logObject.getter();
  v168 = static os_log_type_t.debug.getter();
  *(void *)(v201 + 528) = 2;
  UnsignedInteger<>.init<A>(_:)();
  v167 = *(_DWORD *)(v201 + 1320);
  v170 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v169, v168))
  {
    v160 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v161 = createStorage<A>(capacity:type:)(0);
    v162 = createStorage<A>(capacity:type:)(0);
    *(void *)(v201 + 808) = v160;
    *(void *)(v201 + 816) = v161;
    *(void *)(v201 + 824) = v162;
    serialize(_:at:)(0, (unsigned char **)(v201 + 808));
    serialize(_:at:)(0, (unsigned char **)(v201 + 808));
    *(void *)(v201 + 832) = v170;
    v163 = (void *)swift_task_alloc();
    v163[2] = v201 + 808;
    v163[3] = v201 + 816;
    v163[4] = v201 + 824;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v169, v168, "Starting to convert optional HKUnit to non-optional HKUnit.", v160, v167);
    destroyStorage<A>(_:count:)(v161, 0, v159);
    destroyStorage<A>(_:count:)(v162, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v160, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  v157 = *(void (**)(uint64_t, uint64_t))(v201 + 1208);
  v155 = *(void *)(v201 + 1128);
  v156 = *(void *)(v201 + 1048);

  v157(v155, v156);
  v158 = *(void **)(v201 + 504);
  *(void *)(v201 + 1272) = v158;
  uint64_t v7 = v158;
  if (!v158)
  {
    uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1160);
    uint64_t v24 = *(void *)(v201 + 1072);
    uint64_t v38 = *(void *)(v201 + 1048);
    uint64_t v37 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v39(v24, v37, v38);
    swift_endAccess();
    unint64_t v42 = Logger.logObject.getter();
    uint64_t v41 = static os_log_type_t.error.getter();
    *(void *)(v201 + 536) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v40 = *(_DWORD *)(v201 + 1324);
    v43 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v42, v41))
    {
      uint64_t v33 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v34 = createStorage<A>(capacity:type:)(0);
      id v35 = createStorage<A>(capacity:type:)(0);
      *(void *)(v201 + 544) = v33;
      *(void *)(v201 + 552) = v34;
      *(void *)(v201 + 560) = v35;
      serialize(_:at:)(0, (unsigned char **)(v201 + 544));
      serialize(_:at:)(0, (unsigned char **)(v201 + 544));
      *(void *)(v201 + 568) = v43;
      uint32_t v36 = (void *)swift_task_alloc();
      v36[2] = v201 + 544;
      v36[3] = v201 + 552;
      v36[4] = v201 + 560;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v42, v41, "Could not create an HKUnit.", v33, v40);
      destroyStorage<A>(_:count:)(v34, 0, v32);
      destroyStorage<A>(_:count:)(v35, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v33, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v29 = *(id *)(v201 + 1232);
    uint64_t v30 = *(id *)(v201 + 1224);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v201 + 1208);
    uint64_t v26 = *(void *)(v201 + 1072);
    os_log_type_t v27 = *(void *)(v201 + 1048);

    v28(v26, v27);
    type metadata accessor for LogQuantityIntentResponse();
    uint64_t v31 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    outlined destroy of HealthKitPersistor((id *)(v201 + 504));
    v131 = v31;
    goto LABEL_36;
  }
  uint64_t v8 = *(void **)(v201 + 1232);
  *(void *)(v201 + 576) = v158;
  if ((objc_msgSend(v8, sel_isCompatibleWithUnit_) & 1) == 0)
  {
    v140 = *(id *)(v201 + 1232);
    v139 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1160);
    uint64_t v9 = *(void *)(v201 + 1120);
    v138 = *(void *)(v201 + 1048);
    v137 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v139(v9, v137, v138);
    swift_endAccess();
    uint64_t v10 = v158;
    v142 = swift_allocObject();
    *(void *)(v142 + 16) = v158;
    uint64_t v11 = v140;
    v144 = swift_allocObject();
    *(void *)(v144 + 16) = v140;
    v153 = Logger.logObject.getter();
    v154 = static os_log_type_t.error.getter();
    *(void *)(v201 + 800) = 22;
    UnsignedInteger<>.init<A>(_:)();
    v141 = *(_DWORD *)(v201 + 1352);
    v146 = swift_allocObject();
    *(unsigned char *)(v146 + 16) = 64;
    v147 = swift_allocObject();
    *(unsigned char *)(v147 + 16) = 8;
    v143 = swift_allocObject();
    *(void *)(v143 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v143 + 24) = v142;
    v148 = swift_allocObject();
    *(void *)(v148 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(void *)(v148 + 24) = v143;
    v149 = swift_allocObject();
    *(unsigned char *)(v149 + 16) = 64;
    v150 = swift_allocObject();
    *(unsigned char *)(v150 + 16) = 8;
    v145 = swift_allocObject();
    *(void *)(v145 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v145 + 24) = v144;
    v151 = swift_allocObject();
    *(void *)(v151 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(void *)(v151 + 24) = v145;
    _allocateUninitializedArray<A>(_:)();
    v152 = v12;
    swift_retain();
    *v152 = partial apply for closure #1 in OSLogArguments.append(_:);
    v152[1] = v146;
    swift_retain();
    v152[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v152[3] = v147;
    swift_retain();
    v152[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v152[5] = v148;
    swift_retain();
    v152[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v152[7] = v149;
    swift_retain();
    v152[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v152[9] = v150;
    swift_retain();
    v152[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v152[11] = v151;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v153, v154))
    {
      v134 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v135 = createStorage<A>(capacity:type:)(2);
      v136 = createStorage<A>(capacity:type:)(0);
      v214 = v134;
      v215 = v135;
      v216 = v136;
      serialize(_:at:)(2, &v214);
      serialize(_:at:)(2, &v214);
      v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v218 = v146;
      closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
      v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v218 = v147;
      closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
      v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v218 = v148;
      closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
      v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v218 = v149;
      closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
      v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v218 = v150;
      closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
      v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v218 = v151;
      closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
      _os_log_impl(&dword_25DE00000, v153, v154, "%@ is incompatible with %@.", v134, v141);
      destroyStorage<A>(_:count:)(v135, 2, v133);
      destroyStorage<A>(_:count:)(v136, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v134, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v128 = *(id *)(v201 + 1232);
    v129 = *(id *)(v201 + 1224);
    v127 = *(void (**)(uint64_t, uint64_t))(v201 + 1208);
    v125 = *(void *)(v201 + 1120);
    v126 = *(void *)(v201 + 1048);

    v127(v125, v126);
    type metadata accessor for LogQuantityIntentResponse();
    v130 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(102, 0);

    outlined destroy of HealthKitPersistor((id *)(v201 + 504));
    v131 = v130;
LABEL_36:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(char *))(*(void *)(v201 + 456) + 8);
    return v25(v131);
  }
  *(void *)(v201 + 584) = *(void *)(v201 + 960);
  type metadata accessor for NSObject();
  v123 = objc_msgSend(self, sel_percentUnit);
  v124 = static NSObject.== infix(_:_:)();

  if (v124) {
    *(double *)(v201 + 584) = *(double *)(v201 + 960) / 100.0;
  }
  v112 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1160);
  v109 = *(void *)(v201 + 1112);
  v111 = *(void *)(v201 + 1048);
  type metadata accessor for HKQuantity();
  uint64_t v13 = v158;
  v113 = @nonobjc HKQuantity.__allocating_init(unit:doubleValue:)(v158, *(double *)(v201 + 584));
  *(void *)(v201 + 1280) = v113;
  *(void *)(v201 + 592) = v113;
  v110 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v112(v109, v110, v111);
  swift_endAccess();
  id v14 = v113;
  v115 = swift_allocObject();
  *(void *)(v115 + 16) = v113;
  v121 = Logger.logObject.getter();
  v122 = static os_log_type_t.debug.getter();
  *(void *)(v201 + 600) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v114 = *(_DWORD *)(v201 + 1328);
  v117 = swift_allocObject();
  *(unsigned char *)(v117 + 16) = 64;
  v118 = swift_allocObject();
  *(unsigned char *)(v118 + 16) = 8;
  v116 = swift_allocObject();
  *(void *)(v116 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v116 + 24) = v115;
  v119 = swift_allocObject();
  *(void *)(v119 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v119 + 24) = v116;
  _allocateUninitializedArray<A>(_:)();
  v120 = v15;
  swift_retain();
  *v120 = partial apply for closure #1 in OSLogArguments.append(_:);
  v120[1] = v117;
  swift_retain();
  v120[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v120[3] = v118;
  swift_retain();
  v120[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v120[5] = v119;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v121, v122))
  {
    v106 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v107 = createStorage<A>(capacity:type:)(1);
    v108 = createStorage<A>(capacity:type:)(0);
    v209 = v106;
    v210 = v107;
    v211 = v108;
    serialize(_:at:)(2, &v209);
    serialize(_:at:)(1, &v209);
    v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v213 = v117;
    closure #1 in osLogInternal(_:log:type:)(&v212, (uint64_t)&v209, (uint64_t)&v210, (uint64_t)&v211);
    v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v213 = v118;
    closure #1 in osLogInternal(_:log:type:)(&v212, (uint64_t)&v209, (uint64_t)&v210, (uint64_t)&v211);
    v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v213 = v119;
    closure #1 in osLogInternal(_:log:type:)(&v212, (uint64_t)&v209, (uint64_t)&v210, (uint64_t)&v211);
    _os_log_impl(&dword_25DE00000, v121, v122, "Created HKQuantity: %@", v106, v114);
    destroyStorage<A>(_:count:)(v107, 1, v105);
    destroyStorage<A>(_:count:)(v108, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v106, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  identifier = *(NSString **)(v201 + 1224);
  uint64_t v103 = *(void (**)(uint64_t, uint64_t))(v201 + 1208);
  uint64_t v101 = *(void *)(v201 + 1112);
  v102 = *(void *)(v201 + 1048);

  v103(v101, v102);
  if (!validateQuantity(identifier:quantity:)(identifier, (HKQuantity)v113))
  {
    uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1160);
    uint64_t v16 = *(void *)(v201 + 1104);
    uint64_t v95 = *(void *)(v201 + 1048);
    v94 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v96(v16, v94, v95);
    swift_endAccess();
    v99 = Logger.logObject.getter();
    uint64_t v98 = static os_log_type_t.error.getter();
    *(void *)(v201 + 760) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v97 = *(_DWORD *)(v201 + 1348);
    uint64_t v100 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v99, v98))
    {
      uint64_t v90 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v91 = createStorage<A>(capacity:type:)(0);
      uint64_t v92 = createStorage<A>(capacity:type:)(0);
      *(void *)(v201 + 768) = v90;
      *(void *)(v201 + 776) = v91;
      *(void *)(v201 + 784) = v92;
      serialize(_:at:)(0, (unsigned char **)(v201 + 768));
      serialize(_:at:)(0, (unsigned char **)(v201 + 768));
      *(void *)(v201 + 792) = v100;
      id v93 = (void *)swift_task_alloc();
      v93[2] = v201 + 768;
      v93[3] = v201 + 776;
      v93[4] = v201 + 784;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v99, v98, "Quantity validation failed - value outside valid bounds.", v90, v97);
      destroyStorage<A>(_:count:)(v91, 0, v89);
      destroyStorage<A>(_:count:)(v92, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v90, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v86 = *(id *)(v201 + 1232);
    v87 = *(id *)(v201 + 1224);
    id v85 = *(void (**)(uint64_t, uint64_t))(v201 + 1208);
    uint64_t v83 = *(void *)(v201 + 1104);
    uint64_t v84 = *(void *)(v201 + 1048);

    v85(v83, v84);
    type metadata accessor for LogQuantityIntentResponse();
    uint64_t v88 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(102, 0);

    outlined destroy of HealthKitPersistor((id *)(v201 + 504));
    v131 = v88;
    goto LABEL_36;
  }
  uint64_t v66 = *(id *)(v201 + 1232);
  uint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1160);
  os_log_type_t v69 = *(void *)(v201 + 1096);
  uint64_t v71 = *(void *)(v201 + 1048);
  uint64_t v67 = *(void *)(v201 + 1040);
  v68 = *(void *)(v201 + 1032);
  type metadata accessor for HKQuantitySample();
  uint64_t v17 = v66;
  uint64_t v18 = v113;
  Date.init()();
  Date.init()();
  uint64_t v73 = @nonobjc HKQuantitySample.__allocating_init(type:quantity:start:end:)(v66, v113, v67, v68);
  *(void *)(v201 + 1288) = v73;
  *(void *)(v201 + 608) = v73;
  uint64_t v70 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v72(v69, v70, v71);
  swift_endAccess();
  uint64_t v19 = v73;
  id v75 = swift_allocObject();
  *(void *)(v75 + 16) = v73;
  uint64_t v81 = Logger.logObject.getter();
  uint64_t v82 = static os_log_type_t.debug.getter();
  *(void *)(v201 + 616) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v74 = *(_DWORD *)(v201 + 1332);
  uint64_t v77 = swift_allocObject();
  *(unsigned char *)(v77 + 16) = 64;
  v78 = swift_allocObject();
  *(unsigned char *)(v78 + 16) = 8;
  id v76 = swift_allocObject();
  *(void *)(v76 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v76 + 24) = v75;
  uint64_t v79 = swift_allocObject();
  *(void *)(v79 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v79 + 24) = v76;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v80 = v20;
  swift_retain();
  *uint64_t v80 = partial apply for closure #1 in OSLogArguments.append(_:);
  v80[1] = v77;
  swift_retain();
  v80[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v80[3] = v78;
  swift_retain();
  v80[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v80[5] = v79;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v81, v82))
  {
    uint64_t v63 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v64 = createStorage<A>(capacity:type:)(1);
    uint64_t v65 = createStorage<A>(capacity:type:)(0);
    v204 = v63;
    v205 = v64;
    v206 = v65;
    serialize(_:at:)(2, &v204);
    serialize(_:at:)(1, &v204);
    v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v208 = v77;
    closure #1 in osLogInternal(_:log:type:)(&v207, (uint64_t)&v204, (uint64_t)&v205, (uint64_t)&v206);
    v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v208 = v78;
    closure #1 in osLogInternal(_:log:type:)(&v207, (uint64_t)&v204, (uint64_t)&v205, (uint64_t)&v206);
    v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v208 = v79;
    closure #1 in osLogInternal(_:log:type:)(&v207, (uint64_t)&v204, (uint64_t)&v205, (uint64_t)&v206);
    _os_log_impl(&dword_25DE00000, v81, v82, "Created HKQuantitySample: %@", v63, v74);
    destroyStorage<A>(_:count:)(v64, 1, v62);
    destroyStorage<A>(_:count:)(v65, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v63, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v201 + 1208);
  uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1160);
  uint64_t v53 = *(void *)(v201 + 1096);
  uint64_t v21 = *(void *)(v201 + 1088);
  uint64_t v56 = *(void *)(v201 + 1048);

  v54(v53, v56);
  uint64_t v55 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v57(v21, v55, v56);
  swift_endAccess();
  uint64_t v60 = Logger.logObject.getter();
  uint64_t v59 = static os_log_type_t.debug.getter();
  *(void *)(v201 + 624) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v58 = *(_DWORD *)(v201 + 1336);
  uint64_t v61 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v60, v59))
  {
    uint64_t v49 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v50 = createStorage<A>(capacity:type:)(0);
    uint64_t v51 = createStorage<A>(capacity:type:)(0);
    *(void *)(v201 + 728) = v49;
    *(void *)(v201 + 736) = v50;
    *(void *)(v201 + 744) = v51;
    serialize(_:at:)(0, (unsigned char **)(v201 + 728));
    serialize(_:at:)(0, (unsigned char **)(v201 + 728));
    *(void *)(v201 + 752) = v61;
    uint64_t v52 = (void *)swift_task_alloc();
    v52[2] = v201 + 728;
    v52[3] = v201 + 736;
    v52[4] = v201 + 744;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v60, v59, "Trying to save to store.", v49, v58);
    destroyStorage<A>(_:count:)(v50, 0, v48);
    destroyStorage<A>(_:count:)(v51, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v49, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  *(void *)(v201 + 1296) = 0;
  uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v201 + 1208);
  os_log_type_t v44 = *(void *)(v201 + 1088);
  uint64_t v45 = *(void *)(v201 + 1048);
  uint64_t v47 = *(id *)(v201 + 984);

  v46(v44, v45);
  uint64_t v22 = v47;
  *(void *)(v201 + 16) = *(void *)(v201 + 456);
  *(void *)(v201 + 56) = v132;
  *(void *)(v201 + 24) = HealthKitPersistor.save(quantityIdentifier:value:units:);
  *(void *)(v201 + 112) = swift_continuation_init();
  *(void *)(v201 + 80) = MEMORY[0x263EF8330];
  *(_DWORD *)(v201 + 88) = 0x40000000;
  *(_DWORD *)(v201 + 92) = 0;
  *(void *)(v201 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) @Sendable (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
  *(void *)(v201 + 104) = &block_descriptor;
  objc_msgSend(v47, sel_saveObject_withCompletion_, v73);
  return __swift_continuation_await_point();
}

{
  uint64_t v0;
  id v1;
  id v2;
  void *v3;
  uint64_t (*v4)(char *);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  char *v16;
  uint64_t v17;
  uint8_t *buf;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  id v27;
  uint32_t size;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  unint64_t v42 = v0;
  os_log_type_t v27 = *(id *)(v0 + 1304);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1160);
  uint64_t v22 = *(void *)(v0 + 1064);
  uint64_t v25 = *(void *)(v0 + 1048);
  uint64_t v23 = *(id *)(v0 + 984);
  *(void *)(v0 + 456) = v0;
  swift_willThrow();

  uint64_t v1 = v27;
  *(void *)(v0 + 632) = v27;
  uint64_t v24 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v26(v22, v24, v25);
  swift_endAccess();
  id v2 = v27;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v27;
  id v35 = Logger.logObject.getter();
  uint32_t v36 = static os_log_type_t.error.getter();
  *(void *)(v0 + 640) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 1340);
  uint64_t v31 = swift_allocObject();
  *(unsigned char *)(v31 + 16) = 32;
  uint64_t v32 = swift_allocObject();
  *(unsigned char *)(v32 + 16) = 8;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:);
  *(void *)(v30 + 24) = v29;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v33 + 24) = v30;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v34 = v3;
  swift_retain();
  const char *v34 = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[1] = v31;
  swift_retain();
  v34[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[3] = v32;
  swift_retain();
  v34[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v34[5] = v33;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v35, v36))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v19 = createStorage<A>(capacity:type:)(0);
    uint64_t v20 = createStorage<A>(capacity:type:)(1);
    uint64_t v37 = buf;
    uint64_t v38 = v19;
    uint64_t v39 = v20;
    serialize(_:at:)(2, &v37);
    serialize(_:at:)(1, &v37);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v41 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    _os_log_impl(&dword_25DE00000, v35, v36, "Failed to persist sample. Error: %s", buf, size);
    destroyStorage<A>(_:count:)(v19, 0, v17);
    destroyStorage<A>(_:count:)(v20, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v9 = *(id *)(v21 + 1304);
  uint64_t v10 = *(id *)(v21 + 1288);
  uint64_t v11 = *(id *)(v21 + 1280);
  uint64_t v13 = *(id *)(v21 + 1264);
  id v14 = *(id *)(v21 + 1232);
  id v15 = *(id *)(v21 + 1224);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v21 + 1208);
  id v6 = *(void *)(v21 + 1064);
  uint64_t v7 = *(void *)(v21 + 1048);
  uint64_t v12 = *(id *)(v21 + 1272);

  v8(v6, v7);
  type metadata accessor for LogQuantityIntentResponse();
  uint64_t v16 = LogQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  outlined destroy of HealthKitPersistor((id *)(v21 + 504));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v4 = *(uint64_t (**)(char *))(*(void *)(v21 + 456) + 8);
  return v4(v16);
}

uint64_t HealthKitPersistor.save(quantityIdentifier:value:units:)(uint64_t a1)
{
  id v6 = (void *)*v2;
  uint64_t v5 = *v2 + 16;
  v6[57] = *v2;
  v6[156] = a1;
  v6[157] = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v3 = HealthKitPersistor.save(quantityIdentifier:value:units:);
  }
  else
  {

    id v3 = HealthKitPersistor.save(quantityIdentifier:value:units:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

id @nonobjc HKQuantity.__allocating_init(unit:doubleValue:)(void *a1, double a2)
{
  id v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_quantityWithUnit_doubleValue_, a1, a2);

  return v4;
}

id @nonobjc HKQuantitySample.__allocating_init(type:quantity:start:end:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  Class v5 = Date._bridgeToObjectiveC()().super.isa;
  id v13 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_quantitySampleWithType_quantity_startDate_endDate_, a1, a2, isa, v5);

  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void (**)(uint64_t))(*(void *)(v9 - 8) + 8);
  v10(a4);

  ((void (*)(uint64_t, uint64_t))v10)(a3, v9);
  return v13;
}

void @objc completion handler block implementation for @escaping @callee_unowned @convention(block) @Sendable (@unowned Bool, @unowned NSError?) -> () with result type () zero on error(uint64_t a1, char a2, id a3)
{
  id v3 = a3;
  uint64_t v10 = *(void *)(a1 + 32);
  if (a2)
  {
    _resumeUnsafeThrowingContinuation<A>(_:_:)(v10, v6, MEMORY[0x263F8EE60] + 8);
  }
  else
  {
    if (a3)
    {
      id v5 = a3;
    }
    else
    {
      _diagnoseUnexpectedNilOptional(_filenameStart:_filenameLength:_filenameIsASCII:_line:_isImplicitUnwrap:)("", 0, 1, 0, 1);
      __break(1u);
    }
    id v4 = v5;
    _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v10, (uint64_t)v5, MEMORY[0x263F8EE60] + 8);
  }
}

uint64_t implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:)(void *a1)
{
  id v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

uint64_t protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  id v6 = *v1;
  id v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  void *v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return HealthKitPersistor.isLoggingAuthorized(for:)(a1, v6);
}

uint64_t protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor(unsigned int a1)
{
  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 16) + 8);
  return v2(a1);
}

uint64_t protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v9 = v6;
  *(void *)(v6 + 16) = v6;
  uint64_t v14 = *v5;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v9 + 24) = v7;
  void *v7 = *(void *)(v9 + 16);
  v7[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return HealthKitPersistor.save(quantityIdentifier:value:units:)(a1, a2, a3, a4, v14, a5);
}

uint64_t protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor(uint64_t a1)
{
  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(v4 + 16) + 8);
  return v2(a1);
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return WitnessTable;
  }
  return v2;
}

uint64_t createStorage<A>(capacity:type:)(uint64_t a1)
{
  if (a1) {
    return static UnsafeMutablePointer.allocate(capacity:)();
  }
  else {
    return 0;
  }
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t destroyStorage<A>(_:count:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  if (result)
  {
    UnsafeMutablePointer.deinitialize(count:)();
    return MEMORY[0x2611C8D90](v3, a3);
  }
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = a3;
  v7[1] = a4;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = a3 - 8;
  v7[0] = (*(void *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (void (*)(void))MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)v7 - v7[0];
  v4();
  uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v13 = v5;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v11);
  return v12;
}

uint64_t specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(uint64_t (*a1)(uint64_t *, uint64_t), uint64_t a2, unsigned int a3)
{
  if (a3 < 0x80uLL)
  {
    if (a3 > 0xFF) {
      goto LABEL_12;
    }
    unsigned int v5 = (a3 + 1);
  }
  else
  {
    int v7 = (a3 & 0x3F) << 8;
    if (a3 >> 6 < 0x20uLL)
    {
      unsigned int v5 = (v7 | (a3 >> 6)) + 33217;
    }
    else
    {
      int v6 = (v7 | (a3 >> 6) & 0x3F) << 8;
      if (a3 >> 12 < 0x10uLL) {
        unsigned int v5 = (v6 | (a3 >> 12)) + 8487393;
      }
      else {
        unsigned int v5 = ((a3 >> 18) | ((v6 | (a3 >> 12) & 0x3F) << 8)) - 2122219023;
      }
    }
  }
  uint64_t v4 = 4 - ((uint64_t)__clz(v5) >> 3);
  uint64_t v8 = (v5 - 0x101010101010101) & ((1 << ((8 * v4) & 0x3F)) - 1);
  if (v4 >= 0) {
    return a1(&v8, v4);
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_12:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, unint64_t a10, unint64_t a11)
{
  uint64_t v21 = a9;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  unint64_t v24 = a3;
  uint64_t v25 = a4;
  unint64_t v26 = a6;
  uint64_t v27 = a7;
  int v28 = a8;
  unint64_t v29 = a10;
  unint64_t v30 = a11;
  uint64_t v31 = partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
  uint64_t v32 = partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:);
  uint64_t v33 = "Fatal error";
  uint64_t v34 = "Unexpectedly found nil while unwrapping an Optional value";
  id v35 = "Swift/StaticString.swift";
  uint32_t v36 = "Not enough bits to represent the passed value";
  uint64_t v37 = "Swift/Integers.swift";
  uint64_t v38 = "UnsafeBufferPointer with negative count";
  uint64_t v39 = "Swift/UnsafeBufferPointer.swift";
  uint64_t v40 = 0;
  unint64_t v42 = a6;
  uint64_t v43 = a7;
  char v44 = a8;
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  unint64_t v47 = a10;
  unint64_t v48 = a11;
  if (a5)
  {
    if (v24 <= 0xFFFFFFFF)
    {
      unsigned int v20 = v24;
      if ((v24 < 0xD800 || v20 > 0xDFFF) && v20 <= 0x10FFFF)
      {
        uint64_t v19 = &v18;
        uint64_t v11 = (uint64_t (*)(uint64_t *, uint64_t))MEMORY[0x270FA5388](v32);
        uint64_t v16 = v31;
        uint64_t v17 = &v41;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v11, (uint64_t)v14, v12);
        return (uint64_t)v19;
      }
      v14[0] = 2;
      uint64_t v15 = 148;
      LODWORD(v16) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v14[0] = 2;
    uint64_t v15 = 3455;
    LODWORD(v16) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24) {
    uint64_t v49 = v24;
  }
  else {
    uint64_t v49 = 0;
  }
  uint64_t v18 = v49;
  if (!v49)
  {
    v14[0] = 2;
    uint64_t v15 = 136;
    LODWORD(v16) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v25 >= 0) {
    return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v18, v25, v26, v27, v28, v22, v23, v29, v21, v30);
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10)
{
  uint64_t v21 = a9;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  unint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  unint64_t v28 = a8;
  unint64_t v29 = a10;
  unint64_t v30 = partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
  uint64_t v31 = partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:);
  uint64_t v32 = "Fatal error";
  uint64_t v33 = "Unexpectedly found nil while unwrapping an Optional value";
  uint64_t v34 = "Swift/StaticString.swift";
  id v35 = "Not enough bits to represent the passed value";
  uint32_t v36 = "Swift/Integers.swift";
  uint64_t v37 = "UnsafeBufferPointer with negative count";
  uint64_t v38 = "Swift/UnsafeBufferPointer.swift";
  uint64_t v39 = 0;
  uint64_t v41 = a6;
  uint64_t v42 = a7;
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  unint64_t v45 = a8;
  unint64_t v46 = a10;
  if (a5)
  {
    if (v24 <= 0xFFFFFFFF)
    {
      unsigned int v20 = v24;
      if ((v24 < 0xD800 || v20 > 0xDFFF) && v20 <= 0x10FFFF)
      {
        uint64_t v19 = &v17;
        uint64_t v10 = (uint64_t (*)(uint64_t *, uint64_t))MEMORY[0x270FA5388](v31);
        uint64_t v15 = v30;
        uint64_t v16 = &v40;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(v10, (uint64_t)v13, v11);
        return (uint64_t)v19;
      }
      v13[0] = 2;
      uint64_t v14 = 148;
      LODWORD(v15) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v13[0] = 2;
    uint64_t v14 = 3455;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24) {
    uint64_t v47 = v24;
  }
  else {
    uint64_t v47 = 0;
  }
  uint64_t v18 = v47;
  if (!v47)
  {
    v13[0] = 2;
    uint64_t v14 = 136;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v25 >= 0) {
    return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v18, v25, v26, v27, v22, v23, v28, v29);
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  if (!a3)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (a4 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (a4 <= 0x7FFFFFFF)
    {
      if (!a5)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      if (a6 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (a6 <= 0x7FFFFFFF)
        {
          if (!a1)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          if (a2 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (a2 <= 0x7FFFFFFF)
            {
              if (a7 <= 0xFFFFFFFF)
              {
                if (a8 <= 0xFFFFFFFF) {
                  return _swift_stdlib_reportUnimplementedInitializerInFile();
                }
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall Array._endMutation()()
{
  void *v0 = *v0;
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  int v7 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = _sIeghH_IeAgH_TRTQ0_;
  return v7();
}

uint64_t _sIeghH_IeAgH_TRTQ0_()
{
  uint64_t v3 = *v0;
  *(void *)(v3 + 16) = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(*(void *)(v3 + 16) + 8);
  return v1();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = v4;
  *(void *)(v4 + 16) = v4;
  uint64_t v8 = (uint64_t (*)(void))((char *)a4 + *a4);
  unsigned int v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v5;
  *unsigned int v5 = *(void *)(v7 + 16);
  v5[1] = _sIeghH_IeAgH_TRTQ0_;
  return v8();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v10 + 48))(a1, 1) == 1)
  {
    outlined destroy of TaskPriority?(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, v9);
  }
  uint64_t v5 = *(void *)(a3 + 16);
  swift_unknownObjectRetain();
  if (v5)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a3;
  return swift_task_create();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  void *v3 = *(void *)(v5 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_()
{
  uint64_t v3 = *v0;
  *(void *)(v3 + 16) = *v0;
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(void))(*(void *)(v3 + 16) + 8);
  return v1();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  *uint64_t v4 = a4;
  void *result = v4 + 1;
  return result;
}

uint64_t sub_25DE194A4()
{
  return swift_deallocObject();
}

unsigned char **partial apply for closure #1 in OSLogArguments.append(_:)(unsigned char **a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(unsigned char *)(v3 + 16));
}

uint64_t sub_25DE194D8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE19504()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v7 = (id)a4();
  uint64_t v8 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v8 + 8;
  uint64_t v4 = *a2;
  if (*a2)
  {
    *uint64_t v4 = v7;
    *a2 = v4 + 1;
  }
  else
  {
  }
}

uint64_t sub_25DE19694()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3)
{
  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_25DE196E0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:)()
{
  uint64_t result = *(void *)(v0 + 16);
  implicit closure #4 in LogQuantityIntentHandler.handle(intent:)();
  return result;
}

uint64_t sub_25DE1972C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE19758()
{
  return swift_deallocObject();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_25DE197AC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

void *closure #1 in OSLogArguments.append(_:)(void *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v4 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, a3);
  uint64_t v8 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  uint64_t result = a1;
  *a1 = v8 + 8;
  return result;
}

uint64_t sub_25DE1987C()
{
  return swift_deallocObject();
}

void *partial apply for closure #1 in OSLogArguments.append(_:)(void *a1, uint64_t a2, uint64_t *a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t outlined init with copy of QuantityPersisting(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  int v2 = *(_DWORD *)(*(void *)(a2 - 8) + 80);
  if ((v2 & 0x20000) != 0) {
    return (void *)(*result + ((v2 + 16) & ~(unint64_t)v2));
  }
  return result;
}

uint64_t sub_25DE199AC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE199EC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE19A18()
{
  return swift_deallocObject();
}

uint64_t sub_25DE19A44()
{
  return swift_deallocObject();
}

uint64_t sub_25DE19A84()
{
  return swift_deallocObject();
}

uint64_t sub_25DE19AC4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE19B04()
{
  return swift_deallocObject();
}

uint64_t sub_25DE19B30()
{
  return swift_deallocObject();
}

uint64_t sub_25DE19B5C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE19B9C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE19BDC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE19C1C()
{
  return swift_deallocObject();
}

id partial apply for implicit closure #8 in LogQuantityIntentHandler.handle(intent:)()
{
  return implicit closure #8 in LogQuantityIntentHandler.handle(intent:)(*(void **)(v0 + 16));
}

uint64_t sub_25DE19C64()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in LogQuantityIntentHandler.handle(intent:)()
{
  return implicit closure #9 in LogQuantityIntentHandler.handle(intent:)(*(void **)(v0 + 16));
}

uint64_t sub_25DE19CAC()
{
  uint64_t v2 = *(void *)(type metadata accessor for Date() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = v1
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  return implicit closure #10 in LogQuantityIntentHandler.handle(intent:)(v3, a1);
}

uint64_t sub_25DE19DF0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = type metadata accessor for Date();
  unint64_t v1 = lazy protocol witness table accessor for type Date and conformance Date();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    type metadata accessor for Date();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    type metadata accessor for Date();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DE19F10()
{
  uint64_t v2 = *(void *)(type metadata accessor for Date() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25DE19FDC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1A01C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1A048()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1A074()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1A0B4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1A0F4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1A120()
{
  return swift_deallocObject();
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v14 = specialized _StringGuts._deconstructUTF8<A>(scratch:)((uint64_t)&v17, 0, 0, 1, a1, a2);
  uint64_t v15 = v3;
  __int16 v16 = v4;
  uint64_t v11 = v17;
  if (v14)
  {
    v12[3] = swift_getObjectType();
    v12[0] = v14;
    uint64_t v6 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, v6);
      *a3 = v6 + 32;
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    v13[3] = MEMORY[0x263F8DBE0];
    v13[0] = a1;
    v13[1] = a2;
    uint64_t v7 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v13, v7);
      *a3 = v7 + 32;
    }
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  return v11;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t result, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = (void *)result;
  uint64_t v24 = a6;
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (a2)
      {
        if (!a3) {
          __break(1u);
        }
        int64_t v16 = a3 - (void)a2;
      }
      else
      {
        int64_t v16 = 0;
      }
      int64_t v15 = (a6 & 0xF00000000000000uLL) >> 56;
      if (v15 < v16)
      {
        if (a2)
        {
          v21[0] = a5;
          v21[1] = a6 & (-(uint64_t)bswap64(0xFFuLL) - 1);
          specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(v21, v15, a2);
          UnsafeMutableRawBufferPointer.subscript.setter();
          void *v17 = a2;
          uint64_t v11 = 0;
          uint64_t v12 = v15;
          char v13 = 1;
          char v14 = 0;
LABEL_26:
          v21[2] = v11;
          v21[3] = v12;
          char v22 = v13 & 1;
          char v23 = v14 & 1;
          return (uint64_t)v11;
        }
        goto LABEL_28;
      }
    }
LABEL_13:
    uint64_t v6 = _StringGuts._allocateForDeconstruct()(a5, a6);
    void *v17 = v7;
    uint64_t v11 = v6;
    uint64_t v12 = v8;
    char v13 = 0;
    char v14 = 1;
    goto LABEL_26;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFE0)
    {
      uint64_t v10 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      goto LABEL_21;
    }
    __break(1u);
  }
  uint64_t result = _StringObject.sharedUTF8.getter();
  if (!result) {
    goto LABEL_29;
  }
  uint64_t v10 = result;
LABEL_21:
  void *v17 = v10;
  if (a6 < 0)
  {
    uint64_t v9 = 0;
LABEL_25:
    uint64_t v11 = (void *)v9;
    uint64_t v12 = a5 & 0xFFFFFFFFFFFFLL;
    char v13 = 0;
    char v14 = 0;
    goto LABEL_26;
  }
  if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0)
  {
    swift_unknownObjectRetain();
    uint64_t v9 = a6 & 0xFFFFFFFFFFFFFFFLL;
    goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(const void *a1, size_t a2, void *__dst)
{
  return __dst;
}

void *_StringGuts._allocateForDeconstruct()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  uint64_t v4 = v6[2];
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, 0);
  Array._endMutation()();
  swift_retain();
  uint64_t v5 = specialized Array.count.getter((uint64_t)v6);
  swift_bridgeObjectRelease();
  uint64_t result = (void *)v5;
  if (!__OFSUB__(v5, 1)) {
    return v6;
  }
  __break(1u);
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  v8[2] = a2;
  if ((a2 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    uint64_t v7 = (a2 & 0xF00000000000000uLL) >> 56;
  }
  else
  {
    uint64_t v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7) {
    return (void *)specialized ContiguousArray.init()();
  }
  uint64_t v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v7, 0);
  swift_retain();
  swift_release();
  uint64_t result = (void *)_StringGuts.copyUTF8(into:)();
  uint64_t v6 = result;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = v8;
    v8[0] = 0;
    v8[1] = 0xE000000000000000;
    outlined destroy of String.UTF8View();
    if (v6 == (void *)v7) {
      return v5;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v4 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t *v0 = v4;
  if ((result & 1) == 0)
  {
    uint64_t v2 = specialized Array.count.getter(*v3);
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 + 1, 1, *v3);
    uint64_t *v3 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  if (*(void *)(*(void *)v1 + 24) >> 1 < result + 1)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*(void *)(*(void *)v1 + 24) >> 1 != 0, result + 1, 1, *v2);
    *uint64_t v2 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, char a2)
{
  uint64_t v5 = a1 + 1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain();
  *(void *)(v4 + 16) = v5;
  swift_release();
  uint64_t v6 = *v2;
  swift_retain();
  *(unsigned char *)(v6 + 32 + a1) = a2;
  return swift_release();
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return specialized Array._getCount()(a1);
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 < a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = a2;
  }
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v6 = (void *)swift_allocObject();
    if (_swift_stdlib_has_malloc_size())
    {
      size_t v4 = (size_t)v6 + _swift_stdlib_malloc_size(v6);
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * (v4 - (void)(v6 + 4));
    }
    else
    {
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * v7;
    }
    swift_release();
    return v6;
  }
  else
  {
    uint64_t v3 = MEMORY[0x263F8EE78];
    swift_retain();
    return (void *)v3;
  }
}

uint64_t specialized ContiguousArray.init()()
{
  uint64_t v1 = MEMORY[0x263F8EE78];
  swift_retain();
  return v1;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  swift_retain();
  uint64_t result = swift_retain();
  uint64_t v16 = *(void *)(a4 + 24) >> 1;
  if (a3)
  {
    if (v16 < a2)
    {
      if ((unsigned __int128)(v16 * (__int128)2) >> 64 != (2 * v16) >> 63)
      {
        __break(1u);
        return result;
      }
      if (2 * v16 < a2) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = 2 * v16;
      }
    }
    else
    {
      uint64_t v11 = *(void *)(a4 + 24) >> 1;
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  int64_t v10 = *(void *)(a4 + 16);
  if (v11 < v10) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v11;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v8 = (void *)swift_allocObject();
    if (_swift_stdlib_has_malloc_size())
    {
      size_t v6 = (size_t)v8 + _swift_stdlib_malloc_size(v8);
      swift_retain();
      v8[2] = v10;
      void v8[3] = 2 * (v6 - (void)(v8 + 4));
    }
    else
    {
      swift_retain();
      v8[2] = v10;
      void v8[3] = 2 * v9;
    }
    swift_release();
    uint64_t v7 = (char *)v8;
  }
  else
  {
    uint64_t v5 = (char *)MEMORY[0x263F8EE78];
    swift_retain();
    uint64_t v7 = v5;
  }
  if (a1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v10, v7 + 32);
    *(void *)(a4 + 16) = 0;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    swift_release();
    specialized UnsafeMutablePointer.initialize(from:count:)((const void *)(a4 + 32), v10, v7 + 32);
    swift_unknownObjectRelease();
  }
  return (uint64_t)v7;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(const void *a1, size_t a2, void *__dst)
{
  return memcpy(__dst, a1, a2);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, size_t a2, char *a3)
{
  if (a3 < result || a3 >= &result[a2] || a3 != result) {
    return (char *)memmove(a3, result, a2);
  }
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_25DE1AFE4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

void *closure #1 in OSLogArguments.append(_:)(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t v5 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = a1;
  *a1 = v5 + 8;
  return result;
}

uint64_t sub_25DE1B09C()
{
  return swift_deallocObject();
}

void *partial apply for closure #1 in OSLogArguments.append(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(void (**)(void))(v3 + 16));
}

uint64_t sub_25DE1B0E8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B114()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B140()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B180()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B1C0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B1EC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B218()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B258()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B298()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B2C4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B2F0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B330()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B370()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LogQuantityIntentHandler.handle(intent:)()
{
  uint64_t v5 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v8 = (void *)v0[2];
  size_t v6 = (const void *)v0[3];
  uint64_t v7 = (void *)v0[4];
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v2;
  *uint64_t v2 = *(void *)(v5 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  uint64_t v3 = async function pointer to @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in LogQuantityIntentHandler.handle(intent:)
                                                               + v3))(v8, v6, v7);
}

unint64_t type metadata accessor for HKUnit()
{
  uint64_t v2 = lazy cache variable for type metadata for HKUnit;
  if (!lazy cache variable for type metadata for HKUnit)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKUnit);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for HKQuantityType()
{
  uint64_t v2 = lazy cache variable for type metadata for HKQuantityType;
  if (!lazy cache variable for type metadata for HKQuantityType)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKQuantityType);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t partial apply for closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

unint64_t lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A];
  if (!lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [(_:_:_:)]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t v4 = *a1;
  if (*a1 < 0)
  {
    uint64_t TypeByMangledNameInContextInMetadataState2 = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = TypeByMangledNameInContextInMetadataState2;
    return TypeByMangledNameInContextInMetadataState2;
  }
  return v4;
}

unint64_t type metadata accessor for NSObject()
{
  uint64_t v2 = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for HKQuantity()
{
  uint64_t v2 = lazy cache variable for type metadata for HKQuantity;
  if (!lazy cache variable for type metadata for HKQuantity)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKQuantity);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25DE1B778()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B7B8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B7E4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B810()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B850()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for HKQuantitySample()
{
  uint64_t v2 = lazy cache variable for type metadata for HKQuantitySample;
  if (!lazy cache variable for type metadata for HKQuantitySample)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKQuantitySample);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25DE1B8F8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B938()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B964()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B990()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1B9D0()
{
  return swift_deallocObject();
}

uint64_t __swift_continuation_await_point()
{
  return MEMORY[0x270FA23F0]();
}

uint64_t sub_25DE1BA14()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:)()
{
  return implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:)(*(void **)(v0 + 16));
}

uint64_t sub_25DE1BA5C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1BA88()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1BAB4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1BAF4()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [HKUnit] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKUnit] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKUnit] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKUnit]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKUnit] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type HKUnit and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKUnit and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HKUnit and conformance NSObject)
  {
    type metadata accessor for HKUnit();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKUnit and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DE1BC3C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1BC7C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1BCBC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1BCE8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1BD14()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1BD54()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1BD94()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1BDC0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1BDEC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE1BE2C()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for LogQuantityIntentHandler()
{
  return self;
}

ValueMetadata *type metadata accessor for HealthKitPersistor()
{
  return &type metadata for HealthKitPersistor;
}

uint64_t partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), *(unsigned char *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), a3, *(void *)(v3 + 64));
}

uint64_t partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

uint64_t sub_25DE1BF34()
{
  return swift_deallocObject();
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  uint64_t v5 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v8 = v0[2];
  uint64_t v6 = v0[3];
  uint64_t v7 = (int *)v0[4];
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v2;
  *uint64_t v2 = *(void *)(v5 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  uint64_t v3 = _sIeghH_IeAgH_TRTu;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + v3))(v8, v6, v7);
}

uint64_t sub_25DE1C074()
{
  return swift_deallocObject();
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  uint64_t v6 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = (int *)v1[4];
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v3;
  void *v3 = *(void *)(v6 + 16);
  v3[1] = _sIeghH_IeAgH_TRTQ0_;
  uint64_t v4 = _sIeAgH_ytIeAgHr_TRTu;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu + v4))(a1, v7, v8, v9);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for TaskPriority();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t sub_25DE1C26C()
{
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v6 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v7 = *(int **)(v1 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v3;
  void *v3 = *(void *)(v6 + 16);
  v3[1] = _sIeghH_IeAgH_TRTQ0_;
  uint64_t v4 = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + v4))(a1, v7);
}

unint64_t lazy protocol witness table accessor for type String? and conformance A?()
{
  uint64_t v2 = lazy protocol witness table cache variable for type String? and conformance A?;
  if (!lazy protocol witness table cache variable for type String? and conformance A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type String? and conformance A?);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t _swift_stdlib_has_malloc_size()
{
  return 1;
}

size_t _swift_stdlib_malloc_size(const void *a1)
{
  return malloc_size(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String.UTF8View()
{
}

id GetAmbiguousDistanceIntentHandler.__allocating_init(provider:)(uint64_t a1)
{
  id v2 = objc_allocWithZone(v1);
  return GetAmbiguousDistanceIntentHandler.init(provider:)(a1);
}

id GetAmbiguousDistanceIntentHandler.init(provider:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v11 = a1;
  id v2 = v1;
  id v12 = v1;
  outlined init with copy of QuantityPersisting(a1, (uint64_t)v10);
  outlined init with take of QuantityPersisting(v10, &v1[OBJC_IVAR____TtC19SiriWellnessIntents33GetAmbiguousDistanceIntentHandler_provider]);

  v9.receiver = v12;
  v9.super_class = ObjectType;
  id v8 = objc_msgSendSuper2(&v9, sel_init);
  id v3 = v8;
  id v12 = v8;
  __swift_destroy_boxed_opaque_existential_1(a1);

  return v8;
}

uint64_t GetAmbiguousDistanceIntentHandler.handle(intent:)(uint64_t a1)
{
  v2[16] = v1;
  v2[15] = a1;
  v2[12] = v2;
  v2[13] = 0;
  v2[14] = 0;
  uint64_t v3 = type metadata accessor for Date();
  v2[17] = v3;
  v2[18] = *(void *)(v3 - 8);
  v2[19] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[13] = a1;
  v2[14] = v1;
  return MEMORY[0x270FA2498](GetAmbiguousDistanceIntentHandler.handle(intent:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  id v5 = *v1;
  uint64_t v4 = *(void *)(*v1 + 168);
  uint64_t v3 = *(void *)(*v1 + 160);
  *(void *)(v5 + 96) = *v1;
  *(void *)(v5 + 192) = a1;
  swift_task_dealloc();
  outlined destroy of Date?(v3);
  outlined destroy of Date?(v4);
  return MEMORY[0x270FA2498](GetAmbiguousDistanceIntentHandler.handle(intent:), 0);
}

uint64_t GetAmbiguousDistanceIntentHandler.handle(intent:)()
{
  uint64_t v1 = v0[16];
  v0[12] = v0;
  outlined init with copy of QuantityPersisting(v1 + OBJC_IVAR____TtC19SiriWellnessIntents33GetAmbiguousDistanceIntentHandler_provider, (uint64_t)(v0 + 2));
  uint64_t v8 = v0[5];
  uint64_t v4 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v8);
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v6 + 8) + **(int **)(v6 + 8));
  id v2 = (void *)swift_task_alloc();
  *(void *)(v5 + 176) = v2;
  *id v2 = *(void *)(v5 + 96);
  v2[1] = GetAmbiguousDistanceIntentHandler.handle(intent:);
  return v7(v8, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v5)(char *);
  char *v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  char v22 = *(unsigned char *)(v0 + 200);
  *(void *)(v0 + 96) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (v22)
  {
    uint64_t v19 = *(void **)(v21 + 120);
    outlined init with copy of QuantityPersisting(*(void *)(v21 + 128) + OBJC_IVAR____TtC19SiriWellnessIntents33GetAmbiguousDistanceIntentHandler_provider, v21 + 56);
    uint64_t v17 = *(void *)(v21 + 80);
    uint64_t v18 = *(void *)(v21 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v21 + 56), v17);
    unsigned int v20 = objc_msgSend(v19, sel_startDate);
    if (v20)
    {
      uint64_t v16 = *(void *)(v21 + 168);
      char v14 = *(void *)(v21 + 152);
      int64_t v15 = *(void *)(v21 + 136);
      char v13 = *(void *)(v21 + 144);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v16, v14, v15);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v15);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v21 + 144) + 56))(*(void *)(v21 + 168), 1, 1, *(void *)(v21 + 136));
    }
    id v12 = objc_msgSend(*(id *)(v21 + 120), sel_endDate);
    if (v12)
    {
      uint64_t v11 = *(void *)(v21 + 160);
      uint64_t v9 = *(void *)(v21 + 152);
      int64_t v10 = *(void *)(v21 + 136);
      uint64_t v8 = *(void *)(v21 + 144);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v9, v10);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v10);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v21 + 144) + 56))(*(void *)(v21 + 160), 1, 1, *(void *)(v21 + 136));
    }
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 + 16) + **(int **)(v18 + 16));
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v21 + 184) = v1;
    char *v1 = *(void *)(v21 + 96);
    v1[1] = GetAmbiguousDistanceIntentHandler.handle(intent:);
    id v2 = *(void *)(v21 + 168);
    uint64_t v3 = *(void *)(v21 + 160);
    return v7(v2, v3, v17, v18);
  }
  else
  {
    type metadata accessor for GetAmbiguousDistanceIntentResponse();
    uint64_t v6 = GetAmbiguousDistanceIntentResponse.__allocating_init(code:userActivity:)(101, 0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(char *))(*(void *)(v21 + 96) + 8);
    return v5(v6);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 96) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 192);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 96) + 8);
  return v1(v3);
}

uint64_t GetAmbiguousDistanceIntentHandler.handle(intent:)(char a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 96) = *v1;
  *(unsigned char *)(v3 + 200) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](GetAmbiguousDistanceIntentHandler.handle(intent:), 0);
}

uint64_t @objc closure #1 in GetAmbiguousDistanceIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  v3[4] = a3;
  v3[3] = a1;
  void v3[2] = v3;
  id v5 = a1;
  v3[5] = _Block_copy(a2);
  id v6 = a3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 48) = v7;
  void *v7 = *(void *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return GetAmbiguousDistanceIntentHandler.handle(intent:)((uint64_t)a1);
}

uint64_t sub_25DE1D1CC()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in GetAmbiguousDistanceIntentHandler.handle(intent:)()
{
  uint64_t v5 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v8 = (void *)v0[2];
  id v6 = (const void *)v0[3];
  uint64_t v7 = (void *)v0[4];
  id v2 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v2;
  *id v2 = *(void *)(v5 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  uint64_t v3 = async function pointer to @objc closure #1 in GetAmbiguousDistanceIntentHandler.handle(intent:);
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in GetAmbiguousDistanceIntentHandler.handle(intent:)
                                                               + v3))(v8, v6, v7);
}

id GetAmbiguousDistanceIntentHandler.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t GetAmbiguousDistanceIntentHandler.init()()
{
  if (!"SiriWellnessIntents.GetAmbiguousDistanceIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.GetAmbiguousDistanceIntentHandler", 53, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/GetAmbiguousDistanceIntentHandler.swift", 59, 2, v1, 0xAuLL, 0x14uLL);
  __break(1u);
  return result;
}

id GetAmbiguousDistanceIntentHandler.__deallocating_deinit()
{
  uint64_t v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GetAmbiguousDistanceIntentHandler()
{
  return self;
}

id GetHealthQuantityIntentHandler.__allocating_init(storage:)(void *a1)
{
  id v2 = objc_allocWithZone(v1);
  return GetHealthQuantityIntentHandler.init(storage:)(a1);
}

id GetHealthQuantityIntentHandler.init(storage:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  v13[5] = a1;
  id v2 = v1;
  uint64_t v3 = v1;
  id v14 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC19SiriWellnessIntents30GetHealthQuantityIntentHandler_storage];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *((void *)v4 + 4) = 0;

  outlined init with copy of QuantityPersisting?(a1, v13);
  uint64_t v7 = &v1[OBJC_IVAR____TtC19SiriWellnessIntents30GetHealthQuantityIntentHandler_storage];
  swift_beginAccess();
  outlined assign with take of QuantityFetching?(v13, v7);
  swift_endAccess();

  v12.receiver = v14;
  v12.super_class = ObjectType;
  id v11 = objc_msgSendSuper2(&v12, sel_init);
  id v5 = v11;
  id v14 = v11;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v11;
}

void *outlined assign with take of QuantityFetching?(const void *a1, void *a2)
{
  if (a2[3])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a2);
    memcpy(a2, a1, 0x28uLL);
  }
  else
  {
    memcpy(a2, a1, 0x28uLL);
  }
  return a2;
}

uint64_t GetHealthQuantityIntentHandler.handle(intent:)(uint64_t a1)
{
  v2[77] = v1;
  v2[76] = a1;
  v2[49] = v2;
  v2[50] = 0;
  v2[51] = 0;
  v2[47] = 0;
  v2[48] = 0;
  v2[61] = 0;
  v2[65] = 0;
  v2[74] = 0;
  uint64_t v3 = type metadata accessor for Date();
  v2[78] = v3;
  v2[79] = *(void *)(v3 - 8);
  v2[80] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v2[81] = swift_task_alloc();
  v2[82] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[83] = v4;
  v2[84] = *(void *)(v4 - 8);
  v2[85] = swift_task_alloc();
  v2[86] = swift_task_alloc();
  v2[87] = swift_task_alloc();
  v2[88] = swift_task_alloc();
  v2[89] = swift_task_alloc();
  v2[90] = swift_task_alloc();
  v2[91] = swift_task_alloc();
  v2[92] = swift_task_alloc();
  v2[93] = swift_task_alloc();
  v2[50] = a1;
  v2[51] = v1;
  return MEMORY[0x270FA2498](GetHealthQuantityIntentHandler.handle(intent:), 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  uint64_t v7 = (void *)*v2;
  id v6 = *v2 + 16;
  v7[49] = *v2;
  v7[108] = a1;
  v7[109] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = GetHealthQuantityIntentHandler.handle(intent:);
  }
  else
  {
    id v5 = *(void *)(v6 + 640);
    outlined destroy of Date?(*(void *)(v6 + 632));
    outlined destroy of Date?(v5);
    uint64_t v3 = GetHealthQuantityIntentHandler.handle(intent:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t GetHealthQuantityIntentHandler.handle(intent:)()
{
  uint64_t v100 = v0;
  uint64_t v1 = *(void **)(v0 + 608);
  *(void *)(v0 + 392) = v0;
  id v89 = objc_msgSend(v1, sel_quantityIdentifier);
  if (v89)
  {
    uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v85 = v2;

    uint64_t v86 = v84;
    uint64_t v87 = v85;
  }
  else
  {
    uint64_t v86 = 0;
    uint64_t v87 = 0;
  }
  *(void *)(v88 + 760) = v87;
  *(void *)(v88 + 752) = v86;
  if (v87)
  {
    uint64_t v3 = *(void *)(v88 + 616);
    *(void *)(v88 + 376) = v86;
    *(void *)(v88 + 384) = v87;
    uint64_t v83 = (void *)(v3 + OBJC_IVAR____TtC19SiriWellnessIntents30GetHealthQuantityIntentHandler_storage);
    swift_beginAccess();
    outlined init with copy of QuantityPersisting?(v83, (void *)(v88 + 96));
    swift_endAccess();
    swift_bridgeObjectRetain();
    if (*(void *)(v88 + 120))
    {
      outlined init with take of QuantityPersisting((const void *)(v88 + 96), (void *)(v88 + 56));
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v79 = HealthKitFetcher.init(identifier:)(v86, v87);
      uint64_t v80 = v4;
      uint64_t v81 = v5;
      uint64_t v82 = v6;
      if (v79)
      {
        *(void *)(v88 + 80) = &type metadata for HealthKitFetcher;
        *(void *)(v88 + 88) = &protocol witness table for HealthKitFetcher;
        uint64_t v7 = (void *)swift_allocObject();
        *(void *)(v88 + 56) = v7;
        void v7[2] = v79;
        v7[3] = v80;
        v7[4] = v81;
        v7[5] = v82;
      }
      else
      {
        *(void *)(v88 + 56) = 0;
        *(void *)(v88 + 64) = 0;
        *(void *)(v88 + 72) = 0;
        *(void *)(v88 + 80) = 0;
        *(void *)(v88 + 88) = 0;
      }
      outlined destroy of QuantityPersisting?(v88 + 96);
    }
    swift_bridgeObjectRelease();
    if (*(void *)(v88 + 80))
    {
      uint64_t v8 = *(void *)(v88 + 744);
      uint64_t v69 = *(void *)(v88 + 664);
      uint64_t v67 = *(void *)(v88 + 672);
      outlined init with take of QuantityPersisting((const void *)(v88 + 56), (void *)(v88 + 16));
      uint64_t v68 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16);
      *(void *)(v88 + 768) = v9;
      *(void *)(v88 + 776) = (v67 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v9(v8, v68, v69);
      swift_endAccess();
      swift_bridgeObjectRetain();
      uint64_t v71 = swift_allocObject();
      *(void *)(v71 + 16) = v86;
      *(void *)(v71 + 24) = v87;
      oslog = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.debug.getter();
      *(void *)(v88 + 464) = 12;
      *(void *)(v88 + 784) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      *(void *)(v88 + 792) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      *(void *)(v88 + 800) = lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t size = *(_DWORD *)(v88 + 888);
      uint64_t v73 = swift_allocObject();
      *(unsigned char *)(v73 + 16) = 32;
      uint64_t v74 = swift_allocObject();
      *(unsigned char *)(v74 + 16) = 8;
      uint64_t v72 = swift_allocObject();
      *(void *)(v72 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
      *(void *)(v72 + 24) = v71;
      uint64_t v75 = swift_allocObject();
      *(void *)(v75 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v75 + 24) = v72;
      *(void *)(v88 + 808) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      _allocateUninitializedArray<A>(_:)();
      id v76 = v10;
      swift_retain();
      *id v76 = partial apply for closure #1 in OSLogArguments.append(_:);
      v76[1] = v73;
      swift_retain();
      v76[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v76[3] = v74;
      swift_retain();
      v76[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v76[5] = v75;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(oslog, v78))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v65 = createStorage<A>(capacity:type:)(0);
        uint64_t v66 = createStorage<A>(capacity:type:)(1);
        uint64_t v95 = buf;
        uint64_t v96 = v65;
        uint64_t v97 = v66;
        serialize(_:at:)(2, &v95);
        serialize(_:at:)(1, &v95);
        uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v99 = v73;
        closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
        uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v99 = v74;
        closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
        uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v99 = v75;
        closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
        _os_log_impl(&dword_25DE00000, oslog, v78, "Checking authorization for %s...", buf, size);
        destroyStorage<A>(_:count:)(v65, 0, v63);
        destroyStorage<A>(_:count:)(v66, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      *(void *)(v88 + 816) = 0;
      uint64_t v56 = *(void *)(v88 + 744);
      uint64_t v57 = *(void *)(v88 + 664);
      uint64_t v55 = *(void *)(v88 + 672);

      id v11 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
      *(void *)(v88 + 824) = v11;
      *(void *)(v88 + 832) = (v55 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v11(v56, v57);
      uint64_t v60 = *(void *)(v88 + 40);
      uint64_t v61 = *(void *)(v88 + 48);
      __swift_project_boxed_opaque_existential_1((void *)(v88 + 16), v60);
      uint64_t v58 = _allocateUninitializedArray<A>(_:)();
      uint64_t v59 = v12;
      swift_bridgeObjectRetain();
      *uint64_t v59 = v86;
      v59[1] = v87;
      _finalizeUninitializedArray<A>(_:)();
      *(void *)(v88 + 840) = v58;
      uint64_t v62 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 + 8) + **(int **)(v61 + 8));
      char v13 = (void *)swift_task_alloc();
      *(void *)(v88 + 848) = v13;
      void *v13 = *(void *)(v88 + 392);
      v13[1] = GetHealthQuantityIntentHandler.handle(intent:);
      return v62(v58, v60, v61);
    }
    uint64_t v15 = *(void *)(v88 + 712);
    uint64_t v45 = *(void *)(v88 + 664);
    uint64_t v43 = *(void *)(v88 + 672);
    outlined destroy of QuantityPersisting?(v88 + 56);
    uint64_t v44 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(v15, v44, v45);
    swift_endAccess();
    swift_bridgeObjectRetain();
    uint64_t v47 = swift_allocObject();
    *(void *)(v47 + 16) = v86;
    *(void *)(v47 + 24) = v87;
    log = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    *(void *)(v88 + 456) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v46 = *(_DWORD *)(v88 + 884);
    uint64_t v49 = swift_allocObject();
    *(unsigned char *)(v49 + 16) = 32;
    uint64_t v50 = swift_allocObject();
    *(unsigned char *)(v50 + 16) = 8;
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v48 + 24) = v47;
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v51 + 24) = v48;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    uint64_t v52 = v16;
    swift_retain();
    *uint64_t v52 = partial apply for closure #1 in OSLogArguments.append(_:);
    v52[1] = v49;
    swift_retain();
    v52[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v52[3] = v50;
    swift_retain();
    v52[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v52[5] = v51;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v54))
    {
      char v40 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v41 = createStorage<A>(capacity:type:)(0);
      uint64_t v42 = createStorage<A>(capacity:type:)(1);
      uint64_t v90 = v40;
      uint64_t v91 = v41;
      uint64_t v92 = v42;
      serialize(_:at:)(2, &v90);
      serialize(_:at:)(1, &v90);
      id v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v94 = v49;
      closure #1 in osLogInternal(_:log:type:)(&v93, (uint64_t)&v90, (uint64_t)&v91, (uint64_t)&v92);
      id v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v94 = v50;
      closure #1 in osLogInternal(_:log:type:)(&v93, (uint64_t)&v90, (uint64_t)&v91, (uint64_t)&v92);
      id v93 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v94 = v51;
      closure #1 in osLogInternal(_:log:type:)(&v93, (uint64_t)&v90, (uint64_t)&v91, (uint64_t)&v92);
      _os_log_impl(&dword_25DE00000, log, v54, "Could not correctly create storage wrapper because of incorrect HealthKit idnetifier: %s", v40, v46);
      destroyStorage<A>(_:count:)(v41, 0, v39);
      destroyStorage<A>(_:count:)(v42, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v40, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v35 = *(void *)(v88 + 712);
    uint64_t v36 = *(void *)(v88 + 664);
    uint64_t v34 = *(void *)(v88 + 672);

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v36);
    type metadata accessor for GetHealthQuantityIntentResponse();
    uint64_t v37 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    swift_bridgeObjectRelease();
    uint64_t v38 = v37;
  }
  else
  {
    uint64_t v17 = *(void *)(v88 + 704);
    uint64_t v29 = *(void *)(v88 + 664);
    uint64_t v27 = *(void *)(v88 + 672);
    uint64_t v28 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v17, v28, v29);
    swift_endAccess();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    *(void *)(v88 + 416) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v30 = *(_DWORD *)(v88 + 880);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v33 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v32, v31))
    {
      char v23 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v24 = createStorage<A>(capacity:type:)(0);
      uint64_t v25 = createStorage<A>(capacity:type:)(0);
      *(void *)(v88 + 424) = v23;
      *(void *)(v88 + 432) = v24;
      *(void *)(v88 + 440) = v25;
      serialize(_:at:)(0, (unsigned char **)(v88 + 424));
      serialize(_:at:)(0, (unsigned char **)(v88 + 424));
      *(void *)(v88 + 448) = v33;
      uint64_t v26 = (void *)swift_task_alloc();
      v26[2] = v88 + 424;
      v26[3] = v88 + 432;
      v26[4] = v88 + 440;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v32, v31, "Need to specify HealthKitQuantityIdentifier in your intent.", v23, v30);
      destroyStorage<A>(_:count:)(v24, 0, v22);
      destroyStorage<A>(_:count:)(v25, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v23, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(v88 + 704);
    uint64_t v21 = *(void *)(v88 + 664);
    uint64_t v19 = *(void *)(v88 + 672);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
    type metadata accessor for GetHealthQuantityIntentResponse();
    uint64_t v38 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(char *))(*(void *)(v88 + 392) + 8);
  return v18(v38);
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t (*v12)(char *);
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  char *v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint32_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  NSObject *log;
  os_log_type_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  uint64_t v52;
  uint8_t *buf;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint32_t size;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  NSObject *oslog;
  os_log_type_t v69;
  uint64_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  uint64_t v81 = v0;
  uint64_t v1 = *(unsigned char *)(v0 + 916);
  *(void *)(v0 + 392) = v0;
  if (v1)
  {
    uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 768);
    uint64_t v59 = *(void *)(v70 + 752);
    uint64_t v2 = *(void *)(v70 + 736);
    uint64_t v57 = *(void *)(v70 + 664);
    uint64_t v60 = *(void *)(v70 + 760);
    uint64_t v56 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v58(v2, v56, v57);
    swift_endAccess();
    swift_bridgeObjectRetain();
    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = v59;
    *(void *)(v62 + 24) = v60;
    oslog = Logger.logObject.getter();
    uint64_t v69 = static os_log_type_t.debug.getter();
    *(void *)(v70 + 480) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v70 + 896);
    uint64_t v64 = swift_allocObject();
    *(unsigned char *)(v64 + 16) = 32;
    uint64_t v65 = swift_allocObject();
    *(unsigned char *)(v65 + 16) = 8;
    uint64_t v63 = swift_allocObject();
    *(void *)(v63 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v63 + 24) = v62;
    uint64_t v66 = swift_allocObject();
    *(void *)(v66 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v66 + 24) = v63;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v67 = v3;
    swift_retain();
    *uint64_t v67 = partial apply for closure #1 in OSLogArguments.append(_:);
    v67[1] = v64;
    swift_retain();
    v67[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v67[3] = v65;
    swift_retain();
    v67[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v67[5] = v66;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v69))
    {
      uint64_t v4 = *(void *)(v70 + 816);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      os_log_type_t v54 = createStorage<A>(capacity:type:)(0);
      uint64_t v55 = createStorage<A>(capacity:type:)(1);
      id v76 = buf;
      uint64_t v77 = v54;
      os_log_type_t v78 = v55;
      serialize(_:at:)(2, &v76);
      serialize(_:at:)(1, &v76);
      uint64_t v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v80 = v64;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v79, (uint64_t)&v76, (uint64_t)&v77, (uint64_t)&v78);
      if (v4) {
        return result;
      }
      uint64_t v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v80 = v65;
      closure #1 in osLogInternal(_:log:type:)(&v79, (uint64_t)&v76, (uint64_t)&v77, (uint64_t)&v78);
      uint64_t v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v80 = v66;
      closure #1 in osLogInternal(_:log:type:)(&v79, (uint64_t)&v76, (uint64_t)&v77, (uint64_t)&v78);
      _os_log_impl(&dword_25DE00000, oslog, v69, "Authorization check successful for %s!", buf, size);
      destroyStorage<A>(_:count:)(v54, 0, v52);
      destroyStorage<A>(_:count:)(v55, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v70 + 824);
    uint64_t v45 = *(void *)(v70 + 736);
    uint32_t v46 = *(void *)(v70 + 664);
    uint64_t v50 = *(id *)(v70 + 608);

    v47(v45, v46);
    uint64_t v48 = *(void *)(v70 + 40);
    uint64_t v49 = *(void *)(v70 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v70 + 16), v48);
    uint64_t v51 = objc_msgSend(v50, sel_start);
    if (v51)
    {
      uint64_t v44 = *(void *)(v70 + 656);
      uint64_t v42 = *(void *)(v70 + 640);
      uint64_t v43 = *(void *)(v70 + 624);
      uint64_t v41 = *(void *)(v70 + 632);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v44, v42, v43);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v44, 0, 1, v43);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v70 + 632) + 56))(*(void *)(v70 + 656), 1, 1, *(void *)(v70 + 624));
    }
    char v40 = objc_msgSend(*(id *)(v70 + 608), sel_end);
    if (v40)
    {
      uint64_t v39 = *(void *)(v70 + 648);
      uint64_t v37 = *(void *)(v70 + 640);
      uint64_t v38 = *(void *)(v70 + 624);
      uint64_t v36 = *(void *)(v70 + 632);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v39, v37, v38);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v39, 0, 1, v38);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v70 + 632) + 56))(*(void *)(v70 + 648), 1, 1, *(void *)(v70 + 624));
    }
    uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 + 16) + **(int **)(v49 + 16));
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v70 + 856) = v6;
    const void *v6 = *(void *)(v70 + 392);
    v6[1] = GetHealthQuantityIntentHandler.handle(intent:);
    uint64_t v7 = *(void *)(v70 + 656);
    uint64_t v8 = *(void *)(v70 + 648);
    return v35(v7, v8, v48, v49);
  }
  else
  {
    char v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 768);
    uint64_t v24 = *(void *)(v70 + 752);
    uint64_t v9 = *(void *)(v70 + 720);
    uint64_t v22 = *(void *)(v70 + 664);
    uint64_t v25 = *(void *)(v70 + 760);
    uint64_t v21 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v23(v9, v21, v22);
    swift_endAccess();
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v24;
    *(void *)(v27 + 24) = v25;
    log = Logger.logObject.getter();
    uint64_t v34 = static os_log_type_t.error.getter();
    *(void *)(v70 + 472) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v26 = *(_DWORD *)(v70 + 892);
    uint64_t v29 = swift_allocObject();
    *(unsigned char *)(v29 + 16) = 32;
    uint32_t v30 = swift_allocObject();
    *(unsigned char *)(v30 + 16) = 8;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v28 + 24) = v27;
    os_log_type_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v31 + 24) = v28;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v32 = v10;
    swift_retain();
    NSObject *v32 = partial apply for closure #1 in OSLogArguments.append(_:);
    v32[1] = v29;
    swift_retain();
    v32[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v32[3] = v30;
    swift_retain();
    v32[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v32[5] = v31;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v34))
    {
      id v11 = *(void *)(v70 + 816);
      uint64_t v18 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v19 = createStorage<A>(capacity:type:)(0);
      uint64_t v20 = createStorage<A>(capacity:type:)(1);
      uint64_t v71 = v18;
      uint64_t v72 = v19;
      uint64_t v73 = v20;
      serialize(_:at:)(2, &v71);
      serialize(_:at:)(1, &v71);
      uint64_t v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v75 = v29;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
      if (v11) {
        return result;
      }
      uint64_t v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v75 = v30;
      closure #1 in osLogInternal(_:log:type:)(&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
      uint64_t v74 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v75 = v31;
      closure #1 in osLogInternal(_:log:type:)(&v74, (uint64_t)&v71, (uint64_t)&v72, (uint64_t)&v73);
      _os_log_impl(&dword_25DE00000, log, v34, "Not authorized to read: %s", v18, v26);
      destroyStorage<A>(_:count:)(v19, 0, v17);
      destroyStorage<A>(_:count:)(v20, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v18, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v70 + 824);
    char v13 = *(void *)(v70 + 720);
    id v14 = *(void *)(v70 + 664);

    v15(v13, v14);
    type metadata accessor for GetHealthQuantityIntentResponse();
    uint64_t v16 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(101, 0);
    __swift_destroy_boxed_opaque_existential_1(v70 + 16);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    objc_super v12 = *(uint64_t (**)(char *))(*(void *)(v70 + 392) + 8);
    return v12(v16);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint8_t *buf;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  id v19;
  uint32_t size;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  NSObject *oslog;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  uint64_t v34 = v0;
  uint64_t v19 = *(id *)(v0 + 864);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 768);
  uint64_t v1 = *(void *)(v0 + 728);
  uint64_t v17 = *(void *)(v0 + 664);
  *(void *)(v0 + 392) = v0;
  *(void *)(v0 + 592) = v19;
  uint64_t v16 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v18(v1, v16, v17);
  swift_endAccess();
  uint64_t v2 = v19;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v19;
  oslog = Logger.logObject.getter();
  uint64_t v28 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 600) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 912);
  char v23 = swift_allocObject();
  *(unsigned char *)(v23 + 16) = 64;
  uint64_t v24 = swift_allocObject();
  *(unsigned char *)(v24 + 16) = 8;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v22 + 24) = v21;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v25 + 24) = v22;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v26 = v3;
  swift_retain();
  *uint64_t v26 = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[1] = v23;
  swift_retain();
  v26[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[3] = v24;
  swift_retain();
  v26[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v26[5] = v25;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v28))
  {
    uint64_t v4 = v15[109];
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    id v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    char v13 = createStorage<A>(capacity:type:)(1);
    id v14 = createStorage<A>(capacity:type:)(0);
    uint64_t v29 = buf;
    uint32_t v30 = v13;
    os_log_type_t v31 = v14;
    serialize(_:at:)(2, &v29);
    serialize(_:at:)(1, &v29);
    uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v33 = v23;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    if (v4) {
      return result;
    }
    uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v33 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v33 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v32, (uint64_t)&v29, (uint64_t)&v30, (uint64_t)&v31);
    _os_log_impl(&dword_25DE00000, oslog, v28, "Response from querying storage: %@", buf, size);
    destroyStorage<A>(_:count:)(v13, 1, v11);
    destroyStorage<A>(_:count:)(v14, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v9 = (void (*)(uint64_t, uint64_t))v15[103];
  uint64_t v7 = v15[91];
  uint64_t v8 = v15[83];

  v9(v7, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v15 + 2));
  swift_bridgeObjectRelease();
  uint64_t v10 = v15[108];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v15[49] + 8);
  return v6(v10);
}

{
  void *v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t (*v4)(char *);
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  id v17;
  char *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  id v26;
  uint32_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  id v39;
  char *v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint32_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  NSObject *log;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  id v61;
  char *v62;
  uint64_t v63;
  uint8_t *buf;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v72;
  NSObject *oslog;
  uint64_t v74;
  void *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  void *v90;
  uint64_t v91;

  uint64_t v90 = v0;
  uint64_t v79 = (id)v0[109];
  os_log_type_t v78 = v0[82];
  uint64_t v1 = v0[81];
  v0[49] = v0;
  outlined destroy of Date?(v1);
  outlined destroy of Date?(v78);
  uint64_t v2 = v79;
  v0[61] = v79;
  uint64_t v3 = v79;
  v0[62] = v79;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for related decl 'e' for HKErrorCode();
  if (swift_dynamicCast()) {
    uint64_t v75 = *(void **)(v77 + 504);
  }
  else {
    uint64_t v75 = 0;
  }
  if (v75)
  {
    *(void *)(v77 + 520) = v75;
    uint64_t v6 = v75;
    *(void *)(v77 + 536) = v75;
    lazy protocol witness table accessor for type related decl 'e' for HKErrorCode and conformance related decl 'e' for HKErrorCode();
    _BridgedStoredNSError.code.getter();
    outlined destroy of HealthKitPersistor((id *)(v77 + 536));
    if (*(void *)(v77 + 528) == 6)
    {
      uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 768);
      uint64_t v7 = *(void *)(v77 + 696);
      uint64_t v69 = *(void *)(v77 + 664);
      uint64_t v68 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v70(v7, v68, v69);
      swift_endAccess();
      oslog = Logger.logObject.getter();
      uint64_t v72 = static os_log_type_t.error.getter();
      *(void *)(v77 + 552) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t size = *(_DWORD *)(v77 + 908);
      uint64_t v74 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v72))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v65 = createStorage<A>(capacity:type:)(0);
        uint64_t v66 = createStorage<A>(capacity:type:)(0);
        *(void *)(v77 + 560) = buf;
        *(void *)(v77 + 568) = v65;
        *(void *)(v77 + 576) = v66;
        serialize(_:at:)(0, (unsigned char **)(v77 + 560));
        serialize(_:at:)(0, (unsigned char **)(v77 + 560));
        *(void *)(v77 + 584) = v74;
        uint64_t v67 = (void *)swift_task_alloc();
        v67[2] = v77 + 560;
        v67[3] = v77 + 568;
        v67[4] = v77 + 576;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25DE00000, oslog, v72, "HealthKit database was inaccessible", buf, size);
        destroyStorage<A>(_:count:)(v65, 0, v63);
        destroyStorage<A>(_:count:)(v66, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v61 = *(id *)(v77 + 872);
      uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v77 + 824);
      uint64_t v58 = *(void *)(v77 + 696);
      uint64_t v59 = *(void *)(v77 + 664);

      v60(v58, v59);
      type metadata accessor for GetHealthQuantityIntentResponse();
      uint64_t v62 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(103, 0);

      __swift_destroy_boxed_opaque_existential_1(v77 + 16);
      swift_bridgeObjectRelease();
      id v76 = v62;
    }
    else
    {
      uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 768);
      uint64_t v8 = *(void *)(v77 + 688);
      uint32_t v46 = *(void *)(v77 + 664);
      uint64_t v45 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v47(v8, v45, v46);
      swift_endAccess();
      uint64_t v9 = v75;
      uint64_t v49 = swift_allocObject();
      *(void *)(v49 + 16) = v75;
      default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
      swift_bridgeObjectRelease();
      log = Logger.logObject.getter();
      uint64_t v57 = static os_log_type_t.error.getter();
      *(void *)(v77 + 544) = 12;
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v48 = *(_DWORD *)(v77 + 904);
      uint64_t v52 = swift_allocObject();
      *(unsigned char *)(v52 + 16) = 64;
      uint64_t v53 = swift_allocObject();
      *(unsigned char *)(v53 + 16) = 8;
      uint64_t v50 = swift_allocObject();
      *(void *)(v50 + 16) = partial apply for implicit closure #7 in GetHealthQuantityIntentHandler.handle(intent:);
      *(void *)(v50 + 24) = v49;
      uint64_t v51 = swift_allocObject();
      *(void *)(v51 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
      *(void *)(v51 + 24) = v50;
      os_log_type_t v54 = swift_allocObject();
      *(void *)(v54 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(void *)(v54 + 24) = v51;
      _allocateUninitializedArray<A>(_:)();
      uint64_t v55 = v10;
      swift_retain();
      *uint64_t v55 = partial apply for closure #1 in OSLogArguments.append(_:);
      v55[1] = v52;
      swift_retain();
      v55[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v55[3] = v53;
      swift_retain();
      v55[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v55[5] = v54;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(log, v57))
      {
        uint64_t v42 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v43 = createStorage<A>(capacity:type:)(1);
        uint64_t v44 = createStorage<A>(capacity:type:)(0);
        uint64_t v85 = v42;
        uint64_t v86 = v43;
        uint64_t v87 = v44;
        serialize(_:at:)(2, &v85);
        serialize(_:at:)(1, &v85);
        uint64_t v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        id v89 = v52;
        closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v85, (uint64_t)&v86, (uint64_t)&v87);
        uint64_t v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        id v89 = v53;
        closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v85, (uint64_t)&v86, (uint64_t)&v87);
        uint64_t v88 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        id v89 = v54;
        closure #1 in osLogInternal(_:log:type:)(&v88, (uint64_t)&v85, (uint64_t)&v86, (uint64_t)&v87);
        _os_log_impl(&dword_25DE00000, log, v57, "HealthKit threw an error: %@", v42, v48);
        destroyStorage<A>(_:count:)(v43, 1, v41);
        destroyStorage<A>(_:count:)(v44, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v42, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v39 = *(id *)(v77 + 872);
      uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v77 + 824);
      uint64_t v36 = *(void *)(v77 + 688);
      uint64_t v37 = *(void *)(v77 + 664);

      v38(v36, v37);
      type metadata accessor for GetHealthQuantityIntentResponse();
      char v40 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);

      __swift_destroy_boxed_opaque_existential_1(v77 + 16);
      swift_bridgeObjectRelease();
      id v76 = v40;
    }
  }
  else
  {
    uint64_t v26 = *(id *)(v77 + 872);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 768);
    id v11 = *(void *)(v77 + 680);
    uint64_t v24 = *(void *)(v77 + 664);
    char v23 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v25(v11, v23, v24);
    swift_endAccess();
    objc_super v12 = v26;
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = v26;
    uint64_t v34 = Logger.logObject.getter();
    uint64_t v35 = static os_log_type_t.error.getter();
    *(void *)(v77 + 512) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v27 = *(_DWORD *)(v77 + 900);
    uint32_t v30 = swift_allocObject();
    *(unsigned char *)(v30 + 16) = 32;
    os_log_type_t v31 = swift_allocObject();
    *(unsigned char *)(v31 + 16) = 8;
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = partial apply for implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:);
    *(void *)(v29 + 24) = v28;
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v32 + 24) = v29;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v33 = v13;
    swift_retain();
    *uint64_t v33 = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[1] = v30;
    swift_retain();
    v33[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[3] = v31;
    swift_retain();
    v33[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v33[5] = v32;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v20 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v21 = createStorage<A>(capacity:type:)(0);
      uint64_t v22 = createStorage<A>(capacity:type:)(1);
      uint64_t v80 = v20;
      uint64_t v81 = v21;
      uint64_t v82 = v22;
      serialize(_:at:)(2, &v80);
      serialize(_:at:)(1, &v80);
      uint64_t v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v84 = v30;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
      uint64_t v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v84 = v31;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
      uint64_t v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v84 = v32;
      closure #1 in osLogInternal(_:log:type:)(&v83, (uint64_t)&v80, (uint64_t)&v81, (uint64_t)&v82);
      _os_log_impl(&dword_25DE00000, v34, v35, "Something went wrong while fetching data: %s", v20, v27);
      destroyStorage<A>(_:count:)(v21, 0, v19);
      destroyStorage<A>(_:count:)(v22, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v20, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v17 = *(id *)(v77 + 872);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v77 + 824);
    id v14 = *(void *)(v77 + 680);
    uint64_t v15 = *(void *)(v77 + 664);

    v16(v14, v15);
    type metadata accessor for GetHealthQuantityIntentResponse();
    uint64_t v18 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    __swift_destroy_boxed_opaque_existential_1(v77 + 16);
    swift_bridgeObjectRelease();
    id v76 = v18;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(char *))(*(void *)(v77 + 392) + 8);
  return v4(v76);
}

uint64_t GetHealthQuantityIntentHandler.handle(intent:)(char a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 392) = *v1;
  *(unsigned char *)(v3 + 916) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](GetHealthQuantityIntentHandler.handle(intent:), 0);
}

void *HealthKitFetcher.init(identifier:)(uint64_t a1, uint64_t a2)
{
  long long v98 = 0u;
  long long v99 = 0u;
  type metadata accessor for HKHealthStore();
  uint64_t v92 = NSDateFormatter.__allocating_init()();
  id v2 = v92;
  *(void *)&long long v98 = v92;
  type metadata accessor for HKQuantityType();
  uint64_t v93 = _allocateUninitializedArray<A>(_:)();
  uint64_t v94 = v3;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v96 = (void *)*MEMORY[0x263F09EF8];
  id v4 = (id)*MEMORY[0x263F09EF8];
  id v97 = objc_msgSend(ObjCClassFromMetadata, sel_quantityTypeForIdentifier_, v96);

  if (!v97) {
    goto LABEL_22;
  }
  void *v94 = v97;
  uint64_t v87 = (void *)swift_getObjCClassFromMetadata();
  uint64_t v88 = (void *)*MEMORY[0x263F09BC0];
  id v5 = (id)*MEMORY[0x263F09BC0];
  id v89 = objc_msgSend(v87, sel_quantityTypeForIdentifier_, v88);

  if (!v89)
  {
LABEL_21:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_22:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_23;
  }
  v94[1] = v89;
  uint64_t v84 = (void *)swift_getObjCClassFromMetadata();
  uint64_t v85 = (void *)*MEMORY[0x263F09E10];
  id v6 = (id)*MEMORY[0x263F09E10];
  id v86 = objc_msgSend(v84, sel_quantityTypeForIdentifier_, v85);

  if (!v86)
  {
LABEL_20:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_21;
  }
  v94[2] = v86;
  id v81 = (id)swift_getObjCClassFromMetadata();
  id v82 = (id)*MEMORY[0x263F09EA0];
  id v7 = (id)*MEMORY[0x263F09EA0];
  id v83 = objc_msgSend(v81, sel_quantityTypeForIdentifier_, v82);

  if (!v83)
  {
LABEL_19:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_20;
  }
  v94[3] = v83;
  id v78 = (id)swift_getObjCClassFromMetadata();
  id v79 = (id)*MEMORY[0x263F09C08];
  id v8 = (id)*MEMORY[0x263F09C08];
  id v80 = objc_msgSend(v78, sel_quantityTypeForIdentifier_, v79);

  if (!v80)
  {
LABEL_18:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_19;
  }
  v94[4] = v80;
  id v75 = (id)swift_getObjCClassFromMetadata();
  id v76 = (id)*MEMORY[0x263F09DE0];
  id v9 = (id)*MEMORY[0x263F09DE0];
  id v77 = objc_msgSend(v75, sel_quantityTypeForIdentifier_, v76);

  if (!v77)
  {
LABEL_17:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_18;
  }
  v94[5] = v77;
  id v72 = (id)swift_getObjCClassFromMetadata();
  id v73 = (id)*MEMORY[0x263F09BE8];
  id v10 = (id)*MEMORY[0x263F09BE8];
  id v74 = objc_msgSend(v72, sel_quantityTypeForIdentifier_, v73);

  if (!v74)
  {
LABEL_16:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_17;
  }
  v94[6] = v74;
  id v69 = (id)swift_getObjCClassFromMetadata();
  id v70 = (id)*MEMORY[0x263F09DE8];
  id v11 = (id)*MEMORY[0x263F09DE8];
  id v71 = objc_msgSend(v69, sel_quantityTypeForIdentifier_, v70);

  if (!v71)
  {
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_16;
  }
  v94[7] = v71;
  id v66 = (id)swift_getObjCClassFromMetadata();
  id v67 = (id)*MEMORY[0x263F09BC8];
  id v12 = (id)*MEMORY[0x263F09BC8];
  id v68 = objc_msgSend(v66, sel_quantityTypeForIdentifier_, v67);

  if (!v68)
  {
LABEL_14:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_15;
  }
  v94[8] = v68;
  id v63 = (id)swift_getObjCClassFromMetadata();
  id v64 = (id)*MEMORY[0x263F09DB0];
  id v13 = (id)*MEMORY[0x263F09DB0];
  id v65 = objc_msgSend(v63, sel_quantityTypeForIdentifier_, v64);

  if (!v65)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_14;
  }
  v94[9] = v65;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  *(void *)&long long v99 = v93;
  uint64_t v58 = _allocateUninitializedArray<A>(_:)();
  uint64_t v59 = v14;
  id v60 = (id)swift_getObjCClassFromMetadata();
  id v61 = (id)*MEMORY[0x263F09C00];
  id v15 = (id)*MEMORY[0x263F09C00];
  id v62 = objc_msgSend(v60, sel_quantityTypeForIdentifier_, v61);

  if (!v62)
  {
LABEL_41:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_42;
  }
  id v57 = v62;
LABEL_23:
  *uint64_t v59 = v57;
  id v54 = (id)swift_getObjCClassFromMetadata();
  id v55 = (id)*MEMORY[0x263F09C18];
  id v16 = (id)*MEMORY[0x263F09C18];
  id v56 = objc_msgSend(v54, sel_quantityTypeForIdentifier_, v55);

  if (!v56)
  {
LABEL_40:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_41;
  }
  v59[1] = v56;
  id v51 = (id)swift_getObjCClassFromMetadata();
  id v52 = (id)*MEMORY[0x263F09C38];
  id v17 = (id)*MEMORY[0x263F09C38];
  id v53 = objc_msgSend(v51, sel_quantityTypeForIdentifier_, v52);

  if (!v53)
  {
LABEL_39:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_40;
  }
  v59[2] = v53;
  id v48 = (id)swift_getObjCClassFromMetadata();
  id v49 = (id)*MEMORY[0x263F09C48];
  id v18 = (id)*MEMORY[0x263F09C48];
  id v50 = objc_msgSend(v48, sel_quantityTypeForIdentifier_, v49);

  if (!v50)
  {
LABEL_38:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_39;
  }
  v59[3] = v50;
  id v45 = (id)swift_getObjCClassFromMetadata();
  id v46 = (id)*MEMORY[0x263F09E38];
  id v19 = (id)*MEMORY[0x263F09E38];
  id v47 = objc_msgSend(v45, sel_quantityTypeForIdentifier_, v46);

  if (!v47)
  {
LABEL_37:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_38;
  }
  v59[4] = v47;
  id v42 = (id)swift_getObjCClassFromMetadata();
  id v43 = (id)*MEMORY[0x263F09E50];
  id v20 = (id)*MEMORY[0x263F09E50];
  id v44 = objc_msgSend(v42, sel_quantityTypeForIdentifier_, v43);

  if (!v44)
  {
LABEL_36:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_37;
  }
  v59[5] = v44;
  id v39 = (id)swift_getObjCClassFromMetadata();
  id v40 = (id)*MEMORY[0x263F09E88];
  id v21 = (id)*MEMORY[0x263F09E88];
  id v41 = objc_msgSend(v39, sel_quantityTypeForIdentifier_, v40);

  if (!v41)
  {
LABEL_35:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_36;
  }
  v59[6] = v41;
  id v36 = (id)swift_getObjCClassFromMetadata();
  id v37 = (id)*MEMORY[0x263F09EA8];
  id v22 = (id)*MEMORY[0x263F09EA8];
  id v38 = objc_msgSend(v36, sel_quantityTypeForIdentifier_, v37);

  if (!v38)
  {
LABEL_34:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_35;
  }
  v59[7] = v38;
  id v33 = (id)swift_getObjCClassFromMetadata();
  id v34 = (id)*MEMORY[0x263F09F40];
  id v23 = (id)*MEMORY[0x263F09F40];
  id v35 = objc_msgSend(v33, sel_quantityTypeForIdentifier_, v34);

  if (!v35)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_34;
  }
  v59[8] = v35;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  *((void *)&v99 + 1) = v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v31 = (id)MEMORY[0x2611C8860](a1, a2);
  id v24 = v31;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  id v32 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_quantityTypeForIdentifier_, v31);
  if (!v32)
  {
LABEL_42:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    return 0;
  }
  id v25 = v32;
  id v26 = v32;
  *((void *)&v98 + 1) = v32;

  id v27 = v92;
  id v28 = v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  outlined destroy of HealthKitFetcher((id *)&v98);
  return v92;
}

void *implicit closure #7 in GetHealthQuantityIntentHandler.handle(intent:)(void *a1)
{
  id v1 = a1;
  id v2 = a1;

  return a1;
}

uint64_t @objc closure #1 in GetHealthQuantityIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  v3[4] = a3;
  v3[3] = a1;
  void v3[2] = v3;
  id v5 = a1;
  v3[5] = _Block_copy(a2);
  id v6 = a3;
  id v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 48) = v7;
  void *v7 = *(void *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return GetHealthQuantityIntentHandler.handle(intent:)((uint64_t)a1);
}

id GetHealthQuantityIntentHandler.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t GetHealthQuantityIntentHandler.init()()
{
  if (!"SiriWellnessIntents.GetHealthQuantityIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.GetHealthQuantityIntentHandler", 50, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/GetHealthQuantityIntentHandler.swift", 56, 2, v1, 0x10uLL, 0x14uLL);
  __break(1u);
  return result;
}

id GetHealthQuantityIntentHandler.__deallocating_deinit()
{
  uint64_t v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void HealthKitFetcher.predicate(start:end:)(const void *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v26 = a7;
  id v35 = a1;
  id v27 = a2;
  uint64_t v28 = a3;
  id v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v47 = 0;
  uint64_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  id v43 = 0;
  unint64_t v32 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v35);
  id v33 = (char *)&v18 - v32;
  unint64_t v34 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  id v37 = (char *)&v18 - v34;
  uint64_t v47 = v9;
  uint64_t v46 = v10;
  *(void *)&long long v44 = v11;
  *((void *)&v44 + 1) = v12;
  *(void *)&long long v45 = v13;
  *((void *)&v45 + 1) = v14;
  id v36 = self;
  outlined init with copy of Date?(v35, v37);
  uint64_t v38 = type metadata accessor for Date();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = v38 - 8;
  id v41 = *(unsigned int (**)(char *, uint64_t))(v39 + 48);
  uint64_t v42 = v39 + 48;
  if (v41(v37, 1) == 1)
  {
    Class v25 = 0;
  }
  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
    Class v25 = isa;
  }
  Class v23 = v25;
  outlined init with copy of Date?(v27, v33);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v41)(v33, 1, v38) == 1)
  {
    Class v22 = 0;
  }
  else
  {
    Class v21 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v33, v38);
    Class v22 = v21;
  }
  Class v19 = v22;
  id v20 = objc_msgSend(v36, sel_predicateForSamplesWithStartDate_endDate_options_, v23);

  id v43 = v20;
  id v15 = v29;
  id v16 = v20;
  unint64_t v17 = type metadata accessor for HKSample();
  MEMORY[0x2611C8710](v29, v20, v17);
}

uint64_t HealthKitFetcher.isReadingAuthorized(for:)(uint64_t a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 64) = a2;
  *(void *)(v5 + 48) = v5;
  *(void *)(v5 + 56) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(void *)(v5 + 56) = a1;
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  id v6 = a2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v9 + 72) = v7;
  void *v7 = *(void *)(v9 + 48);
  v7[1] = HealthKitFetcher.isReadingAuthorized(for:);
  return isSiriAuthorizedToAccessHealthData(store:)((uint64_t)a2);
}

uint64_t HealthKitFetcher.isReadingAuthorized(for:)(unsigned int a1)
{
  uint64_t v5 = *v1;
  id v4 = *(void **)(*v1 + 64);
  *(void *)(v5 + 48) = *v1;
  swift_task_dealloc();

  objc_super v2 = *(uint64_t (**)(void))(*(void *)(v5 + 48) + 8);
  return v2(a1);
}

uint64_t HealthKitFetcher.query(start:end:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 816) = a6;
  *(void *)(v6 + 808) = a5;
  *(void *)(v6 + 800) = a4;
  *(void *)(v6 + 792) = a3;
  *(void *)(v6 + 784) = a2;
  *(void *)(v6 + 776) = a1;
  *(void *)(v6 + 336) = v6;
  *(void *)(v6 + 344) = 0;
  *(void *)(v6 + 352) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(void *)(v6 + 368) = 0;
  *(void *)(v6 + 376) = 0;
  *(void *)(v6 + 392) = 0;
  *(void *)(v6 + 528) = 0;
  *(void *)(v6 + 536) = 0;
  *(void *)(v6 + 552) = 0;
  *(void *)(v6 + 616) = 0;
  *(void *)(v6 + 624) = 0;
  *(void *)(v6 + 632) = 0;
  *(void *)(v6 + 640) = 0;
  *(void *)(v6 + 728) = 0;
  *(void *)(v6 + 736) = 0;
  uint64_t v7 = type metadata accessor for Calendar();
  *(void *)(v6 + 824) = v7;
  *(void *)(v6 + 832) = *(void *)(v7 - 8);
  *(void *)(v6 + 840) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Date();
  *(void *)(v6 + 848) = v8;
  uint64_t v11 = *(void *)(v8 - 8);
  *(void *)(v6 + 856) = v11;
  *(void *)(v6 + 864) = *(void *)(v11 + 64);
  *(void *)(v6 + 872) = swift_task_alloc();
  *(void *)(v6 + 880) = swift_task_alloc();
  *(void *)(v6 + 888) = swift_task_alloc();
  uint64_t v12 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                  - 8);
  *(void *)(v6 + 896) = v12;
  *(void *)(v6 + 904) = *(void *)(v12 + 64);
  *(void *)(v6 + 912) = swift_task_alloc();
  *(void *)(v6 + 920) = swift_task_alloc();
  *(void *)(v6 + 928) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v6 + 936) = v9;
  *(void *)(v6 + 944) = *(void *)(v9 - 8);
  *(void *)(v6 + 952) = swift_task_alloc();
  *(void *)(v6 + 960) = swift_task_alloc();
  *(void *)(v6 + 968) = swift_task_alloc();
  *(void *)(v6 + 976) = swift_task_alloc();
  *(void *)(v6 + 984) = swift_task_alloc();
  *(void *)(v6 + 992) = swift_task_alloc();
  *(void *)(v6 + 1000) = swift_task_alloc();
  *(void *)(v6 + 1008) = swift_task_alloc();
  *(void *)(v6 + 1016) = swift_task_alloc();
  *(void *)(v6 + 1024) = swift_task_alloc();
  *(void *)(v6 + 1032) = swift_task_alloc();
  *(void *)(v6 + 1040) = swift_task_alloc();
  *(void *)(v6 + 344) = a1;
  *(void *)(v6 + 352) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(void *)(v6 + 32) = a5;
  *(void *)(v6 + 40) = a6;
  return MEMORY[0x270FA2498](HealthKitFetcher.query(start:end:), 0);
}

uint64_t HealthKitFetcher.query(start:end:)()
{
  uint64_t v74 = v0;
  uint64_t v1 = *(void *)(v0 + 1040);
  uint64_t v38 = *(void *)(v0 + 944);
  uint64_t v40 = *(void *)(v0 + 936);
  id v49 = *(void **)(v0 + 928);
  uint64_t v46 = *(void *)(v0 + 896);
  uint64_t v44 = *(void *)(v0 + 816);
  uint64_t v43 = *(void *)(v0 + 808);
  id v42 = *(id *)(v0 + 800);
  id v41 = *(id *)(v0 + 792);
  uint64_t v47 = *(const void **)(v0 + 784);
  long long v45 = *(const void **)(v0 + 776);
  *(void *)(v0 + 336) = v0;
  uint64_t v39 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  objc_super v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
  *(void *)(v0 + 1048) = v2;
  *(void *)(v0 + 1056) = (v38 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v2(v1, v39, v40);
  swift_endAccess();
  id v3 = v41;
  id v4 = v42;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v51 = (void *)swift_allocObject();
  v51[2] = v41;
  v51[3] = v42;
  v51[4] = v43;
  v51[5] = v44;
  outlined init with copy of Date?(v45, v49);
  int v48 = *(_DWORD *)(v46 + 80);
  uint64_t v53 = swift_allocObject();
  outlined init with take of Date?(v49, (void *)(v53 + ((v48 + 16) & ~(unint64_t)v48)));
  outlined init with copy of Date?(v47, v49);
  uint64_t v55 = swift_allocObject();
  outlined init with take of Date?(v49, (void *)(v55 + ((v48 + 16) & ~(unint64_t)v48)));
  oslog = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 360) = 32;
  *(void *)(v0 + 1064) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 1072) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 1080) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 1344);
  uint64_t v57 = swift_allocObject();
  *(unsigned char *)(v57 + 16) = 64;
  uint64_t v58 = swift_allocObject();
  *(unsigned char *)(v58 + 16) = 8;
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = partial apply for implicit closure #1 in HealthKitFetcher.query(start:end:);
  *(void *)(v52 + 24) = v51;
  uint64_t v59 = swift_allocObject();
  *(void *)(v59 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v59 + 24) = v52;
  uint64_t v60 = swift_allocObject();
  *(unsigned char *)(v60 + 16) = 32;
  uint64_t v61 = swift_allocObject();
  *(unsigned char *)(v61 + 16) = 8;
  uint64_t v54 = swift_allocObject();
  *(void *)(v54 + 16) = partial apply for implicit closure #2 in HealthKitFetcher.query(start:end:);
  *(void *)(v54 + 24) = v53;
  uint64_t v62 = swift_allocObject();
  *(void *)(v62 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v62 + 24) = v54;
  uint64_t v63 = swift_allocObject();
  *(unsigned char *)(v63 + 16) = 32;
  uint64_t v64 = swift_allocObject();
  *(unsigned char *)(v64 + 16) = 8;
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = partial apply for implicit closure #2 in HealthKitFetcher.query(start:end:);
  *(void *)(v56 + 24) = v55;
  uint64_t v65 = swift_allocObject();
  *(void *)(v65 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v65 + 24) = v56;
  *(void *)(v0 + 1088) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  id v66 = v5;
  swift_retain();
  *id v66 = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[1] = v57;
  swift_retain();
  v66[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[3] = v58;
  swift_retain();
  v66[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[5] = v59;
  swift_retain();
  v66[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[7] = v60;
  swift_retain();
  v66[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[9] = v61;
  swift_retain();
  v66[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[11] = v62;
  swift_retain();
  v66[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[13] = v63;
  swift_retain();
  v66[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[15] = v64;
  swift_retain();
  v66[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v66[17] = v65;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v68))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v35 = createStorage<A>(capacity:type:)(1);
    uint64_t v36 = createStorage<A>(capacity:type:)(2);
    id v69 = buf;
    uint64_t v70 = v35;
    uint64_t v71 = v36;
    serialize(_:at:)(2, &v69);
    serialize(_:at:)(3, &v69);
    id v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v73 = v57;
    closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v69, (uint64_t)&v70, (uint64_t)&v71);
    id v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v73 = v58;
    closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v69, (uint64_t)&v70, (uint64_t)&v71);
    id v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v73 = v59;
    closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v69, (uint64_t)&v70, (uint64_t)&v71);
    id v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v73 = v60;
    closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v69, (uint64_t)&v70, (uint64_t)&v71);
    id v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v73 = v61;
    closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v69, (uint64_t)&v70, (uint64_t)&v71);
    id v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v73 = v62;
    closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v69, (uint64_t)&v70, (uint64_t)&v71);
    id v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v73 = v63;
    closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v69, (uint64_t)&v70, (uint64_t)&v71);
    id v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v73 = v64;
    closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v69, (uint64_t)&v70, (uint64_t)&v71);
    id v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v73 = v65;
    closure #1 in osLogInternal(_:log:type:)(&v72, (uint64_t)&v69, (uint64_t)&v70, (uint64_t)&v71);
    _os_log_impl(&dword_25DE00000, oslog, v68, "Executing HealthKit queries for %@ between dates %s - %s", buf, size);
    destroyStorage<A>(_:count:)(v35, 1, v33);
    destroyStorage<A>(_:count:)(v36, 2, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v29 = v37[130];
  uint64_t v30 = v37[117];
  id v32 = (id)v37[100];
  uint64_t v28 = v37[118];

  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
  v37[137] = v6;
  v37[138] = (v28 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v29, v30);
  v37[139] = type metadata accessor for GetHealthQuantityIntentResponse();
  uint64_t v31 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(4, 0);
  v37[140] = v31;
  uint64_t v7 = v31;
  uint64_t v8 = v31;
  uint64_t v9 = v31;
  uint64_t v10 = v31;
  uint64_t v11 = v31;
  uint64_t v12 = v31;
  uint64_t v13 = v31;
  uint64_t v14 = v31;
  id v15 = v31;
  id v16 = v31;
  unint64_t v17 = v31;
  uint64_t v18 = v31;
  uint64_t v19 = v31;
  id v20 = v31;
  Class v21 = v31;
  Class v22 = v31;
  Class v23 = v31;
  v37[46] = v31;
  id v24 = v32;
  Class v25 = (void *)swift_task_alloc();
  v37[141] = v25;
  *Class v25 = v37[42];
  v25[1] = HealthKitFetcher.query(start:end:);
  uint64_t v26 = v37[100];
  return localizedPreferredUnitName(for:value:store:)(v26, 0, 1, 0);
}

{
  void *v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;

  uint64_t v1 = v0[143];
  uint64_t v8 = (id)v0[140];
  uint64_t v9 = (id)v0[100];
  uint64_t v11 = (id)v0[99];
  v0[42] = v0;
  uint64_t v7 = (id)MEMORY[0x2611C8860](v1);
  swift_bridgeObjectRelease();
  objc_msgSend(v8, sel_setUnit_, v7);

  objc_super v2 = v9;
  id v3 = v11;
  id v4 = (void *)swift_task_alloc();
  v10[145] = v4;
  *id v4 = v10[42];
  v4[1] = HealthKitFetcher.query(start:end:);
  uint64_t v5 = v10[100];
  return getPreferredUnit(for:store:)(v5, (uint64_t)v11);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  void *v5;
  uint64_t result;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  void *v41;
  uint64_t (*v42)(char *);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint32_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  id v71;
  char *v72;
  uint64_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  uint32_t v81;
  os_log_type_t v82;
  NSObject *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t, uint64_t);
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint32_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  NSObject *v117;
  os_log_type_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t);
  uint64_t v122;
  uint8_t *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t, uint64_t);
  uint32_t v131;
  os_log_type_t v132;
  NSObject *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  char v140;
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t, uint64_t);
  const void *v147;
  uint64_t v148;
  void *v149;
  id v150;
  uint64_t v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  unsigned int (*v156)(void *, uint64_t, uint64_t);
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t);
  uint64_t v160;
  uint8_t *v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(uint64_t, uint64_t, uint64_t);
  uint32_t v168;
  os_log_type_t v169;
  NSObject *log;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void (*v174)(uint64_t, uint64_t);
  uint64_t v175;
  id v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint8_t *buf;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(uint64_t, uint64_t, uint64_t);
  uint64_t v186;
  uint32_t size;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void *v198;
  NSObject *oslog;
  os_log_type_t v200;
  uint64_t v201;
  uint64_t v202;
  id v203;
  uint8_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t (*v207)(uint64_t, uint64_t, uint64_t);
  uint64_t v208;
  uint8_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t (*v212)(uint64_t, uint64_t, uint64_t);
  uint64_t v213;
  uint8_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t (*v217)(uint64_t, uint64_t, uint64_t);
  uint64_t v218;
  void *v219;
  uint64_t v220;

  v219 = v0;
  uint64_t v1 = (void *)v0[146];
  v0[42] = v0;
  v203 = v1;
  v202 = v0[147];
  v0[148] = v1;
  v0[47] = v1;
  objc_super v2 = v1;
  if (!v203)
  {
    id v51 = *(id *)(v201 + 1120);
    uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1048);
    uint64_t v38 = *(void *)(v201 + 952);
    uint64_t v53 = *(void *)(v201 + 936);
    uint64_t v58 = *(void *)(v201 + 816);
    uint64_t v57 = *(void *)(v201 + 808);
    uint64_t v56 = *(id *)(v201 + 800);
    uint64_t v55 = *(id *)(v201 + 792);

    uint64_t v52 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v54(v38, v52, v53);
    swift_endAccess();
    uint64_t v39 = v55;
    uint64_t v40 = v56;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v60 = (void *)swift_allocObject();
    v60[2] = v55;
    v60[3] = v56;
    v60[4] = v57;
    v60[5] = v58;
    id v66 = Logger.logObject.getter();
    id v67 = static os_log_type_t.error.getter();
    *(void *)(v201 + 384) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v59 = *(_DWORD *)(v201 + 1348);
    uint64_t v62 = swift_allocObject();
    *(unsigned char *)(v62 + 16) = 64;
    uint64_t v63 = swift_allocObject();
    *(unsigned char *)(v63 + 16) = 8;
    uint64_t v61 = swift_allocObject();
    *(void *)(v61 + 16) = partial apply for implicit closure #1 in HealthKitFetcher.query(start:end:);
    *(void *)(v61 + 24) = v60;
    uint64_t v64 = swift_allocObject();
    *(void *)(v64 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(void *)(v64 + 24) = v61;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v65 = v41;
    swift_retain();
    *uint64_t v65 = partial apply for closure #1 in OSLogArguments.append(_:);
    v65[1] = v62;
    swift_retain();
    v65[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v65[3] = v63;
    swift_retain();
    v65[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v65[5] = v64;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v66, v67))
    {
      int v48 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      id v49 = createStorage<A>(capacity:type:)(1);
      id v50 = createStorage<A>(capacity:type:)(0);
      v204 = v48;
      v205 = v49;
      v206 = v50;
      serialize(_:at:)(2, &v204);
      serialize(_:at:)(1, &v204);
      v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v208 = v62;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v207, (uint64_t)&v204, (uint64_t)&v205, (uint64_t)&v206);
      if (v202) {
        return result;
      }
      v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v208 = v63;
      closure #1 in osLogInternal(_:log:type:)(&v207, (uint64_t)&v204, (uint64_t)&v205, (uint64_t)&v206);
      v207 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v208 = v64;
      closure #1 in osLogInternal(_:log:type:)(&v207, (uint64_t)&v204, (uint64_t)&v205, (uint64_t)&v206);
      _os_log_impl(&dword_25DE00000, v66, v67, "Failed to get units for %@", v48, v59);
      destroyStorage<A>(_:count:)(v49, 1, v47);
      destroyStorage<A>(_:count:)(v50, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v48, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    long long v45 = *(void (**)(uint64_t, uint64_t))(v201 + 1096);
    uint64_t v43 = *(void *)(v201 + 952);
    uint64_t v44 = *(void *)(v201 + 936);

    v45(v43, v44);
    uint64_t v46 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    id v72 = v46;
    goto LABEL_49;
  }
  v186 = *(void *)(v201 + 1120);
  v185 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1048);
  id v3 = *(void *)(v201 + 1032);
  v184 = *(void *)(v201 + 936);
  *(void *)(v201 + 392) = v203;
  v183 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v185(v3, v183, v184);
  swift_endAccess();
  v188 = swift_allocObject();
  *(void *)(v188 + 16) = v186;
  id v4 = v203;
  v190 = swift_allocObject();
  *(void *)(v190 + 16) = v203;
  oslog = Logger.logObject.getter();
  v200 = static os_log_type_t.debug.getter();
  *(void *)(v201 + 400) = 22;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v201 + 1352);
  v192 = swift_allocObject();
  *(unsigned char *)(v192 + 16) = 32;
  v193 = swift_allocObject();
  *(unsigned char *)(v193 + 16) = 8;
  v189 = swift_allocObject();
  *(void *)(v189 + 16) = partial apply for specialized implicit closure #5 in HealthKitFetcher.query(start:end:);
  *(void *)(v189 + 24) = v188;
  v194 = swift_allocObject();
  *(void *)(v194 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v194 + 24) = v189;
  v195 = swift_allocObject();
  *(unsigned char *)(v195 + 16) = 64;
  v196 = swift_allocObject();
  *(unsigned char *)(v196 + 16) = 8;
  v191 = swift_allocObject();
  *(void *)(v191 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v191 + 24) = v190;
  v197 = swift_allocObject();
  *(void *)(v197 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v197 + 24) = v191;
  _allocateUninitializedArray<A>(_:)();
  v198 = v5;
  swift_retain();
  *v198 = partial apply for closure #1 in OSLogArguments.append(_:);
  v198[1] = v192;
  swift_retain();
  v198[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v198[3] = v193;
  swift_retain();
  v198[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v198[5] = v194;
  swift_retain();
  v198[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v198[7] = v195;
  swift_retain();
  v198[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v198[9] = v196;
  swift_retain();
  v198[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v198[11] = v197;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v200))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v181 = createStorage<A>(capacity:type:)(1);
    v182 = createStorage<A>(capacity:type:)(1);
    v214 = buf;
    v215 = v181;
    v216 = v182;
    serialize(_:at:)(2, &v214);
    serialize(_:at:)(2, &v214);
    v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v218 = v192;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
    if (v202) {
      return result;
    }
    v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v218 = v193;
    closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
    v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v218 = v194;
    closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
    v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v218 = v195;
    closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
    v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v218 = v196;
    closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
    v217 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v218 = v197;
    closure #1 in osLogInternal(_:log:type:)(&v217, (uint64_t)&v214, (uint64_t)&v215, (uint64_t)&v216);
    _os_log_impl(&dword_25DE00000, oslog, v200, "Localized unit -> %s <- found for %@", buf, size);
    destroyStorage<A>(_:count:)(v181, 1, v179);
    destroyStorage<A>(_:count:)(v182, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v178 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v178 = v202;
  }
  v174 = *(void (**)(uint64_t, uint64_t))(v201 + 1096);
  v172 = *(void *)(v201 + 1032);
  v173 = *(void *)(v201 + 936);
  v175 = *(void *)(v201 + 816);
  v176 = *(id *)(v201 + 800);

  v174(v172, v173);
  swift_bridgeObjectRetain();
  *(void *)(v201 + 408) = v175;
  uint64_t v7 = v176;
  *(void *)(v201 + 416) = v176;
  *(void *)(v201 + 1192) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKQuantityType]);
  *(void *)(v201 + 1200) = lazy protocol witness table accessor for type [HKQuantityType] and conformance [A]();
  *(void *)(v201 + 1208) = lazy protocol witness table accessor for type HKQuantityType and conformance NSObject();
  v177 = Sequence<>.contains(_:)();

  outlined destroy of [HKQuantityType]();
  if (v177)
  {
    v167 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1048);
    uint64_t v8 = *(void *)(v201 + 1024);
    v166 = *(void *)(v201 + 936);
    v165 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v167(v8, v165, v166);
    swift_endAccess();
    log = Logger.logObject.getter();
    v169 = static os_log_type_t.debug.getter();
    *(void *)(v201 + 680) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v168 = *(_DWORD *)(v201 + 1384);
    v171 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v169))
    {
      v161 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v162 = createStorage<A>(capacity:type:)(0);
      v163 = createStorage<A>(capacity:type:)(0);
      *(void *)(v201 + 744) = v161;
      *(void *)(v201 + 752) = v162;
      *(void *)(v201 + 760) = v163;
      serialize(_:at:)(0, (unsigned char **)(v201 + 744));
      serialize(_:at:)(0, (unsigned char **)(v201 + 744));
      *(void *)(v201 + 768) = v171;
      v164 = (void *)swift_task_alloc();
      v164[2] = v201 + 744;
      v164[3] = v201 + 752;
      v164[4] = v201 + 760;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v178) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, log, v169, "Searching for most recent sample", v161, v168);
      destroyStorage<A>(_:count:)(v162, 0, v160);
      destroyStorage<A>(_:count:)(v163, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v161, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v159 = *(void (**)(uint64_t, uint64_t))(v201 + 1096);
    v157 = *(void *)(v201 + 1024);
    v158 = *(void *)(v201 + 936);

    v159(v157, v158);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v201 + 1216) = v9;
    *uint64_t v9 = *(void *)(v201 + 336);
    v9[1] = HealthKitFetcher.query(start:end:);
    uint64_t v10 = *(void *)(v201 + 816);
    uint64_t v11 = *(void *)(v201 + 808);
    uint64_t v12 = *(void *)(v201 + 800);
    uint64_t v13 = *(void *)(v201 + 792);
    uint64_t v14 = *(void *)(v201 + 784);
    id v15 = *(void *)(v201 + 776);
    return HealthKitFetcher.getMostRecent(startDate:endDate:)(v15, v14, v13, v12, v11, v10);
  }
  v152 = *(id *)(v201 + 1120);

  v155 = *(void **)(v201 + 920);
  v154 = *(void *)(v201 + 848);
  v153 = *(void *)(v201 + 856);
  outlined init with copy of Date?(*(const void **)(v201 + 776), v155);
  v156 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v153 + 48);
  if (v156(v155, 1, v154) == 1)
  {
    v150 = *(id *)(v201 + 1120);
    v151 = *(void *)(v201 + 920);

    outlined destroy of Date?(v151);
LABEL_37:
    id v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1048);
    id v37 = *(void *)(v201 + 960);
    id v79 = *(void *)(v201 + 936);
    id v78 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v80(v37, v78, v79);
    swift_endAccess();
    id v83 = Logger.logObject.getter();
    id v82 = static os_log_type_t.error.getter();
    *(void *)(v201 + 424) = 2;
    UnsignedInteger<>.init<A>(_:)();
    id v81 = *(_DWORD *)(v201 + 1356);
    uint64_t v84 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v83, v82))
    {
      uint64_t v74 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v75 = createStorage<A>(capacity:type:)(0);
      id v76 = createStorage<A>(capacity:type:)(0);
      *(void *)(v201 + 432) = v74;
      *(void *)(v201 + 440) = v75;
      *(void *)(v201 + 448) = v76;
      serialize(_:at:)(0, (unsigned char **)(v201 + 432));
      serialize(_:at:)(0, (unsigned char **)(v201 + 432));
      *(void *)(v201 + 456) = v84;
      id v77 = (void *)swift_task_alloc();
      v77[2] = v201 + 432;
      v77[3] = v201 + 440;
      v77[4] = v201 + 448;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v178) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v83, v82, "Stopping search because no dates range was specified", v74, v81);
      destroyStorage<A>(_:count:)(v75, 0, v73);
      destroyStorage<A>(_:count:)(v76, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v74, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v71 = *(id *)(v201 + 1184);
    uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v201 + 1096);
    os_log_type_t v68 = *(void *)(v201 + 960);
    id v69 = *(void *)(v201 + 936);

    v70(v68, v69);
    id v72 = *(char **)(v201 + 1120);
LABEL_49:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v42 = *(uint64_t (**)(char *))(*(void *)(v201 + 336) + 8);
    return v42(v72);
  }
  id v16 = *(void *)(v201 + 920);
  v149 = *(void **)(v201 + 912);
  unint64_t v17 = *(void *)(v201 + 880);
  v148 = *(void *)(v201 + 848);
  v147 = *(const void **)(v201 + 784);
  uint64_t v18 = *(void *)(v201 + 856) + 32;
  v146 = *(void (**)(uint64_t, uint64_t))v18;
  *(void *)(v201 + 1240) = *(void *)v18;
  *(void *)(v201 + 1248) = v18 & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v146(v17, v16);
  outlined init with copy of Date?(v147, v149);
  if (v156(v149, 1, v148) == 1)
  {
    v141 = *(id *)(v201 + 1120);
    v142 = *(void *)(v201 + 912);
    v145 = *(void *)(v201 + 880);
    v144 = *(void *)(v201 + 848);
    v143 = *(void *)(v201 + 856);

    outlined destroy of Date?(v142);
    (*(void (**)(uint64_t, uint64_t))(v143 + 8))(v145, v144);
    goto LABEL_37;
  }
  v136 = *(void *)(v201 + 912);
  v135 = *(void *)(v201 + 872);
  v137 = *(void *)(v201 + 848);
  v138 = *(void *)(v201 + 808);
  v139 = *(id *)(v201 + 800);

  ((void (*)(uint64_t, uint64_t, uint64_t))v146)(v135, v136, v137);
  swift_bridgeObjectRetain();
  *(void *)(v201 + 464) = v138;
  uint64_t v19 = v139;
  *(void *)(v201 + 472) = v139;
  v140 = Sequence<>.contains(_:)();

  outlined destroy of [HKQuantityType]();
  if (v140)
  {
    uint64_t v92 = *(id *)(v201 + 1120);
    uint64_t v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1048);
    uint64_t v28 = *(void *)(v201 + 992);
    uint64_t v94 = *(void *)(v201 + 936);
    v102 = *(void *)(v201 + 888);
    id v97 = *(void *)(v201 + 880);
    long long v99 = *(void *)(v201 + 872);
    uint64_t v103 = *(void *)(v201 + 848);
    uint64_t v96 = *(void *)(v201 + 856);

    uint64_t v93 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v95(v28, v93, v94);
    swift_endAccess();
    uint64_t v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(v96 + 16);
    *(void *)(v201 + 1280) = v100;
    *(void *)(v201 + 1288) = (v96 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v100(v102, v97, v103);
    uint64_t v101 = *(_DWORD *)(v96 + 80);
    *(_DWORD *)(v201 + 1392) = v101;
    long long v98 = swift_allocObject();
    ((void (*)(unint64_t, uint64_t, uint64_t))v146)(v98 + ((v101 + 16) & ~(unint64_t)v101), v102, v103);
    swift_retain();
    v106 = swift_allocObject();
    *(void *)(v106 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v106 + 24) = v98;
    swift_release();
    v100(v102, v99, v103);
    uint64_t v104 = swift_allocObject();
    ((void (*)(unint64_t, uint64_t, uint64_t))v146)(v104 + ((v101 + 16) & ~(unint64_t)v101), v102, v103);
    swift_retain();
    v108 = swift_allocObject();
    *(void *)(v108 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v108 + 24) = v104;
    swift_release();
    v117 = Logger.logObject.getter();
    v118 = static os_log_type_t.debug.getter();
    *(void *)(v201 + 480) = 22;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v105 = *(_DWORD *)(v201 + 1360);
    v110 = swift_allocObject();
    *(unsigned char *)(v110 + 16) = 32;
    v111 = swift_allocObject();
    *(unsigned char *)(v111 + 16) = 8;
    v107 = swift_allocObject();
    *(void *)(v107 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
    *(void *)(v107 + 24) = v106;
    v112 = swift_allocObject();
    *(void *)(v112 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v112 + 24) = v107;
    v113 = swift_allocObject();
    *(unsigned char *)(v113 + 16) = 32;
    v114 = swift_allocObject();
    *(unsigned char *)(v114 + 16) = 8;
    v109 = swift_allocObject();
    *(void *)(v109 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
    *(void *)(v109 + 24) = v108;
    v115 = swift_allocObject();
    *(void *)(v115 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v115 + 24) = v109;
    _allocateUninitializedArray<A>(_:)();
    v116 = v29;
    swift_retain();
    *v116 = partial apply for closure #1 in OSLogArguments.append(_:);
    v116[1] = v110;
    swift_retain();
    v116[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v116[3] = v111;
    swift_retain();
    v116[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v116[5] = v112;
    swift_retain();
    v116[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v116[7] = v113;
    swift_retain();
    v116[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v116[9] = v114;
    swift_retain();
    v116[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v116[11] = v115;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v117, v118))
    {
      id v89 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v90 = createStorage<A>(capacity:type:)(0);
      uint64_t v91 = createStorage<A>(capacity:type:)(2);
      v209 = v89;
      v210 = v90;
      v211 = v91;
      serialize(_:at:)(2, &v209);
      serialize(_:at:)(2, &v209);
      v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v213 = v110;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v212, (uint64_t)&v209, (uint64_t)&v210, (uint64_t)&v211);
      if (v178) {
        return result;
      }
      v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v213 = v111;
      closure #1 in osLogInternal(_:log:type:)(&v212, (uint64_t)&v209, (uint64_t)&v210, (uint64_t)&v211);
      v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v213 = v112;
      closure #1 in osLogInternal(_:log:type:)(&v212, (uint64_t)&v209, (uint64_t)&v210, (uint64_t)&v211);
      v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v213 = v113;
      closure #1 in osLogInternal(_:log:type:)(&v212, (uint64_t)&v209, (uint64_t)&v210, (uint64_t)&v211);
      v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v213 = v114;
      closure #1 in osLogInternal(_:log:type:)(&v212, (uint64_t)&v209, (uint64_t)&v210, (uint64_t)&v211);
      v212 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v213 = v115;
      closure #1 in osLogInternal(_:log:type:)(&v212, (uint64_t)&v209, (uint64_t)&v210, (uint64_t)&v211);
      _os_log_impl(&dword_25DE00000, v117, v118, "Searching for the total value for cumulative datatypes in %s - %s", v89, v105);
      destroyStorage<A>(_:count:)(v90, 0, v88);
      destroyStorage<A>(_:count:)(v91, 2, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v89, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v87 = *(void (**)(uint64_t, uint64_t))(v201 + 1096);
    uint64_t v85 = *(void *)(v201 + 992);
    id v86 = *(void *)(v201 + 936);

    v87(v85, v86);
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v201 + 1296) = v30;
    *uint64_t v30 = *(void *)(v201 + 336);
    v30[1] = HealthKitFetcher.query(start:end:);
    uint64_t v31 = *(void *)(v201 + 880);
    id v32 = *(void *)(v201 + 872);
    uint64_t v33 = *(void *)(v201 + 816);
    unint64_t v34 = *(void *)(v201 + 808);
    uint64_t v35 = *(void *)(v201 + 800);
    uint64_t v36 = *(void *)(v201 + 792);
    return HealthKitFetcher.getCumulativeTotal(startDate:endDate:)(v31, v32, v36, v35, v34, v33);
  }
  else
  {
    v127 = *(id *)(v201 + 1120);
    v130 = *(void (**)(uint64_t, uint64_t, uint64_t))(v201 + 1048);
    id v20 = *(void *)(v201 + 1008);
    v129 = *(void *)(v201 + 936);

    v128 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v130(v20, v128, v129);
    swift_endAccess();
    v133 = Logger.logObject.getter();
    v132 = static os_log_type_t.debug.getter();
    *(void *)(v201 + 568) = 2;
    UnsignedInteger<>.init<A>(_:)();
    v131 = *(_DWORD *)(v201 + 1376);
    v134 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v133, v132))
    {
      v123 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v124 = createStorage<A>(capacity:type:)(0);
      v125 = createStorage<A>(capacity:type:)(0);
      *(void *)(v201 + 648) = v123;
      *(void *)(v201 + 656) = v124;
      *(void *)(v201 + 664) = v125;
      serialize(_:at:)(0, (unsigned char **)(v201 + 648));
      serialize(_:at:)(0, (unsigned char **)(v201 + 648));
      *(void *)(v201 + 672) = v134;
      v126 = (void *)swift_task_alloc();
      v126[2] = v201 + 648;
      v126[3] = v201 + 656;
      v126[4] = v201 + 664;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v178) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v133, v132, "Searching for discrete min, max and average for data", v123, v131);
      destroyStorage<A>(_:count:)(v124, 0, v122);
      destroyStorage<A>(_:count:)(v125, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v123, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v121 = *(void (**)(uint64_t, uint64_t))(v201 + 1096);
    v119 = *(void *)(v201 + 1008);
    v120 = *(void *)(v201 + 936);

    v121(v119, v120);
    Class v21 = (void *)swift_task_alloc();
    *(void *)(v201 + 1256) = v21;
    *Class v21 = *(void *)(v201 + 336);
    v21[1] = HealthKitFetcher.query(start:end:);
    Class v22 = *(void *)(v201 + 880);
    Class v23 = *(void *)(v201 + 872);
    id v24 = *(void *)(v201 + 816);
    Class v25 = *(void *)(v201 + 808);
    uint64_t v26 = *(void *)(v201 + 800);
    id v27 = *(void *)(v201 + 792);
    return HealthKitFetcher.getDiscreteStats(startDate:endDate:)(v22, v23, v27, v26, v25, v24);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  double v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  id v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint32_t v42;
  os_log_type_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint32_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t);
  uint32_t v92;
  os_log_type_t v93;
  NSObject *log;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  char v101;
  id v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  const void *v108;
  uint64_t v109;
  void *v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t);
  id v116;
  char *v117;
  char *v118;
  uint64_t v119;
  uint8_t *buf;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v128;
  NSObject *oslog;
  uint64_t v130;
  id v131;
  uint64_t v132;
  id v133;
  Class isa;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t);
  uint64_t v137;
  id v138;
  Class v139;
  id v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  unsigned int (*v145)(void *, uint64_t, uint64_t);
  double v146;
  double v147;
  char v148;
  id v149;
  id v150;
  id v151;
  uint64_t v152;
  uint8_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t (*v156)(uint64_t, uint64_t, uint64_t);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;

  v158 = v0;
  uint64_t v1 = *(void *)(v0 + 1224);
  *(void *)(v0 + 336) = v0;
  if (!v1)
  {
    v149 = *(id *)(v152 + 1120);

LABEL_10:
    v126 = *(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 1048);
    id v4 = *(void *)(v152 + 1016);
    v125 = *(void *)(v152 + 936);
    v124 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v126(v4, v124, v125);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    v128 = static os_log_type_t.error.getter();
    *(void *)(v152 + 688) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v152 + 1388);
    v130 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v128))
    {
      uint64_t v5 = *(void *)(v152 + 1232);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v121 = createStorage<A>(capacity:type:)(0);
      v122 = createStorage<A>(capacity:type:)(0);
      *(void *)(v152 + 696) = buf;
      *(void *)(v152 + 704) = v121;
      *(void *)(v152 + 712) = v122;
      serialize(_:at:)(0, (unsigned char **)(v152 + 696));
      serialize(_:at:)(0, (unsigned char **)(v152 + 696));
      *(void *)(v152 + 720) = v130;
      v123 = (void *)swift_task_alloc();
      v123[2] = v152 + 696;
      v123[3] = v152 + 704;
      v123[4] = v152 + 712;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v5) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, oslog, v128, "Couldn't find the recent sample statistics returning .dataUnavailable", buf, size);
      destroyStorage<A>(_:count:)(v121, 0, v119);
      destroyStorage<A>(_:count:)(v122, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v116 = *(id *)(v152 + 1184);
    v115 = *(void (**)(uint64_t, uint64_t))(v152 + 1096);
    v113 = *(void *)(v152 + 1016);
    v114 = *(void *)(v152 + 936);

    v115(v113, v114);
    v117 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(102, 0);

    v118 = v117;
LABEL_41:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = *(uint64_t (**)(char *))(*(void *)(v152 + 336) + 8);
    return v29(v118);
  }
  v150 = *(id *)(v152 + 1224);
  *(void *)(v152 + 728) = v150;
  v151 = objc_msgSend(v150, sel_mostRecentQuantity);
  if (v151)
  {
    objc_msgSend(v151, sel_doubleValueForUnit_, *(void *)(v152 + 1184));
    v146 = v2;

    v147 = v146;
    v148 = 0;
  }
  else
  {
    v147 = 0.0;
    v148 = 1;
  }
  if (v148)
  {
    v131 = *(id *)(v152 + 1120);

    goto LABEL_10;
  }
  id v3 = *(void **)(v152 + 1120);
  v140 = v3;
  v137 = *(void *)(v152 + 888);
  v135 = *(void *)(v152 + 848);
  v132 = *(void *)(v152 + 856);
  *(double *)(v152 + 736) = v147;
  objc_msgSend(v3, sel_setMostRecent_, v147);

  v133 = objc_msgSend(v150, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  v136 = *(void (**)(uint64_t, uint64_t))(v132 + 8);
  v136(v137, v135);

  objc_msgSend(v140, sel_setSampleStartDate_, isa);
  v138 = objc_msgSend(v150, sel_endDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  v139 = Date._bridgeToObjectiveC()().super.isa;
  v136(v137, v135);

  objc_msgSend(v140, sel_setSampleEndDate_, v139);
  v141 = *(void *)(v152 + 1232);
  v144 = *(void **)(v152 + 920);
  v143 = *(void *)(v152 + 848);
  v142 = *(void *)(v152 + 856);
  outlined init with copy of Date?(*(const void **)(v152 + 776), v144);
  v145 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v142 + 48);
  if (v145(v144, 1, v143) == 1)
  {
    v111 = *(id *)(v152 + 1120);
    v112 = *(void *)(v152 + 920);

    outlined destroy of Date?(v112);
LABEL_35:
    id v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 1048);
    uint64_t v28 = *(void *)(v152 + 960);
    uint64_t v40 = *(void *)(v152 + 936);
    uint64_t v39 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v41(v28, v39, v40);
    swift_endAccess();
    uint64_t v44 = Logger.logObject.getter();
    uint64_t v43 = static os_log_type_t.error.getter();
    *(void *)(v152 + 424) = 2;
    UnsignedInteger<>.init<A>(_:)();
    id v42 = *(_DWORD *)(v152 + 1356);
    long long v45 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v44, v43))
    {
      uint64_t v35 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      unint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v36 = createStorage<A>(capacity:type:)(0);
      id v37 = createStorage<A>(capacity:type:)(0);
      *(void *)(v152 + 432) = v35;
      *(void *)(v152 + 440) = v36;
      *(void *)(v152 + 448) = v37;
      serialize(_:at:)(0, (unsigned char **)(v152 + 432));
      serialize(_:at:)(0, (unsigned char **)(v152 + 432));
      *(void *)(v152 + 456) = v45;
      uint64_t v38 = (void *)swift_task_alloc();
      v38[2] = v152 + 432;
      v38[3] = v152 + 440;
      v38[4] = v152 + 448;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v141) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v44, v43, "Stopping search because no dates range was specified", v35, v42);
      destroyStorage<A>(_:count:)(v36, 0, v34);
      destroyStorage<A>(_:count:)(v37, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v35, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v33 = *(id *)(v152 + 1184);
    id v32 = *(void (**)(uint64_t, uint64_t))(v152 + 1096);
    uint64_t v30 = *(void *)(v152 + 960);
    uint64_t v31 = *(void *)(v152 + 936);

    v32(v30, v31);
    v118 = *(char **)(v152 + 1120);
    goto LABEL_41;
  }
  uint64_t v7 = *(void *)(v152 + 920);
  v110 = *(void **)(v152 + 912);
  uint64_t v8 = *(void *)(v152 + 880);
  v109 = *(void *)(v152 + 848);
  v108 = *(const void **)(v152 + 784);
  uint64_t v9 = *(void *)(v152 + 856) + 32;
  v107 = *(void (**)(uint64_t, uint64_t))v9;
  *(void *)(v152 + 1240) = *(void *)v9;
  *(void *)(v152 + 1248) = v9 & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v107(v8, v7);
  outlined init with copy of Date?(v108, v110);
  if (v145(v110, 1, v109) == 1)
  {
    v102 = *(id *)(v152 + 1120);
    uint64_t v103 = *(void *)(v152 + 912);
    v106 = *(void *)(v152 + 880);
    uint64_t v105 = *(void *)(v152 + 848);
    uint64_t v104 = *(void *)(v152 + 856);

    outlined destroy of Date?(v103);
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v106, v105);
    goto LABEL_35;
  }
  id v97 = *(void *)(v152 + 912);
  uint64_t v96 = *(void *)(v152 + 872);
  long long v98 = *(void *)(v152 + 848);
  long long v99 = *(void *)(v152 + 808);
  uint64_t v100 = *(id *)(v152 + 800);

  ((void (*)(uint64_t, uint64_t, uint64_t))v107)(v96, v97, v98);
  swift_bridgeObjectRetain();
  *(void *)(v152 + 464) = v99;
  uint64_t v10 = v100;
  *(void *)(v152 + 472) = v100;
  uint64_t v101 = Sequence<>.contains(_:)();

  outlined destroy of [HKQuantityType]();
  if (v101)
  {
    uint64_t v53 = *(id *)(v152 + 1120);
    uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 1048);
    uint64_t v19 = *(void *)(v152 + 992);
    uint64_t v55 = *(void *)(v152 + 936);
    uint64_t v63 = *(void *)(v152 + 888);
    uint64_t v58 = *(void *)(v152 + 880);
    uint64_t v60 = *(void *)(v152 + 872);
    uint64_t v64 = *(void *)(v152 + 848);
    uint64_t v57 = *(void *)(v152 + 856);

    uint64_t v54 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v56(v19, v54, v55);
    swift_endAccess();
    uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16);
    *(void *)(v152 + 1280) = v61;
    *(void *)(v152 + 1288) = (v57 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v61(v63, v58, v64);
    uint64_t v62 = *(_DWORD *)(v57 + 80);
    *(_DWORD *)(v152 + 1392) = v62;
    uint64_t v59 = swift_allocObject();
    ((void (*)(unint64_t, uint64_t, uint64_t))v107)(v59 + ((v62 + 16) & ~(unint64_t)v62), v63, v64);
    swift_retain();
    id v67 = swift_allocObject();
    *(void *)(v67 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v67 + 24) = v59;
    swift_release();
    v61(v63, v60, v64);
    uint64_t v65 = swift_allocObject();
    ((void (*)(unint64_t, uint64_t, uint64_t))v107)(v65 + ((v62 + 16) & ~(unint64_t)v62), v63, v64);
    swift_retain();
    id v69 = swift_allocObject();
    *(void *)(v69 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v69 + 24) = v65;
    swift_release();
    id v78 = Logger.logObject.getter();
    id v79 = static os_log_type_t.debug.getter();
    *(void *)(v152 + 480) = 22;
    UnsignedInteger<>.init<A>(_:)();
    id v66 = *(_DWORD *)(v152 + 1360);
    uint64_t v71 = swift_allocObject();
    *(unsigned char *)(v71 + 16) = 32;
    id v72 = swift_allocObject();
    *(unsigned char *)(v72 + 16) = 8;
    os_log_type_t v68 = swift_allocObject();
    *(void *)(v68 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
    *(void *)(v68 + 24) = v67;
    uint64_t v73 = swift_allocObject();
    *(void *)(v73 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v73 + 24) = v68;
    uint64_t v74 = swift_allocObject();
    *(unsigned char *)(v74 + 16) = 32;
    uint64_t v75 = swift_allocObject();
    *(unsigned char *)(v75 + 16) = 8;
    uint64_t v70 = swift_allocObject();
    *(void *)(v70 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
    *(void *)(v70 + 24) = v69;
    id v76 = swift_allocObject();
    *(void *)(v76 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v76 + 24) = v70;
    _allocateUninitializedArray<A>(_:)();
    id v77 = v20;
    swift_retain();
    *id v77 = partial apply for closure #1 in OSLogArguments.append(_:);
    v77[1] = v71;
    swift_retain();
    v77[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v77[3] = v72;
    swift_retain();
    v77[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v77[5] = v73;
    swift_retain();
    v77[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v77[7] = v74;
    swift_retain();
    v77[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v77[9] = v75;
    swift_retain();
    v77[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v77[11] = v76;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v78, v79))
    {
      id v50 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      id v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      id v51 = createStorage<A>(capacity:type:)(0);
      uint64_t v52 = createStorage<A>(capacity:type:)(2);
      v153 = v50;
      v154 = v51;
      v155 = v52;
      serialize(_:at:)(2, &v153);
      serialize(_:at:)(2, &v153);
      v156 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v157 = v71;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v156, (uint64_t)&v153, (uint64_t)&v154, (uint64_t)&v155);
      if (v141) {
        return result;
      }
      v156 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v157 = v72;
      closure #1 in osLogInternal(_:log:type:)(&v156, (uint64_t)&v153, (uint64_t)&v154, (uint64_t)&v155);
      v156 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v157 = v73;
      closure #1 in osLogInternal(_:log:type:)(&v156, (uint64_t)&v153, (uint64_t)&v154, (uint64_t)&v155);
      v156 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v157 = v74;
      closure #1 in osLogInternal(_:log:type:)(&v156, (uint64_t)&v153, (uint64_t)&v154, (uint64_t)&v155);
      v156 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v157 = v75;
      closure #1 in osLogInternal(_:log:type:)(&v156, (uint64_t)&v153, (uint64_t)&v154, (uint64_t)&v155);
      v156 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v157 = v76;
      closure #1 in osLogInternal(_:log:type:)(&v156, (uint64_t)&v153, (uint64_t)&v154, (uint64_t)&v155);
      _os_log_impl(&dword_25DE00000, v78, v79, "Searching for the total value for cumulative datatypes in %s - %s", v50, v66);
      destroyStorage<A>(_:count:)(v51, 0, v49);
      destroyStorage<A>(_:count:)(v52, 2, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v50, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    int v48 = *(void (**)(uint64_t, uint64_t))(v152 + 1096);
    uint64_t v46 = *(void *)(v152 + 992);
    uint64_t v47 = *(void *)(v152 + 936);

    v48(v46, v47);
    Class v21 = (void *)swift_task_alloc();
    *(void *)(v152 + 1296) = v21;
    *Class v21 = *(void *)(v152 + 336);
    v21[1] = HealthKitFetcher.query(start:end:);
    Class v22 = *(void *)(v152 + 880);
    Class v23 = *(void *)(v152 + 872);
    id v24 = *(void *)(v152 + 816);
    Class v25 = *(void *)(v152 + 808);
    uint64_t v26 = *(void *)(v152 + 800);
    id v27 = *(void *)(v152 + 792);
    return HealthKitFetcher.getCumulativeTotal(startDate:endDate:)(v22, v23, v27, v26, v25, v24);
  }
  else
  {
    uint64_t v88 = *(id *)(v152 + 1120);
    uint64_t v91 = *(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 1048);
    uint64_t v11 = *(void *)(v152 + 1008);
    uint64_t v90 = *(void *)(v152 + 936);

    id v89 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v91(v11, v89, v90);
    swift_endAccess();
    log = Logger.logObject.getter();
    uint64_t v93 = static os_log_type_t.debug.getter();
    *(void *)(v152 + 568) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v92 = *(_DWORD *)(v152 + 1376);
    uint64_t v95 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v93))
    {
      uint64_t v84 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      id v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v85 = createStorage<A>(capacity:type:)(0);
      id v86 = createStorage<A>(capacity:type:)(0);
      *(void *)(v152 + 648) = v84;
      *(void *)(v152 + 656) = v85;
      *(void *)(v152 + 664) = v86;
      serialize(_:at:)(0, (unsigned char **)(v152 + 648));
      serialize(_:at:)(0, (unsigned char **)(v152 + 648));
      *(void *)(v152 + 672) = v95;
      uint64_t v87 = (void *)swift_task_alloc();
      v87[2] = v152 + 648;
      v87[3] = v152 + 656;
      v87[4] = v152 + 664;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v141) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, log, v93, "Searching for discrete min, max and average for data", v84, v92);
      destroyStorage<A>(_:count:)(v85, 0, v83);
      destroyStorage<A>(_:count:)(v86, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v84, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    id v82 = *(void (**)(uint64_t, uint64_t))(v152 + 1096);
    id v80 = *(void *)(v152 + 1008);
    id v81 = *(void *)(v152 + 936);

    v82(v80, v81);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v152 + 1256) = v12;
    *uint64_t v12 = *(void *)(v152 + 336);
    v12[1] = HealthKitFetcher.query(start:end:);
    uint64_t v13 = *(void *)(v152 + 880);
    uint64_t v14 = *(void *)(v152 + 872);
    id v15 = *(void *)(v152 + 816);
    id v16 = *(void *)(v152 + 808);
    unint64_t v17 = *(void *)(v152 + 800);
    uint64_t v18 = *(void *)(v152 + 792);
    return HealthKitFetcher.getDiscreteStats(startDate:endDate:)(v13, v14, v18, v17, v16, v15);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t (*v11)(char *);
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  id v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  id v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint8_t *buf;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v45;
  NSObject *log;
  uint64_t v47;
  id v48;
  uint64_t v49;
  id v50;
  Class isa;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  id v55;
  Class v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t, uint64_t);
  uint64_t v62;
  uint32_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  NSObject *oslog;
  os_log_type_t v71;
  double v72;
  double v73;
  char v74;
  id v75;
  id v76;
  double v77;
  double v78;
  char v79;
  id v80;
  id v81;
  double v82;
  double v83;
  char v84;
  id v85;
  id v86;
  id v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  uint64_t v94 = v0;
  uint64_t v1 = *(void *)(v0 + 1264);
  *(void *)(v0 + 336) = v0;
  if (!v1)
  {
    uint64_t v85 = *(id *)(v88 + 1120);

LABEL_20:
    uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 1048);
    uint64_t v8 = *(void *)(v88 + 1000);
    id v42 = *(void *)(v88 + 936);
    id v41 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v43(v8, v41, v42);
    swift_endAccess();
    log = Logger.logObject.getter();
    long long v45 = static os_log_type_t.error.getter();
    *(void *)(v88 + 576) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v88 + 1380);
    uint64_t v47 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v45))
    {
      uint64_t v9 = *(void *)(v88 + 1272);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v38 = createStorage<A>(capacity:type:)(0);
      uint64_t v39 = createStorage<A>(capacity:type:)(0);
      *(void *)(v88 + 584) = buf;
      *(void *)(v88 + 592) = v38;
      *(void *)(v88 + 600) = v39;
      serialize(_:at:)(0, (unsigned char **)(v88 + 584));
      serialize(_:at:)(0, (unsigned char **)(v88 + 584));
      *(void *)(v88 + 608) = v47;
      uint64_t v40 = (void *)swift_task_alloc();
      v40[2] = v88 + 584;
      v40[3] = v88 + 592;
      v40[4] = v88 + 600;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v9) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, log, v45, "Couldn't find the correct statistics returning .dataUnavailable", buf, size);
      destroyStorage<A>(_:count:)(v38, 0, v36);
      destroyStorage<A>(_:count:)(v39, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v33 = *(id *)(v88 + 1184);
    id v27 = *(void (**)(uint64_t, uint64_t))(v88 + 1096);
    Class v25 = *(void *)(v88 + 1000);
    uint64_t v26 = *(void *)(v88 + 936);
    uint64_t v30 = *(void *)(v88 + 880);
    uint64_t v29 = *(void *)(v88 + 872);
    uint64_t v31 = *(void *)(v88 + 848);
    uint64_t v28 = *(void *)(v88 + 856);

    v27(v25, v26);
    unint64_t v34 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(102, 0);
    id v32 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v32(v29, v31);
    v32(v30, v31);

    uint64_t v35 = v34;
    goto LABEL_30;
  }
  id v86 = *(id *)(v88 + 1264);
  *(void *)(v88 + 616) = v86;
  uint64_t v87 = objc_msgSend(v86, sel_minimumQuantity);
  if (v87)
  {
    objc_msgSend(v87, sel_doubleValueForUnit_, *(void *)(v88 + 1184));
    id v82 = v2;

    id v83 = v82;
    uint64_t v84 = 0;
  }
  else
  {
    id v83 = 0.0;
    uint64_t v84 = 1;
  }
  if (v84)
  {
    id v80 = *(id *)(v88 + 1120);

    goto LABEL_20;
  }
  *(double *)(v88 + 624) = v83;
  id v81 = objc_msgSend(v86, sel_maximumQuantity);
  if (v81)
  {
    objc_msgSend(v81, sel_doubleValueForUnit_, *(void *)(v88 + 1184));
    id v77 = v3;

    id v78 = v77;
    id v79 = 0;
  }
  else
  {
    id v78 = 0.0;
    id v79 = 1;
  }
  if (v79)
  {
    uint64_t v75 = *(id *)(v88 + 1120);

    goto LABEL_20;
  }
  *(double *)(v88 + 632) = v78;
  id v76 = objc_msgSend(v86, sel_averageQuantity);
  if (v76)
  {
    objc_msgSend(v76, sel_doubleValueForUnit_, *(void *)(v88 + 1184));
    id v72 = v4;

    uint64_t v73 = v72;
    uint64_t v74 = 0;
  }
  else
  {
    uint64_t v73 = 0.0;
    uint64_t v74 = 1;
  }
  if (v74)
  {
    int v48 = *(id *)(v88 + 1120);

    goto LABEL_20;
  }
  uint64_t v5 = *(void **)(v88 + 1120);
  uint64_t v57 = v5;
  uint64_t v54 = *(void *)(v88 + 888);
  uint64_t v52 = *(void *)(v88 + 848);
  id v49 = *(void *)(v88 + 856);
  *(double *)(v88 + 640) = v73;
  objc_msgSend(v5, sel_setMinimum_, v83);

  objc_msgSend(v57, sel_setMaximum_, v78);
  objc_msgSend(v57, sel_setAverage_, v73);

  id v50 = objc_msgSend(v86, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
  v53(v54, v52);

  objc_msgSend(v57, sel_setSampleStartDate_, isa);
  uint64_t v55 = objc_msgSend(v86, sel_endDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v56 = Date._bridgeToObjectiveC()().super.isa;
  v53(v54, v52);

  objc_msgSend(v57, sel_setSampleEndDate_, v56);
  uint64_t v58 = *(void *)(v88 + 1272);
  uint64_t v62 = *(void *)(v88 + 1120);
  uint64_t v61 = *(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 1048);
  uint64_t v6 = *(void *)(v88 + 968);
  uint64_t v60 = *(void *)(v88 + 936);
  uint64_t v59 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v61(v6, v59, v60);
  swift_endAccess();
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = v62;
  oslog = Logger.logObject.getter();
  uint64_t v71 = static os_log_type_t.debug.getter();
  *(void *)(v88 + 560) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v63 = *(_DWORD *)(v88 + 1372);
  id v66 = swift_allocObject();
  *(unsigned char *)(v66 + 16) = 32;
  id v67 = swift_allocObject();
  *(unsigned char *)(v67 + 16) = 8;
  uint64_t v65 = swift_allocObject();
  *(void *)(v65 + 16) = partial apply for specialized implicit closure #12 in HealthKitFetcher.query(start:end:);
  *(void *)(v65 + 24) = v64;
  os_log_type_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v68 + 24) = v65;
  _allocateUninitializedArray<A>(_:)();
  id v69 = v7;
  swift_retain();
  *id v69 = partial apply for closure #1 in OSLogArguments.append(_:);
  v69[1] = v66;
  swift_retain();
  v69[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v69[3] = v67;
  swift_retain();
  v69[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v69[5] = v68;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v71))
  {
    Class v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    Class v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    Class v23 = createStorage<A>(capacity:type:)(0);
    id v24 = createStorage<A>(capacity:type:)(1);
    id v89 = v22;
    uint64_t v90 = v23;
    uint64_t v91 = v24;
    serialize(_:at:)(2, &v89);
    serialize(_:at:)(1, &v89);
    uint64_t v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v93 = v66;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v89, (uint64_t)&v90, (uint64_t)&v91);
    if (v58) {
      return result;
    }
    uint64_t v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v93 = v67;
    closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v89, (uint64_t)&v90, (uint64_t)&v91);
    uint64_t v92 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v93 = v68;
    closure #1 in osLogInternal(_:log:type:)(&v92, (uint64_t)&v89, (uint64_t)&v90, (uint64_t)&v91);
    _os_log_impl(&dword_25DE00000, oslog, v71, "Returning response: %s", v22, v63);
    destroyStorage<A>(_:count:)(v23, 0, v21);
    destroyStorage<A>(_:count:)(v24, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v22, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  id v20 = *(id *)(v88 + 1184);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v88 + 1096);
  uint64_t v12 = *(void *)(v88 + 968);
  uint64_t v13 = *(void *)(v88 + 936);
  unint64_t v17 = *(void *)(v88 + 880);
  id v16 = *(void *)(v88 + 872);
  uint64_t v18 = *(void *)(v88 + 848);
  id v15 = *(void *)(v88 + 856);

  v14(v12, v13);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v19(v16, v18);
  v19(v17, v18);

  uint64_t v35 = *(char **)(v88 + 1120);
LABEL_30:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(char *))(*(void *)(v88 + 336) + 8);
  return v11(v35);
}

{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  id v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  id v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint32_t v51;
  os_log_type_t v52;
  NSObject *log;
  uint64_t v54;
  uint64_t v55;
  id v56;
  Class isa;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  id v61;
  Class v62;
  id v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint32_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint8_t *buf;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t, uint64_t);
  int v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(unint64_t, uint64_t, uint64_t);
  uint64_t v104;
  uint32_t size;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  NSObject *oslog;
  os_log_type_t v123;
  double v124;
  double v125;
  char v126;
  id v127;
  id v128;
  id v129;
  uint64_t v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t (*v134)(uint64_t, uint64_t, uint64_t);
  uint64_t v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, uint64_t, uint64_t);
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;

  v141 = v0;
  uint64_t v1 = *(void *)(v0 + 1304);
  *(void *)(v0 + 336) = v0;
  if (!v1)
  {
    v127 = *(id *)(v130 + 1120);

LABEL_19:
    id v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 1048);
    id v16 = *(void *)(v130 + 976);
    id v49 = *(void *)(v130 + 936);
    int v48 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v50(v16, v48, v49);
    swift_endAccess();
    log = Logger.logObject.getter();
    uint64_t v52 = static os_log_type_t.error.getter();
    *(void *)(v130 + 488) = 2;
    UnsignedInteger<>.init<A>(_:)();
    id v51 = *(_DWORD *)(v130 + 1364);
    uint64_t v54 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v52))
    {
      unint64_t v17 = *(void *)(v130 + 1312);
      uint64_t v44 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      long long v45 = createStorage<A>(capacity:type:)(0);
      uint64_t v46 = createStorage<A>(capacity:type:)(0);
      *(void *)(v130 + 496) = v44;
      *(void *)(v130 + 504) = v45;
      *(void *)(v130 + 512) = v46;
      serialize(_:at:)(0, (unsigned char **)(v130 + 496));
      serialize(_:at:)(0, (unsigned char **)(v130 + 496));
      *(void *)(v130 + 520) = v54;
      uint64_t v47 = (void *)swift_task_alloc();
      v47[2] = v130 + 496;
      v47[3] = v130 + 504;
      v47[4] = v130 + 512;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v17) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, log, v52, "Couldn't find the total statistics returning .dataUnavailable", v44, v51);
      destroyStorage<A>(_:count:)(v45, 0, v43);
      destroyStorage<A>(_:count:)(v46, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v44, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v40 = *(id *)(v130 + 1184);
    unint64_t v34 = *(void (**)(uint64_t, uint64_t))(v130 + 1096);
    id v32 = *(void *)(v130 + 976);
    uint64_t v33 = *(void *)(v130 + 936);
    id v37 = *(void *)(v130 + 880);
    uint64_t v36 = *(void *)(v130 + 872);
    uint64_t v38 = *(void *)(v130 + 848);
    uint64_t v35 = *(void *)(v130 + 856);

    v34(v32, v33);
    id v41 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(102, 0);
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v39(v36, v38);
    v39(v37, v38);

    id v42 = v41;
    goto LABEL_29;
  }
  v128 = *(id *)(v130 + 1304);
  *(void *)(v130 + 528) = v128;
  v129 = objc_msgSend(v128, sel_sumQuantity);
  if (v129)
  {
    objc_msgSend(v129, sel_doubleValueForUnit_, *(void *)(v130 + 1184));
    v124 = v2;

    v125 = v124;
    v126 = 0;
  }
  else
  {
    v125 = 0.0;
    v126 = 1;
  }
  if (v126)
  {
    uint64_t v92 = *(id *)(v130 + 1120);

    goto LABEL_19;
  }
  uint64_t v100 = *(_DWORD *)(v130 + 1392);
  long long v99 = *(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 1280);
  uint64_t v103 = *(void (**)(unint64_t, uint64_t, uint64_t))(v130 + 1240);
  uint64_t v95 = *(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 1048);
  id v3 = *(void *)(v130 + 984);
  uint64_t v94 = *(void *)(v130 + 936);
  uint64_t v101 = *(void *)(v130 + 888);
  uint64_t v96 = *(void *)(v130 + 880);
  long long v98 = *(void *)(v130 + 872);
  v102 = *(void *)(v130 + 848);
  *(double *)(v130 + 536) = v125;
  uint64_t v93 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v95(v3, v93, v94);
  swift_endAccess();
  v99(v101, v96, v102);
  id v97 = swift_allocObject();
  v103(v97 + ((v100 + 16) & ~(unint64_t)v100), v101, v102);
  swift_retain();
  v106 = swift_allocObject();
  *(void *)(v106 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v106 + 24) = v97;
  swift_release();
  v99(v101, v98, v102);
  uint64_t v104 = swift_allocObject();
  v103(v104 + ((v100 + 16) & ~(unint64_t)v100), v101, v102);
  swift_retain();
  v108 = swift_allocObject();
  *(void *)(v108 + 16) = partial apply for implicit closure #10 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v108 + 24) = v104;
  swift_release();
  v110 = swift_allocObject();
  *(double *)(v110 + 16) = v125;
  oslog = Logger.logObject.getter();
  v123 = static os_log_type_t.debug.getter();
  *(void *)(v130 + 544) = 32;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v130 + 1368);
  v112 = swift_allocObject();
  *(unsigned char *)(v112 + 16) = 32;
  v113 = swift_allocObject();
  *(unsigned char *)(v113 + 16) = 8;
  v107 = swift_allocObject();
  *(void *)(v107 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
  *(void *)(v107 + 24) = v106;
  v114 = swift_allocObject();
  *(void *)(v114 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v114 + 24) = v107;
  v115 = swift_allocObject();
  *(unsigned char *)(v115 + 16) = 32;
  v116 = swift_allocObject();
  *(unsigned char *)(v116 + 16) = 8;
  v109 = swift_allocObject();
  *(void *)(v109 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
  *(void *)(v109 + 24) = v108;
  v117 = swift_allocObject();
  *(void *)(v117 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v117 + 24) = v109;
  v118 = swift_allocObject();
  *(unsigned char *)(v118 + 16) = 0;
  v119 = swift_allocObject();
  *(unsigned char *)(v119 + 16) = 8;
  v111 = swift_allocObject();
  *(void *)(v111 + 16) = partial apply for implicit closure #11 in HealthKitFetcher.query(start:end:);
  *(void *)(v111 + 24) = v110;
  v120 = swift_allocObject();
  *(void *)(v120 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:);
  *(void *)(v120 + 24) = v111;
  _allocateUninitializedArray<A>(_:)();
  v121 = v4;
  swift_retain();
  *v121 = partial apply for closure #1 in OSLogArguments.append(_:);
  v121[1] = v112;
  swift_retain();
  v121[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v121[3] = v113;
  swift_retain();
  v121[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v121[5] = v114;
  swift_retain();
  v121[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v121[7] = v115;
  swift_retain();
  v121[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v121[9] = v116;
  swift_retain();
  v121[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v121[11] = v117;
  swift_retain();
  v121[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v121[13] = v118;
  swift_retain();
  v121[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v121[15] = v119;
  swift_retain();
  v121[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v121[17] = v120;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v123))
  {
    uint64_t v5 = *(void *)(v130 + 1312);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v90 = createStorage<A>(capacity:type:)(0);
    uint64_t v91 = createStorage<A>(capacity:type:)(2);
    v136 = buf;
    v137 = v90;
    v138 = v91;
    serialize(_:at:)(2, &v136);
    serialize(_:at:)(3, &v136);
    v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v140 = v112;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
    if (v5) {
      return result;
    }
    v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v140 = v113;
    closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
    v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v140 = v114;
    closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
    v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v140 = v115;
    closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
    v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v140 = v116;
    closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
    v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v140 = v117;
    closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
    v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v140 = v118;
    closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
    v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v140 = v119;
    closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
    v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v140 = v120;
    closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
    _os_log_impl(&dword_25DE00000, oslog, v123, "Got total value in %s - %s: %f", buf, size);
    destroyStorage<A>(_:count:)(v90, 0, v88);
    destroyStorage<A>(_:count:)(v91, 2, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v87 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v87 = *(void *)(v130 + 1312);
  }
  id v82 = *(id *)(v130 + 1120);
  id v81 = *(void (**)(uint64_t, uint64_t))(v130 + 1096);
  id v79 = *(void *)(v130 + 984);
  id v80 = *(void *)(v130 + 936);
  uint64_t v85 = *(void *)(v130 + 840);
  uint64_t v84 = *(void *)(v130 + 824);
  id v83 = *(void *)(v130 + 832);

  v81(v79, v80);
  objc_msgSend(v82, sel_setTotal_, v125);

  static Calendar.current.getter();
  id v86 = Calendar.numberOfDaysBetween(_:and:)();
  (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v85, v84);
  *(double *)(v130 + 552) = (double)v86;
  if ((double)v86 > 1.0)
  {
    id v78 = *(void *)(v130 + 1184);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v130 + 1320) = v7;
    char *v7 = *(void *)(v130 + 336);
    v7[1] = HealthKitFetcher.query(start:end:);
    uint64_t v8 = *(void *)(v130 + 880);
    uint64_t v9 = *(void *)(v130 + 872);
    uint64_t v10 = *(void *)(v130 + 816);
    uint64_t v11 = *(void *)(v130 + 808);
    uint64_t v12 = *(void *)(v130 + 800);
    uint64_t v13 = *(void *)(v130 + 792);
    return HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:)(v8, v9, v78, v13, v12, v11, v10);
  }

  uint64_t v63 = *(id *)(v130 + 1120);
  uint64_t v60 = *(void *)(v130 + 888);
  uint64_t v58 = *(void *)(v130 + 848);
  uint64_t v64 = *(id *)(v130 + 1304);
  uint64_t v55 = *(void *)(v130 + 856);
  uint64_t v56 = objc_msgSend(v64, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
  v59(v60, v58);

  objc_msgSend(v63, sel_setSampleStartDate_, isa);
  uint64_t v61 = objc_msgSend(v64, sel_endDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v62 = Date._bridgeToObjectiveC()().super.isa;
  v59(v60, v58);

  objc_msgSend(v63, sel_setSampleEndDate_, v62);
  os_log_type_t v68 = *(void *)(v130 + 1120);
  id v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 1048);
  uint64_t v14 = *(void *)(v130 + 968);
  id v66 = *(void *)(v130 + 936);
  uint64_t v65 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v67(v14, v65, v66);
  swift_endAccess();
  uint64_t v70 = swift_allocObject();
  *(void *)(v70 + 16) = v68;
  id v76 = Logger.logObject.getter();
  id v77 = static os_log_type_t.debug.getter();
  *(void *)(v130 + 560) = 12;
  UnsignedInteger<>.init<A>(_:)();
  id v69 = *(_DWORD *)(v130 + 1372);
  id v72 = swift_allocObject();
  *(unsigned char *)(v72 + 16) = 32;
  uint64_t v73 = swift_allocObject();
  *(unsigned char *)(v73 + 16) = 8;
  uint64_t v71 = swift_allocObject();
  *(void *)(v71 + 16) = partial apply for specialized implicit closure #12 in HealthKitFetcher.query(start:end:);
  *(void *)(v71 + 24) = v70;
  uint64_t v74 = swift_allocObject();
  *(void *)(v74 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v74 + 24) = v71;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v75 = v15;
  swift_retain();
  *uint64_t v75 = partial apply for closure #1 in OSLogArguments.append(_:);
  v75[1] = v72;
  swift_retain();
  v75[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v75[3] = v73;
  swift_retain();
  v75[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v75[5] = v74;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v76, v77))
  {
    uint64_t v29 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v30 = createStorage<A>(capacity:type:)(0);
    uint64_t v31 = createStorage<A>(capacity:type:)(1);
    v131 = v29;
    v132 = v30;
    v133 = v31;
    serialize(_:at:)(2, &v131);
    serialize(_:at:)(1, &v131);
    v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v135 = v72;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v133);
    if (v87) {
      return result;
    }
    v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v135 = v73;
    closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v133);
    v134 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v135 = v74;
    closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v131, (uint64_t)&v132, (uint64_t)&v133);
    _os_log_impl(&dword_25DE00000, v76, v77, "Returning response: %s", v29, v69);
    destroyStorage<A>(_:count:)(v30, 0, v28);
    destroyStorage<A>(_:count:)(v31, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v29, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  id v27 = *(id *)(v130 + 1184);
  Class v21 = *(void (**)(uint64_t, uint64_t))(v130 + 1096);
  uint64_t v19 = *(void *)(v130 + 968);
  id v20 = *(void *)(v130 + 936);
  id v24 = *(void *)(v130 + 880);
  Class v23 = *(void *)(v130 + 872);
  Class v25 = *(void *)(v130 + 848);
  Class v22 = *(void *)(v130 + 856);

  v21(v19, v20);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v26(v23, v25);
  v26(v24, v25);

  id v42 = *(char **)(v130 + 1120);
LABEL_29:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(char *))(*(void *)(v130 + 336) + 8);
  return v18(v42);
}

{
  uint64_t v0;
  double v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t result;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *buf;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  Class isa;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  id v30;
  Class v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint32_t size;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  NSObject *oslog;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  uint64_t v52 = v0;
  uint64_t v1 = *(double *)(v0 + 1328);
  objc_super v2 = *(void **)(v0 + 1120);
  Class v22 = v2;
  *(void *)(v0 + 336) = v0;
  objc_msgSend(v2, sel_setAverage_, v1);

  Class v23 = *(void *)(v0 + 1336);
  uint64_t v33 = *(id *)(v0 + 1304);
  id v32 = *(id *)(v0 + 1120);
  uint64_t v29 = *(void *)(v0 + 888);
  id v24 = *(void *)(v0 + 856);
  id v27 = *(void *)(v0 + 848);
  Class v25 = objc_msgSend(v33, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
  v28(v29, v27);

  objc_msgSend(v32, sel_setSampleStartDate_, isa);
  uint64_t v30 = objc_msgSend(v33, sel_endDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v31 = Date._bridgeToObjectiveC()().super.isa;
  v28(v29, v27);

  objc_msgSend(v32, sel_setSampleEndDate_, v31);
  id v37 = *(void *)(v0 + 1120);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1048);
  id v3 = *(void *)(v0 + 968);
  uint64_t v35 = *(void *)(v0 + 936);
  unint64_t v34 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v36(v3, v34, v35);
  swift_endAccess();
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v37;
  oslog = Logger.logObject.getter();
  uint64_t v46 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 560) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 1372);
  id v41 = swift_allocObject();
  *(unsigned char *)(v41 + 16) = 32;
  id v42 = swift_allocObject();
  *(unsigned char *)(v42 + 16) = 8;
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = partial apply for specialized implicit closure #12 in HealthKitFetcher.query(start:end:);
  *(void *)(v40 + 24) = v39;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v43 + 24) = v40;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v44 = v4;
  swift_retain();
  char *v44 = partial apply for closure #1 in OSLogArguments.append(_:);
  v44[1] = v41;
  swift_retain();
  v44[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v44[3] = v42;
  swift_retain();
  v44[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v44[5] = v43;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v46))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    unint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v19 = createStorage<A>(capacity:type:)(0);
    id v20 = createStorage<A>(capacity:type:)(1);
    uint64_t v47 = buf;
    int v48 = v19;
    id v49 = v20;
    serialize(_:at:)(2, &v47);
    serialize(_:at:)(1, &v47);
    id v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    id v51 = v41;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    if (v23) {
      return result;
    }
    id v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    id v51 = v42;
    closure #1 in osLogInternal(_:log:type:)(&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    id v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    id v51 = v43;
    closure #1 in osLogInternal(_:log:type:)(&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    _os_log_impl(&dword_25DE00000, oslog, v46, "Returning response: %s", buf, size);
    destroyStorage<A>(_:count:)(v19, 0, v17);
    destroyStorage<A>(_:count:)(v20, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  id v15 = *(id *)(v21 + 1184);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v21 + 1096);
  uint64_t v7 = *(void *)(v21 + 968);
  uint64_t v8 = *(void *)(v21 + 936);
  uint64_t v12 = *(void *)(v21 + 880);
  uint64_t v11 = *(void *)(v21 + 872);
  uint64_t v13 = *(void *)(v21 + 848);
  uint64_t v10 = *(void *)(v21 + 856);

  v9(v7, v8);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v14(v11, v13);
  v14(v12, v13);

  id v16 = *(void *)(v21 + 1120);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)(v21 + 336) + 8);
  return v6(v16);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  id v4;
  uint64_t v5;

  id v4 = *(id *)(v0 + 1120);
  uint64_t v1 = *(void **)(v0 + 800);
  *(void *)(v0 + 336) = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  objc_super v2 = *(uint64_t (**)())(*(void *)(v0 + 336) + 8);
  return v2();
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;
  uint64_t (*v7)(char *);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  char *v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint32_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  void *v42;
  uint64_t v43;

  id v42 = v0;
  uint64_t v36 = (id)v0[147];
  uint64_t v35 = (id)v0[100];
  uint64_t v1 = (void *)v0[99];
  v0[42] = v0;

  v0[148] = 0;
  v0[47] = 0;
  objc_super v2 = 0;
  unint64_t v17 = *(id *)(v34 + 1120);
  id v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 1048);
  id v3 = *(void *)(v34 + 952);
  uint64_t v19 = *(void *)(v34 + 936);
  id v24 = *(void *)(v34 + 816);
  Class v23 = *(void *)(v34 + 808);
  Class v22 = *(id *)(v34 + 800);
  Class v21 = *(id *)(v34 + 792);

  uint64_t v18 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v20(v3, v18, v19);
  swift_endAccess();
  id v4 = v21;
  uint64_t v5 = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = v21;
  v26[3] = v22;
  v26[4] = v23;
  v26[5] = v24;
  id v32 = Logger.logObject.getter();
  uint64_t v33 = static os_log_type_t.error.getter();
  *(void *)(v34 + 384) = 12;
  UnsignedInteger<>.init<A>(_:)();
  Class v25 = *(_DWORD *)(v34 + 1348);
  uint64_t v28 = swift_allocObject();
  *(unsigned char *)(v28 + 16) = 64;
  uint64_t v29 = swift_allocObject();
  *(unsigned char *)(v29 + 16) = 8;
  id v27 = swift_allocObject();
  *(void *)(v27 + 16) = partial apply for implicit closure #1 in HealthKitFetcher.query(start:end:);
  *(void *)(v27 + 24) = v26;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v30 + 24) = v27;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v31 = v6;
  swift_retain();
  char *v31 = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[1] = v28;
  swift_retain();
  v31[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[3] = v29;
  swift_retain();
  v31[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[5] = v30;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v14 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    id v15 = createStorage<A>(capacity:type:)(1);
    id v16 = createStorage<A>(capacity:type:)(0);
    id v37 = v14;
    uint64_t v38 = v15;
    uint64_t v39 = v16;
    serialize(_:at:)(2, &v37);
    serialize(_:at:)(1, &v37);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    id v41 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    id v41 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    id v41 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    _os_log_impl(&dword_25DE00000, v32, v33, "Failed to get units for %@", v14, v25);
    destroyStorage<A>(_:count:)(v15, 1, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v14, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v34 + 1096);
  uint64_t v9 = *(void *)(v34 + 952);
  uint64_t v10 = *(void *)(v34 + 936);

  v11(v9, v10);
  uint64_t v12 = GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(char *))(*(void *)(v34 + 336) + 8);
  return v7(v12);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  id v3;
  uint64_t v4;

  id v3 = *(id *)(v0 + 1184);
  *(void *)(v0 + 336) = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(*(void *)(v0 + 336) + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  id v8;
  uint64_t v9;

  uint64_t v8 = *(id *)(v0 + 1184);
  uint64_t v5 = *(void *)(v0 + 880);
  uint64_t v1 = *(void *)(v0 + 872);
  objc_super v2 = *(void *)(v0 + 856);
  uint64_t v6 = *(void *)(v0 + 848);
  *(void *)(v0 + 336) = v0;
  uint64_t v7 = *(void (**)(uint64_t))(v2 + 8);
  v7(v1);
  ((void (*)(uint64_t, uint64_t))v7)(v5, v6);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = *(uint64_t (**)())(*(void *)(v0 + 336) + 8);
  return v3();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  id v8;
  uint64_t v9;

  uint64_t v8 = *(id *)(v0 + 1184);
  uint64_t v5 = *(void *)(v0 + 880);
  uint64_t v1 = *(void *)(v0 + 872);
  objc_super v2 = *(void *)(v0 + 856);
  uint64_t v6 = *(void *)(v0 + 848);
  *(void *)(v0 + 336) = v0;
  uint64_t v7 = *(void (**)(uint64_t))(v2 + 8);
  v7(v1);
  ((void (*)(uint64_t, uint64_t))v7)(v5, v6);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = *(uint64_t (**)())(*(void *)(v0 + 336) + 8);
  return v3();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  uint64_t v11;

  id v4 = *(id *)(v0 + 1304);
  uint64_t v10 = *(id *)(v0 + 1184);
  uint64_t v1 = *(void **)(v0 + 1120);
  uint64_t v7 = *(void *)(v0 + 880);
  uint64_t v6 = *(void *)(v0 + 872);
  uint64_t v5 = *(void *)(v0 + 856);
  uint64_t v8 = *(void *)(v0 + 848);
  *(void *)(v0 + 336) = v0;

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v6, v8);
  v9(v7, v8);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  objc_super v2 = *(uint64_t (**)())(*(void *)(v0 + 336) + 8);
  return v2();
}

uint64_t HealthKitFetcher.query(start:end:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = (void *)*v3;
  uint64_t v7 = *v3 + 16;
  v8[42] = *v3;
  v8[142] = v2;
  v8[143] = a1;
  v8[144] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = *(void **)(v7 + 1104);

    id v4 = HealthKitFetcher.query(start:end:);
  }
  else
  {

    id v4 = HealthKitFetcher.query(start:end:);
  }
  return MEMORY[0x270FA2498](v4, 0);
}

uint64_t HealthKitFetcher.query(start:end:)(uint64_t a1)
{
  uint64_t v7 = (void *)*v2;
  uint64_t v6 = *v2 + 16;
  v7[42] = *v2;
  v7[146] = a1;
  v7[147] = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v3 = HealthKitFetcher.query(start:end:);
  }
  else
  {
    uint64_t v5 = *(void **)(v6 + 784);

    id v3 = HealthKitFetcher.query(start:end:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  uint64_t v7 = (void *)*v2;
  uint64_t v6 = *v2 + 16;
  v7[42] = *v2;
  v7[153] = a1;
  v7[154] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void **)(v6 + 1104);

    id v3 = HealthKitFetcher.query(start:end:);
  }
  else
  {
    id v3 = HealthKitFetcher.query(start:end:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  uint64_t v7 = (void *)*v2;
  uint64_t v6 = *v2 + 16;
  v7[42] = *v2;
  v7[158] = a1;
  v7[159] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void **)(v6 + 1104);

    id v3 = HealthKitFetcher.query(start:end:);
  }
  else
  {
    id v3 = HealthKitFetcher.query(start:end:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  uint64_t v7 = (void *)*v2;
  uint64_t v6 = *v2 + 16;
  v7[42] = *v2;
  v7[163] = a1;
  v7[164] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void **)(v6 + 1104);

    id v3 = HealthKitFetcher.query(start:end:);
  }
  else
  {
    id v3 = HealthKitFetcher.query(start:end:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t HealthKitFetcher.query(start:end:)(double a1)
{
  uint64_t v7 = *v2;
  uint64_t v6 = *v2 + 16;
  *(void *)(v7 + 336) = *v2;
  *(double *)(v7 + 1328) = a1;
  *(void *)(v7 + 1336) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void **)(v6 + 1104);

    id v3 = HealthKitFetcher.query(start:end:);
  }
  else
  {
    id v3 = HealthKitFetcher.query(start:end:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

id implicit closure #1 in HealthKitFetcher.query(start:end:)(int a1, id a2)
{
  id v2 = a2;
  return a2;
}

uint64_t implicit closure #2 in HealthKitFetcher.query(start:end:)(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  unint64_t v4 = (*(void *)(*(void *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = (const void *)MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v3 - v4;
  outlined init with copy of Date?(v1, (char *)&v3 - v4);
  lazy protocol witness table accessor for type Date? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t specialized implicit closure #5 in HealthKitFetcher.query(start:end:)(void *a1)
{
  id v1 = a1;
  id v4 = objc_msgSend(a1, sel_unit);
  if (v4)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t HealthKitFetcher.getMostRecent(startDate:endDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 112) = a6;
  *(void *)(v6 + 104) = a5;
  *(void *)(v6 + 96) = a4;
  *(void *)(v6 + 88) = a3;
  *(void *)(v6 + 80) = a2;
  *(void *)(v6 + 72) = a1;
  *(void *)(v6 + 48) = v6;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKSamplePredicate<HKQuantitySample>);
  *(void *)(v6 + 120) = swift_task_alloc();
  uint64_t Descriptor = type metadata accessor for HKStatisticsQueryDescriptor();
  *(void *)(v6 + 128) = Descriptor;
  *(void *)(v6 + 136) = *(void *)(Descriptor - 8);
  *(void *)(v6 + 144) = swift_task_alloc();
  *(void *)(v6 + 56) = a1;
  *(void *)(v6 + 64) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(void *)(v6 + 32) = a5;
  *(void *)(v6 + 40) = a6;
  return MEMORY[0x270FA2498](HealthKitFetcher.getMostRecent(startDate:endDate:), 0);
}

uint64_t HealthKitFetcher.getMostRecent(startDate:endDate:)()
{
  uint64_t v1 = v0[15];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[13];
  id v4 = (void *)v0[12];
  uint64_t v5 = v0[11];
  id v12 = (id)v5;
  uint64_t v6 = (const void *)v0[10];
  uint64_t v7 = (const void *)v0[9];
  v0[6] = v0;
  HealthKitFetcher.predicate(start:end:)(v7, v6, v5, v4, v3, v2, v1);
  HKStatisticsQueryDescriptor.init(predicate:options:)();
  id v8 = v12;
  uint64_t v9 = (void *)swift_task_alloc();
  v13[19] = v9;
  *uint64_t v9 = v13[6];
  v9[1] = HealthKitFetcher.getMostRecent(startDate:endDate:);
  uint64_t v10 = v13[11];
  return MEMORY[0x270EF3218](v10);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = v0[17];
  v0[6] = v0;
  (*(void (**)(void))(v1 + 8))();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0[6] + 8);
  uint64_t v3 = v0[20];
  return v2(v3);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v6 = v0[18];
  id v4 = v0[17];
  uint64_t v5 = v0[16];
  uint64_t v1 = (void *)v0[11];
  v0[6] = v0;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)())(v0[6] + 8);
  return v2();
}

uint64_t HealthKitFetcher.getMostRecent(startDate:endDate:)(uint64_t a1)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 48) = *v2;
  *(void *)(v5 + 160) = a1;
  *(void *)(v5 + 168) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = HealthKitFetcher.getMostRecent(startDate:endDate:);
  }
  else
  {

    uint64_t v3 = HealthKitFetcher.getMostRecent(startDate:endDate:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t HealthKitFetcher.getDiscreteStats(startDate:endDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 120) = a6;
  *(void *)(v6 + 112) = a5;
  *(void *)(v6 + 104) = a4;
  *(void *)(v6 + 96) = a3;
  *(void *)(v6 + 88) = a2;
  *(void *)(v6 + 80) = a1;
  *(void *)(v6 + 48) = v6;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v6 + 128) = swift_task_alloc();
  *(void *)(v6 + 136) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKSamplePredicate<HKQuantitySample>);
  *(void *)(v6 + 144) = swift_task_alloc();
  uint64_t Descriptor = type metadata accessor for HKStatisticsQueryDescriptor();
  *(void *)(v6 + 152) = Descriptor;
  *(void *)(v6 + 160) = *(void *)(Descriptor - 8);
  *(void *)(v6 + 168) = swift_task_alloc();
  *(void *)(v6 + 56) = a1;
  *(void *)(v6 + 64) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(void *)(v6 + 32) = a5;
  *(void *)(v6 + 40) = a6;
  return MEMORY[0x270FA2498](HealthKitFetcher.getDiscreteStats(startDate:endDate:), 0);
}

uint64_t HealthKitFetcher.getDiscreteStats(startDate:endDate:)()
{
  uint64_t v17 = v0[18];
  id v16 = (const void *)v0[17];
  uint64_t v15 = (const void *)v0[16];
  uint64_t v14 = v0[15];
  uint64_t v13 = v0[14];
  id v12 = (void *)v0[13];
  uint64_t v18 = (void *)v0[12];
  uint64_t v8 = v0[11];
  uint64_t v6 = v0[10];
  v0[6] = v0;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v10 - 8);
  uint64_t v9 = *(void (**)(const void *, uint64_t))(v7 + 16);
  v9(v16, v6);
  uint64_t v11 = *(void (**)(const void *))(v7 + 56);
  v11(v16);
  ((void (*)(const void *, uint64_t, uint64_t))v9)(v15, v8, v10);
  ((void (*)(const void *, void, uint64_t, uint64_t))v11)(v15, 0, 1, v10);
  HealthKitFetcher.predicate(start:end:)(v16, v15, (uint64_t)v18, v12, v13, v14, v17);
  outlined destroy of Date?((uint64_t)v15);
  outlined destroy of Date?((uint64_t)v16);
  type metadata accessor for HKStatisticsOptions();
  _allocateUninitializedArray<A>(_:)();
  void *v1 = 4;
  v1[1] = 8;
  v1[2] = 2;
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type HKStatisticsOptions and conformance HKStatisticsOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  HKStatisticsQueryDescriptor.init(predicate:options:)();
  id v2 = v18;
  uint64_t v3 = (void *)swift_task_alloc();
  v19[22] = v3;
  void *v3 = v19[6];
  v3[1] = HealthKitFetcher.getDiscreteStats(startDate:endDate:);
  uint64_t v4 = v19[12];
  return MEMORY[0x270EF3218](v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = v0[20];
  v0[6] = v0;
  (*(void (**)(void))(v1 + 8))();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(uint64_t))(v0[6] + 8);
  uint64_t v3 = v0[23];
  return v2(v3);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v6 = v0[21];
  uint64_t v4 = v0[20];
  uint64_t v5 = v0[19];
  uint64_t v1 = (void *)v0[12];
  v0[6] = v0;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[6] + 8);
  return v2();
}

uint64_t HealthKitFetcher.getDiscreteStats(startDate:endDate:)(uint64_t a1)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 48) = *v2;
  *(void *)(v5 + 184) = a1;
  *(void *)(v5 + 192) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = HealthKitFetcher.getDiscreteStats(startDate:endDate:);
  }
  else
  {

    uint64_t v3 = HealthKitFetcher.getDiscreteStats(startDate:endDate:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t HealthKitFetcher.getCumulativeTotal(startDate:endDate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 112) = a6;
  *(void *)(v6 + 104) = a5;
  *(void *)(v6 + 96) = a4;
  *(void *)(v6 + 88) = a3;
  *(void *)(v6 + 80) = a2;
  *(void *)(v6 + 72) = a1;
  *(void *)(v6 + 48) = v6;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v6 + 120) = swift_task_alloc();
  *(void *)(v6 + 128) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKSamplePredicate<HKQuantitySample>);
  *(void *)(v6 + 136) = swift_task_alloc();
  uint64_t Descriptor = type metadata accessor for HKStatisticsQueryDescriptor();
  *(void *)(v6 + 144) = Descriptor;
  *(void *)(v6 + 152) = *(void *)(Descriptor - 8);
  *(void *)(v6 + 160) = swift_task_alloc();
  *(void *)(v6 + 56) = a1;
  *(void *)(v6 + 64) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(void *)(v6 + 32) = a5;
  *(void *)(v6 + 40) = a6;
  return MEMORY[0x270FA2498](HealthKitFetcher.getCumulativeTotal(startDate:endDate:), 0);
}

uint64_t HealthKitFetcher.getCumulativeTotal(startDate:endDate:)()
{
  uint64_t v16 = v0[17];
  uint64_t v15 = (const void *)v0[16];
  uint64_t v14 = (const void *)v0[15];
  uint64_t v13 = v0[14];
  uint64_t v12 = v0[13];
  uint64_t v11 = (void *)v0[12];
  uint64_t v17 = (void *)v0[11];
  uint64_t v7 = v0[10];
  uint64_t v5 = v0[9];
  v0[6] = v0;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v9 - 8);
  uint64_t v8 = *(void (**)(const void *, uint64_t))(v6 + 16);
  v8(v15, v5);
  uint64_t v10 = *(void (**)(const void *))(v6 + 56);
  v10(v15);
  ((void (*)(const void *, uint64_t, uint64_t))v8)(v14, v7, v9);
  ((void (*)(const void *, void, uint64_t, uint64_t))v10)(v14, 0, 1, v9);
  HealthKitFetcher.predicate(start:end:)(v15, v14, (uint64_t)v17, v11, v12, v13, v16);
  outlined destroy of Date?((uint64_t)v14);
  outlined destroy of Date?((uint64_t)v15);
  HKStatisticsQueryDescriptor.init(predicate:options:)();
  id v1 = v17;
  id v2 = (void *)swift_task_alloc();
  v18[21] = v2;
  *id v2 = v18[6];
  v2[1] = HealthKitFetcher.getCumulativeTotal(startDate:endDate:);
  uint64_t v3 = v18[11];
  return MEMORY[0x270EF3218](v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v5;

  id v1 = v0[19];
  v0[6] = v0;
  (*(void (**)(void))(v1 + 8))();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(uint64_t))(v0[6] + 8);
  uint64_t v3 = v0[22];
  return v2(v3);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v6 = v0[20];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[18];
  id v1 = (void *)v0[11];
  v0[6] = v0;

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)())(v0[6] + 8);
  return v2();
}

uint64_t HealthKitFetcher.getCumulativeTotal(startDate:endDate:)(uint64_t a1)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 48) = *v2;
  *(void *)(v5 + 176) = a1;
  *(void *)(v5 + 184) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = HealthKitFetcher.getCumulativeTotal(startDate:endDate:);
  }
  else
  {

    uint64_t v3 = HealthKitFetcher.getCumulativeTotal(startDate:endDate:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 272) = a7;
  *(void *)(v7 + 264) = a6;
  *(void *)(v7 + 256) = a5;
  *(void *)(v7 + 248) = a4;
  *(void *)(v7 + 240) = a3;
  *(void *)(v7 + 232) = a2;
  *(void *)(v7 + 224) = a1;
  *(void *)(v7 + 168) = v7;
  *(void *)(v7 + 176) = 0;
  *(void *)(v7 + 184) = 0;
  *(void *)(v7 + 192) = 0;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(void *)(v7 + 200) = 0;
  *(void *)(v7 + 208) = 0;
  *(void *)(v7 + 216) = 0;
  uint64_t v8 = type metadata accessor for Date();
  *(void *)(v7 + 280) = v8;
  *(void *)(v7 + 288) = *(void *)(v8 - 8);
  *(void *)(v7 + 296) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v7 + 304) = swift_task_alloc();
  *(void *)(v7 + 312) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKSamplePredicate<HKQuantitySample>);
  *(void *)(v7 + 320) = swift_task_alloc();
  uint64_t Descriptor = type metadata accessor for HKStatisticsCollectionQueryDescriptor();
  *(void *)(v7 + 328) = Descriptor;
  *(void *)(v7 + 336) = *(void *)(Descriptor - 8);
  *(void *)(v7 + 344) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  *(void *)(v7 + 352) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  *(void *)(v7 + 360) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DateComponents();
  *(void *)(v7 + 368) = v10;
  *(void *)(v7 + 376) = *(void *)(v10 - 8);
  *(void *)(v7 + 384) = swift_task_alloc();
  *(void *)(v7 + 392) = swift_task_alloc();
  *(void *)(v7 + 176) = a1;
  *(void *)(v7 + 184) = a2;
  *(void *)(v7 + 192) = a3;
  *(void *)(v7 + 64) = a4;
  *(void *)(v7 + 72) = a5;
  *(void *)(v7 + 80) = a6;
  *(void *)(v7 + 88) = a7;
  return MEMORY[0x270FA2498](HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:), 0);
}

uint64_t HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:)()
{
  uint64_t v21 = v0[49];
  uint64_t v24 = v0[48];
  uint64_t v20 = v0[47];
  uint64_t v22 = v0[46];
  uint64_t v7 = v0[45];
  uint64_t v8 = v0[44];
  uint64_t v25 = v0[40];
  uint64_t v16 = (const void *)v0[39];
  uint64_t v15 = (const void *)v0[38];
  Class v23 = (const void *)v0[37];
  uint64_t v9 = v0[36];
  uint64_t v18 = v0[35];
  uint64_t v14 = v0[34];
  uint64_t v13 = v0[33];
  uint64_t v12 = (void *)v0[32];
  uint64_t v26 = (void *)v0[31];
  uint64_t v10 = v0[29];
  uint64_t v17 = v0[28];
  v0[21] = v0;
  uint64_t v1 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 56))(v7, 1);
  uint64_t v2 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v8, 1);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  uint64_t v19 = *(void (**)(const void *, uint64_t, uint64_t))(v9 + 16);
  v0[50] = v19;
  v0[51] = (v9 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v19(v16, v17, v18);
  uint64_t v11 = *(void (**)(const void *))(v9 + 56);
  v11(v16);
  v19(v15, v10, v18);
  ((void (*)(const void *, void, uint64_t, uint64_t))v11)(v15, 0, 1, v18);
  HealthKitFetcher.predicate(start:end:)(v16, v15, (uint64_t)v26, v12, v13, v14, v25);
  outlined destroy of Date?((uint64_t)v15);
  outlined destroy of Date?((uint64_t)v16);
  v19(v23, v17, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v24, v21, v22);
  HKStatisticsCollectionQueryDescriptor.init(predicate:options:anchorDate:intervalComponents:)();
  id v3 = v26;
  uint64_t v4 = (void *)swift_task_alloc();
  v27[52] = v4;
  *uint64_t v4 = v27[21];
  v4[1] = HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:);
  uint64_t v5 = v27[31];
  return MEMORY[0x270EF32B0](v5);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  __n128 v4;
  uint64_t (*v5)(__n128);
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  Class v35;
  Class isa;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  uint64_t v33 = *(void **)(v0 + 424);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 400);
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v26 = *(void *)(v0 + 288);
  uint64_t v29 = *(void *)(v0 + 280);
  id v32 = *(void **)(v0 + 240);
  id v27 = *(void *)(v0 + 232);
  uint64_t v25 = *(void *)(v0 + 224);
  *(void *)(v0 + 168) = v0;
  *(void *)(v0 + 200) = v33;
  uint64_t v31 = swift_allocObject();
  *(void *)(v0 + 208) = v31 + 16;
  *(void *)(v31 + 16) = 0;
  id v37 = swift_allocObject();
  *(void *)(v0 + 216) = v37 + 16;
  *(void *)(v37 + 16) = 0;
  v28(v1, v25, v29);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v30(v1, v29);
  v28(v1, v27, v29);
  uint64_t v35 = Date._bridgeToObjectiveC()().super.isa;
  v30(v1, v29);
  swift_retain();
  uint64_t v2 = v32;
  swift_retain();
  id v3 = (void *)swift_allocObject();
  void v3[2] = v31;
  v3[3] = v32;
  v3[4] = v37;
  *(void *)(v0 + 48) = partial apply for closure #1 in HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:);
  *(void *)(v0 + 56) = v3;
  *(void *)(v0 + 16) = MEMORY[0x263EF8330];
  *(_DWORD *)(v0 + 24) = 1107296256;
  *(_DWORD *)(v0 + 28) = 0;
  *(void *)(v0 + 32) = thunk for @escaping @callee_guaranteed (@guaranteed HKStatistics, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
  *(void *)(v0 + 40) = &block_descriptor_9;
  unint64_t v34 = _Block_copy((const void *)(v0 + 16));
  swift_release();
  objc_msgSend(v33, sel_enumerateStatisticsFromDate_toDate_withBlock_, isa, v35, v34);
  _Block_release(v34);

  swift_beginAccess();
  uint64_t v38 = *(void *)(v37 + 16);
  swift_endAccess();
  if (v38 <= 0)
  {
    uint64_t v7 = (id)v24[53];
    uint64_t v12 = v24[49];
    uint64_t v13 = v24[46];
    uint64_t v9 = v24[43];
    uint64_t v10 = v24[41];
    uint64_t v11 = v24[47];
    uint64_t v8 = v24[42];
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    Class v23 = 0.0;
  }
  else
  {
    uint64_t v16 = (id)v24[53];
    uint64_t v21 = v24[49];
    uint64_t v22 = v24[46];
    uint64_t v18 = v24[43];
    uint64_t v19 = v24[41];
    uint64_t v20 = v24[47];
    uint64_t v17 = v24[42];
    swift_beginAccess();
    uint64_t v15 = *(double *)(v31 + 16);
    swift_endAccess();
    swift_beginAccess();
    uint64_t v14 = *(void *)(v37 + 16);
    swift_endAccess();
    swift_release();
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
    Class v23 = v15 / (double)v14;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v4.n128_f64[0] = v23;
  uint64_t v5 = *(uint64_t (**)(__n128))(v24[21] + 8);
  return v5(v4);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(__n128);
  __n128 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  uint64_t v9 = v0[49];
  uint64_t v7 = v0[47];
  uint64_t v8 = v0[46];
  uint64_t v10 = v0[43];
  uint64_t v5 = v0[42];
  uint64_t v6 = v0[41];
  uint64_t v1 = (void *)v0[31];
  v0[21] = v0;

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v10, v6);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(__n128))(v0[21] + 8);
  v3.n128_u64[0] = v11;
  return v2(v3);
}

uint64_t HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:)(uint64_t a1)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 168) = *v2;
  *(void *)(v5 + 424) = a1;
  *(void *)(v5 + 432) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v3 = HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:);
  }
  else
  {

    id v3 = HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t specialized implicit closure #12 in HealthKitFetcher.query(start:end:)(void *a1)
{
  id v1 = a1;
  type metadata accessor for GetHealthQuantityIntentResponse();
  lazy protocol witness table accessor for type GetHealthQuantityIntentResponse and conformance NSObject();
  return String.init<A>(describing:)();
}

void closure #1 in HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v13 = objc_msgSend(a1, sel_sumQuantity);
  if (v13)
  {
    objc_msgSend(v13, sel_doubleValueForUnit_, a4);
    double v8 = v5;
    swift_beginAccess();
    *(double *)(a3 + 16) = *(double *)(a3 + 16) + v8;
    swift_endAccess();
    swift_beginAccess();
    uint64_t v6 = *(void *)(a5 + 16);
    uint64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
    }
    else
    {
      *(void *)(a5 + 16) = v9;
      swift_endAccess();
    }
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed HKStatistics, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  id v3 = a2;
  v6(a2, a3);

  return swift_release();
}

uint64_t protocol witness for QuantityFetching.isReadingAuthorized(for:) in conformance HealthKitFetcher(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  id v6 = *(id *)v1;
  uint64_t v7 = *(void *)(v1 + 8);
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  id v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  void *v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return HealthKitFetcher.isReadingAuthorized(for:)(a1, v6, v7, v8, v9);
}

uint64_t protocol witness for QuantityFetching.query(start:end:) in conformance HealthKitFetcher(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v8 = *v2;
  uint64_t v9 = v2[1];
  uint64_t v10 = v2[2];
  uint64_t v11 = v2[3];
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for QuantityFetching.query(start:end:) in conformance HealthKitFetcher;
  return HealthKitFetcher.query(start:end:)(a1, a2, v8, v9, v10, v11);
}

uint64_t protocol witness for QuantityFetching.query(start:end:) in conformance HealthKitFetcher(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = *v2;
  uint64_t v8 = v3 + 16;
  uint64_t v4 = swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
  }
  else
  {
    uint64_t v4 = a1;
    uint64_t v5 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 8);
  }
  return v5(v4);
}

uint64_t sub_25DE34EC0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE34F00()
{
  return swift_deallocObject();
}

uint64_t sub_25DE34F2C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE34F58()
{
  return swift_deallocObject();
}

uint64_t sub_25DE34F98()
{
  return swift_deallocObject();
}

uint64_t sub_25DE34FD8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35018()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35044()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35070()
{
  return swift_deallocObject();
}

uint64_t sub_25DE350B0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE350F0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35130()
{
  return swift_deallocObject();
}

uint64_t sub_25DE3515C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35188()
{
  return swift_deallocObject();
}

uint64_t sub_25DE351C8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35208()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35248()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35274()
{
  return swift_deallocObject();
}

uint64_t sub_25DE352A0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE352E0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35320()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35360()
{
  return swift_deallocObject();
}

uint64_t sub_25DE3538C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE353B8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE353F8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35438()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #7 in GetHealthQuantityIntentHandler.handle(intent:)()
{
  return implicit closure #7 in GetHealthQuantityIntentHandler.handle(intent:)(*(void **)(v0 + 16));
}

uint64_t sub_25DE35480()
{
  return swift_deallocObject();
}

uint64_t sub_25DE354AC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE354D8()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(void (**)(void))(v0 + 16));
}

uint64_t sub_25DE35524()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35564()
{
  return swift_deallocObject();
}

uint64_t sub_25DE355A4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE355E4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35610()
{
  return swift_deallocObject();
}

uint64_t sub_25DE3563C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE3567C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE356BC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [HKQuantityType]()
{
}

id *outlined destroy of HealthKitFetcher(id *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_25DE35790()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in GetHealthQuantityIntentHandler.handle(intent:)()
{
  uint64_t v5 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v8 = (void *)v0[2];
  uint64_t v6 = (const void *)v0[3];
  uint64_t v7 = (void *)v0[4];
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v2;
  *uint64_t v2 = *(void *)(v5 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  uint64_t v3 = async function pointer to @objc closure #1 in GetHealthQuantityIntentHandler.handle(intent:);
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in GetHealthQuantityIntentHandler.handle(intent:)
                                                               + v3))(v8, v6, v7);
}

unint64_t type metadata accessor for HKSample()
{
  uint64_t v2 = lazy cache variable for type metadata for HKSample;
  if (!lazy cache variable for type metadata for HKSample)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKSample);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25DE35934()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id partial apply for implicit closure #1 in HealthKitFetcher.query(start:end:)()
{
  return implicit closure #1 in HealthKitFetcher.query(start:end:)(*(void *)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t sub_25DE359A0()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                      - 8)
                          + 80);
  uint64_t v4 = (v1 + 16) & ~v1;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v6 + 48))(v0 + v4, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3 + v4, v5);
  }
  return swift_deallocObject();
}

void *outlined init with take of Date?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t partial apply for implicit closure #2 in HealthKitFetcher.query(start:end:)()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                 - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return implicit closure #2 in HealthKitFetcher.query(start:end:)(v2);
}

uint64_t sub_25DE35C74()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                      - 8)
                          + 80);
  uint64_t v4 = (v1 + 16) & ~v1;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v6 + 48))(v0 + v4, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3 + v4, v5);
  }
  return swift_deallocObject();
}

uint64_t sub_25DE35DB4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35DE0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35E0C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35E4C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35E8C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35EB8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35EE4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35F24()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35F64()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35F90()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35FBC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE35FFC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE3603C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_25DE36094()
{
  return swift_deallocObject();
}

uint64_t sub_25DE360C0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE360EC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE3612C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE3616C()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #5 in HealthKitFetcher.query(start:end:)()
{
  return specialized implicit closure #5 in HealthKitFetcher.query(start:end:)(*(void **)(v0 + 16));
}

uint64_t sub_25DE361B4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE361F4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36220()
{
  return swift_deallocObject();
}

uint64_t sub_25DE3624C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE3628C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE362CC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE362F8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36324()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36364()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [HKQuantityType] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKQuantityType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKQuantityType] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKQuantityType]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKQuantityType] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type HKQuantityType and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKQuantityType and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HKQuantityType and conformance NSObject)
  {
    type metadata accessor for HKQuantityType();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKQuantityType and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKQuantityType and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HKQuantityType and conformance NSObject)
  {
    type metadata accessor for HKQuantityType();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKQuantityType and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DE364AC()
{
  uint64_t v2 = *(void *)(type metadata accessor for Date() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25DE36578()
{
  return swift_deallocObject();
}

uint64_t sub_25DE365B8()
{
  uint64_t v2 = *(void *)(type metadata accessor for Date() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25DE36684()
{
  return swift_deallocObject();
}

uint64_t sub_25DE366C4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE366F0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE3671C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE3675C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE3679C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE367C8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE367F4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36834()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36874()
{
  uint64_t v2 = *(void *)(type metadata accessor for Date() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25DE36940()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36980()
{
  uint64_t v2 = *(void *)(type metadata accessor for Date() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25DE36A4C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36A8C()
{
  return swift_deallocObject();
}

__C::HKQueryOptions partial apply for implicit closure #11 in HealthKitFetcher.query(start:end:)(Swift::UInt rawValue)
{
  return HKQueryOptions.init(rawValue:)(rawValue);
}

uint64_t sub_25DE36AC0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36AEC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36B18()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36B58()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36B98()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36BC4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36BF0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36C30()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36C70()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36C9C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36CC8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36D08()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36D48()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #12 in HealthKitFetcher.query(start:end:)()
{
  return specialized implicit closure #12 in HealthKitFetcher.query(start:end:)(*(void **)(v0 + 16));
}

uint64_t sub_25DE36D90()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36DBC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36DE8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36E28()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36E68()
{
  return swift_deallocObject();
}

uint64_t sub_25DE36E94()
{
  swift_release();

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:)(void *a1, uint64_t a2)
{
  closure #1 in HealthKitFetcher.getCumulativeAverage(startDate:endDate:unit:)(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t type metadata accessor for GetHealthQuantityIntentHandler()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for HealthKitFetcher(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for HealthKitFetcher(id *a1)
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for HealthKitFetcher(void *a1, uint64_t a2)
{
  id v5 = *(id *)a2;
  id v2 = *(id *)a2;
  *a1 = v5;
  uint64_t v6 = *(void **)(a2 + 8);
  id v3 = v6;
  a1[1] = v6;
  uint64_t v7 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  a1[2] = v7;
  uint64_t v10 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  uint64_t result = a1;
  a1[3] = v10;
  return result;
}

uint64_t assignWithCopy for HealthKitFetcher(uint64_t a1, uint64_t a2)
{
  id v7 = *(id *)a2;
  id v2 = *(id *)a2;
  id v3 = *(void **)a1;
  *(void *)a1 = v7;

  uint64_t v8 = *(void **)(a2 + 8);
  id v4 = v8;
  id v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v8;

  uint64_t v9 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  *(void *)(a1 + 16) = v9;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  *(void *)(a1 + 24) = v11;
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for HealthKitFetcher(uint64_t a1, void *a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = *a2;

  id v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = a2[1];

  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HealthKitFetcher(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 > 0x7FFFFFFF && *(unsigned char *)(a1 + 32))
    {
      int v4 = *(void *)a1 + 0x7FFFFFFF;
    }
    else
    {
      int v3 = -1;
      if (*(void *)a1 < 0x100000000uLL) {
        int v3 = *(void *)a1;
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HealthKitFetcher(uint64_t result, unsigned int a2, unsigned int a3)
{
  BOOL v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(void *)__n128 result = a2 + 0x80000000;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 32) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 32) = 0;
      }
      else {
        __break(1u);
      }
    }
    if (a2) {
      *(void *)__n128 result = a2 - 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HealthKitFetcher()
{
  return &type metadata for HealthKitFetcher;
}

unint64_t lazy protocol witness table accessor for type GetHealthQuantityIntentResponse and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type GetHealthQuantityIntentResponse and conformance NSObject;
  if (!lazy protocol witness table cache variable for type GetHealthQuantityIntentResponse and conformance NSObject)
  {
    type metadata accessor for GetHealthQuantityIntentResponse();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type GetHealthQuantityIntentResponse and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Date? and conformance A?()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Date? and conformance A?;
  if (!lazy protocol witness table cache variable for type Date? and conformance A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Date?);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Date? and conformance A?);
    return WitnessTable;
  }
  return v2;
}

id LogPeriodIntent.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id LogPeriodIntent.init()()
{
  id v4 = 0;
  v3.receiver = 0;
  v3.super_class = (Class)type metadata accessor for LogPeriodIntent();
  id v2 = objc_msgSendSuper2(&v3, sel_init);
  id v0 = v2;
  id v4 = v2;

  return v2;
}

uint64_t type metadata accessor for LogPeriodIntent()
{
  return self;
}

id LogPeriodIntent.__allocating_init(coder:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id LogPeriodIntent.init(coder:)(void *a1)
{
  id v8 = 0;
  id v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for LogPeriodIntent();
  id v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    id v1 = v5;
    id v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id LogPeriodIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v11 = objc_allocWithZone(v3);
  if (a2)
  {
    uint64_t v6 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    id v7 = (void *)v6;
  }
  else
  {
    id v7 = 0;
  }
  id v5 = objc_msgSend(v11, sel_initWithIdentifier_backingStore_);

  return v5;
}

id LogPeriodIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v15 = 0;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v12 = a3;
  swift_bridgeObjectRetain();
  if (a2)
  {
    uint64_t v6 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    id v7 = (void *)v6;
  }
  else
  {
    id v7 = 0;
  }
  v11.receiver = 0;
  v11.super_class = (Class)type metadata accessor for LogPeriodIntent();
  id v5 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_backingStore_, v7, a3);

  id v3 = v5;
  id v15 = v5;

  swift_bridgeObjectRelease();
  return v5;
}

id LogPeriodIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v13 = objc_allocWithZone(v5);
  uint64_t v16 = (void *)MEMORY[0x2611C8860](a1, a2);
  uint64_t v18 = (void *)MEMORY[0x2611C8860](a3, a4);
  if (a5)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, isa);
  }
  else
  {
    id v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, 0);
  }
  id v9 = v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

id LogPeriodIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v23 = 0;
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v18 = a5;
  swift_bridgeObjectRetain();
  id v12 = (id)MEMORY[0x2611C8860](a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  id v15 = (void *)MEMORY[0x2611C8860](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a5)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v9 = isa;
  }
  else
  {
    Class v9 = 0;
  }
  v17.receiver = 0;
  v17.super_class = (Class)type metadata accessor for LogPeriodIntent();
  id v7 = objc_msgSendSuper2(&v17, sel_initWithDomain_verb_parametersByName_, v12, v15, v9);

  id v5 = v7;
  id v23 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v7;
}

id LogPeriodIntent.__deallocating_deinit()
{
  id v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LogPeriodIntent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t LogPeriodIntentResponseCode.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 100:
      return 100;
    case 101:
      return 101;
    case 102:
      return 102;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LogPeriodIntentResponseCode()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LogPeriodIntentResponseCode()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LogPeriodIntentResponseCode()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance LogPeriodIntentResponseCode()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LogPeriodIntentResponseCode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = LogPeriodIntentResponseCode.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LogPeriodIntentResponseCode(void *a1@<X8>)
{
  LogPeriodIntentResponseCode.rawValue.getter();
  *a1 = v1;
}

uint64_t LogPeriodIntentResponse.code.getter()
{
  objc_super v2 = (uint64_t *)(v0 + OBJC_IVAR___LogPeriodIntentResponse_code);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t LogPeriodIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___LogPeriodIntentResponse_code);
  swift_beginAccess();
  void *v3 = a1;
  return swift_endAccess();
}

uint64_t (*LogPeriodIntentResponse.code.modify())()
{
  return LogQuantityIntentResponse.code.modify;
}

void key path getter for LogPeriodIntentResponse.code : LogPeriodIntentResponse(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  id v2 = *a1;
  *a2 = LogPeriodIntentResponse.code.getter();
}

void key path setter for LogPeriodIntentResponse.code : LogPeriodIntentResponse(uint64_t *a1, id *a2)
{
  uint64_t v4 = *a1;
  id v3 = *a2;
  id v2 = *a2;
  LogPeriodIntentResponse.code.setter(v4);
}

char *LogPeriodIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  id v3 = objc_allocWithZone(v2);
  return LogPeriodIntentResponse.init(code:userActivity:)(a1, a2);
}

char *LogPeriodIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  Class v9 = (char *)objc_msgSend(v10, sel_init);
  id v2 = v9;
  id v3 = v9;
  uint64_t v4 = v9;
  id v6 = &v9[OBJC_IVAR___LogPeriodIntentResponse_code];
  swift_beginAccess();
  *(void *)id v6 = a1;
  swift_endAccess();

  objc_msgSend(v9, sel_setUserActivity_, a2);
  return v9;
}

id LogPeriodIntentResponse.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id LogPeriodIntentResponse.init()()
{
  uint64_t v1 = v0;
  id v6 = v0;
  *(void *)&v0[OBJC_IVAR___LogPeriodIntentResponse_code] = 0;

  v5.receiver = v6;
  v5.super_class = (Class)type metadata accessor for LogPeriodIntentResponse();
  id v4 = objc_msgSendSuper2(&v5, sel_init);
  id v2 = v4;
  id v6 = v4;

  return v4;
}

uint64_t type metadata accessor for LogPeriodIntentResponse()
{
  return self;
}

id LogPeriodIntentResponse.__allocating_init(coder:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id LogPeriodIntentResponse.init(coder:)(void *a1)
{
  Class v9 = a1;
  id v2 = v1;
  id v10 = v1;
  *(void *)&v1[OBJC_IVAR___LogPeriodIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for LogPeriodIntentResponse();
  id v7 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);
  if (v7)
  {
    id v3 = v7;
    id v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id LogPeriodIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v4;
}

id LogPeriodIntentResponse.init(backingStore:)(void *a1)
{
  Class v9 = a1;
  id v2 = v1;
  id v10 = v1;
  *(void *)&v1[OBJC_IVAR___LogPeriodIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for LogPeriodIntentResponse();
  id v7 = objc_msgSendSuper2(&v8, sel_initWithBackingStore_, a1);
  if (v7)
  {
    id v3 = v7;
    id v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id LogPeriodIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  id v8 = objc_allocWithZone(v1);
  if (a1)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, isa);
  }
  else
  {
    id v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, 0);
  }
  id v5 = v2;

  return v5;
}

id LogPeriodIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  uint64_t v11 = a1;
  id v2 = v1;
  id v12 = v1;
  *(void *)&v1[OBJC_IVAR___LogPeriodIntentResponse_code] = 0;

  swift_bridgeObjectRetain();
  if (a1)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v8 = isa;
  }
  else
  {
    Class v8 = 0;
  }
  v10.receiver = v12;
  v10.super_class = (Class)type metadata accessor for LogPeriodIntentResponse();
  id v6 = objc_msgSendSuper2(&v10, sel_initWithPropertiesByName_, v8);

  if (v6)
  {
    id v3 = v6;
    id v12 = v6;
    swift_bridgeObjectRelease();

    return v6;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id LogPeriodIntentResponse.__deallocating_deinit()
{
  id v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LogPeriodIntentResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in LogPeriodIntentResponseCode()
{
  return lazy protocol witness table accessor for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode();
}

unint64_t lazy protocol witness table accessor for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode()
{
  uint64_t v2 = lazy protocol witness table cache variable for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode;
  if (!lazy protocol witness table cache variable for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode;
  if (!lazy protocol witness table cache variable for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type LogPeriodIntentResponseCode and conformance LogPeriodIntentResponseCode);
    return WitnessTable;
  }
  return v2;
}

void sub_25DE38F0C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_25DE38F24(uint64_t *a1, id *a2)
{
}

ValueMetadata *type metadata accessor for LogPeriodIntentResponseCode()
{
  return &type metadata for LogPeriodIntentResponseCode;
}

uint64_t static MatchedMedSchedule.supportsSecureCoding.getter()
{
  return 1;
}

id MatchedMedSchedule.__allocating_init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v20 = objc_allocWithZone(v6);
  if (a2)
  {
    uint64_t v12 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    id v13 = (void *)v12;
  }
  else
  {
    id v13 = 0;
  }
  id v11 = (id)MEMORY[0x2611C8860](a3, a4);
  if (a6)
  {
    uint64_t v9 = MEMORY[0x2611C8860](a5);
    swift_bridgeObjectRelease();
    objc_super v10 = (void *)v9;
  }
  else
  {
    objc_super v10 = 0;
  }
  id v8 = objc_msgSend(v20, sel_initWithIdentifier_displayString_pronunciationHint_, v13, v11);

  swift_bridgeObjectRelease();
  return v8;
}

id MatchedMedSchedule.init(identifier:display:pronunciationHint:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v27 = 0;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  swift_bridgeObjectRetain();
  if (a2)
  {
    uint64_t v12 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    id v13 = (void *)v12;
  }
  else
  {
    id v13 = 0;
  }
  swift_bridgeObjectRetain();
  id v11 = (id)MEMORY[0x2611C8860](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a6)
  {
    uint64_t v9 = MEMORY[0x2611C8860](a5);
    swift_bridgeObjectRelease();
    objc_super v10 = (void *)v9;
  }
  else
  {
    objc_super v10 = 0;
  }
  v20.receiver = 0;
  v20.super_class = (Class)type metadata accessor for MatchedMedSchedule();
  id v8 = objc_msgSendSuper2(&v20, sel_initWithIdentifier_displayString_pronunciationHint_, v13, v11, v10);

  id v6 = v8;
  id v27 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v8;
}

uint64_t type metadata accessor for MatchedMedSchedule()
{
  return self;
}

id MatchedMedSchedule.__allocating_init(coder:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id MatchedMedSchedule.init(coder:)(void *a1)
{
  id v8 = 0;
  id v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for MatchedMedSchedule();
  id v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    id v1 = v5;
    id v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id MatchedMedSchedule.__deallocating_deinit()
{
  id v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MatchedMedSchedule();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static MatchedMedScheduleResolutionResult.success(with:)(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t v6 = v1;
  v5.receiver = (id)swift_getObjCClassFromMetadata();
  v5.super_class = (Class)&OBJC_METACLASS___MatchedMedScheduleResolutionResult;
  id v2 = objc_msgSendSuper2(&v5, sel_successWithResolvedObject_, a1);
  return v2;
}

id static MatchedMedScheduleResolutionResult.disambiguation(with:)(uint64_t a1)
{
  uint64_t v8 = a1;
  uint64_t v7 = v1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  swift_bridgeObjectRetain();
  type metadata accessor for MatchedMedSchedule();
  type metadata accessor for INObject();
  _arrayForceCast<A, B>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6.receiver = ObjCClassFromMetadata;
  v6.super_class = (Class)&OBJC_METACLASS___MatchedMedScheduleResolutionResult;
  id v5 = objc_msgSendSuper2(&v6, sel_disambiguationWithObjectsToDisambiguate_, isa);

  return v5;
}

id static MatchedMedScheduleResolutionResult.confirmationRequired(with:)(void *a1)
{
  id v11 = a1;
  uint64_t v10 = v1;
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  id v2 = a1;
  if (a1) {
    objc_super v6 = a1;
  }
  else {
    objc_super v6 = 0;
  }
  v9.receiver = ObjCClassFromMetadata;
  v9.super_class = (Class)&OBJC_METACLASS___MatchedMedScheduleResolutionResult;
  id v5 = objc_msgSendSuper2(&v9, sel_confirmationRequiredWithObjectToConfirm_, v6);

  return v5;
}

void static MatchedMedScheduleResolutionResult.success(with:)()
{
}

id sub_25DE39B5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return a1;
}

void static MatchedMedScheduleResolutionResult.disambiguation(with:)()
{
}

id sub_25DE39C68(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  swift_bridgeObjectRelease();

  return a1;
}

void static MatchedMedScheduleResolutionResult.confirmationRequired(with:)()
{
}

id sub_25DE39D60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return a1;
}

id MatchedMedScheduleResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v7 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_);

  swift_bridgeObjectRelease();
  return v7;
}

id MatchedMedScheduleResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v11 = 0;
  uint64_t v10 = a1;
  objc_super v9 = a2;
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = 0;
  v8.super_class = (Class)type metadata accessor for MatchedMedScheduleResolutionResult();
  id v7 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  if (v7)
  {
    id v2 = v7;
    id v11 = v7;

    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id MatchedMedScheduleResolutionResult.__deallocating_deinit()
{
  id v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MatchedMedScheduleResolutionResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for MatchedMedScheduleResolutionResult()
{
  return self;
}

uint64_t getPreferredUnit(for:store:)(uint64_t a1, uint64_t a2)
{
  v2[47] = a2;
  v2[46] = a1;
  v2[30] = v2;
  v2[31] = 0;
  v2[32] = 0;
  v2[35] = 0;
  v2[37] = 0;
  v2[39] = 0;
  v2[44] = 0;
  uint64_t v3 = type metadata accessor for Logger();
  v2[48] = v3;
  v2[49] = *(void *)(v3 - 8);
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v2[54] = swift_task_alloc();
  v2[31] = a1;
  v2[32] = a2;
  return MEMORY[0x270FA2498](getPreferredUnit(for:store:), 0);
}

uint64_t getPreferredUnit(for:store:)()
{
  uint64_t v41 = v0;
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v22 = *(void *)(v0 + 392);
  uint64_t v24 = *(void *)(v0 + 384);
  id v25 = *(id *)(v0 + 368);
  *(void *)(v0 + 240) = v0;
  uint64_t v23 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  objc_super v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
  *(void *)(v0 + 440) = v2;
  *(void *)(v0 + 448) = (v22 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v2(v1, v23, v24);
  swift_endAccess();
  id v3 = v25;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v25;
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 264) = 12;
  *(void *)(v0 + 456) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 464) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 472) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 552);
  uint64_t v29 = swift_allocObject();
  *(unsigned char *)(v29 + 16) = 64;
  uint64_t v30 = swift_allocObject();
  *(unsigned char *)(v30 + 16) = 8;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v28 + 24) = v27;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v31 + 24) = v28;
  *(void *)(v0 + 480) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  id v32 = v4;
  swift_retain();
  void *v32 = partial apply for closure #1 in OSLogArguments.append(_:);
  v32[1] = v29;
  swift_retain();
  v32[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v32[3] = v30;
  swift_retain();
  v32[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v32[5] = v31;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v33, v34))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v19 = createStorage<A>(capacity:type:)(1);
    uint64_t v20 = createStorage<A>(capacity:type:)(0);
    uint64_t v36 = buf;
    uint64_t v37 = v19;
    uint64_t v38 = v20;
    serialize(_:at:)(2, &v36);
    serialize(_:at:)(1, &v36);
    uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v40 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v40 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    uint64_t v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v40 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    _os_log_impl(&dword_25DE00000, v33, v34, "Getting preferred unit for quantityType: %@", buf, size);
    destroyStorage<A>(_:count:)(v19, 1, v17);
    destroyStorage<A>(_:count:)(v20, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  *(void *)(v21 + 488) = 0;
  uint64_t v14 = *(void *)(v21 + 432);
  uint64_t v15 = *(void *)(v21 + 384);
  id v16 = *(id *)(v21 + 376);
  uint64_t v13 = *(void *)(v21 + 392);

  id v5 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(void *)(v21 + 496) = v5;
  *(void *)(v21 + 504) = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v14, v15);
  id v6 = v16;
  *(void *)(v21 + 272) = v16;
  if (*(void *)(v21 + 272))
  {
    uint64_t v35 = *(void **)(v21 + 272);
  }
  else
  {
    type metadata accessor for HKHealthStore();
    uint64_t v35 = NSDateFormatter.__allocating_init()();
    outlined destroy of HealthKitPersistor((id *)(v21 + 272));
  }
  id v11 = *(id *)(v21 + 368);
  *(void *)(v21 + 512) = v35;
  *(void *)(v21 + 280) = v35;
  *(void *)(v21 + 520) = type metadata accessor for HKQuantityType();
  _allocateUninitializedArray<A>(_:)();
  uint64_t v10 = v7;
  id v8 = v11;
  void *v10 = v11;
  _finalizeUninitializedArray<A>(_:)();
  *(void *)(v21 + 528) = lazy protocol witness table accessor for type HKQuantityType and conformance NSObject();
  Set.init(arrayLiteral:)();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  *(void *)(v21 + 536) = isa;
  swift_bridgeObjectRelease();
  *(void *)(v21 + 16) = *(void *)(v21 + 240);
  *(void *)(v21 + 56) = v21 + 288;
  *(void *)(v21 + 24) = getPreferredUnit(for:store:);
  *(void *)(v21 + 112) = swift_continuation_init();
  *(void *)(v21 + 80) = MEMORY[0x263EF8330];
  *(_DWORD *)(v21 + 88) = 0x40000000;
  *(_DWORD *)(v21 + 92) = 0;
  *(void *)(v21 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary, @unowned NSError?) -> () with result type [HKQuantityType : HKUnit];
  *(void *)(v21 + 104) = &block_descriptor_0;
  objc_msgSend(v35, sel_preferredUnitsForQuantityTypes_completion_, isa);
  return __swift_continuation_await_point();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  id v4 = (void *)*v0;
  v4[30] = *v0;
  uint64_t v1 = v4[6];
  v4[68] = v1;
  if (v1)
  {
    objc_super v2 = getPreferredUnit(for:store:);
  }
  else
  {
    objc_super v2 = getPreferredUnit(for:store:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t result;
  id v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  void *v12;
  uint64_t (*v13)(void *);
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  uint64_t (*v22)();
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  id v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  id v37;
  id v38;
  uint32_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t);
  id v61;
  uint64_t v62;
  uint32_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  NSObject *log;
  os_log_type_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t, uint64_t);
  id v88;
  uint32_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  NSObject *oslog;
  os_log_type_t v102;
  uint64_t v103;
  uint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  id v106;
  uint64_t v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint8_t *buf;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  id v121;
  uint32_t size;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t (*v139)(uint64_t, uint64_t, uint64_t);
  uint64_t v140;
  uint8_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(uint64_t, uint64_t, uint64_t);
  uint64_t v145;
  uint8_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t (*v149)(uint64_t, uint64_t, uint64_t);
  uint64_t v150;
  uint8_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t (*v154)(uint64_t, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v156 = v0;
  uint64_t v1 = *(void **)(v0 + 536);
  v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  objc_super v2 = *(void *)(v0 + 424);
  v117 = *(void *)(v0 + 384);
  v121 = *(id *)(v0 + 368);
  *(void *)(v0 + 240) = v0;
  v119 = *(void *)(v0 + 288);
  *(void *)(v0 + 312) = v119;

  v116 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v118(v2, v116, v117);
  swift_endAccess();
  swift_bridgeObjectRetain();
  v120 = swift_allocObject();
  *(void *)(v120 + 16) = v119;
  swift_retain();
  v123 = swift_allocObject();
  *(void *)(v123 + 16) = partial apply for implicit closure #3 in getPreferredUnit(for:store:);
  *(void *)(v123 + 24) = v120;
  swift_release();
  id v3 = v121;
  v125 = swift_allocObject();
  *(void *)(v125 + 16) = v121;
  v134 = Logger.logObject.getter();
  v135 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 320) = 22;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 560);
  v127 = swift_allocObject();
  *(unsigned char *)(v127 + 16) = 32;
  v128 = swift_allocObject();
  *(unsigned char *)(v128 + 16) = 8;
  v124 = swift_allocObject();
  *(void *)(v124 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_0;
  *(void *)(v124 + 24) = v123;
  v129 = swift_allocObject();
  *(void *)(v129 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v129 + 24) = v124;
  v130 = swift_allocObject();
  *(unsigned char *)(v130 + 16) = 64;
  v131 = swift_allocObject();
  *(unsigned char *)(v131 + 16) = 8;
  v126 = swift_allocObject();
  *(void *)(v126 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v126 + 24) = v125;
  v132 = swift_allocObject();
  *(void *)(v132 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v132 + 24) = v126;
  _allocateUninitializedArray<A>(_:)();
  v133 = v4;
  swift_retain();
  *v133 = partial apply for closure #1 in OSLogArguments.append(_:);
  v133[1] = v127;
  swift_retain();
  v133[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v133[3] = v128;
  swift_retain();
  v133[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v133[5] = v129;
  swift_retain();
  v133[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v133[7] = v130;
  swift_retain();
  v133[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v133[9] = v131;
  swift_retain();
  v133[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v133[11] = v132;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v134, v135))
  {
    id v5 = *(void *)(v115 + 488);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v113 = createStorage<A>(capacity:type:)(1);
    v114 = createStorage<A>(capacity:type:)(1);
    v151 = buf;
    v152 = v113;
    v153 = v114;
    serialize(_:at:)(2, &v151);
    serialize(_:at:)(2, &v151);
    v154 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v155 = v127;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v154, (uint64_t)&v151, (uint64_t)&v152, (uint64_t)&v153);
    if (v5) {
      return result;
    }
    v154 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v155 = v128;
    closure #1 in osLogInternal(_:log:type:)(&v154, (uint64_t)&v151, (uint64_t)&v152, (uint64_t)&v153);
    v154 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v155 = v129;
    closure #1 in osLogInternal(_:log:type:)(&v154, (uint64_t)&v151, (uint64_t)&v152, (uint64_t)&v153);
    v154 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v155 = v130;
    closure #1 in osLogInternal(_:log:type:)(&v154, (uint64_t)&v151, (uint64_t)&v152, (uint64_t)&v153);
    v154 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v155 = v131;
    closure #1 in osLogInternal(_:log:type:)(&v154, (uint64_t)&v151, (uint64_t)&v152, (uint64_t)&v153);
    v154 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v155 = v132;
    closure #1 in osLogInternal(_:log:type:)(&v154, (uint64_t)&v151, (uint64_t)&v152, (uint64_t)&v153);
    _os_log_impl(&dword_25DE00000, v134, v135, "Received preferredUnits=%s for quantityType=%@", buf, size);
    destroyStorage<A>(_:count:)(v113, 1, v111);
    destroyStorage<A>(_:count:)(v114, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v110 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v110 = *(void *)(v115 + 488);
  }
  v108 = *(void *)(v115 + 528);
  v107 = *(void *)(v115 + 520);
  uint64_t v105 = *(void (**)(uint64_t, uint64_t))(v115 + 496);
  uint64_t v103 = *(void *)(v115 + 424);
  uint64_t v104 = *(void *)(v115 + 384);
  v106 = *(id *)(v115 + 368);

  v105(v103, v104);
  uint64_t v7 = v106;
  *(void *)(v115 + 336) = v106;
  id v8 = type metadata accessor for HKUnit();
  MEMORY[0x2611C8800](v115 + 336, v119, v107, v8, v108);

  v109 = *(void **)(v115 + 328);
  if (v109)
  {
    uint64_t v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 440);
    objc_super v9 = *(void *)(v115 + 416);
    id v86 = *(void *)(v115 + 384);
    uint64_t v88 = *(id *)(v115 + 368);
    *(void *)(v115 + 352) = v109;
    uint64_t v85 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v87(v9, v85, v86);
    swift_endAccess();
    uint64_t v10 = v109;
    uint64_t v90 = swift_allocObject();
    *(void *)(v90 + 16) = v109;
    id v11 = v88;
    uint64_t v92 = swift_allocObject();
    *(void *)(v92 + 16) = v88;
    oslog = Logger.logObject.getter();
    v102 = static os_log_type_t.debug.getter();
    *(void *)(v115 + 360) = 22;
    UnsignedInteger<>.init<A>(_:)();
    id v89 = *(_DWORD *)(v115 + 568);
    uint64_t v94 = swift_allocObject();
    *(unsigned char *)(v94 + 16) = 64;
    uint64_t v95 = swift_allocObject();
    *(unsigned char *)(v95 + 16) = 8;
    uint64_t v91 = swift_allocObject();
    *(void *)(v91 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v91 + 24) = v90;
    uint64_t v96 = swift_allocObject();
    *(void *)(v96 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(void *)(v96 + 24) = v91;
    id v97 = swift_allocObject();
    *(unsigned char *)(v97 + 16) = 64;
    long long v98 = swift_allocObject();
    *(unsigned char *)(v98 + 16) = 8;
    uint64_t v93 = swift_allocObject();
    *(void *)(v93 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v93 + 24) = v92;
    long long v99 = swift_allocObject();
    *(void *)(v99 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(void *)(v99 + 24) = v93;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v100 = v12;
    swift_retain();
    *uint64_t v100 = partial apply for closure #1 in OSLogArguments.append(_:);
    v100[1] = v94;
    swift_retain();
    v100[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v100[3] = v95;
    swift_retain();
    v100[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v100[5] = v96;
    swift_retain();
    v100[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v100[7] = v97;
    swift_retain();
    v100[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v100[9] = v98;
    swift_retain();
    v100[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v100[11] = v99;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v102))
    {
      id v82 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      id v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      id v83 = createStorage<A>(capacity:type:)(2);
      uint64_t v84 = createStorage<A>(capacity:type:)(0);
      v146 = v82;
      v147 = v83;
      v148 = v84;
      serialize(_:at:)(2, &v146);
      serialize(_:at:)(2, &v146);
      v149 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v150 = v94;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v149, (uint64_t)&v146, (uint64_t)&v147, (uint64_t)&v148);
      if (v110) {
        return result;
      }
      v149 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v150 = v95;
      closure #1 in osLogInternal(_:log:type:)(&v149, (uint64_t)&v146, (uint64_t)&v147, (uint64_t)&v148);
      v149 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v150 = v96;
      closure #1 in osLogInternal(_:log:type:)(&v149, (uint64_t)&v146, (uint64_t)&v147, (uint64_t)&v148);
      v149 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v150 = v97;
      closure #1 in osLogInternal(_:log:type:)(&v149, (uint64_t)&v146, (uint64_t)&v147, (uint64_t)&v148);
      v149 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v150 = v98;
      closure #1 in osLogInternal(_:log:type:)(&v149, (uint64_t)&v146, (uint64_t)&v147, (uint64_t)&v148);
      v149 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v150 = v99;
      closure #1 in osLogInternal(_:log:type:)(&v149, (uint64_t)&v146, (uint64_t)&v147, (uint64_t)&v148);
      _os_log_impl(&dword_25DE00000, oslog, v102, "Retrieved preferred unit=%@ for quantityType=%@", v82, v89);
      destroyStorage<A>(_:count:)(v83, 2, v81);
      destroyStorage<A>(_:count:)(v84, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v82, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    id v79 = *(id *)(v115 + 512);
    id v78 = *(void (**)(uint64_t, uint64_t))(v115 + 496);
    id v80 = *(void *)(v115 + 416);
    id v77 = *(void *)(v115 + 384);

    v78(v80, v77);
    swift_bridgeObjectRelease();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void *))(*(void *)(v115 + 240) + 8);
    return v13(v109);
  }
  else
  {
    uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 440);
    uint64_t v14 = *(void *)(v115 + 408);
    uint64_t v59 = *(void *)(v115 + 384);
    uint64_t v61 = *(id *)(v115 + 368);
    uint64_t v58 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v60(v14, v58, v59);
    swift_endAccess();
    uint64_t v15 = v61;
    uint64_t v64 = swift_allocObject();
    *(void *)(v64 + 16) = v61;
    swift_bridgeObjectRetain();
    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = v119;
    swift_retain();
    id v66 = swift_allocObject();
    *(void *)(v66 + 16) = partial apply for implicit closure #3 in getPreferredUnit(for:store:);
    *(void *)(v66 + 24) = v62;
    swift_release();
    log = Logger.logObject.getter();
    id v76 = static os_log_type_t.error.getter();
    *(void *)(v115 + 344) = 22;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v63 = *(_DWORD *)(v115 + 564);
    os_log_type_t v68 = swift_allocObject();
    *(unsigned char *)(v68 + 16) = 64;
    id v69 = swift_allocObject();
    *(unsigned char *)(v69 + 16) = 8;
    uint64_t v65 = swift_allocObject();
    *(void *)(v65 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v65 + 24) = v64;
    uint64_t v70 = swift_allocObject();
    *(void *)(v70 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(void *)(v70 + 24) = v65;
    uint64_t v71 = swift_allocObject();
    *(unsigned char *)(v71 + 16) = 32;
    id v72 = swift_allocObject();
    *(unsigned char *)(v72 + 16) = 8;
    id v67 = swift_allocObject();
    *(void *)(v67 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_0;
    *(void *)(v67 + 24) = v66;
    uint64_t v73 = swift_allocObject();
    *(void *)(v73 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v73 + 24) = v67;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v74 = v16;
    swift_retain();
    *uint64_t v74 = partial apply for closure #1 in OSLogArguments.append(_:);
    v74[1] = v68;
    swift_retain();
    v74[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v74[3] = v69;
    swift_retain();
    v74[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v74[5] = v70;
    swift_retain();
    v74[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v74[7] = v71;
    swift_retain();
    v74[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v74[9] = v72;
    swift_retain();
    v74[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v74[11] = v73;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v76))
    {
      uint64_t v55 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v56 = createStorage<A>(capacity:type:)(1);
      uint64_t v57 = createStorage<A>(capacity:type:)(1);
      v141 = v55;
      v142 = v56;
      v143 = v57;
      serialize(_:at:)(2, &v141);
      serialize(_:at:)(2, &v141);
      v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v145 = v68;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      if (v110) {
        return result;
      }
      v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v145 = v69;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v145 = v70;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v145 = v71;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v145 = v72;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v145 = v73;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      _os_log_impl(&dword_25DE00000, log, v76, "Failed to find quantityType=%@ in preferredUnits=%s", v55, v63);
      destroyStorage<A>(_:count:)(v56, 1, v54);
      destroyStorage<A>(_:count:)(v57, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v55, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v33 = *(id *)(v115 + 512);
    id v32 = *(void (**)(uint64_t, uint64_t))(v115 + 496);
    uint64_t v30 = *(void *)(v115 + 408);
    uint64_t v31 = *(void *)(v115 + 384);

    v32(v30, v31);
    lazy protocol witness table accessor for type HealthKitLocalizationError and conformance HealthKitLocalizationError();
    uint64_t v38 = (id)swift_allocError();
    swift_willThrow();
    swift_bridgeObjectRelease();

    uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v115 + 440);
    uint64_t v17 = *(void *)(v115 + 400);
    uint64_t v35 = *(void *)(v115 + 384);
    uint64_t v37 = *(id *)(v115 + 368);
    uint64_t v18 = v38;
    *(void *)(v115 + 296) = v38;
    os_log_type_t v34 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v36(v17, v34, v35);
    swift_endAccess();
    uint64_t v19 = v37;
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = v37;
    uint64_t v20 = v38;
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = v38;
    default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
    swift_bridgeObjectRelease();
    uint64_t v52 = Logger.logObject.getter();
    uint64_t v53 = static os_log_type_t.error.getter();
    *(void *)(v115 + 304) = 22;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v39 = *(_DWORD *)(v115 + 556);
    long long v45 = swift_allocObject();
    *(unsigned char *)(v45 + 16) = 64;
    uint64_t v46 = swift_allocObject();
    *(unsigned char *)(v46 + 16) = 8;
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v41 + 24) = v40;
    uint64_t v47 = swift_allocObject();
    *(void *)(v47 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(void *)(v47 + 24) = v41;
    int v48 = swift_allocObject();
    *(unsigned char *)(v48 + 16) = 64;
    id v49 = swift_allocObject();
    *(unsigned char *)(v49 + 16) = 8;
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
    *(void *)(v43 + 24) = v42;
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
    *(void *)(v44 + 24) = v43;
    id v50 = swift_allocObject();
    *(void *)(v50 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
    *(void *)(v50 + 24) = v44;
    _allocateUninitializedArray<A>(_:)();
    id v51 = v21;
    swift_retain();
    *id v51 = partial apply for closure #1 in OSLogArguments.append(_:);
    v51[1] = v45;
    swift_retain();
    v51[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v51[3] = v46;
    swift_retain();
    v51[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v51[5] = v47;
    swift_retain();
    v51[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v51[7] = v48;
    swift_retain();
    v51[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v51[9] = v49;
    swift_retain();
    v51[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v51[11] = v50;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v27 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v28 = createStorage<A>(capacity:type:)(2);
      uint64_t v29 = createStorage<A>(capacity:type:)(0);
      v136 = v27;
      v137 = v28;
      v138 = v29;
      serialize(_:at:)(2, &v136);
      serialize(_:at:)(2, &v136);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v45;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v46;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v47;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v48;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v49;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v140 = v50;
      closure #1 in osLogInternal(_:log:type:)(&v139, (uint64_t)&v136, (uint64_t)&v137, (uint64_t)&v138);
      _os_log_impl(&dword_25DE00000, v52, v53, "Failed to fetch preferredUnits for quantityType=%@ with error: %@", v27, v39);
      destroyStorage<A>(_:count:)(v28, 2, v26);
      destroyStorage<A>(_:count:)(v29, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v27, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v115 + 496);
    id v25 = *(void *)(v115 + 400);
    uint64_t v23 = *(void *)(v115 + 384);

    v24(v25, v23);
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)())(*(void *)(v115 + 240) + 8);
    return v22();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t (*v6)();
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint8_t *buf;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  id v21;
  id v22;
  uint32_t size;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  NSObject *oslog;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  uint64_t v43 = v0;
  id v16 = *(id *)(v0 + 536);
  uint64_t v17 = *(id *)(v0 + 512);
  *(void *)(v0 + 240) = v0;
  swift_willThrow();

  uint64_t v22 = *(id *)(v0 + 544);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v19 = *(void *)(v0 + 384);
  uint64_t v21 = *(id *)(v0 + 368);
  objc_super v2 = v22;
  *(void *)(v0 + 296) = v22;
  uint64_t v18 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v20(v1, v18, v19);
  swift_endAccess();
  id v3 = v21;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v21;
  id v4 = v22;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v22;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  oslog = Logger.logObject.getter();
  uint64_t v37 = static os_log_type_t.error.getter();
  *(void *)(v0 + 304) = 22;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 556);
  uint64_t v29 = swift_allocObject();
  *(unsigned char *)(v29 + 16) = 64;
  uint64_t v30 = swift_allocObject();
  *(unsigned char *)(v30 + 16) = 8;
  id v25 = swift_allocObject();
  *(void *)(v25 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v25 + 24) = v24;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v31 + 24) = v25;
  id v32 = swift_allocObject();
  *(unsigned char *)(v32 + 16) = 64;
  uint64_t v33 = swift_allocObject();
  *(unsigned char *)(v33 + 16) = 8;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(void *)(v27 + 24) = v26;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(void *)(v28 + 24) = v27;
  os_log_type_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v34 + 24) = v28;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v35 = v5;
  swift_retain();
  *uint64_t v35 = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[1] = v29;
  swift_retain();
  v35[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[3] = v30;
  swift_retain();
  v35[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[5] = v31;
  swift_retain();
  v35[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[7] = v32;
  swift_retain();
  v35[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[9] = v33;
  swift_retain();
  v35[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v35[11] = v34;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v37))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    id v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v13 = createStorage<A>(capacity:type:)(2);
    uint64_t v14 = createStorage<A>(capacity:type:)(0);
    uint64_t v38 = buf;
    uint64_t v39 = v13;
    uint64_t v40 = v14;
    serialize(_:at:)(2, &v38);
    serialize(_:at:)(2, &v38);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v32;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v33;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v42 = v34;
    closure #1 in osLogInternal(_:log:type:)(&v41, (uint64_t)&v38, (uint64_t)&v39, (uint64_t)&v40);
    _os_log_impl(&dword_25DE00000, oslog, v37, "Failed to fetch preferredUnits for quantityType=%@ with error: %@", buf, size);
    destroyStorage<A>(_:count:)(v13, 2, v11);
    destroyStorage<A>(_:count:)(v14, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  objc_super v9 = (void (*)(uint64_t, uint64_t))v15[62];
  uint64_t v10 = v15[50];
  id v8 = v15[48];

  v9(v10, v8);
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v6 = *(uint64_t (**)())(v15[30] + 8);
  return v6();
}

Swift::String __swiftcall localizedUnitName(for:value:store:)(HKUnit a1, Swift::Double_optional value, HKHealthStore_optional store)
{
  Swift::Double v22 = *(double *)&value.is_nil;
  char isa = (char)store.value.super.isa;
  uint64_t v24 = *(void **)&store.is_nil;
  Class v30 = a1.super.isa;
  uint64_t v28 = *(void *)&value.is_nil;
  char v29 = (uint64_t)store.value.super.isa & 1;
  uint64_t v27 = *(void *)&store.is_nil;
  id v3 = *(id *)&store.is_nil;
  id v25 = v24;
  if (v24)
  {
    id v26 = v25;
  }
  else
  {
    type metadata accessor for HKHealthStore();
    id v26 = (id)NSDateFormatter.__allocating_init()();
    outlined destroy of HealthKitPersistor(&v25);
  }
  id v19 = v26;
  type metadata accessor for HKUnitPreferenceController();
  id v4 = v19;
  id v20 = HKUnitPreferenceController.__allocating_init(healthStore:)(v19);
  if (isa)
  {
    id v10 = objc_msgSend(v20, sel_localizedDisplayNameForUnit_value_, a1.super.isa, 0);
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v6;

    uint64_t v17 = v11;
    uint64_t v18 = v12;
  }
  else
  {
    type metadata accessor for NSNumber();
    Class v13 = NSNumber.__allocating_init(value:)(v22).super.super.isa;
    id v14 = objc_msgSend(v20, sel_localizedDisplayNameForUnit_value_, a1.super.isa);

    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v16 = v5;

    uint64_t v17 = v15;
    uint64_t v18 = v16;
  }
  uint64_t v7 = v17;
  id v8 = v18;
  result._object = v8;
  result._countAndFlagsBits = v7;
  return result;
}

uint64_t localizedUnitName(for:store:)(uint64_t a1, id a2)
{
  uint64_t v14 = a1;
  id v13 = a2;
  id v2 = a2;
  id v11 = a2;
  if (a2)
  {
    id v12 = v11;
  }
  else
  {
    type metadata accessor for HKHealthStore();
    id v12 = (id)NSDateFormatter.__allocating_init()();
    outlined destroy of HealthKitPersistor(&v11);
  }
  id v6 = v12;
  type metadata accessor for HKUnitPreferenceController();
  id v3 = v6;
  id v10 = HKUnitPreferenceController.__allocating_init(healthStore:)(v6);
  id v5 = objc_msgSend(v10, sel_localizedDisplayNameForDisplayType_, a1);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v7;
}

uint64_t default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t localizedPreferredUnitName(for:value:store:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v4 + 96) = a4;
  *(unsigned char *)(v4 + 25) = a3;
  *(void *)(v4 + 88) = a2;
  *(void *)(v4 + 80) = a1;
  *(void *)(v4 + 32) = v4;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 16) = 0;
  *(unsigned char *)(v4 + 24) = 0;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 72) = 0;
  *(void *)(v4 + 40) = a1;
  *(void *)(v4 + 16) = a2;
  *(unsigned char *)(v4 + 24) = a3 & 1;
  *(void *)(v4 + 48) = a4;
  return MEMORY[0x270FA2498](localizedPreferredUnitName(for:value:store:), 0);
}

uint64_t localizedPreferredUnitName(for:value:store:)()
{
  uint64_t v7 = (void *)v0[12];
  v0[4] = v0;
  id v1 = v7;
  v0[7] = v7;
  if (v0[7])
  {
    id v8 = *(void **)(v6 + 56);
  }
  else
  {
    type metadata accessor for HKHealthStore();
    id v8 = NSDateFormatter.__allocating_init()();
    outlined destroy of HealthKitPersistor((id *)(v6 + 56));
  }
  *(void *)(v6 + 104) = v8;
  *(void *)(v6 + 64) = v8;
  id v2 = v8;
  id v3 = (void *)swift_task_alloc();
  *(void *)(v6 + 112) = v3;
  void *v3 = *(void *)(v6 + 32);
  v3[1] = localizedPreferredUnitName(for:value:store:);
  uint64_t v4 = *(void *)(v6 + 80);
  return getPreferredUnit(for:store:)(v4, (uint64_t)v8);
}

{
  uint64_t v0;
  id v1;
  Swift::String v2;
  uint64_t (*v3)(uint64_t, void *);
  uint64_t value;
  char v6;
  void *fora;
  void *store;
  uint64_t v9;
  HKHealthStore_optional v10;
  Swift::Double_optional v11;

  fora = *(void **)(v0 + 120);
  store = *(void **)(v0 + 104);
  uint64_t v6 = *(unsigned char *)(v0 + 25);
  value = *(void *)(v0 + 88);
  *(void *)(v0 + 32) = v0;
  *(void *)(v0 + 72) = fora;
  id v1 = store;
  v11.is_nil = value;
  v10.is_nil = (char)store;
  v10.value.super.char isa = (Class)(v6 & 1);
  id v2 = localizedUnitName(for:value:store:)((HKUnit)fora, v11, v10);

  id v3 = *(uint64_t (**)(uint64_t, void *))(*(void *)(v0 + 32) + 8);
  return v3(v2._countAndFlagsBits, v2._object);
}

{
  uint64_t v0;
  uint64_t (*v1)();
  id v3;
  uint64_t v4;

  id v3 = *(id *)(v0 + 104);
  *(void *)(v0 + 32) = v0;

  id v1 = *(uint64_t (**)())(*(void *)(v0 + 32) + 8);
  return v1();
}

uint64_t localizedPreferredUnitName(for:value:store:)(uint64_t a1)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 32) = *v2;
  *(void *)(v5 + 120) = a1;
  *(void *)(v5 + 128) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v3 = localizedPreferredUnitName(for:value:store:);
  }
  else
  {

    id v3 = localizedPreferredUnitName(for:value:store:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t static HealthKitLocalizationError.__derived_enum_equals(_:_:)()
{
  return 1;
}

uint64_t HealthKitLocalizationError.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t HealthKitLocalizationError.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HealthKitLocalizationError()
{
  return static HealthKitLocalizationError.__derived_enum_equals(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HealthKitLocalizationError()
{
  return HealthKitLocalizationError.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HealthKitLocalizationError()
{
  return HealthKitLocalizationError.hash(into:)();
}

uint64_t protocol witness for Error._domain.getter in conformance HealthKitLocalizationError()
{
  return Error._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance HealthKitLocalizationError()
{
  return Error._code.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance HealthKitLocalizationError()
{
  return Error._getEmbeddedNSError()();
}

uint64_t sub_25DE3E854()
{
  return swift_deallocObject();
}

uint64_t implicit closure #3 in getPreferredUnit(for:store:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  swift_bridgeObjectRetain();
  uint64_t result = a1;
  *a2 = a1;
  return result;
}

void *implicit closure #10 in getPreferredUnit(for:store:)(void *a1)
{
  id v1 = a1;
  return a1;
}

id HKUnitPreferenceController.__allocating_init(healthStore:)(void *a1)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKUnitPreferenceController.init(healthStore:)(a1);
}

NSNumber __swiftcall NSNumber.__allocating_init(value:)(Swift::Double value)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSNumber)@nonobjc NSNumber.init(value:)();
}

BOOL static HKHealthStore.Error.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return ((a1 & 1) != 0) == (unint64_t)((a2 & 1) != 0);
}

uint64_t HKHealthStore.Error.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t HKHealthStore.Error.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HKHealthStore.Error(unsigned char *a1, unsigned char *a2)
{
  return static HKHealthStore.Error.__derived_enum_equals(_:_:)(*a1 & 1, *a2 & 1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HKHealthStore.Error()
{
  return HKHealthStore.Error.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HKHealthStore.Error()
{
  return HKHealthStore.Error.hash(into:)();
}

uint64_t HKHealthStore.query(quantityType:start:end:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = v4;
  v5[11] = a4;
  v5[10] = a3;
  v5[9] = a2;
  v5[8] = a1;
  v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v5[5] = 0;
  v5[6] = 0;
  v5[7] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5[13] = swift_task_alloc();
  v5[14] = swift_task_alloc();
  v5[3] = a2;
  v5[4] = a3;
  v5[5] = a4;
  v5[6] = v12;
  id v6 = v12;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v11 + 120) = v7;
  void *v7 = *(void *)(v11 + 16);
  v7[1] = HKHealthStore.query(quantityType:start:end:);
  return getPreferredUnit(for:store:)(a2, (uint64_t)v12);
}

uint64_t HKHealthStore.query(quantityType:start:end:)(uint64_t a1)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 16) = *v2;
  *(void *)(v5 + 128) = a1;
  *(void *)(v5 + 136) = v1;
  swift_task_dealloc();
  if (v1)
  {
    id v3 = HKHealthStore.query(quantityType:start:end:);
  }
  else
  {

    id v3 = HKHealthStore.query(quantityType:start:end:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t HKHealthStore.query(quantityType:start:end:)()
{
  id v15 = (id)v0[16];
  id v12 = (void *)v0[14];
  id v13 = (void *)v0[13];
  id v11 = (id)v0[12];
  id v10 = (const void *)v0[11];
  uint64_t v9 = (const void *)v0[10];
  id v14 = (id)v0[9];
  v0[2] = v0;
  v0[7] = v15;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("query(quantityType:start:end:)", 0x1EuLL, 1);
  v0[18] = v1._object;
  id v2 = v11;
  outlined init with copy of Date?(v9, v12);
  outlined init with copy of Date?(v10, v13);
  id v3 = v14;
  id v4 = v15;
  uint64_t v17 = (void *)swift_task_alloc();
  v0[19] = v17;
  v17[2] = v11;
  v17[3] = v12;
  v17[4] = v13;
  v17[5] = v14;
  v17[6] = v15;
  uint64_t v5 = (void *)swift_task_alloc();
  v16[20] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>?);
  *uint64_t v5 = v16[2];
  v5[1] = HKHealthStore.query(quantityType:start:end:);
  uint64_t v7 = v16[8];
  return MEMORY[0x270FA2360](v7, 0, 0, v1._countAndFlagsBits, v1._object, partial apply for closure #1 in HKHealthStore.query(quantityType:start:end:), v17, v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  uint64_t v9 = (void *)*v1;
  v9[2] = *v1;
  v9[21] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = HKHealthStore.query(quantityType:start:end:);
  }
  else
  {
    id v8 = (void *)v9[16];
    uint64_t v5 = v9[14];
    uint64_t v6 = v9[13];
    id v4 = (void *)v9[12];
    uint64_t v7 = (void *)v9[9];
    swift_task_dealloc();

    outlined destroy of Date?(v5);
    outlined destroy of Date?(v6);

    swift_bridgeObjectRelease();
    id v2 = HKHealthStore.query(quantityType:start:end:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  Swift::String v1 = *(void **)(v0 + 128);
  *(void *)(v0 + 16) = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v2();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  Swift::String v1 = *(void **)(v0 + 96);
  *(void *)(v0 + 16) = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v2();
}

{
  void *v0;
  uint64_t (*v1)(void);
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;

  uint64_t v7 = (id)v0[16];
  id v4 = v0[14];
  uint64_t v5 = v0[13];
  id v3 = (id)v0[12];
  uint64_t v6 = (id)v0[9];
  v0[2] = v0;
  swift_task_dealloc();

  outlined destroy of Date?(v4);
  outlined destroy of Date?(v5);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v1 = *(uint64_t (**)(void))(v0[2] + 8);
  return v1();
}

uint64_t closure #1 in HKHealthStore.query(quantityType:start:end:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v82 = a1;
  id v114 = a2;
  uint64_t v65 = a3;
  uint64_t v66 = a4;
  id v109 = a5;
  v102 = a6;
  uint64_t v73 = 0;
  v107 = partial apply for closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:);
  v124 = 0;
  uint64_t v123 = 0;
  v122 = 0;
  uint64_t v121 = 0;
  v120 = 0;
  uint64_t v119 = 0;
  uint64_t v118 = 0;
  id v117 = 0;
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<Double>?, Error>);
  uint64_t v93 = *(void *)(v97 - 8);
  uint64_t v94 = v97 - 8;
  uint64_t v89 = v93;
  uint64_t v90 = *(void *)(v93 + 64);
  unint64_t v64 = (v90 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v97);
  uint64_t v96 = (char *)&v63 - v64;
  id v83 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
  uint64_t v67 = *((void *)v83 - 1);
  uint64_t v91 = v67;
  uint64_t v92 = *(void *)(v67 + 64);
  unint64_t v68 = (v92 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v83);
  uint64_t v101 = (char *)&v63 - v68;
  unint64_t v69 = (v92 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  v111 = (char *)&v63 - v69;
  unint64_t v70 = (v92 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  v113 = (char *)&v63 - v70;
  unint64_t v71 = (v92 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v9);
  v116 = (char *)&v63 - v71;
  v124 = (char *)&v63 - v71;
  uint64_t v123 = v82;
  v122 = a2;
  uint64_t v121 = v10;
  v120 = v11;
  uint64_t v119 = v12;
  uint64_t v118 = v13;
  uint64_t v72 = v14[12];
  uint64_t v74 = v14[16];
  uint64_t v75 = v14[20];
  id v85 = (id)HKHealthStore.queryParameters(start:end:)((char *)&v63 - v71, v10, v11);
  uint64_t v86 = v15;
  uint64_t v105 = v16;
  id v17 = v85;
  id v18 = v85;
  id v19 = v85;
  *(void *)&v116[v72] = v85;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = v75;
  uint64_t v21 = v105;
  Swift::Double v22 = v116;
  *(void *)&v116[v74] = v86;
  *(void *)&v22[v20] = v21;
  type metadata accessor for HKSampleQuery();
  id v23 = v109;
  uint64_t v76 = v83[12];
  uint64_t v77 = v83[16];
  uint64_t v78 = v83[20];
  outlined init with copy of DateInterval?(v116, v113);
  uint64_t v24 = v77;
  uint64_t v25 = v78;
  id v26 = v83;
  uint64_t v27 = v86;
  uint64_t v28 = v105;
  char v29 = v111;
  Class v30 = v113;
  uint64_t v31 = v116;
  *(void *)&v113[v76] = v85;
  *(void *)&v30[v24] = v27;
  *(void *)&v30[v25] = v28;
  uint64_t v104 = *(void **)&v30[v26[12]];
  uint64_t v112 = *(void *)&v30[v26[16]];
  uint64_t v79 = v26[12];
  uint64_t v80 = v26[16];
  uint64_t v81 = v26[20];
  outlined init with copy of DateInterval?(v31, v29);
  uint64_t v32 = v80;
  uint64_t v33 = v81;
  uint64_t v34 = v82;
  uint64_t v35 = v83;
  uint64_t v36 = v86;
  uint64_t v37 = v93;
  uint64_t v38 = v97;
  uint64_t v39 = v105;
  uint64_t v40 = (uint64_t)v111;
  uint64_t v41 = v96;
  *(void *)&v111[v79] = v85;
  *(void *)(v40 + v32) = v36;
  *(void *)(v40 + v33) = v39;
  id v110 = *(id *)(v40 + v35[12]);
  uint64_t v106 = *(void *)(v40 + v35[16]);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v41, v34, v38);
  id v42 = v109;
  id v43 = v114;
  uint64_t v84 = v83[12];
  uint64_t v87 = v83[16];
  uint64_t v88 = v83[20];
  outlined init with copy of DateInterval?(v116, v101);
  uint64_t v44 = v86;
  uint64_t v45 = v87;
  uint64_t v46 = v88;
  uint64_t v47 = v101;
  uint64_t v48 = v105;
  id v49 = v102;
  *(void *)&v101[v84] = v85;
  *(void *)&v47[v45] = v44;
  *(void *)&v47[v46] = v48;
  id v50 = v49;
  unint64_t v95 = (*(unsigned __int8 *)(v89 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80);
  unint64_t v98 = (v95 + v90 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v99 = (v98 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v100 = (v99 + 8 + *(unsigned __int8 *)(v91 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
  unint64_t v103 = (v100 + v92 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v108 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v93 + 32))(v108 + v95, v96, v97);
  unint64_t v51 = v99;
  unint64_t v52 = v100;
  uint64_t v53 = v108;
  id v54 = v114;
  uint64_t v55 = v101;
  *(void *)(v108 + v98) = v109;
  *(void *)(v53 + v51) = v54;
  outlined init with take of (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int)(v55, (char *)(v53 + v52));
  uint64_t v56 = v104;
  uint64_t v57 = v105;
  uint64_t v58 = v106;
  uint64_t v59 = (uint64_t)v107;
  uint64_t v60 = v108;
  id v61 = v109;
  *(void *)(v108 + v103) = v102;
  id v115 = HKSampleQuery.__allocating_init(sampleType:predicate:limit:sortDescriptors:resultsHandler:)(v61, v56, v57, v58, v59, v60);

  outlined destroy of DateInterval?((uint64_t)v111);
  swift_bridgeObjectRelease();
  outlined destroy of DateInterval?((uint64_t)v113);
  id v117 = v115;
  objc_msgSend(v114, sel_executeQuery_);

  return outlined destroy of (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int)((uint64_t)v116);
}

uint64_t HKHealthStore.queryParameters(start:end:)(void *a1, uint64_t a2, const void *a3)
{
  uint64_t v44 = a1;
  uint64_t v52 = a2;
  uint64_t v53 = a3;
  uint64_t v66 = 0;
  uint64_t v65 = 0;
  uint64_t v64 = 0;
  uint64_t v63 = 0;
  uint64_t v62 = 0;
  id v61 = 0;
  id v60 = 0;
  BOOL v58 = 0;
  uint64_t v45 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DateInterval?, NSPredicate?, [NSSortDescriptor], Int));
  unint64_t v46 = (*(void *)(*((void *)v45 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v45);
  uint64_t v47 = (char *)&v29 - v46;
  unint64_t v48 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  id v49 = (char *)&v29 - v48;
  uint64_t v66 = (char *)&v29 - v48;
  unint64_t v50 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v52);
  unint64_t v51 = (char *)&v29 - v50;
  uint64_t v65 = (char *)&v29 - v50;
  uint64_t v64 = v6;
  uint64_t v63 = v7;
  uint64_t v62 = v3;
  closure #1 in HKHealthStore.queryParameters(start:end:)(v6, v7, (uint64_t)&v29 - v50);
  id v57 = closure #2 in HKHealthStore.queryParameters(start:end:)(v52, v53);
  id v61 = v57;
  unint64_t v54 = type metadata accessor for NSSortDescriptor();
  id v55 = (id)*MEMORY[0x263F09F88];
  id v8 = v55;
  v9.value._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSSortDescriptor.__allocating_init(key:ascending:)(0, v9, 0);
  id v56 = v10;

  id v60 = v56;
  id v59 = v57;
  BOOL v43 = v57 == 0;
  BOOL v42 = v57 == 0;
  BOOL v40 = v42;
  BOOL v58 = v42;
  uint64_t v30 = v45[12];
  uint64_t v33 = v45[16];
  uint64_t v34 = v45[20];
  outlined init with copy of DateInterval?(v51, v49);
  id v11 = v57;
  id v12 = v57;
  *(void *)&v49[v30] = v57;
  uint64_t v32 = _allocateUninitializedArray<A>(_:)();
  uint64_t v31 = v13;
  id v14 = v56;
  uint64_t v15 = v32;
  void *v31 = v56;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v36 = v15;
  swift_bridgeObjectRetain();
  uint64_t v16 = v49;
  uint64_t v17 = v34;
  id v18 = v45;
  id v19 = v47;
  BOOL v20 = v40;
  *(void *)&v49[v33] = v36;
  *(void *)&v16[v17] = v20;
  uint64_t v35 = v18[12];
  uint64_t v37 = v18[16];
  uint64_t v38 = v18[20];
  outlined init with copy of DateInterval?(v16, v19);
  uint64_t v21 = v36;
  uint64_t v22 = v37;
  uint64_t v23 = v38;
  uint64_t v24 = v45;
  uint64_t v25 = v44;
  BOOL v26 = v40;
  uint64_t v27 = v47;
  *(void *)&v47[v35] = v57;
  *(void *)&v27[v22] = v21;
  *(void *)&v27[v23] = v26;
  uint64_t v41 = *(void *)&v27[v24[12]];
  uint64_t v39 = *(void *)&v27[v24[16]];
  outlined init with take of DateInterval?(v27, v25);
  outlined destroy of (DateInterval?, NSPredicate?, [NSSortDescriptor], Int)((uint64_t)v49);

  outlined destroy of DateInterval?((uint64_t)v51);
  return v41;
}

void closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, const void *a7, void *a8)
{
  uint64_t v171 = a1;
  uint64_t v177 = a2;
  v188 = a3;
  uint64_t v172 = a4;
  id v173 = a5;
  uint64_t v174 = a6;
  v175 = a7;
  v176 = a8;
  uint64_t v165 = 0;
  v149 = partial apply for implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  v150 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  v151 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v152 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v153 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v154 = partial apply for closure #1 in osLogInternal(_:log:type:);
  v155 = partial apply for implicit closure #2 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  v156 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v157 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v158 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v159 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v224 = 0;
  uint64_t v223 = 0;
  uint64_t v222 = 0;
  v221 = 0;
  uint64_t v220 = 0;
  uint64_t v219 = 0;
  uint64_t v218 = 0;
  uint64_t v217 = 0;
  uint64_t v216 = 0;
  uint64_t v160 = 0;
  uint64_t v206 = 0;
  v198 = 0;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>?);
  unint64_t v161 = (*(void *)(*(void *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8);
  v162 = (char *)v59 - v161;
  unint64_t v163 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v59 - v161);
  v164 = (char *)v59 - v163;
  uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  uint64_t v167 = *(void *)(v166 - 8);
  uint64_t v168 = v166 - 8;
  unint64_t v169 = (*(void *)(v167 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v165);
  v170 = (char *)v59 - v169;
  v224 = (char *)v59 - v169;
  uint64_t v178 = type metadata accessor for Logger();
  uint64_t v179 = *(void *)(v178 - 8);
  uint64_t v180 = v178 - 8;
  uint64_t v184 = *(void *)(v179 + 64);
  unint64_t v181 = (v184 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = MEMORY[0x270FA5388](v188);
  v182 = (char *)v59 - v181;
  unint64_t v183 = (v184 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  v185 = (char *)v59 - v183;
  unint64_t v186 = (v184 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v12 = (void *)MEMORY[0x270FA5388](v11);
  v187 = (char *)v59 - v186;
  uint64_t v223 = v13;
  uint64_t v222 = v14;
  v221 = v12;
  uint64_t v220 = v15;
  uint64_t v219 = v16;
  uint64_t v218 = v17;
  uint64_t v217 = v18;
  uint64_t v216 = v19;
  id v20 = v12;
  if (v188)
  {
    v148 = v188;
    uint64_t v21 = v187;
    id v129 = v188;
    v198 = v188;
    uint64_t v127 = Logger.wellnessIntents.unsafeMutableAddressor();
    v128 = &v197;
    uint64_t v135 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v21, v127, v178);
    swift_endAccess();
    id v22 = v129;
    uint64_t v136 = 7;
    uint64_t v137 = swift_allocObject();
    *(void *)(v137 + 16) = v129;
    v145 = Logger.logObject.getter();
    int v146 = static os_log_type_t.error.getter();
    v132 = &v195;
    uint64_t v195 = 12;
    unint64_t v130 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v131 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v133 = v196;
    uint64_t v134 = 17;
    uint64_t v139 = swift_allocObject();
    *(unsigned char *)(v139 + 16) = 64;
    uint64_t v140 = swift_allocObject();
    *(unsigned char *)(v140 + 16) = 8;
    uint64_t v23 = swift_allocObject();
    uint64_t v24 = v137;
    uint64_t v138 = v23;
    *(void *)(v23 + 16) = v149;
    *(void *)(v23 + 24) = v24;
    uint64_t v25 = swift_allocObject();
    uint64_t v26 = v138;
    uint64_t v142 = v25;
    *(void *)(v25 + 16) = v150;
    *(void *)(v25 + 24) = v26;
    uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v141 = _allocateUninitializedArray<A>(_:)();
    v143 = v27;
    swift_retain();
    uint64_t v28 = v139;
    uint64_t v29 = v143;
    *v143 = v151;
    v29[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v28;
    swift_retain();
    uint64_t v30 = v140;
    uint64_t v31 = v143;
    v143[2] = v152;
    v31[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v30;
    swift_retain();
    uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v142;
    uint64_t v33 = v143;
    v143[4] = v153;
    v33[5] = v32;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v145, (os_log_type_t)v146))
    {
      uint64_t v34 = v160;
      v120 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v121 = createStorage<A>(capacity:type:)(1);
      uint64_t v122 = createStorage<A>(capacity:type:)(0);
      uint64_t v123 = &v193;
      v193 = v120;
      v124 = &v192;
      uint64_t v192 = v121;
      v125 = &v191;
      uint64_t v191 = v122;
      serialize(_:at:)(2, &v193);
      serialize(_:at:)(1, v123);
      v189 = v151;
      uint64_t v190 = v139;
      closure #1 in osLogInternal(_:log:type:)(&v189, (uint64_t)v123, (uint64_t)v124, (uint64_t)v125);
      uint64_t v126 = v34;
      if (v34)
      {
        __break(1u);
      }
      else
      {
        v189 = v152;
        uint64_t v190 = v140;
        closure #1 in osLogInternal(_:log:type:)(&v189, (uint64_t)&v193, (uint64_t)&v192, (uint64_t)&v191);
        uint64_t v118 = 0;
        v189 = v153;
        uint64_t v190 = v142;
        closure #1 in osLogInternal(_:log:type:)(&v189, (uint64_t)&v193, (uint64_t)&v192, (uint64_t)&v191);
        _os_log_impl(&dword_25DE00000, v145, (os_log_type_t)v146, "Error while querying HealthKit for quantity samples: %@", v120, v133);
        destroyStorage<A>(_:count:)(v121, 1, v119);
        destroyStorage<A>(_:count:)(v122, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v120, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v179 + 8))(v187, v178);
    id v35 = v129;
    id v117 = &v194;
    id v194 = v129;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<Double>?, Error>);
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    if (v177)
    {
      uint64_t v147 = v177;
      uint64_t v114 = v177;
      uint64_t v112 = 0;
      unint64_t v113 = type metadata accessor for HKSample();
      type metadata accessor for HKQuantitySample();
      uint64_t v115 = _arrayConditionalCast<A, B>(_:)();
      swift_bridgeObjectRelease();
      uint64_t v116 = v115;
    }
    else
    {
      uint64_t v116 = 0;
    }
    uint64_t v111 = v116;
    if (v116)
    {
      uint64_t v110 = v111;
      uint64_t v90 = v111;
      uint64_t v206 = v111;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
      HKHealthStore.computeStatistics(queryDateRange:samples:unit:)(v175, v90, v176, v164);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v167 + 48))(v164, 1, v166) != 1)
      {
        outlined init with take of Statistics<Double>(v164, v170);
        __n128 v51 = outlined init with copy of Statistics<Double>(v170, v162);
        (*(void (**)(char *, void, uint64_t, uint64_t, __n128))(v167 + 56))(v162, 0, 1, v166, v51);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<Double>?, Error>);
        CheckedContinuation.resume(returning:)();
        outlined destroy of Statistics<Double>((uint64_t)v170);
        swift_bridgeObjectRelease();
      }
      else
      {
        unint64_t v50 = v182;
        outlined destroy of Statistics<Double>?((uint64_t)v164);
        uint64_t v81 = Logger.wellnessIntents.unsafeMutableAddressor();
        uint64_t v82 = &v205;
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v50, v81, v178);
        swift_endAccess();
        uint64_t v88 = Logger.logObject.getter();
        int v87 = static os_log_type_t.debug.getter();
        id v85 = &v203;
        uint64_t v203 = 2;
        unint64_t v83 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v84 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v86 = v204;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v89 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v88, (os_log_type_t)v87))
        {
          uint64_t v52 = v160;
          unint64_t v71 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v70 = 0;
          uint64_t v72 = createStorage<A>(capacity:type:)(0);
          uint64_t v73 = createStorage<A>(capacity:type:)(v70);
          uint64_t v77 = &v202;
          v202 = v71;
          uint64_t v78 = &v201;
          uint64_t v201 = v72;
          uint64_t v75 = &v200;
          uint64_t v200 = v73;
          unsigned int v74 = 0;
          serialize(_:at:)(0, &v202);
          serialize(_:at:)(v74, v77);
          uint64_t v199 = v89;
          uint64_t v76 = v59;
          MEMORY[0x270FA5388](v59);
          uint64_t v53 = v78;
          unint64_t v54 = &v59[-6];
          uint64_t v79 = &v59[-6];
          v54[2] = v77;
          v54[3] = v53;
          v54[4] = v55;
          uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v52)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_25DE00000, v88, (os_log_type_t)v87, "Empty array of quantity samples.", v71, v86);
            uint64_t v68 = 0;
            destroyStorage<A>(_:count:)(v72, 0, v69);
            destroyStorage<A>(_:count:)(v73, v68, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611C8D90](v71, MEMORY[0x263F8E778]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        (*(void (**)(char *, uint64_t))(v179 + 8))(v182, v178);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v167 + 56))(v162, 1, 1, v166);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<Double>?, Error>);
        CheckedContinuation.resume(returning:)();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      uint64_t v36 = v185;
      uint64_t v91 = Logger.wellnessIntents.unsafeMutableAddressor();
      uint64_t v92 = &v215;
      uint64_t v98 = 32;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v36, v91, v178);
      swift_endAccess();
      id v37 = v173;
      uint64_t v99 = 7;
      uint64_t v100 = swift_allocObject();
      *(void *)(v100 + 16) = v173;
      uint64_t v108 = Logger.logObject.getter();
      int v109 = static os_log_type_t.error.getter();
      unint64_t v95 = &v213;
      uint64_t v213 = 12;
      unint64_t v93 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v94 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v96 = v214;
      uint64_t v97 = 17;
      uint64_t v102 = swift_allocObject();
      *(unsigned char *)(v102 + 16) = 32;
      uint64_t v103 = swift_allocObject();
      *(unsigned char *)(v103 + 16) = 8;
      uint64_t v38 = swift_allocObject();
      uint64_t v39 = v100;
      uint64_t v101 = v38;
      *(void *)(v38 + 16) = v155;
      *(void *)(v38 + 24) = v39;
      uint64_t v40 = swift_allocObject();
      uint64_t v41 = v101;
      uint64_t v105 = v40;
      *(void *)(v40 + 16) = v156;
      *(void *)(v40 + 24) = v41;
      uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v104 = _allocateUninitializedArray<A>(_:)();
      uint64_t v106 = v42;
      swift_retain();
      uint64_t v43 = v102;
      uint64_t v44 = v106;
      *uint64_t v106 = v157;
      v44[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v43;
      swift_retain();
      uint64_t v45 = v103;
      unint64_t v46 = v106;
      v106[2] = v158;
      v46[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v45;
      swift_retain();
      uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v105;
      unint64_t v48 = v106;
      v106[4] = v159;
      v48[5] = v47;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v108, (os_log_type_t)v109))
      {
        uint64_t v56 = v160;
        id v61 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v62 = createStorage<A>(capacity:type:)(0);
        uint64_t v63 = createStorage<A>(capacity:type:)(1);
        uint64_t v64 = &v211;
        v211 = v61;
        uint64_t v65 = &v210;
        uint64_t v210 = v62;
        uint64_t v66 = &v209;
        uint64_t v209 = v63;
        serialize(_:at:)(2, &v211);
        serialize(_:at:)(1, v64);
        v207 = v157;
        uint64_t v208 = v102;
        closure #1 in osLogInternal(_:log:type:)(&v207, (uint64_t)v64, (uint64_t)v65, (uint64_t)v66);
        uint64_t v67 = v56;
        if (v56)
        {
          __break(1u);
        }
        else
        {
          v207 = v158;
          uint64_t v208 = v103;
          closure #1 in osLogInternal(_:log:type:)(&v207, (uint64_t)&v211, (uint64_t)&v210, (uint64_t)&v209);
          v59[2] = 0;
          v207 = v159;
          uint64_t v208 = v105;
          closure #1 in osLogInternal(_:log:type:)(&v207, (uint64_t)&v211, (uint64_t)&v210, (uint64_t)&v209);
          _os_log_impl(&dword_25DE00000, v108, (os_log_type_t)v109, "%s samples could not be converted to [HKQuantitySample]. Programmer Error.", v61, v96);
          destroyStorage<A>(_:count:)(v62, 0, v60);
          destroyStorage<A>(_:count:)(v63, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](v61, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v179 + 8))(v185, v178);
      lazy protocol witness table accessor for type HKHealthStore.Error and conformance HKHealthStore.Error();
      uint64_t v57 = swift_allocError();
      *BOOL v58 = 0;
      v59[1] = &v212;
      uint64_t v212 = v57;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<Double>?, Error>);
      CheckedContinuation.resume(throwing:)();
    }
  }
}

uint64_t implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:)(void *a1)
{
  id v1 = a1;
  uint64_t v4 = _convertErrorToNSError(_:)();

  return v4;
}

uint64_t implicit closure #2 in closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:)(void *a1)
{
  id v1 = a1;
  id v4 = objc_msgSend(a1, sel_identifier);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t HKHealthStore.computeStatistics(queryDateRange:samples:unit:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v89 = a4;
  unint64_t v113 = a1;
  uint64_t v112 = a2;
  id v111 = a3;
  uint64_t v106 = 0;
  uint64_t v123 = closure #1 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:);
  uint64_t v90 = closure #2 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:);
  uint64_t v91 = partial apply for closure #3 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:);
  uint64_t v92 = implicit closure #4 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:);
  unint64_t v93 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v184 = 0;
  unint64_t v183 = 0;
  uint64_t v182 = 0;
  uint64_t v181 = 0;
  uint64_t v180 = 0;
  uint64_t v179 = 0;
  uint64_t v121 = 0;
  uint64_t v177 = 0;
  uint64_t v175 = 0;
  uint64_t v165 = 0;
  v162 = 0;
  uint64_t v161 = 0;
  uint64_t v159 = 0;
  uint64_t v153 = 0;
  uint64_t v139 = 0;
  uint64_t v140 = 0;
  double v135 = 0.0;
  double v134 = 0.0;
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  uint64_t v94 = type metadata accessor for Logger();
  uint64_t v95 = *(void *)(v94 - 8);
  uint64_t v96 = v94 - 8;
  unint64_t v97 = (*(void *)(v95 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v94);
  uint64_t v98 = (char *)&v36 - v97;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  unint64_t v99 = (*(void *)(*(void *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v100 = (char *)&v36 - v99;
  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  uint64_t v102 = *(void *)(v101 - 8);
  uint64_t v103 = v101 - 8;
  unint64_t v104 = (*(void *)(v102 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v106);
  uint64_t v105 = (char *)&v36 - v104;
  uint64_t v184 = (char *)&v36 - v104;
  unint64_t v107 = (*(void *)(*(void *)(type metadata accessor for Date() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v106);
  uint64_t v108 = (char *)&v36 - v107;
  unint64_t v109 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v6);
  uint64_t v110 = (char *)&v36 - v109;
  uint64_t v114 = type metadata accessor for DateInterval();
  uint64_t v115 = *(void *)(v114 - 8);
  uint64_t v116 = v114 - 8;
  unint64_t v117 = (*(void *)(v115 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v113);
  uint64_t v118 = (uint64_t)&v36 - v117;
  unint64_t v119 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  v120 = (char *)&v36 - v119;
  unint64_t v183 = (char *)&v36 - v119;
  uint64_t v182 = v10;
  uint64_t v181 = v11;
  uint64_t v180 = v12;
  uint64_t v179 = v4;
  uint64_t v178 = v11;
  uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKQuantitySample]);
  unint64_t v124 = lazy protocol witness table accessor for type [HKQuantitySample] and conformance [A]();
  uint64_t v13 = Sequence.sorted(by:)();
  uint64_t v125 = 0;
  uint64_t v126 = v13;
  uint64_t v86 = v13;
  uint64_t v177 = v13;
  uint64_t v176 = v112;
  uint64_t v14 = Sequence.sorted(by:)();
  uint64_t v87 = 0;
  uint64_t v88 = v14;
  uint64_t v82 = v14;
  uint64_t v175 = v14;
  swift_bridgeObjectRetain();
  unint64_t v84 = &v173;
  uint64_t v173 = v86;
  unint64_t v83 = lazy protocol witness table accessor for type [HKQuantitySample] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [HKQuantityType]();
  id v85 = v174;
  if (!v174)
  {
LABEL_19:
    uint64_t v30 = v98;
    uint64_t v49 = Logger.wellnessIntents.unsafeMutableAddressor();
    unint64_t v50 = &v172;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v30, v49, v94);
    swift_endAccess();
    uint64_t v56 = Logger.logObject.getter();
    int v55 = static os_log_type_t.debug.getter();
    uint64_t v53 = &v170;
    uint64_t v170 = 2;
    unint64_t v51 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v52 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v54 = v171;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v57 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v56, (os_log_type_t)v55))
    {
      uint64_t v31 = v87;
      uint64_t v39 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v38 = 0;
      uint64_t v40 = createStorage<A>(capacity:type:)(0);
      uint64_t v41 = createStorage<A>(capacity:type:)(v38);
      uint64_t v45 = &v169;
      unint64_t v169 = v39;
      unint64_t v46 = &v168;
      uint64_t v168 = v40;
      uint64_t v43 = &v167;
      uint64_t v167 = v41;
      unsigned int v42 = 0;
      serialize(_:at:)(0, &v169);
      serialize(_:at:)(v42, v45);
      uint64_t v166 = v57;
      uint64_t v44 = &v36;
      MEMORY[0x270FA5388](&v36);
      uint64_t v32 = v46;
      uint64_t v33 = &v36 - 6;
      uint64_t v47 = &v36 - 6;
      v33[2] = (uint64_t)v45;
      v33[3] = (uint64_t)v32;
      v33[4] = v34;
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v31)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_25DE00000, v56, (os_log_type_t)v55, "Empty array of quantity samples.", v39, v54);
        uint64_t v36 = 0;
        destroyStorage<A>(_:count:)(v40, 0, v37);
        destroyStorage<A>(_:count:)(v41, v36, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v39, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v95 + 8))(v98, v94);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v102 + 56))(v89, 1, 1, v101);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v81 = v85;
  id v78 = v85;
  uint64_t v165 = v85;
  swift_bridgeObjectRetain();
  uint64_t v79 = &v163;
  uint64_t v163 = v82;
  lazy protocol witness table accessor for type [HKQuantitySample] and conformance [A]();
  BidirectionalCollection.last.getter();
  outlined destroy of [HKQuantityType]();
  uint64_t v80 = v164;
  if (!v164)
  {

    goto LABEL_19;
  }
  uint64_t v77 = v80;
  uint64_t v15 = v87;
  id v70 = v80;
  v162 = v80;
  id v16 = v78;
  id v72 = objc_msgSend(v78, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v17 = v70;
  id v71 = objc_msgSend(v70, sel_endDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  DateInterval.init(start:end:)();
  unint64_t v18 = type metadata accessor for HKQuantitySample();
  uint64_t v73 = MEMORY[0x2611C8A30](v112, v18);
  uint64_t v161 = v73;
  uint64_t v160 = v112;
  id v19 = v111;
  unsigned int v74 = &v36;
  id v20 = (void (*)(char *, char *))MEMORY[0x270FA5388](v91);
  v35[2] = v21;
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v20, (uint64_t)v35, v22, MEMORY[0x263F8D538], MEMORY[0x263F8E628], v23, MEMORY[0x263F8E658], v24);
  uint64_t v75 = v15;
  uint64_t v76 = result;
  if (v15)
  {
    __break(1u);
  }
  else
  {
    uint64_t v67 = v76;

    uint64_t v159 = v67;
    swift_bridgeObjectRetain();
    uint64_t v69 = v156;
    v156[0] = v67;
    uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
    lazy protocol witness table accessor for type [Double] and conformance [A]();
    BidirectionalCollection.last.getter();
    outlined destroy of [HKQuantityType]();
    uint64_t v154 = v156[1];
    char v155 = v157 & 1;
    if (v157) {
      uint64_t v158 = 0;
    }
    else {
      uint64_t v158 = v154;
    }
    uint64_t v65 = v158;
    uint64_t v153 = v158;
    uint64_t v149 = v67;
    unint64_t v66 = lazy protocol witness table accessor for type [Double] and conformance [A]();
    Sequence<>.min()();
    uint64_t v147 = v150;
    char v148 = v151 & 1;
    if (v151) {
      uint64_t v152 = 0;
    }
    else {
      uint64_t v152 = v147;
    }
    uint64_t v64 = v152;
    uint64_t v143 = v67;
    Sequence<>.max()();
    uint64_t v141 = v144;
    char v142 = v145 & 1;
    if (v145) {
      uint64_t v146 = 0;
    }
    else {
      uint64_t v146 = v141;
    }
    uint64_t v26 = v75;
    uint64_t v63 = v146;
    uint64_t v139 = v64;
    uint64_t v140 = v146;
    uint64_t v137 = v67;
    uint64_t v136 = 0;
    uint64_t result = Sequence.reduce<A>(_:_:)();
    if (!v26)
    {
      double v60 = v138;
      double v135 = v138;
      uint64_t v27 = MEMORY[0x2611C8A50](v67);
      double v59 = v60 / (double)v27;
      double v134 = v59;
      id v58 = objc_msgSend(v111, sel_unitString);
      uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v62 = v28;
      uint64_t v132 = v61;
      uint64_t v133 = v28;

      outlined init with copy of DateInterval?(v113, v100);
      (*(void (**)(uint64_t, char *, uint64_t))(v115 + 16))(v118, v120, v114);
      uint64_t v131 = v64;
      uint64_t v130 = v63;
      uint64_t v129 = v65;
      double v128 = v59;
      double v127 = v60;
      Statistics.init(queryDateRange:dataDateRange:sampleCount:unit:valueRange:latestValue:averageValue:totalValue:)(v100, v118, v73, v61, v62, (uint64_t)&v131, (uint64_t)&v130, (uint64_t)&v129, v105, (uint64_t)&v128, (uint64_t)&v127, MEMORY[0x263F8D538]);
      __n128 v29 = outlined init with copy of Statistics<Double>(v105, v89);
      (*(void (**)(char *, void, uint64_t, uint64_t, __n128))(v102 + 56))(v89, 0, 1, v101, v29);
      outlined destroy of Statistics<Double>((uint64_t)v105);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v115 + 8))(v120, v114);

      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

id HKSampleQuery.__allocating_init(sampleType:predicate:limit:sortDescriptors:resultsHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKSampleQuery.init(sampleType:predicate:limit:sortDescriptors:resultsHandler:)(a1, a2, a3, a4, a5, a6);
}

uint64_t HKHealthStore.query<A>(categoryType:start:end:enumerationType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[14] = v7;
  v8[13] = a7;
  v8[12] = a6;
  v8[11] = a4;
  v8[10] = a3;
  v8[9] = a2;
  v8[8] = a1;
  v8[2] = v8;
  void v8[3] = 0;
  v8[4] = 0;
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v8[15] = swift_task_alloc();
  v8[16] = swift_task_alloc();
  void v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  v8[6] = a5;
  v8[7] = v7;
  return MEMORY[0x270FA2498](HKHealthStore.query<A>(categoryType:start:end:enumerationType:), 0);
}

uint64_t HKHealthStore.query<A>(categoryType:start:end:enumerationType:)()
{
  uint64_t v12 = (void *)v0[16];
  uint64_t v13 = (void *)v0[15];
  id v11 = (id)v0[14];
  uint64_t v10 = v0[13];
  uint64_t v15 = v0[12];
  uint64_t v9 = (const void *)v0[11];
  uint64_t v8 = (const void *)v0[10];
  id v14 = (id)v0[9];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("query(categoryType:start:end:enumerationType:)", 0x2EuLL, 1);
  v0[17] = v1._object;
  id v2 = v11;
  outlined init with copy of Date?(v8, v12);
  outlined init with copy of Date?(v9, v13);
  id v3 = v14;
  id v17 = (void *)swift_task_alloc();
  v0[18] = v17;
  v17[2] = v15;
  v17[3] = v10;
  v17[4] = v11;
  v17[5] = v12;
  v17[6] = v13;
  v17[7] = v14;
  uint64_t v4 = (void *)swift_task_alloc();
  v16[19] = v4;
  type metadata accessor for Date();
  swift_getTupleTypeMetadata2();
  uint64_t v5 = type metadata accessor for Optional();
  *uint64_t v4 = v16[2];
  v4[1] = HKHealthStore.query<A>(categoryType:start:end:enumerationType:);
  uint64_t v6 = v16[8];
  return MEMORY[0x270FA2360](v6, 0, 0, v1._countAndFlagsBits, v1._object, partial apply for closure #1 in HKHealthStore.query<A>(categoryType:start:end:enumerationType:), v17, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)(void);
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  uint64_t v8 = (void *)*v1;
  v8[2] = *v1;
  v8[20] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return MEMORY[0x270FA2498](HKHealthStore.query<A>(categoryType:start:end:enumerationType:), 0);
  }
  else
  {
    uint64_t v6 = v8[16];
    uint64_t v7 = v8[15];
    uint64_t v4 = (void *)v8[14];
    uint64_t v5 = (void *)v8[9];
    swift_task_dealloc();

    outlined destroy of Date?(v6);
    outlined destroy of Date?(v7);

    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    id v2 = *(uint64_t (**)(void))(v8[2] + 8);
    return v2();
  }
}

{
  void *v0;
  uint64_t (*v1)(void);
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v5 = v0[16];
  uint64_t v6 = v0[15];
  id v3 = (id)v0[14];
  uint64_t v4 = (id)v0[9];
  v0[2] = v0;
  swift_task_dealloc();

  outlined destroy of Date?(v5);
  outlined destroy of Date?(v6);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v1 = *(uint64_t (**)(void))(v0[2] + 8);
  return v1();
}

uint64_t closure #1 in HKHealthStore.query<A>(categoryType:start:end:enumerationType:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v76 = a1;
  id v97 = a2;
  uint64_t v57 = a3;
  uint64_t v58 = a4;
  id v92 = a5;
  uint64_t v79 = a6;
  uint64_t v80 = a7;
  uint64_t v64 = 0;
  uint64_t v90 = partial apply for closure #1 in closure #1 in HKHealthStore.query<A>(categoryType:start:end:enumerationType:);
  uint64_t v106 = 0;
  uint64_t v105 = 0;
  unint64_t v104 = 0;
  uint64_t v103 = 0;
  uint64_t v102 = 0;
  uint64_t v101 = 0;
  id v100 = 0;
  uint64_t v107 = a6;
  uint64_t v54 = 255;
  type metadata accessor for Date();
  swift_getTupleTypeMetadata2();
  uint64_t v55 = type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v85 = type metadata accessor for CheckedContinuation();
  uint64_t v81 = *(void *)(v85 - 8);
  uint64_t v82 = v85 - 8;
  uint64_t v77 = v81;
  uint64_t v78 = *(void *)(v81 + 64);
  unint64_t v56 = (v78 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v85);
  unint64_t v84 = (char *)&v54 - v56;
  uint64_t v75 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
  uint64_t v61 = *(void *)(*((void *)v75 - 1) + 64);
  unint64_t v59 = (v61 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v75);
  uint64_t v94 = (char *)&v54 - v59;
  unint64_t v60 = (v61 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8);
  uint64_t v96 = (char *)&v54 - v60;
  unint64_t v62 = (v61 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v9);
  unint64_t v99 = (char *)&v54 - v62;
  uint64_t v106 = (char *)&v54 - v62;
  uint64_t v105 = v76;
  unint64_t v104 = a2;
  uint64_t v103 = v10;
  uint64_t v102 = v11;
  uint64_t v101 = v12;
  uint64_t v63 = v13[12];
  uint64_t v65 = v13[16];
  uint64_t v66 = v13[20];
  id v71 = (id)HKHealthStore.queryParameters(start:end:)((char *)&v54 - v62, v10, v11);
  uint64_t v72 = v14;
  uint64_t v88 = v15;
  id v16 = v71;
  id v17 = v71;
  *(void *)&v99[v63] = v71;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = v66;
  uint64_t v19 = v88;
  id v20 = v99;
  *(void *)&v99[v65] = v72;
  *(void *)&v20[v18] = v19;
  type metadata accessor for HKSampleQuery();
  id v21 = v92;
  uint64_t v67 = v75[12];
  uint64_t v68 = v75[16];
  uint64_t v69 = v75[20];
  outlined init with copy of DateInterval?(v99, v96);
  uint64_t v22 = v68;
  uint64_t v23 = v69;
  uint64_t v24 = v72;
  uint64_t v25 = v75;
  uint64_t v26 = v88;
  uint64_t v27 = v94;
  uint64_t v28 = v96;
  __n128 v29 = v99;
  *(void *)&v96[v67] = v71;
  *(void *)&v28[v22] = v24;
  *(void *)&v28[v23] = v26;
  uint64_t v87 = *(void **)&v28[v25[12]];
  uint64_t v95 = *(void *)&v28[v25[16]];
  uint64_t v70 = v25[12];
  uint64_t v73 = v25[16];
  uint64_t v74 = v25[20];
  outlined init with copy of DateInterval?(v29, v27);
  uint64_t v30 = v72;
  uint64_t v31 = v73;
  uint64_t v32 = v74;
  uint64_t v33 = v75;
  uint64_t v34 = v76;
  uint64_t v35 = v81;
  uint64_t v36 = v85;
  uint64_t v37 = v88;
  uint64_t v38 = (uint64_t)v94;
  uint64_t v39 = v84;
  *(void *)&v94[v70] = v71;
  *(void *)(v38 + v31) = v30;
  *(void *)(v38 + v32) = v37;
  id v93 = *(id *)(v38 + v33[12]);
  uint64_t v89 = *(void *)(v38 + v33[16]);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v39, v34, v36);
  id v40 = v92;
  unint64_t v83 = (*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
  unint64_t v86 = (v83 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v41 = swift_allocObject();
  uint64_t v42 = v80;
  uint64_t v43 = v81;
  unint64_t v44 = v83;
  uint64_t v45 = v84;
  uint64_t v46 = v85;
  uint64_t v91 = v41;
  *(void *)(v41 + 16) = v79;
  *(void *)(v41 + 24) = v42;
  (*(void (**)(unint64_t, char *, uint64_t))(v43 + 32))(v41 + v44, v45, v46);
  uint64_t v47 = v87;
  uint64_t v48 = v88;
  uint64_t v49 = v89;
  uint64_t v50 = (uint64_t)v90;
  uint64_t v51 = v91;
  id v52 = v92;
  *(void *)(v91 + v86) = v92;
  id v98 = HKSampleQuery.__allocating_init(sampleType:predicate:limit:sortDescriptors:resultsHandler:)(v52, v47, v48, v49, v50, v51);

  outlined destroy of DateInterval?((uint64_t)v94);
  swift_bridgeObjectRelease();
  outlined destroy of DateInterval?((uint64_t)v96);
  id v100 = v98;
  objc_msgSend(v97, sel_executeQuery_, v54, v55);

  return outlined destroy of (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int)((uint64_t)v99);
}

void closure #1 in closure #1 in HKHealthStore.query<A>(categoryType:start:end:enumerationType:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v122 = a1;
  uint64_t v125 = a2;
  id v131 = a3;
  uint64_t v123 = a4;
  id v124 = a5;
  uint64_t v113 = a6;
  uint64_t v91 = a7;
  uint64_t v114 = 0;
  id v92 = partial apply for implicit closure #2 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  id v93 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v95 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v96 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  char v151 = 0;
  uint64_t v150 = 0;
  uint64_t v149 = 0;
  uint64_t v148 = 0;
  uint64_t v147 = 0;
  uint64_t v146 = 0;
  uint64_t v145 = 0;
  uint64_t v98 = 0;
  uint64_t v97 = 0;
  id v136 = 0;
  id v133 = 0;
  uint64_t v152 = a6;
  uint64_t v99 = 255;
  uint64_t v102 = type metadata accessor for Date();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v100 = type metadata accessor for Optional();
  unint64_t v101 = (*(void *)(*(void *)(v100 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v103 = (char *)v37 - v101;
  uint64_t v104 = *(void *)(v102 - 8);
  uint64_t v105 = v102 - 8;
  unint64_t v106 = (*(void *)(v104 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  uint64_t v108 = (char *)v37 - v106;
  uint64_t v109 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v110 = TupleTypeMetadata2 - 8;
  unint64_t v111 = (*(void *)(v109 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8);
  uint64_t v112 = (uint64_t)v37 - v111;
  char v151 = (char *)v37 - v111;
  uint64_t v115 = type metadata accessor for Optional();
  unint64_t v116 = (*(void *)(*(void *)(v115 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v114);
  uint64_t v117 = (uint64_t)v37 - v116;
  uint64_t v118 = *(void *)(v9 - 8);
  uint64_t v119 = v9 - 8;
  unint64_t v120 = (*(void *)(v118 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v10);
  uint64_t v121 = (char *)v37 - v120;
  uint64_t v150 = (char *)v37 - v120;
  uint64_t v126 = type metadata accessor for Logger();
  uint64_t v127 = *(void *)(v126 - 8);
  uint64_t v128 = v126 - 8;
  unint64_t v129 = (*(void *)(v127 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v131);
  uint64_t v130 = (char *)v37 - v129;
  uint64_t v149 = v11;
  uint64_t v148 = v12;
  uint64_t v147 = v13;
  uint64_t v146 = v14;
  uint64_t v145 = v15;
  id v16 = v13;
  if (v131)
  {
    id v90 = v131;
    id v88 = v131;
    id v133 = v131;
    id v17 = v131;
    uint64_t v87 = &v132;
    id v132 = v88;
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    type metadata accessor for CheckedContinuation();
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    if (v125)
    {
      uint64_t v89 = v125;
      uint64_t v84 = v125;
      swift_bridgeObjectRetain();
      unint64_t v83 = v134;
      v134[0] = v84;
      uint64_t v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSample]);
      lazy protocol witness table accessor for type [HKSample] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      uint64_t v85 = (void *)v134[1];
      swift_bridgeObjectRelease();
      unint64_t v86 = v85;
    }
    else
    {
      unint64_t v86 = 0;
    }
    uint64_t v81 = v86;
    if (v86)
    {
      uint64_t v80 = v81;
      id v77 = v81;
      self;
      uint64_t v18 = swift_dynamicCastObjCClass();
      uint64_t v78 = v18;
      if (v18)
      {
        uint64_t v76 = (void *)v78;
      }
      else
      {
        uint64_t v75 = 0;

        uint64_t v76 = v75;
      }
      uint64_t v79 = v76;
    }
    else
    {
      uint64_t v79 = 0;
    }
    id v74 = v79;
    if (v79)
    {
      id v73 = v74;
      id v53 = v74;
      id v136 = v74;
      v135[1] = objc_msgSend(v74, sel_value);
      dispatch thunk of RawRepresentable.init(rawValue:)();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48))(v117, 1, v113) != 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v121, v117, v113);
        uint64_t v50 = v112 + *(int *)(TupleTypeMetadata2 + 48);
        uint64_t v46 = v112 + *(int *)(TupleTypeMetadata2 + 48);
        uint64_t v49 = *(void (**)(void))(v118 + 16);
        uint64_t v48 = v118 + 16;
        v49();
        id v35 = v53;
        id v47 = objc_msgSend(v53, sel_startDate);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(uint64_t, char *, uint64_t))(v104 + 32))(v46, v108, v102);

        uint64_t v51 = &v103[*(int *)(TupleTypeMetadata2 + 48)];
        v49();
        (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v51, v50, v102);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v109 + 56))(v103, 0, 1, TupleTypeMetadata2);
        __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
        type metadata accessor for CheckedContinuation();
        CheckedContinuation.resume(returning:)();
        outlined destroy of (value: A, startDate: Date)(v112, v113, TupleTypeMetadata2);
        (*(void (**)(char *, uint64_t))(v118 + 8))(v121, v113);
      }
      else
      {
        outlined destroy of A?(v117, v113);
        lazy protocol witness table accessor for type HKHealthStore.Error and conformance HKHealthStore.Error();
        uint64_t v33 = swift_allocError();
        unsigned char *v34 = 1;
        id v52 = v135;
        v135[0] = v33;
        __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
        type metadata accessor for CheckedContinuation();
        CheckedContinuation.resume(throwing:)();
      }
    }
    else
    {
      uint64_t v19 = v130;
      uint64_t v54 = Logger.wellnessIntents.unsafeMutableAddressor();
      uint64_t v55 = &v144;
      uint64_t v61 = 32;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v19, v54, v126);
      swift_endAccess();
      id v20 = v124;
      uint64_t v62 = 7;
      uint64_t v63 = swift_allocObject();
      *(void *)(v63 + 16) = v124;
      id v71 = Logger.logObject.getter();
      int v72 = static os_log_type_t.debug.getter();
      uint64_t v58 = &v142;
      uint64_t v142 = 12;
      unint64_t v56 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v57 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v59 = v143;
      uint64_t v60 = 17;
      uint64_t v65 = swift_allocObject();
      *(unsigned char *)(v65 + 16) = 32;
      uint64_t v66 = swift_allocObject();
      *(unsigned char *)(v66 + 16) = 8;
      uint64_t v21 = swift_allocObject();
      uint64_t v22 = v63;
      uint64_t v64 = v21;
      *(void *)(v21 + 16) = v92;
      *(void *)(v21 + 24) = v22;
      uint64_t v23 = swift_allocObject();
      uint64_t v24 = v64;
      uint64_t v68 = v23;
      *(void *)(v23 + 16) = v93;
      *(void *)(v23 + 24) = v24;
      uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v67 = _allocateUninitializedArray<A>(_:)();
      uint64_t v69 = v25;
      swift_retain();
      uint64_t v26 = v65;
      uint64_t v27 = v69;
      *uint64_t v69 = v94;
      v27[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v26;
      swift_retain();
      uint64_t v28 = v66;
      __n128 v29 = v69;
      v69[2] = v95;
      v29[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v28;
      swift_retain();
      uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v68;
      uint64_t v31 = v69;
      v69[4] = v96;
      v31[5] = v30;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v71, (os_log_type_t)v72))
      {
        uint64_t v36 = v97;
        uint64_t v39 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v40 = createStorage<A>(capacity:type:)(0);
        uint64_t v41 = createStorage<A>(capacity:type:)(1);
        uint64_t v42 = &v141;
        uint64_t v141 = v39;
        uint64_t v43 = &v140;
        uint64_t v140 = v40;
        unint64_t v44 = &v139;
        uint64_t v139 = v41;
        serialize(_:at:)(2, &v141);
        serialize(_:at:)(1, v42);
        uint64_t v137 = v94;
        uint64_t v138 = v65;
        closure #1 in osLogInternal(_:log:type:)(&v137, (uint64_t)v42, (uint64_t)v43, (uint64_t)v44);
        uint64_t v45 = v36;
        if (v36)
        {
          __break(1u);
        }
        else
        {
          uint64_t v137 = v95;
          uint64_t v138 = v66;
          closure #1 in osLogInternal(_:log:type:)(&v137, (uint64_t)&v141, (uint64_t)&v140, (uint64_t)&v139);
          v37[1] = 0;
          uint64_t v137 = v96;
          uint64_t v138 = v68;
          closure #1 in osLogInternal(_:log:type:)(&v137, (uint64_t)&v141, (uint64_t)&v140, (uint64_t)&v139);
          _os_log_impl(&dword_25DE00000, v71, (os_log_type_t)v72, "No samples found for %s", v39, v59);
          destroyStorage<A>(_:count:)(v40, 0, v38);
          destroyStorage<A>(_:count:)(v41, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](v39, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v127 + 8))(v130, v126);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v109 + 56))(v103, 1, 1, TupleTypeMetadata2);
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
      type metadata accessor for CheckedContinuation();
      CheckedContinuation.resume(returning:)();
    }
  }
}

uint64_t HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[40] = v6;
  v7[39] = a6;
  v7[38] = a5;
  v7[37] = a4;
  v7[36] = a3;
  v7[35] = a2;
  v7[34] = a1;
  v7[18] = v7;
  v7[19] = 0;
  v7[20] = 0;
  v7[21] = 0;
  v7[22] = 0;
  v7[23] = 0;
  v7[24] = 0;
  v7[26] = 0;
  v7[30] = 0;
  v7[33] = 0;
  uint64_t v8 = type metadata accessor for Logger();
  v7[41] = v8;
  v7[42] = *(void *)(v8 - 8);
  v7[43] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v7[44] = swift_task_alloc();
  v7[45] = swift_task_alloc();
  v7[19] = a2;
  v7[20] = a3;
  v7[21] = a4;
  v7[22] = a5;
  v7[23] = a6;
  v7[24] = v6;
  return MEMORY[0x270FA2498](HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:), 0);
}

uint64_t HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)()
{
  uint64_t v9 = *(void **)(v0 + 320);
  id v7 = *(id *)(v0 + 296);
  id v5 = *(id *)(v0 + 288);
  *(void *)(v0 + 144) = v0;
  *(void *)(v0 + 368) = type metadata accessor for HKQuantityType();
  _allocateUninitializedArray<A>(_:)();
  uint64_t v6 = v1;
  id v2 = v5;
  void *v6 = v5;
  id v3 = v7;
  v6[1] = v7;
  _finalizeUninitializedArray<A>(_:)();
  *(void *)(v0 + 376) = lazy protocol witness table accessor for type HKQuantityType and conformance NSObject();
  Set.init(arrayLiteral:)();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 384) = isa;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = *(void *)(v0 + 144);
  *(void *)(v0 + 56) = v0 + 200;
  *(void *)(v0 + 24) = HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  *(void *)(v0 + 112) = swift_continuation_init();
  *(void *)(v0 + 80) = MEMORY[0x263EF8330];
  *(_DWORD *)(v0 + 88) = 0x40000000;
  *(_DWORD *)(v0 + 92) = 0;
  *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSDictionary, @unowned NSError?) -> () with result type [HKQuantityType : HKUnit];
  *(void *)(v0 + 104) = &block_descriptor_181;
  objc_msgSend(v9, sel_preferredUnitsForQuantityTypes_completion_, isa);
  return __swift_continuation_await_point();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  uint64_t v4 = (void *)*v0;
  v4[18] = *v0;
  Swift::String v1 = v4[6];
  v4[49] = v1;
  if (v1)
  {
    id v2 = HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  }
  else
  {
    id v2 = HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  Swift::String v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  unsigned char *v18;
  uint64_t (*v19)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *buf;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  uint32_t size;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  NSObject *oslog;
  os_log_type_t v46;
  const void *v47;
  const void *v48;
  id v49;
  void *v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  void *v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  id v71 = v0;
  Swift::String v1 = *(void **)(v0 + 384);
  uint64_t v62 = *(void *)(v0 + 368);
  uint64_t v61 = *(void **)(v0 + 288);
  *(void *)(v0 + 144) = v0;
  uint64_t v63 = *(void *)(v0 + 200);
  *(void *)(v0 + 400) = v63;
  *(void *)(v0 + 208) = v63;

  id v2 = v61;
  *(void *)(v0 + 224) = v61;
  uint64_t v64 = type metadata accessor for HKUnit();
  MEMORY[0x2611C8800](v0 + 224, v63, v62);

  uint64_t v65 = *(void **)(v0 + 216);
  *(void *)(v0 + 408) = v65;
  if (v65)
  {
    uint64_t v58 = *(void *)(v60 + 376);
    unint64_t v57 = *(void *)(v60 + 368);
    unint64_t v56 = *(void **)(v60 + 296);
    *(void *)(v60 + 240) = v65;
    id v3 = v56;
    *(void *)(v60 + 256) = v56;
    MEMORY[0x2611C8800](v60 + 256, v63, v57, v64, v58);

    uint32_t v59 = *(void **)(v60 + 248);
    *(void *)(v60 + 416) = v59;
    if (v59)
    {
      uint64_t v50 = *(void **)(v60 + 360);
      uint64_t v51 = *(void **)(v60 + 352);
      uint64_t v49 = *(id *)(v60 + 320);
      uint64_t v48 = *(const void **)(v60 + 312);
      id v47 = *(const void **)(v60 + 304);
      uint64_t v54 = *(id *)(v60 + 296);
      id v53 = *(id *)(v60 + 288);
      id v52 = *(id *)(v60 + 280);
      *(void *)(v60 + 264) = v59;
      uint64_t v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("query(correlationType:firstQuantityType:secondQuantityType:start:end:)", 0x46uLL, 1);
      *(void *)(v60 + 424) = v4._object;
      id v5 = v49;
      outlined init with copy of Date?(v47, v50);
      outlined init with copy of Date?(v48, v51);
      uint64_t v6 = v52;
      id v7 = v53;
      uint64_t v8 = v54;
      uint64_t v9 = v65;
      uint64_t v10 = v59;
      uint64_t v55 = (void *)swift_task_alloc();
      *(void *)(v60 + 432) = v55;
      v55[2] = v49;
      v55[3] = v50;
      v55[4] = v51;
      v55[5] = v52;
      v55[6] = v53;
      v55[7] = v54;
      v55[8] = v65;
      v55[9] = v59;
      uint64_t v11 = (void *)swift_task_alloc();
      *(void *)(v60 + 440) = v11;
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<(first: Double, second: Double)>?);
      *uint64_t v11 = *(void *)(v60 + 144);
      v11[1] = HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
      uint64_t v13 = *(void *)(v60 + 272);
      return MEMORY[0x270FA2360](v13, 0, 0, v4._countAndFlagsBits, v4._object, partial apply for closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:), v55, v12);
    }
  }
  uint64_t v14 = *(void *)(v60 + 344);
  uint64_t v30 = *(void *)(v60 + 328);
  uint64_t v32 = *(id *)(v60 + 296);
  uint64_t v31 = *(id *)(v60 + 288);
  uint64_t v28 = *(void *)(v60 + 336);
  __n128 v29 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v14, v29, v30);
  swift_endAccess();
  uint64_t v15 = v31;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = v31;
  id v16 = v32;
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v32;
  oslog = Logger.logObject.getter();
  uint64_t v46 = static os_log_type_t.error.getter();
  *(void *)(v60 + 232) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v60 + 456);
  uint64_t v38 = swift_allocObject();
  *(unsigned char *)(v38 + 16) = 64;
  uint64_t v39 = swift_allocObject();
  *(unsigned char *)(v39 + 16) = 8;
  id v35 = swift_allocObject();
  *(void *)(v35 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v35 + 24) = v34;
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v40 + 24) = v35;
  uint64_t v41 = swift_allocObject();
  *(unsigned char *)(v41 + 16) = 64;
  uint64_t v42 = swift_allocObject();
  *(unsigned char *)(v42 + 16) = 8;
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v37 + 24) = v36;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v43 + 24) = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  unint64_t v44 = v17;
  swift_retain();
  uint64_t *v44 = partial apply for closure #1 in OSLogArguments.append(_:);
  v44[1] = v38;
  swift_retain();
  v44[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v44[3] = v39;
  swift_retain();
  v44[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v44[5] = v40;
  swift_retain();
  v44[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v44[7] = v41;
  swift_retain();
  v44[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v44[9] = v42;
  swift_retain();
  v44[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v44[11] = v43;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v46))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v26 = createStorage<A>(capacity:type:)(2);
    uint64_t v27 = createStorage<A>(capacity:type:)(0);
    uint64_t v66 = buf;
    uint64_t v67 = v26;
    uint64_t v68 = v27;
    serialize(_:at:)(2, &v66);
    serialize(_:at:)(2, &v66);
    uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v70 = v38;
    closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v70 = v39;
    closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v70 = v40;
    closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v70 = v41;
    closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v70 = v42;
    closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v70 = v43;
    closure #1 in osLogInternal(_:log:type:)(&v69, (uint64_t)&v66, (uint64_t)&v67, (uint64_t)&v68);
    _os_log_impl(&dword_25DE00000, oslog, v46, "Failed to get preferred units for %@ or %@", buf, size);
    destroyStorage<A>(_:count:)(v26, 2, v24);
    destroyStorage<A>(_:count:)(v27, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v22 = *(void *)(v60 + 344);
  uint64_t v23 = *(void *)(v60 + 328);
  uint64_t v21 = *(void *)(v60 + 336);

  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
  lazy protocol witness table accessor for type HKHealthStore.Error and conformance HKHealthStore.Error();
  swift_allocError();
  *uint64_t v18 = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = *(uint64_t (**)(void))(*(void *)(v60 + 144) + 8);
  return v19();
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  uint64_t v12 = (void *)*v1;
  v12[18] = *v1;
  v12[56] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  }
  else
  {
    uint64_t v11 = (void *)v12[52];
    uint64_t v10 = (void *)v12[51];
    id v5 = v12[45];
    uint64_t v6 = v12[44];
    uint64_t v4 = (void *)v12[40];
    uint64_t v9 = (void *)v12[37];
    uint64_t v8 = (void *)v12[36];
    id v7 = (void *)v12[35];
    swift_task_dealloc();

    outlined destroy of Date?(v5);
    outlined destroy of Date?(v6);

    swift_bridgeObjectRelease();
    id v2 = HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);
  id v4;
  uint64_t v5;

  Swift::String v1 = (void *)v0[52];
  uint64_t v4 = (id)v0[51];
  v0[18] = v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0[18] + 8);
  return v2();
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  id v3;
  uint64_t v4;

  id v3 = *(id *)(v0 + 384);
  *(void *)(v0 + 144) = v0;
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v1 = *(uint64_t (**)(void))(*(void *)(v0 + 144) + 8);
  return v1();
}

{
  void *v0;
  uint64_t (*v1)(void);
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;

  uint64_t v9 = (id)v0[52];
  uint64_t v10 = (id)v0[51];
  uint64_t v4 = v0[45];
  id v5 = v0[44];
  id v3 = (id)v0[40];
  uint64_t v8 = (id)v0[37];
  id v7 = (id)v0[36];
  uint64_t v6 = (id)v0[35];
  v0[18] = v0;
  swift_task_dealloc();

  outlined destroy of Date?(v4);
  outlined destroy of Date?(v5);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v1 = *(uint64_t (**)(void))(v0[18] + 8);
  return v1();
}

uint64_t closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  uint64_t v96 = a1;
  id v134 = a2;
  uint64_t v80 = a3;
  uint64_t v81 = a4;
  id v129 = a5;
  id v113 = a6;
  id v115 = a7;
  unint64_t v120 = a8;
  id v123 = a9;
  uint64_t v87 = 0;
  uint64_t v127 = partial apply for closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  uint64_t v147 = 0;
  uint64_t v146 = 0;
  uint64_t v145 = 0;
  uint64_t v144 = 0;
  uint32_t v143 = 0;
  uint64_t v142 = 0;
  uint64_t v141 = 0;
  uint64_t v140 = 0;
  uint64_t v139 = 0;
  id v138 = 0;
  id v137 = 0;
  uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<(first: Double, second: Double)>?, Error>);
  uint64_t v107 = *(void *)(v111 - 8);
  uint64_t v108 = v111 - 8;
  uint64_t v103 = v107;
  uint64_t v104 = *(void *)(v107 + 64);
  unint64_t v79 = (v104 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v111);
  uint64_t v110 = (char *)&v78 - v79;
  uint64_t v97 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
  uint64_t v82 = *((void *)v97 - 1);
  uint64_t v105 = v82;
  uint64_t v106 = *(void *)(v82 + 64);
  unint64_t v83 = (v106 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v97);
  uint64_t v119 = (char *)&v78 - v83;
  unint64_t v84 = (v106 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v10);
  id v131 = (char *)&v78 - v84;
  unint64_t v85 = (v106 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v11);
  id v133 = (char *)&v78 - v85;
  MEMORY[0x270FA5388](v12);
  id v136 = (char *)&v78 - v13;
  uint64_t v147 = (char *)&v78 - v13;
  uint64_t v146 = v96;
  uint64_t v145 = a2;
  uint64_t v144 = v14;
  uint32_t v143 = v15;
  uint64_t v142 = v16;
  uint64_t v141 = v17;
  uint64_t v140 = v18;
  uint64_t v139 = v19;
  id v138 = v123;
  uint64_t v86 = v20[12];
  uint64_t v88 = v20[16];
  uint64_t v89 = v20[20];
  id v99 = (id)HKHealthStore.queryParameters(start:end:)((char *)&v78 - v13, v14, v15);
  uint64_t v100 = v21;
  uint64_t v125 = v22;
  id v23 = v99;
  id v24 = v99;
  id v25 = v99;
  *(void *)&v136[v86] = v99;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = v89;
  uint64_t v27 = v125;
  uint64_t v28 = v136;
  *(void *)&v136[v88] = v100;
  *(void *)&v28[v26] = v27;
  type metadata accessor for HKSampleQuery();
  id v29 = v129;
  uint64_t v90 = v97[12];
  uint64_t v91 = v97[16];
  uint64_t v92 = v97[20];
  outlined init with copy of DateInterval?(v136, v133);
  uint64_t v30 = v91;
  uint64_t v31 = v92;
  uint64_t v32 = v97;
  uint64_t v33 = v100;
  uint64_t v34 = v125;
  id v35 = v131;
  uint64_t v36 = v133;
  uint64_t v37 = v136;
  *(void *)&v133[v90] = v99;
  *(void *)&v36[v30] = v33;
  *(void *)&v36[v31] = v34;
  id v124 = *(void **)&v36[v32[12]];
  uint64_t v132 = *(void *)&v36[v32[16]];
  uint64_t v93 = v32[12];
  uint64_t v94 = v32[16];
  uint64_t v95 = v32[20];
  outlined init with copy of DateInterval?(v37, v35);
  uint64_t v38 = v94;
  uint64_t v39 = v95;
  uint64_t v40 = v96;
  uint64_t v41 = v97;
  uint64_t v42 = v100;
  uint64_t v43 = v107;
  uint64_t v44 = v111;
  uint64_t v45 = v125;
  uint64_t v46 = (uint64_t)v131;
  id v47 = v110;
  *(void *)&v131[v93] = v99;
  *(void *)(v46 + v38) = v42;
  *(void *)(v46 + v39) = v45;
  id v130 = *(id *)(v46 + v41[12]);
  uint64_t v126 = *(void *)(v46 + v41[16]);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v47, v40, v44);
  id v48 = v129;
  id v49 = v113;
  id v50 = v115;
  id v51 = v134;
  uint64_t v98 = v97[12];
  uint64_t v101 = v97[16];
  uint64_t v102 = v97[20];
  outlined init with copy of DateInterval?(v136, v119);
  uint64_t v52 = v100;
  uint64_t v53 = v101;
  uint64_t v54 = v102;
  uint64_t v55 = v119;
  uint64_t v56 = v125;
  unint64_t v57 = v120;
  *(void *)&v119[v98] = v99;
  *(void *)&v55[v53] = v52;
  *(void *)&v55[v54] = v56;
  id v58 = v57;
  id v59 = v123;
  unint64_t v109 = (*(unsigned __int8 *)(v103 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
  unint64_t v112 = (v109 + v104 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v114 = (v112 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v116 = (v114 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v117 = (v116 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v118 = (v117 + 8 + *(unsigned __int8 *)(v105 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
  unint64_t v121 = (v118 + v106 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v122 = (v121 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v128 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v107 + 32))(v128 + v109, v110, v111);
  id v60 = v113;
  unint64_t v61 = v114;
  id v62 = v115;
  unint64_t v63 = v116;
  unint64_t v64 = v117;
  unint64_t v65 = v118;
  uint64_t v66 = v128;
  id v67 = v134;
  uint64_t v68 = v119;
  *(void *)(v128 + v112) = v129;
  *(void *)(v66 + v61) = v60;
  *(void *)(v66 + v63) = v62;
  *(void *)(v66 + v64) = v67;
  outlined init with take of (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int)(v68, (char *)(v66 + v65));
  unint64_t v69 = v122;
  id v70 = v123;
  id v71 = v124;
  uint64_t v72 = v125;
  uint64_t v73 = v126;
  uint64_t v74 = (uint64_t)v127;
  uint64_t v75 = v128;
  id v76 = v129;
  *(void *)(v128 + v121) = v120;
  *(void *)(v75 + v69) = v70;
  id v135 = HKSampleQuery.__allocating_init(sampleType:predicate:limit:sortDescriptors:resultsHandler:)(v76, v71, v72, v73, v74, v75);

  outlined destroy of DateInterval?((uint64_t)v131);
  swift_bridgeObjectRelease();
  outlined destroy of DateInterval?((uint64_t)v133);
  id v137 = v135;
  objc_msgSend(v134, sel_executeQuery_);

  return outlined destroy of (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int)((uint64_t)v136);
}

void closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, uint64_t a8, char *a9, void *a10, void *a11)
{
  uint64_t v251 = a1;
  uint64_t v244 = a2;
  v255 = a3;
  uint64_t v238 = a4;
  id v239 = a5;
  id v240 = a6;
  id v241 = a7;
  uint64_t v242 = a8;
  v252 = a9;
  v253 = a10;
  v243 = a11;
  uint64_t v232 = 0;
  uint64_t v192 = partial apply for implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  v193 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  id v194 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint32_t v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v197 = partial apply for closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  v198 = partial apply for implicit closure #3 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  uint64_t v199 = partial apply for implicit closure #3 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  uint64_t v200 = partial apply for implicit closure #2 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  uint64_t v201 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v202 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v203 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint32_t v204 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v306 = 0;
  v305 = 0;
  v304 = 0;
  uint64_t v303 = 0;
  uint64_t v302 = 0;
  v301 = 0;
  uint64_t v300 = 0;
  uint64_t v299 = 0;
  uint64_t v298 = 0;
  uint64_t v297 = 0;
  uint64_t v296 = 0;
  v295 = 0;
  v294 = 0;
  uint64_t v293 = 0;
  uint64_t v205 = 0;
  uint64_t v284 = 0;
  uint64_t v282 = 0;
  uint64_t v278 = 0;
  uint64_t v279 = 0;
  uint64_t v276 = 0;
  uint64_t v277 = 0;
  uint64_t v274 = 0;
  uint64_t v275 = 0;
  uint64_t v272 = 0;
  uint64_t v273 = 0;
  uint64_t v270 = 0;
  uint64_t v271 = 0;
  v264 = 0;
  uint64_t v206 = type metadata accessor for DateInterval();
  uint64_t v207 = *(void *)(v206 - 8);
  uint64_t v208 = v206 - 8;
  unint64_t v209 = (*(void *)(v207 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v206);
  uint64_t v210 = (uint64_t)&v78 - v209;
  v211 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
  unint64_t v212 = (*(void *)(*((void *)v211 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v211);
  uint64_t v213 = (char *)&v78 - v212;
  uint64_t v214 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<(first: Double, second: Double)>);
  uint64_t v215 = *(void *)(v214 - 8);
  uint64_t v216 = v214 - 8;
  unint64_t v217 = (*(void *)(v215 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v214);
  uint64_t v218 = (char *)&v78 - v217;
  v306 = (char *)&v78 - v217;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<(first: Double, second: Double)>?);
  unint64_t v219 = (*(void *)(*(void *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v11);
  uint64_t v220 = (char *)&v78 - v219;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>?);
  unint64_t v221 = (*(void *)(*(void *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v12);
  uint64_t v222 = (char *)&v78 - v221;
  unint64_t v223 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v78 - v221);
  v224 = (char *)&v78 - v223;
  v225 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  uint64_t v226 = *((void *)v225 - 1);
  v227 = v225 - 2;
  unint64_t v228 = (*(void *)(v226 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v225);
  v229 = (char *)&v78 - v228;
  v305 = (char *)&v78 - v228;
  unint64_t v230 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v15);
  v231 = (char *)&v78 - v230;
  v304 = (char *)&v78 - v230;
  uint64_t v233 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<(first: Double, second: Double)>?, Error>);
  uint64_t v234 = *(void *)(v233 - 8);
  uint64_t v235 = v233 - 8;
  unint64_t v236 = (*(void *)(v234 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v232);
  v237 = (char *)&v78 - v236;
  uint64_t v245 = type metadata accessor for Logger();
  uint64_t v246 = *(void *)(v245 - 8);
  uint64_t v247 = v245 - 8;
  uint64_t v249 = *(void *)(v246 + 64);
  unint64_t v248 = (v249 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v255);
  v250 = (char *)&v78 - v248;
  MEMORY[0x270FA5388](v16);
  v254 = (char *)&v78 - v17;
  uint64_t v303 = v251;
  uint64_t v302 = v18;
  v301 = v19;
  uint64_t v300 = v20;
  uint64_t v299 = v21;
  uint64_t v298 = v22;
  uint64_t v297 = v23;
  uint64_t v296 = v24;
  v295 = v252;
  v294 = v253;
  uint64_t v293 = v25;
  id v26 = v19;
  if (v255)
  {
    uint64_t v191 = v255;
    uint64_t v27 = v254;
    id v172 = v255;
    v264 = v255;
    uint64_t v170 = Logger.wellnessIntents.unsafeMutableAddressor();
    uint32_t v171 = &v263;
    uint64_t v178 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v246 + 16))(v27, v170, v245);
    swift_endAccess();
    id v28 = v172;
    uint64_t v179 = 7;
    uint64_t v180 = swift_allocObject();
    *(void *)(v180 + 16) = v172;
    v188 = Logger.logObject.getter();
    int v189 = static os_log_type_t.error.getter();
    uint64_t v175 = &v261;
    uint64_t v261 = 12;
    unint64_t v173 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v174 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v176 = v262;
    uint64_t v177 = 17;
    uint64_t v182 = swift_allocObject();
    *(unsigned char *)(v182 + 16) = 64;
    uint64_t v183 = swift_allocObject();
    *(unsigned char *)(v183 + 16) = 8;
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v180;
    uint64_t v181 = v29;
    *(void *)(v29 + 16) = v192;
    *(void *)(v29 + 24) = v30;
    uint64_t v31 = swift_allocObject();
    uint64_t v32 = v181;
    uint64_t v185 = v31;
    *(void *)(v31 + 16) = v193;
    *(void *)(v31 + 24) = v32;
    uint64_t v187 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v184 = _allocateUninitializedArray<A>(_:)();
    unint64_t v186 = v33;
    swift_retain();
    uint64_t v34 = v182;
    id v35 = v186;
    *unint64_t v186 = v194;
    v35[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v34;
    swift_retain();
    uint64_t v36 = v183;
    uint64_t v37 = v186;
    v186[2] = v195;
    void v37[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v36;
    swift_retain();
    uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v185;
    uint64_t v39 = v186;
    v186[4] = v196;
    v39[5] = v38;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v188, (os_log_type_t)v189))
    {
      uint64_t v40 = v205;
      uint64_t v163 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v162 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v164 = createStorage<A>(capacity:type:)(1);
      uint64_t v165 = createStorage<A>(capacity:type:)(0);
      uint64_t v166 = v260;
      v260[0] = v163;
      uint64_t v167 = &v259;
      uint64_t v259 = v164;
      uint64_t v168 = &v258;
      uint64_t v258 = v165;
      serialize(_:at:)(2, v260);
      serialize(_:at:)(1, v166);
      v256 = v194;
      uint64_t v257 = v182;
      closure #1 in osLogInternal(_:log:type:)(&v256, (uint64_t)v166, (uint64_t)v167, (uint64_t)v168);
      uint64_t v169 = v40;
      if (v40)
      {
        __break(1u);
      }
      else
      {
        v256 = v195;
        uint64_t v257 = v183;
        closure #1 in osLogInternal(_:log:type:)(&v256, (uint64_t)v260, (uint64_t)&v259, (uint64_t)&v258);
        uint64_t v160 = 0;
        v256 = v196;
        uint64_t v257 = v185;
        closure #1 in osLogInternal(_:log:type:)(&v256, (uint64_t)v260, (uint64_t)&v259, (uint64_t)&v258);
        _os_log_impl(&dword_25DE00000, v188, (os_log_type_t)v189, "Error while querying HealthKit for quantity samples: %@", v163, v176);
        destroyStorage<A>(_:count:)(v164, 1, v162);
        destroyStorage<A>(_:count:)(v165, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v163, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v246 + 8))(v254, v245);
    id v41 = v172;
    v260[1] = v172;
    CheckedContinuation.resume(throwing:)();

    return;
  }
  swift_bridgeObjectRetain();
  if (v244)
  {
    uint64_t v190 = v244;
    uint64_t v157 = v244;
    uint64_t v155 = 0;
    unint64_t v156 = type metadata accessor for HKSample();
    type metadata accessor for HKCorrelation();
    uint64_t v158 = _arrayConditionalCast<A, B>(_:)();
    swift_bridgeObjectRelease();
    uint64_t v159 = v158;
  }
  else
  {
    uint64_t v159 = 0;
  }
  uint64_t v154 = v159;
  if (v159)
  {
    uint64_t v153 = v154;
    uint64_t v55 = v205;
    uint64_t v127 = v154;
    uint64_t v284 = v154;
    uint64_t v283 = v154;
    id v56 = v240;
    id v57 = v241;
    (*(void (**)(char *, uint64_t, uint64_t))(v234 + 16))(v237, v238, v233);
    uint64_t v128 = &v78;
    MEMORY[0x270FA5388](&v78);
    uint64_t v58 = (uint64_t)v241;
    id v59 = &v78 - 6;
    id v129 = &v78 - 6;
    v59[2] = (uint64_t)v240;
    void v59[3] = v58;
    v59[4] = v60;
    uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKCorrelation]);
    uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (HKQuantitySample, HKQuantitySample));
    lazy protocol witness table accessor for type [HKCorrelation] and conformance [A]();
    uint64_t v61 = Sequence.compactMap<A>(_:)();
    uint64_t v132 = v55;
    uint64_t v133 = v61;
    if (v55)
    {
      __break(1u);
    }
    else
    {
      uint64_t v62 = v132;
      uint64_t v120 = v133;

      (*(void (**)(char *, uint64_t))(v234 + 8))(v237, v233);
      uint64_t v282 = v120;
      uint64_t v281 = v120;
      uint64_t KeyPath = swift_getKeyPath();
      swift_retain();
      uint64_t v122 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(HKQuantitySample, HKQuantitySample)]);
      unint64_t v123 = type metadata accessor for HKQuantitySample();
      unint64_t v124 = lazy protocol witness table accessor for type [(HKQuantitySample, HKQuantitySample)] and conformance [A]();
      uint64_t v63 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))v198, KeyPath, v122, v123, MEMORY[0x263F8E628], v124, MEMORY[0x263F8E658], v161);
      uint64_t v125 = v62;
      uint64_t v126 = v63;
      if (!v62)
      {
        uint64_t v117 = v126;
        swift_release();
        swift_release();
        HKHealthStore.computeStatistics(queryDateRange:samples:unit:)(v252, v117, v253, v224);
        swift_bridgeObjectRelease();
        unint64_t v118 = *(unsigned int (**)(char *, uint64_t, int *))(v226 + 48);
        uint64_t v119 = v226 + 48;
        if (v118(v224, 1, v225) == 1)
        {
          outlined destroy of Statistics<Double>?((uint64_t)v224);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v215 + 56))(v220, 1, 1, v214);
          CheckedContinuation.resume(returning:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
        uint64_t v64 = v125;
        outlined init with take of Statistics<Double>(v224, v231);
        uint64_t v280 = v120;
        uint64_t v115 = swift_getKeyPath();
        swift_retain();
        uint64_t v116 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))v199, v115, v122, v123, MEMORY[0x263F8E628], v124, MEMORY[0x263F8E658], v161);
        if (!v64)
        {
          uint64_t v114 = v116;
          swift_release();
          swift_release();
          HKHealthStore.computeStatistics(queryDateRange:samples:unit:)(v252, v114, v243, v222);
          swift_bridgeObjectRelease();
          if (v118(v222, 1, v225) == 1)
          {
            outlined destroy of Statistics<Double>?((uint64_t)v222);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v215 + 56))(v220, 1, 1, v214);
            CheckedContinuation.resume(returning:)();
          }
          else
          {
            outlined init with take of Statistics<Double>(v222, v229);
            uint64_t v93 = *(void *)&v231[v225[10]];
            uint64_t v94 = *(void *)&v229[v225[10]];
            uint64_t v278 = v93;
            uint64_t v279 = v94;
            uint64_t v95 = *(void *)&v231[v225[10] + 8];
            uint64_t v96 = *(void *)&v229[v225[10] + 8];
            uint64_t v276 = v95;
            uint64_t v277 = v96;
            uint64_t v97 = *(void *)&v231[v225[11]];
            uint64_t v98 = *(void *)&v229[v225[11]];
            uint64_t v274 = v97;
            uint64_t v275 = v98;
            uint64_t v99 = *(void *)&v231[v225[12]];
            uint64_t v100 = *(void *)&v229[v225[12]];
            uint64_t v272 = v99;
            uint64_t v273 = v100;
            uint64_t v101 = *(void *)&v231[v225[13]];
            uint64_t v102 = *(void *)&v229[v225[13]];
            uint64_t v270 = v101;
            uint64_t v271 = v102;
            uint64_t v87 = &v213[v211[12]];
            uint64_t v89 = &v213[v211[16]];
            uint64_t v92 = v211[20];
            uint64_t v88 = (id *)&v252[v211[12]];
            uint64_t v90 = (uint64_t *)&v252[v211[16]];
            uint64_t v91 = v211[20];
            outlined init with copy of DateInterval?(v252, v213);
            outlined init with copy of NSPredicate?(v88, v87);
            outlined init with copy of [NSSortDescriptor](v90, v89);
            unint64_t v65 = v211;
            uint64_t v66 = v225;
            uint64_t v67 = v207;
            uint64_t v68 = v206;
            unint64_t v69 = v213;
            id v70 = v231;
            uint64_t v71 = v210;
            *(void *)&v213[v92] = *(void *)&v252[v91];
            id v113 = *(id *)&v69[v65[12]];
            uint64_t v112 = *(void *)&v69[v65[16]];
            (*(void (**)(uint64_t, char *, uint64_t))(v67 + 16))(v71, &v70[v66[7]], v68);
            uint64_t v105 = MEMORY[0x2611C8A30](v120, v131);
            id v111 = objc_msgSend(v253, sel_unitString);
            uint64_t v106 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v107 = v72;
            uint64_t v108 = v269;
            v269[0] = v93;
            v269[1] = v94;
            unint64_t v109 = v268;
            v268[0] = v95;
            v268[1] = v96;
            uint64_t v110 = v267;
            v267[0] = v97;
            v267[1] = v98;
            uint64_t v103 = v266;
            v266[0] = v99;
            v266[1] = v100;
            uint64_t v104 = v265;
            v265[0] = v101;
            v265[1] = v102;
            uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (first: Double, second: Double));
            Statistics.init(queryDateRange:dataDateRange:sampleCount:unit:valueRange:latestValue:averageValue:totalValue:)(v213, v210, v105, v106, v107, (uint64_t)v108, (uint64_t)v109, (uint64_t)v110, v218, (uint64_t)v103, (uint64_t)v104, v73);

            swift_bridgeObjectRelease();
            __n128 v74 = outlined init with copy of Statistics<(first: Double, second: Double)>(v218, v220);
            (*(void (**)(char *, void, uint64_t, uint64_t, __n128))(v215 + 56))(v220, 0, 1, v214, v74);
            CheckedContinuation.resume(returning:)();
            outlined destroy of Statistics<(first: Double, second: Double)>((uint64_t)v218);
            outlined destroy of Statistics<Double>((uint64_t)v229);
          }
          outlined destroy of Statistics<Double>((uint64_t)v231);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return;
        }
LABEL_37:
        __break(1u);
        return;
      }
    }
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v42 = v250;
  uint64_t v134 = Logger.wellnessIntents.unsafeMutableAddressor();
  id v135 = &v292;
  uint64_t v141 = 32;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v246 + 16))(v42, v134, v245);
  swift_endAccess();
  id v43 = v239;
  uint64_t v142 = 7;
  uint64_t v143 = swift_allocObject();
  *(void *)(v143 + 16) = v239;
  char v151 = Logger.logObject.getter();
  int v152 = static os_log_type_t.error.getter();
  id v138 = &v290;
  uint64_t v290 = 12;
  unint64_t v136 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v137 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v139 = v291;
  uint64_t v140 = 17;
  uint64_t v145 = swift_allocObject();
  *(unsigned char *)(v145 + 16) = 32;
  uint64_t v146 = swift_allocObject();
  *(unsigned char *)(v146 + 16) = 8;
  uint64_t v44 = swift_allocObject();
  uint64_t v45 = v143;
  uint64_t v144 = v44;
  *(void *)(v44 + 16) = v200;
  *(void *)(v44 + 24) = v45;
  uint64_t v46 = swift_allocObject();
  uint64_t v47 = v144;
  uint64_t v148 = v46;
  *(void *)(v46 + 16) = v201;
  *(void *)(v46 + 24) = v47;
  uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v147 = _allocateUninitializedArray<A>(_:)();
  uint64_t v149 = v48;
  swift_retain();
  uint64_t v49 = v145;
  id v50 = v149;
  *uint64_t v149 = v202;
  v50[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v49;
  swift_retain();
  uint64_t v51 = v146;
  uint64_t v52 = v149;
  v149[2] = v203;
  v52[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v51;
  swift_retain();
  uint64_t v53 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v148;
  uint64_t v54 = v149;
  v149[4] = v204;
  v54[5] = v53;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v151, (os_log_type_t)v152))
  {
    uint64_t v75 = v205;
    uint64_t v80 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v81 = createStorage<A>(capacity:type:)(0);
    uint64_t v82 = createStorage<A>(capacity:type:)(1);
    unint64_t v83 = v289;
    v289[0] = v80;
    unint64_t v84 = &v288;
    uint64_t v288 = v81;
    unint64_t v85 = &v287;
    uint64_t v287 = v82;
    serialize(_:at:)(2, v289);
    serialize(_:at:)(1, v83);
    v285 = v202;
    uint64_t v286 = v145;
    closure #1 in osLogInternal(_:log:type:)(&v285, (uint64_t)v83, (uint64_t)v84, (uint64_t)v85);
    uint64_t v86 = v75;
    if (v75)
    {
      __break(1u);
    }
    else
    {
      v285 = v203;
      uint64_t v286 = v146;
      closure #1 in osLogInternal(_:log:type:)(&v285, (uint64_t)v289, (uint64_t)&v288, (uint64_t)&v287);
      uint64_t v78 = 0;
      v285 = v204;
      uint64_t v286 = v148;
      closure #1 in osLogInternal(_:log:type:)(&v285, (uint64_t)v289, (uint64_t)&v288, (uint64_t)&v287);
      _os_log_impl(&dword_25DE00000, v151, (os_log_type_t)v152, "Samples returned for %s were not correlations", v80, v139);
      destroyStorage<A>(_:count:)(v81, 0, v79);
      destroyStorage<A>(_:count:)(v82, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v80, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v246 + 8))(v250, v245);
  lazy protocol witness table accessor for type HKHealthStore.Error and conformance HKHealthStore.Error();
  id v76 = (unsigned char *)swift_allocError();
  *id v77 = 0;
  v289[1] = v76;
  CheckedContinuation.resume(throwing:)();
}

uint64_t closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v78 = a5;
  uint64_t v84 = a1;
  uint64_t v83 = a2;
  uint64_t v81 = a3;
  uint64_t v82 = a4;
  uint64_t v91 = 0;
  uint64_t v80 = partial apply for closure #1 in osLogInternal(_:log:type:);
  id v115 = 0;
  uint64_t v114 = 0;
  uint64_t v113 = 0;
  uint64_t v112 = 0;
  uint64_t v102 = 0;
  uint64_t v100 = 0;
  uint64_t v85 = type metadata accessor for Logger();
  uint64_t v86 = *(void *)(v85 - 8);
  uint64_t v87 = v85 - 8;
  unint64_t v88 = (*(void *)(v86 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  double v5 = MEMORY[0x270FA5388](v84);
  uint64_t v89 = (char *)&v25 - v88;
  id v90 = *v6;
  id v115 = v90;
  uint64_t v114 = v7;
  uint64_t v113 = v8;
  uint64_t v112 = v9;
  id v93 = objc_msgSend(v90, sel_objectsForType_, v5);
  unint64_t v92 = type metadata accessor for HKSample();
  unint64_t v94 = lazy protocol witness table accessor for type HKSample and conformance NSObject();
  uint64_t v98 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  uint64_t v97 = v111;
  v111[0] = v98;
  uint64_t v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<HKSample>);
  unint64_t v96 = lazy protocol witness table accessor for type Set<HKSample> and conformance Set<A>();
  Collection.first.getter();
  outlined destroy of [HKQuantityType]();
  uint64_t v99 = (void *)v111[1];
  swift_bridgeObjectRelease();
  if (v99)
  {
    id v77 = v99;
    id v73 = v99;
    self;
    uint64_t v10 = swift_dynamicCastObjCClass();
    uint64_t v74 = v10;
    if (v10)
    {
      uint64_t v72 = v74;
    }
    else
    {
      uint64_t v71 = 0;

      uint64_t v72 = v71;
    }
    id v70 = (void *)v72;

    id v76 = v70;
  }
  else
  {
    uint64_t v75 = 0;

    id v76 = v75;
  }
  unint64_t v69 = v76;
  if (v76)
  {
    uint64_t v68 = v69;
    id v63 = v69;
    uint64_t v102 = v69;
    id v64 = objc_msgSend(v90, sel_objectsForType_, v81);
    uint64_t v66 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRetain();
    unint64_t v65 = v101;
    v101[0] = v66;
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    uint64_t v67 = (void *)v101[1];
    swift_bridgeObjectRelease();
    if (v67)
    {
      uint64_t v62 = v67;
      id v58 = v67;
      self;
      uint64_t v11 = swift_dynamicCastObjCClass();
      uint64_t v59 = v11;
      if (v11)
      {
        uint64_t v57 = v59;
      }
      else
      {
        uint64_t v56 = 0;

        uint64_t v57 = v56;
      }
      uint64_t v55 = (void *)v57;

      uint64_t v61 = v55;
    }
    else
    {
      uint64_t v60 = 0;

      uint64_t v61 = v60;
    }
    uint64_t v54 = v61;
    if (v61)
    {
      uint64_t v53 = v54;
      id v51 = v54;
      uint64_t v100 = v54;
      id v12 = v63;
      id v13 = v51;
      uint64_t v14 = v78;
      id v15 = v51;
      *uint64_t v78 = v63;
      v14[1] = v15;

      uint64_t result = v79;
      uint64_t v52 = v79;
      return result;
    }
  }
  uint64_t v17 = v89;
  uint64_t v42 = Logger.wellnessIntents.unsafeMutableAddressor();
  id v43 = &v110;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v17, v42, v85);
  swift_endAccess();
  uint64_t v49 = Logger.logObject.getter();
  int v48 = static os_log_type_t.error.getter();
  uint64_t v46 = &v108;
  uint64_t v108 = 2;
  unint64_t v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v45 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v47 = v109;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v50 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v49, (os_log_type_t)v48))
  {
    uint64_t v31 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v30 = 0;
    uint64_t v32 = createStorage<A>(capacity:type:)(0);
    uint64_t v33 = createStorage<A>(capacity:type:)(v30);
    uint64_t v37 = (uint64_t *)&v106;
    uint64_t v106 = v31;
    uint64_t v38 = &v105;
    uint64_t v105 = v32;
    id v35 = &v104;
    uint64_t v104 = v33;
    unsigned int v34 = 0;
    serialize(_:at:)(0, &v106);
    serialize(_:at:)(v34, (unsigned char **)v37);
    uint64_t v103 = v50;
    uint64_t v36 = &v25;
    MEMORY[0x270FA5388](&v25);
    uint64_t v18 = v38;
    uint64_t v19 = &v25 - 6;
    uint64_t v39 = &v25 - 6;
    v19[2] = v37;
    v19[3] = v18;
    v19[4] = v20;
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    uint64_t v21 = v79;
    Sequence.forEach(_:)();
    uint64_t v41 = v21;
    if (v21)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25DE00000, v49, (os_log_type_t)v48, "Unable to extract quantities from correlation due to wrong identifiers. Programmer Error.", v31, v47);
      uint64_t v27 = 0;
      destroyStorage<A>(_:count:)(v32, 0, v29);
      destroyStorage<A>(_:count:)(v33, v27, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v31, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
      uint64_t v28 = v41;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = v79;
  }
  uint64_t v26 = v28;

  (*(void (**)(char *, uint64_t))(v86 + 8))(v89, v85);
  lazy protocol witness table accessor for type HKHealthStore.Error and conformance HKHealthStore.Error();
  uint64_t v22 = swift_allocError();
  *uint64_t v23 = 0;
  uint64_t v25 = &v107;
  uint64_t v107 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<(first: Double, second: Double)>?, Error>);
  CheckedContinuation.resume(throwing:)();
  uint64_t v24 = v78;
  uint64_t result = v26;
  *uint64_t v78 = 0;
  v24[1] = 0;
  return result;
}

uint64_t implicit closure #3 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(uint64_t a1)
{
  id v4 = *(id *)a1;
  id v5 = *(id *)(a1 + 8);
  id v1 = *(id *)a1;
  id v2 = v5;
  swift_retain();
  v6[0] = v4;
  v6[1] = v5;
  swift_getAtKeyPath();
  outlined destroy of (HKQuantitySample, HKQuantitySample)(v6);
  return swift_release();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  uint64_t v55 = a3;
  uint64_t v45 = a4;
  uint64_t v32 = a5;
  uint64_t v54 = a6;
  uint64_t v34 = a8;
  id v35 = "Fatal error";
  uint64_t v36 = "Index out of bounds";
  uint64_t v37 = "Swift/Collection.swift";
  uint64_t v38 = "Range requires lowerBound <= upperBound";
  uint64_t v39 = "Swift/Range.swift";
  uint64_t v40 = "Index out of range";
  uint64_t v70 = a3;
  uint64_t v69 = a4;
  uint64_t v68 = a5;
  uint64_t v41 = *(void *)(a5 - 8);
  uint64_t v42 = a5 - 8;
  unint64_t v43 = (*(void *)(v41 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](a1);
  unint64_t v44 = (char *)&v15 - v43;
  uint64_t v46 = 0;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v48 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v49 = AssociatedTypeWitness - 8;
  unint64_t v50 = (*(void *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v46);
  id v51 = (char *)&v15 - v50;
  unint64_t v52 = (*(void *)(*(void *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8);
  uint64_t v53 = (char *)&v15 - v52;
  uint64_t v56 = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = v56 - 8;
  unint64_t v59 = (*(void *)(v57 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = MEMORY[0x270FA5388](v55);
  uint64_t v60 = (char *)&v15 - v59;
  unint64_t v61 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v10);
  uint64_t v62 = (char *)&v15 - v61;
  Swift::Int v63 = dispatch thunk of Collection.count.getter();
  if (v63)
  {
    uint64_t v67 = MEMORY[0x2611C8EF0](v45);
    uint64_t v29 = type metadata accessor for ContiguousArray();
    ContiguousArray.reserveCapacity(_:)(v63);
    uint64_t result = dispatch thunk of Collection.startIndex.getter();
    if (v63 >= 0)
    {
      uint64_t v27 = 0;
      for (uint64_t i = v33; ; uint64_t i = v18)
      {
        uint64_t v25 = i;
        uint64_t v26 = v27;
        if (v27 == v63) {
          goto LABEL_17;
        }
        if (v26 < 0 || v26 >= v63) {
          goto LABEL_16;
        }
        uint64_t v65 = v26;
        if (v63 < 0) {
          goto LABEL_15;
        }
        if (v26 >= v63) {
          break;
        }
        uint64_t v24 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          return result;
        }
        char v66 = 0;
        uint64_t v23 = v24;
LABEL_18:
        uint64_t v22 = v23;
        if (v66)
        {
          (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v60, v62, v56);
          _expectEnd<A>(of:is:)();
          (*(void (**)(char *, uint64_t))(v57 + 8))(v60, v56);
          uint64_t v19 = v67;
          swift_retain();
          swift_release();
          uint64_t v20 = v19;
          uint64_t v21 = v25;
          return v20;
        }
        uint64_t v17 = &v64;
        uint64_t v16 = (void (*)(void))dispatch thunk of Collection.subscript.read();
        (*(void (**)(char *))(v48 + 16))(v51);
        v16();
        uint64_t v14 = v25;
        v30(v51, v44);
        uint64_t v18 = v14;
        if (v14)
        {
          (*(void (**)(char *, uint64_t))(v48 + 8))(v51, AssociatedTypeWitness);
          (*(void (**)(char *, uint64_t))(v57 + 8))(v62, v56);
          outlined destroy of ContiguousArray<A1>();
          (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v34, v44, v32);
          return v15;
        }
        (*(void (**)(char *, uint64_t))(v48 + 8))(v51, AssociatedTypeWitness);
        ContiguousArray.append(_:)();
        dispatch thunk of Collection.formIndex(after:)();
        uint64_t result = v18;
        uint64_t v27 = v22;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_15:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_16:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
LABEL_17:
      uint64_t v65 = 0;
      char v66 = 1;
      uint64_t v23 = v26;
      goto LABEL_18;
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v20 = static Array._allocateUninitialized(_:)();
  uint64_t v21 = v33;
  return v20;
}

uint64_t closure #1 in HKHealthStore.queryParameters(start:end:)@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = a3;
  uint64_t v25 = a1;
  uint64_t v24 = a2;
  unint64_t v44 = 0;
  unint64_t v43 = 0;
  uint64_t v42 = 0;
  uint64_t v41 = 0;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  unint64_t v21 = (*(void *)(*(void *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  uint64_t v22 = (char *)v14 - v21;
  unint64_t v23 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)v14 - v21);
  uint64_t v38 = (char *)v14 - v23;
  uint64_t v37 = type metadata accessor for Date();
  id v35 = *(void **)(v37 - 8);
  uint64_t v36 = v37 - 8;
  uint64_t v31 = v35[8];
  unint64_t v26 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v25);
  uint64_t v27 = (char *)v14 - v26;
  unint64_t v28 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v29 = (char *)v14 - v28;
  unint64_t v30 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v32 = (char *)v14 - v30;
  unint64_t v44 = (char *)v14 - v30;
  unint64_t v33 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = (const void *)MEMORY[0x270FA5388](v7);
  uint64_t v34 = (char *)v14 - v33;
  unint64_t v43 = (char *)v14 - v33;
  uint64_t v42 = v8;
  uint64_t v41 = v9;
  outlined init with copy of Date?(v8, v10);
  uint64_t v39 = (unsigned int (*)(char *, uint64_t, uint64_t))v35[6];
  uint64_t v40 = v35 + 6;
  if (v39(v38, 1, v37) == 1)
  {
    outlined destroy of Date?((uint64_t)v38);
  }
  else
  {
    uint64_t v18 = (void (*)(char *, uint64_t, uint64_t))v35[4];
    uint64_t v19 = v35 + 4;
    v18(v34, (uint64_t)v38, v37);
    outlined init with copy of Date?(v24, v22);
    if (v39(v22, 1, v37) != 1)
    {
      v18(v32, (uint64_t)v22, v37);
      uint64_t v15 = (void (*)(char *, char *, uint64_t))v35[2];
      v14[1] = v35 + 2;
      v15(v29, v34, v37);
      v15(v27, v32, v37);
      DateInterval.init(start:end:)();
      uint64_t v11 = type metadata accessor for DateInterval();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v11 - 8) + 56))(v20, 0, 1);
      uint64_t v17 = (void (*)(char *, uint64_t))v35[1];
      uint64_t v16 = v35 + 1;
      v17(v32, v37);
      return ((uint64_t (*)(char *, uint64_t))v17)(v34, v37);
    }
    outlined destroy of Date?((uint64_t)v22);
    ((void (*)(char *, uint64_t))v35[1])(v34, v37);
  }
  uint64_t v13 = type metadata accessor for DateInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v20, 1);
}

id closure #2 in HKHealthStore.queryParameters(start:end:)(uint64_t a1, const void *a2)
{
  uint64_t v32 = a1;
  uint64_t v31 = a2;
  unint64_t v50 = 0;
  uint64_t v49 = 0;
  uint64_t v48 = 0;
  uint64_t v47 = 0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  unint64_t v28 = (*(void *)(*(void *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v2);
  uint64_t v29 = (char *)&v15 - v28;
  unint64_t v30 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v15 - v28);
  uint64_t v43 = (uint64_t)&v15 - v30;
  uint64_t v42 = type metadata accessor for Date();
  uint64_t v40 = *(void *)(v42 - 8);
  uint64_t v41 = v42 - 8;
  uint64_t v36 = *(void *)(v40 + 64);
  unint64_t v33 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v32);
  uint64_t v34 = (char *)&v15 - v33;
  unint64_t v35 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v37 = (char *)&v15 - v35;
  unint64_t v50 = (char *)&v15 - v35;
  unint64_t v38 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = (const void *)MEMORY[0x270FA5388](v5);
  uint64_t v39 = (char *)&v15 - v38;
  uint64_t v49 = (char *)&v15 - v38;
  uint64_t v48 = v6;
  uint64_t v47 = v7;
  outlined init with copy of Date?(v6, v8);
  unint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  uint64_t v45 = v40 + 48;
  if (v44(v43, 1, v42) == 1)
  {
    outlined destroy of Date?(v43);
    return 0;
  }
  unint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 32);
  uint64_t v27 = v40 + 32;
  v26(v39, v43, v42);
  outlined init with copy of Date?(v31, v29);
  if (v44((uint64_t)v29, 1, v42) == 1)
  {
    outlined destroy of Date?((uint64_t)v29);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v42);
    return 0;
  }
  uint64_t v9 = v34;
  v26(v37, (uint64_t)v29, v42);
  id v19 = self;
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  uint64_t v15 = v40 + 16;
  v16(v9, v39, v42);
  v10.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v11 = v34;
  Class isa = v10.super.isa;
  unint64_t v23 = *(void (**)(char *, uint64_t))(v40 + 8);
  uint64_t v22 = v40 + 8;
  v23(v34, v42);
  v16(v11, v37, v42);
  Class v20 = Date._bridgeToObjectiveC()().super.isa;
  v23(v34, v42);
  type metadata accessor for HKQueryOptions();
  uint64_t v17 = 1;
  uint64_t v12 = _allocateUninitializedArray<A>(_:)();
  uint64_t *v13 = v17;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v18 = v12;
  lazy protocol witness table accessor for type HKQueryOptions and conformance HKQueryOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  id v24 = objc_msgSend(v19, sel_predicateForSamplesWithStartDate_endDate_options_, isa, v20, v46);

  v23(v37, v42);
  v23(v39, v42);
  return v24;
}

void __swiftcall NSSortDescriptor.__allocating_init(key:ascending:)(NSSortDescriptor *__return_ptr retstr, Swift::String_optional key, Swift::Bool ascending)
{
  uint64_t countAndFlagsBits = key.value._countAndFlagsBits;
  object = key.value._object;
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  @nonobjc NSSortDescriptor.init(key:ascending:)(countAndFlagsBits, (uint64_t)object);
}

uint64_t closure #1 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:)(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  id v27 = 0;
  id v26 = 0;
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v21 - 8);
  uint64_t v17 = v21 - 8;
  unint64_t v11 = (*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v10);
  uint64_t v18 = (char *)&v9 - v11;
  unint64_t v12 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (id *)MEMORY[0x270FA5388](v2);
  Class v20 = (char *)&v9 - v12;
  id v13 = *v4;
  id v27 = v13;
  id v15 = *v5;
  id v26 = v15;
  id v6 = v13;
  unint64_t v14 = 0x1F6B15000uLL;
  id v24 = objc_msgSend(v13, (SEL)0x1F6B15B18, v9);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v7 = v15;
  id v19 = [v15 (SEL)(v14 + 2840)];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  int v25 = static Date.< infix(_:_:)();
  unint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v22 = v16 + 8;
  v23(v18, v21);

  v23(v20, v21);
  return v25 & 1;
}

uint64_t closure #2 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:)(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  id v27 = 0;
  id v26 = 0;
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v21 - 8);
  uint64_t v17 = v21 - 8;
  unint64_t v11 = (*(void *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v10);
  uint64_t v18 = (char *)&v9 - v11;
  unint64_t v12 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (id *)MEMORY[0x270FA5388](v2);
  Class v20 = (char *)&v9 - v12;
  id v13 = *v4;
  id v27 = v13;
  id v15 = *v5;
  id v26 = v15;
  id v6 = v13;
  unint64_t v14 = 0x1F6306000uLL;
  id v24 = objc_msgSend(v13, (SEL)0x1F6306418, v9);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  id v7 = v15;
  id v19 = [v15 (SEL)(v14 + 1048)];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  int v25 = static Date.< infix(_:_:)();
  unint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v22 = v16 + 8;
  v23(v18, v21);

  v23(v20, v21);
  return v25 & 1;
}

double closure #3 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:)@<D0>(id *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  id v6 = objc_msgSend(*a1, sel_quantity);
  objc_msgSend(v6, sel_doubleValueForUnit_, a2);
  double v8 = v3;

  double result = v8;
  *a3 = v8;
  return result;
}

double implicit closure #4 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:)@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X8>)
{
  double result = *a1 + *a2;
  *a3 = result;
  return result;
}

id @nonobjc HKUnitPreferenceController.init(healthStore:)(void *a1)
{
  id v4 = objc_msgSend(v1, sel_initWithHealthStore_);

  return v4;
}

id @nonobjc NSNumber.init(value:)()
{
  return objc_msgSend(v0, sel_initWithDouble_);
}

id @nonobjc HKSampleQuery.init(sampleType:predicate:limit:sortDescriptors:resultsHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4)
  {
    type metadata accessor for NSSortDescriptor();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v10 = isa;
  }
  else
  {
    Class v10 = 0;
  }
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v18 = 1107296256;
  int v19 = 0;
  Class v20 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed HKSampleQuery, @guaranteed [HKSample]?, @guaranteed Error?) -> ();
  uint64_t v21 = &block_descriptor_234;
  id v7 = _Block_copy(&aBlock);
  id v8 = objc_msgSend(v16, sel_initWithSampleType_predicate_limit_sortDescriptors_resultsHandler_, a1, a2, a3, v10);
  _Block_release(v7);
  swift_release();

  return v8;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed HKSampleQuery, @guaranteed [HKSample]?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v12 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  id v4 = a2;
  id v5 = a3;
  if (a3)
  {
    type metadata accessor for HKSample();
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v6 = a4;
  if (a4) {
    id v8 = a4;
  }
  else {
    id v8 = 0;
  }
  v12(a2, v10);

  swift_bridgeObjectRelease();
  return swift_release();
}

id @nonobjc NSSortDescriptor.init(key:ascending:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    id v5 = (void *)v4;
  }
  else
  {
    id v5 = 0;
  }
  id v3 = objc_msgSend(v6, sel_initWithKey_ascending_);

  return v3;
}

void *implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();
  id v3 = (void *)_swift_stdlib_bridgeErrorToNSError();
  id v1 = v3;
  swift_unknownObjectRelease();
  return v3;
}

uint64_t sub_25DE4A044()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A070()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A09C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A0DC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A1A0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A1E0()
{
  return swift_deallocObject();
}

void *partial apply for implicit closure #10 in getPreferredUnit(for:store:)()
{
  return implicit closure #10 in getPreferredUnit(for:store:)(*(void **)(v0 + 16));
}

uint64_t sub_25DE4A228()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A254()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A280()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A2C0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A300()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A32C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A358()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A398()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A3D8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A418()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in getPreferredUnit(for:store:)@<X0>(void *a1@<X8>)
{
  return implicit closure #3 in getPreferredUnit(for:store:)(*(void *)(v1 + 16), a1);
}

uint64_t sub_25DE4A460()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_0()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKQuantityType : HKUnit]);
  unint64_t v1 = lazy protocol witness table accessor for type [HKQuantityType : HKUnit] and conformance [A : B]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

uint64_t sub_25DE4A584()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A5C4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A5F0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A61C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A65C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A69C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A6C8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A6F4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A734()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A774()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A7B4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A7F4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A834()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A860()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A88C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A8CC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A90C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A938()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A964()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4A9A4()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type HealthKitLocalizationError and conformance HealthKitLocalizationError()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError;
  if (!lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError;
  if (!lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError;
  if (!lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HealthKitLocalizationError and conformance HealthKitLocalizationError);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DE4AA64()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4AAA4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4AAE4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4AB10()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4AB3C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4AB7C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4ABBC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4ABE8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4AC14()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4AC54()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for HKUnitPreferenceController()
{
  uint64_t v2 = lazy cache variable for type metadata for HKUnitPreferenceController;
  if (!lazy cache variable for type metadata for HKUnitPreferenceController)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKUnitPreferenceController);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for NSNumber()
{
  uint64_t v2 = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type HKHealthStore.Error and conformance HKHealthStore.Error()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error;
  if (!lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error;
  if (!lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error;
  if (!lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKHealthStore.Error and conformance HKHealthStore.Error);
    return WitnessTable;
  }
  return v2;
}

uint64_t partial apply for closure #1 in HKHealthStore.query(quantityType:start:end:)(uint64_t a1)
{
  return closure #1 in HKHealthStore.query(quantityType:start:end:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48));
}

unint64_t type metadata accessor for NSSortDescriptor()
{
  uint64_t v2 = lazy cache variable for type metadata for NSSortDescriptor;
  if (!lazy cache variable for type metadata for NSSortDescriptor)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
    return ObjCClassMetadata;
  }
  return v2;
}

void *outlined init with copy of DateInterval?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

void *outlined init with take of DateInterval?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of (DateInterval?, NSPredicate?, [NSSortDescriptor], Int)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DateInterval();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  objc_release(*(id *)(a1
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DateInterval?, NSPredicate?, [NSSortDescriptor], Int))
                              + 48)));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of DateInterval?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DateInterval();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

unint64_t lazy protocol witness table accessor for type [HKQuantitySample] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKQuantitySample]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKQuantitySample]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKQuantitySample]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKQuantitySample] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

double partial apply for closure #3 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:)@<D0>(id *a1@<X0>, double *a2@<X8>)
{
  return closure #3 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:)(a1, *(void *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type [Double] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [Double] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Double] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Double]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Double] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [Double] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Double] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Double]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [Double] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

__n128 outlined init with copy of Statistics<Double>(char *a1, char *a2)
{
  uint64_t v10 = type metadata accessor for DateInterval();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v11 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(a2, a1, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v10);
  }
  uint64_t v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(&a2[v7[7]], &a1[v7[7]], v10);
  *(void *)&a2[v7[8]] = *(void *)&a1[v7[8]];
  uint64_t v5 = &a2[v7[9]];
  uint64_t v3 = &a1[v7[9]];
  *(void *)uint64_t v5 = *(void *)v3;
  uint64_t v6 = *((void *)v3 + 1);
  swift_bridgeObjectRetain();
  *((void *)v5 + 1) = v6;
  __n128 result = *(__n128 *)&a1[v7[10]];
  *(__n128 *)&a2[v7[10]] = result;
  *(void *)&a2[v7[11]] = *(void *)&a1[v7[11]];
  *(void *)&a2[v7[12]] = *(void *)&a1[v7[12]];
  *(void *)&a2[v7[13]] = *(void *)&a1[v7[13]];
  return result;
}

uint64_t outlined destroy of Statistics<Double>(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DateInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1 + *(int *)(v2 + 28), v4);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t partial apply for closure #1 in HKHealthStore.query<A>(categoryType:start:end:enumerationType:)(uint64_t a1)
{
  return closure #1 in HKHealthStore.query<A>(categoryType:start:end:enumerationType:)(a1, *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void **)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_25DE4B8D8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4B918()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4B958()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4B984()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4B9B0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4B9F0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4BA30()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4BA5C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4BA88()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4BAC8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(uint64_t a1)
{
  return closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48), *(void **)(v1 + 56), *(void **)(v1 + 64), *(void **)(v1 + 72));
}

unint64_t base witness table accessor for Equatable in HealthKitLocalizationError()
{
  return lazy protocol witness table accessor for type HealthKitLocalizationError and conformance HealthKitLocalizationError();
}

uint64_t getEnumTagSinglePayload for HealthKitLocalizationError(unsigned __int8 *a1, int a2)
{
  if (a2)
  {
    int v6 = 1;
    if ((a2 + 1) >= 0x100)
    {
      if ((a2 + 1) >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v6 = v2;
    }
    if (v6 == 1)
    {
      int v5 = *a1;
    }
    else if (v6 == 2)
    {
      int v5 = *(unsigned __int16 *)a1;
    }
    else
    {
      int v5 = *(_DWORD *)a1;
    }
    if (v5) {
      int v4 = v5 - 1;
    }
    else {
      int v4 = -1;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

unsigned char *storeEnumTagSinglePayload for HealthKitLocalizationError(unsigned char *result, int a2, int a3)
{
  int v5 = 0;
  if (a3)
  {
    int v4 = 1;
    if ((a3 + 1) >= 0x100)
    {
      if ((a3 + 1) >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v4 = v3;
    }
    int v5 = v4;
  }
  if (a2)
  {
    if (v5)
    {
      if (v5 == 1)
      {
        void *result = a2;
      }
      else if (v5 == 2)
      {
        *(_WORD *)__n128 result = a2;
      }
      else
      {
        *(_DWORD *)__n128 result = a2;
      }
    }
  }
  else if (v5)
  {
    if (v5 == 1)
    {
      void *result = 0;
    }
    else if (v5 == 2)
    {
      *(_WORD *)__n128 result = 0;
    }
    else
    {
      *(_DWORD *)__n128 result = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for HealthKitLocalizationError()
{
  return 0;
}

ValueMetadata *type metadata accessor for HealthKitLocalizationError()
{
  return &type metadata for HealthKitLocalizationError;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  void *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for HKHealthStore.Error(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFE) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 1) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 254;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 2;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for HKHealthStore.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFE)
  {
    unsigned int v5 = ((a3 + 1) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xFE)
  {
    unsigned int v4 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      void *result = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for HKHealthStore.Error(unsigned char *a1)
{
  return *a1 & 1;
}

unsigned char *destructiveInjectEnumTag for HKHealthStore.Error(unsigned char *result, char a2)
{
  void *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for HKHealthStore.Error()
{
  return &type metadata for HKHealthStore.Error;
}

unint64_t base witness table accessor for Equatable in HKHealthStore.Error()
{
  return lazy protocol witness table accessor for type HKHealthStore.Error and conformance HKHealthStore.Error();
}

unint64_t type metadata accessor for HKSampleQuery()
{
  uint64_t v2 = lazy cache variable for type metadata for HKSampleQuery;
  if (!lazy cache variable for type metadata for HKSampleQuery)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKSampleQuery);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25DE4C55C()
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<(first: Double, second: Double)>?, Error>);
  uint64_t v7 = *(void *)(v5 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (v4 + *(void *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v13 = (v12 + 8 + v1) & ~v1;
  unint64_t v8 = (v13 + *(void *)(*(void *)(v6 - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v4, v5);

  uint64_t v14 = type metadata accessor for DateInterval();
  uint64_t v15 = *(void *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v15 + 48))(v0 + v13, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v3 + v13, v14);
  }

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

char *outlined init with take of (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int)(char *a1, char *a2)
{
  uint64_t v7 = type metadata accessor for DateInterval();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a2, a1, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
  }
  uint64_t v3 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
  __n128 result = a2;
  *(void *)&a2[v3[12]] = *(void *)&a1[v3[12]];
  *(void *)&a2[v3[16]] = *(void *)&a1[v3[16]];
  *(void *)&a2[v3[20]] = *(void *)&a1[v3[20]];
  return result;
}

void partial apply for closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<(first: Double, second: Double)>?, Error>)
                 - 8);
  unint64_t v11 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v7 = (v11 + *(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int))
                  - 8);
  unint64_t v4 = (((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v5 = (v4 + *(void *)(v13 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(a1, a2, a3, v3 + v11, *(void **)(v3 + v7), *(void **)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v3 + v8), *(void *)(v3 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), (char *)(v3 + v4), *(void **)(v3 + v5), *(void **)(v3 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t outlined destroy of (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DateInterval();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  objc_release(*(id *)(a1
                     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int))
                              + 48)));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t sub_25DE4CCB0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)()
{
  return implicit closure #2 in closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:)(*(void **)(v0 + 16));
}

uint64_t sub_25DE4CCF8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4CD24()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4CD50()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4CD90()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(a1, v2[2], v2[3], v2[4], a2);
}

unint64_t lazy protocol witness table accessor for type [HKCorrelation] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKCorrelation]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKCorrelation]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKCorrelation]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKCorrelation] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t partial apply for implicit closure #3 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(uint64_t a1)
{
  return implicit closure #3 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)(a1);
}

uint64_t outlined destroy of Statistics<Double>?(uint64_t a1)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(a1, 1))
  {
    uint64_t v2 = type metadata accessor for DateInterval();
    uint64_t v3 = *(void *)(v2 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v3 + 48))(a1, 1)) {
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    }
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1 + *(int *)(v5 + 28), v2);
    swift_bridgeObjectRelease();
  }
  return a1;
}

__n128 outlined init with take of Statistics<Double>(char *a1, char *a2)
{
  uint64_t v7 = type metadata accessor for DateInterval();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v8 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(a2, a1, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
  }
  uint64_t v4 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&a2[v4[7]], &a1[v4[7]], v7);
  *(void *)&a2[v4[8]] = *(void *)&a1[v4[8]];
  *(_OWORD *)&a2[v4[9]] = *(_OWORD *)&a1[v4[9]];
  __n128 result = *(__n128 *)&a1[v4[10]];
  *(__n128 *)&a2[v4[10]] = result;
  *(void *)&a2[v4[11]] = *(void *)&a1[v4[11]];
  *(void *)&a2[v4[12]] = *(void *)&a1[v4[12]];
  *(void *)&a2[v4[13]] = *(void *)&a1[v4[13]];
  return result;
}

void *outlined init with copy of NSPredicate?(id *a1, void *a2)
{
  id v4 = *a1;
  id v2 = *a1;
  __n128 result = a2;
  *a2 = v4;
  return result;
}

void *outlined init with copy of [NSSortDescriptor](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  swift_bridgeObjectRetain();
  __n128 result = a2;
  *a2 = v4;
  return result;
}

__n128 outlined init with copy of Statistics<(first: Double, second: Double)>(char *a1, char *a2)
{
  uint64_t v12 = type metadata accessor for DateInterval();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v13 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(a2, a1, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v12);
  }
  unint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<(first: Double, second: Double)>);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(&a2[v9[7]], &a1[v9[7]], v12);
  *(void *)&a2[v9[8]] = *(void *)&a1[v9[8]];
  uint64_t v7 = &a2[v9[9]];
  uint64_t v3 = &a1[v9[9]];
  *(void *)uint64_t v7 = *(void *)v3;
  uint64_t v8 = *((void *)v3 + 1);
  swift_bridgeObjectRetain();
  *((void *)v7 + 1) = v8;
  uint64_t v4 = &a2[v9[10]];
  uint64_t v5 = v9[10];
  *(_OWORD *)uint64_t v4 = *(_OWORD *)&a1[v5];
  *((_OWORD *)v4 + 1) = *(_OWORD *)&a1[v5 + 16];
  *(_OWORD *)&a2[v9[11]] = *(_OWORD *)&a1[v9[11]];
  *(_OWORD *)&a2[v9[12]] = *(_OWORD *)&a1[v9[12]];
  __n128 result = *(__n128 *)&a1[v9[13]];
  *(__n128 *)&a2[v9[13]] = result;
  return result;
}

uint64_t outlined destroy of Statistics<(first: Double, second: Double)>(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for DateInterval();
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<(first: Double, second: Double)>);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1 + *(int *)(v2 + 28), v4);
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t type metadata accessor for HKCorrelation()
{
  uint64_t v2 = lazy cache variable for type metadata for HKCorrelation;
  if (!lazy cache variable for type metadata for HKCorrelation)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKCorrelation);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25DE4D698()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:)()
{
  return implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:)(*(void **)(v0 + 16));
}

uint64_t sub_25DE4D6E0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4D70C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4D738()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4D778()
{
  return swift_deallocObject();
}

id *outlined destroy of (HKQuantitySample, HKQuantitySample)(id *a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type HKSample and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKSample and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HKSample and conformance NSObject)
  {
    type metadata accessor for HKSample();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKSample and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Set<HKSample> and conformance Set<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Set<HKSample> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<HKSample> and conformance Set<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<HKSample>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Set<HKSample> and conformance Set<A>);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Set<HKSample> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<HKSample> and conformance Set<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<HKSample>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Set<HKSample> and conformance Set<A>);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DE4D8F8()
{
  type metadata accessor for Date();
  swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v3 = *(void *)(type metadata accessor for CheckedContinuation() - 8);
  unint64_t v1 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v4 = (v1 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t))(v3 + 8))(v0 + v1);

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in HKHealthStore.query<A>(categoryType:start:end:enumerationType:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  type metadata accessor for Date();
  swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v11 = *(void *)(type metadata accessor for CheckedContinuation() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v5 = *(void **)(v3 + ((v4 + *(void *)(v11 + 64) + 7) & 0xFFFFFFFFFFFFFFF8));
  closure #1 in closure #1 in HKHealthStore.query<A>(categoryType:start:end:enumerationType:)(a1, a2, a3, v3 + v4, v5, v7, v8);
}

uint64_t sub_25DE4DB78()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4DBB8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4DBE4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4DC10()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4DC50()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of A?(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  }
  return a1;
}

uint64_t outlined destroy of (value: A, startDate: Date)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(void))(*(void *)(a2 - 8) + 8))();
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v3 = type metadata accessor for Date();
  (*(void (**)(uint64_t))(*(void *)(v3 - 8) + 8))(a1 + v6);
  return a1;
}

unint64_t lazy protocol witness table accessor for type [HKSample] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKSample] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKSample] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKSample]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKSample] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ContiguousArray<A1>()
{
}

uint64_t sub_25DE4DE90()
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<Double>?, Error>);
  uint64_t v7 = *(void *)(v5 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (v4 + *(void *)(v7 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v11 = (v10 + 8 + v1) & ~v1;
  unint64_t v8 = (v11 + *(void *)(*(void *)(v6 - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v4, v5);

  uint64_t v12 = type metadata accessor for DateInterval();
  uint64_t v13 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v13 + 48))(v0 + v11, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v3 + v11, v12);
  }

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Statistics<Double>?, Error>)
                 - 8);
  unint64_t v13 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v10 = (v13 + *(void *)(v9 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (dateRange: DateInterval?, predicate: NSPredicate?, sortDescriptors: [NSSortDescriptor], limit: Int));
  unint64_t v5 = (((v10 + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + *(unsigned __int8 *)(*(void *)(v4 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *(void **)(v3 + v10);
  uint64_t v7 = *(void *)(v3 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v8 = *(void **)(v3 + ((v5 + *(void *)(*(void *)(v4 - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8));
  closure #1 in closure #1 in HKHealthStore.query(quantityType:start:end:)(a1, a2, a3, v3 + v13, v6, v7, (const void *)(v3 + v5), v8);
}

uint64_t sub_25DE4E288()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4E2C8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4E2F4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4E320()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4E360()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4E3A0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4E3E0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4E40C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4E438()
{
  return swift_deallocObject();
}

uint64_t sub_25DE4E478()
{
  return swift_deallocObject();
}

id UndoMedsIntentHandler.__allocating_init(storage:)(void *a1)
{
  id v2 = objc_allocWithZone(v1);
  return UndoMedsIntentHandler.init(storage:)(a1);
}

id UndoMedsIntentHandler.init(storage:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  id v2 = v1;
  id v14 = v1;
  outlined init with copy of QuantityPersisting?(a1, v12);
  if (v12[3])
  {
    outlined init with take of QuantityPersisting(v12, __dst);
  }
  else
  {
    id v3 = MedsUndoer.init()();
    __dst[3] = &type metadata for MedsUndoer;
    __dst[4] = &protocol witness table for MedsUndoer;
    __dst[0] = v3;
    __dst[1] = v4;
    outlined destroy of QuantityPersisting?((uint64_t)v12);
  }
  outlined init with take of QuantityPersisting(__dst, &v8[OBJC_IVAR____TtC19SiriWellnessIntents21UndoMedsIntentHandler_storage]);

  v11.receiver = v14;
  v11.super_class = ObjectType;
  id v7 = objc_msgSendSuper2(&v11, sel_init);
  id v5 = v7;
  id v14 = v7;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v7;
}

id MedsUndoer.init()()
{
  id v8 = 0;
  id v9 = 0;
  type metadata accessor for HKHealthStore();
  id v7 = (id)NSDateFormatter.__allocating_init()();
  id v0 = v7;
  id v1 = v7;
  id v8 = v7;
  type metadata accessor for HKMedicationExposableDoseEventControl();
  id v6 = HKUnitPreferenceController.__allocating_init(healthStore:)(v7);
  id v2 = v6;
  id v9 = v6;
  id v3 = v7;
  id v4 = v6;

  outlined destroy of (HKQuantitySample, HKQuantitySample)(&v8);
  return v7;
}

unint64_t type metadata accessor for HKMedicationExposableDoseEventControl()
{
  uint64_t v2 = lazy cache variable for type metadata for HKMedicationExposableDoseEventControl;
  if (!lazy cache variable for type metadata for HKMedicationExposableDoseEventControl)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMedicationExposableDoseEventControl);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t UndoMedsIntentHandler.handle(intent:)(uint64_t a1)
{
  v2[20] = v1;
  v2[19] = a1;
  v2[10] = v2;
  v2[11] = 0;
  v2[12] = 0;
  v2[18] = 0;
  uint64_t v3 = type metadata accessor for Logger();
  v2[21] = v3;
  v2[22] = *(void *)(v3 - 8);
  v2[23] = swift_task_alloc();
  v2[11] = a1;
  v2[12] = v1;
  return MEMORY[0x270FA2498](UndoMedsIntentHandler.handle(intent:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 80) = *v1;
  *(void *)(v3 + 208) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](UndoMedsIntentHandler.handle(intent:), 0);
}

uint64_t UndoMedsIntentHandler.handle(intent:)()
{
  uint64_t v1 = *(void **)(v0 + 152);
  *(void *)(v0 + 80) = v0;
  id v29 = objc_msgSend(v1, sel_matchingMeds);
  if (v29)
  {
    type metadata accessor for MatchedMedName();
    uint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v27 = v26;
  }
  else
  {
    uint64_t v27 = 0;
  }
  *(void *)(v28 + 192) = v27;
  if (v27)
  {
    uint64_t v2 = *(void *)(v28 + 160);
    *(void *)(v28 + 144) = v27;
    outlined init with copy of QuantityPersisting(v2 + OBJC_IVAR____TtC19SiriWellnessIntents21UndoMedsIntentHandler_storage, v28 + 16);
    uint64_t v23 = *(void *)(v28 + 40);
    uint64_t v24 = *(void *)(v28 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v28 + 16), v23);
    int v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 + 8) + **(int **)(v24 + 8));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v28 + 200) = v3;
    void *v3 = *(void *)(v28 + 80);
    v3[1] = UndoMedsIntentHandler.handle(intent:);
    return v25(v27, v23, v24);
  }
  else
  {
    uint64_t v5 = *(void *)(v28 + 184);
    uint64_t v18 = *(void *)(v28 + 168);
    uint64_t v16 = *(void *)(v28 + 176);
    uint64_t v17 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v5, v17, v18);
    swift_endAccess();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    *(void *)(v28 + 104) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v19 = *(_DWORD *)(v28 + 216);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v22 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v21, v20))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v13 = createStorage<A>(capacity:type:)(0);
      uint64_t v14 = createStorage<A>(capacity:type:)(0);
      *(void *)(v28 + 112) = buf;
      *(void *)(v28 + 120) = v13;
      *(void *)(v28 + 128) = v14;
      serialize(_:at:)(0, (unsigned char **)(v28 + 112));
      serialize(_:at:)(0, (unsigned char **)(v28 + 112));
      *(void *)(v28 + 136) = v22;
      uint64_t v15 = (void *)swift_task_alloc();
      v15[2] = v28 + 112;
      v15[3] = v28 + 120;
      v15[4] = v28 + 128;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v21, v20, "Missing matchingMeds. Aborting delete.", buf, v19);
      destroyStorage<A>(_:count:)(v13, 0, v11);
      destroyStorage<A>(_:count:)(v14, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void *)(v28 + 184);
    uint64_t v9 = *(void *)(v28 + 168);
    uint64_t v7 = *(void *)(v28 + 176);

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
    type metadata accessor for UndoMedsIntentResponse();
    unint64_t v10 = UndoMedsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(char *))(*(void *)(v28 + 80) + 8);
    return v6(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 80) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v0 + 208);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 80) + 8);
  return v1(v3);
}

uint64_t @objc closure #1 in UndoMedsIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  v3[4] = a3;
  v3[3] = a1;
  void v3[2] = v3;
  id v5 = a1;
  v3[5] = _Block_copy(a2);
  id v6 = a3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 48) = v7;
  void *v7 = *(void *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return UndoMedsIntentHandler.handle(intent:)((uint64_t)a1);
}

id UndoMedsIntentHandler.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t UndoMedsIntentHandler.init()()
{
  if (!"SiriWellnessIntents.UndoMedsIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.UndoMedsIntentHandler", 41, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/UndoMedsIntentHandler.swift", 47, 2, v1, 0xFuLL, 0x14uLL);
  __break(1u);
  return result;
}

id UndoMedsIntentHandler.__deallocating_deinit()
{
  uint64_t v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t MedsUndoer.undo(matchingMeds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[39] = a3;
  v3[38] = a2;
  v3[37] = a1;
  v3[26] = v3;
  v3[27] = 0;
  v3[24] = 0;
  v3[25] = 0;
  v3[29] = 0;
  v3[30] = 0;
  uint64_t v4 = type metadata accessor for Logger();
  v3[40] = v4;
  v3[41] = *(void *)(v4 - 8);
  v3[42] = swift_task_alloc();
  v3[43] = swift_task_alloc();
  v3[44] = swift_task_alloc();
  v3[27] = a1;
  v3[24] = a2;
  v3[25] = a3;
  return MEMORY[0x270FA2498](MedsUndoer.undo(matchingMeds:), 0);
}

uint64_t MedsUndoer.undo(matchingMeds:)()
{
  uint64_t v37 = v0;
  uint64_t v1 = *(void *)(v0 + 352);
  uint64_t v18 = *(void *)(v0 + 328);
  uint64_t v20 = *(void *)(v0 + 320);
  uint64_t v21 = *(void *)(v0 + 296);
  *(void *)(v0 + 208) = v0;
  uint64_t v19 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  objc_super v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  *(void *)(v0 + 360) = v2;
  *(void *)(v0 + 368) = (v18 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v2(v1, v19, v20);
  swift_endAccess();
  swift_bridgeObjectRetain();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  swift_retain();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for implicit closure #3 in getPreferredUnit(for:store:);
  *(void *)(v24 + 24) = v22;
  swift_release();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 224) = 12;
  *(void *)(v0 + 376) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 384) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 392) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 464);
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = 32;
  uint64_t v27 = swift_allocObject();
  *(unsigned char *)(v27 + 16) = 8;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_1;
  *(void *)(v25 + 24) = v24;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v28 + 24) = v25;
  *(void *)(v0 + 400) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  id v29 = v3;
  swift_retain();
  *id v29 = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[1] = v26;
  swift_retain();
  v29[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[3] = v27;
  swift_retain();
  v29[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[5] = v28;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v30, v31))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v15 = createStorage<A>(capacity:type:)(0);
    uint64_t v16 = createStorage<A>(capacity:type:)(1);
    uint64_t v32 = buf;
    uint64_t v33 = v15;
    uint64_t v34 = v16;
    serialize(_:at:)(2, &v32);
    serialize(_:at:)(1, &v32);
    unint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v36 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    unint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v36 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    unint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v36 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    _os_log_impl(&dword_25DE00000, v30, v31, "Starting to undo matching meds: %s", buf, size);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v17[51] = 0;
  uint64_t v11 = v17[44];
  uint64_t v12 = v17[40];
  uint64_t v10 = v17[41];

  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v17[52] = v4;
  v17[53] = (v10 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v4(v11, v12);
  id v5 = (void *)swift_task_alloc();
  v17[54] = v5;
  *id v5 = v17[26];
  v5[1] = MedsUndoer.undo(matchingMeds:);
  uint64_t v6 = v17[39];
  uint64_t v7 = v17[38];
  uint64_t v8 = v17[37];
  return MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)(v8, v7, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v4;
  Class isa;
  id v6;
  uint64_t v7;

  uint64_t v1 = *(void *)(v0 + 440);
  uint64_t v6 = *(id *)(v0 + 312);
  *(void *)(v0 + 208) = v0;
  *(void *)(v0 + 232) = v1;
  objc_super v2 = v6;
  swift_bridgeObjectRetain();
  type metadata accessor for HKMedicationExposableDoseEvent();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 448) = isa;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 16) = *(void *)(v0 + 208);
  *(void *)(v0 + 56) = v4;
  *(void *)(v0 + 24) = MedsUndoer.undo(matchingMeds:);
  *(void *)(v0 + 112) = swift_continuation_init();
  *(void *)(v0 + 80) = MEMORY[0x263EF8330];
  *(_DWORD *)(v0 + 88) = 0x40000000;
  *(_DWORD *)(v0 + 92) = 0;
  *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) @Sendable (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
  *(void *)(v0 + 104) = &block_descriptor_1;
  objc_msgSend(v6, sel_writeDoseEvents_completion_, isa);
  return __swift_continuation_await_point();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  uint64_t v4 = (void *)*v0;
  v4[26] = *v0;
  uint64_t v1 = v4[6];
  v4[57] = v1;
  if (v1)
  {
    objc_super v2 = MedsUndoer.undo(matchingMeds:);
  }
  else
  {
    objc_super v2 = MedsUndoer.undo(matchingMeds:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t (*v6)(char *);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  char *v10;
  uint64_t v11;
  uint8_t *buf;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint32_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  unint64_t v35 = v0;
  uint64_t v16 = *(id *)(v0 + 448);
  uint64_t v20 = *(void *)(v0 + 440);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 360);
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v18 = *(void *)(v0 + 320);
  objc_super v2 = *(void **)(v0 + 312);
  *(void *)(v0 + 208) = v0;

  uint64_t v17 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v19(v1, v17, v18);
  swift_endAccess();
  swift_bridgeObjectRetain();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v20;
  uint64_t v28 = Logger.logObject.getter();
  id v29 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 288) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v21 = *(_DWORD *)(v0 + 472);
  uint64_t v24 = swift_allocObject();
  *(unsigned char *)(v24 + 16) = 32;
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = 8;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = partial apply for implicit closure #2 in MedsUndoer.undo(matchingMeds:);
  *(void *)(v23 + 24) = v22;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v26 + 24) = v23;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v27 = v3;
  swift_retain();
  *uint64_t v27 = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[1] = v24;
  swift_retain();
  v27[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[3] = v25;
  swift_retain();
  v27[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[5] = v26;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v4 = v15[51];
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v13 = createStorage<A>(capacity:type:)(0);
    uint64_t v14 = createStorage<A>(capacity:type:)(1);
    uint64_t v30 = buf;
    os_log_type_t v31 = v13;
    uint64_t v32 = v14;
    serialize(_:at:)(2, &v30);
    serialize(_:at:)(1, &v30);
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v34 = v24;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    if (v4) {
      return result;
    }
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v34 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v34 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    _os_log_impl(&dword_25DE00000, v28, v29, "successfully undid writing of %s doseEvents, returning .success", buf, v21);
    destroyStorage<A>(_:count:)(v13, 0, v11);
    destroyStorage<A>(_:count:)(v14, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v9 = (void (*)(uint64_t, uint64_t))v15[52];
  uint64_t v7 = v15[43];
  uint64_t v8 = v15[40];

  v9(v7, v8);
  type metadata accessor for UndoMedsIntentResponse();
  uint64_t v10 = UndoMedsIntentResponse.__allocating_init(code:userActivity:)(4, 0);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(char *))(v15[26] + 8);
  return v6(v10);
}

{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(char *);
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  id v7;
  char *v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint32_t v22;
  os_log_type_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v18 = *(void **)(v0 + 456);
  uint64_t v17 = *(id *)(v0 + 448);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 360);
  uint64_t v15 = *(void *)(v0 + 336);
  uint64_t v20 = *(void *)(v0 + 320);
  uint64_t v16 = *(id *)(v0 + 312);
  *(void *)(v0 + 208) = v0;
  swift_willThrow();

  uint64_t v1 = v18;
  *(void *)(v0 + 240) = v18;
  uint64_t v19 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v21(v15, v19, v20);
  swift_endAccess();
  uint64_t v24 = Logger.logObject.getter();
  uint64_t v23 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 248) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v22 = *(_DWORD *)(v0 + 468);
  uint64_t v25 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v24, v23))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 256) = buf;
    *(void *)(v14 + 264) = v11;
    *(void *)(v14 + 272) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 256));
    serialize(_:at:)(0, (unsigned char **)(v14 + 256));
    *(void *)(v14 + 280) = v25;
    uint64_t v13 = (void *)swift_task_alloc();
    v13[2] = v14 + 256;
    v13[3] = v14 + 264;
    void v13[4] = v14 + 272;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v24, v23, "failed to undo writing of doseEvents, returning .success", buf, v22);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(id *)(v14 + 456);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v14 + 416);
  uint64_t v4 = *(void *)(v14 + 336);
  id v5 = *(void *)(v14 + 320);

  v6(v4, v5);
  type metadata accessor for UndoMedsIntentResponse();
  uint64_t v8 = UndoMedsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  objc_super v2 = *(uint64_t (**)(char *))(*(void *)(v14 + 208) + 8);
  return v2(v8);
}

uint64_t MedsUndoer.undo(matchingMeds:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 208) = *v1;
  *(void *)(v3 + 440) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](MedsUndoer.undo(matchingMeds:), 0);
}

uint64_t MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[85] = a3;
  v3[84] = a2;
  v3[83] = a1;
  v3[46] = v3;
  v3[47] = 0;
  v3[40] = 0;
  v3[41] = 0;
  v3[48] = 0;
  v3[50] = 0;
  v3[56] = 0;
  v3[62] = 0;
  v3[31] = 0;
  v3[32] = 0;
  v3[33] = 0;
  v3[63] = 0;
  v3[42] = 0;
  v3[43] = 0;
  v3[66] = 0;
  v3[78] = 0;
  v3[80] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3[86] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v3[87] = v4;
  uint64_t v9 = *(void *)(v4 - 8);
  v3[88] = v9;
  v3[89] = *(void *)(v9 + 64);
  v3[90] = swift_task_alloc();
  v3[91] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[92] = v5;
  v3[93] = *(void *)(v5 - 8);
  v3[94] = swift_task_alloc();
  v3[95] = swift_task_alloc();
  v3[96] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v3[97] = v6;
  v3[98] = *(void *)(v6 - 8);
  v3[99] = swift_task_alloc();
  v3[100] = swift_task_alloc();
  v3[101] = swift_task_alloc();
  v3[102] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DateInterval();
  v3[103] = v7;
  v3[104] = *(void *)(v7 - 8);
  v3[105] = swift_task_alloc();
  v3[106] = swift_task_alloc();
  v3[47] = a1;
  v3[40] = a2;
  v3[41] = a3;
  return MEMORY[0x270FA2498](MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:), 0);
}

uint64_t MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)()
{
  uint64_t v11 = *(void *)(v0 + 848);
  uint64_t v14 = *(void *)(v0 + 840);
  uint64_t v12 = *(void *)(v0 + 832);
  uint64_t v13 = *(void *)(v0 + 824);
  uint64_t v5 = *(void *)(v0 + 816);
  uint64_t v9 = *(void *)(v0 + 808);
  uint64_t v6 = *(void *)(v0 + 800);
  uint64_t v10 = *(void *)(v0 + 792);
  uint64_t v4 = *(void *)(v0 + 784);
  uint64_t v7 = *(void *)(v0 + 776);
  uint64_t v16 = *(void **)(v0 + 680);
  *(void *)(v0 + 368) = v0;
  Date.init()();
  Date.startOfDay.getter(v9);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v5, v7);
  Date.init()();
  Date.endOfDay.getter(v10);
  v8(v6, v7);
  DateInterval.init(start:end:)();
  id v1 = v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v14, v11, v13);
  Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 856) = isa;
  objc_super v2 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  *(void *)(v0 + 864) = v2;
  *(void *)(v0 + 872) = (v12 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v2(v14, v13);
  *(void *)(v0 + 16) = *(void *)(v0 + 368);
  *(void *)(v0 + 56) = v0 + 392;
  *(void *)(v0 + 24) = MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:);
  *(void *)(v0 + 176) = swift_continuation_init();
  *(void *)(v0 + 144) = MEMORY[0x263EF8330];
  *(_DWORD *)(v0 + 152) = 0x40000000;
  *(_DWORD *)(v0 + 156) = 0;
  *(void *)(v0 + 160) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [HKMedicationExposableDoseEvent];
  *(void *)(v0 + 168) = &block_descriptor_43;
  objc_msgSend(v16, sel_doseEventsForDateInterval_medicationIdentifier_completion_, isa, 0);
  return __swift_continuation_await_point();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = *v0;
  uint64_t v5 = *v0;
  *(void *)(v5 + 368) = *v0;
  id v1 = *(void *)(v4 + 48);
  *(void *)(v5 + 880) = v1;
  if (v1)
  {
    objc_super v2 = MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:);
  }
  else
  {
    objc_super v2 = MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Class isa;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(void);
  uint64_t v42;
  uint32_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  NSObject *log;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *buf;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint32_t size;
  os_log_type_t v71;
  NSObject *oslog;
  uint64_t v73;
  uint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  uint64_t v86 = (void *)v0[107];
  uint64_t v85 = (void *)v0[85];
  v0[46] = v0;
  uint64_t v87 = v0[49];
  swift_bridgeObjectRetain();
  v0[48] = v87;

  v0[58] = v87;
  v0[111] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  unint64_t v88 = Sequence.sorted(by:)();
  outlined destroy of [HKQuantityType]();
  *(void *)(v84 + 472) = v88;
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  uint64_t v83 = _ArrayProtocol.filter(_:)();
  uint64_t v82 = *(void *)(v84 + 664);
  *(void *)(v84 + 480) = v83;
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  BidirectionalCollection.reversed()();
  *(void *)(v84 + 488) = *(void *)(v84 + 456);
  type metadata accessor for HKMedicationExposableDoseEvent();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<[HKMedicationExposableDoseEvent]>);
  lazy protocol witness table accessor for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>();
  uint64_t v81 = Array.init<A>(_:)();
  swift_bridgeObjectRetain();
  *(void *)(v84 + 448) = v81;
  *(void *)(v84 + 496) = _allocateUninitializedArray<A>(_:)();
  id v1 = type metadata accessor for MatchedMedName();
  if (MEMORY[0x2611C8A30](v82, v1) < 0) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  *(void *)(v84 + 248) = specialized Collection<>.makeIterator()();
  *(void *)(v84 + 256) = v3;
  *(void *)(v84 + 264) = v4;
  while (1)
  {
    uint64_t v89 = specialized IndexingIterator.next()();
    if (v5) {
      break;
    }
    *(void *)(v84 + 640) = v89;
    swift_bridgeObjectRetain();
    Array.subscript.getter();
    uint64_t v80 = *(void *)(v84 + 648);
    swift_bridgeObjectRelease();
    *(void *)(v84 + 656) = v80;
    Array.append(_:)();
  }
  swift_bridgeObjectRelease();
  *(void *)(v84 + 504) = _allocateUninitializedArray<A>(_:)();
  id v77 = *(void *)(v84 + 496);
  swift_bridgeObjectRetain();
  *(void *)(v84 + 512) = v77;
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection<>.makeIterator()();
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    id v76 = *(id *)(v84 + 520);
    *(void *)(v84 + 896) = v76;
    if (!v76) {
      break;
    }
    *(void *)(v84 + 528) = v76;
    *(void *)(v84 + 536) = objc_msgSend(v76, sel_logOrigin);
    *(void *)(v84 + 544) = 2;
    type metadata accessor for HKMedicationDoseEventLogOrigin();
    lazy protocol witness table accessor for type HKMedicationDoseEventLogOrigin and conformance HKMedicationDoseEventLogOrigin();
    if (== infix<A>(_:_:)())
    {
      uint64_t v75 = MedsUndoer.getUpdatedDoseEvent(doseEvent:matchingMeds:)(v76, *(void *)(v84 + 664), *(void *)(v84 + 672), *(void *)(v84 + 680));
      if (v75)
      {
        *(void *)(v84 + 624) = v75;
        uint64_t v6 = v75;
        *(void *)(v84 + 632) = v75;
        Array.append(_:)();

        uint64_t v74 = v78;
        goto LABEL_26;
      }
      uint64_t v7 = *(void *)(v84 + 768);
      uint64_t v69 = *(void *)(v84 + 736);
      uint64_t v67 = *(void *)(v84 + 744);
      uint64_t v68 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v7, v68, v69);
      swift_endAccess();
      oslog = Logger.logObject.getter();
      uint64_t v71 = static os_log_type_t.error.getter();
      *(void *)(v84 + 584) = 2;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t size = *(_DWORD *)(v84 + 952);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      id v73 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v71))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        char v64 = createStorage<A>(capacity:type:)(0);
        uint64_t v65 = createStorage<A>(capacity:type:)(0);
        *(void *)(v84 + 592) = buf;
        *(void *)(v84 + 600) = v64;
        *(void *)(v84 + 608) = v65;
        serialize(_:at:)(0, (unsigned char **)(v84 + 592));
        serialize(_:at:)(0, (unsigned char **)(v84 + 592));
        *(void *)(v84 + 616) = v73;
        char v66 = (void *)swift_task_alloc();
        v66[2] = v84 + 592;
        v66[3] = v84 + 600;
        v66[4] = v84 + 608;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25DE00000, oslog, v71, "Failed to get a matching med for this doseEvent, skipping", buf, size);
        destroyStorage<A>(_:count:)(v64, 0, v62);
        destroyStorage<A>(_:count:)(v65, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
        uint64_t v60 = 0;
        unint64_t v61 = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v60 = v78;
        unint64_t v61 = v79;
      }
      uint64_t v58 = *(void *)(v84 + 768);
      unint64_t v59 = *(void *)(v84 + 736);
      uint64_t v57 = *(void *)(v84 + 744);

      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v58, v59);
      uint64_t v78 = v60;
      uint64_t v79 = v61;
    }
    else
    {
      uint64_t v56 = objc_msgSend(v76, sel_persistedUUID);
      if (v56)
      {
        uint64_t v53 = *(void *)(v84 + 720);
        uint64_t v54 = *(void *)(v84 + 696);
        uint64_t v55 = *(void *)(v84 + 688);
        unint64_t v52 = *(void *)(v84 + 704);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v55, v53, v54);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v55, 0, 1, v54);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v84 + 704) + 56))(*(void *)(v84 + 688), 1, 1, *(void *)(v84 + 696));
      }
      if ((*(unsigned int (**)(void, uint64_t, void))(*(void *)(v84 + 704) + 48))(*(void *)(v84 + 688), 1, *(void *)(v84 + 696)) != 1)
      {
        uint64_t v8 = *(void *)(v84 + 760);
        uint64_t v34 = *(void *)(v84 + 736);
        unint64_t v35 = *(void *)(v84 + 728);
        uint64_t v39 = *(void *)(v84 + 720);
        uint64_t v40 = *(void *)(v84 + 696);
        uint64_t v32 = *(void *)(v84 + 744);
        uint64_t v37 = *(void *)(v84 + 704);
        uint64_t v41 = *(void (**)(void))(v37 + 32);
        v41();
        uint64_t v33 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v8, v33, v34);
        swift_endAccess();
        uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16);
        v36(v39, v35, v40);
        uint64_t v38 = (*(unsigned __int8 *)(v37 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
        uint64_t v42 = swift_allocObject();
        ((void (*)(unint64_t, uint64_t, uint64_t))v41)(v42 + v38, v39, v40);
        swift_retain();
        unint64_t v44 = swift_allocObject();
        *(void *)(v44 + 16) = partial apply for implicit closure #1 in MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:);
        *(void *)(v44 + 24) = v42;
        swift_release();
        log = Logger.logObject.getter();
        id v51 = static os_log_type_t.debug.getter();
        *(void *)(v84 + 552) = 12;
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint64_t v43 = *(_DWORD *)(v84 + 948);
        uint64_t v46 = swift_allocObject();
        *(unsigned char *)(v46 + 16) = 32;
        uint64_t v47 = swift_allocObject();
        *(unsigned char *)(v47 + 16) = 8;
        uint64_t v45 = swift_allocObject();
        *(void *)(v45 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
        *(void *)(v45 + 24) = v44;
        uint64_t v48 = swift_allocObject();
        *(void *)(v48 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(void *)(v48 + 24) = v45;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        _allocateUninitializedArray<A>(_:)();
        uint64_t v49 = v9;
        swift_retain();
        *uint64_t v49 = partial apply for closure #1 in OSLogArguments.append(_:);
        v49[1] = v46;
        swift_retain();
        v49[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v49[3] = v47;
        swift_retain();
        v49[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v49[5] = v48;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(log, v51))
        {
          id v29 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v30 = createStorage<A>(capacity:type:)(0);
          os_log_type_t v31 = createStorage<A>(capacity:type:)(1);
          *(void *)(v84 + 560) = v29;
          *(void *)(v84 + 568) = v30;
          *(void *)(v84 + 576) = v31;
          serialize(_:at:)(2, (unsigned char **)(v84 + 560));
          serialize(_:at:)(1, (unsigned char **)(v84 + 560));
          *(void *)(v84 + 352) = partial apply for closure #1 in OSLogArguments.append(_:);
          *(void *)(v84 + 360) = v46;
          closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 352), v84 + 560, v84 + 568, v84 + 576);
          *(void *)(v84 + 352) = partial apply for closure #1 in OSLogArguments.append(_:);
          *(void *)(v84 + 360) = v47;
          closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 352), v84 + 560, v84 + 568, v84 + 576);
          *(void *)(v84 + 352) = partial apply for closure #1 in OSLogArguments.append(_:);
          *(void *)(v84 + 360) = v48;
          closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 352), v84 + 560, v84 + 568, v84 + 576);
          _os_log_impl(&dword_25DE00000, log, v51, "Deleting as needed doseEvent with persistent uuid: %s", v29, v43);
          destroyStorage<A>(_:count:)(v30, 0, v28);
          destroyStorage<A>(_:count:)(v31, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](v29, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          uint64_t v26 = 0;
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          uint64_t v26 = v78;
        }
        *(void *)(v84 + 904) = v26;
        uint64_t v19 = *(void *)(v84 + 760);
        uint64_t v20 = *(void *)(v84 + 736);
        uint64_t v21 = *(void *)(v84 + 728);
        uint64_t v10 = *(void *)(v84 + 720);
        uint64_t v23 = *(void *)(v84 + 696);
        uint64_t v25 = *(id *)(v84 + 680);
        uint64_t v18 = *(void *)(v84 + 744);
        uint64_t v22 = *(void *)(v84 + 704);

        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v20);
        uint64_t v11 = v25;
        v36(v10, v21, v23);
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        *(void *)(v84 + 912) = isa;
        uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
        *(void *)(v84 + 920) = v12;
        *(void *)(v84 + 928) = (v22 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v12(v10, v23);
        *(void *)(v84 + 80) = *(void *)(v84 + 368);
        *(void *)(v84 + 120) = v27;
        *(void *)(v84 + 88) = MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:);
        *(void *)(v84 + 216) = swift_continuation_init();
        *(void *)(v84 + 184) = MEMORY[0x263EF8330];
        *(_DWORD *)(v84 + 192) = 0x40000000;
        *(_DWORD *)(v84 + 196) = 0;
        *(void *)(v84 + 200) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) @Sendable (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
        *(void *)(v84 + 208) = &block_descriptor_68;
        objc_msgSend(v25, sel_deleteDoseEventWithPersistentUUID_completion_, isa);
        return __swift_continuation_await_point();
      }
      outlined destroy of UUID?(*(void *)(v84 + 688));
      uint64_t v74 = v78;
LABEL_26:

      uint64_t v78 = v74;
    }
  }
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v84 + 864);
  uint64_t v16 = *(void *)(v84 + 848);
  uint64_t v14 = *(void *)(v84 + 824);
  outlined destroy of [HKQuantityType]();
  uint64_t v17 = *(void *)(v84 + 504);
  swift_bridgeObjectRetain();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  v15(v16, v14);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)(v84 + 368) + 8);
  return v13(v17);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = *v0;
  uint64_t v5 = *v0;
  *(void *)(v5 + 368) = *v0;
  id v1 = *(void *)(v4 + 112);
  *(void *)(v5 + 936) = v1;
  if (v1)
  {
    objc_super v2 = MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:);
  }
  else
  {
    objc_super v2 = MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Class isa;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(void);
  uint64_t v39;
  uint32_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  NSObject *log;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint8_t *buf;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint32_t size;
  os_log_type_t v69;
  NSObject *oslog;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t i;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;

  uint64_t v82 = (void (*)(uint64_t, uint64_t))v0[115];
  uint64_t v79 = (void *)v0[114];
  uint64_t v80 = v0[91];
  uint64_t v81 = v0[87];
  id v1 = (void *)v0[85];
  v0[46] = v0;

  v82(v80, v81);
  uint64_t v83 = v0[113];
  while (2)
  {
    uint64_t v72 = v83;
    id v73 = v49;
LABEL_26:

    id v76 = v72;
    for (uint64_t i = v73; ; uint64_t i = v59)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
      IndexingIterator.next()();
      id v77 = *(void **)(v78 + 520);
      *(void *)(v78 + 896) = v77;
      if (!v77)
      {
        uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v78 + 864);
        uint64_t v13 = *(void *)(v78 + 848);
        uint64_t v11 = *(void *)(v78 + 824);
        outlined destroy of [HKQuantityType]();
        uint64_t v14 = *(void *)(v78 + 504);
        swift_bridgeObjectRetain();
        outlined destroy of [HKQuantityType]();
        outlined destroy of [HKQuantityType]();
        outlined destroy of [HKQuantityType]();
        outlined destroy of [HKQuantityType]();
        v12(v13, v11);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v10 = *(uint64_t (**)(uint64_t))(*(void *)(v78 + 368) + 8);
        return v10(v14);
      }
      *(void *)(v78 + 528) = v77;
      *(void *)(v78 + 536) = objc_msgSend(v77, sel_logOrigin);
      *(void *)(v78 + 544) = 2;
      type metadata accessor for HKMedicationDoseEventLogOrigin();
      lazy protocol witness table accessor for type HKMedicationDoseEventLogOrigin and conformance HKMedicationDoseEventLogOrigin();
      if ((== infix<A>(_:_:)() & 1) == 0) {
        break;
      }
      uint64_t v74 = MedsUndoer.getUpdatedDoseEvent(doseEvent:matchingMeds:)(v77, *(void *)(v78 + 664), *(void *)(v78 + 672), *(void *)(v78 + 680));
      if (v74)
      {
        *(void *)(v78 + 624) = v74;
        objc_super v2 = v74;
        *(void *)(v78 + 632) = v74;
        Array.append(_:)();

        uint64_t v72 = v76;
        id v73 = i;
        goto LABEL_26;
      }
      uint64_t v3 = *(void *)(v78 + 768);
      uint64_t v67 = *(void *)(v78 + 736);
      uint64_t v65 = *(void *)(v78 + 744);
      char v66 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v3, v66, v67);
      swift_endAccess();
      oslog = Logger.logObject.getter();
      uint64_t v69 = static os_log_type_t.error.getter();
      *(void *)(v78 + 584) = 2;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t size = *(_DWORD *)(v78 + 952);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v71 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v69))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v62 = createStorage<A>(capacity:type:)(0);
        Swift::Int v63 = createStorage<A>(capacity:type:)(0);
        *(void *)(v78 + 592) = buf;
        *(void *)(v78 + 600) = v62;
        *(void *)(v78 + 608) = v63;
        serialize(_:at:)(0, (unsigned char **)(v78 + 592));
        serialize(_:at:)(0, (unsigned char **)(v78 + 592));
        *(void *)(v78 + 616) = v71;
        char v64 = (void *)swift_task_alloc();
        v64[2] = v78 + 592;
        v64[3] = v78 + 600;
        v64[4] = v78 + 608;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        uint64_t result = Sequence.forEach(_:)();
        if (v76) {
          return result;
        }
        swift_task_dealloc();
        _os_log_impl(&dword_25DE00000, oslog, v69, "Failed to get a matching med for this doseEvent, skipping", buf, size);
        destroyStorage<A>(_:count:)(v62, 0, v60);
        destroyStorage<A>(_:count:)(v63, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
        uint64_t v58 = 0;
        unint64_t v59 = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v58 = v76;
        unint64_t v59 = i;
      }
      uint64_t v56 = *(void *)(v78 + 768);
      uint64_t v57 = *(void *)(v78 + 736);
      uint64_t v55 = *(void *)(v78 + 744);

      (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v56, v57);
      id v76 = v58;
    }
    uint64_t v54 = objc_msgSend(v77, sel_persistedUUID);
    if (v54)
    {
      id v51 = *(void *)(v78 + 720);
      unint64_t v52 = *(void *)(v78 + 696);
      uint64_t v53 = *(void *)(v78 + 688);
      unint64_t v50 = *(void *)(v78 + 704);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v53, v51, v52);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v50 + 56))(v53, 0, 1, v52);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v78 + 704) + 56))(*(void *)(v78 + 688), 1, 1, *(void *)(v78 + 696));
    }
    if ((*(unsigned int (**)(void, uint64_t, void))(*(void *)(v78 + 704) + 48))(*(void *)(v78 + 688), 1, *(void *)(v78 + 696)) == 1)
    {
      outlined destroy of UUID?(*(void *)(v78 + 688));
      uint64_t v83 = v76;
      uint64_t v49 = i;
      continue;
    }
    break;
  }
  uint64_t v5 = *(void *)(v78 + 760);
  os_log_type_t v31 = *(void *)(v78 + 736);
  uint64_t v32 = *(void *)(v78 + 728);
  uint64_t v36 = *(void *)(v78 + 720);
  uint64_t v37 = *(void *)(v78 + 696);
  id v29 = *(void *)(v78 + 744);
  uint64_t v34 = *(void *)(v78 + 704);
  uint64_t v38 = *(void (**)(void))(v34 + 32);
  v38();
  uint64_t v30 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v5, v30, v31);
  swift_endAccess();
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
  v33(v36, v32, v37);
  unint64_t v35 = (*(unsigned __int8 *)(v34 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v39 = swift_allocObject();
  ((void (*)(unint64_t, uint64_t, uint64_t))v38)(v39 + v35, v36, v37);
  swift_retain();
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = partial apply for implicit closure #1 in MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:);
  *(void *)(v41 + 24) = v39;
  swift_release();
  log = Logger.logObject.getter();
  uint64_t v48 = static os_log_type_t.debug.getter();
  *(void *)(v78 + 552) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v40 = *(_DWORD *)(v78 + 948);
  uint64_t v43 = swift_allocObject();
  *(unsigned char *)(v43 + 16) = 32;
  unint64_t v44 = swift_allocObject();
  *(unsigned char *)(v44 + 16) = 8;
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  *(void *)(v42 + 24) = v41;
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v45 + 24) = v42;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v46 = v6;
  swift_retain();
  uint64_t *v46 = partial apply for closure #1 in OSLogArguments.append(_:);
  v46[1] = v43;
  swift_retain();
  v46[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v46[3] = v44;
  swift_retain();
  v46[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v46[5] = v45;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v48))
  {
    uint64_t v26 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v27 = createStorage<A>(capacity:type:)(0);
    uint64_t v28 = createStorage<A>(capacity:type:)(1);
    *(void *)(v78 + 560) = v26;
    *(void *)(v78 + 568) = v27;
    *(void *)(v78 + 576) = v28;
    serialize(_:at:)(2, (unsigned char **)(v78 + 560));
    serialize(_:at:)(1, (unsigned char **)(v78 + 560));
    *(void *)(v78 + 352) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v78 + 360) = v43;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 352), v78 + 560, v78 + 568, v78 + 576);
    if (v76) {
      return result;
    }
    *(void *)(v78 + 352) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v78 + 360) = v44;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 352), v78 + 560, v78 + 568, v78 + 576);
    *(void *)(v78 + 352) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v78 + 360) = v45;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 352), v78 + 560, v78 + 568, v78 + 576);
    _os_log_impl(&dword_25DE00000, log, v48, "Deleting as needed doseEvent with persistent uuid: %s", v26, v40);
    destroyStorage<A>(_:count:)(v27, 0, v25);
    destroyStorage<A>(_:count:)(v28, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v26, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v23 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v23 = v76;
  }
  *(void *)(v78 + 904) = v23;
  uint64_t v16 = *(void *)(v78 + 760);
  uint64_t v17 = *(void *)(v78 + 736);
  uint64_t v18 = *(void *)(v78 + 728);
  uint64_t v7 = *(void *)(v78 + 720);
  uint64_t v20 = *(void *)(v78 + 696);
  uint64_t v22 = *(id *)(v78 + 680);
  uint64_t v15 = *(void *)(v78 + 744);
  uint64_t v19 = *(void *)(v78 + 704);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
  uint64_t v8 = v22;
  v33(v7, v18, v20);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  *(void *)(v78 + 912) = isa;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  *(void *)(v78 + 920) = v9;
  *(void *)(v78 + 928) = (v19 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v9(v7, v20);
  *(void *)(v78 + 80) = *(void *)(v78 + 368);
  *(void *)(v78 + 120) = v24;
  *(void *)(v78 + 88) = MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:);
  *(void *)(v78 + 216) = swift_continuation_init();
  *(void *)(v78 + 184) = MEMORY[0x263EF8330];
  *(_DWORD *)(v78 + 192) = 0x40000000;
  *(_DWORD *)(v78 + 196) = 0;
  *(void *)(v78 + 200) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) @Sendable (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
  *(void *)(v78 + 208) = &block_descriptor_68;
  objc_msgSend(v22, sel_deleteDoseEventWithPersistentUUID_completion_, isa);
  return __swift_continuation_await_point();
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 864);
  uint64_t v16 = *(void **)(v0 + 856);
  uint64_t v17 = *(void *)(v0 + 848);
  uint64_t v18 = *(void *)(v0 + 824);
  uint64_t v15 = *(void **)(v0 + 680);
  *(void *)(v0 + 368) = v0;
  swift_willThrow();

  v19(v17, v18);
  uint64_t v20 = *(void **)(v0 + 880);
  id v1 = *(void *)(v0 + 752);
  uint64_t v21 = *(void *)(v0 + 744);
  uint64_t v23 = *(void *)(v0 + 736);
  objc_super v2 = v20;
  *(void *)(v0 + 400) = v20;
  uint64_t v22 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v1, v22, v23);
  swift_endAccess();
  uint64_t v26 = Logger.logObject.getter();
  uint64_t v25 = static os_log_type_t.error.getter();
  *(void *)(v0 + 408) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v24 = *(unsigned int *)(v0 + 944);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v27 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v26, v25))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 416) = buf;
    *(void *)(v14 + 424) = v11;
    *(void *)(v14 + 432) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 416));
    serialize(_:at:)(0, (unsigned char **)(v14 + 416));
    *(void *)(v14 + 440) = v27;
    uint64_t v13 = (void *)swift_task_alloc();
    v13[2] = v14 + 416;
    v13[3] = v14 + 424;
    void v13[4] = v14 + 432;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v26, v25, "failed to get or delete dose events in convertMatchedMedNamesToDoseEvents", buf, v24);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v14 + 752);
  uint64_t v7 = *(void *)(v14 + 736);
  uint64_t v5 = *(void *)(v14 + 744);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  type metadata accessor for HKMedicationExposableDoseEvent();
  uint64_t v8 = _allocateUninitializedArray<A>(_:)();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)(v14 + 368) + 8);
  return v3(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 920);
  uint64_t v16 = *(id *)(v0 + 912);
  uint64_t v20 = *(void **)(v0 + 896);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v0 + 864);
  uint64_t v23 = *(void *)(v0 + 848);
  uint64_t v21 = *(void *)(v0 + 824);
  uint64_t v17 = *(void *)(v0 + 728);
  uint64_t v18 = *(void *)(v0 + 696);
  uint64_t v15 = *(id *)(v0 + 680);
  *(void *)(v0 + 368) = v0;
  swift_willThrow();

  v19(v17, v18);
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  v22(v23, v21);
  uint64_t v24 = *(void **)(v0 + 936);
  id v1 = *(void *)(v0 + 752);
  uint64_t v25 = *(void *)(v0 + 744);
  uint64_t v27 = *(void *)(v0 + 736);
  objc_super v2 = v24;
  *(void *)(v0 + 400) = v24;
  uint64_t v26 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v1, v26, v27);
  swift_endAccess();
  uint64_t v30 = Logger.logObject.getter();
  id v29 = static os_log_type_t.error.getter();
  *(void *)(v0 + 408) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v28 = *(unsigned int *)(v0 + 944);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  os_log_type_t v31 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v30, v29))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 416) = buf;
    *(void *)(v14 + 424) = v11;
    *(void *)(v14 + 432) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 416));
    serialize(_:at:)(0, (unsigned char **)(v14 + 416));
    *(void *)(v14 + 440) = v31;
    uint64_t v13 = (void *)swift_task_alloc();
    v13[2] = v14 + 416;
    v13[3] = v14 + 424;
    void v13[4] = v14 + 432;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v30, v29, "failed to get or delete dose events in convertMatchedMedNamesToDoseEvents", buf, v28);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v14 + 752);
  uint64_t v7 = *(void *)(v14 + 736);
  uint64_t v5 = *(void *)(v14 + 744);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  type metadata accessor for HKMedicationExposableDoseEvent();
  uint64_t v8 = _allocateUninitializedArray<A>(_:)();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(*(void *)(v14 + 368) + 8);
  return v3(v8);
}

uint64_t implicit closure #2 in MedsUndoer.undo(matchingMeds:)(uint64_t a1)
{
  unint64_t v1 = type metadata accessor for HKMedicationExposableDoseEvent();
  MEMORY[0x2611C8A30](a1, v1);
  return String.init<A>(describing:)();
}

void @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [HKMedicationExposableDoseEvent](uint64_t a1, id a2, void *a3)
{
  id v3 = a2;
  id v4 = a3;
  uint64_t v12 = *(void *)(a1 + 32);
  if (a3)
  {
    id v7 = a3;
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v12, (uint64_t)a3, v8);
  }
  else
  {
    id v5 = a2;
    type metadata accessor for HKMedicationExposableDoseEvent();
    uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    _resumeUnsafeThrowingContinuation<A>(_:_:)(v12, (uint64_t)&v13, v6);
  }
}

uint64_t closure #1 in MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a1;
  v7[1] = a2;
  id v24 = 0;
  id v23 = 0;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v18 - 8);
  uint64_t v14 = v18 - 8;
  unint64_t v9 = (*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v8);
  uint64_t v15 = (char *)v7 - v9;
  unint64_t v10 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v4 = (id *)MEMORY[0x270FA5388](v2);
  uint64_t v17 = (char *)v7 - v10;
  id v24 = *v4;
  id v12 = *v5;
  id v23 = v12;
  unint64_t v11 = 0x1F6B15000uLL;
  id v21 = [v24 (SEL)0x1F6B15B18];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  id v16 = [v12 (SEL)(v11 + 2840)];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  int v22 = static Date.< infix(_:_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v19 = v13 + 8;
  v20(v15, v18);

  v20(v17, v18);
  return v22 & 1;
}

uint64_t closure #2 in MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)(id *a1)
{
  id v4 = *a1;
  objc_msgSend(*a1, sel_status);
  type metadata accessor for HKMedicationDoseEventStatus();
  lazy protocol witness table accessor for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus();
  char v5 = == infix<A>(_:_:)();
  id v1 = v4;
  if (v5)
  {
    char v3 = 1;
  }
  else
  {
    objc_msgSend(v4, sel_status);
    char v3 = == infix<A>(_:_:)();
  }

  return v3 & 1;
}

id MedsUndoer.getUpdatedDoseEvent(doseEvent:matchingMeds:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v190 = a1;
  uint64_t v177 = a2;
  uint64_t v175 = a3;
  uint64_t v176 = a4;
  uint64_t v197 = partial apply for implicit closure #1 in MedsUndoer.getUpdatedDoseEvent(doseEvent:matchingMeds:);
  uint64_t v201 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v203 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v205 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v208 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v173 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v255 = 0;
  uint64_t v254 = 0;
  uint64_t v252 = 0;
  uint64_t v253 = 0;
  uint64_t v247 = 0;
  uint64_t v248 = 0;
  uint64_t v182 = 0;
  uint64_t v174 = 0;
  id v238 = 0;
  id v228 = 0;
  id v227 = 0;
  id v225 = 0;
  uint64_t v186 = type metadata accessor for Logger();
  uint64_t v183 = *(void **)(v186 - 8);
  uint64_t v184 = v186 - 8;
  unint64_t v178 = (v183[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v190);
  uint64_t v179 = (char *)&v42 - v178;
  unint64_t v180 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v42 - v180;
  uint64_t v181 = (char *)&v42 - v180;
  uint64_t v255 = v6;
  uint64_t v254 = v8;
  uint64_t v252 = v9;
  uint64_t v253 = v10;
  uint64_t v185 = Logger.wellnessIntents.unsafeMutableAddressor();
  int v189 = &v251;
  uint64_t v198 = 32;
  swift_beginAccess();
  uint64_t v187 = (void (*)(char *, uint64_t, uint64_t))v183[2];
  v188 = v183 + 2;
  v187(v7, v185, v186);
  swift_endAccess();
  id v11 = v190;
  uint64_t v199 = 7;
  uint64_t v200 = swift_allocObject();
  *(void *)(v200 + 16) = v190;
  unint64_t v212 = Logger.logObject.getter();
  int v213 = static os_log_type_t.debug.getter();
  v193 = &v249;
  uint64_t v249 = 12;
  unint64_t v191 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v192 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v194 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v195 = v250;
  uint64_t v196 = 17;
  uint64_t v204 = swift_allocObject();
  *(unsigned char *)(v204 + 16) = 32;
  uint64_t v206 = swift_allocObject();
  *(unsigned char *)(v206 + 16) = 8;
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = v200;
  uint64_t v202 = v12;
  *(void *)(v12 + 16) = v197;
  *(void *)(v12 + 24) = v13;
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v202;
  uint64_t v209 = v14;
  *(void *)(v14 + 16) = v201;
  *(void *)(v14 + 24) = v15;
  uint64_t v211 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v207 = _allocateUninitializedArray<A>(_:)();
  uint64_t v210 = v16;
  swift_retain();
  uint64_t v17 = v204;
  uint64_t v18 = v210;
  *uint64_t v210 = v203;
  v18[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v17;
  swift_retain();
  uint64_t v19 = v206;
  uint64_t v20 = v210;
  v210[2] = v205;
  v20[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v19;
  swift_retain();
  id v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v209;
  int v22 = v210;
  v210[4] = v208;
  v22[5] = v21;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v212, (os_log_type_t)v213))
  {
    uint64_t v23 = v174;
    uint64_t v166 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v167 = createStorage<A>(capacity:type:)(0);
    uint64_t v168 = createStorage<A>(capacity:type:)(1);
    uint64_t v169 = &v218;
    uint64_t v218 = v166;
    uint64_t v170 = &v217;
    uint64_t v217 = v167;
    uint32_t v171 = &v216;
    uint64_t v216 = v168;
    serialize(_:at:)(2, &v218);
    serialize(_:at:)(1, v169);
    uint64_t v214 = v203;
    uint64_t v215 = v204;
    closure #1 in osLogInternal(_:log:type:)(&v214, (uint64_t)v169, (uint64_t)v170, (uint64_t)v171);
    uint64_t v172 = v23;
    if (v23)
    {
      __break(1u);
    }
    else
    {
      uint64_t v214 = v205;
      uint64_t v215 = v206;
      closure #1 in osLogInternal(_:log:type:)(&v214, (uint64_t)&v218, (uint64_t)&v217, (uint64_t)&v216);
      uint64_t v163 = 0;
      uint64_t v25 = v163;
      uint64_t v214 = v208;
      uint64_t v215 = v209;
      closure #1 in osLogInternal(_:log:type:)(&v214, (uint64_t)&v218, (uint64_t)&v217, (uint64_t)&v216);
      uint64_t v162 = v25;
      _os_log_impl(&dword_25DE00000, v212, (os_log_type_t)v213, "Starting to get updated status dose event for %s", v166, v195);
      destroyStorage<A>(_:count:)(v167, 0, v165);
      destroyStorage<A>(_:count:)(v168, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v166, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v164 = v162;
    }
  }
  else
  {
    uint64_t v24 = v174;
    swift_release();
    swift_release();
    swift_release();
    uint64_t v164 = v24;
  }
  uint64_t v160 = v164;

  uint64_t v157 = (void (*)(char *, uint64_t))v183[1];
  uint64_t v158 = v183 + 1;
  v157(v181, v186);
  swift_bridgeObjectRetain();
  uint64_t v246 = v177;
  uint64_t v159 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  lazy protocol witness table accessor for type [MatchedMedName] and conformance [A]();
  Collection<>.makeIterator()();
  for (uint64_t i = v160; ; uint64_t i = v155)
  {
    uint64_t v155 = i;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[MatchedMedName]>);
    IndexingIterator.next()();
    id v156 = v245;
    if (!v245) {
      break;
    }
    id v154 = v156;
    id v152 = v156;
    id v238 = v156;
    id v153 = objc_msgSend(v156, sel_medicationID);
    if (v153)
    {
      id v151 = v153;
      id v146 = v153;
      uint64_t v147 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v148 = v26;

      uint64_t v149 = v147;
      uint64_t v150 = v148;
    }
    else
    {
      uint64_t v149 = 0;
      uint64_t v150 = 0;
    }
    uint64_t v144 = v150;
    uint64_t v143 = v149;
    swift_bridgeObjectRetain();
    id v141 = objc_msgSend(v190, sel_medicationIdentifier);
    id v140 = objc_msgSend(v141, sel_underlyingIdentifier);
    uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v145 = v27;

    swift_bridgeObjectRetain();
    v235[0] = v143;
    v235[1] = v144;
    uint64_t v236 = v142;
    uint64_t v237 = v145;
    if (v144)
    {
      outlined init with copy of String?(v235, v219);
      if (v237)
      {
        uint64_t v133 = v219[0];
        uint64_t v136 = v219[1];
        swift_bridgeObjectRetain();
        uint64_t v134 = v236;
        unint64_t v137 = v235;
        uint64_t v135 = v237;
        swift_bridgeObjectRetain();
        int v138 = static String.== infix(_:_:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of String.UTF8View();
        int v139 = v138;
        goto LABEL_20;
      }
      outlined destroy of String.UTF8View();
LABEL_22:
      outlined destroy of (String?, String?)();
      int v139 = 0;
      goto LABEL_20;
    }
    if (v237) {
      goto LABEL_22;
    }
    outlined destroy of String.UTF8View();
    int v139 = 1;
LABEL_20:
    int v132 = v139;
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    id v28 = v152;
    id v29 = v190;
    if ((v132 & 1) == 0)
    {
      int v106 = 0;
      goto LABEL_39;
    }
    id v131 = objc_msgSend(v152, sel_scheduleID);
    if (v131)
    {
      id v130 = v131;
      id v125 = v131;
      uint64_t v126 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v127 = v30;

      uint64_t v128 = v126;
      uint64_t v129 = v127;
    }
    else
    {
      uint64_t v128 = 0;
      uint64_t v129 = 0;
    }
    uint64_t v122 = v129;
    uint64_t v123 = v128;
    swift_bridgeObjectRetain();
    id v124 = objc_msgSend(v190, sel_scheduleItemIdentifier);
    if (v124)
    {
      id v121 = v124;
      id v116 = v124;
      uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v118 = v31;

      uint64_t v119 = v117;
      uint64_t v120 = v118;
    }
    else
    {
      uint64_t v119 = 0;
      uint64_t v120 = 0;
    }
    uint64_t v115 = v120;
    uint64_t v114 = v119;
    swift_bridgeObjectRetain();
    v221[0] = v123;
    v221[1] = v122;
    uint64_t v222 = v114;
    uint64_t v223 = v115;
    if (!v122)
    {
      if (!v223)
      {
        outlined destroy of String.UTF8View();
        int v113 = 1;
        goto LABEL_36;
      }
      goto LABEL_37;
    }
    outlined init with copy of String?(v221, v220);
    if (!v223)
    {
      outlined destroy of String.UTF8View();
LABEL_37:
      outlined destroy of (String?, String?)();
      int v113 = 0;
      goto LABEL_36;
    }
    uint64_t v107 = v220[0];
    uint64_t v110 = v220[1];
    swift_bridgeObjectRetain();
    uint64_t v108 = v222;
    id v111 = v221;
    uint64_t v109 = v223;
    swift_bridgeObjectRetain();
    int v112 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of String.UTF8View();
    int v113 = v112;
LABEL_36:
    int v105 = v113;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int v106 = v105;
LABEL_39:
    int v104 = v106;

    if (v104)
    {
      id v103 = objc_msgSend(v152, sel_completionStatus);
      if (v103)
      {
        id v102 = v103;
        id v97 = v103;
        uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v99 = v32;

        uint64_t v100 = v98;
        uint64_t v101 = v99;
      }
      else
      {
        uint64_t v100 = 0;
        uint64_t v101 = 0;
      }
      uint64_t v95 = v101;
      uint64_t v94 = v100;
      swift_bridgeObjectRetain();
      Swift::String v33 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("taken", 5uLL, 1);
      uint64_t countAndFlagsBits = v33._countAndFlagsBits;
      object = v33._object;
      swift_bridgeObjectRetain();
      v232[0] = v94;
      v232[1] = v95;
      uint64_t v233 = countAndFlagsBits;
      uint64_t v234 = object;
      if (v95)
      {
        outlined init with copy of String?(v232, v224);
        if (v234)
        {
          uint64_t v86 = v224[0];
          uint64_t v89 = v224[1];
          swift_bridgeObjectRetain();
          uint64_t v87 = v233;
          id v90 = v232;
          unint64_t v88 = v234;
          swift_bridgeObjectRetain();
          int v91 = static String.== infix(_:_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of String.UTF8View();
          int v92 = v91;
          goto LABEL_49;
        }
        outlined destroy of String.UTF8View();
LABEL_51:
        outlined destroy of (String?, String?)();
        int v92 = 0;
      }
      else
      {
        if (v234) {
          goto LABEL_51;
        }
        outlined destroy of String.UTF8View();
        int v92 = 1;
      }
LABEL_49:
      int v85 = v92;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v85)
      {
        id v83 = objc_msgSend(v190, sel_updateForNewStatus_, 4);
        id v225 = v83;

        outlined destroy of [HKQuantityType]();
        return v83;
      }
      id v82 = objc_msgSend(v152, sel_completionStatus);
      if (v82)
      {
        id v81 = v82;
        id v76 = v82;
        uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v78 = v34;

        uint64_t v79 = v77;
        uint64_t v80 = v78;
      }
      else
      {
        uint64_t v79 = 0;
        uint64_t v80 = 0;
      }
      uint64_t v74 = v80;
      uint64_t v73 = v79;
      swift_bridgeObjectRetain();
      Swift::String v35 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("skipped", 7uLL, 1);
      uint64_t v72 = v35._countAndFlagsBits;
      uint64_t v75 = v35._object;
      swift_bridgeObjectRetain();
      v229[0] = v73;
      v229[1] = v74;
      uint64_t v230 = v72;
      v231 = v75;
      if (v74)
      {
        outlined init with copy of String?(v229, v226);
        if (v231)
        {
          uint64_t v65 = v226[0];
          uint64_t v68 = v226[1];
          swift_bridgeObjectRetain();
          uint64_t v66 = v230;
          uint64_t v69 = v229;
          uint64_t v67 = v231;
          swift_bridgeObjectRetain();
          int v70 = static String.== infix(_:_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of String.UTF8View();
          int v71 = v70;
          goto LABEL_63;
        }
        outlined destroy of String.UTF8View();
LABEL_65:
        outlined destroy of (String?, String?)();
        int v71 = 0;
      }
      else
      {
        if (v231) {
          goto LABEL_65;
        }
        outlined destroy of String.UTF8View();
        int v71 = 1;
      }
LABEL_63:
      int v64 = v71;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v64)
      {
        id v63 = objc_msgSend(v190, sel_updateForNewStatus_, 5);
        id v227 = v63;

        outlined destroy of [HKQuantityType]();
        return v63;
      }
      else
      {
        id v62 = objc_msgSend(v190, sel_updateForNewStatus_, 6);
        id v228 = v62;

        outlined destroy of [HKQuantityType]();
        return v62;
      }
    }
  }
  uint64_t v36 = v179;
  outlined destroy of [HKQuantityType]();
  uint64_t v56 = Logger.wellnessIntents.unsafeMutableAddressor();
  uint64_t v57 = &v244;
  swift_beginAccess();
  v187(v36, v56, v186);
  swift_endAccess();
  uint64_t v60 = Logger.logObject.getter();
  int v59 = static os_log_type_t.error.getter();
  v242[1] = (unsigned char *)2;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v58 = v243;
  uint64_t v61 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v60, (os_log_type_t)v59))
  {
    uint64_t v37 = v155;
    uint64_t v46 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v45 = 0;
    uint64_t v47 = createStorage<A>(capacity:type:)(0);
    uint64_t v48 = createStorage<A>(capacity:type:)(v45);
    unint64_t v52 = v242;
    v242[0] = v46;
    uint64_t v53 = &v241;
    uint64_t v241 = v47;
    unint64_t v50 = &v240;
    uint64_t v240 = v48;
    unsigned int v49 = 0;
    serialize(_:at:)(0, v242);
    serialize(_:at:)(v49, v52);
    uint64_t v239 = v61;
    id v51 = &v42;
    MEMORY[0x270FA5388](&v42);
    uint64_t v38 = v53;
    uint64_t v39 = &v42 - 6;
    uint64_t v54 = &v42 - 6;
    v39[2] = (uint64_t)v52;
    v39[3] = (uint64_t)v38;
    v39[4] = v40;
    uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v37)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25DE00000, v60, (os_log_type_t)v59, "Couldn't find a matching med for this doseEvent, returning nil", v46, v58);
      uint64_t v43 = 0;
      destroyStorage<A>(_:count:)(v47, 0, v44);
      destroyStorage<A>(_:count:)(v48, v43, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v46, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v42 = 0;

  v157(v179, v186);
  return (id)v42;
}

uint64_t implicit closure #1 in MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1);
}

uint64_t implicit closure #1 in MedsUndoer.getUpdatedDoseEvent(doseEvent:matchingMeds:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_medicationIdentifier);
  id v3 = objc_msgSend(v2, sel_underlyingIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v4 = String.init<A>(describing:)();
  return v4;
}

uint64_t protocol witness for MedsUndoing.undo(matchingMeds:) in conformance MedsUndoer(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = *v1;
  uint64_t v7 = v1[1];
  id v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  void *v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return MedsUndoer.undo(matchingMeds:)(a1, v6, v7);
}

uint64_t sub_25DE56128()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in UndoMedsIntentHandler.handle(intent:)()
{
  uint64_t v5 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v8 = (void *)v0[2];
  uint64_t v6 = (const void *)v0[3];
  uint64_t v7 = (void *)v0[4];
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v2;
  *uint64_t v2 = *(void *)(v5 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  uint64_t v3 = async function pointer to @objc closure #1 in UndoMedsIntentHandler.handle(intent:);
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in UndoMedsIntentHandler.handle(intent:)
                                                               + v3))(v8, v6, v7);
}

uint64_t sub_25DE56264()
{
  return swift_deallocObject();
}

uint64_t sub_25DE562A4()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_1()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  unint64_t v1 = lazy protocol witness table accessor for type [MatchedMedName] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type [MatchedMedName] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [MatchedMedName] and conformance [A];
  if (!lazy protocol witness table cache variable for type [MatchedMedName] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MatchedMedName]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [MatchedMedName] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [MatchedMedName] and conformance [A];
  if (!lazy protocol witness table cache variable for type [MatchedMedName] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [MatchedMedName]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [MatchedMedName] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DE563C8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE563F4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE56420()
{
  return swift_deallocObject();
}

uint64_t sub_25DE56460()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for HKMedicationExposableDoseEvent()
{
  uint64_t v2 = lazy cache variable for type metadata for HKMedicationExposableDoseEvent;
  if (!lazy cache variable for type metadata for HKMedicationExposableDoseEvent)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMedicationExposableDoseEvent);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25DE56508()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in MedsUndoer.undo(matchingMeds:)()
{
  return implicit closure #2 in MedsUndoer.undo(matchingMeds:)(*(void *)(v0 + 16));
}

uint64_t sub_25DE56550()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5657C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE565A8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE565E8()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKMedicationExposableDoseEvent] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>;
  if (!lazy protocol witness table cache variable for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ReversedCollection<[HKMedicationExposableDoseEvent]>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>;
  if (!lazy protocol witness table cache variable for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ReversedCollection<[HKMedicationExposableDoseEvent]>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type HKMedicationDoseEventLogOrigin and conformance HKMedicationDoseEventLogOrigin()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKMedicationDoseEventLogOrigin and conformance HKMedicationDoseEventLogOrigin;
  if (!lazy protocol witness table cache variable for type HKMedicationDoseEventLogOrigin and conformance HKMedicationDoseEventLogOrigin)
  {
    type metadata accessor for HKMedicationDoseEventLogOrigin();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKMedicationDoseEventLogOrigin and conformance HKMedicationDoseEventLogOrigin);
    return WitnessTable;
  }
  return v2;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  return a1;
}

uint64_t sub_25DE569F0()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = v1
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  return implicit closure #1 in MedsUndoer.convertMatchedMedNamesToDoseEvents(matchingMeds:)(v3, a1);
}

uint64_t sub_25DE56B34()
{
  return swift_deallocObject();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = type metadata accessor for UUID();
  unint64_t v1 = lazy protocol witness table accessor for type UUID and conformance UUID();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  unint64_t v1 = lazy protocol witness table accessor for type [String] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  unint64_t v1 = lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = type metadata accessor for DateInterval();
  unint64_t v1 = lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t vars8;

  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String?>);
  unint64_t v1 = lazy protocol witness table accessor for type Set<String?> and conformance Set<A>();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  uint64_t v2 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DE56C54()
{
  return swift_deallocObject();
}

uint64_t sub_25DE56C80()
{
  return swift_deallocObject();
}

uint64_t sub_25DE56CAC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE56CEC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE56D2C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in MedsUndoer.getUpdatedDoseEvent(doseEvent:matchingMeds:)()
{
  return implicit closure #1 in MedsUndoer.getUpdatedDoseEvent(doseEvent:matchingMeds:)(*(void **)(v0 + 16));
}

uint64_t sub_25DE56D74()
{
  return swift_deallocObject();
}

uint64_t sub_25DE56DA0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE56DCC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE56E0C()
{
  return swift_deallocObject();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of (String?, String?)()
{
}

void *outlined init with copy of String?(void *a1, void *a2)
{
  *a2 = *a1;
  uint64_t v4 = a1[1];
  swift_bridgeObjectRetain();
  uint64_t result = a2;
  a2[1] = v4;
  return result;
}

uint64_t type metadata accessor for UndoMedsIntentHandler()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for MedsUndoer(void *a1, uint64_t a2)
{
  id v5 = *(id *)a2;
  id v2 = *(id *)a2;
  *a1 = v5;
  uint64_t v7 = *(void **)(a2 + 8);
  id v3 = v7;
  uint64_t result = a1;
  a1[1] = v7;
  return result;
}

void destroy for MedsUndoer(id *a1)
{
}

uint64_t assignWithCopy for MedsUndoer(uint64_t a1, uint64_t a2)
{
  id v7 = *(id *)a2;
  id v2 = *(id *)a2;
  id v3 = *(void **)a1;
  *(void *)a1 = v7;

  uint64_t v9 = *(void **)(a2 + 8);
  id v4 = v9;
  id v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;

  return a1;
}

uint64_t assignWithTake for MedsUndoer(uint64_t a1, void *a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = *a2;

  id v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = a2[1];

  return a1;
}

uint64_t getEnumTagSinglePayload for MedsUndoer(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 > 0x7FFFFFFF && *(unsigned char *)(a1 + 16))
    {
      int v4 = *(_OWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      int v3 = -1;
      if (*(void *)a1 < 0x100000000uLL) {
        int v3 = *(void *)a1;
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MedsUndoer(uint64_t result, unsigned int a2, unsigned int a3)
{
  BOOL v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_OWORD *)uint64_t result = a2 + 0x80000000;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 16) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 16) = 0;
      }
      else {
        __break(1u);
      }
    }
    if (a2) {
      *(void *)uint64_t result = a2 - 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MedsUndoer()
{
  return &type metadata for MedsUndoer;
}

Swift::Bool __swiftcall validateQuantity(identifier:quantity:)(HKQuantityTypeIdentifier identifier, HKQuantity quantity)
{
  HKQuantityTypeIdentifier v149 = identifier;
  Class isa = quantity.super.isa;
  uint64_t v159 = 0;
  id v131 = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  int v132 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  uint64_t v133 = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  uint64_t v134 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  uint64_t v135 = partial apply for implicit closure #3 in validateQuantity(identifier:quantity:);
  uint64_t v136 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  unint64_t v137 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  int v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  int v139 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v140 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v141 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v142 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v145 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v146 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v183 = 0;
  uint64_t v182 = 0;
  id v181 = 0;
  uint64_t v147 = 0;
  id v173 = 0;
  id v172 = 0;
  uint64_t v150 = type metadata accessor for Logger();
  uint64_t v151 = *(void *)(v150 - 8);
  uint64_t v152 = v150 - 8;
  unint64_t v153 = (*(void *)(v151 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v149);
  id v154 = (char *)&v53 - v153;
  unint64_t v155 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  int v4 = (void *)MEMORY[0x270FA5388](v2);
  id v156 = (char *)&v53 - v155;
  uint64_t v183 = v4;
  uint64_t v182 = v5;
  uint64_t v157 = HKQuantityTypeIdentifier.rawValue.getter(v4);
  uint64_t v158 = v6;
  swift_bridgeObjectRetain();
  id v160 = (id)MEMORY[0x2611C8860](v157, v158);
  id v7 = v160;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  id v181 = v160;
  type metadata accessor for HKQuantityType();
  id v161 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_quantityTypeForIdentifier_, v160);
  if (v161)
  {
    id v130 = v161;
    id v98 = v161;
    id v173 = v161;
    type metadata accessor for HKManualEntryValidationController();
    uint64_t v8 = NSDateFormatter.__allocating_init()();
    uint64_t v9 = v156;
    id v95 = v8;
    id v100 = objc_msgSend(v8, sel_validateQuantity_ofType_, isa, v98);

    id v172 = v100;
    uint64_t v96 = Logger.wellnessIntents.unsafeMutableAddressor();
    id v97 = &v171;
    uint64_t v112 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v151 + 16))(v9, v96, v150);
    swift_endAccess();
    uint64_t v10 = isa;
    uint64_t v99 = 24;
    uint64_t v113 = 7;
    uint64_t v11 = swift_allocObject();
    id v12 = v98;
    uint64_t v105 = v11;
    *(void *)(v11 + 16) = isa;
    id v13 = v12;
    uint64_t v108 = swift_allocObject();
    *(void *)(v108 + 16) = v98;
    uint64_t v114 = swift_allocObject();
    *(void *)(v114 + 16) = v100;
    uint64_t v128 = Logger.logObject.getter();
    int v129 = static os_log_type_t.debug.getter();
    id v103 = &v169;
    uint64_t v169 = v112;
    unint64_t v101 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v102 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v104 = v170;
    uint64_t v110 = 17;
    uint64_t v116 = swift_allocObject();
    int v107 = 64;
    *(unsigned char *)(v116 + 16) = 64;
    uint64_t v117 = swift_allocObject();
    int v111 = 8;
    *(unsigned char *)(v117 + 16) = 8;
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = v105;
    uint64_t v106 = v14;
    *(void *)(v14 + 16) = v131;
    *(void *)(v14 + 24) = v15;
    uint64_t v16 = swift_allocObject();
    uint64_t v17 = v106;
    uint64_t v118 = v16;
    *(void *)(v16 + 16) = v132;
    *(void *)(v16 + 24) = v17;
    uint64_t v119 = swift_allocObject();
    *(unsigned char *)(v119 + 16) = v107;
    uint64_t v120 = swift_allocObject();
    *(unsigned char *)(v120 + 16) = v111;
    uint64_t v18 = swift_allocObject();
    uint64_t v19 = v108;
    uint64_t v109 = v18;
    *(void *)(v18 + 16) = v133;
    *(void *)(v18 + 24) = v19;
    uint64_t v20 = swift_allocObject();
    uint64_t v21 = v109;
    uint64_t v121 = v20;
    *(void *)(v20 + 16) = v134;
    *(void *)(v20 + 24) = v21;
    uint64_t v122 = swift_allocObject();
    *(unsigned char *)(v122 + 16) = 32;
    uint64_t v123 = swift_allocObject();
    *(unsigned char *)(v123 + 16) = v111;
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = v114;
    uint64_t v115 = v22;
    *(void *)(v22 + 16) = v135;
    *(void *)(v22 + 24) = v23;
    uint64_t v24 = swift_allocObject();
    uint64_t v25 = v115;
    uint64_t v125 = v24;
    *(void *)(v24 + 16) = v136;
    *(void *)(v24 + 24) = v25;
    uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v124 = _allocateUninitializedArray<A>(_:)();
    uint64_t v126 = v26;
    swift_retain();
    uint64_t v27 = v116;
    id v28 = v126;
    *uint64_t v126 = v137;
    v28[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v27;
    swift_retain();
    uint64_t v29 = v117;
    uint64_t v30 = v126;
    v126[2] = v138;
    v30[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v29;
    swift_retain();
    uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v118;
    uint64_t v32 = v126;
    v126[4] = v139;
    v32[5] = v31;
    swift_retain();
    uint64_t v33 = v119;
    uint64_t v34 = v126;
    v126[6] = v140;
    v34[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v33;
    swift_retain();
    uint64_t v35 = v120;
    uint64_t v36 = v126;
    v126[8] = v141;
    v36[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v35;
    swift_retain();
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v121;
    uint64_t v38 = v126;
    v126[10] = v142;
    v38[11] = v37;
    swift_retain();
    uint64_t v39 = v122;
    uint64_t v40 = v126;
    v126[12] = v143;
    v40[13] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v39;
    swift_retain();
    uint64_t v41 = v123;
    uint64_t v42 = v126;
    v126[14] = v144;
    v42[15] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v41;
    swift_retain();
    uint64_t v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v125;
    uint64_t v44 = v126;
    v126[16] = v145;
    v44[17] = v43;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v128, (os_log_type_t)v129))
    {
      uint64_t v45 = v147;
      unint64_t v88 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v89 = createStorage<A>(capacity:type:)(2);
      uint64_t v90 = createStorage<A>(capacity:type:)(1);
      int v91 = &v166;
      uint64_t v166 = v88;
      int v92 = &v165;
      uint64_t v165 = v89;
      id v93 = &v164;
      uint64_t v164 = v90;
      serialize(_:at:)(2, &v166);
      serialize(_:at:)(3, v91);
      uint64_t v162 = v137;
      uint64_t v163 = v116;
      closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)v91, (uint64_t)v92, (uint64_t)v93);
      uint64_t v94 = v45;
      if (v45)
      {
        __break(1u);
      }
      else
      {
        uint64_t v162 = v138;
        uint64_t v163 = v117;
        closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v166, (uint64_t)&v165, (uint64_t)&v164);
        uint64_t v86 = 0;
        uint64_t v46 = v86;
        uint64_t v162 = v139;
        uint64_t v163 = v118;
        closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v166, (uint64_t)&v165, (uint64_t)&v164);
        uint64_t v85 = v46;
        uint64_t v162 = v140;
        uint64_t v163 = v119;
        closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v166, (uint64_t)&v165, (uint64_t)&v164);
        uint64_t v84 = 0;
        uint64_t v162 = v141;
        uint64_t v163 = v120;
        closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v166, (uint64_t)&v165, (uint64_t)&v164);
        uint64_t v83 = 0;
        uint64_t v162 = v142;
        uint64_t v163 = v121;
        closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v166, (uint64_t)&v165, (uint64_t)&v164);
        uint64_t v82 = 0;
        uint64_t v162 = v143;
        uint64_t v163 = v122;
        closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v166, (uint64_t)&v165, (uint64_t)&v164);
        uint64_t v81 = 0;
        uint64_t v162 = v144;
        uint64_t v163 = v123;
        closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v166, (uint64_t)&v165, (uint64_t)&v164);
        uint64_t v80 = 0;
        uint64_t v162 = v145;
        uint64_t v163 = v125;
        closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v166, (uint64_t)&v165, (uint64_t)&v164);
        _os_log_impl(&dword_25DE00000, v128, (os_log_type_t)v129, "%@ for %@ returned validation result: %s", v88, v104);
        destroyStorage<A>(_:count:)(v89, 2, v87);
        destroyStorage<A>(_:count:)(v90, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v88, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v151 + 8))(v156, v150);
    uint64_t v77 = &v168;
    id v168 = v100;
    uint64_t v75 = &v167;
    uint64_t v167 = 2;
    uint64_t v76 = type metadata accessor for HKManualEntryValidationResult();
    lazy protocol witness table accessor for type HKManualEntryValidationResult and conformance HKManualEntryValidationResult();
    int v78 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;

    int v79 = v78;
  }
  else
  {
    uint64_t v47 = v154;
    uint64_t v66 = Logger.wellnessIntents.unsafeMutableAddressor();
    uint64_t v67 = &v180;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v151 + 16))(v47, v66, v150);
    swift_endAccess();
    uint64_t v73 = Logger.logObject.getter();
    int v72 = static os_log_type_t.error.getter();
    int v70 = &v178;
    uint64_t v178 = 2;
    unint64_t v68 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v69 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v71 = v179;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v74 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v73, (os_log_type_t)v72))
    {
      uint64_t v48 = v147;
      uint64_t v56 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v55 = 0;
      uint64_t v57 = createStorage<A>(capacity:type:)(0);
      uint64_t v58 = createStorage<A>(capacity:type:)(v55);
      id v62 = &v177;
      uint64_t v177 = v56;
      id v63 = &v176;
      uint64_t v176 = v57;
      uint64_t v60 = &v175;
      uint64_t v175 = v58;
      unsigned int v59 = 0;
      serialize(_:at:)(0, &v177);
      serialize(_:at:)(v59, v62);
      uint64_t v174 = v74;
      uint64_t v61 = &v53;
      MEMORY[0x270FA5388](&v53);
      unsigned int v49 = v63;
      unint64_t v50 = &v53 - 6;
      int v64 = &v53 - 6;
      v50[2] = (uint64_t)v62;
      v50[3] = (uint64_t)v49;
      v50[4] = v51;
      uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v48)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_25DE00000, v73, (os_log_type_t)v72, "Couldn't create a HKQuantityType in validateQuantity(identifier: HKQuantityTypeIdentifier, quantity: HKQuantity). Returning false.", v56, v71);
        uint64_t v53 = 0;
        destroyStorage<A>(_:count:)(v57, 0, v54);
        destroyStorage<A>(_:count:)(v58, v53, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v56, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v151 + 8))(v154, v150);
    int v79 = 0;
  }
  return v79 & 1;
}

uint64_t HKQuantityTypeIdentifier.rawValue.getter(void *a1)
{
  id v1 = a1;
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t implicit closure #3 in validateQuantity(identifier:quantity:)()
{
  return String.init<A>(describing:)();
}

unint64_t type metadata accessor for HKManualEntryValidationController()
{
  uint64_t v2 = lazy cache variable for type metadata for HKManualEntryValidationController;
  if (!lazy cache variable for type metadata for HKManualEntryValidationController)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKManualEntryValidationController);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25DE58A04()
{
  return swift_deallocObject();
}

uint64_t sub_25DE58A44()
{
  return swift_deallocObject();
}

uint64_t sub_25DE58A84()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in validateQuantity(identifier:quantity:)()
{
  return implicit closure #3 in validateQuantity(identifier:quantity:)();
}

uint64_t sub_25DE58AB8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE58AE4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE58B10()
{
  return swift_deallocObject();
}

uint64_t sub_25DE58B50()
{
  return swift_deallocObject();
}

uint64_t sub_25DE58B90()
{
  return swift_deallocObject();
}

uint64_t sub_25DE58BBC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE58BE8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE58C28()
{
  return swift_deallocObject();
}

uint64_t sub_25DE58C68()
{
  return swift_deallocObject();
}

uint64_t sub_25DE58C94()
{
  return swift_deallocObject();
}

uint64_t sub_25DE58CC0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE58D00()
{
  return swift_deallocObject();
}

id GetMenstruationPredictionIntentHandler.__allocating_init(store:)(void *a1)
{
  id v2 = objc_allocWithZone(v1);
  return GetMenstruationPredictionIntentHandler.init(store:)(a1);
}

id GetMenstruationPredictionIntentHandler.init(store:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  id v2 = v1;
  id v13 = v1;
  outlined init with copy of QuantityPersisting?(a1, v11);
  if (v11[3])
  {
    outlined init with take of QuantityPersisting(v11, __dst);
  }
  else
  {
    v3.store.super.Class isa = CycleTrackingFetcher.init()().store.super.isa;
    __dst[3] = &type metadata for CycleTrackingFetcher;
    __dst[4] = &protocol witness table for CycleTrackingFetcher;
    __dst[0] = v3.store.super.isa;
    outlined destroy of QuantityPersisting?((uint64_t)v11);
  }
  outlined init with take of QuantityPersisting(__dst, &v7[OBJC_IVAR____TtC19SiriWellnessIntents38GetMenstruationPredictionIntentHandler_store]);

  v10.receiver = v13;
  v10.super_class = ObjectType;
  id v6 = objc_msgSendSuper2(&v10, sel_init);
  id v4 = v6;
  id v13 = v6;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v6;
}

SiriWellnessIntents::CycleTrackingFetcher __swiftcall CycleTrackingFetcher.init()()
{
  id v3 = 0;
  type metadata accessor for HKHealthStore();
  id v2 = NSDateFormatter.__allocating_init()();
  id v0 = v2;
  id v3 = v2;
  outlined destroy of HealthKitPersistor(&v3);
  return (SiriWellnessIntents::CycleTrackingFetcher)v2;
}

uint64_t GetMenstruationPredictionIntentHandler.handle(intent:)(uint64_t a1)
{
  v2[16] = v1;
  v2[15] = a1;
  v2[12] = v2;
  v2[13] = 0;
  v2[14] = 0;
  v2[13] = a1;
  v2[14] = v1;
  return MEMORY[0x270FA2498](GetMenstruationPredictionIntentHandler.handle(intent:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  id v3 = *v1;
  *(void *)(v3 + 96) = *v1;
  *(void *)(v3 + 152) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](GetMenstruationPredictionIntentHandler.handle(intent:), 0);
}

uint64_t GetMenstruationPredictionIntentHandler.handle(intent:)()
{
  uint64_t v1 = v0[16];
  v0[12] = v0;
  outlined init with copy of QuantityPersisting(v1 + OBJC_IVAR____TtC19SiriWellnessIntents38GetMenstruationPredictionIntentHandler_store, (uint64_t)(v0 + 2));
  uint64_t v7 = v0[5];
  uint64_t v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  id v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 8) + **(int **)(v5 + 8));
  id v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 136) = v2;
  *id v2 = *(void *)(v4 + 96);
  v2[1] = GetMenstruationPredictionIntentHandler.handle(intent:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  void *v1;
  char *v3;
  uint64_t (*v4)(char *);
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(id, uint64_t, uint64_t);
  id v9;
  void *v10;
  char v11;
  uint64_t v12;

  uint64_t v11 = *(unsigned char *)(v0 + 160);
  *(void *)(v0 + 96) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (v11)
  {
    uint64_t v5 = (id)v10[15];
    outlined init with copy of QuantityPersisting(v10[16] + OBJC_IVAR____TtC19SiriWellnessIntents38GetMenstruationPredictionIntentHandler_store, (uint64_t)(v10 + 7));
    id v6 = v10[10];
    uint64_t v7 = v10[11];
    __swift_project_boxed_opaque_existential_1(v10 + 7, v6);
    uint64_t v9 = objc_msgSend(v5, sel_projectionFocus);
    uint64_t v8 = (uint64_t (*)(id, uint64_t, uint64_t))(*(void *)(v7 + 16) + **(int **)(v7 + 16));
    uint64_t v1 = (void *)swift_task_alloc();
    v10[18] = v1;
    void *v1 = v10[12];
    v1[1] = GetMenstruationPredictionIntentHandler.handle(intent:);
    return v8(v9, v6, v7);
  }
  else
  {
    type metadata accessor for GetMenstruationPredictionIntentResponse();
    id v3 = GetMenstruationPredictionIntentResponse.__allocating_init(code:userActivity:)(101, 0);
    uint64_t v4 = *(uint64_t (**)(char *))(v10[12] + 8);
    return v4(v3);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;

  *(void *)(v0 + 96) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 152);
  id v2 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 96) + 8);
  return v2(v1);
}

uint64_t GetMenstruationPredictionIntentHandler.handle(intent:)(char a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 96) = *v1;
  *(unsigned char *)(v3 + 160) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](GetMenstruationPredictionIntentHandler.handle(intent:), 0);
}

uint64_t @objc closure #1 in GetMenstruationPredictionIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  v3[4] = a3;
  v3[3] = a1;
  void v3[2] = v3;
  id v5 = a1;
  v3[5] = _Block_copy(a2);
  id v6 = a3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 48) = v7;
  void *v7 = *(void *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return GetMenstruationPredictionIntentHandler.handle(intent:)((uint64_t)a1);
}

uint64_t sub_25DE59778()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in GetMenstruationPredictionIntentHandler.handle(intent:)()
{
  uint64_t v5 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v8 = (void *)v0[2];
  id v6 = (const void *)v0[3];
  uint64_t v7 = (void *)v0[4];
  id v2 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v2;
  *id v2 = *(void *)(v5 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  uint64_t v3 = async function pointer to @objc closure #1 in GetMenstruationPredictionIntentHandler.handle(intent:);
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in GetMenstruationPredictionIntentHandler.handle(intent:)
                                                               + v3))(v8, v6, v7);
}

id GetMenstruationPredictionIntentHandler.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t GetMenstruationPredictionIntentHandler.init()()
{
  if (!"SiriWellnessIntents.GetMenstruationPredictionIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.GetMenstruationPredictionIntentHandler", 58, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/GetMenstruationPredictionIntentHandler.swift", 64, 2, v1, 0xFuLL, 0x14uLL);
  __break(1u);
  return result;
}

id GetMenstruationPredictionIntentHandler.__deallocating_deinit()
{
  uint64_t v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t CycleTrackingFetcher.isReadingAuthorized()(void *a1)
{
  v1[4] = a1;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = a1;
  id v2 = a1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 40) = v3;
  void *v3 = *(void *)(v5 + 16);
  v3[1] = CycleTrackingFetcher.isReadingAuthorized();
  return isSiriAuthorizedToAccessHealthData(store:)((uint64_t)a1);
}

uint64_t CycleTrackingFetcher.isReadingAuthorized()(unsigned int a1)
{
  uint64_t v5 = *v1;
  uint64_t v4 = *(void **)(*v1 + 32);
  *(void *)(v5 + 16) = *v1;
  swift_task_dealloc();

  id v2 = *(uint64_t (**)(void))(*(void *)(v5 + 16) + 8);
  return v2(a1);
}

uint64_t CycleTrackingFetcher.query(projectionFocus:)(uint64_t a1, uint64_t a2)
{
  v2[7] = a2;
  v2[6] = a1;
  v2[2] = v2;
  v2[3] = 0;
  v2[4] = 0;
  v2[3] = a1;
  v2[4] = a2;
  return MEMORY[0x270FA2498](CycleTrackingFetcher.query(projectionFocus:), 0);
}

uint64_t CycleTrackingFetcher.query(projectionFocus:)()
{
  id v6 = (id)v0[7];
  uint64_t v7 = v0[6];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("query(projectionFocus:)", 0x17uLL, 1);
  v0[8] = v1._object;
  id v2 = v6;
  uint64_t v9 = swift_task_alloc();
  v0[9] = v9;
  *(void *)(v9 + 16) = v6;
  *(void *)(v9 + 24) = v7;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v8 + 80) = v3;
  uint64_t MenstruationPredictionIntentResponse = type metadata accessor for GetMenstruationPredictionIntentResponse();
  void *v3 = *(void *)(v8 + 16);
  v3[1] = CycleTrackingFetcher.query(projectionFocus:);
  return MEMORY[0x270FA2318](v8 + 40, 0, 0, v1._countAndFlagsBits, v1._object, partial apply for closure #1 in CycleTrackingFetcher.query(projectionFocus:), v9, MenstruationPredictionIntentResponse);
}

{
  uint64_t v0;
  void *v2;
  uint64_t v3;

  id v2 = *(void **)(*(void *)v0 + 56);
  *(void *)(*(void *)v0 + 16) = *(void *)v0;
  swift_task_dealloc();
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](CycleTrackingFetcher.query(projectionFocus:), 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 16) = v0;
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 8))(*(void *)(v0 + 40));
}

uint64_t closure #1 in CycleTrackingFetcher.query(projectionFocus:)(uint64_t a1, void *a2, uint64_t a3)
{
  v6[1] = a1;
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v14 = partial apply for closure #1 in closure #1 in CycleTrackingFetcher.query(projectionFocus:);
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  uint64_t v18 = 0;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetMenstruationPredictionIntentResponse, Never>);
  uint64_t v9 = *(void *)(v13 - 8);
  uint64_t v10 = v13 - 8;
  uint64_t v7 = v9;
  uint64_t v8 = *(void *)(v9 + 64);
  MEMORY[0x270FA5388](v13);
  uint64_t v12 = (char *)v6 - v3;
  uint64_t v20 = v4;
  uint64_t v19 = v15;
  uint64_t v18 = v16;
  (*(void (**)(void))(v9 + 16))();
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v17 + v11, v12, v13);
  CycleTrackingFetcher.queryCycleTrackingData(projectionFocus:completion:)(v16, (uint64_t)v14, v17, v15);
  return swift_release();
}

uint64_t closure #1 in closure #1 in CycleTrackingFetcher.query(projectionFocus:)(void *a1)
{
  id v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetMenstruationPredictionIntentResponse, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t CycleTrackingFetcher.queryCycleTrackingData(projectionFocus:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v44 = a1;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  id v49 = a4;
  uint64_t v60 = 0;
  uint64_t v45 = partial apply for closure #1 in CycleTrackingFetcher.queryCycleTrackingData(projectionFocus:completion:);
  uint64_t v39 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v77 = 0;
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v74 = 0;
  int v72 = 0;
  uint64_t v73 = 0;
  id v71 = 0;
  uint64_t v50 = 0;
  uint64_t v40 = 0;
  uint64_t v54 = type metadata accessor for Logger();
  uint64_t v51 = *(void *)(v54 - 8);
  uint64_t v52 = v54 - 8;
  unint64_t v41 = (*(void *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (void *)MEMORY[0x270FA5388](v49);
  uint64_t v47 = (char *)&v26 - v41;
  uint64_t v77 = v5;
  uint64_t v75 = v6;
  uint64_t v76 = v7;
  uint64_t v74 = v4;
  id v8 = v4;
  id v9 = v49;
  swift_retain();
  id v10 = v49;
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = v42;
  uint64_t v13 = v43;
  uint64_t v14 = v44;
  uint64_t v15 = v45;
  uint64_t v16 = (void *)v11;
  id v17 = v49;
  uint64_t v46 = v16;
  v16[2] = v49;
  v16[3] = v12;
  v16[4] = v13;
  v16[5] = v17;
  v16[6] = v14;
  int v72 = v15;
  uint64_t v73 = v16;

  type metadata accessor for HKMCAnalysisQuery();
  swift_retain();
  id v18 = HKMCAnalysisQuery.__allocating_init(updateHandler:)((uint64_t)v45, (uint64_t)v46);
  uint64_t v19 = v47;
  id v48 = v18;
  id v71 = v18;
  id v20 = v49;
  objc_msgSend(v49, sel_executeQuery_, v48);

  uint64_t v53 = Logger.wellnessIntents.unsafeMutableAddressor();
  uint64_t v55 = &v70;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v19, v53, v54);
  swift_endAccess();
  id v62 = Logger.logObject.getter();
  int v61 = static os_log_type_t.debug.getter();
  uint64_t v58 = &v68;
  uint64_t v68 = 2;
  unint64_t v56 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v57 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v59 = v69;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v63 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v62, (os_log_type_t)v61))
  {
    uint64_t v21 = v40;
    uint64_t v29 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v28 = 0;
    uint64_t v30 = createStorage<A>(capacity:type:)(0);
    uint64_t v31 = createStorage<A>(capacity:type:)(v28);
    uint64_t v35 = &v67;
    uint64_t v67 = v29;
    uint64_t v36 = &v66;
    uint64_t v66 = v30;
    uint64_t v33 = &v65;
    uint64_t v65 = v31;
    unsigned int v32 = 0;
    serialize(_:at:)(0, &v67);
    serialize(_:at:)(v32, v35);
    uint64_t v64 = v63;
    uint64_t v34 = &v26;
    MEMORY[0x270FA5388](&v26);
    uint64_t v22 = v36;
    uint64_t v23 = &v26 - 6;
    uint64_t v37 = &v26 - 6;
    v23[2] = (uint64_t)v35;
    v23[3] = (uint64_t)v22;
    v23[4] = v24;
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v21)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25DE00000, v62, (os_log_type_t)v61, "Querying menstrual cycles", v29, v59);
      uint64_t v26 = 0;
      destroyStorage<A>(_:count:)(v30, 0, v27);
      destroyStorage<A>(_:count:)(v31, v26, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v29, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v54);
  return swift_release();
}

void closure #1 in CycleTrackingFetcher.queryCycleTrackingData(projectionFocus:completion:)(uint64_t a1, void *a2, void *a3, uint64_t a4, void (*a5)(void), uint64_t a6, uint64_t a7, unsigned char *a8)
{
  uint64_t v145 = a1;
  id v146 = a2;
  id v158 = a3;
  uint64_t v147 = a4;
  id v141 = a5;
  uint64_t v142 = a6;
  uint64_t v143 = a7;
  uint64_t v144 = a8;
  uint64_t v133 = partial apply for implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  uint64_t v134 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  uint64_t v135 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v137 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  int v138 = partial apply for closure #1 in osLogInternal(_:log:type:);
  int v139 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v195 = 0;
  uint64_t v194 = 0;
  uint64_t v193 = 0;
  unint64_t v192 = 0;
  uint64_t v190 = 0;
  uint64_t v191 = 0;
  uint64_t v189 = 0;
  uint64_t v188 = 0;
  uint64_t v182 = 0;
  uint64_t v140 = 0;
  uint32_t v170 = 0;
  uint64_t v169 = 0;
  id v167 = 0;
  uint64_t v148 = type metadata accessor for Logger();
  uint64_t v149 = *(void *)(v148 - 8);
  uint64_t v150 = v148 - 8;
  uint64_t v154 = *(void *)(v149 + 64);
  unint64_t v151 = (v154 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](v147);
  uint64_t v152 = (char *)&v45 - v151;
  unint64_t v153 = v151;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  unint64_t v155 = (char *)&v45 - v153;
  unint64_t v156 = (v154 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v10 = (void *)MEMORY[0x270FA5388](v9);
  uint64_t v157 = (char *)&v45 - v156;
  uint64_t v195 = v11;
  uint64_t v194 = v12;
  uint64_t v193 = v13;
  unint64_t v192 = v10;
  uint64_t v190 = v14;
  uint64_t v191 = v15;
  uint64_t v189 = v16;
  uint64_t v188 = v17;
  objc_msgSend(v10, sel_stopQuery_);
  id v18 = v158;
  if (v158)
  {
    id v132 = v158;
    id v20 = v157;
    id v113 = v158;
    id v167 = v158;
    uint64_t v111 = Logger.wellnessIntents.unsafeMutableAddressor();
    uint64_t v112 = &v166;
    uint64_t v119 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v149 + 16))(v20, v111, v148);
    swift_endAccess();
    id v21 = v113;
    uint64_t v120 = 7;
    uint64_t v121 = swift_allocObject();
    *(void *)(v121 + 16) = v113;
    int v129 = Logger.logObject.getter();
    int v130 = static os_log_type_t.error.getter();
    uint64_t v116 = &v164;
    uint64_t v164 = 12;
    unint64_t v114 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v115 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v117 = v165;
    uint64_t v118 = 17;
    uint64_t v123 = swift_allocObject();
    *(unsigned char *)(v123 + 16) = 64;
    uint64_t v124 = swift_allocObject();
    *(unsigned char *)(v124 + 16) = 8;
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = v121;
    uint64_t v122 = v22;
    *(void *)(v22 + 16) = v133;
    *(void *)(v22 + 24) = v23;
    uint64_t v24 = swift_allocObject();
    uint64_t v25 = v122;
    uint64_t v126 = v24;
    *(void *)(v24 + 16) = v134;
    *(void *)(v24 + 24) = v25;
    uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v125 = _allocateUninitializedArray<A>(_:)();
    uint64_t v127 = v26;
    swift_retain();
    uint64_t v27 = v123;
    uint64_t v28 = v127;
    *uint64_t v127 = v135;
    v28[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v27;
    swift_retain();
    uint64_t v29 = v124;
    uint64_t v30 = v127;
    v127[2] = v136;
    v30[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v29;
    swift_retain();
    uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v126;
    unsigned int v32 = v127;
    v127[4] = v137;
    v32[5] = v31;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v129, (os_log_type_t)v130))
    {
      uint64_t v33 = v140;
      uint32_t v104 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v105 = createStorage<A>(capacity:type:)(1);
      uint64_t v106 = createStorage<A>(capacity:type:)(0);
      int v107 = &v163;
      uint64_t v163 = v104;
      uint64_t v108 = &v162;
      uint64_t v162 = v105;
      uint64_t v109 = &v161;
      uint64_t v161 = v106;
      serialize(_:at:)(2, &v163);
      serialize(_:at:)(1, v107);
      uint64_t v159 = v135;
      uint64_t v160 = v123;
      closure #1 in osLogInternal(_:log:type:)(&v159, (uint64_t)v107, (uint64_t)v108, (uint64_t)v109);
      uint64_t v110 = v33;
      if (v33)
      {
        __break(1u);
      }
      else
      {
        uint64_t v159 = v136;
        uint64_t v160 = v124;
        closure #1 in osLogInternal(_:log:type:)(&v159, (uint64_t)&v163, (uint64_t)&v162, (uint64_t)&v161);
        uint64_t v102 = 0;
        uint64_t v159 = v137;
        uint64_t v160 = v126;
        closure #1 in osLogInternal(_:log:type:)(&v159, (uint64_t)&v163, (uint64_t)&v162, (uint64_t)&v161);
        _os_log_impl(&dword_25DE00000, v129, (os_log_type_t)v130, "Failed to query menstrual cycle analysis: %@", v104, v117);
        destroyStorage<A>(_:count:)(v105, 1, v103);
        destroyStorage<A>(_:count:)(v106, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v104, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v149 + 8))(v157, v148);
    swift_retain();
    id v100 = 0;
    type metadata accessor for GetMenstruationPredictionIntentResponse();
    unint64_t v101 = GetMenstruationPredictionIntentResponse.__allocating_init(code:userActivity:)(5, v100);
    v141();

    swift_release();
    return;
  }
  id v19 = v146;
  if (v146)
  {
    id v131 = v146;
    id v97 = v146;
    unsigned int v98 = objc_msgSend(v146, sel_menstruationProjectionsEnabled);

    int v99 = v98 & 1;
  }
  else
  {
    int v99 = 2;
  }
  char v186 = v99;
  char v187 = 1;
  if (v99 != 2)
  {
    outlined init with copy of Bool?(&v186, &v168);
    if (v187 != 2)
    {
      BOOL v96 = (v168 & 1) == (v187 & 1);
      goto LABEL_21;
    }
    goto LABEL_23;
  }
  if (v187 != 2)
  {
LABEL_23:
    BOOL v96 = 0;
    goto LABEL_21;
  }
  BOOL v96 = 1;
LABEL_21:
  if (v96)
  {
    id v34 = v146;
    if (v146)
    {
      id v95 = v146;
      id v85 = v146;
      uint32_t v170 = v146;
      uint64_t v84 = CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(v146, v144, v143);
      uint64_t v169 = v84;
      swift_retain();
      ((void (*)(char *))v141)(v84);
      swift_release();
    }
    else
    {
      uint64_t v35 = v155;
      uint64_t v86 = Logger.wellnessIntents.unsafeMutableAddressor();
      uint64_t v87 = &v177;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v149 + 16))(v35, v86, v148);
      swift_endAccess();
      id v93 = Logger.logObject.getter();
      int v92 = static os_log_type_t.debug.getter();
      uint64_t v90 = &v175;
      uint64_t v175 = 2;
      unint64_t v88 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v89 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v91 = v176;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v94 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v93, (os_log_type_t)v92))
      {
        uint64_t v36 = v140;
        uint64_t v74 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v73 = 0;
        uint64_t v75 = createStorage<A>(capacity:type:)(0);
        uint64_t v76 = createStorage<A>(capacity:type:)(v73);
        uint64_t v80 = &v174;
        uint64_t v174 = v74;
        uint64_t v81 = &v173;
        uint64_t v173 = v75;
        int v78 = &v172;
        uint64_t v172 = v76;
        unsigned int v77 = 0;
        serialize(_:at:)(0, &v174);
        serialize(_:at:)(v77, v80);
        uint64_t v171 = v94;
        int v79 = &v45;
        MEMORY[0x270FA5388](&v45);
        uint64_t v37 = v81;
        uint64_t v38 = &v45 - 6;
        uint64_t v82 = &v45 - 6;
        v38[2] = v80;
        v38[3] = v37;
        v38[4] = v39;
        uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v36)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_25DE00000, v93, (os_log_type_t)v92, "No menstrual cycle analysis found", v74, v91);
          uint64_t v71 = 0;
          destroyStorage<A>(_:count:)(v75, 0, v72);
          destroyStorage<A>(_:count:)(v76, v71, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](v74, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v149 + 8))(v155, v148);
      swift_retain();
      uint32_t v69 = 0;
      type metadata accessor for GetMenstruationPredictionIntentResponse();
      char v70 = GetMenstruationPredictionIntentResponse.__allocating_init(code:userActivity:)(102, v69);
      v141();

      swift_release();
    }
  }
  else
  {
    uint64_t v40 = v152;
    uint64_t v60 = Logger.wellnessIntents.unsafeMutableAddressor();
    int v61 = &v185;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v149 + 16))(v40, v60, v148);
    swift_endAccess();
    uint64_t v67 = Logger.logObject.getter();
    int v66 = static os_log_type_t.error.getter();
    uint64_t v64 = &v183;
    uint64_t v183 = 2;
    unint64_t v62 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v63 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v65 = v184;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v68 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v67, (os_log_type_t)v66))
    {
      uint64_t v41 = v140;
      uint64_t v50 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v49 = 0;
      uint64_t v51 = createStorage<A>(capacity:type:)(0);
      uint64_t v52 = createStorage<A>(capacity:type:)(v49);
      unint64_t v56 = &v181;
      id v181 = v50;
      unint64_t v57 = &v180;
      uint64_t v180 = v51;
      uint64_t v54 = &v179;
      uint64_t v179 = v52;
      unsigned int v53 = 0;
      serialize(_:at:)(0, &v181);
      serialize(_:at:)(v53, v56);
      uint64_t v178 = v68;
      uint64_t v55 = &v45;
      MEMORY[0x270FA5388](&v45);
      uint64_t v42 = v57;
      uint64_t v43 = &v45 - 6;
      uint64_t v58 = &v45 - 6;
      v43[2] = v56;
      v43[3] = v42;
      v43[4] = v44;
      uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v41)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_25DE00000, v67, (os_log_type_t)v66, "Predictions are not enabled", v50, v65);
        uint64_t v47 = 0;
        destroyStorage<A>(_:count:)(v51, 0, v48);
        destroyStorage<A>(_:count:)(v52, v47, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v50, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v149 + 8))(v152, v148);
    uint64_t v45 = 0;
    type metadata accessor for GetMenstruationPredictionIntentResponse();
    uint64_t v46 = GetMenstruationPredictionIntentResponse.__allocating_init(code:userActivity:)(103, v45);
    uint64_t v182 = v46;
    swift_retain();
    ((void (*)(char *))v141)(v46);
    swift_release();
  }
}

char *CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(void *a1, unsigned char *a2, uint64_t a3)
{
  id v444 = a1;
  v417 = a2;
  uint64_t v416 = a3;
  uint64_t v430 = 0;
  v445 = partial apply for implicit closure #2 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:);
  v452 = partial apply for implicit closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:);
  v454 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  v458 = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_2;
  v462 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v464 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v466 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v468 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v470 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v472 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v475 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v357 = partial apply for closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:);
  v358 = partial apply for implicit closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:);
  v359 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  v360 = partial apply for implicit closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:);
  v361 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  v362 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v363 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v364 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v365 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v366 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v367 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v368 = partial apply for implicit closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:);
  v369 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  v370 = partial apply for implicit closure #6 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:);
  v371 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  v372 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v373 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v374 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v375 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v376 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v377 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  v378 = partial apply for closure #1 in osLogInternal(_:log:type:);
  v379 = partial apply for closure #1 in osLogInternal(_:log:type:);
  v380 = partial apply for closure #1 in osLogInternal(_:log:type:);
  v556 = 0;
  v555 = 0;
  v554 = 0;
  v553 = 0;
  v552 = 0;
  uint64_t v551 = 0;
  uint64_t v550 = 0;
  uint64_t v549 = 0;
  uint64_t v545 = 0;
  uint64_t v434 = 0;
  uint64_t v381 = 0;
  v536 = 0;
  v535 = 0;
  uint64_t v531 = 0;
  uint64_t v532 = 0;
  uint64_t v521 = 0;
  uint64_t v516 = 0;
  uint64_t v512 = 0;
  uint64_t v510 = 0;
  uint64_t v511 = 0;
  unint64_t v382 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  v383 = (char *)&v132 - v382;
  uint64_t v384 = type metadata accessor for Date();
  uint64_t v385 = *(void *)(v384 - 8);
  uint64_t v386 = v384 - 8;
  unint64_t v387 = (*(void *)(v385 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v384);
  v388 = (char *)&v132 - v387;
  unint64_t v389 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v430);
  uint64_t v390 = (uint64_t)&v132 - v389;
  unint64_t v391 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v392 = (uint64_t)&v132 - v391;
  unint64_t v393 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v394 = (uint64_t)&v132 - v393;
  uint64_t v395 = type metadata accessor for DateInterval();
  uint64_t v396 = *(void *)(v395 - 8);
  uint64_t v397 = v395 - 8;
  unint64_t v398 = (*(void *)(v396 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](v430);
  v399 = (char *)&v132 - v398;
  v556 = (char *)&v132 - v398;
  unint64_t v400 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  v401 = (char *)&v132 - v400;
  v555 = (char *)&v132 - v400;
  unint64_t v402 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v9);
  v403 = (char *)&v132 - v402;
  v554 = (char *)&v132 - v402;
  uint64_t v404 = type metadata accessor for Calendar.Identifier();
  uint64_t v405 = *(void *)(v404 - 8);
  uint64_t v406 = v404 - 8;
  unint64_t v407 = (*(void *)(v405 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v430);
  v408 = (char *)&v132 - v407;
  uint64_t v409 = type metadata accessor for Calendar();
  uint64_t v410 = *(void *)(v409 - 8);
  uint64_t v411 = v409 - 8;
  unint64_t v412 = (*(void *)(v410 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v11 = MEMORY[0x270FA5388](v430);
  v413 = (char *)&v132 - v412;
  unint64_t v414 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v11);
  v415 = (char *)&v132 - v414;
  v553 = (char *)&v132 - v414;
  uint64_t v438 = type metadata accessor for Logger();
  v435 = *(void **)(v438 - 8);
  uint64_t v436 = v438 - 8;
  unint64_t v418 = (v435[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = MEMORY[0x270FA5388](v444);
  v419 = (char *)&v132 - v418;
  unint64_t v420 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  v421 = (char *)&v132 - v420;
  unint64_t v422 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  v423 = (char *)&v132 - v422;
  unint64_t v424 = (v18 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  v425 = (char *)&v132 - v424;
  unint64_t v426 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  v427 = (char *)&v132 - v426;
  unint64_t v428 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (void *)MEMORY[0x270FA5388](v21);
  uint64_t v24 = (char *)&v132 - v428;
  v429 = (char *)&v132 - v428;
  v552 = v23;
  uint64_t v551 = v25;
  uint64_t v550 = v26;
  id v433 = objc_msgSend(v23, sel_menstruationProjections);
  unint64_t v431 = type metadata accessor for HKMCProjection();
  uint64_t v432 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v442 = MEMORY[0x2611C8A30](v432, v431);
  uint64_t v549 = v442;
  swift_bridgeObjectRelease();

  uint64_t v437 = Logger.wellnessIntents.unsafeMutableAddressor();
  v441 = &v548;
  uint64_t v459 = 32;
  swift_beginAccess();
  v439 = (void (*)(char *, uint64_t, uint64_t))v435[2];
  v440 = v435 + 2;
  v439(v24, v437, v438);
  swift_endAccess();
  uint64_t v443 = 24;
  uint64_t v460 = 7;
  uint64_t v27 = swift_allocObject();
  id v28 = v444;
  uint64_t v453 = v27;
  *(void *)(v27 + 16) = v442;
  id v29 = v28;
  uint64_t v446 = swift_allocObject();
  *(void *)(v446 + 16) = v444;
  swift_retain();
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = v446;
  uint64_t v461 = v30;
  *(void *)(v30 + 16) = v445;
  *(void *)(v30 + 24) = v31;
  swift_release();
  v479 = Logger.logObject.getter();
  int v480 = static os_log_type_t.debug.getter();
  v449 = &v546;
  uint64_t v546 = 22;
  unint64_t v447 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v448 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v450 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v451 = v547;
  uint64_t v456 = 17;
  uint64_t v465 = swift_allocObject();
  *(unsigned char *)(v465 + 16) = 0;
  uint64_t v467 = swift_allocObject();
  int v457 = 8;
  *(unsigned char *)(v467 + 16) = 8;
  uint64_t v32 = swift_allocObject();
  uint64_t v33 = v453;
  uint64_t v455 = v32;
  *(void *)(v32 + 16) = v452;
  *(void *)(v32 + 24) = v33;
  uint64_t v34 = swift_allocObject();
  uint64_t v35 = v455;
  uint64_t v469 = v34;
  *(void *)(v34 + 16) = v454;
  *(void *)(v34 + 24) = v35;
  uint64_t v471 = swift_allocObject();
  *(unsigned char *)(v471 + 16) = 32;
  uint64_t v473 = swift_allocObject();
  *(unsigned char *)(v473 + 16) = v457;
  uint64_t v36 = swift_allocObject();
  uint64_t v37 = v461;
  uint64_t v463 = v36;
  *(void *)(v36 + 16) = v458;
  *(void *)(v36 + 24) = v37;
  uint64_t v38 = swift_allocObject();
  uint64_t v39 = v463;
  uint64_t v476 = v38;
  *(void *)(v38 + 16) = v462;
  *(void *)(v38 + 24) = v39;
  uint64_t v478 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v474 = _allocateUninitializedArray<A>(_:)();
  v477 = v40;
  swift_retain();
  uint64_t v41 = v465;
  uint64_t v42 = v477;
  *v477 = v464;
  v42[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v41;
  swift_retain();
  uint64_t v43 = v467;
  uint64_t v44 = v477;
  v477[2] = v466;
  v44[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v43;
  swift_retain();
  uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v469;
  uint64_t v46 = v477;
  v477[4] = v468;
  v46[5] = v45;
  swift_retain();
  uint64_t v47 = v471;
  uint64_t v48 = v477;
  v477[6] = v470;
  v48[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v47;
  swift_retain();
  uint64_t v49 = v473;
  uint64_t v50 = v477;
  v477[8] = v472;
  v50[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v49;
  swift_retain();
  uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v476;
  uint64_t v52 = v477;
  v477[10] = v475;
  v52[11] = v51;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v479, (os_log_type_t)v480))
  {
    uint64_t v53 = v381;
    v349 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v348 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v350 = createStorage<A>(capacity:type:)(0);
    uint64_t v351 = createStorage<A>(capacity:type:)(1);
    v353 = &v485;
    v485 = v349;
    v354 = &v484;
    uint64_t v484 = v350;
    v355 = &v483;
    uint64_t v483 = v351;
    unsigned int v352 = 2;
    serialize(_:at:)(2, &v485);
    serialize(_:at:)(v352, v353);
    v481 = v464;
    uint64_t v482 = v465;
    closure #1 in osLogInternal(_:log:type:)(&v481, (uint64_t)v353, (uint64_t)v354, (uint64_t)v355);
    uint64_t v356 = v53;
    if (v53)
    {
      __break(1u);
    }
    else
    {
      v481 = v466;
      uint64_t v482 = v467;
      closure #1 in osLogInternal(_:log:type:)(&v481, (uint64_t)&v485, (uint64_t)&v484, (uint64_t)&v483);
      uint64_t v346 = 0;
      v481 = v468;
      uint64_t v482 = v469;
      closure #1 in osLogInternal(_:log:type:)(&v481, (uint64_t)&v485, (uint64_t)&v484, (uint64_t)&v483);
      uint64_t v345 = 0;
      v481 = v470;
      uint64_t v482 = v471;
      closure #1 in osLogInternal(_:log:type:)(&v481, (uint64_t)&v485, (uint64_t)&v484, (uint64_t)&v483);
      uint64_t v344 = 0;
      v481 = v472;
      uint64_t v482 = v473;
      closure #1 in osLogInternal(_:log:type:)(&v481, (uint64_t)&v485, (uint64_t)&v484, (uint64_t)&v483);
      uint64_t v343 = 0;
      v481 = v475;
      uint64_t v482 = v476;
      closure #1 in osLogInternal(_:log:type:)(&v481, (uint64_t)&v485, (uint64_t)&v484, (uint64_t)&v483);
      uint64_t v342 = 0;
      _os_log_impl(&dword_25DE00000, v479, (os_log_type_t)v480, "Found %ld projections in %s", v349, v451);
      destroyStorage<A>(_:count:)(v350, 0, v348);
      destroyStorage<A>(_:count:)(v351, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v349, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v347 = v342;
    }
  }
  else
  {
    uint64_t v54 = v381;
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v347 = v54;
  }
  uint64_t v55 = v413;
  uint64_t v56 = v347;

  v331 = (void (*)(char *, uint64_t))v435[1];
  v332 = v435 + 1;
  v331(v429, v438);
  (*(void (**)(char *, void, uint64_t))(v405 + 104))(v408, *MEMORY[0x263F07740], v404);
  Calendar.init(identifier:)();
  (*(void (**)(char *, uint64_t))(v405 + 8))(v408, v404);
  (*(void (**)(char *, char *, uint64_t))(v410 + 16))(v55, v415, v409);
  Class isa = Calendar._bridgeToObjectiveC()().super.isa;
  v333 = *(void (**)(char *, uint64_t))(v410 + 8);
  uint64_t v334 = v410 + 8;
  v333(v413, v409);
  uint64_t v337 = HKMCTodayIndex();

  uint64_t v545 = v337;
  id v336 = objc_msgSend(v444, sel_menstruationProjections);
  uint64_t v543 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v338 = &v132;
  unint64_t v57 = (void *)MEMORY[0x270FA5388](v337);
  v339 = &v132 - 4;
  *(&v132 - 2) = v57;
  uint64_t v340 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMCProjection]);
  lazy protocol witness table accessor for type [HKMCProjection] and conformance [A]();
  uint64_t result = (char *)Sequence.first(where:)();
  uint64_t v341 = v56;
  if (v56)
  {
    __break(1u);
  }
  else
  {
    outlined destroy of [HKQuantityType]();

    v330 = v544;
    if (!v544)
    {
      uint64_t v127 = v419;
      uint64_t v147 = Logger.wellness.unsafeMutableAddressor();
      uint64_t v148 = &v542;
      swift_beginAccess();
      v439(v127, v147, v438);
      swift_endAccess();
      unint64_t v151 = Logger.logObject.getter();
      int v150 = static os_log_type_t.error.getter();
      v540[1] = (unsigned char *)2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v149 = v541;
      uint64_t v152 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v151, (os_log_type_t)v150))
      {
        uint64_t v128 = v341;
        unint64_t v137 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v136 = 0;
        uint64_t v138 = createStorage<A>(capacity:type:)(0);
        uint64_t v139 = createStorage<A>(capacity:type:)(v136);
        uint64_t v143 = v540;
        v540[0] = v137;
        uint64_t v144 = &v539;
        uint64_t v539 = v138;
        id v141 = &v538;
        uint64_t v538 = v139;
        unsigned int v140 = 0;
        serialize(_:at:)(0, v540);
        serialize(_:at:)(v140, v143);
        uint64_t v537 = v152;
        uint64_t v142 = &v132;
        MEMORY[0x270FA5388](&v132);
        int v129 = v144;
        int v130 = &v132 - 6;
        uint64_t v145 = &v132 - 6;
        v130[2] = v143;
        v130[3] = v129;
        v130[4] = v131;
        uint64_t v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v128)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_25DE00000, v151, (os_log_type_t)v150, "Found no usable projections in the analysis", v137, v149);
          uint64_t v134 = 0;
          destroyStorage<A>(_:count:)(v138, 0, v135);
          destroyStorage<A>(_:count:)(v139, v134, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](v137, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      v331(v419, v438);
      id v132 = 0;
      type metadata accessor for GetMenstruationPredictionIntentResponse();
      uint64_t v133 = GetMenstruationPredictionIntentResponse.__allocating_init(code:userActivity:)(102, v132);
      v333(v415, v409);
      return v133;
    }
    v329 = v330;
    id v325 = v330;
    v536 = v330;
    v324 = 0;
    type metadata accessor for GetMenstruationPredictionIntentResponse();
    v326 = GetMenstruationPredictionIntentResponse.__allocating_init(code:userActivity:)(4, v324);
    v535 = v326;
    id v533 = objc_msgSend(v325, sel_mostLikelyDays);
    uint64_t v534 = v59;
    Calendar.dateInterval(for:)((uint64_t)v533, v59, v394);
    v327 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v396 + 48);
    uint64_t v328 = v396 + 48;
    if (v327(v394, 1, v395) == 1)
    {
      outlined destroy of DateInterval?(v394);
LABEL_60:
      id v182 = objc_msgSend(v444, sel_cycles);
      if (v182)
      {
        id v181 = v182;
        id v178 = v182;
        type metadata accessor for HKMCCycle();
        uint64_t v179 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v180 = v179;
      }
      else
      {
        uint64_t v180 = 0;
      }
      uint64_t v177 = v180;
      if (!v180) {
        goto LABEL_75;
      }
      uint64_t v176 = v177;
      uint64_t v174 = v177;
      swift_bridgeObjectRetain();
      uint64_t v173 = v530;
      v530[0] = v174;
      uint64_t v172 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMCCycle]);
      lazy protocol witness table accessor for type [HKMCCycle] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      id v175 = (id)v530[1];
      swift_bridgeObjectRelease();
      if (v175)
      {
        id v171 = v175;
        id v164 = v175;
        id v165 = objc_msgSend(v175, sel_menstruationSegment);

        id v528 = objc_msgSend(v165, sel_days);
        uint64_t v529 = v125;
        uint64_t v166 = (uint64_t)v528;
        uint64_t v167 = v125;

        uint64_t v168 = v166;
        uint64_t v169 = v167;
        int v170 = 0;
      }
      else
      {
LABEL_75:
        uint64_t v168 = 0;
        uint64_t v169 = 0;
        int v170 = 1;
      }
      uint64_t v162 = v169;
      uint64_t v163 = v168;
      if ((v170 & 1) == 0)
      {
        uint64_t v160 = v163;
        uint64_t v161 = v162;
        uint64_t v159 = v162;
        uint64_t v158 = v163;
        uint64_t v531 = v163;
        uint64_t v532 = v162;
        static Calendar.current.getter();
        Calendar.dateInterval(for:)(v158, v159, v390);
        v333(v413, v409);
        if (v327(v390, 1, v395) != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v396 + 32))(v399, v390, v395);
          DateInterval.start.getter();
          Class v154 = Date._bridgeToObjectiveC()().super.isa;
          unint64_t v156 = *(void (**)(char *, uint64_t))(v385 + 8);
          uint64_t v155 = v385 + 8;
          v156(v388, v384);
          objc_msgSend(v326, sel_setLastPeriodStart_, v154);

          DateInterval.end.getter();
          Class v157 = Date._bridgeToObjectiveC()().super.isa;
          v156(v388, v384);
          objc_msgSend(v326, sel_setLastPeriodEnd_, v157);

          (*(void (**)(char *, uint64_t))(v396 + 8))(v399, v395);
        }
        else
        {
          outlined destroy of DateInterval?(v390);
        }
      }

      v333(v415, v409);
      return v326;
    }
    v322 = *(void (**)(char *, uint64_t, uint64_t))(v396 + 32);
    uint64_t v323 = v396 + 32;
    v322(v403, v394, v395);
    id v526 = objc_msgSend(v325, sel_allDays);
    uint64_t v527 = v60;
    Calendar.dateInterval(for:)((uint64_t)v526, v60, v392);
    if (v327(v392, 1, v395) == 1)
    {
      outlined destroy of DateInterval?(v392);
      (*(void (**)(char *, uint64_t))(v396 + 8))(v403, v395);
      goto LABEL_60;
    }
    v322(v401, v392, v395);
    id v524 = objc_msgSend(v325, sel_mostLikelyDays);
    uint64_t v525 = v61;
    id v522 = v524;
    uint64_t v523 = v61;
    id v561 = v524;
    uint64_t v562 = v61;
    uint64_t v560 = (uint64_t)v524 + v61 - 1;
    if (v560 < (uint64_t)v524) {
      uint64_t v321 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v321 = v560;
    }
    uint64_t v320 = v321;
    uint64_t v521 = v321;
    id v519 = objc_msgSend(v325, sel_allDays);
    uint64_t v520 = v62;
    id v517 = v519;
    uint64_t v518 = v62;
    id v558 = v519;
    uint64_t v559 = v62;
    uint64_t v557 = (uint64_t)v519 + v62 - 1;
    if (v557 < (uint64_t)v519) {
      uint64_t v319 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v319 = v557;
    }
    unint64_t v63 = v427;
    uint64_t v299 = v319;
    uint64_t v516 = v319;
    uint64_t v296 = Logger.wellnessIntents.unsafeMutableAddressor();
    uint64_t v297 = &v515;
    uint64_t v305 = 32;
    swift_beginAccess();
    v439(v63, v296, v438);
    swift_endAccess();
    uint64_t v298 = 24;
    uint64_t v306 = 7;
    uint64_t v301 = swift_allocObject();
    *(void *)(v301 + 16) = v320;
    uint64_t v307 = swift_allocObject();
    *(void *)(v307 + 16) = v299;
    v317 = Logger.logObject.getter();
    int v318 = static os_log_type_t.debug.getter();
    uint64_t v513 = 22;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v300 = v514;
    uint64_t v303 = 17;
    uint64_t v309 = swift_allocObject();
    *(unsigned char *)(v309 + 16) = 0;
    uint64_t v310 = swift_allocObject();
    int v304 = 8;
    *(unsigned char *)(v310 + 16) = 8;
    uint64_t v64 = swift_allocObject();
    uint64_t v65 = v301;
    uint64_t v302 = v64;
    *(void *)(v64 + 16) = v358;
    *(void *)(v64 + 24) = v65;
    uint64_t v66 = swift_allocObject();
    uint64_t v67 = v302;
    uint64_t v311 = v66;
    *(void *)(v66 + 16) = v359;
    *(void *)(v66 + 24) = v67;
    uint64_t v312 = swift_allocObject();
    *(unsigned char *)(v312 + 16) = 0;
    uint64_t v313 = swift_allocObject();
    *(unsigned char *)(v313 + 16) = v304;
    uint64_t v68 = swift_allocObject();
    uint64_t v69 = v307;
    uint64_t v308 = v68;
    *(void *)(v68 + 16) = v360;
    *(void *)(v68 + 24) = v69;
    uint64_t v70 = swift_allocObject();
    uint64_t v71 = v308;
    uint64_t v315 = v70;
    *(void *)(v70 + 16) = v361;
    *(void *)(v70 + 24) = v71;
    uint64_t v314 = _allocateUninitializedArray<A>(_:)();
    v316 = v72;
    swift_retain();
    uint64_t v73 = v309;
    uint64_t v74 = v316;
    *v316 = v362;
    v74[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v73;
    swift_retain();
    uint64_t v75 = v310;
    uint64_t v76 = v316;
    v316[2] = v363;
    v76[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v75;
    swift_retain();
    unsigned int v77 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v311;
    int v78 = v316;
    v316[4] = v364;
    v78[5] = v77;
    swift_retain();
    uint64_t v79 = v312;
    uint64_t v80 = v316;
    v316[6] = v365;
    v80[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v79;
    swift_retain();
    uint64_t v81 = v313;
    uint64_t v82 = v316;
    v316[8] = v366;
    v82[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v81;
    swift_retain();
    uint64_t v83 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v315;
    uint64_t v84 = v316;
    v316[10] = v367;
    v84[11] = v83;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v317, (os_log_type_t)v318))
    {
      uint64_t v85 = v341;
      v289 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v287 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v288 = 0;
      uint64_t v290 = createStorage<A>(capacity:type:)(0);
      uint64_t v291 = createStorage<A>(capacity:type:)(v288);
      char v292 = &v490;
      v490 = v289;
      uint64_t v293 = &v489;
      uint64_t v489 = v290;
      v294 = &v488;
      uint64_t v488 = v291;
      serialize(_:at:)(0, &v490);
      serialize(_:at:)(2, v292);
      v486 = v362;
      uint64_t v487 = v309;
      closure #1 in osLogInternal(_:log:type:)(&v486, (uint64_t)v292, (uint64_t)v293, (uint64_t)v294);
      uint64_t v295 = v85;
      if (v85)
      {
        __break(1u);
      }
      else
      {
        v486 = v363;
        uint64_t v487 = v310;
        closure #1 in osLogInternal(_:log:type:)(&v486, (uint64_t)&v490, (uint64_t)&v489, (uint64_t)&v488);
        uint64_t v285 = 0;
        v486 = v364;
        uint64_t v487 = v311;
        closure #1 in osLogInternal(_:log:type:)(&v486, (uint64_t)&v490, (uint64_t)&v489, (uint64_t)&v488);
        uint64_t v284 = 0;
        v486 = v365;
        uint64_t v487 = v312;
        closure #1 in osLogInternal(_:log:type:)(&v486, (uint64_t)&v490, (uint64_t)&v489, (uint64_t)&v488);
        uint64_t v283 = 0;
        v486 = v366;
        uint64_t v487 = v313;
        closure #1 in osLogInternal(_:log:type:)(&v486, (uint64_t)&v490, (uint64_t)&v489, (uint64_t)&v488);
        uint64_t v282 = 0;
        v486 = v367;
        uint64_t v487 = v315;
        closure #1 in osLogInternal(_:log:type:)(&v486, (uint64_t)&v490, (uint64_t)&v489, (uint64_t)&v488);
        uint64_t v281 = 0;
        _os_log_impl(&dword_25DE00000, v317, (os_log_type_t)v318, "end_mostLikelyDays: %ld. end_allDays: %ld", v289, v300);
        uint64_t v280 = 0;
        destroyStorage<A>(_:count:)(v290, 0, v287);
        destroyStorage<A>(_:count:)(v291, v280, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v289, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v286 = v281;
      }
    }
    else
    {
      uint64_t v86 = v341;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v286 = v86;
    }
    uint64_t v278 = v286;

    uint64_t result = (char *)((uint64_t (*)(char *, uint64_t))v331)(v427, v438);
    uint64_t v279 = v299 - v320;
    if (!__OFSUB__(v299, v320))
    {
      unint64_t v88 = v425;
      uint64_t v512 = v279;
      uint64_t v510 = v320;
      uint64_t v511 = v279;
      uint64_t v257 = Logger.wellnessIntents.unsafeMutableAddressor();
      uint64_t v258 = &v509;
      uint64_t v264 = 32;
      swift_beginAccess();
      v439(v88, v257, v438);
      swift_endAccess();
      uint64_t v265 = 7;
      uint64_t v260 = swift_allocObject();
      *(void *)(v260 + 16) = v279;
      uint64_t v89 = swift_allocObject();
      uint64_t v90 = v279;
      uint64_t v266 = v89;
      *(void *)(v89 + 16) = v320;
      *(void *)(v89 + 24) = v90;
      uint64_t v276 = Logger.logObject.getter();
      int v277 = static os_log_type_t.debug.getter();
      v507[5] = 22;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v259 = v508;
      uint64_t v262 = 17;
      uint64_t v268 = swift_allocObject();
      *(unsigned char *)(v268 + 16) = 0;
      uint64_t v269 = swift_allocObject();
      int v263 = 8;
      *(unsigned char *)(v269 + 16) = 8;
      uint64_t v91 = swift_allocObject();
      uint64_t v92 = v260;
      uint64_t v261 = v91;
      *(void *)(v91 + 16) = v368;
      *(void *)(v91 + 24) = v92;
      uint64_t v93 = swift_allocObject();
      uint64_t v94 = v261;
      uint64_t v270 = v93;
      *(void *)(v93 + 16) = v369;
      *(void *)(v93 + 24) = v94;
      uint64_t v271 = swift_allocObject();
      *(unsigned char *)(v271 + 16) = 32;
      uint64_t v272 = swift_allocObject();
      *(unsigned char *)(v272 + 16) = v263;
      uint64_t v95 = swift_allocObject();
      uint64_t v96 = v266;
      uint64_t v267 = v95;
      *(void *)(v95 + 16) = v370;
      *(void *)(v95 + 24) = v96;
      uint64_t v97 = swift_allocObject();
      uint64_t v98 = v267;
      uint64_t v274 = v97;
      *(void *)(v97 + 16) = v371;
      *(void *)(v97 + 24) = v98;
      uint64_t v273 = _allocateUninitializedArray<A>(_:)();
      uint64_t v275 = v99;
      swift_retain();
      uint64_t v100 = v268;
      unint64_t v101 = v275;
      *uint64_t v275 = v372;
      v101[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v100;
      swift_retain();
      uint64_t v102 = v269;
      uint64_t v103 = v275;
      v275[2] = v373;
      v103[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v102;
      swift_retain();
      uint32_t v104 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v270;
      uint64_t v105 = v275;
      v275[4] = v374;
      v105[5] = v104;
      swift_retain();
      uint64_t v106 = v271;
      int v107 = v275;
      v275[6] = v375;
      v107[7] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v106;
      swift_retain();
      uint64_t v108 = v272;
      uint64_t v109 = v275;
      v275[8] = v376;
      v109[9] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v108;
      swift_retain();
      uint64_t v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v274;
      uint64_t v111 = v275;
      v275[10] = v377;
      v111[11] = v110;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v276, (os_log_type_t)v277))
      {
        uint64_t v112 = v278;
        uint64_t v249 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v248 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v250 = createStorage<A>(capacity:type:)(0);
        uint64_t v251 = createStorage<A>(capacity:type:)(1);
        uint64_t v253 = v495;
        v495[0] = v249;
        uint64_t v254 = &v494;
        uint64_t v494 = v250;
        uint64_t v255 = &v493;
        uint64_t v493 = v251;
        unsigned int v252 = 2;
        serialize(_:at:)(2, v495);
        serialize(_:at:)(v252, v253);
        v491 = v372;
        uint64_t v492 = v268;
        closure #1 in osLogInternal(_:log:type:)(&v491, (uint64_t)v253, (uint64_t)v254, (uint64_t)v255);
        uint64_t v256 = v112;
        if (v112)
        {
          __break(1u);
        }
        else
        {
          v491 = v373;
          uint64_t v492 = v269;
          closure #1 in osLogInternal(_:log:type:)(&v491, (uint64_t)v495, (uint64_t)&v494, (uint64_t)&v493);
          uint64_t v246 = 0;
          v491 = v374;
          uint64_t v492 = v270;
          closure #1 in osLogInternal(_:log:type:)(&v491, (uint64_t)v495, (uint64_t)&v494, (uint64_t)&v493);
          uint64_t v245 = 0;
          v491 = v375;
          uint64_t v492 = v271;
          closure #1 in osLogInternal(_:log:type:)(&v491, (uint64_t)v495, (uint64_t)&v494, (uint64_t)&v493);
          uint64_t v244 = 0;
          v491 = v376;
          uint64_t v492 = v272;
          closure #1 in osLogInternal(_:log:type:)(&v491, (uint64_t)v495, (uint64_t)&v494, (uint64_t)&v493);
          uint64_t v243 = 0;
          v491 = v377;
          uint64_t v492 = v274;
          closure #1 in osLogInternal(_:log:type:)(&v491, (uint64_t)v495, (uint64_t)&v494, (uint64_t)&v493);
          uint64_t v242 = 0;
          _os_log_impl(&dword_25DE00000, v276, (os_log_type_t)v277, "trailingDuration: %ld. trailingAllDays: %s", v249, v259);
          destroyStorage<A>(_:count:)(v250, 0, v248);
          destroyStorage<A>(_:count:)(v251, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](v249, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          uint64_t v247 = v242;
        }
      }
      else
      {
        uint64_t v113 = v278;
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        uint64_t v247 = v113;
      }
      uint64_t v240 = v247;

      v331(v425, v438);
      v507[3] = v320;
      v507[4] = v279;
      uint64_t v564 = v320;
      uint64_t v565 = v279;
      uint64_t v563 = v337;
      BOOL v241 = 0;
      if (v337 >= v320) {
        BOOL v241 = v563 - v564 < v565;
      }
      if (v241)
      {
        id v238 = v497;
        v497[0] = v417;
        uint64_t v237 = &v496;
        uint64_t v496 = 1;
        unint64_t v239 = lazy protocol witness table accessor for type PeriodProjectionFocus and conformance PeriodProjectionFocus();
        if (== infix<A>(_:_:)())
        {
          int v236 = 1;
        }
        else
        {
          v495[4] = v417;
          v495[3] = (unsigned char *)3;
          int v236 = == infix<A>(_:_:)();
        }
        if (v236)
        {
          int v235 = 1;
        }
        else
        {
          v495[2] = v417;
          v495[1] = (unsigned char *)5;
          int v235 = == infix<A>(_:_:)();
        }
        int v234 = v235;
      }
      else
      {
        int v234 = 0;
      }
      if (v234)
      {
        unint64_t v114 = v423;
        uint64_t v228 = Logger.wellnessIntents.unsafeMutableAddressor();
        v229 = v502;
        swift_beginAccess();
        v439(v114, v228, v438);
        swift_endAccess();
        uint64_t v232 = Logger.logObject.getter();
        int v231 = static os_log_type_t.debug.getter();
        v500[1] = (unsigned char *)2;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v230 = v501;
        uint64_t v233 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v232, (os_log_type_t)v231))
        {
          uint64_t v115 = v240;
          uint64_t v218 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v217 = 0;
          uint64_t v219 = createStorage<A>(capacity:type:)(0);
          uint64_t v220 = createStorage<A>(capacity:type:)(v217);
          v224 = v500;
          v500[0] = v218;
          id v225 = &v499;
          uint64_t v499 = v219;
          uint64_t v222 = &v498;
          uint64_t v498 = v220;
          unsigned int v221 = 0;
          serialize(_:at:)(0, v500);
          serialize(_:at:)(v221, v224);
          v497[1] = v233;
          uint64_t v223 = &v132;
          MEMORY[0x270FA5388](&v132);
          uint64_t v116 = v225;
          uint32_t v117 = &v132 - 6;
          uint64_t v226 = &v132 - 6;
          v117[2] = v224;
          v117[3] = v116;
          v117[4] = v118;
          uint64_t v227 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v115)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_25DE00000, v232, (os_log_type_t)v231, "Setting nextPeriodStart/End for the trailingAllDays range", v218, v230);
            uint64_t v215 = 0;
            destroyStorage<A>(_:count:)(v219, 0, v216);
            destroyStorage<A>(_:count:)(v220, v215, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611C8D90](v218, MEMORY[0x263F8E778]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        v331(v423, v438);
        DateInterval.end.getter();
        Class v213 = Date._bridgeToObjectiveC()().super.isa;
        uint64_t v211 = *(void (**)(char *, uint64_t))(v385 + 8);
        uint64_t v212 = v385 + 8;
        v211(v388, v384);
        objc_msgSend(v326, sel_setNextPeriodStart_, v213);

        uint64_t v119 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v385 + 56);
        unsigned int v214 = 1;
        v119(v383, 1, 1, v384);
        if ((*(unsigned int (**)(char *, void, uint64_t))(v385 + 48))(v383, v214, v384) == 1)
        {
          Class v210 = 0;
        }
        else
        {
          Class v209 = Date._bridgeToObjectiveC()().super.isa;
          v211(v383, v384);
          Class v210 = v209;
        }
        Class v208 = v210;
        objc_msgSend(v326, sel_setNextPeriodEnd_);
      }
      else
      {
        uint64_t v120 = v421;
        uint64_t v202 = Logger.wellnessIntents.unsafeMutableAddressor();
        uint64_t v203 = v507;
        swift_beginAccess();
        v439(v120, v202, v438);
        swift_endAccess();
        uint64_t v206 = Logger.logObject.getter();
        int v205 = static os_log_type_t.debug.getter();
        v505[1] = (unsigned char *)2;
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v204 = v506;
        uint64_t v207 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v206, (os_log_type_t)v205))
        {
          uint64_t v121 = v240;
          unint64_t v192 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v190 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v191 = 0;
          uint64_t v193 = createStorage<A>(capacity:type:)(0);
          uint64_t v194 = createStorage<A>(capacity:type:)(v191);
          uint64_t v198 = v505;
          v505[0] = v192;
          uint64_t v199 = &v504;
          uint64_t v504 = v193;
          uint64_t v196 = &v503;
          uint64_t v503 = v194;
          unsigned int v195 = 0;
          serialize(_:at:)(0, v505);
          serialize(_:at:)(v195, v198);
          v502[3] = v207;
          uint64_t v197 = &v132;
          MEMORY[0x270FA5388](&v132);
          uint64_t v122 = v199;
          uint64_t v123 = &v132 - 6;
          uint64_t v200 = &v132 - 6;
          v123[2] = v198;
          v123[3] = v122;
          v123[4] = v124;
          uint64_t v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v121)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_25DE00000, v206, (os_log_type_t)v205, "Setting nextPeriodStart/End for the standard range", v192, v204);
            uint64_t v189 = 0;
            destroyStorage<A>(_:count:)(v193, 0, v190);
            destroyStorage<A>(_:count:)(v194, v189, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611C8D90](v192, MEMORY[0x263F8E778]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        v331(v421, v438);
        DateInterval.end.getter();
        Class v185 = Date._bridgeToObjectiveC()().super.isa;
        char v187 = *(void (**)(char *, uint64_t))(v385 + 8);
        uint64_t v186 = v385 + 8;
        v187(v388, v384);
        objc_msgSend(v326, sel_setNextPeriodEnd_, v185);

        DateInterval.start.getter();
        Class v188 = Date._bridgeToObjectiveC()().super.isa;
        v187(v388, v384);
        objc_msgSend(v326, sel_setNextPeriodStart_, v188);
      }
      uint32_t v184 = *(void (**)(char *, uint64_t))(v396 + 8);
      uint64_t v183 = v396 + 8;
      v184(v401, v395);
      v184(v403, v395);
      goto LABEL_60;
    }
  }
  __break(1u);
  return result;
}

id HKMCAnalysisQuery.__allocating_init(updateHandler:)(uint64_t a1, uint64_t a2)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKMCAnalysisQuery.init(updateHandler:)(a1, a2);
}

void implicit closure #2 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(a1, sel_menstruationProjections);
  type metadata accessor for HKMCProjection();
  *a2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

BOOL closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(id *a1, uint64_t a2)
{
  id v9 = *a1;
  unsigned __int8 v10 = objc_msgSend(*a1, sel_isPartiallyLogged);
  id v2 = v9;
  if (v10)
  {
    BOOL v6 = 0;
  }
  else
  {
    id v3 = objc_msgSend(v9, sel_allDays);
    if ((uint64_t)v3 + v4 - 1 < (uint64_t)v3) {
      uint64_t v7 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v7 = (uint64_t)v3 + v4 - 1;
    }
    BOOL v6 = v7 >= a2;
  }

  return v6;
}

uint64_t implicit closure #6 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for CycleTrackingAnalysisFetching.isReadingAuthorized() in conformance CycleTrackingFetcher()
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v5 = *v0;
  id v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *id v2 = *(void *)(v4 + 16);
  v2[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return CycleTrackingFetcher.isReadingAuthorized()(v5);
}

uint64_t protocol witness for CycleTrackingAnalysisFetching.query(projectionFocus:) in conformance CycleTrackingFetcher(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = *v1;
  id v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  void *v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return CycleTrackingFetcher.query(projectionFocus:)(a1, v6);
}

id @nonobjc HKMCAnalysisQuery.init(updateHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v7 = 1107296256;
  int v8 = 0;
  id v9 = thunk for @escaping @callee_guaranteed (@guaranteed HKMCAnalysisQuery, @guaranteed HKMCAnalysis?, @guaranteed Error?) -> ();
  unsigned __int8 v10 = &block_descriptor_10;
  uint64_t v4 = _Block_copy(&aBlock);
  id v5 = objc_msgSend(v3, sel_initWithUpdateHandler_);
  _Block_release(v4);
  swift_release();
  return v5;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed HKMCAnalysisQuery, @guaranteed HKMCAnalysis?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v9 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  id v5 = a3;
  id v6 = a4;
  if (a4) {
    int v8 = a4;
  }
  else {
    int v8 = 0;
  }
  v9(a2, a3);

  return swift_release();
}

uint64_t partial apply for closure #1 in CycleTrackingFetcher.query(projectionFocus:)(uint64_t a1)
{
  return closure #1 in CycleTrackingFetcher.query(projectionFocus:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_25DE5EE78()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in CycleTrackingFetcher.queryCycleTrackingData(projectionFocus:completion:)(uint64_t a1, void *a2, void *a3)
{
  closure #1 in CycleTrackingFetcher.queryCycleTrackingData(projectionFocus:completion:)(a1, a2, a3, *(void *)(v3 + 16), *(void (**)(void))(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(unsigned char **)(v3 + 48));
}

unint64_t type metadata accessor for HKMCAnalysisQuery()
{
  uint64_t v2 = lazy cache variable for type metadata for HKMCAnalysisQuery;
  if (!lazy cache variable for type metadata for HKMCAnalysisQuery)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMCAnalysisQuery);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for HKMCProjection()
{
  uint64_t v2 = lazy cache variable for type metadata for HKMCProjection;
  if (!lazy cache variable for type metadata for HKMCProjection)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMCProjection);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25DE5EFB0()
{
  return swift_deallocObject();
}

__C::HKQueryOptions partial apply for implicit closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)()
{
  return HKQueryOptions.init(rawValue:)(*(void *)(v0 + 16));
}

uint64_t sub_25DE5EFE4()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(uint64_t *a1@<X8>)
{
  implicit closure #2 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(*(void **)(v1 + 16), a1);
}

uint64_t sub_25DE5F02C()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_2()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMCProjection]);
  unint64_t v1 = lazy protocol witness table accessor for type [HKMCProjection] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

unint64_t lazy protocol witness table accessor for type [HKMCProjection] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMCProjection]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMCProjection]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMCProjection]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKMCProjection] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DE5F150()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5F17C()
{
  return swift_deallocObject();
}

uint64_t closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v17 = a1;
  uint64_t v21 = a6;
  v13[1] = a7;
  uint64_t v14 = partial apply for closure #1 in serialize<A>(_:at:);
  uint64_t v25 = a6;
  uint64_t v18 = *(void *)(a6 - 8);
  uint64_t v19 = a6 - 8;
  v13[0] = (*(void *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v20 = (uint64_t)v13 - v13[0];
  v8(v7);
  uint64_t v16 = dispatch thunk of static FixedWidthInteger.bitWidth.getter() >> 3;
  uint64_t v23 = *v17;
  uint64_t v24 = v23 + v16;
  _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v20, v14, (uint64_t)v22, v21, MEMORY[0x263F8E628], MEMORY[0x263F8EE60] + 8, MEMORY[0x263F8E658], v15);
  uint64_t v9 = v18;
  uint64_t v10 = v20;
  uint64_t v11 = v21;
  *v17 += v16;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v17 = a2;
  uint64_t v12 = a5;
  uint64_t v13 = a8;
  uint64_t v23 = a4;
  uint64_t v22 = a5;
  uint64_t v21 = a6;
  uint64_t v14 = *(void *)(a5 - 8);
  uint64_t v15 = a5 - 8;
  unint64_t v16 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v9 = MEMORY[0x270FA5388]();
  uint64_t v18 = (char *)&v12 - v16;
  uint64_t v20 = v9 + *(void *)(*(void *)(v10 - 8) + 64);
  uint64_t result = v17();
  uint64_t v19 = v8;
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32))(v13, v18, v12);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_25DE5F4A4()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_25DE5F4F0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int and conformance Int();
  uint64_t v5 = MEMORY[0x263F8D6C8];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

uint64_t sub_25DE5F5A4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5F5D0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5F5FC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5F63C()
{
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(id *a1)
{
  return closure #1 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)(a1, *(void *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type [HKMCCycle] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKMCCycle] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKMCCycle] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKMCCycle]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKMCCycle] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t type metadata accessor for HKMCCycle()
{
  uint64_t v2 = lazy cache variable for type metadata for HKMCCycle;
  if (!lazy cache variable for type metadata for HKMCCycle)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMCCycle);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25DE5F818()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5F844()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5F870()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5F89C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5F8C8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5F908()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5F948()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5F974()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5F9A0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5F9E0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5FA20()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5FA4C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)()
{
  return implicit closure #6 in CycleTrackingFetcher.buildIntentResponse(hkAnalysis:projectionFocus:)();
}

uint64_t sub_25DE5FA84()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5FAB0()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5FADC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5FB1C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5FB5C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5FB88()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5FBB4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5FBF4()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type PeriodProjectionFocus and conformance PeriodProjectionFocus()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PeriodProjectionFocus and conformance PeriodProjectionFocus;
  if (!lazy protocol witness table cache variable for type PeriodProjectionFocus and conformance PeriodProjectionFocus)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PeriodProjectionFocus and conformance PeriodProjectionFocus);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type PeriodProjectionFocus and conformance PeriodProjectionFocus;
  if (!lazy protocol witness table cache variable for type PeriodProjectionFocus and conformance PeriodProjectionFocus)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PeriodProjectionFocus and conformance PeriodProjectionFocus);
    return WitnessTable;
  }
  return v2;
}

uint64_t type metadata accessor for GetMenstruationPredictionIntentHandler()
{
  return self;
}

ValueMetadata *type metadata accessor for CycleTrackingFetcher()
{
  return &type metadata for CycleTrackingFetcher;
}

uint64_t partial apply for closure #1 in serialize<A>(_:at:)()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unsigned char *outlined init with copy of Bool?(unsigned char *a1, unsigned char *a2)
{
  uint64_t result = a2;
  *a2 = *a1;
  return result;
}

uint64_t sub_25DE5FD94()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5FDD4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5FE00()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5FE2C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5FE6C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE5FEAC()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetMenstruationPredictionIntentResponse, Never>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in CycleTrackingFetcher.query(projectionFocus:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetMenstruationPredictionIntentResponse, Never>);
  return closure #1 in closure #1 in CycleTrackingFetcher.query(projectionFocus:)(a1);
}

id GetActivitySummaryIntentHandler.__allocating_init(store:)(void *a1)
{
  id v2 = objc_allocWithZone(v1);
  return GetActivitySummaryIntentHandler.init(store:)(a1);
}

id GetActivitySummaryIntentHandler.init(store:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  id v2 = v1;
  id v13 = v1;
  outlined init with copy of QuantityPersisting?(a1, v11);
  if (v11[3])
  {
    outlined init with take of QuantityPersisting(v11, __dst);
  }
  else
  {
    v3.store.super.Class isa = CycleTrackingFetcher.init()().store.super.isa;
    __dst[3] = &type metadata for ActivitySummaryFetcher;
    __dst[4] = &protocol witness table for ActivitySummaryFetcher;
    __dst[0] = v3.store.super.isa;
    outlined destroy of QuantityPersisting?((uint64_t)v11);
  }
  outlined init with take of QuantityPersisting(__dst, &v7[OBJC_IVAR____TtC19SiriWellnessIntents31GetActivitySummaryIntentHandler_store]);

  v10.receiver = v13;
  v10.super_class = ObjectType;
  id v6 = objc_msgSendSuper2(&v10, sel_init);
  id v4 = v6;
  id v13 = v6;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v6;
}

uint64_t GetActivitySummaryIntentHandler.handle(intent:)(uint64_t a1)
{
  v2[20] = v1;
  v2[15] = v2;
  v2[16] = 0;
  v2[17] = 0;
  v2[18] = 0;
  uint64_t v3 = type metadata accessor for Logger();
  v2[21] = v3;
  v2[22] = *(void *)(v3 - 8);
  v2[23] = swift_task_alloc();
  v2[16] = a1;
  v2[17] = v1;
  return MEMORY[0x270FA2498](GetActivitySummaryIntentHandler.handle(intent:), 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  void *v5;
  uint64_t v6;

  uint64_t v5 = (void *)*v2;
  v5[15] = *v2;
  v5[26] = a1;
  v5[27] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = GetActivitySummaryIntentHandler.handle(intent:);
  }
  else
  {
    uint64_t v3 = GetActivitySummaryIntentHandler.handle(intent:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t GetActivitySummaryIntentHandler.handle(intent:)()
{
  uint64_t v1 = v0[20];
  v0[15] = v0;
  outlined init with copy of QuantityPersisting(v1 + OBJC_IVAR____TtC19SiriWellnessIntents31GetActivitySummaryIntentHandler_store, (uint64_t)(v0 + 2));
  uint64_t v7 = v0[5];
  uint64_t v5 = v0[6];
  __swift_project_boxed_opaque_existential_1(v0 + 2, v7);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 8) + **(int **)(v5 + 8));
  id v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 192) = v2;
  *id v2 = *(void *)(v4 + 120);
  v2[1] = GetActivitySummaryIntentHandler.handle(intent:);
  return v6(v7, v5);
}

{
  uint64_t v0;
  uint64_t (*v1)(char *);
  void *v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  char *v7;
  void *v8;
  char v9;
  uint64_t v10;

  uint64_t v9 = *(unsigned char *)(v0 + 228);
  *(void *)(v0 + 120) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (v9)
  {
    outlined init with copy of QuantityPersisting(v8[20] + OBJC_IVAR____TtC19SiriWellnessIntents31GetActivitySummaryIntentHandler_store, (uint64_t)(v8 + 7));
    uint64_t v6 = v8[10];
    uint64_t v4 = v8[11];
    __swift_project_boxed_opaque_existential_1(v8 + 7, v6);
    uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v4 + 16) + **(int **)(v4 + 16));
    uint64_t v3 = (void *)swift_task_alloc();
    v8[25] = v3;
    void *v3 = v8[15];
    v3[1] = GetActivitySummaryIntentHandler.handle(intent:);
    return v5(v6, v4);
  }
  else
  {
    type metadata accessor for GetAcitivitySummaryIntentResponse();
    uint64_t v7 = GetAcitivitySummaryIntentResponse.__allocating_init(code:userActivity:)(101, 0);
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(char *))(v8[15] + 8);
    return v1(v7);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 120) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 208);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 120) + 8);
  return v1(v3);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  uint64_t (*v5)(char *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  uint8_t *buf;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint32_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v35 = v0;
  uint64_t v20 = *(id *)(v0 + 216);
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v17 = *(void *)(v0 + 176);
  uint64_t v19 = *(void *)(v0 + 168);
  *(void *)(v0 + 120) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  id v2 = v20;
  *(void *)(v0 + 144) = v20;
  uint64_t v18 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v1, v18, v19);
  swift_endAccess();
  uint64_t v3 = v20;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v20;
  id v28 = Logger.logObject.getter();
  id v29 = static os_log_type_t.error.getter();
  *(void *)(v0 + 152) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v21 = *(_DWORD *)(v0 + 224);
  uint64_t v24 = swift_allocObject();
  *(unsigned char *)(v24 + 16) = 32;
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = 8;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = partial apply for implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:);
  *(void *)(v23 + 24) = v22;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v26 + 24) = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v27 = v4;
  swift_retain();
  *uint64_t v27 = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[1] = v24;
  swift_retain();
  v27[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[3] = v25;
  swift_retain();
  v27[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[5] = v26;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v28, v29))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v14 = createStorage<A>(capacity:type:)(0);
    uint64_t v15 = createStorage<A>(capacity:type:)(1);
    uint64_t v30 = buf;
    uint64_t v31 = v14;
    uint64_t v32 = v15;
    serialize(_:at:)(2, &v30);
    serialize(_:at:)(1, &v30);
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v34 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v34 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v34 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    _os_log_impl(&dword_25DE00000, v28, v29, "%s", buf, v21);
    destroyStorage<A>(_:count:)(v14, 0, v12);
    destroyStorage<A>(_:count:)(v15, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  objc_super v10 = (id)v16[27];
  uint64_t v8 = v16[23];
  uint64_t v9 = v16[21];
  uint64_t v7 = v16[22];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  type metadata accessor for GetAcitivitySummaryIntentResponse();
  uint64_t v11 = GetAcitivitySummaryIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(char *))(v16[15] + 8);
  return v5(v11);
}

uint64_t GetActivitySummaryIntentHandler.handle(intent:)(char a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 120) = *v1;
  *(unsigned char *)(v3 + 228) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](GetActivitySummaryIntentHandler.handle(intent:), 0);
}

uint64_t sub_25DE60FEC()
{
  return swift_deallocObject();
}

uint64_t @objc closure #1 in GetActivitySummaryIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  v3[4] = a3;
  v3[3] = a1;
  void v3[2] = v3;
  id v5 = a1;
  v3[5] = _Block_copy(a2);
  id v6 = a3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 48) = v7;
  void *v7 = *(void *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return GetActivitySummaryIntentHandler.handle(intent:)((uint64_t)a1);
}

id GetActivitySummaryIntentHandler.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t GetActivitySummaryIntentHandler.init()()
{
  if (!"SiriWellnessIntents.GetActivitySummaryIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.GetActivitySummaryIntentHandler", 51, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/GetActivitySummaryIntentHandler.swift", 57, 2, v1, 0xEuLL, 0x14uLL);
  __break(1u);
  return result;
}

id GetActivitySummaryIntentHandler.__deallocating_deinit()
{
  uint64_t v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ActivitySummaryFetcher.query()(uint64_t a1)
{
  *(void *)(v1 + 176) = a1;
  *(void *)(v1 + 40) = v1;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 112) = 0;
  *(void *)(v1 + 120) = 0;
  *(void *)(v1 + 128) = 0;
  *(void *)(v1 + 136) = 0;
  *(unsigned char *)(v1 + 408) = 0;
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v1 + 184) = v2;
  *(void *)(v1 + 192) = *(void *)(v2 - 8);
  *(void *)(v1 + 200) = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  *(void *)(v1 + 208) = v3;
  *(void *)(v1 + 216) = *(void *)(v3 - 8);
  *(void *)(v1 + 224) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Calendar();
  *(void *)(v1 + 232) = v4;
  *(void *)(v1 + 240) = *(void *)(v4 - 8);
  *(void *)(v1 + 248) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DateComponents();
  *(void *)(v1 + 256) = v5;
  *(void *)(v1 + 264) = *(void *)(v5 - 8);
  *(void *)(v1 + 272) = swift_task_alloc();
  *(void *)(v1 + 280) = swift_task_alloc();
  *(void *)(v1 + 48) = a1;
  return MEMORY[0x270FA2498](ActivitySummaryFetcher.query(), 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v2;
  *(void *)(v5 + 40) = *v2;
  *(void *)(v5 + 336) = a1;
  *(void *)(v5 + 344) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = ActivitySummaryFetcher.query();
  }
  else
  {

    uint64_t v3 = ActivitySummaryFetcher.query();
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t ActivitySummaryFetcher.query()()
{
  uint64_t v44 = v0[35];
  uint64_t v47 = v0[34];
  uint64_t v45 = v0[33];
  uint64_t v46 = v0[32];
  uint64_t v42 = v0[31];
  uint64_t v41 = v0[30];
  uint64_t v43 = v0[29];
  uint64_t v39 = v0[28];
  uint64_t v38 = v0[27];
  uint64_t v40 = v0[26];
  v0[5] = v0;
  uint64_t v36 = type metadata accessor for Calendar.Component();
  _allocateUninitializedArray<A>(_:)();
  uint64_t v34 = v1;
  uint64_t v32 = *(void *)(v36 - 8);
  uint64_t v35 = *(void (**)(void))(v32 + 104);
  v35();
  uint64_t v33 = *(void *)(v32 + 72);
  ((void (*)(uint64_t, void, uint64_t))v35)(v34 + v33, *MEMORY[0x263F07870], v36);
  ((void (*)(uint64_t, void, uint64_t))v35)(v34 + 2 * v33, *MEMORY[0x263F078A8], v36);
  ((void (*)(uint64_t, void, uint64_t))v35)(v34 + 3 * v33, *MEMORY[0x263F078A0], v36);
  ((void (*)(uint64_t, void, uint64_t))v35)(v34 + 4 * v33, *MEMORY[0x263F07878], v36);
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  uint64_t v37 = Set.init(arrayLiteral:)();
  v0[36] = v37;
  v0[7] = v37;
  static Calendar.current.getter();
  Date.init()();
  Calendar.dateComponents(_:from:)();
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v40);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
  uint64_t v48 = self;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 16))(v47, v44, v46);
  Class isa = DateComponents._bridgeToObjectiveC()().super.isa;
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
  v0[37] = v2;
  v0[38] = (v45 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v2(v47, v46);
  id v50 = objc_msgSend(v48, sel_predicateForActivitySummaryWithDateComponents_, isa);
  v0[39] = v50;

  v0[8] = v50;
  type metadata accessor for HKQuantityType();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  uint64_t v52 = (void *)*MEMORY[0x263F09BC0];
  id v3 = (id)*MEMORY[0x263F09BC0];
  id v4 = objc_msgSend(ObjCClassFromMetadata, sel_quantityTypeForIdentifier_, v52);
  v0[40] = v4;
  uint64_t v53 = (uint64_t)v4;

  if (v53)
  {
    id v29 = *(void **)(v31 + 176);
    *(void *)(v31 + 112) = v53;
    id v5 = v29;
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v31 + 328) = v30;
    *uint64_t v30 = *(void *)(v31 + 40);
    v30[1] = ActivitySummaryFetcher.query();
    return getPreferredUnit(for:store:)(v53, (uint64_t)v29);
  }
  else
  {
    uint64_t v7 = *(void *)(v31 + 200);
    uint64_t v24 = *(void *)(v31 + 184);
    uint64_t v22 = *(void *)(v31 + 192);
    uint64_t v23 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v7, v23, v24);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    *(void *)(v31 + 72) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v31 + 412);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v28 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v26))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v19 = createStorage<A>(capacity:type:)(0);
      uint64_t v20 = createStorage<A>(capacity:type:)(0);
      *(void *)(v31 + 80) = buf;
      *(void *)(v31 + 88) = v19;
      *(void *)(v31 + 96) = v20;
      serialize(_:at:)(0, (unsigned char **)(v31 + 80));
      serialize(_:at:)(0, (unsigned char **)(v31 + 80));
      *(void *)(v31 + 104) = v28;
      uint64_t v21 = (void *)swift_task_alloc();
      v21[2] = v31 + 80;
      v21[3] = v31 + 88;
      void v21[4] = v31 + 96;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, oslog, v26, "Error fetching preferred unit for .activeEnergyBurned", buf, size);
      destroyStorage<A>(_:count:)(v19, 0, v17);
      destroyStorage<A>(_:count:)(v20, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    id v12 = *(id *)(v31 + 312);
    unint64_t v16 = *(void (**)(uint64_t, uint64_t))(v31 + 296);
    uint64_t v14 = *(void *)(v31 + 280);
    uint64_t v15 = *(void *)(v31 + 256);
    uint64_t v10 = *(void *)(v31 + 200);
    uint64_t v11 = *(void *)(v31 + 184);
    uint64_t v9 = *(void *)(v31 + 192);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    type metadata accessor for GetAcitivitySummaryIntentResponse();
    id v13 = GetAcitivitySummaryIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    v16(v14, v15);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(char *))(*(void *)(v31 + 40) + 8);
    return v8(v13);
  }
}

{
  void *v0;
  void *v1;
  id v2;
  id v3;
  Swift::String v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t (*v11)(char *);
  char *v12;
  uint64_t result;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint8_t *buf;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint32_t size;
  os_log_type_t v37;
  NSObject *oslog;
  uint64_t v39;
  id v40;
  void *v41;
  char v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t AcitivitySummaryIntentResponse;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  void *v51;
  id v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;

  uint64_t v1 = (void *)v0[42];
  v0[5] = v0;
  uint64_t v56 = v1;
  unint64_t v57 = v0[43];
  v0[44] = v1;
  if (!v1)
  {

    uint64_t v53 = v57;
LABEL_14:
    uint64_t v10 = *(void *)(v55 + 200);
    uint64_t v35 = *(void *)(v55 + 184);
    uint64_t v33 = *(void *)(v55 + 192);
    uint64_t v34 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v10, v34, v35);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    uint64_t v37 = static os_log_type_t.error.getter();
    *(void *)(v55 + 72) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v55 + 412);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v39 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v37))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v30 = createStorage<A>(capacity:type:)(0);
      uint64_t v31 = createStorage<A>(capacity:type:)(0);
      *(void *)(v55 + 80) = buf;
      *(void *)(v55 + 88) = v30;
      *(void *)(v55 + 96) = v31;
      serialize(_:at:)(0, (unsigned char **)(v55 + 80));
      serialize(_:at:)(0, (unsigned char **)(v55 + 80));
      *(void *)(v55 + 104) = v39;
      uint64_t v32 = (void *)swift_task_alloc();
      v32[2] = v55 + 80;
      v32[3] = v55 + 88;
      v32[4] = v55 + 96;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v53) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, oslog, v37, "Error fetching preferred unit for .activeEnergyBurned", buf, size);
      destroyStorage<A>(_:count:)(v30, 0, v28);
      destroyStorage<A>(_:count:)(v31, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v23 = *(id *)(v55 + 312);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v55 + 296);
    uint64_t v25 = *(void *)(v55 + 280);
    os_log_type_t v26 = *(void *)(v55 + 256);
    uint64_t v21 = *(void *)(v55 + 200);
    uint64_t v22 = *(void *)(v55 + 184);
    uint64_t v20 = *(void *)(v55 + 192);

    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
    type metadata accessor for GetAcitivitySummaryIntentResponse();
    uint64_t v24 = GetAcitivitySummaryIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    v27(v25, v26);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(char *))(*(void *)(v55 + 40) + 8);
    id v12 = v24;
    return v11(v12);
  }
  *(void *)(v55 + 120) = v1;
  uint64_t v54 = ActivitySummaryFetcher.summaryUnit(for:)(v1);
  *(void *)(v55 + 360) = v54;
  if (!v54)
  {
    uint64_t v51 = *(void **)(v55 + 320);

    uint64_t v53 = v57;
    goto LABEL_14;
  }
  *(void *)(v55 + 128) = v54;
  uint64_t v52 = ActivitySummaryFetcher.unitEnergy(for:)(v56);
  *(void *)(v55 + 368) = v52;
  if (!v52)
  {
    uint64_t v47 = *(void **)(v55 + 320);

    uint64_t v53 = v57;
    goto LABEL_14;
  }
  uint64_t v49 = *(void **)(v55 + 176);
  *(void *)(v55 + 136) = v52;
  uint64_t v2 = v49;
  *(void *)(v55 + 144) = 0;
  id v50 = objc_msgSend(v49, sel_wheelchairUseWithError_, v55 + 144);
  uint64_t v48 = *(void **)(v55 + 144);
  id v3 = v48;

  if (!v50)
  {
    unint64_t v16 = *(id *)(v55 + 312);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v55 + 296);
    uint64_t v17 = *(void *)(v55 + 280);
    uint64_t v18 = *(void *)(v55 + 256);
    uint64_t v15 = *(id *)(v55 + 320);
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v19(v17, v18);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(char *))(*(void *)(v55 + 40) + 8);
    id v12 = v14;
    return v11(v12);
  }
  uint64_t v41 = *(void **)(v55 + 312);
  uint64_t v43 = *(void **)(v55 + 176);
  uint64_t v40 = objc_msgSend(v50, sel_wheelchairUse);

  *(void *)(v55 + 152) = v40;
  *(void *)(v55 + 160) = 2;
  type metadata accessor for HKWheelchairUse();
  lazy protocol witness table accessor for type HKWheelchairUse and conformance HKWheelchairUse();
  uint64_t v42 = == infix<A>(_:_:)();
  *(unsigned char *)(v55 + 408) = v42 & 1;
  id v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("query()", 7uLL, 1);
  *(void *)(v55 + 376) = v4._object;
  id v5 = v41;
  id v6 = v54;
  uint64_t v7 = v52;
  uint64_t v8 = v56;
  uint64_t v9 = v43;
  uint64_t v44 = swift_task_alloc();
  *(void *)(v55 + 384) = v44;
  *(void *)(v44 + 16) = v41;
  *(unsigned char *)(v44 + 24) = v42 & 1;
  *(void *)(v44 + 32) = v54;
  *(void *)(v44 + 40) = v52;
  *(void *)(v44 + 48) = v56;
  *(void *)(v44 + 56) = v43;
  uint64_t v45 = (void *)swift_task_alloc();
  *(void *)(v55 + 392) = v45;
  AcitivitySummaryIntentResponse = type metadata accessor for GetAcitivitySummaryIntentResponse();
  *uint64_t v45 = *(void *)(v55 + 40);
  v45[1] = ActivitySummaryFetcher.query();
  return MEMORY[0x270FA2360](v55 + 168, 0, 0, v4._countAndFlagsBits, v4._object, partial apply for closure #1 in ActivitySummaryFetcher.query(), v44, AcitivitySummaryIntentResponse);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;

  uint64_t v9 = (void *)*v1;
  v9[5] = *v1;
  v9[50] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = ActivitySummaryFetcher.query();
  }
  else
  {
    id v6 = (void *)v9[46];
    id v5 = (void *)v9[45];
    uint64_t v7 = (void *)v9[44];
    id v4 = (void *)v9[39];
    uint64_t v8 = (void *)v9[22];
    swift_task_dealloc();

    swift_bridgeObjectRelease();
    uint64_t v2 = ActivitySummaryFetcher.query();
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  uint64_t v1 = (void *)v0[46];
  id v5 = (id)v0[45];
  id v6 = (id)v0[44];
  uint64_t v7 = (id)v0[40];
  uint64_t v8 = (id)v0[39];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[37];
  uint64_t v9 = v0[35];
  uint64_t v10 = v0[32];
  v0[5] = v0;
  id v4 = v0[21];

  v11(v9, v10);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0[5] + 8);
  return v2(v4);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t (*v3)(char *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint32_t size;
  os_log_type_t v22;
  NSObject *oslog;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  os_log_type_t v26 = (void *)v0[43];
  uint64_t v1 = (void *)v0[22];
  v0[5] = v0;

  v0[44] = 0;
  uint64_t v2 = *(void *)(v25 + 200);
  uint64_t v20 = *(void *)(v25 + 184);
  uint64_t v18 = *(void *)(v25 + 192);
  uint64_t v19 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v2, v19, v20);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  uint64_t v22 = static os_log_type_t.error.getter();
  *(void *)(v25 + 72) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v25 + 412);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v24 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v22))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    id v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v15 = createStorage<A>(capacity:type:)(0);
    unint64_t v16 = createStorage<A>(capacity:type:)(0);
    *(void *)(v25 + 80) = buf;
    *(void *)(v25 + 88) = v15;
    *(void *)(v25 + 96) = v16;
    serialize(_:at:)(0, (unsigned char **)(v25 + 80));
    serialize(_:at:)(0, (unsigned char **)(v25 + 80));
    *(void *)(v25 + 104) = v24;
    uint64_t v17 = (void *)swift_task_alloc();
    v17[2] = v25 + 80;
    v17[3] = v25 + 88;
    v17[4] = v25 + 96;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, oslog, v22, "Error fetching preferred unit for .activeEnergyBurned", buf, size);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = *(id *)(v25 + 312);
  id v12 = *(void (**)(uint64_t, uint64_t))(v25 + 296);
  uint64_t v10 = *(void *)(v25 + 280);
  uint64_t v11 = *(void *)(v25 + 256);
  id v6 = *(void *)(v25 + 200);
  uint64_t v7 = *(void *)(v25 + 184);
  id v5 = *(void *)(v25 + 192);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  type metadata accessor for GetAcitivitySummaryIntentResponse();
  uint64_t v9 = GetAcitivitySummaryIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  v12(v10, v11);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v3 = *(uint64_t (**)(char *))(*(void *)(v25 + 40) + 8);
  return v3(v9);
}

{
  void *v0;
  uint64_t (*v1)();
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;

  id v4 = (id)v0[46];
  id v5 = (id)v0[45];
  id v6 = (id)v0[44];
  uint64_t v7 = (id)v0[40];
  uint64_t v8 = (id)v0[39];
  uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[37];
  uint64_t v9 = v0[35];
  uint64_t v10 = v0[32];
  id v3 = (id)v0[22];
  v0[5] = v0;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  v11(v9, v10);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(v0[5] + 8);
  return v1();
}

id ActivitySummaryFetcher.summaryUnit(for:)(void *a1)
{
  id v8 = objc_msgSend(a1, sel_unitString);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("kJ", 2uLL, 1);
  swift_bridgeObjectRetain();
  char v9 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9)
  {
    swift_bridgeObjectRelease();
    id v6 = objc_msgSend(self, sel_jouleUnitWithMetricPrefix_, 9);
    swift_bridgeObjectRelease();

    return v6;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cal", 3uLL, 1);
    swift_bridgeObjectRetain();
    char v5 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v5)
    {
      swift_bridgeObjectRelease();
      id v4 = objc_msgSend(self, sel_largeCalorieUnit);
      swift_bridgeObjectRelease();

      return v4;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("kcal", 4uLL, 1);
      swift_bridgeObjectRetain();
      char v3 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v3)
      {
        id v2 = objc_msgSend(self, sel_kilocalorieUnit);
        swift_bridgeObjectRelease();

        return v2;
      }
      else
      {
        swift_bridgeObjectRelease();

        return 0;
      }
    }
  }
}

id ActivitySummaryFetcher.unitEnergy(for:)(void *a1)
{
  id v6 = objc_msgSend(a1, sel_unitString);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("kJ", 2uLL, 1);
  swift_bridgeObjectRetain();
  char v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7)
  {
    swift_bridgeObjectRelease();
    id v4 = objc_msgSend(self, sel_kilojoules);
    swift_bridgeObjectRelease();

    return v4;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Cal", 3uLL, 1);
    swift_bridgeObjectRetain();
    char v3 = static String.== infix(_:_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0
      || (swift_bridgeObjectRelease(),
          swift_bridgeObjectRetain(),
          String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("kcal", 4uLL, 1),
          swift_bridgeObjectRetain(),
          char v2 = static String.== infix(_:_:)(),
          swift_bridgeObjectRelease(),
          swift_bridgeObjectRelease(),
          (v2 & 1) != 0))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return objc_msgSend(self, sel_kilocalories);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return 0;
    }
  }
}

void closure #1 in ActivitySummaryFetcher.query()(uint64_t a1, void *a2, int a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v30 = a1;
  id v49 = a2;
  int v39 = a3;
  id v41 = a4;
  id v43 = a5;
  id v45 = a6;
  id v50 = a7;
  v28[1] = 0;
  uint64_t v47 = partial apply for closure #1 in closure #1 in ActivitySummaryFetcher.query();
  uint64_t v59 = 0;
  uint64_t v58 = 0;
  char v57 = 0;
  uint64_t v56 = 0;
  uint64_t v55 = 0;
  uint64_t v54 = 0;
  uint64_t v53 = 0;
  id v52 = 0;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetAcitivitySummaryIntentResponse, Error>);
  uint64_t v33 = *(void *)(v37 - 8);
  uint64_t v34 = v37 - 8;
  uint64_t v31 = v33;
  uint64_t v32 = *(void *)(v33 + 64);
  unint64_t v29 = (v32 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v36 = (char *)v28 - v29;
  uint64_t v59 = v7;
  uint64_t v58 = v8;
  int v38 = 1;
  char v57 = v9 & 1;
  uint64_t v56 = v10;
  uint64_t v55 = v11;
  uint64_t v54 = v12;
  uint64_t v53 = v13;
  type metadata accessor for HKActivitySummaryQuery();
  id v14 = v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v36, v30, v37);
  id v15 = v41;
  id v16 = v43;
  id v17 = v45;
  unint64_t v35 = (*(unsigned __int8 *)(v31 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  uint64_t v40 = v35 + v32;
  unint64_t v42 = (v35 + v32 + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v46 = (v44 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v48 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v48 + v35, v36, v37);
  id v18 = v41;
  unint64_t v19 = v42;
  id v20 = v43;
  unint64_t v21 = v44;
  id v22 = v45;
  unint64_t v23 = v46;
  uint64_t v24 = (uint64_t)v47;
  uint64_t v25 = v48;
  id v26 = v49;
  *(unsigned char *)(v48 + v40) = v39 & v38;
  *(void *)(v25 + v19) = v18;
  *(void *)(v25 + v21) = v20;
  *(void *)(v25 + v23) = v22;
  id v51 = HKActivitySummaryQuery.__allocating_init(predicate:resultsHandler:)(v26, v24, v25);
  id v52 = v51;
  id v27 = v50;
  objc_msgSend(v50, sel_executeQuery_, v51);
}

void closure #1 in closure #1 in ActivitySummaryFetcher.query()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v194 = a1;
  uint64_t v200 = a2;
  Class v209 = a3;
  uint64_t v195 = a4;
  int v196 = a5;
  uint64_t v197 = a6;
  id v198 = a7;
  id v199 = a8;
  uint64_t v184 = 0;
  uint64_t v173 = partial apply for implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  uint64_t v174 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  id v175 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v176 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v177 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v178 = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  uint64_t v179 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  uint64_t v180 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v181 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v182 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v243 = 0;
  uint64_t v242 = 0;
  uint64_t v241 = 0;
  uint64_t v240 = 0;
  unint64_t v239 = 0;
  uint64_t v238 = 0;
  char v237 = 0;
  uint64_t v236 = 0;
  uint64_t v235 = 0;
  uint64_t v234 = 0;
  uint64_t v233 = 0;
  int v231 = 0;
  uint64_t v227 = 0;
  uint64_t v183 = 0;
  uint64_t v219 = 0;
  uint64_t v185 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitEnergy>);
  uint64_t v186 = *(void **)(v185 - 8);
  uint64_t v187 = v185 - 8;
  unint64_t v188 = (v186[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v8 = MEMORY[0x270FA5388](0);
  uint64_t v189 = (char *)&isa - v188;
  unint64_t v190 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v191 = (char *)&isa - v190;
  uint64_t v243 = (char *)&isa - v190;
  unint64_t v192 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v10);
  uint64_t v193 = (char *)&isa - v192;
  uint64_t v242 = (char *)&isa - v192;
  uint64_t v201 = type metadata accessor for Logger();
  uint64_t v202 = *(void *)(v201 - 8);
  uint64_t v203 = v201 - 8;
  uint64_t v205 = *(void *)(v202 + 64);
  unint64_t v204 = (v205 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v12 = MEMORY[0x270FA5388](v209);
  uint64_t v206 = (char *)&isa - v204;
  unint64_t v207 = (v205 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = (void *)MEMORY[0x270FA5388](v12);
  Class v208 = (char *)&isa - v207;
  uint64_t v241 = v14;
  uint64_t v240 = v15;
  unint64_t v239 = v13;
  uint64_t v238 = v16;
  char v237 = v17 & 1;
  uint64_t v236 = v18;
  uint64_t v235 = v19;
  uint64_t v234 = v20;
  id v21 = v13;
  if (v209)
  {
    uint64_t v172 = v209;
    id v22 = v208;
    id v153 = v209;
    uint64_t v219 = v209;
    uint64_t v151 = Logger.wellnessIntents.unsafeMutableAddressor();
    uint64_t v152 = &v218;
    uint64_t v159 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v202 + 16))(v22, v151, v201);
    swift_endAccess();
    id v23 = v153;
    uint64_t v160 = 7;
    uint64_t v161 = swift_allocObject();
    *(void *)(v161 + 16) = v153;
    uint64_t v169 = Logger.logObject.getter();
    int v170 = static os_log_type_t.error.getter();
    unint64_t v156 = &v216;
    uint64_t v216 = 12;
    unint64_t v154 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v155 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v157 = v217;
    uint64_t v158 = 17;
    uint64_t v163 = swift_allocObject();
    *(unsigned char *)(v163 + 16) = 64;
    uint64_t v164 = swift_allocObject();
    *(unsigned char *)(v164 + 16) = 8;
    uint64_t v24 = swift_allocObject();
    uint64_t v25 = v161;
    uint64_t v162 = v24;
    *(void *)(v24 + 16) = v173;
    *(void *)(v24 + 24) = v25;
    uint64_t v26 = swift_allocObject();
    uint64_t v27 = v162;
    uint64_t v166 = v26;
    *(void *)(v26 + 16) = v174;
    *(void *)(v26 + 24) = v27;
    uint64_t v168 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v165 = _allocateUninitializedArray<A>(_:)();
    uint64_t v167 = v28;
    swift_retain();
    uint64_t v29 = v163;
    uint64_t v30 = v167;
    *uint64_t v167 = v175;
    v30[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v29;
    swift_retain();
    uint64_t v31 = v164;
    uint64_t v32 = v167;
    v167[2] = v176;
    v32[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v31;
    swift_retain();
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v166;
    uint64_t v34 = v167;
    v167[4] = v177;
    v34[5] = v33;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v169, (os_log_type_t)v170))
    {
      uint64_t v35 = v183;
      uint64_t v144 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v143 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v145 = createStorage<A>(capacity:type:)(1);
      uint64_t v146 = createStorage<A>(capacity:type:)(0);
      uint64_t v147 = &v214;
      unsigned int v214 = v144;
      uint64_t v148 = &v213;
      uint64_t v213 = v145;
      uint32_t v149 = &v212;
      uint64_t v212 = v146;
      serialize(_:at:)(2, &v214);
      serialize(_:at:)(1, v147);
      Class v210 = v175;
      uint64_t v211 = v163;
      closure #1 in osLogInternal(_:log:type:)(&v210, (uint64_t)v147, (uint64_t)v148, (uint64_t)v149);
      uint64_t v150 = v35;
      if (v35)
      {
        __break(1u);
      }
      else
      {
        Class v210 = v176;
        uint64_t v211 = v164;
        closure #1 in osLogInternal(_:log:type:)(&v210, (uint64_t)&v214, (uint64_t)&v213, (uint64_t)&v212);
        uint64_t v142 = 0;
        Class v210 = v177;
        uint64_t v211 = v166;
        closure #1 in osLogInternal(_:log:type:)(&v210, (uint64_t)&v214, (uint64_t)&v213, (uint64_t)&v212);
        _os_log_impl(&dword_25DE00000, v169, (os_log_type_t)v170, "Error while querying HealthKit for quantity samples: %@", v144, v157);
        destroyStorage<A>(_:count:)(v145, 1, v143);
        destroyStorage<A>(_:count:)(v146, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v144, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v202 + 8))(v208, v201);
    id v36 = v153;
    id v141 = &v215;
    id v215 = v153;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetAcitivitySummaryIntentResponse, Error>);
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    if (v200)
    {
      uint64_t v171 = v200;
      uint64_t v138 = v200;
      swift_bridgeObjectRetain();
      unint64_t v137 = v220;
      v220[0] = v138;
      uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKActivitySummary]);
      lazy protocol witness table accessor for type [HKActivitySummary] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      uint64_t v139 = (void *)v220[1];
      swift_bridgeObjectRelease();
      unsigned int v140 = v139;
    }
    else
    {
      unsigned int v140 = 0;
    }
    uint64_t v135 = v140;
    if (v140)
    {
      uint64_t v134 = v135;
      int v38 = v206;
      id v113 = v135;
      int v231 = v135;
      uint64_t v111 = Logger.wellnessIntents.unsafeMutableAddressor();
      uint64_t v112 = &v230;
      uint64_t v119 = 32;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v202 + 16))(v38, v111, v201);
      swift_endAccess();
      id v39 = v113;
      uint64_t v120 = 7;
      uint64_t v121 = swift_allocObject();
      *(void *)(v121 + 16) = v113;
      int v129 = Logger.logObject.getter();
      int v130 = static os_log_type_t.debug.getter();
      uint64_t v116 = &v228;
      uint64_t v228 = 12;
      unint64_t v114 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v115 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v117 = v229;
      uint64_t v118 = 17;
      uint64_t v123 = swift_allocObject();
      *(unsigned char *)(v123 + 16) = 64;
      uint64_t v124 = swift_allocObject();
      *(unsigned char *)(v124 + 16) = 8;
      uint64_t v40 = swift_allocObject();
      uint64_t v41 = v121;
      uint64_t v122 = v40;
      *(void *)(v40 + 16) = v178;
      *(void *)(v40 + 24) = v41;
      uint64_t v42 = swift_allocObject();
      uint64_t v43 = v122;
      uint64_t v126 = v42;
      *(void *)(v42 + 16) = v179;
      *(void *)(v42 + 24) = v43;
      uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v125 = _allocateUninitializedArray<A>(_:)();
      uint64_t v127 = v44;
      swift_retain();
      uint64_t v45 = v123;
      unint64_t v46 = v127;
      *uint64_t v127 = v180;
      v46[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v45;
      swift_retain();
      uint64_t v47 = v124;
      uint64_t v48 = v127;
      v127[2] = v181;
      v48[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v47;
      swift_retain();
      id v49 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v126;
      id v50 = v127;
      v127[4] = v182;
      v50[5] = v49;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v129, (os_log_type_t)v130))
      {
        uint64_t v51 = v183;
        uint32_t v104 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v105 = createStorage<A>(capacity:type:)(1);
        uint64_t v106 = createStorage<A>(capacity:type:)(0);
        int v107 = &v225;
        id v225 = v104;
        uint64_t v108 = &v224;
        uint64_t v224 = v105;
        uint64_t v109 = &v223;
        uint64_t v223 = v106;
        serialize(_:at:)(2, &v225);
        serialize(_:at:)(1, v107);
        unsigned int v221 = v180;
        uint64_t v222 = v123;
        closure #1 in osLogInternal(_:log:type:)(&v221, (uint64_t)v107, (uint64_t)v108, (uint64_t)v109);
        uint64_t v110 = v51;
        if (v51)
        {
          __break(1u);
        }
        else
        {
          unsigned int v221 = v181;
          uint64_t v222 = v124;
          closure #1 in osLogInternal(_:log:type:)(&v221, (uint64_t)&v225, (uint64_t)&v224, (uint64_t)&v223);
          uint64_t v102 = 0;
          unsigned int v221 = v182;
          uint64_t v222 = v126;
          closure #1 in osLogInternal(_:log:type:)(&v221, (uint64_t)&v225, (uint64_t)&v224, (uint64_t)&v223);
          _os_log_impl(&dword_25DE00000, v129, (os_log_type_t)v130, "summary: %@", v104, v117);
          destroyStorage<A>(_:count:)(v105, 1, v103);
          destroyStorage<A>(_:count:)(v106, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](v104, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v202 + 8))(v206, v201);
      uint64_t v85 = 0;
      type metadata accessor for GetAcitivitySummaryIntentResponse();
      unint64_t v101 = GetAcitivitySummaryIntentResponse.__allocating_init(code:userActivity:)(4, v85);
      uint64_t v227 = v101;
      type metadata accessor for NSNumber();
      v52.super.super.Class isa = NSNumber.__allocating_init(value:)(v196 & 1).super.super.isa;
      uint64_t v53 = v189;
      Class isa = v52.super.super.isa;
      objc_msgSend(v101, sel_setIsWheelchairUser_);

      id v70 = objc_msgSend(v113, sel_appleExerciseTime);
      unint64_t v79 = 0x263F0A000uLL;
      uint64_t v54 = self;
      unint64_t v72 = 0x1F7780000uLL;
      id v69 = [v54 (SEL)0x1F7780D7ALL];
      unint64_t v87 = 0x1F7C3B000uLL;
      [v70 (SEL)0x1F7C3BF93];
      double v71 = v55;

      objc_msgSend(v101, sel_setAppleExerciseTime_, v71);
      id v74 = objc_msgSend(v113, sel_appleExerciseTimeGoal);
      id v73 = [self (SEL)(v72 + 3450)];
      [v74 (SEL)(v87 + 3987)];
      double v75 = v56;

      objc_msgSend(v101, sel_setAppleExerciseTimeGoal_, v75);
      id v77 = objc_msgSend(v113, sel_appleStandHours);
      char v57 = self;
      unint64_t v80 = 0x1F7C3A000uLL;
      id v76 = [v57 (SEL)0x1F7C3A708];
      [v77 (SEL)(v87 + 3987)];
      double v78 = v58;

      objc_msgSend(v101, sel_setAppleStandHours_, v78);
      id v82 = objc_msgSend(v113, sel_appleStandHoursGoal);
      id v81 = [self (SEL)(v80 + 1800)];
      [v82 (SEL)(v87 + 3987)];
      double v83 = v59;

      objc_msgSend(v101, sel_setAppleStandHoursGoal_, v83);
      id v84 = objc_msgSend(v113, sel_activeEnergyBurnedGoal);
      objc_msgSend(v84, (SEL)(v87 + 3987), v197);
      uint64_t v86 = v60;

      id v61 = v198;
      unint64_t v90 = type metadata accessor for NSUnitEnergy();
      Measurement.init(value:unit:)();
      id v88 = objc_msgSend(v113, sel_activeEnergyBurned);
      objc_msgSend(v88, (SEL)(v87 + 3987), v197);
      uint64_t v89 = v62;

      id v63 = v198;
      Measurement.init(value:unit:)();
      uint64_t v93 = (void (*)(char *, char *, uint64_t))v186[2];
      uint64_t v92 = v186 + 2;
      v93(v53, v193, v185);
      NSMeasurement v244 = Measurement._bridgeToObjectiveC()();
      uint64_t v64 = v189;
      Class v91 = v244.super.isa;
      uint64_t v100 = (void (*)(char *, uint64_t, __n128))v186[1];
      int v99 = v186 + 1;
      v100(v189, v185, *(__n128 *)&v244._doubleValue);
      objc_msgSend(v101, sel_setActiveEnergyBurnedGoal_, v91);

      v93(v64, v191, v185);
      NSMeasurement v245 = Measurement._bridgeToObjectiveC()();
      Class v94 = v245.super.isa;
      v100(v189, v185, *(__n128 *)&v245._doubleValue);
      objc_msgSend(v101, sel_setActiveEnergyBurned_, v94);

      id v96 = objc_msgSend(v199, sel_unitString);
      uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v95 = v66;
      id v97 = (id)MEMORY[0x2611C8860](v65);
      swift_bridgeObjectRelease();

      objc_msgSend(v101, sel_setActiveEnergyBurnedUnit_, v97);
      uint64_t v67 = v101;
      uint64_t v98 = &v226;
      uint64_t v226 = v101;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetAcitivitySummaryIntentResponse, Error>);
      CheckedContinuation.resume(returning:)();
      ((void (*)(char *, uint64_t))v100)(v191, v185);
      ((void (*)(char *, uint64_t))v100)(v193, v185);
    }
    else
    {
      id v131 = 0;
      type metadata accessor for GetAcitivitySummaryIntentResponse();
      uint64_t v133 = GetAcitivitySummaryIntentResponse.__allocating_init(code:userActivity:)(102, v131);
      uint64_t v233 = v133;
      uint64_t v37 = v133;
      id v132 = &v232;
      uint64_t v232 = v133;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetAcitivitySummaryIntentResponse, Error>);
      CheckedContinuation.resume(returning:)();
    }
  }
}

NSNumber __swiftcall NSNumber.__allocating_init(value:)(Swift::Bool value)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSNumber)@nonobjc NSNumber.init(value:)(value);
}

id HKActivitySummaryQuery.__allocating_init(predicate:resultsHandler:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKActivitySummaryQuery.init(predicate:resultsHandler:)(a1, a2, a3);
}

uint64_t protocol witness for ActivitySummaryFetching.isReadingAuthorized() in conformance ActivitySummaryFetcher()
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  char v5 = *v0;
  char v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *char v2 = *(void *)(v4 + 16);
  v2[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return CycleTrackingFetcher.isReadingAuthorized()(v5);
}

uint64_t protocol witness for ActivitySummaryFetching.query() in conformance ActivitySummaryFetcher()
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v5 = *v0;
  char v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *char v2 = *(void *)(v4 + 16);
  v2[1] = protocol witness for QuantityFetching.query(start:end:) in conformance HealthKitFetcher;
  return ActivitySummaryFetcher.query()(v5);
}

id @nonobjc NSNumber.init(value:)(char a1)
{
  return objc_msgSend(v1, sel_initWithBool_, a1 & 1);
}

id @nonobjc HKActivitySummaryQuery.init(predicate:resultsHandler:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v9 = 1107296256;
  int v10 = 0;
  uint64_t v11 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed HKActivitySummaryQuery, @guaranteed [HKActivitySummary]?, @guaranteed Error?) -> ();
  uint64_t v12 = &block_descriptor_11;
  uint64_t v5 = _Block_copy(&aBlock);
  id v7 = objc_msgSend(v4, sel_initWithPredicate_resultsHandler_, a1);
  _Block_release(v5);
  swift_release();

  return v7;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@guaranteed HKActivitySummaryQuery, @guaranteed [HKActivitySummary]?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v12 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  id v4 = a2;
  id v5 = a3;
  if (a3)
  {
    type metadata accessor for HKActivitySummary();
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v6 = a4;
  if (a4) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = 0;
  }
  v12(a2, v10);

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_25DE6608C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE660B8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE660E4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE66124()
{
  return swift_deallocObject();
}

uint64_t sub_25DE66164()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in GetActivitySummaryIntentHandler.handle(intent:)()
{
  uint64_t v5 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v8 = (void *)v0[2];
  id v6 = (const void *)v0[3];
  id v7 = (void *)v0[4];
  char v2 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v2;
  *char v2 = *(void *)(v5 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  uint64_t v3 = async function pointer to @objc closure #1 in GetActivitySummaryIntentHandler.handle(intent:);
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in GetActivitySummaryIntentHandler.handle(intent:)
                                                               + v3))(v8, v6, v7);
}

unint64_t lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component;
  if (!lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component)
  {
    type metadata accessor for Calendar.Component();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Calendar.Component and conformance Calendar.Component);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type HKWheelchairUse and conformance HKWheelchairUse()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKWheelchairUse and conformance HKWheelchairUse;
  if (!lazy protocol witness table cache variable for type HKWheelchairUse and conformance HKWheelchairUse)
  {
    type metadata accessor for HKWheelchairUse();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKWheelchairUse and conformance HKWheelchairUse);
    return WitnessTable;
  }
  return v2;
}

void partial apply for closure #1 in ActivitySummaryFetcher.query()(uint64_t a1)
{
  closure #1 in ActivitySummaryFetcher.query()(a1, *(void **)(v1 + 16), *(unsigned char *)(v1 + 24) & 1, *(void **)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48), *(void **)(v1 + 56));
}

uint64_t type metadata accessor for GetActivitySummaryIntentHandler()
{
  return self;
}

ValueMetadata *type metadata accessor for ActivitySummaryFetcher()
{
  return &type metadata for ActivitySummaryFetcher;
}

unint64_t type metadata accessor for HKActivitySummaryQuery()
{
  uint64_t v2 = lazy cache variable for type metadata for HKActivitySummaryQuery;
  if (!lazy cache variable for type metadata for HKActivitySummaryQuery)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKActivitySummaryQuery);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25DE6646C()
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetAcitivitySummaryIntentResponse, Error>)
                 - 8);
  unint64_t v1 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v4 = (v1 + *(void *)(v3 + 64) + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t))(v3 + 8))(v0 + v1);

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in ActivitySummaryFetcher.query()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetAcitivitySummaryIntentResponse, Error>)
                  - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v5 = v4 + *(void *)(v15 + 64);
  unint64_t v6 = (v5 + 8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v3 + v6);
  uint64_t v9 = *(void **)(v3 + v7);
  uint64_t v10 = *(void **)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8));
  int v11 = *(unsigned char *)(v3 + v5) & 1;
  closure #1 in closure #1 in ActivitySummaryFetcher.query()(a1, a2, a3, v3 + v4, v11, v8, v9, v10);
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

unint64_t type metadata accessor for HKActivitySummary()
{
  uint64_t v2 = lazy cache variable for type metadata for HKActivitySummary;
  if (!lazy cache variable for type metadata for HKActivitySummary)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKActivitySummary);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25DE66768()
{
  return swift_deallocObject();
}

uint64_t sub_25DE667A8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE667D4()
{
  return swift_deallocObject();
}

uint64_t sub_25DE66800()
{
  return swift_deallocObject();
}

uint64_t sub_25DE66840()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for NSUnitEnergy()
{
  uint64_t v2 = lazy cache variable for type metadata for NSUnitEnergy;
  if (!lazy cache variable for type metadata for NSUnitEnergy)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSUnitEnergy);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [HKActivitySummary] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKActivitySummary] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKActivitySummary] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKActivitySummary]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKActivitySummary] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DE6696C()
{
  return swift_deallocObject();
}

uint64_t sub_25DE669AC()
{
  return swift_deallocObject();
}

uint64_t sub_25DE669D8()
{
  return swift_deallocObject();
}

uint64_t sub_25DE66A04()
{
  return swift_deallocObject();
}

uint64_t sub_25DE66A44()
{
  return swift_deallocObject();
}

uint64_t PeriodFlow.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PeriodFlow()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PeriodFlow()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PeriodFlow()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance PeriodFlow()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PeriodFlow@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = PeriodFlow.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PeriodFlow(void *a1@<X8>)
{
  PeriodFlow.rawValue.getter();
  *a1 = v1;
}

id static PeriodFlowResolutionResult.success(with:)()
{
  id ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
  PeriodFlow.rawValue.getter();
  id v1 = objc_msgSend(ObjCClassFromMetadata, sel_successWithResolvedValue_, v0);
  return v1;
}

id static PeriodFlowResolutionResult.confirmationRequired(with:)()
{
  id ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
  PeriodFlow.rawValue.getter();
  id v1 = objc_msgSend(ObjCClassFromMetadata, sel_confirmationRequiredWithValueToConfirm_, v0);
  return v1;
}

id PeriodFlowResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v7 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_);

  swift_bridgeObjectRelease();
  return v7;
}

id PeriodFlowResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v11 = 0;
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = 0;
  v8.super_class = (Class)type metadata accessor for PeriodFlowResolutionResult();
  id v7 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  if (v7)
  {
    id v2 = v7;
    id v11 = v7;

    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t type metadata accessor for PeriodFlowResolutionResult()
{
  return self;
}

id PeriodFlowResolutionResult.__deallocating_deinit()
{
  char v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PeriodFlowResolutionResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in PeriodFlow()
{
  return lazy protocol witness table accessor for type PeriodFlow and conformance PeriodFlow();
}

unint64_t lazy protocol witness table accessor for type PeriodFlow and conformance PeriodFlow()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PeriodFlow and conformance PeriodFlow;
  if (!lazy protocol witness table cache variable for type PeriodFlow and conformance PeriodFlow)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PeriodFlow and conformance PeriodFlow);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type PeriodFlow and conformance PeriodFlow;
  if (!lazy protocol witness table cache variable for type PeriodFlow and conformance PeriodFlow)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PeriodFlow and conformance PeriodFlow);
    return WitnessTable;
  }
  return v2;
}

ValueMetadata *type metadata accessor for PeriodFlow()
{
  return &type metadata for PeriodFlow;
}

SiriWellnessIntents::WellnessAttribute_optional __swiftcall WellnessAttribute.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1 = _allocateUninitializedArray<A>(_:)();
  *(void *)uint64_t v2 = "completed";
  *(void *)(v2 + 8) = 9;
  *(unsigned char *)(v2 + 16) = 2;
  *(void *)(v2 + 24) = "distance";
  *(void *)(v2 + 32) = 8;
  *(unsigned char *)(v2 + 40) = 2;
  *(void *)(v2 + 48) = "duration";
  *(void *)(v2 + 56) = 8;
  *(unsigned char *)(v2 + 64) = 2;
  *(void *)(v2 + 72) = "start";
  *(void *)(v2 + 80) = 5;
  *(unsigned char *)(v2 + 88) = 2;
  *(void *)(v2 + 96) = "stop";
  *(void *)(v2 + 104) = 4;
  *(unsigned char *)(v2 + 112) = 2;
  _finalizeUninitializedArray<A>(_:)();
  Swift::Int v6 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)v1, rawValue);
  swift_bridgeObjectRelease();
  switch(v6)
  {
    case 0:
      v7.value = SiriWellnessIntents_WellnessAttribute_completed;
LABEL_12:
      swift_bridgeObjectRelease();
      return v7;
    case 1:
      v7.value = SiriWellnessIntents_WellnessAttribute_distance;
      goto LABEL_12;
    case 2:
      v7.value = SiriWellnessIntents_WellnessAttribute_duration;
      goto LABEL_12;
    case 3:
      v7.value = SiriWellnessIntents_WellnessAttribute_start;
      goto LABEL_12;
    case 4:
      v7.value = SiriWellnessIntents_WellnessAttribute_stop;
      goto LABEL_12;
  }
  swift_bridgeObjectRelease();
  return (SiriWellnessIntents::WellnessAttribute_optional)5;
}

uint64_t WellnessAttribute.rawValue.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("distance", 8uLL, 1)._countAndFlagsBits;
      break;
    case 2:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("duration", 8uLL, 1)._countAndFlagsBits;
      break;
    case 3:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("start", 5uLL, 1)._countAndFlagsBits;
      break;
    case 4:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("stop", 4uLL, 1)._countAndFlagsBits;
      break;
    default:
      uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("completed", 9uLL, 1)._countAndFlagsBits;
      break;
  }
  return countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance WellnessAttribute()
{
  return == infix<A>(_:_:)() & 1;
}

unint64_t base witness table accessor for Equatable in WellnessAttribute()
{
  return lazy protocol witness table accessor for type WellnessAttribute and conformance WellnessAttribute();
}

unint64_t lazy protocol witness table accessor for type WellnessAttribute and conformance WellnessAttribute()
{
  uint64_t v2 = lazy protocol witness table cache variable for type WellnessAttribute and conformance WellnessAttribute;
  if (!lazy protocol witness table cache variable for type WellnessAttribute and conformance WellnessAttribute)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type WellnessAttribute and conformance WellnessAttribute);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type WellnessAttribute and conformance WellnessAttribute;
  if (!lazy protocol witness table cache variable for type WellnessAttribute and conformance WellnessAttribute)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type WellnessAttribute and conformance WellnessAttribute);
    return WitnessTable;
  }
  return v2;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance WellnessAttribute()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance WellnessAttribute()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance WellnessAttribute()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

SiriWellnessIntents::WellnessAttribute_optional protocol witness for RawRepresentable.init(rawValue:) in conformance WellnessAttribute@<W0>(Swift::String *a1@<X0>, SiriWellnessIntents::WellnessAttribute_optional *a2@<X8>)
{
  result.value = WellnessAttribute.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance WellnessAttribute@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = WellnessAttribute.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for WellnessAttribute(unsigned __int8 *a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 <= 0xFB) {
      goto LABEL_15;
    }
    unsigned int v7 = ((a2 + 4) >> 8) + 1;
    int v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000) {
        int v2 = 4;
      }
      else {
        int v2 = 2;
      }
      int v8 = v2;
    }
    if (v8 == 1) {
      int v6 = a1[1];
    }
    else {
      int v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    }
    if (v6)
    {
      int v5 = (*a1 | ((v6 - 1) << 8)) + 251;
    }
    else
    {
LABEL_15:
      int v3 = *a1 - 5;
      if (v3 < 0) {
        int v3 = -1;
      }
      int v5 = v3;
    }
  }
  else
  {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for WellnessAttribute(unsigned char *result, unsigned int a2, unsigned int a3)
{
  int v7 = 0;
  if (a3 > 0xFB)
  {
    unsigned int v5 = ((a3 + 4) >> 8) + 1;
    int v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000) {
        int v3 = 4;
      }
      else {
        int v3 = 2;
      }
      int v6 = v3;
    }
    int v7 = v6;
  }
  if (a2 > 0xFB)
  {
    unsigned int v4 = ((a2 - 252) >> 8) + 1;
    unsigned char *result = a2 + 4;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2) {
      unsigned char *result = a2 + 4;
    }
  }
  return result;
}

uint64_t getEnumTag for WellnessAttribute(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for WellnessAttribute(unsigned char *result, char a2)
{
  unsigned char *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for WellnessAttribute()
{
  return &type metadata for WellnessAttribute;
}

id LogSpecificMedicationsIntentHandler.__allocating_init(storage:)(void *a1)
{
  id v2 = objc_allocWithZone(v1);
  return LogSpecificMedicationsIntentHandler.init(storage:)(a1);
}

id LogSpecificMedicationsIntentHandler.init(storage:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  id v2 = v1;
  id v14 = v1;
  outlined init with copy of QuantityPersisting?(a1, v12);
  if (v12[3])
  {
    outlined init with take of QuantityPersisting(v12, __dst);
  }
  else
  {
    id v3 = MedsUndoer.init()();
    __dst[3] = &type metadata for SpecificMedicationsPersistor;
    __dst[4] = &protocol witness table for SpecificMedicationsPersistor;
    __dst[0] = v3;
    __dst[1] = v4;
    outlined destroy of QuantityPersisting?((uint64_t)v12);
  }
  outlined init with take of QuantityPersisting(__dst, &v8[OBJC_IVAR____TtC19SiriWellnessIntents35LogSpecificMedicationsIntentHandler_storage]);

  v11.receiver = v14;
  v11.super_class = ObjectType;
  id v7 = objc_msgSendSuper2(&v11, sel_init);
  id v5 = v7;
  id v14 = v7;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v7;
}

uint64_t LogSpecificMedicationsIntentHandler.handle(intent:)(uint64_t a1)
{
  *(void *)(v2 + 712) = v1;
  *(void *)(v2 + 704) = a1;
  *(void *)(v2 + 408) = v2;
  *(void *)(v2 + 416) = 0;
  *(void *)(v2 + 424) = 0;
  *(unsigned char *)(v2 + 1032) = 0;
  *(void *)(v2 + 344) = 0;
  *(void *)(v2 + 352) = 0;
  *(void *)(v2 + 592) = 0;
  *(void *)(v2 + 392) = 0;
  *(void *)(v2 + 400) = 0;
  uint64_t v3 = type metadata accessor for Date();
  *(void *)(v2 + 720) = v3;
  *(void *)(v2 + 728) = *(void *)(v3 - 8);
  *(void *)(v2 + 736) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v2 + 744) = swift_task_alloc();
  *(void *)(v2 + 752) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v2 + 760) = v4;
  *(void *)(v2 + 768) = *(void *)(v4 - 8);
  *(void *)(v2 + 776) = swift_task_alloc();
  *(void *)(v2 + 784) = swift_task_alloc();
  *(void *)(v2 + 792) = swift_task_alloc();
  *(void *)(v2 + 800) = swift_task_alloc();
  *(void *)(v2 + 808) = swift_task_alloc();
  *(void *)(v2 + 816) = swift_task_alloc();
  *(void *)(v2 + 824) = swift_task_alloc();
  *(void *)(v2 + 416) = a1;
  *(void *)(v2 + 424) = v1;
  return MEMORY[0x270FA2498](LogSpecificMedicationsIntentHandler.handle(intent:), 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  id v5;
  void *v6;
  void *v7;
  id v8;
  objc_class *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(char *);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint32_t v54;
  os_log_type_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint32_t v69;
  os_log_type_t v70;
  NSObject *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  unsigned __int8 v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  id v100;
  uint64_t v101;
  uint8_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t, uint64_t);
  id v108;
  uint32_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  NSObject *v143;
  os_log_type_t v144;
  uint64_t v145;
  id v146;
  unsigned __int8 v147;
  char v148;
  id v149;
  unsigned __int8 v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  id v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void (*v160)(uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  id v165;
  uint64_t v166;
  uint8_t *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t, uint64_t);
  id v173;
  uint32_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  os_log_t v203;
  os_log_type_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  id v209;
  uint64_t v210;
  uint64_t v211;
  void (*v212)(uint64_t, uint64_t);
  char *v213;
  char *v214;
  uint64_t v215;
  uint8_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void (*v221)(uint64_t, uint64_t, uint64_t);
  uint32_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  void *v228;
  NSObject *log;
  os_log_type_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  id v236;
  id v237;
  char v238;
  uint64_t v239;
  uint64_t v240;
  id v241;
  id v242;
  uint64_t v243;
  uint64_t v244;
  id v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  id v249;
  Class isa;
  uint64_t v251;
  uint64_t v252;
  id v253;
  id v254;
  unsigned __int8 v255;
  char v256;
  uint64_t v257;
  uint64_t v258;
  void (*v259)(uint64_t, uint64_t);
  id v260;
  uint64_t v261;
  uint64_t v262;
  uint8_t *buf;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  uint64_t v267;
  uint64_t v268;
  void (*v269)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v271;
  NSObject *oslog;
  uint64_t v273;
  void *v274;
  char v275;
  uint8_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t (*v279)(uint64_t, uint64_t, uint64_t);
  uint64_t v280;
  uint8_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t (*v284)(uint64_t, uint64_t, uint64_t);
  uint64_t v285;
  uint8_t *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t (*v289)(uint64_t, uint64_t, uint64_t);
  uint64_t v290;
  id v291;
  id v292;
  uint64_t v293;
  uint64_t v294;
  char v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;

  uint64_t v293 = v1;
  MEMORY[0x270FA5388](a1);
  uint64_t v274 = (void *)v1;
  uint64_t v275 = *(unsigned char *)(v1 + 1034);
  *(void *)(v1 + 408) = v1;
  __swift_destroy_boxed_opaque_existential_1(v1 + 16);
  if ((v275 & 1) == 0)
  {
    uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 832);
    uint64_t v40 = *(void *)(v1 + 776);
    NSNumber v52 = *(void *)(v1 + 760);
    uint64_t v51 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v53(v40, v51, v52);
    swift_endAccess();
    double v56 = Logger.logObject.getter();
    double v55 = static os_log_type_t.error.getter();
    *(void *)(v1 + 440) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v54 = *(_DWORD *)(v1 + 1040);
    char v57 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v56, v55))
    {
      uint64_t v41 = *(void *)(v1 + 880);
      uint64_t v47 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      unint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v48 = createStorage<A>(capacity:type:)(0);
      id v49 = createStorage<A>(capacity:type:)(0);
      *(void *)(v1 + 448) = v47;
      *(void *)(v1 + 456) = v48;
      *(void *)(v1 + 464) = v49;
      serialize(_:at:)(0, (unsigned char **)(v1 + 448));
      serialize(_:at:)(0, (unsigned char **)(v1 + 448));
      *(void *)(v1 + 472) = v57;
      id v50 = (void *)swift_task_alloc();
      v50[2] = v1 + 448;
      v50[3] = v1 + 456;
      v50[4] = v1 + 464;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v41) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v56, v55, "Not authorized to write medications data.", v47, v54);
      destroyStorage<A>(_:count:)(v48, 0, v46);
      destroyStorage<A>(_:count:)(v49, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v47, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v1 + 888);
    uint64_t v43 = *(void *)(v1 + 776);
    unint64_t v44 = *(void *)(v1 + 760);

    v45(v43, v44);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    unsigned int v214 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(101, 0);
    goto LABEL_121;
  }
  uint64_t v269 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 832);
  uint64_t v2 = *(void *)(v1 + 816);
  uint64_t v268 = *(void *)(v1 + 760);
  uint64_t v267 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v269(v2, v267, v268);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  uint64_t v271 = static os_log_type_t.debug.getter();
  *(void *)(v1 + 480) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v1 + 1044);
  uint64_t v273 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v271))
  {
    uint64_t v3 = *(void *)(v1 + 880);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v262 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v264 = createStorage<A>(capacity:type:)(0);
    uint64_t v265 = createStorage<A>(capacity:type:)(0);
    *(void *)(v1 + 640) = buf;
    *(void *)(v1 + 648) = v264;
    *(void *)(v1 + 656) = v265;
    serialize(_:at:)(0, (unsigned char **)(v1 + 640));
    serialize(_:at:)(0, (unsigned char **)(v1 + 640));
    *(void *)(v1 + 664) = v273;
    uint64_t v266 = (void *)swift_task_alloc();
    void v266[2] = v1 + 640;
    v266[3] = v1 + 648;
    v266[4] = v1 + 656;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    uint64_t result = Sequence.forEach(_:)();
    if (v3) {
      return result;
    }
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, oslog, v271, "Authorization check successful for medications!", buf, size);
    destroyStorage<A>(_:count:)(v264, 0, v262);
    destroyStorage<A>(_:count:)(v265, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_bridgeObjectRelease();
    uint64_t v261 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v261 = *(void *)(v1 + 880);
  }
  uint32_t v259 = *(void (**)(uint64_t, uint64_t))(v1 + 888);
  uint64_t v257 = *(void *)(v1 + 816);
  uint64_t v258 = *(void *)(v1 + 760);
  uint64_t v260 = *(id *)(v1 + 704);

  v259(v257, v258);
  *(void *)(v1 + 488) = objc_msgSend(v260, sel_medStatus);
  if (*(void *)(v1 + 488))
  {
    uint64_t v254 = *(id *)(v1 + 488);
    id v5 = v254;
    outlined destroy of HealthKitPersistor((id *)(v1 + 488));
    uint64_t v255 = objc_msgSend(v254, sel_BOOLValue);

    uint64_t v256 = v255 & 1;
  }
  else
  {
    outlined destroy of HealthKitPersistor((id *)(v1 + 488));
    uint64_t v256 = 2;
  }
  if (v256 == 2)
  {
    uint64_t v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 832);
    id v39 = *(void *)(v1 + 784);
    uint64_t v67 = *(void *)(v1 + 760);
    uint64_t v66 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v68(v39, v66, v67);
    swift_endAccess();
    double v71 = Logger.logObject.getter();
    id v70 = static os_log_type_t.error.getter();
    *(void *)(v1 + 496) = 2;
    UnsignedInteger<>.init<A>(_:)();
    id v69 = *(_DWORD *)(v1 + 1048);
    unint64_t v72 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v71, v70))
    {
      uint64_t v62 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      id v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      id v63 = createStorage<A>(capacity:type:)(0);
      uint64_t v64 = createStorage<A>(capacity:type:)(0);
      *(void *)(v1 + 504) = v62;
      *(void *)(v1 + 512) = v63;
      *(void *)(v1 + 520) = v64;
      serialize(_:at:)(0, (unsigned char **)(v1 + 504));
      serialize(_:at:)(0, (unsigned char **)(v1 + 504));
      *(void *)(v1 + 528) = v72;
      uint64_t v65 = (void *)swift_task_alloc();
      v65[2] = v1 + 504;
      v65[3] = v1 + 512;
      v65[4] = v1 + 520;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v261) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v71, v70, "Unable to extract BOOLean value for medStatusTaken from LogSpecificMedicationsIntent.", v62, v69);
      destroyStorage<A>(_:count:)(v63, 0, v61);
      destroyStorage<A>(_:count:)(v64, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v62, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v1 + 888);
    double v58 = *(void *)(v1 + 784);
    double v59 = *(void *)(v1 + 760);

    v60(v58, v59);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    unsigned int v214 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    goto LABEL_121;
  }
  int v6 = *(void **)(v1 + 704);
  *(unsigned char *)(v1 + 1032) = v256 & 1;
  uint64_t v253 = objc_msgSend(v6, sel_medicationIDs);
  if (v253)
  {
    uint64_t v251 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unsigned int v252 = v251;
  }
  else
  {
    unsigned int v252 = 0;
  }
  *(void *)(v1 + 912) = v252;
  if (!v252) {
    goto LABEL_52;
  }
  uint64_t v7 = *(void **)(v1 + 704);
  *(void *)(v1 + 592) = v252;
  uint64_t v249 = objc_msgSend(v7, sel_logAsNeeded);
  int v8 = v249;
  type metadata accessor for NSNumber();
  Class isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  uint64_t v9 = isa;
  *(void *)(v1 + 360) = v249;
  *(void *)(v1 + 368) = isa;
  if (*(void *)(v1 + 360))
  {
    outlined init with copy of NSPredicate?((id *)(v1 + 360), (void *)(v1 + 632));
    if (*(void *)(v1 + 368))
    {
      uint64_t v291 = *(id *)(v1 + 632);
      char v292 = *(id *)(v1 + 368);
      uint64_t v248 = static NSObject.== infix(_:_:)();

      outlined destroy of HealthKitPersistor((id *)(v1 + 360));
      if ((v248 & 1) == 0) {
        goto LABEL_51;
      }
      goto LABEL_26;
    }
  }
  else if (!*(void *)(v1 + 368))
  {
    outlined destroy of HealthKitPersistor((id *)(v1 + 360));

LABEL_26:
    swift_bridgeObjectRetain();
    *(void *)(v1 + 600) = v252;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    uint64_t v246 = *(void *)(v1 + 376);
    uint64_t v247 = *(void *)(v1 + 384);
    *(void *)(v1 + 920) = v247;
    if (v247)
    {
      *(void *)(v1 + 392) = v246;
      *(void *)(v1 + 400) = v247;
      if (MEMORY[0x2611C8A40](v252) == 1)
      {
        NSMeasurement v245 = *(id *)(v1 + 704);
        outlined init with copy of QuantityPersisting(*(void *)(v1 + 712) + OBJC_IVAR____TtC19SiriWellnessIntents35LogSpecificMedicationsIntentHandler_storage, v1 + 136);
        uint64_t v243 = *(void *)(v1 + 160);
        NSMeasurement v244 = *(void *)(v1 + 168);
        __swift_project_boxed_opaque_existential_1((void *)(v1 + 136), v243);
        *(void *)(v1 + 616) = objc_msgSend(v245, sel_dosage);
        if (*(void *)(v1 + 616))
        {
          uint64_t v242 = *(id *)(v1 + 616);
          uint64_t v10 = v242;
          outlined destroy of HealthKitPersistor((id *)(v1 + 616));
          objc_msgSend(v242, sel_doubleValue);
        }
        else
        {
          outlined destroy of HealthKitPersistor((id *)(v1 + 616));
        }
        uint64_t v241 = objc_msgSend(*(id *)(v1 + 704), sel_dosageUnit);
        if (v241)
        {
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v239 = v11;

          uint64_t v240 = v239;
        }
        else
        {
          uint64_t v240 = 0;
        }
        *(void *)(v1 + 928) = v240;
        *(void *)(v1 + 624) = objc_msgSend(*(id *)(v1 + 704), sel_strength);
        if (*(void *)(v1 + 624))
        {
          char v237 = *(id *)(v1 + 624);
          uint64_t v12 = v237;
          outlined destroy of HealthKitPersistor((id *)(v1 + 624));
          objc_msgSend(v237, sel_doubleValue);

          uint64_t v238 = 0;
        }
        else
        {
          outlined destroy of HealthKitPersistor((id *)(v1 + 624));
          uint64_t v238 = 1;
        }
        uint64_t v236 = objc_msgSend(*(id *)(v1 + 704), sel_strengthUnit);
        if (v236)
        {
          uint64_t v232 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v233 = v13;

          uint64_t v234 = v232;
          uint64_t v235 = v233;
        }
        else
        {
          uint64_t v234 = 0;
          uint64_t v235 = 0;
        }
        *(void *)(v1 + 936) = v235;
        int v231 = *(void *)(v244 + 32) + **(int **)(v244 + 32);
        id v14 = (void *)swift_task_alloc();
        v274[118] = v14;
        *id v14 = v274[51];
        v14[1] = LogSpecificMedicationsIntentHandler.handle(intent:);
        uint64_t v295 = v238 & 1;
        uint64_t v296 = v234;
        uint64_t v297 = v235;
        uint64_t v298 = v243;
        uint64_t v299 = v244;
        __asm { BRAA            X8, X16 }
      }
      swift_bridgeObjectRelease();
    }
    unsigned int v221 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 832);
    uint64_t v15 = *(void *)(v1 + 808);
    uint64_t v220 = *(void *)(v1 + 760);
    uint64_t v219 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v221(v15, v219, v220);
    swift_endAccess();
    swift_bridgeObjectRetain();
    uint64_t v223 = swift_allocObject();
    *(void *)(v223 + 16) = v252;
    log = Logger.logObject.getter();
    char v230 = static os_log_type_t.error.getter();
    *(void *)(v1 + 608) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v222 = *(_DWORD *)(v1 + 1060);
    id v225 = swift_allocObject();
    *(unsigned char *)(v225 + 16) = 0;
    uint64_t v226 = swift_allocObject();
    *(unsigned char *)(v226 + 16) = 8;
    uint64_t v224 = swift_allocObject();
    *(void *)(v224 + 16) = partial apply for implicit closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(void *)(v224 + 24) = v223;
    uint64_t v227 = swift_allocObject();
    *(void *)(v227 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(void *)(v227 + 24) = v224;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v228 = v16;
    swift_retain();
    *uint64_t v228 = partial apply for closure #1 in OSLogArguments.append(_:);
    v228[1] = v225;
    swift_retain();
    v228[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v228[3] = v226;
    swift_retain();
    v228[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v228[5] = v227;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v230))
    {
      uint64_t v216 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      id v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint32_t v217 = createStorage<A>(capacity:type:)(0);
      uint64_t v218 = createStorage<A>(capacity:type:)(0);
      uint64_t v286 = v216;
      uint64_t v287 = v217;
      uint64_t v288 = v218;
      serialize(_:at:)(0, &v286);
      serialize(_:at:)(1, &v286);
      v289 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v290 = v225;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v289, (uint64_t)&v286, (uint64_t)&v287, (uint64_t)&v288);
      if (v261) {
        return result;
      }
      v289 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v290 = v226;
      closure #1 in osLogInternal(_:log:type:)(&v289, (uint64_t)&v286, (uint64_t)&v287, (uint64_t)&v288);
      v289 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      uint64_t v290 = v227;
      closure #1 in osLogInternal(_:log:type:)(&v289, (uint64_t)&v286, (uint64_t)&v287, (uint64_t)&v288);
      _os_log_impl(&dword_25DE00000, log, v230, "saveAsNeededWithStrength should only be called with a single medicationID but %ld found, returning .failure.", v216, v222);
      destroyStorage<A>(_:count:)(v217, 0, v215);
      destroyStorage<A>(_:count:)(v218, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v216, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v212 = *(void (**)(uint64_t, uint64_t))(v1 + 888);
    Class v210 = *(void *)(v1 + 808);
    uint64_t v211 = *(void *)(v1 + 760);

    v212(v210, v211);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v213 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    swift_bridgeObjectRelease();
    unsigned int v214 = v213;
LABEL_121:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v42 = *(uint64_t (**)(char *))(*(void *)(v1 + 408) + 8);
    return v42(v214);
  }
  outlined destroy of (HKQuantitySample, HKQuantitySample)((id *)(v1 + 360));

LABEL_51:
  swift_bridgeObjectRelease();
LABEL_52:
  Class v209 = objc_msgSend(*(id *)(v1 + 704), sel_scheduleID);
  if (v209)
  {
    uint64_t v205 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v206 = v17;

    unint64_t v207 = v205;
    Class v208 = v206;
  }
  else
  {
    unint64_t v207 = 0;
    Class v208 = 0;
  }
  *(void *)(v1 + 960) = v208;
  if (!v208)
  {
    int v107 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 832);
    uint64_t v28 = *(void *)(v1 + 792);
    uint64_t v106 = *(void *)(v1 + 760);
    uint64_t v108 = *(id *)(v1 + 704);
    uint64_t v105 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v107(v28, v105, v106);
    swift_endAccess();
    uint64_t v29 = v108;
    uint64_t v110 = swift_allocObject();
    *(void *)(v110 + 16) = v108;
    uint64_t v30 = v108;
    uint64_t v112 = swift_allocObject();
    *(void *)(v112 + 16) = v108;
    uint64_t v31 = v108;
    unint64_t v114 = swift_allocObject();
    *(void *)(v114 + 16) = v108;
    uint64_t v116 = swift_allocObject();
    *(unsigned char *)(v116 + 16) = v256 & 1;
    uint64_t v32 = v108;
    uint64_t v120 = swift_allocObject();
    *(void *)(v120 + 16) = v108;
    uint64_t v33 = v108;
    uint64_t v122 = swift_allocObject();
    *(void *)(v122 + 16) = v108;
    uint64_t v143 = Logger.logObject.getter();
    uint64_t v144 = static os_log_type_t.debug.getter();
    *(void *)(v1 + 536) = 58;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v109 = *(_DWORD *)(v1 + 1052);
    uint64_t v124 = swift_allocObject();
    *(unsigned char *)(v124 + 16) = 32;
    uint64_t v125 = swift_allocObject();
    *(unsigned char *)(v125 + 16) = 8;
    uint64_t v111 = swift_allocObject();
    *(void *)(v111 + 16) = partial apply for implicit closure #2 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(void *)(v111 + 24) = v110;
    uint64_t v126 = swift_allocObject();
    *(void *)(v126 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v126 + 24) = v111;
    uint64_t v127 = swift_allocObject();
    *(unsigned char *)(v127 + 16) = 32;
    uint64_t v128 = swift_allocObject();
    *(unsigned char *)(v128 + 16) = 8;
    id v113 = swift_allocObject();
    *(void *)(v113 + 16) = partial apply for implicit closure #3 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(void *)(v113 + 24) = v112;
    int v129 = swift_allocObject();
    *(void *)(v129 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v129 + 24) = v113;
    int v130 = swift_allocObject();
    *(unsigned char *)(v130 + 16) = 32;
    id v131 = swift_allocObject();
    *(unsigned char *)(v131 + 16) = 8;
    unint64_t v115 = swift_allocObject();
    *(void *)(v115 + 16) = partial apply for implicit closure #4 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(void *)(v115 + 24) = v114;
    id v132 = swift_allocObject();
    *(void *)(v132 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v132 + 24) = v115;
    uint64_t v133 = swift_allocObject();
    *(unsigned char *)(v133 + 16) = 0;
    uint64_t v134 = swift_allocObject();
    *(unsigned char *)(v134 + 16) = 4;
    uint32_t v117 = swift_allocObject();
    *(void *)(v117 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(void *)(v117 + 24) = v116;
    uint64_t v118 = swift_allocObject();
    *(void *)(v118 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
    *(void *)(v118 + 24) = v117;
    uint64_t v119 = swift_allocObject();
    *(void *)(v119 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
    *(void *)(v119 + 24) = v118;
    uint64_t v135 = swift_allocObject();
    *(void *)(v135 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
    *(void *)(v135 + 24) = v119;
    uint64_t v136 = swift_allocObject();
    *(unsigned char *)(v136 + 16) = 32;
    unint64_t v137 = swift_allocObject();
    *(unsigned char *)(v137 + 16) = 8;
    uint64_t v121 = swift_allocObject();
    *(void *)(v121 + 16) = partial apply for implicit closure #6 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(void *)(v121 + 24) = v120;
    uint64_t v138 = swift_allocObject();
    *(void *)(v138 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v138 + 24) = v121;
    uint64_t v139 = swift_allocObject();
    *(unsigned char *)(v139 + 16) = 32;
    unsigned int v140 = swift_allocObject();
    *(unsigned char *)(v140 + 16) = 8;
    uint64_t v123 = swift_allocObject();
    *(void *)(v123 + 16) = partial apply for implicit closure #7 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(void *)(v123 + 24) = v122;
    id v141 = swift_allocObject();
    *(void *)(v141 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v141 + 24) = v123;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v142 = v34;
    swift_retain();
    *uint64_t v142 = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[1] = v124;
    swift_retain();
    v142[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[3] = v125;
    swift_retain();
    v142[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[5] = v126;
    swift_retain();
    v142[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[7] = v127;
    swift_retain();
    v142[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[9] = v128;
    swift_retain();
    v142[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[11] = v129;
    swift_retain();
    v142[12] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[13] = v130;
    swift_retain();
    v142[14] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[15] = v131;
    swift_retain();
    v142[16] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[17] = v132;
    swift_retain();
    v142[18] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[19] = v133;
    swift_retain();
    v142[20] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[21] = v134;
    swift_retain();
    v142[22] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v142[23] = v135;
    swift_retain();
    v142[24] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[25] = v136;
    swift_retain();
    v142[26] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[27] = v137;
    swift_retain();
    v142[28] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[29] = v138;
    swift_retain();
    v142[30] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[31] = v139;
    swift_retain();
    v142[32] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[33] = v140;
    swift_retain();
    v142[34] = partial apply for closure #1 in OSLogArguments.append(_:);
    v142[35] = v141;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v143, v144))
    {
      uint64_t v102 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      unint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v103 = createStorage<A>(capacity:type:)(0);
      uint32_t v104 = createStorage<A>(capacity:type:)(5);
      uint64_t v276 = v102;
      int v277 = v103;
      uint64_t v278 = v104;
      serialize(_:at:)(2, &v276);
      serialize(_:at:)(6, &v276);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v124;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      if (v261) {
        return result;
      }
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v125;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v126;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v127;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v128;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v129;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v130;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v131;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v132;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v133;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v134;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      uint64_t v280 = v135;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v136;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v137;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v138;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v139;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v140;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      uint64_t v279 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v280 = v141;
      closure #1 in osLogInternal(_:log:type:)(&v279, (uint64_t)&v276, (uint64_t)&v277, (uint64_t)&v278);
      _os_log_impl(&dword_25DE00000, v143, v144, "Not provided scheduleID, so persisting specific medication as default...\nstartTime: %s,\nendTime: %s,\nmedicationID: %s,\nmedStatusIsTaken: %{BOOL}d,\ndosage: %s,\ndosageUnit: %s,", v102, v109);
      destroyStorage<A>(_:count:)(v103, 0, v101);
      destroyStorage<A>(_:count:)(v104, 5, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v102, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v95 = *(void (**)(uint64_t, uint64_t))(v1 + 888);
    uint64_t v93 = *(void *)(v1 + 792);
    Class v94 = *(void *)(v1 + 760);
    id v96 = *(void *)(v1 + 712);
    int v99 = *(id *)(v1 + 704);

    v95(v93, v94);
    outlined init with copy of QuantityPersisting(v96 + OBJC_IVAR____TtC19SiriWellnessIntents35LogSpecificMedicationsIntentHandler_storage, v1 + 56);
    id v97 = *(void *)(v1 + 80);
    uint64_t v98 = *(void *)(v1 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v1 + 56), v97);
    uint64_t v100 = objc_msgSend(v99, sel_startTime);
    if (v100)
    {
      uint64_t v92 = *(void *)(v1 + 752);
      unint64_t v90 = *(void *)(v1 + 736);
      Class v91 = *(void *)(v1 + 720);
      uint64_t v89 = *(void *)(v1 + 728);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 32))(v92, v90, v91);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v89 + 56))(v92, 0, 1, v91);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v1 + 728) + 56))(*(void *)(v1 + 752), 1, 1, *(void *)(v1 + 720));
    }
    id v88 = objc_msgSend(*(id *)(v1 + 704), sel_endTime);
    if (v88)
    {
      unint64_t v87 = *(void *)(v1 + 744);
      uint64_t v85 = *(void *)(v1 + 736);
      uint64_t v86 = *(void *)(v1 + 720);
      id v84 = *(void *)(v1 + 728);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 32))(v87, v85, v86);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v84 + 56))(v87, 0, 1, v86);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v1 + 728) + 56))(*(void *)(v1 + 744), 1, 1, *(void *)(v1 + 720));
    }
    *(void *)(v1 + 544) = objc_msgSend(*(id *)(v1 + 704), sel_hasMeridiem);
    if (*(void *)(v1 + 544))
    {
      id v81 = *(id *)(v1 + 544);
      uint64_t v35 = v81;
      outlined destroy of HealthKitPersistor((id *)(v1 + 544));
      id v82 = objc_msgSend(v81, sel_BOOLValue);

      double v83 = v82 & 1;
    }
    else
    {
      outlined destroy of HealthKitPersistor((id *)(v1 + 544));
      double v83 = 2;
    }
    if (v83 == 2) {
      *(unsigned char *)(v1 + 1033) = 0;
    }
    else {
      *(unsigned char *)(v1 + 1033) = v83 & 1;
    }
    unint64_t v80 = objc_msgSend(*(id *)(v1 + 704), sel_medicationIDs);
    if (v80)
    {
      double v78 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v79 = v78;
    }
    else
    {
      unint64_t v79 = 0;
    }
    *(void *)(v1 + 1000) = v79;
    *(void *)(v1 + 552) = objc_msgSend(*(id *)(v1 + 704), sel_dosage);
    if (*(void *)(v1 + 552))
    {
      id v77 = *(id *)(v1 + 552);
      id v36 = v77;
      outlined destroy of HealthKitPersistor((id *)(v1 + 552));
      objc_msgSend(v77, sel_doubleValue);
    }
    else
    {
      outlined destroy of HealthKitPersistor((id *)(v1 + 552));
    }
    id v76 = objc_msgSend(*(id *)(v1 + 704), sel_dosageUnit);
    if (v76)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v74 = v37;

      double v75 = v74;
    }
    else
    {
      double v75 = 0;
    }
    *(void *)(v1 + 1008) = v75;
    id v73 = *(void *)(v98 + 16) + **(int **)(v98 + 16);
    int v38 = (void *)swift_task_alloc();
    *(void *)(v1 + 1016) = v38;
    *int v38 = *(void *)(v1 + 408);
    v38[1] = LogSpecificMedicationsIntentHandler.handle(intent:);
    uint64_t v297 = v75;
    uint64_t v298 = v97;
    uint64_t v299 = v98;
    __asm { BRAA            X8, X16 }
  }
  uint64_t v172 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 832);
  uint64_t v18 = *(void *)(v1 + 800);
  uint64_t v171 = *(void *)(v1 + 760);
  uint64_t v173 = *(id *)(v1 + 704);
  *(void *)(v1 + 344) = v207;
  *(void *)(v1 + 352) = v208;
  int v170 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v172(v18, v170, v171);
  swift_endAccess();
  swift_bridgeObjectRetain();
  id v175 = swift_allocObject();
  *(void *)(v175 + 16) = v207;
  *(void *)(v175 + 24) = v208;
  uint64_t v19 = v173;
  uint64_t v177 = swift_allocObject();
  *(void *)(v177 + 16) = v173;
  uint64_t v179 = swift_allocObject();
  *(unsigned char *)(v179 + 16) = v256 & 1;
  uint64_t v20 = v173;
  uint64_t v183 = swift_allocObject();
  *(void *)(v183 + 16) = v173;
  id v21 = v173;
  uint64_t v185 = swift_allocObject();
  *(void *)(v185 + 16) = v173;
  uint64_t v203 = (os_log_t)Logger.logObject.getter();
  unint64_t v204 = static os_log_type_t.debug.getter();
  *(void *)(v1 + 560) = 48;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v174 = *(_DWORD *)(v1 + 1056);
  uint64_t v187 = swift_allocObject();
  *(unsigned char *)(v187 + 16) = 32;
  unint64_t v188 = swift_allocObject();
  *(unsigned char *)(v188 + 16) = 8;
  uint64_t v176 = swift_allocObject();
  *(void *)(v176 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v176 + 24) = v175;
  uint64_t v189 = swift_allocObject();
  *(void *)(v189 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v189 + 24) = v176;
  unint64_t v190 = swift_allocObject();
  *(unsigned char *)(v190 + 16) = 32;
  uint64_t v191 = swift_allocObject();
  *(unsigned char *)(v191 + 16) = 8;
  id v178 = swift_allocObject();
  *(void *)(v178 + 16) = partial apply for implicit closure #4 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(void *)(v178 + 24) = v177;
  unint64_t v192 = swift_allocObject();
  *(void *)(v192 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v192 + 24) = v178;
  uint64_t v193 = swift_allocObject();
  *(unsigned char *)(v193 + 16) = 0;
  uint64_t v194 = swift_allocObject();
  *(unsigned char *)(v194 + 16) = 4;
  uint64_t v180 = swift_allocObject();
  *(void *)(v180 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(void *)(v180 + 24) = v179;
  id v181 = swift_allocObject();
  *(void *)(v181 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(void *)(v181 + 24) = v180;
  id v182 = swift_allocObject();
  *(void *)(v182 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(void *)(v182 + 24) = v181;
  uint64_t v195 = swift_allocObject();
  *(void *)(v195 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
  *(void *)(v195 + 24) = v182;
  int v196 = swift_allocObject();
  *(unsigned char *)(v196 + 16) = 32;
  uint64_t v197 = swift_allocObject();
  *(unsigned char *)(v197 + 16) = 8;
  uint64_t v184 = swift_allocObject();
  *(void *)(v184 + 16) = partial apply for implicit closure #6 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(void *)(v184 + 24) = v183;
  id v198 = swift_allocObject();
  *(void *)(v198 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v198 + 24) = v184;
  id v199 = swift_allocObject();
  *(unsigned char *)(v199 + 16) = 32;
  uint64_t v200 = swift_allocObject();
  *(unsigned char *)(v200 + 16) = 8;
  uint64_t v186 = swift_allocObject();
  *(void *)(v186 + 16) = partial apply for implicit closure #7 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(void *)(v186 + 24) = v185;
  uint64_t v201 = swift_allocObject();
  *(void *)(v201 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v201 + 24) = v186;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v202 = v22;
  swift_retain();
  unsigned char *v202 = partial apply for closure #1 in OSLogArguments.append(_:);
  v202[1] = v187;
  swift_retain();
  v202[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v202[3] = v188;
  swift_retain();
  v202[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v202[5] = v189;
  swift_retain();
  v202[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v202[7] = v190;
  swift_retain();
  v202[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v202[9] = v191;
  swift_retain();
  v202[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v202[11] = v192;
  swift_retain();
  v202[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v202[13] = v193;
  swift_retain();
  v202[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v202[15] = v194;
  swift_retain();
  v202[16] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v202[17] = v195;
  swift_retain();
  v202[18] = partial apply for closure #1 in OSLogArguments.append(_:);
  v202[19] = v196;
  swift_retain();
  v202[20] = partial apply for closure #1 in OSLogArguments.append(_:);
  v202[21] = v197;
  swift_retain();
  v202[22] = partial apply for closure #1 in OSLogArguments.append(_:);
  v202[23] = v198;
  swift_retain();
  v202[24] = partial apply for closure #1 in OSLogArguments.append(_:);
  v202[25] = v199;
  swift_retain();
  v202[26] = partial apply for closure #1 in OSLogArguments.append(_:);
  v202[27] = v200;
  swift_retain();
  v202[28] = partial apply for closure #1 in OSLogArguments.append(_:);
  v202[29] = v201;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (!os_log_type_enabled(v203, v204))
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
LABEL_61:
    uint64_t v160 = *(void (**)(uint64_t, uint64_t))(v1 + 888);
    uint64_t v158 = *(void *)(v1 + 800);
    uint64_t v159 = *(void *)(v1 + 760);
    uint64_t v161 = *(void *)(v1 + 712);
    uint64_t v164 = *(id *)(v1 + 704);

    v160(v158, v159);
    outlined init with copy of QuantityPersisting(v161 + OBJC_IVAR____TtC19SiriWellnessIntents35LogSpecificMedicationsIntentHandler_storage, v1 + 96);
    uint64_t v162 = *(void *)(v1 + 120);
    uint64_t v163 = *(void *)(v1 + 128);
    __swift_project_boxed_opaque_existential_1((void *)(v1 + 96), v162);
    uint64_t v165 = objc_msgSend(v164, sel_medicationIDs);
    if (v165)
    {
      unint64_t v156 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint32_t v157 = v156;
    }
    else
    {
      uint32_t v157 = 0;
    }
    *(void *)(v1 + 968) = v157;
    *(void *)(v1 + 568) = objc_msgSend(*(id *)(v1 + 704), sel_dosage);
    if (*(void *)(v1 + 568))
    {
      unint64_t v155 = *(id *)(v1 + 568);
      id v23 = v155;
      outlined destroy of HealthKitPersistor((id *)(v1 + 568));
      objc_msgSend(v155, sel_doubleValue);
    }
    else
    {
      outlined destroy of HealthKitPersistor((id *)(v1 + 568));
    }
    unint64_t v154 = objc_msgSend(*(id *)(v1 + 704), sel_dosageUnit);
    if (v154)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v152 = v24;

      id v153 = v152;
    }
    else
    {
      id v153 = 0;
    }
    *(void *)(v1 + 976) = v153;
    *(void *)(v1 + 576) = objc_msgSend(*(id *)(v1 + 704), sel_confirmedAsNeeded);
    if (*(void *)(v1 + 576))
    {
      uint32_t v149 = *(id *)(v1 + 576);
      uint64_t v25 = v149;
      outlined destroy of HealthKitPersistor((id *)(v1 + 576));
      uint64_t v150 = objc_msgSend(v149, sel_BOOLValue);

      uint64_t v151 = v150 & 1;
    }
    else
    {
      outlined destroy of HealthKitPersistor((id *)(v1 + 576));
      uint64_t v151 = 2;
    }
    *(void *)(v1 + 584) = objc_msgSend(*(id *)(v1 + 704), sel_confirmedAsScheduled);
    if (*(void *)(v1 + 584))
    {
      uint64_t v146 = *(id *)(v1 + 584);
      uint64_t v26 = v146;
      outlined destroy of HealthKitPersistor((id *)(v1 + 584));
      uint64_t v147 = objc_msgSend(v146, sel_BOOLValue);

      uint64_t v148 = v147 & 1;
    }
    else
    {
      outlined destroy of HealthKitPersistor((id *)(v1 + 584));
      uint64_t v148 = 2;
    }
    uint64_t v145 = *(void *)(v163 + 24) + **(int **)(v163 + 24);
    uint64_t v27 = (void *)swift_task_alloc();
    v274[123] = v27;
    *uint64_t v27 = v274[51];
    v27[1] = LogSpecificMedicationsIntentHandler.handle(intent:);
    LOBYTE(v297) = v151;
    BYTE1(v297) = v148;
    uint64_t v298 = v162;
    uint64_t v299 = v163;
    __asm { BRAA            X8, X16 }
  }
  uint64_t v167 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
  uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
  uint64_t v168 = createStorage<A>(capacity:type:)(0);
  uint64_t v169 = createStorage<A>(capacity:type:)(4);
  uint64_t v281 = v167;
  uint64_t v282 = v168;
  uint64_t v283 = v169;
  serialize(_:at:)(2, &v281);
  serialize(_:at:)(5, &v281);
  uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v285 = v187;
  uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v281, (uint64_t)&v282, (uint64_t)&v283);
  if (!v261)
  {
    uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v285 = v188;
    closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v281, (uint64_t)&v282, (uint64_t)&v283);
    uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v285 = v189;
    closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v281, (uint64_t)&v282, (uint64_t)&v283);
    uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v285 = v190;
    closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v281, (uint64_t)&v282, (uint64_t)&v283);
    uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v285 = v191;
    closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v281, (uint64_t)&v282, (uint64_t)&v283);
    uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v285 = v192;
    closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v281, (uint64_t)&v282, (uint64_t)&v283);
    uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v285 = v193;
    closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v281, (uint64_t)&v282, (uint64_t)&v283);
    uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v285 = v194;
    closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v281, (uint64_t)&v282, (uint64_t)&v283);
    uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    uint64_t v285 = v195;
    closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v281, (uint64_t)&v282, (uint64_t)&v283);
    uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v285 = v196;
    closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v281, (uint64_t)&v282, (uint64_t)&v283);
    uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v285 = v197;
    closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v281, (uint64_t)&v282, (uint64_t)&v283);
    uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v285 = v198;
    closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v281, (uint64_t)&v282, (uint64_t)&v283);
    uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v285 = v199;
    closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v281, (uint64_t)&v282, (uint64_t)&v283);
    uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v285 = v200;
    closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v281, (uint64_t)&v282, (uint64_t)&v283);
    uint64_t v284 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v285 = v201;
    closure #1 in osLogInternal(_:log:type:)(&v284, (uint64_t)&v281, (uint64_t)&v282, (uint64_t)&v283);
    _os_log_impl(&dword_25DE00000, v203, v204, "Provided scheduleID and potentially {medicationID, dosage, dosageUnit}, so persisting specific medication...\n    scheduleID: %s,\n    medicationID: %s,\n    medStatusIsTaken: %{BOOL}d,\n    dosage: %s,\n    dosageUnit: %s,", v167, v174);
    destroyStorage<A>(_:count:)(v168, 0, v166);
    destroyStorage<A>(_:count:)(v169, 4, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v167, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_61;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 408) = *v1;
  *(void *)(v3 + 952) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](LogSpecificMedicationsIntentHandler.handle(intent:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 408) = *v1;
  *(void *)(v3 + 992) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](LogSpecificMedicationsIntentHandler.handle(intent:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  id v5 = *v1;
  uint64_t v4 = *(void *)(*v1 + 752);
  uint64_t v3 = *(void *)(*v1 + 744);
  *(void *)(v5 + 408) = *v1;
  *(void *)(v5 + 1024) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Date?(v3);
  outlined destroy of Date?(v4);
  return MEMORY[0x270FA2498](LogSpecificMedicationsIntentHandler.handle(intent:), 0);
}

uint64_t LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  uint64_t v1 = *(void *)(v0 + 824);
  uint64_t v19 = *(void *)(v0 + 768);
  uint64_t v21 = *(void *)(v0 + 760);
  *(void *)(v0 + 408) = v0;
  uint64_t v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  *(void *)(v0 + 832) = v2;
  *(void *)(v0 + 840) = (v19 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v2(v1, v20, v21);
  swift_endAccess();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 432) = 2;
  *(void *)(v0 + 848) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 856) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 864) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v22 = *(unsigned int *)(v0 + 1036);
  *(void *)(v0 + 872) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v25 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v24, v23))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v15 = createStorage<A>(capacity:type:)(0);
    uint64_t v16 = createStorage<A>(capacity:type:)(0);
    *(void *)(v18 + 672) = buf;
    *(void *)(v18 + 680) = v15;
    *(void *)(v18 + 688) = v16;
    serialize(_:at:)(0, (unsigned char **)(v18 + 672));
    serialize(_:at:)(0, (unsigned char **)(v18 + 672));
    *(void *)(v18 + 696) = v25;
    char v17 = (void *)swift_task_alloc();
    v17[2] = v18 + 672;
    v17[3] = v18 + 680;
    v17[4] = v18 + 688;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v24, v23, "Checking authorization for medications...", buf, v22);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  *(void *)(v18 + 880) = 0;
  uint64_t v7 = *(void *)(v18 + 824);
  uint64_t v8 = *(void *)(v18 + 760);
  uint64_t v9 = *(void *)(v18 + 712);
  uint64_t v6 = *(void *)(v18 + 768);

  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v18 + 888) = v3;
  *(void *)(v18 + 896) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v3(v7, v8);
  outlined init with copy of QuantityPersisting(v9 + OBJC_IVAR____TtC19SiriWellnessIntents35LogSpecificMedicationsIntentHandler_storage, v18 + 16);
  uint64_t v12 = *(void *)(v18 + 40);
  uint64_t v10 = *(void *)(v18 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v18 + 16), v12);
  objc_super v11 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v10 + 8) + **(int **)(v10 + 8));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v18 + 904) = v4;
  *uint64_t v4 = *(void *)(v18 + 408);
  v4[1] = LogSpecificMedicationsIntentHandler.handle(intent:);
  return v11(v12, v10);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 408) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 136);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v0 + 952);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 408) + 8);
  return v1(v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 408) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v0 + 992);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 408) + 8);
  return v1(v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 408) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 1024);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 408) + 8);
  return v1(v3);
}

uint64_t LogSpecificMedicationsIntentHandler.handle(intent:)(char a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 408) = *v1;
  *(unsigned char *)(v3 + 1034) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](LogSpecificMedicationsIntentHandler.handle(intent:), 0);
}

uint64_t implicit closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  return MEMORY[0x2611C8A40]();
}

uint64_t implicit closure #2 in LogSpecificMedicationsIntentHandler.handle(intent:)(uint64_t a1)
{
  uint64_t v9 = a1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v4 - 8;
  unint64_t v7 = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v3 - v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  unint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = (void *)MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v3 - v11;
  id v13 = objc_msgSend(v1, sel_startTime);
  if (v13)
  {
    v3[1] = v13;
    v3[0] = v13;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v8, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v12, 1, 1, v4);
  }
  lazy protocol witness table accessor for type Date? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #3 in LogSpecificMedicationsIntentHandler.handle(intent:)(uint64_t a1)
{
  uint64_t v9 = a1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v4 - 8;
  unint64_t v7 = (*(void *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v3 - v7;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  unint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v1 = (void *)MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)v3 - v11;
  id v13 = objc_msgSend(v1, sel_endTime);
  if (v13)
  {
    v3[1] = v13;
    v3[0] = v13;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v12, v8, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v12, 0, 1, v4);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v12, 1, 1, v4);
  }
  lazy protocol witness table accessor for type Date? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in LogSpecificMedicationsIntentHandler.handle(intent:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_medicationIDs);
  if (v2)
  {
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]?);
  lazy protocol witness table accessor for type [String]? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:)(char a1)
{
  return a1 & 1;
}

uint64_t implicit closure #6 in LogSpecificMedicationsIntentHandler.handle(intent:)(void *a1)
{
  return String.init<A>(describing:)();
}

uint64_t implicit closure #7 in LogSpecificMedicationsIntentHandler.handle(intent:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_dosageUnit);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t @objc closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  v3[4] = a3;
  v3[3] = a1;
  id v3[2] = v3;
  id v5 = a1;
  v3[5] = _Block_copy(a2);
  id v6 = a3;
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 48) = v7;
  void *v7 = *(void *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return LogSpecificMedicationsIntentHandler.handle(intent:)((uint64_t)a1);
}

id LogSpecificMedicationsIntentHandler.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t LogSpecificMedicationsIntentHandler.init()()
{
  if (!"SiriWellnessIntents.LogSpecificMedicationsIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.LogSpecificMedicationsIntentHandler", 55, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/LogSpecificMedicationsIntentHandler.swift", 61, 2, v1, 0x12uLL, 0x14uLL);
  __break(1u);
  return result;
}

id LogSpecificMedicationsIntentHandler.__deallocating_deinit()
{
  uint64_t v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t SpecificMedicationsPersistor.isLoggingAuthorized()(void *a1, uint64_t a2)
{
  v2[5] = a1;
  v2[4] = v2;
  v2[2] = 0;
  v2[3] = 0;
  v2[2] = a1;
  v2[3] = a2;
  id v3 = a1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 48) = v4;
  *uint64_t v4 = *(void *)(v6 + 32);
  v4[1] = SpecificMedicationsPersistor.isLoggingAuthorized();
  return isSiriAuthorizedToAccessHealthData(store:)((uint64_t)a1);
}

uint64_t SpecificMedicationsPersistor.isLoggingAuthorized()(unsigned int a1)
{
  uint64_t v5 = *v1;
  uint64_t v4 = *(void **)(*v1 + 40);
  *(void *)(v5 + 32) = *v1;
  swift_task_dealloc();

  objc_super v2 = *(uint64_t (**)(void))(*(void *)(v5 + 32) + 8);
  return v2(a1);
}

uint64_t SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 360) = v23;
  *(void *)(v8 + 352) = v22;
  *(void *)(v8 + 344) = v21;
  *(void *)(v8 + 336) = a8;
  *(unsigned char *)(v8 + 131) = a7;
  *(void *)(v8 + 328) = a6;
  *(unsigned char *)(v8 + 130) = a5 & 1;
  *(void *)(v8 + 320) = a4;
  *(unsigned char *)(v8 + 129) = a3 & 1;
  *(void *)(v8 + 312) = a2;
  *(void *)(v8 + 304) = a1;
  *(void *)(v8 + 136) = v8;
  *(void *)(v8 + 144) = 0;
  *(void *)(v8 + 152) = 0;
  *(unsigned char *)(v8 + 512) = 0;
  *(void *)(v8 + 160) = 0;
  *(unsigned char *)(v8 + 520) = 0;
  *(void *)(v8 + 120) = 0;
  *(unsigned char *)(v8 + 128) = 0;
  *(void *)(v8 + 88) = 0;
  *(void *)(v8 + 96) = 0;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(unsigned char *)(v8 + 528) = 0;
  *(unsigned char *)(v8 + 536) = 0;
  *(void *)(v8 + 216) = 0;
  *(void *)(v8 + 224) = 0;
  uint64_t v11 = type metadata accessor for DateInterval();
  *(void *)(v8 + 368) = v11;
  *(void *)(v8 + 376) = *(void *)(v11 - 8);
  *(void *)(v8 + 384) = swift_task_alloc();
  *(void *)(v8 + 392) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  *(void *)(v8 + 400) = swift_task_alloc();
  *(void *)(v8 + 408) = swift_task_alloc();
  *(void *)(v8 + 416) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for Logger();
  *(void *)(v8 + 424) = v12;
  *(void *)(v8 + 432) = *(void *)(v12 - 8);
  *(void *)(v8 + 440) = swift_task_alloc();
  *(void *)(v8 + 448) = swift_task_alloc();
  *(void *)(v8 + 456) = swift_task_alloc();
  *(void *)(v8 + 144) = a1;
  *(void *)(v8 + 152) = a2;
  *(unsigned char *)(v8 + 512) = a3 & 1;
  *(void *)(v8 + 160) = a4;
  *(unsigned char *)(v8 + 520) = a5 & 1;
  *(void *)(v8 + 120) = a6;
  *(unsigned char *)(v8 + 128) = a7 & 1;
  *(void *)(v8 + 88) = a8;
  *(void *)(v8 + 96) = v21;
  *(void *)(v8 + 104) = v22;
  *(void *)(v8 + 112) = v23;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:), 0);
}

uint64_t SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:)()
{
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v86 = *(void *)(v0 + 432);
  uint64_t v88 = *(void *)(v0 + 424);
  *(void *)(v0 + 136) = v0;
  uint64_t v87 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v89 = *(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 16);
  v89(v1, v87, v88);
  swift_endAccess();
  uint64_t v92 = Logger.logObject.getter();
  os_log_type_t v91 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 168) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v90 = *(unsigned int *)(v0 + 132);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v93 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v92, v91))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v82 = createStorage<A>(capacity:type:)(0);
    uint64_t v83 = createStorage<A>(capacity:type:)(0);
    *(void *)(v85 + 272) = buf;
    *(void *)(v85 + 280) = v82;
    *(void *)(v85 + 288) = v83;
    serialize(_:at:)(0, (unsigned char **)(v85 + 272));
    serialize(_:at:)(0, (unsigned char **)(v85 + 272));
    *(void *)(v85 + 296) = v93;
    id v84 = (void *)swift_task_alloc();
    v84[2] = v85 + 272;
    v84[3] = v85 + 280;
    v84[4] = v85 + 288;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v92, v91, "Starting to save medication.", buf, v90);
    destroyStorage<A>(_:count:)(v82, 0, v80);
    destroyStorage<A>(_:count:)(v83, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v71 = *(void *)(v85 + 456);
  uint64_t v72 = *(void *)(v85 + 424);
  uint64_t v77 = *(void *)(v85 + 416);
  uint64_t v78 = *(void *)(v85 + 368);
  double v75 = *(const void **)(v85 + 312);
  uint64_t v74 = *(void *)(v85 + 304);
  uint64_t v70 = *(void *)(v85 + 432);
  uint64_t v76 = *(void *)(v85 + 376);

  id v73 = *(void (**)(uint64_t, uint64_t))(v70 + 8);
  v73(v71, v72);
  dateInterval(startTime:endTime:)(v74, v75, v77);
  unint64_t v79 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48);
  BOOL v69 = v79(v77, 1, v78) != 1;
  char v2 = *(unsigned char *)(v85 + 131);
  *(unsigned char *)(v85 + 528) = v69;
  BOOL v68 = (v2 & 1) == 0;
  swift_bridgeObjectRetain();
  BOOL v67 = v68 || *(void *)(v85 + 344) != 0;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v85 + 536) = v67;
  if (v69 && v67)
  {
    uint64_t v3 = *(void *)(v85 + 448);
    uint64_t v62 = *(void *)(v85 + 424);
    uint64_t v61 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v89(v3, v61, v62);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    *(void *)(v85 + 232) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v85 + 524);
    uint64_t v66 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v64))
    {
      char v57 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v58 = createStorage<A>(capacity:type:)(0);
      uint64_t v59 = createStorage<A>(capacity:type:)(0);
      *(void *)(v85 + 240) = v57;
      *(void *)(v85 + 248) = v58;
      *(void *)(v85 + 256) = v59;
      serialize(_:at:)(0, (unsigned char **)(v85 + 240));
      serialize(_:at:)(0, (unsigned char **)(v85 + 240));
      *(void *)(v85 + 264) = v66;
      uint64_t v60 = (void *)swift_task_alloc();
      v60[2] = v85 + 240;
      v60[3] = v85 + 248;
      v60[4] = v85 + 256;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, oslog, v64, "User specified dosage or dosageUnit while logging a scheduled med. This isn't currently supported. Returning failure.", v57, size);
      destroyStorage<A>(_:count:)(v58, 0, v56);
      destroyStorage<A>(_:count:)(v59, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v57, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v51 = *(void *)(v85 + 448);
    uint64_t v52 = *(void *)(v85 + 424);
    uint64_t v53 = *(void *)(v85 + 416);

    v73(v51, v52);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v54 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    outlined destroy of DateInterval?(v53);
    double v55 = v54;
LABEL_31:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(char *))(*(void *)(v85 + 136) + 8);
    return v26(v55);
  }
  uint64_t v50 = *(void *)(v85 + 320);
  swift_bridgeObjectRetain();
  if (!v50)
  {
LABEL_20:
    unint64_t v46 = *(void **)(v85 + 400);
    uint64_t v45 = *(void *)(v85 + 368);
    outlined init with copy of DateInterval?(*(const void **)(v85 + 416), v46);
    if (v79((uint64_t)v46, 1, v45) != 1)
    {
      (*(void (**)(void, void, void))(*(void *)(v85 + 376) + 32))(*(void *)(v85 + 384), *(void *)(v85 + 400), *(void *)(v85 + 368));
      uint64_t v12 = (void *)swift_task_alloc();
      *(void *)(v85 + 480) = v12;
      *uint64_t v12 = *(void *)(v85 + 136);
      v12[1] = SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:);
      uint64_t v13 = *(void *)(v85 + 384);
      uint64_t v14 = *(void *)(v85 + 360);
      uint64_t v15 = *(void *)(v85 + 352);
      char v16 = *(unsigned char *)(v85 + 130) & 1;
      char v17 = *(unsigned char *)(v85 + 129) & 1;
      return SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:)(v13, v16, v17, v15, v14);
    }
    uint64_t v44 = *(void *)(v85 + 320);
    outlined destroy of DateInterval?(*(void *)(v85 + 400));
    swift_bridgeObjectRetain();
    if (v44)
    {
      uint64_t v43 = *(void *)(v85 + 320);
      char v42 = *(unsigned char *)(v85 + 131);
      *(void *)(v85 + 216) = v43;
      uint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v85 + 496) = v18;
      *uint64_t v18 = *(void *)(v85 + 136);
      v18[1] = SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:);
      uint64_t v19 = *(void *)(v85 + 360);
      uint64_t v20 = *(void *)(v85 + 352);
      uint64_t v21 = *(void *)(v85 + 344);
      uint64_t v22 = *(void *)(v85 + 336);
      uint64_t v23 = *(void *)(v85 + 328);
      char v24 = *(unsigned char *)(v85 + 130) & 1;
      return SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)(v43, v24, v23, v42 & 1, v22, v21, v20, v19);
    }
    uint64_t v25 = *(void *)(v85 + 440);
    uint64_t v37 = *(void *)(v85 + 424);
    uint64_t v36 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v89(v25, v36, v37);
    swift_endAccess();
    log = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    *(void *)(v85 + 176) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v38 = *(_DWORD *)(v85 + 516);
    uint64_t v41 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v39))
    {
      uint64_t v32 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v33 = createStorage<A>(capacity:type:)(0);
      uint64_t v34 = createStorage<A>(capacity:type:)(0);
      *(void *)(v85 + 184) = v32;
      *(void *)(v85 + 192) = v33;
      *(void *)(v85 + 200) = v34;
      serialize(_:at:)(0, (unsigned char **)(v85 + 184));
      serialize(_:at:)(0, (unsigned char **)(v85 + 184));
      *(void *)(v85 + 208) = v41;
      uint64_t v35 = (void *)swift_task_alloc();
      v35[2] = v85 + 184;
      v35[3] = v85 + 192;
      void v35[4] = v85 + 200;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, log, v39, "Neither time nor schedule specified even though this is a Specific Med Logging Intent Handler, returning .failure.", v32, v38);
      destroyStorage<A>(_:count:)(v33, 0, v31);
      destroyStorage<A>(_:count:)(v34, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v32, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void *)(v85 + 440);
    uint64_t v28 = *(void *)(v85 + 424);
    uint64_t v29 = *(void *)(v85 + 416);

    v73(v27, v28);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v30 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    outlined destroy of DateInterval?(v29);
    double v55 = v30;
    goto LABEL_31;
  }
  uint64_t v47 = *(void *)(v85 + 320);
  uint64_t v4 = *(const void **)(v85 + 416);
  id v49 = *(void **)(v85 + 408);
  uint64_t v48 = *(void *)(v85 + 368);
  *(void *)(v85 + 224) = v47;
  outlined init with copy of DateInterval?(v4, v49);
  if (v79((uint64_t)v49, 1, v48) == 1)
  {
    outlined destroy of DateInterval?(*(void *)(v85 + 408));
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  (*(void (**)(void, void, void))(*(void *)(v85 + 376) + 32))(*(void *)(v85 + 392), *(void *)(v85 + 408), *(void *)(v85 + 368));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v85 + 464) = v5;
  *uint64_t v5 = *(void *)(v85 + 136);
  v5[1] = SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:);
  uint64_t v6 = *(void *)(v85 + 392);
  uint64_t v7 = *(void *)(v85 + 360);
  uint64_t v8 = *(void *)(v85 + 352);
  char v9 = *(unsigned char *)(v85 + 130) & 1;
  char v10 = *(unsigned char *)(v85 + 129) & 1;
  return SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:)(v47, v6, v9, v10, v8, v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v6 = v0[52];
  uint64_t v1 = v0[49];
  char v2 = v0[47];
  uint64_t v3 = v0[46];
  v0[17] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_bridgeObjectRelease();
  outlined destroy of DateInterval?(v6);
  uint64_t v7 = v0[59];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0[17] + 8);
  return v4(v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v6 = v0[52];
  uint64_t v1 = v0[48];
  char v2 = v0[47];
  uint64_t v3 = v0[46];
  v0[17] = v0;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  outlined destroy of DateInterval?(v6);
  uint64_t v7 = v0[61];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0[17] + 8);
  return v4(v7);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v3 = v0[52];
  v0[17] = v0;
  swift_bridgeObjectRelease();
  outlined destroy of DateInterval?(v3);
  uint64_t v4 = v0[63];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0[17] + 8);
  return v1(v4);
}

uint64_t SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 136) = *v1;
  *(void *)(v3 + 472) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 136) = *v1;
  *(void *)(v3 + 488) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 136) = *v1;
  *(void *)(v3 + 504) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:), 0);
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 240) = a6;
  *(void *)(v6 + 232) = a5;
  *(unsigned char *)(v6 + 450) = a4 & 1;
  *(unsigned char *)(v6 + 449) = a3 & 1;
  *(void *)(v6 + 224) = a2;
  *(void *)(v6 + 216) = a1;
  *(void *)(v6 + 104) = v6;
  *(void *)(v6 + 112) = 0;
  *(void *)(v6 + 120) = 0;
  *(unsigned char *)(v6 + 448) = 0;
  *(unsigned char *)(v6 + 456) = 0;
  *(void *)(v6 + 40) = 0;
  *(void *)(v6 + 48) = 0;
  *(void *)(v6 + 128) = 0;
  *(void *)(v6 + 136) = 0;
  *(void *)(v6 + 56) = 0;
  *(void *)(v6 + 64) = 0;
  *(unsigned char *)(v6 + 464) = 0;
  *(unsigned char *)(v6 + 472) = 0;
  *(void *)(v6 + 88) = 0;
  *(void *)(v6 + 96) = 0;
  *(void *)(v6 + 168) = 0;
  *(void *)(v6 + 184) = 0;
  *(void *)(v6 + 192) = 0;
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v6 + 248) = v7;
  *(void *)(v6 + 256) = *(void *)(v7 - 8);
  *(void *)(v6 + 264) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DateInterval();
  *(void *)(v6 + 272) = v8;
  *(void *)(v6 + 280) = *(void *)(v8 - 8);
  *(void *)(v6 + 288) = swift_task_alloc();
  *(void *)(v6 + 296) = swift_task_alloc();
  *(void *)(v6 + 112) = a1;
  *(void *)(v6 + 120) = a2;
  *(unsigned char *)(v6 + 448) = a3 & 1;
  *(unsigned char *)(v6 + 456) = a4 & 1;
  *(void *)(v6 + 40) = a5;
  *(void *)(v6 + 48) = a6;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:), 0);
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:)()
{
  char v1 = *(unsigned char *)(v0 + 450);
  *(void *)(v0 + 104) = v0;
  if (v1)
  {
    char v2 = (void *)swift_task_alloc();
    *(void *)(v29 + 304) = v2;
    *char v2 = *(void *)(v29 + 104);
    v2[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
    uint64_t v3 = *(void *)(v29 + 240);
    uint64_t v4 = *(void *)(v29 + 232);
    uint64_t v5 = *(void *)(v29 + 224);
    uint64_t v6 = *(void *)(v29 + 216);
    char v7 = *(unsigned char *)(v29 + 449) & 1;
    return SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(v6, v5, v7, v4, v3);
  }
  uint64_t v26 = *(void *)(v29 + 216);
  getFallbackDateInterval(specifiedDateInterval:)(*(void *)(v29 + 224), *(void *)(v29 + 296));
  type metadata accessor for HKMedicationExposableDoseEvent();
  *(void *)(v29 + 128) = _allocateUninitializedArray<A>(_:)();
  *(void *)(v29 + 136) = _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  *(void *)(v29 + 144) = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  uint64_t v27 = *(void *)(v29 + 72);
  *(void *)(v29 + 312) = v27;
  uint64_t v28 = *(void *)(v29 + 80);
  *(void *)(v29 + 320) = v28;
  if (v28)
  {
    *(void *)(v29 + 88) = v27;
    *(void *)(v29 + 96) = v28;
    *(void *)(v29 + 328) = type metadata accessor for HKMedicationIdentifier();
    swift_bridgeObjectRetain();
    id v25 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
    *(void *)(v29 + 336) = v25;
    char v9 = (void *)swift_task_alloc();
    *(void *)(v29 + 344) = v9;
    *char v9 = *(void *)(v29 + 104);
    v9[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
    uint64_t v10 = *(void *)(v29 + 240);
    uint64_t v11 = *(void *)(v29 + 232);
    uint64_t v12 = *(void *)(v29 + 224);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v12, (uint64_t)v25, v11, v10);
  }
  else
  {
    outlined destroy of [HKQuantityType]();
    uint64_t v21 = *(void *)(v29 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(void *)(v29 + 152) = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    int v22 = Collection.isEmpty.getter();
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v29 + 464) = (v22 ^ 1) & 1;
    uint64_t v23 = *(void *)(v29 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(void *)(v29 + 160) = v23;
    unsigned __int8 v24 = Collection.isEmpty.getter();
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v29 + 472) = (v24 ^ 1) & 1;
    if ((v22 ^ 1) & 1) != 0 || ((v24 ^ 1))
    {
      if ((v22 ^ 1) & 1) != 0 && ((v24 ^ 1))
      {
        SpecificMedicationsPersistor.getDateIntervalCloserToNow(firstDateInterval:secondDateInterval:)(*(void *)(v29 + 224), *(void *)(v29 + 296), *(void *)(v29 + 232), *(void *)(v29 + 240), *(void *)(v29 + 288));
        uint64_t v14 = (void *)swift_task_alloc();
        *(void *)(v29 + 400) = v14;
        *uint64_t v14 = *(void *)(v29 + 104);
        v14[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
        uint64_t v5 = *(void *)(v29 + 288);
        uint64_t v3 = *(void *)(v29 + 240);
        uint64_t v4 = *(void *)(v29 + 232);
        uint64_t v6 = *(void *)(v29 + 216);
        char v7 = *(unsigned char *)(v29 + 449) & 1;
      }
      else if ((v22 ^ 1))
      {
        uint64_t v15 = (void *)swift_task_alloc();
        *(void *)(v29 + 416) = v15;
        *uint64_t v15 = *(void *)(v29 + 104);
        v15[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
        uint64_t v3 = *(void *)(v29 + 240);
        uint64_t v4 = *(void *)(v29 + 232);
        uint64_t v5 = *(void *)(v29 + 224);
        uint64_t v6 = *(void *)(v29 + 216);
        char v7 = *(unsigned char *)(v29 + 449) & 1;
      }
      else
      {
        uint64_t v16 = (void *)swift_task_alloc();
        *(void *)(v29 + 432) = v16;
        *uint64_t v16 = *(void *)(v29 + 104);
        v16[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
        uint64_t v5 = *(void *)(v29 + 296);
        uint64_t v3 = *(void *)(v29 + 240);
        uint64_t v4 = *(void *)(v29 + 232);
        uint64_t v6 = *(void *)(v29 + 216);
        char v7 = *(unsigned char *)(v29 + 449) & 1;
      }
      return SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(v6, v5, v7, v4, v3);
    }
    uint64_t v19 = *(void *)(v29 + 296);
    uint64_t v18 = *(void *)(v29 + 272);
    uint64_t v17 = *(void *)(v29 + 280);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v20 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(char *))(*(void *)(v29 + 104) + 8);
    return v13(v20);
  }
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  id v8;
  uint64_t v9;

  char v1 = v0[44];
  v0[13] = v0;
  v0[23] = v1;
  swift_bridgeObjectRetain();
  uint64_t v8 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
  v0[46] = v8;
  char v2 = (void *)swift_task_alloc();
  v7[47] = v2;
  *char v2 = v7[13];
  v2[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
  uint64_t v3 = v7[37];
  uint64_t v4 = v7[30];
  uint64_t v5 = v7[29];
  return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v3, (uint64_t)v8, v5, v4);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(char *);
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned __int8 v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  id v25 = v0[48];
  uint64_t v26 = v0[44];
  v0[13] = v0;
  v0[24] = v25;
  swift_bridgeObjectRetain();
  v0[25] = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Array.append<A>(contentsOf:)();
  swift_bridgeObjectRetain();
  v0[26] = v25;
  Array.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  uint64_t v27 = v0[9];
  v0[39] = v27;
  uint64_t v28 = v0[10];
  v0[40] = v28;
  if (v28)
  {
    *(void *)(v24 + 88) = v27;
    *(void *)(v24 + 96) = v28;
    *(void *)(v24 + 328) = type metadata accessor for HKMedicationIdentifier();
    swift_bridgeObjectRetain();
    uint64_t v23 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
    *(void *)(v24 + 336) = v23;
    char v1 = (void *)swift_task_alloc();
    *(void *)(v24 + 344) = v1;
    uint64_t *v1 = *(void *)(v24 + 104);
    v1[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
    char v2 = *(void *)(v24 + 240);
    uint64_t v3 = *(void *)(v24 + 232);
    uint64_t v4 = *(void *)(v24 + 224);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v4, (uint64_t)v23, v3, v2);
  }
  else
  {
    outlined destroy of [HKQuantityType]();
    uint64_t v19 = *(void *)(v24 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(void *)(v24 + 152) = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    uint64_t v20 = Collection.isEmpty.getter();
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v24 + 464) = (v20 ^ 1) & 1;
    uint64_t v21 = *(void *)(v24 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(void *)(v24 + 160) = v21;
    int v22 = Collection.isEmpty.getter();
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v24 + 472) = (v22 ^ 1) & 1;
    if ((v20 ^ 1) & 1) != 0 || ((v22 ^ 1))
    {
      if ((v20 ^ 1) & 1) != 0 && ((v22 ^ 1))
      {
        SpecificMedicationsPersistor.getDateIntervalCloserToNow(firstDateInterval:secondDateInterval:)(*(void *)(v24 + 224), *(void *)(v24 + 296), *(void *)(v24 + 232), *(void *)(v24 + 240), *(void *)(v24 + 288));
        char v7 = (void *)swift_task_alloc();
        *(void *)(v24 + 400) = v7;
        void *v7 = *(void *)(v24 + 104);
        v7[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
        uint64_t v8 = *(void *)(v24 + 288);
        char v9 = *(void *)(v24 + 240);
        uint64_t v10 = *(void *)(v24 + 232);
        uint64_t v11 = *(void *)(v24 + 216);
        uint64_t v12 = *(unsigned char *)(v24 + 449) & 1;
      }
      else if ((v20 ^ 1))
      {
        uint64_t v13 = (void *)swift_task_alloc();
        *(void *)(v24 + 416) = v13;
        void *v13 = *(void *)(v24 + 104);
        v13[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
        char v9 = *(void *)(v24 + 240);
        uint64_t v10 = *(void *)(v24 + 232);
        uint64_t v8 = *(void *)(v24 + 224);
        uint64_t v11 = *(void *)(v24 + 216);
        uint64_t v12 = *(unsigned char *)(v24 + 449) & 1;
      }
      else
      {
        uint64_t v14 = (void *)swift_task_alloc();
        *(void *)(v24 + 432) = v14;
        *uint64_t v14 = *(void *)(v24 + 104);
        v14[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
        uint64_t v8 = *(void *)(v24 + 296);
        char v9 = *(void *)(v24 + 240);
        uint64_t v10 = *(void *)(v24 + 232);
        uint64_t v11 = *(void *)(v24 + 216);
        uint64_t v12 = *(unsigned char *)(v24 + 449) & 1;
      }
      return SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(v11, v8, v12, v10, v9);
    }
    else
    {
      uint64_t v17 = *(void *)(v24 + 296);
      uint64_t v16 = *(void *)(v24 + 272);
      uint64_t v15 = *(void *)(v24 + 280);
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      uint64_t v18 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
      outlined destroy of [HKQuantityType]();
      outlined destroy of [HKQuantityType]();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v6 = *(uint64_t (**)(char *))(*(void *)(v24 + 104) + 8);
      return v6(v18);
    }
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  char v7 = v0[37];
  char v1 = v0[36];
  char v2 = v0[35];
  uint64_t v5 = v0[34];
  v0[13] = v0;
  uint64_t v6 = *(void (**)(uint64_t))(v2 + 8);
  v6(v1);
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  ((void (*)(uint64_t, uint64_t))v6)(v7, v5);
  uint64_t v8 = v0[51];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0[13] + 8);
  return v3(v8);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v5 = v0[37];
  uint64_t v3 = v0[35];
  uint64_t v4 = v0[34];
  v0[13] = v0;
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  uint64_t v6 = v0[53];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(uint64_t))(v0[13] + 8);
  return v1(v6);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v5 = v0[37];
  uint64_t v3 = v0[35];
  uint64_t v4 = v0[34];
  v0[13] = v0;
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  uint64_t v6 = v0[55];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(uint64_t))(v0[13] + 8);
  return v1(v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  uint64_t (*v6)(char *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint8_t *buf;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint32_t size;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  os_log_type_t v39 = v0;
  char v1 = *(void **)(v0 + 336);
  *(void *)(v0 + 104) = v0;

  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  uint64_t v23 = *(id *)(v0 + 360);
  char v2 = *(void *)(v0 + 264);
  uint64_t v20 = *(void *)(v0 + 256);
  int v22 = *(void *)(v0 + 248);
  uint64_t v3 = v23;
  *(void *)(v0 + 168) = v23;
  uint64_t v21 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v2, v21, v22);
  swift_endAccess();
  uint64_t v4 = v23;
  id v25 = swift_allocObject();
  *(void *)(v25 + 16) = v23;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  uint64_t v32 = Logger.logObject.getter();
  uint64_t v33 = static os_log_type_t.error.getter();
  *(void *)(v0 + 176) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 452);
  uint64_t v28 = swift_allocObject();
  *(unsigned char *)(v28 + 16) = 64;
  uint64_t v29 = swift_allocObject();
  *(unsigned char *)(v29 + 16) = 8;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(void *)(v26 + 24) = v25;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(void *)(v27 + 24) = v26;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v30 + 24) = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v31 = v5;
  swift_retain();
  const void *v31 = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[1] = v28;
  swift_retain();
  v31[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[3] = v29;
  swift_retain();
  v31[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[5] = v30;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v32, v33))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v17 = createStorage<A>(capacity:type:)(1);
    uint64_t v18 = createStorage<A>(capacity:type:)(0);
    uint64_t v34 = buf;
    uint64_t v35 = v17;
    uint64_t v36 = v18;
    serialize(_:at:)(2, &v34);
    serialize(_:at:)(1, &v34);
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint32_t v38 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint32_t v38 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint32_t v38 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    _os_log_impl(&dword_25DE00000, v32, v33, "Failed fetching dose events for specified timeframe: %@", buf, size);
    destroyStorage<A>(_:count:)(v17, 1, v15);
    destroyStorage<A>(_:count:)(v18, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v13 = v19[37];
  uint64_t v12 = v19[34];
  char v9 = v19[33];
  uint64_t v10 = v19[31];
  uint64_t v11 = v19[35];
  uint64_t v8 = v19[32];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  uint64_t v14 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(char *))(v19[13] + 8);
  return v6(v14);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  uint64_t (*v6)(char *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint8_t *buf;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint32_t size;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  os_log_type_t v39 = v0;
  char v1 = *(void **)(v0 + 368);
  *(void *)(v0 + 104) = v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  uint64_t v23 = *(id *)(v0 + 392);
  char v2 = *(void *)(v0 + 264);
  uint64_t v20 = *(void *)(v0 + 256);
  int v22 = *(void *)(v0 + 248);
  uint64_t v3 = v23;
  *(void *)(v0 + 168) = v23;
  uint64_t v21 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v2, v21, v22);
  swift_endAccess();
  uint64_t v4 = v23;
  id v25 = swift_allocObject();
  *(void *)(v25 + 16) = v23;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  uint64_t v32 = Logger.logObject.getter();
  uint64_t v33 = static os_log_type_t.error.getter();
  *(void *)(v0 + 176) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 452);
  uint64_t v28 = swift_allocObject();
  *(unsigned char *)(v28 + 16) = 64;
  uint64_t v29 = swift_allocObject();
  *(unsigned char *)(v29 + 16) = 8;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(void *)(v26 + 24) = v25;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(void *)(v27 + 24) = v26;
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v30 + 24) = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v31 = v5;
  swift_retain();
  const void *v31 = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[1] = v28;
  swift_retain();
  v31[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[3] = v29;
  swift_retain();
  v31[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v31[5] = v30;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v32, v33))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v17 = createStorage<A>(capacity:type:)(1);
    uint64_t v18 = createStorage<A>(capacity:type:)(0);
    uint64_t v34 = buf;
    uint64_t v35 = v17;
    uint64_t v36 = v18;
    serialize(_:at:)(2, &v34);
    serialize(_:at:)(1, &v34);
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint32_t v38 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint32_t v38 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    uint64_t v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint32_t v38 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v37, (uint64_t)&v34, (uint64_t)&v35, (uint64_t)&v36);
    _os_log_impl(&dword_25DE00000, v32, v33, "Failed fetching dose events for specified timeframe: %@", buf, size);
    destroyStorage<A>(_:count:)(v17, 1, v15);
    destroyStorage<A>(_:count:)(v18, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v13 = v19[37];
  uint64_t v12 = v19[34];
  char v9 = v19[33];
  uint64_t v10 = v19[31];
  uint64_t v11 = v19[35];
  uint64_t v8 = v19[32];

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  uint64_t v14 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(char *))(v19[13] + 8);
  return v6(v14);
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  *(void *)(v4 + 104) = *v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v2 = *(uint64_t (**)(uint64_t))(*(void *)(v4 + 104) + 8);
  return v2(a1);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v2;
  *(void *)(v5 + 104) = *v2;
  *(void *)(v5 + 352) = a1;
  *(void *)(v5 + 360) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
  }
  else
  {

    uint64_t v3 = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t (*v3)();
  uint64_t v5;
  uint64_t v6;

  uint64_t v5 = *v2;
  *(void *)(v5 + 104) = *v2;
  *(void *)(v5 + 384) = a1;
  *(void *)(v5 + 392) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
  }
  else
  {

    uint64_t v3 = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 104) = *v1;
  *(void *)(v3 + 408) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 104) = *v1;
  *(void *)(v3 + 424) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 104) = *v1;
  *(void *)(v3 + 440) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:hasMeridiem:), 0);
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:)(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 136) = a5;
  *(void *)(v5 + 128) = a4;
  *(unsigned char *)(v5 + 306) = a3 & 1;
  *(unsigned char *)(v5 + 305) = a2 & 1;
  *(void *)(v5 + 120) = a1;
  *(void *)(v5 + 56) = v5;
  *(void *)(v5 + 64) = 0;
  *(unsigned char *)(v5 + 304) = 0;
  *(unsigned char *)(v5 + 312) = 0;
  *(void *)(v5 + 40) = 0;
  *(void *)(v5 + 48) = 0;
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 88) = 0;
  *(void *)(v5 + 96) = 0;
  *(unsigned char *)(v5 + 320) = 0;
  *(unsigned char *)(v5 + 328) = 0;
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v5 + 144) = v6;
  *(void *)(v5 + 152) = *(void *)(v6 - 8);
  *(void *)(v5 + 160) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DateInterval();
  *(void *)(v5 + 168) = v7;
  *(void *)(v5 + 176) = *(void *)(v7 - 8);
  *(void *)(v5 + 184) = swift_task_alloc();
  *(void *)(v5 + 192) = swift_task_alloc();
  *(void *)(v5 + 64) = a1;
  *(unsigned char *)(v5 + 304) = a2 & 1;
  *(unsigned char *)(v5 + 312) = a3 & 1;
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = a5;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:), 0);
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:)()
{
  char v1 = *(unsigned char *)(v0 + 306);
  *(void *)(v0 + 56) = v0;
  if (v1)
  {
    char v2 = (void *)swift_task_alloc();
    *(void *)(v12 + 200) = v2;
    *char v2 = *(void *)(v12 + 56);
    v2[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:);
    uint64_t v3 = *(void *)(v12 + 136);
    uint64_t v4 = *(void *)(v12 + 128);
    uint64_t v5 = *(void *)(v12 + 120);
    char v6 = *(unsigned char *)(v12 + 305) & 1;
    return SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(v5, v6, v4, v3);
  }
  else
  {
    getFallbackDateInterval(specifiedDateInterval:)(*(void *)(v12 + 120), *(void *)(v12 + 192));
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v12 + 208) = v8;
    *uint64_t v8 = *(void *)(v12 + 56);
    v8[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:);
    uint64_t v9 = *(void *)(v12 + 136);
    uint64_t v10 = *(void *)(v12 + 128);
    uint64_t v11 = *(void *)(v12 + 120);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v11, 0, v10, v9);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(char *);
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;

  uint64_t v17 = *(void *)(v0 + 240);
  uint64_t v15 = *(void *)(v0 + 216);
  *(void *)(v0 + 56) = v0;
  *(void *)(v0 + 96) = v17;
  swift_bridgeObjectRetain();
  *(void *)(v0 + 104) = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  uint64_t v16 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  *(unsigned char *)(v0 + 320) = (v16 ^ 1) & 1;
  swift_bridgeObjectRetain();
  *(void *)(v0 + 112) = v17;
  uint64_t v18 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  *(unsigned char *)(v0 + 328) = (v18 ^ 1) & 1;
  if ((v16 ^ 1) & 1) != 0 || ((v18 ^ 1))
  {
    if ((v16 ^ 1) & 1) != 0 && ((v18 ^ 1))
    {
      SpecificMedicationsPersistor.getDateIntervalCloserToNow(firstDateInterval:secondDateInterval:)(*(void *)(v14 + 120), *(void *)(v14 + 192), *(void *)(v14 + 128), *(void *)(v14 + 136), *(void *)(v14 + 184));
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v14 + 256) = v3;
      void *v3 = *(void *)(v14 + 56);
      v3[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:);
      uint64_t v4 = *(void *)(v14 + 184);
      uint64_t v5 = *(void *)(v14 + 136);
      char v6 = *(void *)(v14 + 128);
      uint64_t v7 = *(unsigned char *)(v14 + 305) & 1;
    }
    else if ((v16 ^ 1))
    {
      uint64_t v8 = (void *)swift_task_alloc();
      *(void *)(v14 + 272) = v8;
      *uint64_t v8 = *(void *)(v14 + 56);
      v8[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:);
      uint64_t v5 = *(void *)(v14 + 136);
      char v6 = *(void *)(v14 + 128);
      uint64_t v4 = *(void *)(v14 + 120);
      uint64_t v7 = *(unsigned char *)(v14 + 305) & 1;
    }
    else
    {
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v14 + 288) = v9;
      *uint64_t v9 = *(void *)(v14 + 56);
      v9[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:);
      uint64_t v4 = *(void *)(v14 + 192);
      uint64_t v5 = *(void *)(v14 + 136);
      char v6 = *(void *)(v14 + 128);
      uint64_t v7 = *(unsigned char *)(v14 + 305) & 1;
    }
    return SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(v4, v7, v6, v5);
  }
  else
  {
    uint64_t v11 = *(void *)(v14 + 192);
    uint64_t v12 = *(void *)(v14 + 168);
    uint64_t v10 = *(void *)(v14 + 176);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v13 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v1 = *(uint64_t (**)(char *))(*(void *)(v14 + 56) + 8);
    return v1(v13);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  uint64_t v5 = v0[24];
  char v1 = v0[23];
  char v2 = v0[22];
  char v6 = v0[21];
  v0[7] = v0;
  uint64_t v7 = *(void (**)(uint64_t))(v2 + 8);
  v7(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t))v7)(v5, v6);
  uint64_t v8 = v0[33];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0[7] + 8);
  return v3(v8);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = v0[24];
  uint64_t v3 = v0[22];
  uint64_t v5 = v0[21];
  v0[7] = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  char v6 = v0[35];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(uint64_t))(v0[7] + 8);
  return v1(v6);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = v0[24];
  uint64_t v3 = v0[22];
  uint64_t v5 = v0[21];
  v0[7] = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  char v6 = v0[37];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(uint64_t))(v0[7] + 8);
  return v1(v6);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  uint64_t (*v5)(char *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint8_t *buf;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint32_t size;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  uint32_t v38 = v0;
  *(void *)(v0 + 56) = v0;
  int v22 = *(id *)(v0 + 224);
  char v1 = *(void *)(v0 + 160);
  uint64_t v19 = *(void *)(v0 + 152);
  uint64_t v21 = *(void *)(v0 + 144);
  char v2 = v22;
  *(void *)(v0 + 72) = v22;
  uint64_t v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v1, v20, v21);
  swift_endAccess();
  uint64_t v3 = v22;
  unsigned __int8 v24 = swift_allocObject();
  *(void *)(v24 + 16) = v22;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  uint64_t v31 = Logger.logObject.getter();
  uint64_t v32 = static os_log_type_t.error.getter();
  *(void *)(v0 + 80) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 308);
  uint64_t v27 = swift_allocObject();
  *(unsigned char *)(v27 + 16) = 64;
  uint64_t v28 = swift_allocObject();
  *(unsigned char *)(v28 + 16) = 8;
  id v25 = swift_allocObject();
  *(void *)(v25 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(void *)(v25 + 24) = v24;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(void *)(v26 + 24) = v25;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v29 + 24) = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v30 = v4;
  swift_retain();
  *uint64_t v30 = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[1] = v27;
  swift_retain();
  v30[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[3] = v28;
  swift_retain();
  v30[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[5] = v29;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v31, v32))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v16 = createStorage<A>(capacity:type:)(1);
    uint64_t v17 = createStorage<A>(capacity:type:)(0);
    uint64_t v33 = buf;
    uint64_t v34 = v16;
    uint64_t v35 = v17;
    serialize(_:at:)(2, &v33);
    serialize(_:at:)(1, &v33);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    _os_log_impl(&dword_25DE00000, v31, v32, "Failed fetching dose events for specified timeframe: %@", buf, size);
    destroyStorage<A>(_:count:)(v16, 1, v14);
    destroyStorage<A>(_:count:)(v17, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v11 = v18[24];
  uint64_t v12 = v18[21];
  uint64_t v8 = v18[20];
  uint64_t v9 = v18[18];
  uint64_t v10 = v18[22];
  uint64_t v7 = v18[19];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  uint64_t v13 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(char *))(v18[7] + 8);
  return v5(v13);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  uint64_t (*v5)(char *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint8_t *buf;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint32_t size;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  uint32_t v38 = v0;
  *(void *)(v0 + 56) = v0;
  swift_bridgeObjectRelease();
  int v22 = *(id *)(v0 + 248);
  char v1 = *(void *)(v0 + 160);
  uint64_t v19 = *(void *)(v0 + 152);
  uint64_t v21 = *(void *)(v0 + 144);
  char v2 = v22;
  *(void *)(v0 + 72) = v22;
  uint64_t v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v1, v20, v21);
  swift_endAccess();
  uint64_t v3 = v22;
  unsigned __int8 v24 = swift_allocObject();
  *(void *)(v24 + 16) = v22;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  uint64_t v31 = Logger.logObject.getter();
  uint64_t v32 = static os_log_type_t.error.getter();
  *(void *)(v0 + 80) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 308);
  uint64_t v27 = swift_allocObject();
  *(unsigned char *)(v27 + 16) = 64;
  uint64_t v28 = swift_allocObject();
  *(unsigned char *)(v28 + 16) = 8;
  id v25 = swift_allocObject();
  *(void *)(v25 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(void *)(v25 + 24) = v24;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(void *)(v26 + 24) = v25;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v29 + 24) = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v30 = v4;
  swift_retain();
  *uint64_t v30 = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[1] = v27;
  swift_retain();
  v30[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[3] = v28;
  swift_retain();
  v30[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[5] = v29;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v31, v32))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v16 = createStorage<A>(capacity:type:)(1);
    uint64_t v17 = createStorage<A>(capacity:type:)(0);
    uint64_t v33 = buf;
    uint64_t v34 = v16;
    uint64_t v35 = v17;
    serialize(_:at:)(2, &v33);
    serialize(_:at:)(1, &v33);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    _os_log_impl(&dword_25DE00000, v31, v32, "Failed fetching dose events for specified timeframe: %@", buf, size);
    destroyStorage<A>(_:count:)(v16, 1, v14);
    destroyStorage<A>(_:count:)(v17, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v11 = v18[24];
  uint64_t v12 = v18[21];
  uint64_t v8 = v18[20];
  uint64_t v9 = v18[18];
  uint64_t v10 = v18[22];
  uint64_t v7 = v18[19];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  uint64_t v13 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(char *))(v18[7] + 8);
  return v5(v13);
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  *(void *)(v4 + 56) = *v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v2 = *(uint64_t (**)(uint64_t))(*(void *)(v4 + 56) + 8);
  return v2(a1);
}

{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v9;
  uint64_t v10;

  uint64_t v9 = (void *)*v2;
  v9[7] = *v2;
  v9[27] = a1;
  v9[28] = v1;
  swift_task_dealloc();
  if (v1)
  {
    return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:), 0);
  }
  else
  {
    v9[11] = a1;
    uint64_t v3 = (void *)swift_task_alloc();
    v9[29] = v3;
    void *v3 = v9[7];
    v3[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:);
    uint64_t v4 = v9[24];
    uint64_t v5 = v9[17];
    uint64_t v6 = v9[16];
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v4, 0, v6, v5);
  }
}

{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  void *v5;
  uint64_t v6;

  uint64_t v5 = (void *)*v2;
  v5[7] = *v2;
  v5[30] = a1;
  v5[31] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:);
  }
  else
  {
    uint64_t v3 = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 56) = *v1;
  *(void *)(v3 + 264) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 56) = *v1;
  *(void *)(v3 + 280) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 56) = *v1;
  *(void *)(v3 + 296) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:hasMeridiem:), 0);
}

uint64_t SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 1200) = a8;
  *(void *)(v8 + 1192) = a7;
  *(void *)(v8 + 1184) = a6;
  *(void *)(v8 + 1176) = a5;
  *(unsigned char *)(v8 + 634) = a4;
  *(void *)(v8 + 1168) = a3;
  *(unsigned char *)(v8 + 633) = a2 & 1;
  *(void *)(v8 + 1160) = a1;
  *(void *)(v8 + 640) = v8;
  *(void *)(v8 + 648) = 0;
  *(unsigned char *)(v8 + 1736) = 0;
  *(void *)(v8 + 624) = 0;
  *(unsigned char *)(v8 + 632) = 0;
  *(void *)(v8 + 496) = 0;
  *(void *)(v8 + 504) = 0;
  *(void *)(v8 + 512) = 0;
  *(void *)(v8 + 520) = 0;
  *(void *)(v8 + 672) = 0;
  *(void *)(v8 + 680) = 0;
  *(void *)(v8 + 528) = 0;
  *(void *)(v8 + 536) = 0;
  *(void *)(v8 + 712) = 0;
  *(void *)(v8 + 744) = 0;
  *(void *)(v8 + 752) = 0;
  *(void *)(v8 + 768) = 0;
  *(void *)(v8 + 560) = 0;
  *(void *)(v8 + 568) = 0;
  *(unsigned char *)(v8 + 1744) = 0;
  *(void *)(v8 + 896) = 0;
  *(void *)(v8 + 952) = 0;
  *(void *)(v8 + 576) = 0;
  *(void *)(v8 + 584) = 0;
  *(void *)(v8 + 976) = 0;
  *(void *)(v8 + 984) = 0;
  *(void *)(v8 + 992) = 0;
  *(void *)(v8 + 1048) = 0;
  *(void *)(v8 + 608) = 0;
  *(void *)(v8 + 616) = 0;
  *(void *)(v8 + 1056) = 0;
  *(void *)(v8 + 1064) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v8 + 1208) = swift_task_alloc();
  *(void *)(v8 + 1216) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  *(void *)(v8 + 1224) = v9;
  *(void *)(v8 + 1232) = *(void *)(v9 - 8);
  *(void *)(v8 + 1240) = swift_task_alloc();
  *(void *)(v8 + 1248) = swift_task_alloc();
  *(void *)(v8 + 1256) = swift_task_alloc();
  *(void *)(v8 + 1264) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DateInterval();
  *(void *)(v8 + 1272) = v10;
  uint64_t v13 = *(void *)(v10 - 8);
  *(void *)(v8 + 1280) = v13;
  *(void *)(v8 + 1288) = *(void *)(v13 + 64);
  *(void *)(v8 + 1296) = swift_task_alloc();
  *(void *)(v8 + 1304) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  *(void *)(v8 + 1312) = v11;
  *(void *)(v8 + 1320) = *(void *)(v11 - 8);
  *(void *)(v8 + 1328) = swift_task_alloc();
  *(void *)(v8 + 1336) = swift_task_alloc();
  *(void *)(v8 + 1344) = swift_task_alloc();
  *(void *)(v8 + 1352) = swift_task_alloc();
  *(void *)(v8 + 1360) = swift_task_alloc();
  *(void *)(v8 + 1368) = swift_task_alloc();
  *(void *)(v8 + 1376) = swift_task_alloc();
  *(void *)(v8 + 1384) = swift_task_alloc();
  *(void *)(v8 + 1392) = swift_task_alloc();
  *(void *)(v8 + 1400) = swift_task_alloc();
  *(void *)(v8 + 1408) = swift_task_alloc();
  *(void *)(v8 + 648) = a1;
  *(unsigned char *)(v8 + 1736) = a2 & 1;
  *(void *)(v8 + 624) = a3;
  *(unsigned char *)(v8 + 632) = a4 & 1;
  *(void *)(v8 + 496) = a5;
  *(void *)(v8 + 504) = a6;
  *(void *)(v8 + 512) = a7;
  *(void *)(v8 + 520) = a8;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:), 0);
}

uint64_t SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)()
{
  uint64_t v131 = v0;
  uint64_t v1 = *(void *)(v0 + 1408);
  uint64_t v108 = *(void *)(v0 + 1320);
  uint64_t v110 = *(void *)(v0 + 1312);
  *(void *)(v0 + 640) = v0;
  uint64_t v109 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v111 = *(void (**)(uint64_t, uint64_t, uint64_t))(v108 + 16);
  *(void *)(v0 + 1416) = v111;
  *(void *)(v0 + 1424) = (v108 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v111(v1, v109, v110);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  os_log_type_t v113 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 656) = 2;
  *(void *)(v0 + 1432) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 1440) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 1448) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t size = *(unsigned int *)(v0 + 636);
  *(void *)(v0 + 1456) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v115 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v113))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v104 = createStorage<A>(capacity:type:)(0);
    uint64_t v105 = createStorage<A>(capacity:type:)(0);
    *(void *)(v107 + 1128) = buf;
    *(void *)(v107 + 1136) = v104;
    *(void *)(v107 + 1144) = v105;
    serialize(_:at:)(0, (unsigned char **)(v107 + 1128));
    serialize(_:at:)(0, (unsigned char **)(v107 + 1128));
    *(void *)(v107 + 1152) = v115;
    uint64_t v106 = (void *)swift_task_alloc();
    v106[2] = v107 + 1128;
    v106[3] = v107 + 1136;
    v106[4] = v107 + 1144;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, oslog, v113, "Got name.", buf, size);
    destroyStorage<A>(_:count:)(v104, 0, v102);
    destroyStorage<A>(_:count:)(v105, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v76 = *(void *)(v107 + 1408);
  uint64_t v80 = *(void *)(v107 + 1400);
  uint64_t v87 = *(void *)(v107 + 1312);
  uint64_t v89 = *(void *)(v107 + 1304);
  uint64_t v91 = *(void *)(v107 + 1296);
  uint64_t v92 = *(void *)(v107 + 1272);
  uint64_t v79 = *(void *)(v107 + 1264);
  uint64_t v84 = *(void *)(v107 + 1256);
  uint64_t v81 = *(void *)(v107 + 1248);
  uint64_t v85 = *(void *)(v107 + 1240);
  uint64_t v82 = *(void *)(v107 + 1224);
  uint64_t v75 = *(void *)(v107 + 1320);
  uint64_t v88 = *(void *)(v107 + 1280);
  uint64_t v78 = *(void *)(v107 + 1232);

  uint64_t v77 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
  *(void *)(v107 + 1464) = v77;
  *(void *)(v107 + 1472) = (v75 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v77(v76, v87);
  Date.init()();
  Date.startOfDay.getter(v84);
  uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
  v83(v79, v82);
  Date.init()();
  Date.endOfDay.getter(v85);
  v83(v81, v82);
  DateInterval.init(start:end:)();
  uint64_t v86 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v111(v80, v86, v87);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16))(v91, v89, v92);
  unint64_t v90 = (*(unsigned __int8 *)(v88 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80);
  uint64_t v94 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v88 + 32))(v94 + v90, v91, v92);
  log = Logger.logObject.getter();
  os_log_type_t v101 = static os_log_type_t.debug.getter();
  *(void *)(v107 + 664) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v93 = *(_DWORD *)(v107 + 1740);
  uint64_t v96 = swift_allocObject();
  *(unsigned char *)(v96 + 16) = 32;
  uint64_t v97 = swift_allocObject();
  *(unsigned char *)(v97 + 16) = 8;
  uint64_t v95 = swift_allocObject();
  *(void *)(v95 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
  *(void *)(v95 + 24) = v94;
  uint64_t v98 = swift_allocObject();
  *(void *)(v98 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v98 + 24) = v95;
  _allocateUninitializedArray<A>(_:)();
  int v99 = v2;
  swift_retain();
  void *v99 = partial apply for closure #1 in OSLogArguments.append(_:);
  v99[1] = v96;
  swift_retain();
  v99[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v99[3] = v97;
  swift_retain();
  v99[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v99[5] = v98;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v101))
  {
    uint64_t v72 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v73 = createStorage<A>(capacity:type:)(0);
    uint64_t v74 = createStorage<A>(capacity:type:)(1);
    uint64_t v126 = v72;
    uint64_t v127 = v73;
    uint64_t v128 = v74;
    serialize(_:at:)(2, &v126);
    serialize(_:at:)(1, &v126);
    int v129 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v130 = v96;
    closure #1 in osLogInternal(_:log:type:)(&v129, (uint64_t)&v126, (uint64_t)&v127, (uint64_t)&v128);
    int v129 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v130 = v97;
    closure #1 in osLogInternal(_:log:type:)(&v129, (uint64_t)&v126, (uint64_t)&v127, (uint64_t)&v128);
    int v129 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v130 = v98;
    closure #1 in osLogInternal(_:log:type:)(&v129, (uint64_t)&v126, (uint64_t)&v127, (uint64_t)&v128);
    _os_log_impl(&dword_25DE00000, log, v101, "searching dateinterval1: %s", v72, v93);
    destroyStorage<A>(_:count:)(v73, 0, v71);
    destroyStorage<A>(_:count:)(v74, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v72, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v64 = *(void *)(v107 + 1400);
  uint64_t v65 = *(void *)(v107 + 1312);
  uint64_t v67 = *(void *)(v107 + 1160);

  v77(v64, v65);
  uint64_t v66 = swift_allocObject();
  *(void *)(v107 + 1480) = v66;
  *(void *)(v107 + 672) = v66 + 16;
  *(void *)(v107 + 1488) = type metadata accessor for HKMedicationExposableDoseEvent();
  *(void *)(v66 + 16) = _allocateUninitializedArray<A>(_:)();
  uint64_t v3 = swift_allocObject();
  *(void *)(v107 + 1496) = v3;
  *(void *)(v107 + 680) = v3 + 16;
  *(void *)(v3 + 16) = 0;
  swift_bridgeObjectRetain();
  *(void *)(v107 + 688) = v67;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  uint64_t v68 = *(void *)(v107 + 544);
  uint64_t v69 = *(void *)(v107 + 552);
  *(void *)(v107 + 1504) = v69;
  if (v69)
  {
    *(void *)(v107 + 608) = v68;
    *(void *)(v107 + 616) = v69;
    type metadata accessor for HKMedicationIdentifier();
    swift_bridgeObjectRetain();
    id v63 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
    *(void *)(v107 + 1512) = v63;
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v107 + 1520) = v4;
    *uint64_t v4 = *(void *)(v107 + 640);
    v4[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    uint64_t v5 = *(void *)(v107 + 1304);
    uint64_t v6 = *(void *)(v107 + 1200);
    uint64_t v7 = *(void *)(v107 + 1192);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v5, (uint64_t)v63, v7, v6);
  }
  else
  {
    uint64_t v55 = *(void *)(v107 + 1480);
    uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 1416);
    uint64_t v9 = *(void *)(v107 + 1392);
    uint64_t v52 = *(void *)(v107 + 1312);
    outlined destroy of [HKQuantityType]();
    uint64_t v51 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v53(v9, v51, v52);
    swift_endAccess();
    swift_retain();
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.debug.getter();
    *(void *)(v107 + 696) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v54 = *(_DWORD *)(v107 + 1748);
    uint64_t v57 = swift_allocObject();
    *(unsigned char *)(v57 + 16) = 0;
    uint64_t v58 = swift_allocObject();
    *(unsigned char *)(v58 + 16) = 8;
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    *(void *)(v56 + 24) = v55;
    uint64_t v59 = swift_allocObject();
    *(void *)(v59 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(void *)(v59 + 24) = v56;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v60 = v10;
    swift_retain();
    void *v60 = partial apply for closure #1 in OSLogArguments.append(_:);
    v60[1] = v57;
    swift_retain();
    v60[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v60[3] = v58;
    swift_retain();
    v60[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v60[5] = v59;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v48 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v49 = createStorage<A>(capacity:type:)(0);
      uint64_t v50 = createStorage<A>(capacity:type:)(0);
      uint64_t v121 = v48;
      uint64_t v122 = v49;
      uint64_t v123 = v50;
      serialize(_:at:)(0, &v121);
      serialize(_:at:)(1, &v121);
      uint64_t v124 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v125 = v57;
      closure #1 in osLogInternal(_:log:type:)(&v124, (uint64_t)&v121, (uint64_t)&v122, (uint64_t)&v123);
      uint64_t v124 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v125 = v58;
      closure #1 in osLogInternal(_:log:type:)(&v124, (uint64_t)&v121, (uint64_t)&v122, (uint64_t)&v123);
      uint64_t v124 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      uint64_t v125 = v59;
      closure #1 in osLogInternal(_:log:type:)(&v124, (uint64_t)&v121, (uint64_t)&v122, (uint64_t)&v123);
      _os_log_impl(&dword_25DE00000, v61, v62, "starting to get list of scheduled doseEvents (%ld)", v48, v54);
      destroyStorage<A>(_:count:)(v49, 0, v47);
      destroyStorage<A>(_:count:)(v50, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v48, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v39 = *(void *)(v107 + 1480);
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v107 + 1464);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 1416);
    uint64_t v31 = *(void *)(v107 + 1392);
    uint64_t v11 = *(void *)(v107 + 1384);
    uint64_t v36 = *(void *)(v107 + 1312);

    v32(v31, v36);
    swift_beginAccess();
    uint64_t v33 = *(void *)(v39 + 16);
    swift_bridgeObjectRetain();
    swift_endAccess();
    uint64_t v34 = filterUniqueDoseEvents(doseEvents:)(v33);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(void *)(v39 + 16) = v34;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v35 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v37(v11, v35, v36);
    swift_endAccess();
    swift_retain();
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    *(void *)(v107 + 704) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v38 = *(_DWORD *)(v107 + 1752);
    uint64_t v41 = swift_allocObject();
    *(unsigned char *)(v41 + 16) = 0;
    uint64_t v42 = swift_allocObject();
    *(unsigned char *)(v42 + 16) = 8;
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    *(void *)(v40 + 24) = v39;
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(void *)(v43 + 24) = v40;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v44 = v12;
    swift_retain();
    void *v44 = partial apply for closure #1 in OSLogArguments.append(_:);
    v44[1] = v41;
    swift_retain();
    v44[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v44[3] = v42;
    swift_retain();
    v44[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v44[5] = v43;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v28 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v29 = createStorage<A>(capacity:type:)(0);
      uint64_t v30 = createStorage<A>(capacity:type:)(0);
      uint64_t v116 = v28;
      uint64_t v117 = v29;
      uint64_t v118 = v30;
      serialize(_:at:)(0, &v116);
      serialize(_:at:)(1, &v116);
      uint64_t v119 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v120 = v41;
      closure #1 in osLogInternal(_:log:type:)(&v119, (uint64_t)&v116, (uint64_t)&v117, (uint64_t)&v118);
      uint64_t v119 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v120 = v42;
      closure #1 in osLogInternal(_:log:type:)(&v119, (uint64_t)&v116, (uint64_t)&v117, (uint64_t)&v118);
      uint64_t v119 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      uint64_t v120 = v43;
      closure #1 in osLogInternal(_:log:type:)(&v119, (uint64_t)&v116, (uint64_t)&v117, (uint64_t)&v118);
      _os_log_impl(&dword_25DE00000, v45, v46, "Name only: got %ld scheduled doseEvents", v28, v38);
      destroyStorage<A>(_:count:)(v29, 0, v27);
      destroyStorage<A>(_:count:)(v30, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v28, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v107 + 1464);
    uint64_t v19 = *(void *)(v107 + 1384);
    uint64_t v20 = *(void *)(v107 + 1312);
    uint64_t v22 = (uint64_t *)(*(void *)(v107 + 1480) + 16);

    v21(v19, v20);
    uint64_t v23 = swift_allocObject();
    *(void *)(v107 + 1544) = v23;
    *(void *)(v107 + 712) = v23 + 16;
    swift_beginAccess();
    uint64_t v24 = *v22;
    swift_bridgeObjectRetain();
    swift_endAccess();
    *(void *)(v107 + 720) = v24;
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    *(void *)(v107 + 1552) = v25;
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    *(void *)(v107 + 1560) = v26;
    unint64_t v13 = lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    *(void *)(v107 + 1568) = v13;
    uint64_t v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:), 0, v25, v26, MEMORY[0x263F8E628], v13, MEMORY[0x263F8E658], v70);
    *(void *)(v107 + 1576) = 0;
    outlined destroy of [HKQuantityType]();
    *(void *)(v107 + 728) = v14;
    *(void *)(v107 + 1584) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
    lazy protocol witness table accessor for type String? and conformance <A> A?();
    lazy protocol witness table accessor for type [String?] and conformance [A]();
    *(void *)(v107 + 736) = Set.init<A>(_:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String?>);
    lazy protocol witness table accessor for type Set<String?> and conformance Set<A>();
    *(void *)(v23 + 16) = Array.init<A>(_:)();
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v107 + 1592) = v15;
    *uint64_t v15 = *(void *)(v107 + 640);
    v15[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    uint64_t v16 = *(void *)(v107 + 1200);
    uint64_t v17 = *(void *)(v107 + 1192);
    uint64_t v18 = *(void *)(v107 + 1160);
    return SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(v18, 0, 1, 0, 0, 1, v17, v16);
  }
}

{
  void *v0;
  uint64_t result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  uint32_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  NSObject *log;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *buf;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  NSObject *oslog;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  void *v82;
  uint64_t v83;

  uint64_t v82 = v0;
  uint64_t v70 = v0[191];
  v0[80] = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[132] = v70;
  v0[139] = v70;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Array.append<A>(contentsOf:)();
  swift_bridgeObjectRetain();
  v0[140] = v70;
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  uint64_t v71 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  uint64_t result = v71;
  if ((v71 & 1) == 0)
  {
    uint64_t v6 = *(void *)(*(void *)(v69 + 1496) + 16);
    uint64_t v65 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      return result;
    }
    *(void *)(*(void *)(v69 + 1496) + 16) = v65;
  }
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  uint64_t v64 = *(void *)(v69 + 1536);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  uint64_t v67 = *(void *)(v69 + 544);
  uint64_t v66 = *(void *)(v69 + 552);
  *(void *)(v69 + 1504) = v66;
  if (v66)
  {
    *(void *)(v69 + 608) = v67;
    *(void *)(v69 + 616) = v66;
    type metadata accessor for HKMedicationIdentifier();
    swift_bridgeObjectRetain();
    uint64_t v68 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
    *(void *)(v69 + 1512) = v68;
    char v2 = (void *)swift_task_alloc();
    *(void *)(v69 + 1520) = v2;
    *char v2 = *(void *)(v69 + 640);
    v2[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    uint64_t v3 = *(void *)(v69 + 1304);
    uint64_t v4 = *(void *)(v69 + 1200);
    uint64_t v5 = *(void *)(v69 + 1192);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v3, (uint64_t)v68, v5, v4);
  }
  else
  {
    uint64_t v56 = *(void *)(v69 + 1480);
    uint32_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 1416);
    uint64_t v8 = *(void *)(v69 + 1392);
    uint64_t v53 = *(void *)(v69 + 1312);
    outlined destroy of [HKQuantityType]();
    uint64_t v52 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v54(v8, v52, v53);
    swift_endAccess();
    swift_retain();
    oslog = Logger.logObject.getter();
    id v63 = static os_log_type_t.debug.getter();
    *(void *)(v69 + 696) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t size = *(_DWORD *)(v69 + 1748);
    uint64_t v58 = swift_allocObject();
    *(unsigned char *)(v58 + 16) = 0;
    uint64_t v59 = swift_allocObject();
    *(unsigned char *)(v59 + 16) = 8;
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    *(void *)(v57 + 24) = v56;
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(void *)(v60 + 24) = v57;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v61 = v9;
    swift_retain();
    *uint64_t v61 = partial apply for closure #1 in OSLogArguments.append(_:);
    v61[1] = v58;
    swift_retain();
    v61[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v61[3] = v59;
    swift_retain();
    v61[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v61[5] = v60;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v63))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v50 = createStorage<A>(capacity:type:)(0);
      uint64_t v51 = createStorage<A>(capacity:type:)(0);
      uint64_t v77 = buf;
      uint64_t v78 = v50;
      uint64_t v79 = v51;
      serialize(_:at:)(0, &v77);
      serialize(_:at:)(1, &v77);
      uint64_t v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v81 = v58;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v80, (uint64_t)&v77, (uint64_t)&v78, (uint64_t)&v79);
      if (v64) {
        return result;
      }
      uint64_t v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v81 = v59;
      closure #1 in osLogInternal(_:log:type:)(&v80, (uint64_t)&v77, (uint64_t)&v78, (uint64_t)&v79);
      uint64_t v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      uint64_t v81 = v60;
      closure #1 in osLogInternal(_:log:type:)(&v80, (uint64_t)&v77, (uint64_t)&v78, (uint64_t)&v79);
      _os_log_impl(&dword_25DE00000, oslog, v63, "starting to get list of scheduled doseEvents (%ld)", buf, size);
      destroyStorage<A>(_:count:)(v50, 0, v48);
      destroyStorage<A>(_:count:)(v51, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      os_log_type_t v46 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      os_log_type_t v46 = v64;
    }
    uint32_t v38 = *(void *)(v69 + 1480);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v69 + 1464);
    uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 1416);
    uint64_t v30 = *(void *)(v69 + 1392);
    uint64_t v10 = *(void *)(v69 + 1384);
    uint64_t v35 = *(void *)(v69 + 1312);

    v31(v30, v35);
    swift_beginAccess();
    uint64_t v32 = *(void *)(v38 + 16);
    swift_bridgeObjectRetain();
    swift_endAccess();
    uint64_t v33 = filterUniqueDoseEvents(doseEvents:)(v32);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(void *)(v38 + 16) = v33;
    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v34 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v36(v10, v34, v35);
    swift_endAccess();
    swift_retain();
    log = Logger.logObject.getter();
    uint64_t v45 = static os_log_type_t.debug.getter();
    *(void *)(v69 + 704) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v37 = *(_DWORD *)(v69 + 1752);
    uint64_t v40 = swift_allocObject();
    *(unsigned char *)(v40 + 16) = 0;
    uint64_t v41 = swift_allocObject();
    *(unsigned char *)(v41 + 16) = 8;
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    *(void *)(v39 + 24) = v38;
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(void *)(v42 + 24) = v39;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v43 = v11;
    swift_retain();
    char *v43 = partial apply for closure #1 in OSLogArguments.append(_:);
    v43[1] = v40;
    swift_retain();
    v43[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v43[3] = v41;
    swift_retain();
    v43[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v43[5] = v42;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v45))
    {
      uint64_t v27 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v28 = createStorage<A>(capacity:type:)(0);
      uint64_t v29 = createStorage<A>(capacity:type:)(0);
      uint64_t v72 = v27;
      uint64_t v73 = v28;
      uint64_t v74 = v29;
      serialize(_:at:)(0, &v72);
      serialize(_:at:)(1, &v72);
      uint64_t v75 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v76 = v40;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v75, (uint64_t)&v72, (uint64_t)&v73, (uint64_t)&v74);
      if (v46) {
        return result;
      }
      uint64_t v75 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v76 = v41;
      closure #1 in osLogInternal(_:log:type:)(&v75, (uint64_t)&v72, (uint64_t)&v73, (uint64_t)&v74);
      uint64_t v75 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      uint64_t v76 = v42;
      closure #1 in osLogInternal(_:log:type:)(&v75, (uint64_t)&v72, (uint64_t)&v73, (uint64_t)&v74);
      _os_log_impl(&dword_25DE00000, log, v45, "Name only: got %ld scheduled doseEvents", v27, v37);
      destroyStorage<A>(_:count:)(v28, 0, v26);
      destroyStorage<A>(_:count:)(v29, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v27, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v25 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      uint64_t v25 = v46;
    }
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v69 + 1464);
    uint64_t v17 = *(void *)(v69 + 1384);
    uint64_t v18 = *(void *)(v69 + 1312);
    uint64_t v20 = (uint64_t *)(*(void *)(v69 + 1480) + 16);

    v19(v17, v18);
    uint64_t v21 = swift_allocObject();
    *(void *)(v69 + 1544) = v21;
    *(void *)(v69 + 712) = v21 + 16;
    swift_beginAccess();
    uint64_t v22 = *v20;
    swift_bridgeObjectRetain();
    swift_endAccess();
    *(void *)(v69 + 720) = v22;
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    *(void *)(v69 + 1552) = v23;
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    *(void *)(v69 + 1560) = v24;
    uint64_t v12 = lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    *(void *)(v69 + 1568) = v12;
    uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:), 0, v23, v24, MEMORY[0x263F8E628], v12, MEMORY[0x263F8E658], v47);
    *(void *)(v69 + 1576) = v25;
    if (!v25)
    {
      outlined destroy of [HKQuantityType]();
      *(void *)(v69 + 728) = result;
      *(void *)(v69 + 1584) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
      lazy protocol witness table accessor for type String? and conformance <A> A?();
      lazy protocol witness table accessor for type [String?] and conformance [A]();
      *(void *)(v69 + 736) = Set.init<A>(_:)();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String?>);
      lazy protocol witness table accessor for type Set<String?> and conformance Set<A>();
      *(void *)(v21 + 16) = Array.init<A>(_:)();
      unint64_t v13 = (void *)swift_task_alloc();
      *(void *)(v69 + 1592) = v13;
      void *v13 = *(void *)(v69 + 640);
      v13[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
      uint64_t v14 = *(void *)(v69 + 1200);
      uint64_t v15 = *(void *)(v69 + 1192);
      uint64_t v16 = *(void *)(v69 + 1160);
      return SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(v16, 0, 1, 0, 0, 1, v15, v14);
    }
  }
  return result;
}

{
  NSNumber *v0;
  Class v1;
  objc_class *v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t (*v32)(char *);
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint32_t v51;
  os_log_type_t v52;
  NSObject *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  char v78;
  uint32_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  NSObject *v88;
  os_log_type_t v89;
  Class v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(uint64_t, uint64_t);
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint32_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  NSObject *v122;
  os_log_type_t v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint8_t *v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t, uint64_t);
  uint32_t v144;
  os_log_type_t v145;
  NSObject *log;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  id v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t);
  uint64_t v160;
  uint8_t *buf;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void (*v166)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  NSObject *oslog;
  os_log_type_t v175;
  uint64_t v176;
  objc_class *isa;
  objc_class *v178;
  NSNumber *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint8_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t (*v187)(uint64_t, uint64_t, uint64_t);
  uint64_t v188;
  uint8_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t (*v192)(uint64_t, uint64_t, uint64_t);
  uint64_t v193;
  uint8_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t (*v197)(uint64_t, uint64_t, uint64_t);
  uint64_t v198;
  NSNumber *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;

  id v199 = v0;
  Class isa = v0[200].super.super.isa;
  uint64_t v1 = v0[197].super.super.isa;
  id v181 = (uint64_t)v0[186].super.super.isa;
  v0[80].super.super.Class isa = (Class)v0;
  v0[93].super.super.Class isa = isa;
  type metadata accessor for NSNumber();
  id v178 = NSNumber.init(integerLiteral:)(-1).super.super.isa;
  v0[201].super.super.Class isa = v178;
  v0[94].super.super.Class isa = v178;
  v0[95].super.super.Class isa = isa;
  char v2 = v178;
  uint64_t v179 = (NSNumber *)swift_task_alloc();
  v179[2].super.super.Class isa = v178;
  uint64_t v180 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  uint64_t v3 = lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:), (uint64_t)v179, v180, v181, MEMORY[0x263F8E628], v3, MEMORY[0x263F8E658], v182);
  uint64_t v183 = result;
  v0[202].super.super.Class isa = (Class)result;
  if (v1) {
    return result;
  }
  uint64_t v166 = *(void (**)(uint64_t, uint64_t, uint64_t))(v176 + 1416);
  uint64_t v5 = *(void *)(v176 + 1376);
  uint64_t v165 = *(void *)(v176 + 1312);
  swift_task_dealloc();

  *(void *)(v176 + 768) = v183;
  uint64_t v164 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v166(v5, v164, v165);
  swift_endAccess();
  swift_bridgeObjectRetain();
  uint64_t v168 = swift_allocObject();
  *(void *)(v168 + 16) = v183;
  oslog = Logger.logObject.getter();
  id v175 = static os_log_type_t.debug.getter();
  *(void *)(v176 + 776) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t size = *(_DWORD *)(v176 + 1756);
  int v170 = swift_allocObject();
  *(unsigned char *)(v170 + 16) = 0;
  uint64_t v171 = swift_allocObject();
  *(unsigned char *)(v171 + 16) = 8;
  uint64_t v169 = swift_allocObject();
  *(void *)(v169 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
  *(void *)(v169 + 24) = v168;
  uint64_t v172 = swift_allocObject();
  *(void *)(v172 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  *(void *)(v172 + 24) = v169;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v173 = v6;
  swift_retain();
  *uint64_t v173 = partial apply for closure #1 in OSLogArguments.append(_:);
  v173[1] = v170;
  swift_retain();
  v173[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v173[3] = v171;
  swift_retain();
  v173[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v173[5] = v172;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v175))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v162 = createStorage<A>(capacity:type:)(0);
    uint64_t v163 = createStorage<A>(capacity:type:)(0);
    uint64_t v194 = buf;
    uint64_t v195 = v162;
    int v196 = v163;
    serialize(_:at:)(0, &v194);
    serialize(_:at:)(1, &v194);
    uint64_t v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    id v198 = v170;
    closure #1 in osLogInternal(_:log:type:)(&v197, (uint64_t)&v194, (uint64_t)&v195, (uint64_t)&v196);
    uint64_t v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    id v198 = v171;
    closure #1 in osLogInternal(_:log:type:)(&v197, (uint64_t)&v194, (uint64_t)&v195, (uint64_t)&v196);
    uint64_t v197 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
    id v198 = v172;
    closure #1 in osLogInternal(_:log:type:)(&v197, (uint64_t)&v194, (uint64_t)&v195, (uint64_t)&v196);
    _os_log_impl(&dword_25DE00000, oslog, v175, "Name only: created %ld as needed doseEvents with matching name", buf, size);
    destroyStorage<A>(_:count:)(v162, 0, v160);
    destroyStorage<A>(_:count:)(v163, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v159 = *(void (**)(uint64_t, uint64_t))(v176 + 1464);
  uint32_t v157 = *(void *)(v176 + 1376);
  uint64_t v158 = *(void *)(v176 + 1312);

  v159(v157, v158);
  swift_bridgeObjectRetain();
  *(void *)(v176 + 784) = v183;
  swift_beginAccess();
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Array.append<A>(contentsOf:)();
  swift_endAccess();
  swift_bridgeObjectRetain();
  *(void *)(v176 + 792) = v183;
  Collection<>.makeIterator()();
  while (1)
  {
    *(void *)(v176 + 1624) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    unint64_t v156 = *(id *)(v176 + 800);
    if (!v156) {
      break;
    }
    *(void *)(v176 + 1048) = v156;
    unint64_t v155 = objc_msgSend(v156, sel_scheduleItemIdentifier);
    if (v155)
    {
      uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v152 = v7;

      id v153 = v151;
      unint64_t v154 = v152;
    }
    else
    {
      id v153 = 0;
      unint64_t v154 = 0;
    }
    *(void *)(v176 + 592) = v153;
    *(void *)(v176 + 600) = v154;
    Array.append(_:)();
  }
  uint64_t v148 = (uint64_t *)(*(void *)(v176 + 1480) + 16);
  outlined destroy of [HKQuantityType]();
  swift_beginAccess();
  uint32_t v149 = *v148;
  swift_bridgeObjectRetain();
  swift_endAccess();
  swift_bridgeObjectRetain();
  *(void *)(v176 + 808) = v149;
  uint64_t v150 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  if (v150)
  {
    uint64_t v143 = *(void (**)(uint64_t, uint64_t, uint64_t))(v176 + 1416);
    uint64_t v8 = *(void *)(v176 + 1368);
    uint64_t v142 = *(void *)(v176 + 1312);
    id v141 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v143(v8, v141, v142);
    swift_endAccess();
    log = Logger.logObject.getter();
    uint64_t v145 = static os_log_type_t.debug.getter();
    *(void *)(v176 + 1008) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v144 = *(_DWORD *)(v176 + 1776);
    uint64_t v147 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v145))
    {
      unint64_t v137 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v138 = createStorage<A>(capacity:type:)(0);
      uint64_t v139 = createStorage<A>(capacity:type:)(0);
      *(void *)(v176 + 1016) = v137;
      *(void *)(v176 + 1024) = v138;
      *(void *)(v176 + 1032) = v139;
      serialize(_:at:)(0, (unsigned char **)(v176 + 1016));
      serialize(_:at:)(0, (unsigned char **)(v176 + 1016));
      *(void *)(v176 + 1040) = v147;
      unsigned int v140 = (void *)swift_task_alloc();
      v140[2] = v176 + 1016;
      v140[3] = v176 + 1024;
      v140[4] = v176 + 1032;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, log, v145, "Name specified, but no potential time match nor as needed match found. Returning .noMatchFound.", v137, v144);
      destroyStorage<A>(_:count:)(v138, 0, v136);
      destroyStorage<A>(_:count:)(v139, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v137, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v130 = *(void (**)(uint64_t, uint64_t))(v176 + 1464);
    uint64_t v128 = *(void *)(v176 + 1368);
    int v129 = *(void *)(v176 + 1312);
    uint64_t v132 = *(void *)(v176 + 1304);
    uint64_t v133 = *(void *)(v176 + 1272);
    uint64_t v131 = *(void *)(v176 + 1280);

    v130(v128, v129);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v134 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v132, v133);
    uint64_t v135 = v134;
    goto LABEL_47;
  }
  uint64_t v125 = *(void *)(v176 + 1560);
  uint64_t v126 = *(void *)(*(void *)(v176 + 1544) + 16);
  swift_bridgeObjectRetain();
  uint64_t v127 = MEMORY[0x2611C8A30](v126, v125);
  swift_bridgeObjectRelease();
  if (v127 > 1 || *(void *)(*(void *)(v176 + 1496) + 16) > 1)
  {
    uint64_t v109 = *(void *)(v176 + 1544);
    os_log_type_t v113 = *(void *)(v176 + 1496);
    uint64_t v108 = *(void (**)(uint64_t, uint64_t, uint64_t))(v176 + 1416);
    uint64_t v9 = *(void *)(v176 + 1360);
    uint64_t v107 = *(void *)(v176 + 1312);
    uint64_t v106 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v108(v9, v106, v107);
    swift_endAccess();
    swift_retain();
    swift_retain();
    uint64_t v111 = swift_allocObject();
    *(void *)(v111 + 16) = partial apply for implicit closure #6 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    *(void *)(v111 + 24) = v109;
    swift_release();
    swift_retain();
    uint64_t v122 = Logger.logObject.getter();
    uint64_t v123 = static os_log_type_t.debug.getter();
    *(void *)(v176 + 944) = 22;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v110 = *(_DWORD *)(v176 + 1772);
    uint64_t v115 = swift_allocObject();
    *(unsigned char *)(v115 + 16) = 32;
    uint64_t v116 = swift_allocObject();
    *(unsigned char *)(v116 + 16) = 8;
    uint64_t v112 = swift_allocObject();
    *(void *)(v112 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_3;
    *(void *)(v112 + 24) = v111;
    uint64_t v117 = swift_allocObject();
    *(void *)(v117 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v117 + 24) = v112;
    uint64_t v118 = swift_allocObject();
    *(unsigned char *)(v118 + 16) = 0;
    uint64_t v119 = swift_allocObject();
    *(unsigned char *)(v119 + 16) = 8;
    unint64_t v114 = swift_allocObject();
    *(void *)(v114 + 16) = partial apply for implicit closure #7 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    *(void *)(v114 + 24) = v113;
    uint64_t v120 = swift_allocObject();
    *(void *)(v120 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(void *)(v120 + 24) = v114;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v121 = v10;
    swift_retain();
    *uint64_t v121 = partial apply for closure #1 in OSLogArguments.append(_:);
    v121[1] = v115;
    swift_retain();
    v121[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v121[3] = v116;
    swift_retain();
    v121[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v121[5] = v117;
    swift_retain();
    v121[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v121[7] = v118;
    swift_retain();
    v121[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v121[9] = v119;
    swift_retain();
    v121[10] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v121[11] = v120;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v122, v123))
    {
      uint64_t v103 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v104 = createStorage<A>(capacity:type:)(0);
      uint64_t v105 = createStorage<A>(capacity:type:)(1);
      uint64_t v189 = v103;
      unint64_t v190 = v104;
      uint64_t v191 = v105;
      serialize(_:at:)(2, &v189);
      serialize(_:at:)(2, &v189);
      unint64_t v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v193 = v115;
      closure #1 in osLogInternal(_:log:type:)(&v192, (uint64_t)&v189, (uint64_t)&v190, (uint64_t)&v191);
      unint64_t v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v193 = v116;
      closure #1 in osLogInternal(_:log:type:)(&v192, (uint64_t)&v189, (uint64_t)&v190, (uint64_t)&v191);
      unint64_t v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v193 = v117;
      closure #1 in osLogInternal(_:log:type:)(&v192, (uint64_t)&v189, (uint64_t)&v190, (uint64_t)&v191);
      unint64_t v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v193 = v118;
      closure #1 in osLogInternal(_:log:type:)(&v192, (uint64_t)&v189, (uint64_t)&v190, (uint64_t)&v191);
      unint64_t v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v193 = v119;
      closure #1 in osLogInternal(_:log:type:)(&v192, (uint64_t)&v189, (uint64_t)&v190, (uint64_t)&v191);
      unint64_t v192 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      uint64_t v193 = v120;
      closure #1 in osLogInternal(_:log:type:)(&v192, (uint64_t)&v189, (uint64_t)&v190, (uint64_t)&v191);
      _os_log_impl(&dword_25DE00000, v122, v123, "Multiple times (%s) or strengths (%ld) found for specified name today, now returning .needsNameDisambiguation", v103, v110);
      destroyStorage<A>(_:count:)(v104, 0, v102);
      destroyStorage<A>(_:count:)(v105, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v103, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v98 = *(void (**)(uint64_t, uint64_t))(v176 + 1464);
    uint64_t v96 = *(void *)(v176 + 1360);
    uint64_t v97 = *(void *)(v176 + 1312);
    int v99 = (uint64_t *)(*(void *)(v176 + 1480) + 16);

    v98(v96, v97);
    *(void *)(v176 + 1632) = type metadata accessor for MatchedMedName();
    *(void *)(v176 + 952) = _allocateUninitializedArray<A>(_:)();
    swift_beginAccess();
    uint64_t v100 = *v99;
    swift_bridgeObjectRetain();
    swift_endAccess();
    *(void *)(v176 + 960) = v100;
    Collection<>.makeIterator()();
    IndexingIterator.next()();
    os_log_type_t v101 = *(void *)(v176 + 968);
    *(void *)(v176 + 1640) = v101;
    if (!v101)
    {
      uint64_t v91 = *(id *)(v176 + 1608);
      uint32_t v93 = *(void *)(v176 + 1304);
      uint64_t v94 = *(void *)(v176 + 1272);
      uint64_t v92 = *(void *)(v176 + 1280);
      outlined destroy of [HKQuantityType]();
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      uint64_t v95 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(103, 0);
      uint64_t v14 = v95;
      uint64_t v15 = v95;
      *(void *)(v176 + 976) = v95;
      swift_bridgeObjectRetain();
      unint64_t v90 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v95, sel_setMatchingMeds_, v90);

      outlined destroy of [HKQuantityType]();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v93, v94);
      uint64_t v135 = v95;
LABEL_47:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v32 = *(uint64_t (**)(char *))(*(void *)(v176 + 640) + 8);
      return v32(v135);
    }
    *(void *)(v176 + 984) = v101;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v176 + 1648) = v11;
    *uint64_t v11 = *(void *)(v176 + 640);
    v11[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    uint64_t v12 = *(void *)(v176 + 1200);
    unint64_t v13 = *(void *)(v176 + 1192);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v101, 1, v13, v12);
  }
  else
  {
    uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(v176 + 1416);
    uint64_t v16 = *(void *)(v176 + 1352);
    uint64_t v76 = *(void *)(v176 + 1312);
    uint64_t v78 = *(unsigned char *)(v176 + 633);
    uint64_t v75 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v77(v16, v75, v76);
    swift_endAccess();
    uint64_t v80 = swift_allocObject();
    *(unsigned char *)(v80 + 16) = v78 & 1;
    uint64_t v88 = Logger.logObject.getter();
    uint64_t v89 = static os_log_type_t.debug.getter();
    *(void *)(v176 + 816) = 8;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v79 = *(_DWORD *)(v176 + 1760);
    uint64_t v84 = swift_allocObject();
    *(unsigned char *)(v84 + 16) = 0;
    uint64_t v85 = swift_allocObject();
    *(unsigned char *)(v85 + 16) = 4;
    uint64_t v81 = swift_allocObject();
    *(void *)(v81 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(void *)(v81 + 24) = v80;
    uint64_t v82 = swift_allocObject();
    *(void *)(v82 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
    *(void *)(v82 + 24) = v81;
    uint64_t v83 = swift_allocObject();
    *(void *)(v83 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
    *(void *)(v83 + 24) = v82;
    uint64_t v86 = swift_allocObject();
    *(void *)(v86 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
    *(void *)(v86 + 24) = v83;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v87 = v17;
    swift_retain();
    *uint64_t v87 = partial apply for closure #1 in OSLogArguments.append(_:);
    v87[1] = v84;
    swift_retain();
    v87[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v87[3] = v85;
    swift_retain();
    v87[4] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v87[5] = v86;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v88, v89))
    {
      uint64_t v72 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v73 = createStorage<A>(capacity:type:)(0);
      uint64_t v74 = createStorage<A>(capacity:type:)(0);
      uint64_t v184 = v72;
      uint64_t v185 = v73;
      uint64_t v186 = v74;
      serialize(_:at:)(0, &v184);
      serialize(_:at:)(1, &v184);
      uint64_t v187 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      unint64_t v188 = v84;
      closure #1 in osLogInternal(_:log:type:)(&v187, (uint64_t)&v184, (uint64_t)&v185, (uint64_t)&v186);
      uint64_t v187 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      unint64_t v188 = v85;
      closure #1 in osLogInternal(_:log:type:)(&v187, (uint64_t)&v184, (uint64_t)&v185, (uint64_t)&v186);
      uint64_t v187 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      unint64_t v188 = v86;
      closure #1 in osLogInternal(_:log:type:)(&v187, (uint64_t)&v184, (uint64_t)&v185, (uint64_t)&v186);
      _os_log_impl(&dword_25DE00000, v88, v89, "Calling writeDoseEvent() for specified name with medStatus: %{BOOL}d", v72, v79);
      destroyStorage<A>(_:count:)(v73, 0, v71);
      destroyStorage<A>(_:count:)(v74, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v72, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    *(void *)(v176 + 1664) = 0;
    uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v176 + 1464);
    uint64_t v65 = *(void *)(v176 + 1352);
    uint64_t v66 = *(void *)(v176 + 1312);
    uint64_t v68 = (uint64_t *)(*(void *)(v176 + 1480) + 16);

    v67(v65, v66);
    swift_beginAccess();
    uint64_t v69 = *v68;
    swift_bridgeObjectRetain();
    swift_endAccess();
    swift_bridgeObjectRetain();
    *(void *)(v176 + 832) = v69;
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    uint64_t v70 = *(id *)(v176 + 824);
    swift_bridgeObjectRelease();
    if (v70)
    {
      uint64_t v64 = objc_msgSend(v70, sel_scheduledDate);
      if (v64)
      {
        uint64_t v61 = *(void *)(v176 + 1264);
        os_log_type_t v62 = *(void *)(v176 + 1224);
        id v63 = *(void *)(v176 + 1208);
        uint64_t v60 = *(void *)(v176 + 1232);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 32))(v63, v61, v62);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v60 + 56))(v63, 0, 1, v62);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v176 + 1232) + 56))(*(void *)(v176 + 1208), 1, 1, *(void *)(v176 + 1224));
      }
      outlined init with take of Date?(*(const void **)(v176 + 1208), *(void **)(v176 + 1216));
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v176 + 1232) + 56))(*(void *)(v176 + 1216), 1, 1, *(void *)(v176 + 1224));
    }
    uint64_t v59 = (*(unsigned int (**)(void, uint64_t, void))(*(void *)(v176 + 1232) + 48))(*(void *)(v176 + 1216), 1, *(void *)(v176 + 1224)) != 1;
    outlined destroy of Date?(*(void *)(v176 + 1216));
    *(unsigned char *)(v176 + 1744) = v59;
    if (v59)
    {
      uint64_t v56 = *(void *)(v176 + 1480);
      swift_beginAccess();
      uint64_t v57 = *(void *)(v56 + 16);
      swift_bridgeObjectRetain();
      swift_endAccess();
      swift_bridgeObjectRetain();
      *(void *)(v176 + 848) = v57;
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      uint64_t v58 = *(void *)(v176 + 840);
      *(void *)(v176 + 1672) = v58;
      if (!v58)
      {
        uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v176 + 1416);
        uint64_t v24 = *(void *)(v176 + 1336);
        uint64_t v49 = *(void *)(v176 + 1312);
        swift_bridgeObjectRelease();
        uint64_t v48 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        v50(v24, v48, v49);
        swift_endAccess();
        uint64_t v53 = Logger.logObject.getter();
        uint64_t v52 = static os_log_type_t.error.getter();
        *(void *)(v176 + 856) = 2;
        UnsignedInteger<>.init<A>(_:)();
        uint64_t v51 = *(_DWORD *)(v176 + 1764);
        uint32_t v54 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v53, v52))
        {
          uint64_t v44 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v45 = createStorage<A>(capacity:type:)(0);
          os_log_type_t v46 = createStorage<A>(capacity:type:)(0);
          *(void *)(v176 + 864) = v44;
          *(void *)(v176 + 872) = v45;
          *(void *)(v176 + 880) = v46;
          serialize(_:at:)(0, (unsigned char **)(v176 + 864));
          serialize(_:at:)(0, (unsigned char **)(v176 + 864));
          *(void *)(v176 + 888) = v54;
          uint64_t v47 = (void *)swift_task_alloc();
          v47[2] = v176 + 864;
          v47[3] = v176 + 872;
          v47[4] = v176 + 880;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_25DE00000, v53, v52, "Should have at least one dose event to start confirmation, but found none. Returning failure.", v44, v51);
          destroyStorage<A>(_:count:)(v45, 0, v43);
          destroyStorage<A>(_:count:)(v46, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](v44, MEMORY[0x263F8E778]);
        }
        swift_bridgeObjectRelease();
        uint32_t v38 = *(void (**)(uint64_t, uint64_t))(v176 + 1464);
        uint64_t v36 = *(void *)(v176 + 1336);
        uint64_t v37 = *(void *)(v176 + 1312);
        uint64_t v40 = *(void *)(v176 + 1304);
        uint64_t v41 = *(void *)(v176 + 1272);
        uint64_t v39 = *(void *)(v176 + 1280);

        v38(v36, v37);
        type metadata accessor for LogSpecificMedicationsIntentResponse();
        uint64_t v42 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v41);
        uint64_t v135 = v42;
        goto LABEL_47;
      }
      uint64_t v55 = *(unsigned char *)(v176 + 634);
      *(void *)(v176 + 896) = v58;
      swift_bridgeObjectRelease();
      uint64_t v18 = (void *)swift_task_alloc();
      *(void *)(v176 + 1680) = v18;
      *uint64_t v18 = *(void *)(v176 + 640);
      v18[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
      uint64_t v19 = *(void *)(v176 + 1200);
      uint64_t v20 = *(void *)(v176 + 1192);
      uint64_t v21 = *(void *)(v176 + 1184);
      uint64_t v22 = *(void *)(v176 + 1176);
      uint64_t v23 = *(void *)(v176 + 1168);
      return SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)(v58, v23, v55 & 1, v22, v21, v20, v19);
    }
    else
    {
      uint64_t v35 = *(unsigned char *)(v176 + 634);
      uint64_t v33 = (uint64_t *)(*(void *)(v176 + 1480) + 16);
      uint64_t v25 = *(id *)(v176 + 1200);
      swift_beginAccess();
      uint64_t v34 = *v33;
      *(void *)(v176 + 1712) = *v33;
      swift_bridgeObjectRetain();
      swift_endAccess();
      uint64_t v26 = (void *)swift_task_alloc();
      *(void *)(v176 + 1720) = v26;
      *uint64_t v26 = *(void *)(v176 + 640);
      v26[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
      uint64_t v27 = *(void *)(v176 + 1200);
      uint64_t v28 = *(void *)(v176 + 1184);
      uint64_t v29 = *(void *)(v176 + 1176);
      uint64_t v30 = *(void *)(v176 + 1168);
      uint64_t v31 = *(unsigned char *)(v176 + 633);
      uint64_t v201 = *(void *)(v176 + 1192);
      uint64_t v202 = v27;
      return SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(v27, v34, v31 & 1, 1, v30, v35 & 1, v29, v28);
    }
  }
}

{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  char *v7;
  uint64_t (*v8)(char *);
  Class isa;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v15 = (id)v0[207];
  uint64_t v16 = (id)v0[205];
  v0[80] = v0;
  v0[124] = v15;
  uint64_t v1 = v15;
  v0[125] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  IndexingIterator.next()();
  uint64_t v18 = *(void *)(v17 + 968);
  *(void *)(v17 + 1640) = v18;
  if (v18)
  {
    *(void *)(v17 + 984) = v18;
    char v2 = (void *)swift_task_alloc();
    *(void *)(v17 + 1648) = v2;
    *char v2 = *(void *)(v17 + 640);
    v2[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    uint64_t v3 = *(void *)(v17 + 1200);
    uint64_t v4 = *(void *)(v17 + 1192);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v18, 1, v4, v3);
  }
  else
  {
    uint64_t v10 = *(id *)(v17 + 1608);
    uint64_t v12 = *(void *)(v17 + 1304);
    unint64_t v13 = *(void *)(v17 + 1272);
    uint64_t v11 = *(void *)(v17 + 1280);
    outlined destroy of [HKQuantityType]();
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v14 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(103, 0);
    uint64_t v6 = v14;
    uint64_t v7 = v14;
    *(void *)(v17 + 976) = v14;
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(char *))(*(void *)(v17 + 640) + 8);
    return v8(v14);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint8_t *buf;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v28;
  NSObject *oslog;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  uint64_t v1 = *(void *)(v0 + 1688);
  *(void *)(v0 + 640) = v0;
  if (v1)
  {
    uint64_t v31 = *(void *)(v32 + 1672);

    char v2 = (void *)swift_task_alloc();
    *(void *)(v32 + 1696) = v2;
    *char v2 = *(void *)(v32 + 640);
    v2[1] = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    uint64_t v3 = *(void *)(v32 + 1200);
    uint64_t v4 = *(void *)(v32 + 1192);
    uint64_t v5 = *(unsigned char *)(v32 + 633) & 1;
    return SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:)(v31, v5, v4, v3);
  }
  else
  {
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 1416);
    uint64_t v7 = *(void *)(v32 + 1344);
    uint64_t v25 = *(void *)(v32 + 1312);
    uint64_t v24 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v26(v7, v24, v25);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    uint64_t v28 = static os_log_type_t.debug.getter();
    *(void *)(v32 + 904) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t size = *(_DWORD *)(v32 + 1768);
    uint64_t v30 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v28))
    {
      uint64_t v8 = *(void *)(v32 + 1664);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v21 = createStorage<A>(capacity:type:)(0);
      uint64_t v22 = createStorage<A>(capacity:type:)(0);
      *(void *)(v32 + 912) = buf;
      *(void *)(v32 + 920) = v21;
      *(void *)(v32 + 928) = v22;
      serialize(_:at:)(0, (unsigned char **)(v32 + 912));
      serialize(_:at:)(0, (unsigned char **)(v32 + 912));
      *(void *)(v32 + 936) = v30;
      uint64_t v23 = (void *)swift_task_alloc();
      v23[2] = v32 + 912;
      v23[3] = v32 + 920;
      v23[4] = v32 + 928;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v8) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, oslog, v28, "Got a complex med request wrt dosage/dosageUnit in first turn, skipping confirmAsScheduled & punching out.", buf, size);
      destroyStorage<A>(_:count:)(v21, 0, v19);
      destroyStorage<A>(_:count:)(v22, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v14 = *(id *)(v32 + 1608);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v32 + 1464);
    uint64_t v10 = *(void *)(v32 + 1344);
    uint64_t v11 = *(void *)(v32 + 1312);
    uint64_t v16 = *(void *)(v32 + 1304);
    uint64_t v17 = *(void *)(v32 + 1272);
    unint64_t v13 = *(id *)(v32 + 1672);
    uint64_t v15 = *(void *)(v32 + 1280);

    v12(v10, v11);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v18 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(112, 0);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(char *))(*(void *)(v32 + 640) + 8);
    return v9(v18);
  }
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(uint64_t);
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v1 = (void *)v0[209];
  uint64_t v4 = (id)v0[201];
  uint64_t v6 = v0[163];
  uint64_t v5 = v0[160];
  uint64_t v7 = v0[159];
  v0[80] = v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  uint64_t v8 = v0[213];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v2 = *(uint64_t (**)(uint64_t))(v0[80] + 8);
  return v2(v8);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v3 = (id)v0[201];
  uint64_t v5 = v0[163];
  uint64_t v4 = v0[160];
  uint64_t v6 = v0[159];
  v0[80] = v0;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  uint64_t v7 = v0[216];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0[80] + 8);
  return v1(v7);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t (*v4)(char *);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint8_t *buf;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v25;
  NSObject *oslog;
  uint64_t v27;
  uint64_t v28;

  uint64_t v20 = *(id *)(v0 + 1536);
  uint64_t v1 = *(void **)(v0 + 1512);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1416);
  char v2 = *(void *)(v0 + 1328);
  uint64_t v22 = *(void *)(v0 + 1312);
  *(void *)(v0 + 640) = v0;

  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  swift_release();
  swift_release();
  uint64_t v3 = v20;
  *(void *)(v0 + 1064) = v20;
  uint64_t v21 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v23(v2, v21, v22);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  uint64_t v25 = static os_log_type_t.error.getter();
  *(void *)(v0 + 1072) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t size = *(_DWORD *)(v0 + 1780);
  uint64_t v27 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v25))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v16 = createStorage<A>(capacity:type:)(0);
    uint64_t v17 = createStorage<A>(capacity:type:)(0);
    *(void *)(v19 + 1080) = buf;
    *(void *)(v19 + 1088) = v16;
    *(void *)(v19 + 1096) = v17;
    serialize(_:at:)(0, (unsigned char **)(v19 + 1080));
    serialize(_:at:)(0, (unsigned char **)(v19 + 1080));
    *(void *)(v19 + 1104) = v27;
    uint64_t v18 = (void *)swift_task_alloc();
    v18[2] = v19 + 1080;
    v18[3] = v19 + 1088;
    v18[4] = v19 + 1096;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, oslog, v25, "Failed fetching dose events for specified timeframe.", buf, size);
    destroyStorage<A>(_:count:)(v16, 0, v14);
    destroyStorage<A>(_:count:)(v17, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(id *)(v19 + 1536);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v19 + 1464);
  uint64_t v6 = *(void *)(v19 + 1328);
  uint64_t v7 = *(void *)(v19 + 1312);
  uint64_t v11 = *(void *)(v19 + 1304);
  uint64_t v12 = *(void *)(v19 + 1272);
  uint64_t v10 = *(void *)(v19 + 1280);

  v8(v6, v7);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  unint64_t v13 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(char *))(*(void *)(v19 + 640) + 8);
  return v4(v13);
}

uint64_t SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)(uint64_t a1)
{
  uint64_t v6 = (void *)*v2;
  uint64_t v5 = *v2 + 16;
  v6[80] = *v2;
  v6[191] = a1;
  v6[192] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
  }
  else
  {

    uint64_t v3 = SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 640) = *v1;
  *(void *)(v3 + 1600) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 640) = *v1;
  *(void *)(v3 + 1656) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 640) = *v1;
  *(void *)(v3 + 1688) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 640) = *v1;
  *(void *)(v3 + 1704) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:), 0);
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  uint64_t v3 = *(void **)(*v1 + 1200);
  *(void *)(v4 + 640) = *v1;
  *(void *)(v4 + 1728) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:), 0);
}

uint64_t SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 280) = v24;
  *(void *)(v8 + 272) = v23;
  *(void *)(v8 + 264) = v22;
  *(void *)(v8 + 256) = v21;
  *(unsigned char *)(v8 + 115) = v20;
  *(void *)(v8 + 248) = a8;
  *(void *)(v8 + 240) = a7;
  *(void *)(v8 + 232) = a6;
  *(unsigned char *)(v8 + 114) = a5;
  *(void *)(v8 + 224) = a4;
  *(unsigned char *)(v8 + 113) = a3 & 1;
  *(void *)(v8 + 216) = a2;
  *(void *)(v8 + 208) = a1;
  *(void *)(v8 + 136) = v8;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 48) = 0;
  *(unsigned char *)(v8 + 368) = 0;
  *(void *)(v8 + 104) = 0;
  *(unsigned char *)(v8 + 112) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 120) = 0;
  *(unsigned char *)(v8 + 128) = 0;
  *(void *)(v8 + 72) = 0;
  *(void *)(v8 + 80) = 0;
  *(void *)(v8 + 88) = 0;
  *(void *)(v8 + 96) = 0;
  *(void *)(v8 + 152) = 0;
  *(void *)(v8 + 168) = 0;
  uint64_t v11 = type metadata accessor for Logger();
  *(void *)(v8 + 288) = v11;
  *(void *)(v8 + 296) = *(void *)(v11 - 8);
  *(void *)(v8 + 304) = swift_task_alloc();
  *(void *)(v8 + 40) = a1;
  *(void *)(v8 + 48) = a2;
  *(unsigned char *)(v8 + 368) = a3 & 1;
  *(void *)(v8 + 104) = a4;
  *(unsigned char *)(v8 + 112) = a5 & 1;
  *(void *)(v8 + 56) = a6;
  *(void *)(v8 + 64) = a7;
  *(void *)(v8 + 120) = a8;
  *(unsigned char *)(v8 + 128) = v20 & 1;
  *(void *)(v8 + 72) = v21;
  *(void *)(v8 + 80) = v22;
  *(void *)(v8 + 88) = v23;
  *(void *)(v8 + 96) = v24;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:), 0);
}

uint64_t SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v24 = *(void *)(v0 + 296);
  uint64_t v26 = *(void *)(v0 + 288);
  *(void *)(v0 + 136) = v0;
  uint64_t v25 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v1, v25, v26);
  swift_endAccess();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 144) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v27 = *(unsigned int *)(v0 + 116);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v30 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v29, v28))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v20 = createStorage<A>(capacity:type:)(0);
    uint64_t v21 = createStorage<A>(capacity:type:)(0);
    *(void *)(v23 + 176) = buf;
    *(void *)(v23 + 184) = v20;
    *(void *)(v23 + 192) = v21;
    serialize(_:at:)(0, (unsigned char **)(v23 + 176));
    serialize(_:at:)(0, (unsigned char **)(v23 + 176));
    *(void *)(v23 + 200) = v30;
    uint64_t v22 = (void *)swift_task_alloc();
    v22[2] = v23 + 176;
    v22[3] = v23 + 184;
    v22[4] = v23 + 192;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v29, v28, "Starting to save As Needed Medication whose strength we know post-disambiguation", buf, v27);
    destroyStorage<A>(_:count:)(v20, 0, v18);
    destroyStorage<A>(_:count:)(v21, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  *(void *)(v23 + 312) = 0;
  uint64_t v11 = *(void *)(v23 + 304);
  uint64_t v12 = *(void *)(v23 + 288);
  char v17 = *(unsigned char *)(v23 + 115);
  uint64_t v16 = *(void *)(v23 + 216);
  uint64_t v14 = *(void *)(v23 + 208);
  uint64_t v10 = *(void *)(v23 + 296);

  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v11, v12);
  uint64_t v13 = _allocateUninitializedArray<A>(_:)();
  uint64_t v15 = v2;
  swift_bridgeObjectRetain();
  *uint64_t v15 = v14;
  v15[1] = v16;
  _finalizeUninitializedArray<A>(_:)();
  *(void *)(v23 + 320) = v13;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v23 + 328) = v3;
  void *v3 = *(void *)(v23 + 136);
  v3[1] = SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:);
  uint64_t v4 = *(void *)(v23 + 280);
  uint64_t v5 = *(void *)(v23 + 272);
  uint64_t v6 = *(void *)(v23 + 264);
  uint64_t v7 = *(void *)(v23 + 256);
  uint64_t v8 = *(void *)(v23 + 248);
  return SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(v13, v8, v17 & 1, v7, v6, 0, v5, v4);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  uint64_t v1 = v0[42];
  char v2 = v0[39];
  v0[17] = v0;
  v0[19] = v1;
  v0[20] = v1;
  uint64_t v15 = swift_task_alloc();
  *(void *)(v15 + 16) = -1;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  char v17 = type metadata accessor for HKMedicationExposableDoseEvent();
  uint64_t v3 = lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:), v15, v16, v17, MEMORY[0x263F8E628], v3, MEMORY[0x263F8E658], v18);
  uint64_t v19 = result;
  v0[43] = result;
  if (!v2)
  {
    uint64_t v12 = *(id *)(v14 + 280);
    uint64_t v13 = *(unsigned char *)(v14 + 114);
    swift_task_dealloc();
    *(void *)(v14 + 168) = v19;
    uint64_t v5 = v12;
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v14 + 352) = v6;
    void *v6 = *(void *)(v14 + 136);
    v6[1] = SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:);
    uint64_t v7 = *(void *)(v14 + 280);
    uint64_t v8 = *(void *)(v14 + 240);
    uint64_t v9 = *(void *)(v14 + 232);
    uint64_t v10 = *(void *)(v14 + 224);
    uint64_t v11 = *(unsigned char *)(v14 + 113) & 1;
    return SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(v7, v19, v11, 1, v10, v13 & 1, v9, v8);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v4;

  *(void *)(v0 + 136) = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 136) + 8);
  char v2 = *(void *)(v0 + 360);
  return v1(v2);
}

uint64_t SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 136) = *v1;
  *(void *)(v3 + 336) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:), 0);
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  uint64_t v3 = *(void **)(*v1 + 280);
  *(void *)(v4 + 136) = *v1;
  *(void *)(v4 + 360) = a1;
  swift_task_dealloc();

  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:), 0);
}

uint64_t SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 256) = a8;
  *(void *)(v8 + 248) = a7;
  *(unsigned char *)(v8 + 130) = a6 & 1;
  *(void *)(v8 + 240) = a5;
  *(void *)(v8 + 232) = a4;
  *(unsigned char *)(v8 + 129) = a3;
  *(void *)(v8 + 224) = a2;
  *(void *)(v8 + 216) = a1;
  *(void *)(v8 + 136) = v8;
  *(void *)(v8 + 144) = 0;
  *(void *)(v8 + 120) = 0;
  *(unsigned char *)(v8 + 128) = 0;
  *(void *)(v8 + 88) = 0;
  *(void *)(v8 + 96) = 0;
  *(unsigned char *)(v8 + 392) = 0;
  *(void *)(v8 + 104) = 0;
  *(void *)(v8 + 112) = 0;
  *(void *)(v8 + 160) = 0;
  *(void *)(v8 + 200) = 0;
  uint64_t v9 = type metadata accessor for Logger();
  *(void *)(v8 + 264) = v9;
  *(void *)(v8 + 272) = *(void *)(v9 - 8);
  *(void *)(v8 + 280) = swift_task_alloc();
  *(void *)(v8 + 288) = swift_task_alloc();
  *(void *)(v8 + 296) = swift_task_alloc();
  *(void *)(v8 + 144) = a1;
  *(void *)(v8 + 120) = a2;
  *(unsigned char *)(v8 + 128) = a3 & 1;
  *(void *)(v8 + 88) = a4;
  *(void *)(v8 + 96) = a5;
  *(unsigned char *)(v8 + 392) = a6 & 1;
  *(void *)(v8 + 104) = a7;
  *(void *)(v8 + 112) = a8;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:), 0);
}

uint64_t SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)()
{
  uint64_t v36 = v0;
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v17 = *(void *)(v0 + 272);
  uint64_t v19 = *(void *)(v0 + 264);
  uint64_t v20 = *(void *)(v0 + 216);
  *(void *)(v0 + 136) = v0;
  uint64_t v18 = Logger.wellness.unsafeMutableAddressor();
  swift_beginAccess();
  char v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
  *(void *)(v0 + 304) = v2;
  *(void *)(v0 + 312) = (v17 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v2(v1, v18, v19);
  swift_endAccess();
  swift_bridgeObjectRetain();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v20;
  swift_retain();
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = partial apply for implicit closure #3 in getPreferredUnit(for:store:);
  *(void *)(v23 + 24) = v21;
  swift_release();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 152) = 12;
  *(void *)(v0 + 320) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 328) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 336) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 132);
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = 32;
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = 8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  *(void *)(v24 + 24) = v23;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v27 + 24) = v24;
  *(void *)(v0 + 344) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  os_log_type_t v28 = v3;
  swift_retain();
  *os_log_type_t v28 = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[1] = v25;
  swift_retain();
  void v28[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[3] = v26;
  swift_retain();
  v28[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[5] = v27;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v29, v30))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v14 = createStorage<A>(capacity:type:)(0);
    uint64_t v15 = createStorage<A>(capacity:type:)(1);
    uint64_t v31 = buf;
    uint64_t v32 = v14;
    uint64_t v33 = v15;
    serialize(_:at:)(2, &v31);
    serialize(_:at:)(1, &v31);
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v35 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v34, (uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v33);
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v35 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v34, (uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v33);
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v35 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v34, (uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v33);
    _os_log_impl(&dword_25DE00000, v29, v30, "Attempting to getMedicationsMatching for medicationIDs: %s", buf, size);
    destroyStorage<A>(_:count:)(v14, 0, v12);
    destroyStorage<A>(_:count:)(v15, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v10 = v16[37];
  uint64_t v11 = v16[33];
  uint64_t v9 = v16[34];

  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v16[44] = v4;
  v16[45] = (v9 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v4(v10, v11);
  uint64_t v5 = (void *)swift_task_alloc();
  v16[46] = v5;
  *uint64_t v5 = v16[17];
  v5[1] = SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:);
  uint64_t v6 = v16[32];
  uint64_t v7 = v16[31];
  return SpecificMedicationsPersistor.doUTCQueryForMedications()(v7, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint8_t *buf;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  NSObject *oslog;
  os_log_type_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  void *v42;
  uint64_t v43;

  uint64_t v42 = v0;
  uint64_t v1 = v0[48];
  char v2 = v0[47];
  uint64_t v35 = v0[27];
  v0[17] = v0;
  v0[22] = v2;
  swift_bridgeObjectRetain();
  *(void *)(swift_task_alloc() + 16) = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
  uint64_t result = _ArrayProtocol.filter(_:)();
  uint64_t v36 = result;
  if (!v1)
  {
    uint64_t v32 = *(unsigned char *)(v34 + 130);
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    *(void *)(v34 + 184) = v36;
    *(unsigned char *)(swift_task_alloc() + 16) = v32 & 1;
    uint64_t v33 = _ArrayProtocol.filter(_:)();
    uint64_t v29 = *(void *)(v34 + 240);
    os_log_type_t v28 = *(void *)(v34 + 232);
    uint64_t v27 = *(unsigned char *)(v34 + 129);
    uint64_t v26 = *(void *)(v34 + 224);
    swift_task_dealloc();
    *(void *)(v34 + 192) = v33;
    swift_bridgeObjectRetain();
    os_log_type_t v30 = swift_task_alloc();
    *(void *)(v30 + 16) = v26;
    *(unsigned char *)(v30 + 24) = v27 & 1;
    *(void *)(v30 + 32) = v28;
    *(void *)(v30 + 40) = v29;
    uint64_t v31 = _ArrayProtocol.filter(_:)();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 304);
    uint64_t v4 = *(void *)(v34 + 288);
    uint64_t v15 = *(void *)(v34 + 264);
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    *(void *)(v34 + 200) = v31;
    uint64_t v14 = Logger.wellness.unsafeMutableAddressor();
    swift_beginAccess();
    v16(v4, v14, v15);
    swift_endAccess();
    swift_bridgeObjectRetain();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v31;
    oslog = Logger.logObject.getter();
    uint64_t v25 = static os_log_type_t.debug.getter();
    *(void *)(v34 + 208) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v34 + 400);
    uint64_t v20 = swift_allocObject();
    *(unsigned char *)(v20 + 16) = 0;
    uint64_t v21 = swift_allocObject();
    *(unsigned char *)(v21 + 16) = 8;
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:);
    *(void *)(v19 + 24) = v18;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(void *)(v22 + 24) = v19;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v23 = v5;
    swift_retain();
    *uint64_t v23 = partial apply for closure #1 in OSLogArguments.append(_:);
    v23[1] = v20;
    swift_retain();
    v23[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v23[3] = v21;
    swift_retain();
    v23[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v23[5] = v22;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v25))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v12 = createStorage<A>(capacity:type:)(0);
      uint64_t v13 = createStorage<A>(capacity:type:)(0);
      uint64_t v37 = buf;
      uint32_t v38 = v12;
      uint64_t v39 = v13;
      serialize(_:at:)(0, &v37);
      serialize(_:at:)(1, &v37);
      uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v41 = v20;
      closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
      uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v41 = v21;
      closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
      uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      uint64_t v41 = v22;
      closure #1 in osLogInternal(_:log:type:)(&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
      _os_log_impl(&dword_25DE00000, oslog, v25, "got matchingUserTrackedMeds: %ld", buf, size);
      destroyStorage<A>(_:count:)(v12, 0, v10);
      destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v34 + 352);
    uint64_t v7 = *(void *)(v34 + 288);
    uint64_t v8 = *(void *)(v34 + 264);

    v9(v7, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)(v34 + 136) + 8);
    return v6(v31);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *buf;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  id v20;
  uint32_t size;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  uint64_t v36 = v0;
  uint64_t v20 = *(id *)(v0 + 384);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 304);
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v18 = *(void *)(v0 + 264);
  *(void *)(v0 + 136) = v0;
  char v2 = v20;
  *(void *)(v0 + 160) = v20;
  uint64_t v17 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v19(v1, v17, v18);
  swift_endAccess();
  uint64_t v3 = v20;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v20;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.error.getter();
  *(void *)(v0 + 168) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 396);
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = 64;
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = 8;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(void *)(v23 + 24) = v22;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(void *)(v24 + 24) = v23;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v27 + 24) = v24;
  _allocateUninitializedArray<A>(_:)();
  os_log_type_t v28 = v4;
  swift_retain();
  *os_log_type_t v28 = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[1] = v25;
  swift_retain();
  void v28[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[3] = v26;
  swift_retain();
  v28[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[5] = v27;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v29, v30))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v14 = createStorage<A>(capacity:type:)(1);
    uint64_t v15 = createStorage<A>(capacity:type:)(0);
    uint64_t v31 = buf;
    uint64_t v32 = v14;
    uint64_t v33 = v15;
    serialize(_:at:)(2, &v31);
    serialize(_:at:)(1, &v31);
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v35 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v34, (uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v33);
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v35 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v34, (uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v33);
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v35 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v34, (uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v33);
    _os_log_impl(&dword_25DE00000, v29, v30, "Error doing UTC Query for Medications: %@", buf, size);
    destroyStorage<A>(_:count:)(v14, 1, v12);
    destroyStorage<A>(_:count:)(v15, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v10 = (id)v16[48];
  uint64_t v9 = (void (*)(uint64_t, uint64_t))v16[44];
  uint64_t v7 = v16[35];
  uint64_t v8 = v16[33];

  v9(v7, v8);
  type metadata accessor for HKUserTrackedMedication();
  uint64_t v11 = _allocateUninitializedArray<A>(_:)();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v16[17] + 8);
  return v5(v11);
}

uint64_t SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[17] = *v2;
  v5[47] = a1;
  v5[48] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:);
  }
  else
  {
    uint64_t v3 = SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

id closure #1 in SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)@<X0>(uint64_t *a1@<X0>, Swift::Int a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  id v6 = self;
  type metadata accessor for NSNumber();
  Class isa = NSNumber.__allocating_init(value:)(a2).super.super.isa;
  id v8 = objc_msgSend(v6, sel_asNeededExposableDoseEventForMedication_doseQuantity_, v5);

  id result = v8;
  *a3 = v8;
  return result;
}

NSNumber __swiftcall NSNumber.__allocating_init(value:)(Swift::Int value)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSNumber)@nonobjc NSNumber.init(value:)(value);
}

uint64_t SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 1080) = v22;
  *(void *)(v8 + 1072) = v21;
  *(void *)(v8 + 1064) = a8;
  *(void *)(v8 + 1056) = a7;
  *(unsigned char *)(v8 + 531) = a6;
  *(void *)(v8 + 1048) = a5;
  *(unsigned char *)(v8 + 530) = a4 & 1;
  *(unsigned char *)(v8 + 529) = a3 & 1;
  *(void *)(v8 + 1040) = a2;
  *(void *)(v8 + 1032) = a1;
  *(void *)(v8 + 536) = v8;
  *(void *)(v8 + 544) = 0;
  *(void *)(v8 + 552) = 0;
  *(unsigned char *)(v8 + 1480) = 0;
  *(unsigned char *)(v8 + 1488) = 0;
  *(void *)(v8 + 520) = 0;
  *(unsigned char *)(v8 + 528) = 0;
  *(void *)(v8 + 360) = 0;
  *(void *)(v8 + 368) = 0;
  *(void *)(v8 + 376) = 0;
  *(void *)(v8 + 384) = 0;
  *(void *)(v8 + 568) = 0;
  *(void *)(v8 + 576) = 0;
  *(void *)(v8 + 392) = 0;
  *(void *)(v8 + 400) = 0;
  *(void *)(v8 + 608) = 0;
  *(void *)(v8 + 656) = 0;
  *(void *)(v8 + 664) = 0;
  *(void *)(v8 + 408) = 0;
  *(void *)(v8 + 416) = 0;
  *(void *)(v8 + 704) = 0;
  *(void *)(v8 + 424) = 0;
  *(void *)(v8 + 432) = 0;
  *(void *)(v8 + 728) = 0;
  *(void *)(v8 + 736) = 0;
  *(void *)(v8 + 752) = 0;
  *(void *)(v8 + 472) = 0;
  *(void *)(v8 + 480) = 0;
  *(void *)(v8 + 792) = 0;
  *(void *)(v8 + 800) = 0;
  *(void *)(v8 + 816) = 0;
  *(void *)(v8 + 872) = 0;
  *(void *)(v8 + 896) = 0;
  *(void *)(v8 + 904) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v8 + 1088) = swift_task_alloc();
  *(void *)(v8 + 1096) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Date();
  *(void *)(v8 + 1104) = v10;
  *(void *)(v8 + 1112) = *(void *)(v10 - 8);
  *(void *)(v8 + 1120) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Logger();
  *(void *)(v8 + 1128) = v11;
  *(void *)(v8 + 1136) = *(void *)(v11 - 8);
  *(void *)(v8 + 1144) = swift_task_alloc();
  *(void *)(v8 + 1152) = swift_task_alloc();
  *(void *)(v8 + 1160) = swift_task_alloc();
  *(void *)(v8 + 1168) = swift_task_alloc();
  *(void *)(v8 + 1176) = swift_task_alloc();
  *(void *)(v8 + 1184) = swift_task_alloc();
  *(void *)(v8 + 1192) = swift_task_alloc();
  *(void *)(v8 + 544) = a1;
  *(void *)(v8 + 552) = a2;
  *(unsigned char *)(v8 + 1480) = a3 & 1;
  *(unsigned char *)(v8 + 1488) = a4 & 1;
  *(void *)(v8 + 520) = a5;
  *(unsigned char *)(v8 + 528) = a6 & 1;
  *(void *)(v8 + 360) = a7;
  *(void *)(v8 + 368) = a8;
  *(void *)(v8 + 376) = v21;
  *(void *)(v8 + 384) = v22;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:), 0);
}

uint64_t SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)()
{
  uint64_t v115 = v0;
  uint64_t v1 = *(void *)(v0 + 1192);
  uint64_t v84 = *(void *)(v0 + 1136);
  uint64_t v86 = *(void *)(v0 + 1128);
  uint64_t v90 = *(void *)(v0 + 1064);
  uint64_t v89 = *(void *)(v0 + 1056);
  char v88 = *(unsigned char *)(v0 + 531);
  uint64_t v87 = *(void *)(v0 + 1048);
  *(void *)(v0 + 536) = v0;
  uint64_t v85 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  char v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 16);
  *(void *)(v0 + 1200) = v2;
  *(void *)(v0 + 1208) = (v84 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v2(v1, v85, v86);
  swift_endAccess();
  uint64_t v92 = swift_allocObject();
  *(void *)(v92 + 16) = v87;
  *(unsigned char *)(v92 + 24) = v88 & 1;
  swift_bridgeObjectRetain();
  uint64_t v94 = swift_allocObject();
  *(void *)(v94 + 16) = v89;
  *(void *)(v94 + 24) = v90;
  uint64_t v103 = Logger.logObject.getter();
  os_log_type_t v104 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 560) = 22;
  *(void *)(v0 + 1216) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 1224) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 1232) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 532);
  uint64_t v96 = swift_allocObject();
  *(unsigned char *)(v96 + 16) = 32;
  uint64_t v97 = swift_allocObject();
  *(unsigned char *)(v97 + 16) = 8;
  uint64_t v93 = swift_allocObject();
  *(void *)(v93 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(void *)(v93 + 24) = v92;
  uint64_t v98 = swift_allocObject();
  *(void *)(v98 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v98 + 24) = v93;
  uint64_t v99 = swift_allocObject();
  *(unsigned char *)(v99 + 16) = 32;
  uint64_t v100 = swift_allocObject();
  *(unsigned char *)(v100 + 16) = 8;
  uint64_t v95 = swift_allocObject();
  *(void *)(v95 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(void *)(v95 + 24) = v94;
  uint64_t v101 = swift_allocObject();
  *(void *)(v101 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v101 + 24) = v95;
  *(void *)(v0 + 1240) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v102 = v3;
  swift_retain();
  void *v102 = partial apply for closure #1 in OSLogArguments.append(_:);
  v102[1] = v96;
  swift_retain();
  v102[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v102[3] = v97;
  swift_retain();
  v102[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v102[5] = v98;
  swift_retain();
  v102[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v102[7] = v99;
  swift_retain();
  v102[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v102[9] = v100;
  swift_retain();
  v102[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v102[11] = v101;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v103, v104))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v81 = createStorage<A>(capacity:type:)(0);
    uint64_t v82 = createStorage<A>(capacity:type:)(2);
    uint64_t v110 = buf;
    uint64_t v111 = v81;
    uint64_t v112 = v82;
    serialize(_:at:)(2, &v110);
    serialize(_:at:)(2, &v110);
    os_log_type_t v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v114 = v96;
    closure #1 in osLogInternal(_:log:type:)(&v113, (uint64_t)&v110, (uint64_t)&v111, (uint64_t)&v112);
    os_log_type_t v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v114 = v97;
    closure #1 in osLogInternal(_:log:type:)(&v113, (uint64_t)&v110, (uint64_t)&v111, (uint64_t)&v112);
    os_log_type_t v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v114 = v98;
    closure #1 in osLogInternal(_:log:type:)(&v113, (uint64_t)&v110, (uint64_t)&v111, (uint64_t)&v112);
    os_log_type_t v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v114 = v99;
    closure #1 in osLogInternal(_:log:type:)(&v113, (uint64_t)&v110, (uint64_t)&v111, (uint64_t)&v112);
    os_log_type_t v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v114 = v100;
    closure #1 in osLogInternal(_:log:type:)(&v113, (uint64_t)&v110, (uint64_t)&v111, (uint64_t)&v112);
    os_log_type_t v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v114 = v101;
    closure #1 in osLogInternal(_:log:type:)(&v113, (uint64_t)&v110, (uint64_t)&v111, (uint64_t)&v112);
    _os_log_impl(&dword_25DE00000, v103, v104, "Starting to write dose event: dosage (%s), dosageUnit (%s)", buf, size);
    destroyStorage<A>(_:count:)(v81, 0, v79);
    destroyStorage<A>(_:count:)(v82, 2, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v75 = *(void *)(v83 + 1192);
  uint64_t v76 = *(void *)(v83 + 1128);
  char v77 = *(unsigned char *)(v83 + 529);
  uint64_t v74 = *(void *)(v83 + 1136);

  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
  *(void *)(v83 + 1248) = v4;
  *(void *)(v83 + 1256) = (v74 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v4(v75, v76);
  if (v77) {
    uint64_t v73 = 4;
  }
  else {
    uint64_t v73 = 5;
  }
  *(void *)(v83 + 1264) = v73;
  uint64_t v71 = *(void *)(v83 + 1040);
  *(void *)(v83 + 568) = v73;
  *(void *)(v83 + 1272) = type metadata accessor for HKMedicationExposableDoseEvent();
  *(void *)(v83 + 576) = _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  *(void *)(v83 + 584) = v71;
  *(void *)(v83 + 1280) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  *(void *)(v83 + 1288) = lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection<>.makeIterator()();
  *(void *)(v83 + 1296) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  uint64_t v72 = *(void **)(v83 + 592);
  *(void *)(v83 + 1304) = v72;
  if (v72)
  {
    uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 1200);
    uint64_t v5 = *(void *)(v83 + 1184);
    uint64_t v50 = *(void *)(v83 + 1128);
    *(void *)(v83 + 816) = v72;
    uint64_t v49 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v51(v5, v49, v50);
    swift_endAccess();
    id v6 = v72;
    uint64_t v53 = swift_allocObject();
    *(void *)(v53 + 16) = v72;
    id v7 = v72;
    uint64_t v55 = swift_allocObject();
    *(void *)(v55 + 16) = v72;
    id v8 = v72;
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = v72;
    oslog = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.debug.getter();
    *(void *)(v83 + 824) = 32;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v52 = *(_DWORD *)(v83 + 1496);
    uint64_t v59 = swift_allocObject();
    *(unsigned char *)(v59 + 16) = 32;
    uint64_t v60 = swift_allocObject();
    *(unsigned char *)(v60 + 16) = 8;
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = partial apply for implicit closure #3 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(void *)(v54 + 24) = v53;
    uint64_t v61 = swift_allocObject();
    *(void *)(v61 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v61 + 24) = v54;
    uint64_t v62 = swift_allocObject();
    *(unsigned char *)(v62 + 16) = 32;
    uint64_t v63 = swift_allocObject();
    *(unsigned char *)(v63 + 16) = 8;
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(void *)(v56 + 24) = v55;
    uint64_t v64 = swift_allocObject();
    *(void *)(v64 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v64 + 24) = v56;
    uint64_t v65 = swift_allocObject();
    *(unsigned char *)(v65 + 16) = 32;
    uint64_t v66 = swift_allocObject();
    *(unsigned char *)(v66 + 16) = 8;
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = partial apply for implicit closure #5 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(void *)(v58 + 24) = v57;
    uint64_t v67 = swift_allocObject();
    *(void *)(v67 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v67 + 24) = v58;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v68 = v9;
    swift_retain();
    void *v68 = partial apply for closure #1 in OSLogArguments.append(_:);
    v68[1] = v59;
    swift_retain();
    v68[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v68[3] = v60;
    swift_retain();
    v68[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v68[5] = v61;
    swift_retain();
    v68[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v68[7] = v62;
    swift_retain();
    v68[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v68[9] = v63;
    swift_retain();
    v68[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v68[11] = v64;
    swift_retain();
    v68[12] = partial apply for closure #1 in OSLogArguments.append(_:);
    v68[13] = v65;
    swift_retain();
    v68[14] = partial apply for closure #1 in OSLogArguments.append(_:);
    v68[15] = v66;
    swift_retain();
    v68[16] = partial apply for closure #1 in OSLogArguments.append(_:);
    v68[17] = v67;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v70))
    {
      os_log_type_t v46 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v47 = createStorage<A>(capacity:type:)(0);
      uint64_t v48 = createStorage<A>(capacity:type:)(3);
      *(void *)(v83 + 1008) = v46;
      *(void *)(v83 + 1016) = v47;
      *(void *)(v83 + 1024) = v48;
      serialize(_:at:)(2, (unsigned char **)(v83 + 1008));
      serialize(_:at:)(3, (unsigned char **)(v83 + 1008));
      *(void *)(v83 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v83 + 512) = v59;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 504), v83 + 1008, v83 + 1016, v83 + 1024);
      *(void *)(v83 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v83 + 512) = v60;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 504), v83 + 1008, v83 + 1016, v83 + 1024);
      *(void *)(v83 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v83 + 512) = v61;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 504), v83 + 1008, v83 + 1016, v83 + 1024);
      *(void *)(v83 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v83 + 512) = v62;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 504), v83 + 1008, v83 + 1016, v83 + 1024);
      *(void *)(v83 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v83 + 512) = v63;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 504), v83 + 1008, v83 + 1016, v83 + 1024);
      *(void *)(v83 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v83 + 512) = v64;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 504), v83 + 1008, v83 + 1016, v83 + 1024);
      *(void *)(v83 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v83 + 512) = v65;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 504), v83 + 1008, v83 + 1016, v83 + 1024);
      *(void *)(v83 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v83 + 512) = v66;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 504), v83 + 1008, v83 + 1016, v83 + 1024);
      *(void *)(v83 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v83 + 512) = v67;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 504), v83 + 1008, v83 + 1016, v83 + 1024);
      _os_log_impl(&dword_25DE00000, oslog, v70, "in writeDoseEvent(), started with a doseEvent w/ dosage: (%s), scheduledDosage: (%s), logOrigin: (%s)", v46, v52);
      destroyStorage<A>(_:count:)(v47, 0, v45);
      destroyStorage<A>(_:count:)(v48, 3, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v46, MEMORY[0x263F8E778]);
    }
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    *(void *)(v83 + 1312) = 0;
    uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v83 + 1248);
    uint64_t v41 = *(void *)(v83 + 1184);
    uint64_t v42 = *(void *)(v83 + 1128);
    char v44 = *(unsigned char *)(v83 + 531);

    v43(v41, v42);
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v83 + 1320) = v10;
    void *v10 = *(void *)(v83 + 536);
    v10[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    uint64_t v11 = *(void *)(v83 + 1080);
    uint64_t v12 = *(void *)(v83 + 1072);
    uint64_t v13 = *(void *)(v83 + 1064);
    uint64_t v14 = *(void *)(v83 + 1056);
    uint64_t v15 = *(void *)(v83 + 1048);
    return SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)((uint64_t)v72, v15, v44 & 1, v14, v13, v12, v11);
  }
  else
  {
    os_log_type_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 1200);
    uint64_t v17 = *(void *)(v83 + 1152);
    uint64_t v29 = *(void *)(v83 + 1128);
    outlined destroy of [HKQuantityType]();
    uint64_t v28 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v30(v17, v28, v29);
    swift_endAccess();
    uint64_t v31 = *(void *)(v83 + 576);
    swift_bridgeObjectRetain();
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v31;
    log = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    *(void *)(v83 + 600) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v32 = *(_DWORD *)(v83 + 1484);
    uint64_t v35 = swift_allocObject();
    *(unsigned char *)(v35 + 16) = 0;
    uint64_t v36 = swift_allocObject();
    *(unsigned char *)(v36 + 16) = 8;
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = partial apply for specialized implicit closure #10 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(void *)(v34 + 24) = v33;
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(void *)(v37 + 24) = v34;
    _allocateUninitializedArray<A>(_:)();
    uint32_t v38 = v18;
    swift_retain();
    *uint32_t v38 = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[1] = v35;
    swift_retain();
    v38[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v38[3] = v36;
    swift_retain();
    v38[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v38[5] = v37;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v40))
    {
      uint64_t v25 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v26 = createStorage<A>(capacity:type:)(0);
      uint64_t v27 = createStorage<A>(capacity:type:)(0);
      uint64_t v105 = v25;
      uint64_t v106 = v26;
      uint64_t v107 = v27;
      serialize(_:at:)(0, &v105);
      serialize(_:at:)(1, &v105);
      uint64_t v108 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v109 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v108, (uint64_t)&v105, (uint64_t)&v106, (uint64_t)&v107);
      uint64_t v108 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v109 = v36;
      closure #1 in osLogInternal(_:log:type:)(&v108, (uint64_t)&v105, (uint64_t)&v106, (uint64_t)&v107);
      uint64_t v108 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      uint64_t v109 = v37;
      closure #1 in osLogInternal(_:log:type:)(&v108, (uint64_t)&v105, (uint64_t)&v106, (uint64_t)&v107);
      _os_log_impl(&dword_25DE00000, log, v40, "writeDoseEvent() - added %ld doseEvents to updatedDoseEvents", v25, v32);
      destroyStorage<A>(_:count:)(v26, 0, v24);
      destroyStorage<A>(_:count:)(v27, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v25, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v83 + 1248);
    uint64_t v19 = *(void *)(v83 + 1152);
    uint64_t v20 = *(void *)(v83 + 1128);
    id v23 = *(id *)(v83 + 1032);

    v21(v19, v20);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_endAccess();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    *(void *)(v83 + 1336) = isa;
    swift_bridgeObjectRelease();
    *(void *)(v83 + 16) = *(void *)(v83 + 536);
    *(void *)(v83 + 56) = v78;
    *(void *)(v83 + 24) = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(void *)(v83 + 112) = swift_continuation_init();
    *(void *)(v83 + 80) = MEMORY[0x263EF8330];
    *(_DWORD *)(v83 + 88) = 0x40000000;
    *(_DWORD *)(v83 + 92) = 0;
    *(void *)(v83 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) @Sendable (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
    *(void *)(v83 + 104) = &block_descriptor_2;
    objc_msgSend(v23, sel_writeDoseEvents_completion_, isa);
    return __swift_continuation_await_point();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t (*v27)(char *);
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  Class v31;
  id v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint32_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  id v53;
  char *v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint32_t v63;
  os_log_type_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  Class isa;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t, uint64_t);
  id v85;
  void *v86;
  uint32_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  NSObject *v104;
  os_log_type_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  id v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t, uint64_t);
  uint32_t v120;
  os_log_type_t v121;
  NSObject *log;
  uint64_t v123;
  id v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint8_t *buf;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  NSObject *oslog;
  os_log_type_t v157;
  uint64_t v158;
  uint8_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t (*v162)(uint64_t, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;

  uint64_t v164 = v0;
  uint64_t v1 = *(void *)(v0 + 1328);
  *(void *)(v0 + 536) = v0;
  if (!v1)
  {
    uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v158 + 1200);
    id v23 = *(void *)(v158 + 1160);
    uint64_t v61 = *(void *)(v158 + 1128);
    uint64_t v60 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v62(v23, v60, v61);
    swift_endAccess();
    uint64_t v65 = Logger.logObject.getter();
    uint64_t v64 = static os_log_type_t.error.getter();
    *(void *)(v158 + 832) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v63 = *(_DWORD *)(v158 + 1500);
    uint64_t v66 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v65, v64))
    {
      uint64_t v24 = *(void *)(v158 + 1312);
      uint64_t v56 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v57 = createStorage<A>(capacity:type:)(0);
      uint64_t v58 = createStorage<A>(capacity:type:)(0);
      *(void *)(v158 + 840) = v56;
      *(void *)(v158 + 848) = v57;
      *(void *)(v158 + 856) = v58;
      serialize(_:at:)(0, (unsigned char **)(v158 + 840));
      serialize(_:at:)(0, (unsigned char **)(v158 + 840));
      *(void *)(v158 + 864) = v66;
      uint64_t v59 = (void *)swift_task_alloc();
      v59[2] = v158 + 840;
      void v59[3] = v158 + 848;
      v59[4] = v158 + 856;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      id result = Sequence.forEach(_:)();
      if (v24) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v65, v64, "in writeDoseEvent, got complex dosage logging error, returning .gotComplexDosageLoggingError.", v56, v63);
      destroyStorage<A>(_:count:)(v57, 0, v55);
      destroyStorage<A>(_:count:)(v58, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v56, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint32_t v52 = *(void (**)(uint64_t, uint64_t))(v158 + 1248);
    uint64_t v50 = *(void *)(v158 + 1160);
    uint64_t v51 = *(void *)(v158 + 1128);
    uint64_t v53 = *(id *)(v158 + 1304);

    v52(v50, v51);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v54 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(112, 0);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    uint64_t v111 = v54;
    goto LABEL_42;
  }
  uint64_t v124 = *(id *)(v158 + 1328);
  *(void *)(v158 + 872) = v124;
  *(void *)(v158 + 880) = objc_msgSend(v124, sel_logOrigin);
  *(void *)(v158 + 888) = 1;
  type metadata accessor for HKMedicationDoseEventLogOrigin();
  lazy protocol witness table accessor for type HKMedicationDoseEventLogOrigin and conformance HKMedicationDoseEventLogOrigin();
  uint64_t v14 = == infix<A>(_:_:)();
  if (v14)
  {
    *(void *)(v158 + 992) = *(void *)(v158 + 1264);
    *(void *)(v158 + 1000) = 4;
    type metadata accessor for HKMedicationDoseEventStatus();
    lazy protocol witness table accessor for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      uint64_t v119 = *(void (**)(uint64_t, uint64_t, uint64_t))(v158 + 1200);
      uint64_t v15 = *(void *)(v158 + 1176);
      uint64_t v118 = *(void *)(v158 + 1128);
      uint64_t v117 = Logger.wellness.unsafeMutableAddressor();
      swift_beginAccess();
      v119(v15, v117, v118);
      swift_endAccess();
      log = Logger.logObject.getter();
      uint64_t v121 = static os_log_type_t.error.getter();
      *(void *)(v158 + 952) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v120 = *(_DWORD *)(v158 + 1508);
      uint64_t v123 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(log, v121))
      {
        uint64_t v16 = *(void *)(v158 + 1312);
        os_log_type_t v113 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v112 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v114 = createStorage<A>(capacity:type:)(0);
        uint64_t v115 = createStorage<A>(capacity:type:)(0);
        *(void *)(v158 + 960) = v113;
        *(void *)(v158 + 968) = v114;
        *(void *)(v158 + 976) = v115;
        serialize(_:at:)(0, (unsigned char **)(v158 + 960));
        serialize(_:at:)(0, (unsigned char **)(v158 + 960));
        *(void *)(v158 + 984) = v123;
        uint64_t v116 = (void *)swift_task_alloc();
        v116[2] = v158 + 960;
        v116[3] = v158 + 968;
        v116[4] = v158 + 976;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        id result = Sequence.forEach(_:)();
        if (v16) {
          return result;
        }
        swift_task_dealloc();
        _os_log_impl(&dword_25DE00000, log, v121, "This is an as needed dose event; you can only log it as taken, but got different requested status. returning .failure",
          v113,
          v120);
        destroyStorage<A>(_:count:)(v114, 0, v112);
        destroyStorage<A>(_:count:)(v115, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v113, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v108 = *(void (**)(uint64_t, uint64_t))(v158 + 1248);
      uint64_t v106 = *(void *)(v158 + 1176);
      uint64_t v107 = *(void *)(v158 + 1128);
      uint64_t v109 = *(id *)(v158 + 1304);

      v108(v106, v107);
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      uint64_t v110 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

      outlined destroy of [HKQuantityType]();
      outlined destroy of [HKQuantityType]();
      uint64_t v111 = v110;
LABEL_42:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v27 = *(uint64_t (**)(char *))(*(void *)(v158 + 536) + 8);
      return v27(v111);
    }
  }
  uint64_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(v158 + 1200);
  uint64_t v76 = *(void *)(v158 + 1168);
  uint64_t v83 = *(void *)(v158 + 1128);
  uint64_t v79 = *(void *)(v158 + 1120);
  uint64_t v78 = *(void *)(v158 + 1104);
  uint64_t v86 = *(void **)(v158 + 1304);
  char v77 = *(void *)(v158 + 1112);
  uint64_t v80 = objc_msgSend(v124, sel_updateForNewStatus_, *(void *)(v158 + 1264));
  *(void *)(v158 + 896) = v80;
  Date.init()();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v79, v78);
  uint64_t v85 = objc_msgSend(v80, sel_updateForNewStartDate_, isa);

  *(void *)(v158 + 904) = v85;
  uint64_t v82 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v84(v76, v82, v83);
  swift_endAccess();
  uint64_t v17 = v85;
  char v88 = swift_allocObject();
  *(void *)(v88 + 16) = v85;
  uint64_t v18 = v85;
  uint64_t v90 = swift_allocObject();
  *(void *)(v90 + 16) = v85;
  uint64_t v19 = v86;
  uint64_t v92 = swift_allocObject();
  *(void *)(v92 + 16) = v86;
  os_log_type_t v104 = Logger.logObject.getter();
  uint64_t v105 = static os_log_type_t.debug.getter();
  *(void *)(v158 + 912) = 32;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v87 = *(_DWORD *)(v158 + 1504);
  uint64_t v94 = swift_allocObject();
  *(unsigned char *)(v94 + 16) = 32;
  uint64_t v95 = swift_allocObject();
  *(unsigned char *)(v95 + 16) = 8;
  uint64_t v89 = swift_allocObject();
  *(void *)(v89 + 16) = partial apply for implicit closure #3 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(void *)(v89 + 24) = v88;
  uint64_t v96 = swift_allocObject();
  *(void *)(v96 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v96 + 24) = v89;
  uint64_t v97 = swift_allocObject();
  *(unsigned char *)(v97 + 16) = 32;
  uint64_t v98 = swift_allocObject();
  *(unsigned char *)(v98 + 16) = 8;
  uint64_t v91 = swift_allocObject();
  *(void *)(v91 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(void *)(v91 + 24) = v90;
  uint64_t v99 = swift_allocObject();
  *(void *)(v99 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v99 + 24) = v91;
  uint64_t v100 = swift_allocObject();
  *(unsigned char *)(v100 + 16) = 32;
  uint64_t v101 = swift_allocObject();
  *(unsigned char *)(v101 + 16) = 8;
  uint64_t v93 = swift_allocObject();
  *(void *)(v93 + 16) = partial apply for implicit closure #5 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(void *)(v93 + 24) = v92;
  uint64_t v102 = swift_allocObject();
  *(void *)(v102 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v102 + 24) = v93;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v103 = v20;
  swift_retain();
  *uint64_t v103 = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[1] = v94;
  swift_retain();
  v103[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[3] = v95;
  swift_retain();
  v103[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[5] = v96;
  swift_retain();
  v103[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[7] = v97;
  swift_retain();
  v103[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[9] = v98;
  swift_retain();
  v103[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[11] = v99;
  swift_retain();
  v103[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[13] = v100;
  swift_retain();
  v103[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[15] = v101;
  swift_retain();
  v103[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[17] = v102;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v104, v105))
  {
    uint64_t v21 = *(void *)(v158 + 1312);
    uint64_t v73 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v74 = createStorage<A>(capacity:type:)(0);
    uint64_t v75 = createStorage<A>(capacity:type:)(3);
    *(void *)(v158 + 928) = v73;
    *(void *)(v158 + 936) = v74;
    *(void *)(v158 + 944) = v75;
    serialize(_:at:)(2, (unsigned char **)(v158 + 928));
    serialize(_:at:)(3, (unsigned char **)(v158 + 928));
    *(void *)(v158 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v158 + 496) = v94;
    id result = closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 488), v158 + 928, v158 + 936, v158 + 944);
    if (v21) {
      return result;
    }
    *(void *)(v158 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v158 + 496) = v95;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 488), v158 + 928, v158 + 936, v158 + 944);
    *(void *)(v158 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v158 + 496) = v96;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 488), v158 + 928, v158 + 936, v158 + 944);
    *(void *)(v158 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v158 + 496) = v97;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 488), v158 + 928, v158 + 936, v158 + 944);
    *(void *)(v158 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v158 + 496) = v98;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 488), v158 + 928, v158 + 936, v158 + 944);
    *(void *)(v158 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v158 + 496) = v99;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 488), v158 + 928, v158 + 936, v158 + 944);
    *(void *)(v158 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v158 + 496) = v100;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 488), v158 + 928, v158 + 936, v158 + 944);
    *(void *)(v158 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v158 + 496) = v101;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 488), v158 + 928, v158 + 936, v158 + 944);
    *(void *)(v158 + 488) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v158 + 496) = v102;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 488), v158 + 928, v158 + 936, v158 + 944);
    _os_log_impl(&dword_25DE00000, v104, v105, "in writeDoseEvent(), updated to doseEvent w/ dosage: (%s), scheduledDosage: (%s), logOrigin: (%s)", v73, v87);
    destroyStorage<A>(_:count:)(v74, 0, v72);
    destroyStorage<A>(_:count:)(v75, 3, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v73, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v71 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v71 = *(void *)(v158 + 1312);
  }
  uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v158 + 1248);
  uint64_t v67 = *(void *)(v158 + 1168);
  uint64_t v68 = *(void *)(v158 + 1128);
  os_log_type_t v70 = *(id *)(v158 + 1304);

  v69(v67, v68);
  uint64_t v22 = v85;
  *(void *)(v158 + 920) = v85;
  Array.append(_:)();

  *(void *)(v158 + 1296) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  uint64_t v135 = *(void **)(v158 + 592);
  *(void *)(v158 + 1304) = v135;
  if (v135)
  {
    uint64_t v138 = *(void (**)(uint64_t, uint64_t, uint64_t))(v158 + 1200);
    char v2 = *(void *)(v158 + 1184);
    unint64_t v137 = *(void *)(v158 + 1128);
    *(void *)(v158 + 816) = v135;
    uint64_t v136 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v138(v2, v136, v137);
    swift_endAccess();
    uint64_t v3 = v135;
    unsigned int v140 = swift_allocObject();
    *(void *)(v140 + 16) = v135;
    uint64_t v4 = v135;
    uint64_t v142 = swift_allocObject();
    *(void *)(v142 + 16) = v135;
    uint64_t v5 = v135;
    uint64_t v144 = swift_allocObject();
    *(void *)(v144 + 16) = v135;
    oslog = Logger.logObject.getter();
    uint32_t v157 = static os_log_type_t.debug.getter();
    *(void *)(v158 + 824) = 32;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v158 + 1496);
    uint64_t v146 = swift_allocObject();
    *(unsigned char *)(v146 + 16) = 32;
    uint64_t v147 = swift_allocObject();
    *(unsigned char *)(v147 + 16) = 8;
    id v141 = swift_allocObject();
    *(void *)(v141 + 16) = partial apply for implicit closure #3 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(void *)(v141 + 24) = v140;
    uint64_t v148 = swift_allocObject();
    *(void *)(v148 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v148 + 24) = v141;
    uint32_t v149 = swift_allocObject();
    *(unsigned char *)(v149 + 16) = 32;
    uint64_t v150 = swift_allocObject();
    *(unsigned char *)(v150 + 16) = 8;
    uint64_t v143 = swift_allocObject();
    *(void *)(v143 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(void *)(v143 + 24) = v142;
    uint64_t v151 = swift_allocObject();
    *(void *)(v151 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v151 + 24) = v143;
    uint64_t v152 = swift_allocObject();
    *(unsigned char *)(v152 + 16) = 32;
    id v153 = swift_allocObject();
    *(unsigned char *)(v153 + 16) = 8;
    uint64_t v145 = swift_allocObject();
    *(void *)(v145 + 16) = partial apply for implicit closure #5 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(void *)(v145 + 24) = v144;
    unint64_t v154 = swift_allocObject();
    *(void *)(v154 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v154 + 24) = v145;
    _allocateUninitializedArray<A>(_:)();
    unint64_t v155 = v6;
    swift_retain();
    *unint64_t v155 = partial apply for closure #1 in OSLogArguments.append(_:);
    v155[1] = v146;
    swift_retain();
    v155[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v155[3] = v147;
    swift_retain();
    v155[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v155[5] = v148;
    swift_retain();
    v155[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v155[7] = v149;
    swift_retain();
    v155[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v155[9] = v150;
    swift_retain();
    v155[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v155[11] = v151;
    swift_retain();
    v155[12] = partial apply for closure #1 in OSLogArguments.append(_:);
    v155[13] = v152;
    swift_retain();
    v155[14] = partial apply for closure #1 in OSLogArguments.append(_:);
    v155[15] = v153;
    swift_retain();
    v155[16] = partial apply for closure #1 in OSLogArguments.append(_:);
    v155[17] = v154;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v157))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v133 = createStorage<A>(capacity:type:)(0);
      uint64_t v134 = createStorage<A>(capacity:type:)(3);
      *(void *)(v158 + 1008) = buf;
      *(void *)(v158 + 1016) = v133;
      *(void *)(v158 + 1024) = v134;
      serialize(_:at:)(2, (unsigned char **)(v158 + 1008));
      serialize(_:at:)(3, (unsigned char **)(v158 + 1008));
      *(void *)(v158 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v158 + 512) = v146;
      id result = closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 504), v158 + 1008, v158 + 1016, v158 + 1024);
      if (v71) {
        return result;
      }
      *(void *)(v158 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v158 + 512) = v147;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 504), v158 + 1008, v158 + 1016, v158 + 1024);
      *(void *)(v158 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v158 + 512) = v148;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 504), v158 + 1008, v158 + 1016, v158 + 1024);
      *(void *)(v158 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v158 + 512) = v149;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 504), v158 + 1008, v158 + 1016, v158 + 1024);
      *(void *)(v158 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v158 + 512) = v150;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 504), v158 + 1008, v158 + 1016, v158 + 1024);
      *(void *)(v158 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v158 + 512) = v151;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 504), v158 + 1008, v158 + 1016, v158 + 1024);
      *(void *)(v158 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v158 + 512) = v152;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 504), v158 + 1008, v158 + 1016, v158 + 1024);
      *(void *)(v158 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v158 + 512) = v153;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 504), v158 + 1008, v158 + 1016, v158 + 1024);
      *(void *)(v158 + 504) = partial apply for closure #1 in OSLogArguments.append(_:);
      *(void *)(v158 + 512) = v154;
      closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v158 + 504), v158 + 1008, v158 + 1016, v158 + 1024);
      _os_log_impl(&dword_25DE00000, oslog, v157, "in writeDoseEvent(), started with a doseEvent w/ dosage: (%s), scheduledDosage: (%s), logOrigin: (%s)", buf, size);
      destroyStorage<A>(_:count:)(v133, 0, v131);
      destroyStorage<A>(_:count:)(v134, 3, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      int v129 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      int v129 = v71;
    }
    *(void *)(v158 + 1312) = v129;
    uint64_t v127 = *(void (**)(uint64_t, uint64_t))(v158 + 1248);
    uint64_t v125 = *(void *)(v158 + 1184);
    uint64_t v126 = *(void *)(v158 + 1128);
    uint64_t v128 = *(unsigned char *)(v158 + 531);

    v127(v125, v126);
    id v8 = (void *)swift_task_alloc();
    *(void *)(v158 + 1320) = v8;
    *id v8 = *(void *)(v158 + 536);
    v8[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    uint64_t v9 = *(void *)(v158 + 1080);
    uint64_t v10 = *(void *)(v158 + 1072);
    uint64_t v11 = *(void *)(v158 + 1064);
    uint64_t v12 = *(void *)(v158 + 1056);
    uint64_t v13 = *(void *)(v158 + 1048);
    return SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)((uint64_t)v135, v13, v128 & 1, v12, v11, v10, v9);
  }
  else
  {
    uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v158 + 1200);
    uint64_t v25 = *(void *)(v158 + 1152);
    uint32_t v38 = *(void *)(v158 + 1128);
    outlined destroy of [HKQuantityType]();
    uint64_t v37 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v39(v25, v37, v38);
    swift_endAccess();
    os_log_type_t v40 = *(void *)(v158 + 576);
    swift_bridgeObjectRetain();
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = v40;
    uint64_t v48 = Logger.logObject.getter();
    uint64_t v49 = static os_log_type_t.debug.getter();
    *(void *)(v158 + 600) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v41 = *(_DWORD *)(v158 + 1484);
    char v44 = swift_allocObject();
    *(unsigned char *)(v44 + 16) = 0;
    uint64_t v45 = swift_allocObject();
    *(unsigned char *)(v45 + 16) = 8;
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = partial apply for specialized implicit closure #10 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(void *)(v43 + 24) = v42;
    os_log_type_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(void *)(v46 + 24) = v43;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v47 = v26;
    swift_retain();
    *uint64_t v47 = partial apply for closure #1 in OSLogArguments.append(_:);
    v47[1] = v44;
    swift_retain();
    v47[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v47[3] = v45;
    swift_retain();
    v47[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v47[5] = v46;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v34 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v35 = createStorage<A>(capacity:type:)(0);
      uint64_t v36 = createStorage<A>(capacity:type:)(0);
      uint64_t v159 = v34;
      uint64_t v160 = v35;
      uint64_t v161 = v36;
      serialize(_:at:)(0, &v159);
      serialize(_:at:)(1, &v159);
      uint64_t v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v163 = v44;
      id result = closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v159, (uint64_t)&v160, (uint64_t)&v161);
      if (v71) {
        return result;
      }
      uint64_t v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v163 = v45;
      closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v159, (uint64_t)&v160, (uint64_t)&v161);
      uint64_t v162 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      uint64_t v163 = v46;
      closure #1 in osLogInternal(_:log:type:)(&v162, (uint64_t)&v159, (uint64_t)&v160, (uint64_t)&v161);
      _os_log_impl(&dword_25DE00000, v48, v49, "writeDoseEvent() - added %ld doseEvents to updatedDoseEvents", v34, v41);
      destroyStorage<A>(_:count:)(v35, 0, v33);
      destroyStorage<A>(_:count:)(v36, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v34, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    os_log_type_t v30 = *(void (**)(uint64_t, uint64_t))(v158 + 1248);
    uint64_t v28 = *(void *)(v158 + 1152);
    uint64_t v29 = *(void *)(v158 + 1128);
    uint32_t v32 = *(id *)(v158 + 1032);

    v30(v28, v29);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_endAccess();
    uint64_t v31 = Array._bridgeToObjectiveC()().super.isa;
    *(void *)(v158 + 1336) = v31;
    swift_bridgeObjectRelease();
    *(void *)(v158 + 16) = *(void *)(v158 + 536);
    *(void *)(v158 + 56) = v130;
    *(void *)(v158 + 24) = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(void *)(v158 + 112) = swift_continuation_init();
    *(void *)(v158 + 80) = MEMORY[0x263EF8330];
    *(_DWORD *)(v158 + 88) = 0x40000000;
    *(_DWORD *)(v158 + 92) = 0;
    *(void *)(v158 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) @Sendable (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
    *(void *)(v158 + 104) = &block_descriptor_2;
    objc_msgSend(v32, sel_writeDoseEvents_completion_, v31);
    return __swift_continuation_await_point();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = *v0;
  uint64_t v5 = *v0;
  *(void *)(v5 + 536) = *v0;
  uint64_t v1 = *(void *)(v4 + 48);
  *(void *)(v5 + 1344) = v1;
  if (v1)
  {
    char v2 = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  }
  else
  {
    char v2 = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  void *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t (*v26)(uint64_t);
  Class v27;
  id v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Double v39;
  Class v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  char v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  Class v57;
  id v58;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  Class isa;
  void *v70;
  char v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  uint64_t v1 = (void *)v0[167];
  uint64_t v74 = v0[130];
  v0[67] = v0;

  type metadata accessor for LogSpecificMedicationsIntentResponse();
  uint64_t v73 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(4, 0);
  v0[169] = v73;
  char v2 = v73;
  uint64_t v3 = v73;
  uint64_t v4 = v73;
  uint64_t v5 = v73;
  id v6 = v73;
  id v7 = v73;
  id v8 = v73;
  uint64_t v9 = v73;
  v0[82] = v73;
  v0[170] = type metadata accessor for MatchedMedName();
  v0[83] = _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  v0[84] = v74;
  Collection<>.makeIterator()();
  IndexingIterator.next()();
  uint64_t v75 = v0[85];
  v0[171] = v75;
  if (v75)
  {
    *(void *)(v72 + 792) = v75;
    uint64_t v10 = (void *)swift_task_alloc();
    uint64_t v11 = v75;
    *(void *)(v72 + 1376) = v10;
    void *v10 = *(void *)(v72 + 536);
    v10[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    uint64_t v12 = *(void *)(v72 + 1080);
    uint64_t v13 = *(void *)(v72 + 1072);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v11, 1, v13, v12);
  }
  os_log_type_t v70 = *(void **)(v72 + 1352);
  uint64_t v71 = *(unsigned char *)(v72 + 530);
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v70, sel_setMatchingMedsBeforeUpdate_, isa);

  if (v71)
  {
    swift_beginAccess();
    uint64_t v67 = *(void *)(v72 + 576);
    swift_bridgeObjectRetain();
    swift_endAccess();
    swift_bridgeObjectRetain();
    *(void *)(v72 + 784) = v67;
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    uint64_t v68 = *(id *)(v72 + 776);
    swift_bridgeObjectRelease();
    if (v68)
    {
      uint64_t v61 = objc_msgSend(v68, sel_medicationIdentifier);

      uint64_t v62 = objc_msgSend(v61, sel_underlyingIdentifier);
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v64 = v15;

      uint64_t v65 = v63;
      uint64_t v66 = v64;
    }
    else
    {
      uint64_t v65 = 0;
      uint64_t v66 = 0;
    }
    *(void *)(v72 + 1392) = v66;
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v72 + 1400) = v16;
    *uint64_t v16 = *(void *)(v72 + 536);
    v16[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    uint64_t v17 = *(void *)(v72 + 1080);
    uint64_t v18 = *(void *)(v72 + 1072);
    return SpecificMedicationsPersistor.displayNameFor(identifier:)(v65, v66, v18, v17);
  }
  else
  {

    uint64_t v58 = *(id *)(v72 + 1352);
    uint64_t v56 = *(void *)(v72 + 1272);
    uint64_t v59 = *(void *)(v72 + 1040);
    type metadata accessor for NSNumber();
    uint64_t v19 = MEMORY[0x2611C8A30](v59, v56);
    uint64_t v57 = NSNumber.__allocating_init(value:)(v19).super.super.isa;
    objc_msgSend(v58, sel_setMedCount_);

    swift_bridgeObjectRetain();
    *(void *)(v72 + 696) = v59;
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    uint64_t v60 = *(id *)(v72 + 688);
    if (v60)
    {
      uint64_t v55 = objc_msgSend(v60, sel_scheduledDate);
      if (v55)
      {
        uint32_t v52 = *(void *)(v72 + 1120);
        uint64_t v53 = *(void *)(v72 + 1104);
        uint64_t v54 = *(void *)(v72 + 1088);
        uint64_t v51 = *(void *)(v72 + 1112);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v54, v52, v53);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v51 + 56))(v54, 0, 1, v53);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v72 + 1112) + 56))(*(void *)(v72 + 1088), 1, 1, *(void *)(v72 + 1104));
      }
      outlined init with take of Date?(*(const void **)(v72 + 1088), *(void **)(v72 + 1096));
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v72 + 1112) + 56))(*(void *)(v72 + 1096), 1, 1, *(void *)(v72 + 1104));
    }
    uint64_t v48 = *(void *)(v72 + 1096);
    uint64_t v49 = getFormattedTimeString(time:)(v48);
    uint64_t v50 = v20;
    outlined destroy of Date?(v48);
    if (v50)
    {
      os_log_type_t v46 = MEMORY[0x2611C8860](v49);
      swift_bridgeObjectRelease();
      uint64_t v47 = (void *)v46;
    }
    else
    {
      uint64_t v47 = 0;
    }
    char v44 = *(id *)(v72 + 1352);
    uint64_t v45 = *(unsigned char *)(v72 + 531);
    objc_msgSend(v44, sel_setMedSchedule_);

    if (v45)
    {
      uint64_t v36 = *(id *)(v72 + 1352);

      *(void *)(v72 + 704) = _allocateUninitializedArray<A>(_:)();
      swift_beginAccess();
      uint64_t v37 = *(void *)(v72 + 576);
      swift_bridgeObjectRetain();
      swift_endAccess();
      *(void *)(v72 + 712) = v37;
      Collection<>.makeIterator()();
      IndexingIterator.next()();
      uint32_t v38 = *(void *)(v72 + 720);
      *(void *)(v72 + 1456) = v38;
      if (v38)
      {
        *(void *)(v72 + 728) = v38;
        uint64_t v25 = (void *)swift_task_alloc();
        uint64_t v11 = v38;
        *(void *)(v72 + 1464) = v25;
        *uint64_t v25 = *(void *)(v72 + 536);
        v25[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
        uint64_t v12 = *(void *)(v72 + 1080);
        uint64_t v13 = *(void *)(v72 + 1072);
        return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v11, 1, v13, v12);
      }
      uint64_t v28 = *(id *)(v72 + 1352);
      outlined destroy of [HKQuantityType]();
      swift_bridgeObjectRetain();
      uint64_t v27 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v28, sel_setMatchingMeds_, v27);

      outlined destroy of [HKQuantityType]();
      outlined destroy of [HKQuantityType]();

      outlined destroy of [HKQuantityType]();
      uint64_t v29 = *(void *)(v72 + 1352);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v26 = *(uint64_t (**)(uint64_t))(*(void *)(v72 + 536) + 8);
      return v26(v29);
    }
    else
    {
      uint64_t v39 = *(double *)(v72 + 1048);
      uint64_t v41 = *(id *)(v72 + 1352);
      uint64_t v42 = *(void *)(v72 + 1040);
      *(Swift::Double *)(v72 + 752) = v39;
      os_log_type_t v40 = NSNumber.__allocating_init(value:)(v39).super.super.isa;
      objc_msgSend(v41, sel_setDosage_);

      swift_bridgeObjectRetain();
      *(void *)(v72 + 768) = v42;
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      uint64_t v43 = *(id *)(v72 + 760);
      if (v43)
      {
        os_log_type_t v30 = objc_msgSend(v43, sel_medicationIdentifier);

        uint64_t v31 = objc_msgSend(v30, sel_underlyingIdentifier);
        uint32_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v33 = v21;

        uint64_t v34 = v32;
        uint64_t v35 = v33;
      }
      else
      {
        uint64_t v34 = 0;
        uint64_t v35 = 0;
      }
      *(void *)(v72 + 1424) = v35;
      uint64_t v22 = (void *)swift_task_alloc();
      *(void *)(v72 + 1432) = v22;
      *uint64_t v22 = *(void *)(v72 + 536);
      v22[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
      id v23 = *(void *)(v72 + 1080);
      uint64_t v24 = *(void *)(v72 + 1072);
      return SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(v34, v35, v24, v23, v39);
    }
  }
}

{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t (*v18)(uint64_t);
  Class v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Double v31;
  Class v32;
  id v33;
  uint64_t v34;
  id v35;
  id v36;
  char v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  Class v49;
  id v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  Class isa;
  void *v62;
  char v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;

  uint64_t v65 = (void *)v0[173];
  uint64_t v66 = (void *)v0[171];
  v0[67] = v0;
  v0[100] = v65;
  uint64_t v1 = v65;
  v0[101] = v65;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  IndexingIterator.next()();
  uint64_t v67 = v0[85];
  v0[171] = v67;
  if (v67)
  {
    *(void *)(v64 + 792) = v67;
    char v2 = (void *)swift_task_alloc();
    uint64_t v3 = v67;
    *(void *)(v64 + 1376) = v2;
    *char v2 = *(void *)(v64 + 536);
    v2[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    uint64_t v4 = *(void *)(v64 + 1080);
    uint64_t v5 = *(void *)(v64 + 1072);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v3, 1, v5, v4);
  }
  uint64_t v62 = *(void **)(v64 + 1352);
  uint64_t v63 = *(unsigned char *)(v64 + 530);
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v62, sel_setMatchingMedsBeforeUpdate_, isa);

  if (v63)
  {
    swift_beginAccess();
    uint64_t v59 = *(void *)(v64 + 576);
    swift_bridgeObjectRetain();
    swift_endAccess();
    swift_bridgeObjectRetain();
    *(void *)(v64 + 784) = v59;
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    uint64_t v60 = *(id *)(v64 + 776);
    swift_bridgeObjectRelease();
    if (v60)
    {
      uint64_t v53 = objc_msgSend(v60, sel_medicationIdentifier);

      uint64_t v54 = objc_msgSend(v53, sel_underlyingIdentifier);
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v56 = v7;

      uint64_t v57 = v55;
      uint64_t v58 = v56;
    }
    else
    {
      uint64_t v57 = 0;
      uint64_t v58 = 0;
    }
    *(void *)(v64 + 1392) = v58;
    id v8 = (void *)swift_task_alloc();
    *(void *)(v64 + 1400) = v8;
    *id v8 = *(void *)(v64 + 536);
    v8[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    uint64_t v9 = *(void *)(v64 + 1080);
    uint64_t v10 = *(void *)(v64 + 1072);
    return SpecificMedicationsPersistor.displayNameFor(identifier:)(v57, v58, v10, v9);
  }
  else
  {

    uint64_t v50 = *(id *)(v64 + 1352);
    uint64_t v48 = *(void *)(v64 + 1272);
    uint64_t v51 = *(void *)(v64 + 1040);
    type metadata accessor for NSNumber();
    uint64_t v11 = MEMORY[0x2611C8A30](v51, v48);
    uint64_t v49 = NSNumber.__allocating_init(value:)(v11).super.super.isa;
    objc_msgSend(v50, sel_setMedCount_);

    swift_bridgeObjectRetain();
    *(void *)(v64 + 696) = v51;
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    uint32_t v52 = *(id *)(v64 + 688);
    if (v52)
    {
      uint64_t v47 = objc_msgSend(v52, sel_scheduledDate);
      if (v47)
      {
        char v44 = *(void *)(v64 + 1120);
        uint64_t v45 = *(void *)(v64 + 1104);
        os_log_type_t v46 = *(void *)(v64 + 1088);
        uint64_t v43 = *(void *)(v64 + 1112);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32))(v46, v44, v45);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v46, 0, 1, v45);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v64 + 1112) + 56))(*(void *)(v64 + 1088), 1, 1, *(void *)(v64 + 1104));
      }
      outlined init with take of Date?(*(const void **)(v64 + 1088), *(void **)(v64 + 1096));
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v64 + 1112) + 56))(*(void *)(v64 + 1096), 1, 1, *(void *)(v64 + 1104));
    }
    os_log_type_t v40 = *(void *)(v64 + 1096);
    uint64_t v41 = getFormattedTimeString(time:)(v40);
    uint64_t v42 = v12;
    outlined destroy of Date?(v40);
    if (v42)
    {
      uint32_t v38 = MEMORY[0x2611C8860](v41);
      swift_bridgeObjectRelease();
      uint64_t v39 = (void *)v38;
    }
    else
    {
      uint64_t v39 = 0;
    }
    uint64_t v36 = *(id *)(v64 + 1352);
    uint64_t v37 = *(unsigned char *)(v64 + 531);
    objc_msgSend(v36, sel_setMedSchedule_);

    if (v37)
    {
      uint64_t v28 = *(id *)(v64 + 1352);

      *(void *)(v64 + 704) = _allocateUninitializedArray<A>(_:)();
      swift_beginAccess();
      uint64_t v29 = *(void *)(v64 + 576);
      swift_bridgeObjectRetain();
      swift_endAccess();
      *(void *)(v64 + 712) = v29;
      Collection<>.makeIterator()();
      IndexingIterator.next()();
      os_log_type_t v30 = *(void *)(v64 + 720);
      *(void *)(v64 + 1456) = v30;
      if (v30)
      {
        *(void *)(v64 + 728) = v30;
        uint64_t v17 = (void *)swift_task_alloc();
        uint64_t v3 = v30;
        *(void *)(v64 + 1464) = v17;
        void *v17 = *(void *)(v64 + 536);
        v17[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
        uint64_t v4 = *(void *)(v64 + 1080);
        uint64_t v5 = *(void *)(v64 + 1072);
        return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v3, 1, v5, v4);
      }
      uint64_t v20 = *(id *)(v64 + 1352);
      outlined destroy of [HKQuantityType]();
      swift_bridgeObjectRetain();
      uint64_t v19 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v20, sel_setMatchingMeds_, v19);

      outlined destroy of [HKQuantityType]();
      outlined destroy of [HKQuantityType]();

      outlined destroy of [HKQuantityType]();
      uint64_t v21 = *(void *)(v64 + 1352);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)(v64 + 536) + 8);
      return v18(v21);
    }
    else
    {
      uint64_t v31 = *(double *)(v64 + 1048);
      uint64_t v33 = *(id *)(v64 + 1352);
      uint64_t v34 = *(void *)(v64 + 1040);
      *(Swift::Double *)(v64 + 752) = v31;
      uint32_t v32 = NSNumber.__allocating_init(value:)(v31).super.super.isa;
      objc_msgSend(v33, sel_setDosage_);

      swift_bridgeObjectRetain();
      *(void *)(v64 + 768) = v34;
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      uint64_t v35 = *(id *)(v64 + 760);
      if (v35)
      {
        uint64_t v22 = objc_msgSend(v35, sel_medicationIdentifier);

        id v23 = objc_msgSend(v22, sel_underlyingIdentifier);
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v25 = v13;

        uint64_t v26 = v24;
        uint64_t v27 = v25;
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = 0;
      }
      *(void *)(v64 + 1424) = v27;
      uint64_t v14 = (void *)swift_task_alloc();
      *(void *)(v64 + 1432) = v14;
      *uint64_t v14 = *(void *)(v64 + 536);
      v14[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
      uint64_t v15 = *(void *)(v64 + 1080);
      uint64_t v16 = *(void *)(v64 + 1072);
      return SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(v26, v27, v16, v15, v31);
    }
  }
}

{
  void *v0;
  uint64_t v1;
  Swift::Int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  Class v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Double v25;
  Class v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  char v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  Class isa;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  uint64_t v51 = v0[177];
  uint64_t v1 = v0[176];
  v0[67] = v0;
  v0[59] = v1;
  v0[60] = v51;
  swift_bridgeObjectRetain();
  if (v51)
  {
    uint64_t v48 = MEMORY[0x2611C8860](*(void *)(v50 + 1408));
    swift_bridgeObjectRelease();
    uint64_t v49 = (void *)v48;
  }
  else
  {
    uint64_t v49 = 0;
  }
  uint64_t v42 = *(id *)(v50 + 1352);
  objc_msgSend(v42, sel_setMedName_);

  swift_bridgeObjectRelease();
  uint64_t v45 = *(void **)(v50 + 1352);
  uint64_t v43 = *(void *)(v50 + 1272);
  os_log_type_t v46 = *(void *)(v50 + 1040);
  type metadata accessor for NSNumber();
  char v2 = MEMORY[0x2611C8A30](v46, v43);
  Class isa = NSNumber.__allocating_init(value:)(v2).super.super.isa;
  objc_msgSend(v45, sel_setMedCount_);

  swift_bridgeObjectRetain();
  *(void *)(v50 + 696) = v46;
  Collection.first.getter();
  outlined destroy of [HKQuantityType]();
  uint64_t v47 = *(void **)(v50 + 688);
  if (v47)
  {
    uint64_t v41 = objc_msgSend(v47, sel_scheduledDate);
    if (v41)
    {
      uint32_t v38 = *(void *)(v50 + 1120);
      uint64_t v39 = *(void *)(v50 + 1104);
      os_log_type_t v40 = *(void *)(v50 + 1088);
      uint64_t v37 = *(void *)(v50 + 1112);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v40, v38, v39);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v37 + 56))(v40, 0, 1, v39);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v50 + 1112) + 56))(*(void *)(v50 + 1088), 1, 1, *(void *)(v50 + 1104));
    }
    outlined init with take of Date?(*(const void **)(v50 + 1088), *(void **)(v50 + 1096));
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v50 + 1112) + 56))(*(void *)(v50 + 1096), 1, 1, *(void *)(v50 + 1104));
  }
  uint64_t v34 = *(void *)(v50 + 1096);
  uint64_t v35 = getFormattedTimeString(time:)(v34);
  uint64_t v36 = v3;
  outlined destroy of Date?(v34);
  if (v36)
  {
    uint32_t v32 = MEMORY[0x2611C8860](v35);
    swift_bridgeObjectRelease();
    uint64_t v33 = (void *)v32;
  }
  else
  {
    uint64_t v33 = 0;
  }
  os_log_type_t v30 = *(id *)(v50 + 1352);
  uint64_t v31 = *(unsigned char *)(v50 + 531);
  objc_msgSend(v30, sel_setMedSchedule_);

  if (v31)
  {
    uint64_t v22 = *(id *)(v50 + 1352);

    *(void *)(v50 + 704) = _allocateUninitializedArray<A>(_:)();
    swift_beginAccess();
    id v23 = *(void *)(v50 + 576);
    swift_bridgeObjectRetain();
    swift_endAccess();
    *(void *)(v50 + 712) = v23;
    Collection<>.makeIterator()();
    IndexingIterator.next()();
    uint64_t v24 = *(void *)(v50 + 720);
    *(void *)(v50 + 1456) = v24;
    if (v24)
    {
      *(void *)(v50 + 728) = v24;
      uint64_t v9 = (void *)swift_task_alloc();
      *(void *)(v50 + 1464) = v9;
      *uint64_t v9 = *(void *)(v50 + 536);
      v9[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
      uint64_t v10 = *(void *)(v50 + 1080);
      uint64_t v11 = *(void *)(v50 + 1072);
      return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v24, 1, v11, v10);
    }
    else
    {
      uint64_t v14 = *(id *)(v50 + 1352);
      outlined destroy of [HKQuantityType]();
      swift_bridgeObjectRetain();
      uint64_t v13 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v14, sel_setMatchingMeds_, v13);

      outlined destroy of [HKQuantityType]();
      outlined destroy of [HKQuantityType]();

      outlined destroy of [HKQuantityType]();
      uint64_t v15 = *(void *)(v50 + 1352);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)(v50 + 536) + 8);
      return v12(v15);
    }
  }
  else
  {
    uint64_t v25 = *(double *)(v50 + 1048);
    uint64_t v27 = *(id *)(v50 + 1352);
    uint64_t v28 = *(void *)(v50 + 1040);
    *(Swift::Double *)(v50 + 752) = v25;
    uint64_t v26 = NSNumber.__allocating_init(value:)(v25).super.super.isa;
    objc_msgSend(v27, sel_setDosage_);

    swift_bridgeObjectRetain();
    *(void *)(v50 + 768) = v28;
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    uint64_t v29 = *(id *)(v50 + 760);
    if (v29)
    {
      uint64_t v16 = objc_msgSend(v29, sel_medicationIdentifier);

      uint64_t v17 = objc_msgSend(v16, sel_underlyingIdentifier);
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v19 = v4;

      uint64_t v20 = v18;
      uint64_t v21 = v19;
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
    }
    *(void *)(v50 + 1424) = v21;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v50 + 1432) = v5;
    *uint64_t v5 = *(void *)(v50 + 536);
    v5[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    id v6 = *(void *)(v50 + 1080);
    id v7 = *(void *)(v50 + 1072);
    return SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(v20, v21, v7, v6, v25);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t);
  Class isa;
  id v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v1 = v0[181];
  char v2 = v0[180];
  v0[67] = v0;
  v0[57] = v2;
  v0[58] = v1;
  swift_bridgeObjectRetain();
  if (v0[58])
  {
    *(_OWORD *)(v18 + 440) = *(_OWORD *)(v18 + 456);
  }
  else
  {
    uint64_t v17 = *(void *)(v18 + 1064);
    uint64_t v16 = *(void *)(v18 + 1056);
    swift_bridgeObjectRetain();
    *(void *)(v18 + 440) = v16;
    *(void *)(v18 + 448) = v17;
    outlined destroy of String.UTF8View();
  }
  swift_bridgeObjectRelease();
  if (*(void *)(v18 + 448))
  {
    uint64_t v14 = MEMORY[0x2611C8860](*(void *)(v18 + 440));
    swift_bridgeObjectRelease();
    uint64_t v15 = (void *)v14;
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v11 = *(id *)(v18 + 1352);
  objc_msgSend(v11, sel_setDosageUnit_);

  *(void *)(v18 + 704) = _allocateUninitializedArray<A>(_:)();
  swift_beginAccess();
  uint64_t v12 = *(void *)(v18 + 576);
  swift_bridgeObjectRetain();
  swift_endAccess();
  *(void *)(v18 + 712) = v12;
  Collection<>.makeIterator()();
  IndexingIterator.next()();
  uint64_t v13 = *(void *)(v18 + 720);
  *(void *)(v18 + 1456) = v13;
  if (v13)
  {
    *(void *)(v18 + 728) = v13;
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v18 + 1464) = v3;
    void *v3 = *(void *)(v18 + 536);
    v3[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    uint64_t v4 = *(void *)(v18 + 1080);
    uint64_t v5 = *(void *)(v18 + 1072);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v13, 1, v5, v4);
  }
  else
  {
    uint64_t v9 = *(id *)(v18 + 1352);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();

    outlined destroy of [HKQuantityType]();
    uint64_t v10 = *(void *)(v18 + 1352);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v7 = *(uint64_t (**)(uint64_t))(*(void *)(v18 + 536) + 8);
    return v7(v10);
  }
}

{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t);
  Class isa;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v11 = (void *)v0[184];
  uint64_t v12 = (void *)v0[182];
  v0[67] = v0;
  v0[92] = v11;
  uint64_t v1 = v11;
  v0[93] = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  IndexingIterator.next()();
  uint64_t v13 = v0[90];
  v0[182] = v13;
  if (v13)
  {
    *(void *)(v10 + 728) = v13;
    char v2 = (void *)swift_task_alloc();
    *(void *)(v10 + 1464) = v2;
    *char v2 = *(void *)(v10 + 536);
    v2[1] = SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    uint64_t v3 = *(void *)(v10 + 1080);
    uint64_t v4 = *(void *)(v10 + 1072);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v13, 1, v4, v3);
  }
  else
  {
    id v8 = *(id *)(v10 + 1352);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();

    outlined destroy of [HKQuantityType]();
    uint64_t v9 = *(void *)(v10 + 1352);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v6 = *(uint64_t (**)(uint64_t))(*(void *)(v10 + 536) + 8);
    return v6(v9);
  }
}

{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(char *);
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  id v7;
  char *v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint32_t v21;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v17 = *(void **)(v0 + 1344);
  uint64_t v16 = *(void **)(v0 + 1336);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1200);
  uint64_t v15 = *(void *)(v0 + 1144);
  uint64_t v19 = *(void *)(v0 + 1128);
  *(void *)(v0 + 536) = v0;
  swift_willThrow();

  uint64_t v1 = v17;
  *(void *)(v0 + 608) = v17;
  uint64_t v18 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v20(v15, v18, v19);
  swift_endAccess();
  id v23 = Logger.logObject.getter();
  uint64_t v22 = static os_log_type_t.error.getter();
  *(void *)(v0 + 616) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v21 = *(_DWORD *)(v0 + 1492);
  uint64_t v24 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v23, v22))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 624) = buf;
    *(void *)(v14 + 632) = v11;
    *(void *)(v14 + 640) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 624));
    serialize(_:at:)(0, (unsigned char **)(v14 + 624));
    *(void *)(v14 + 648) = v24;
    uint64_t v13 = (void *)swift_task_alloc();
    void v13[2] = v14 + 624;
    v13[3] = v14 + 632;
    void v13[4] = v14 + 640;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v23, v22, "Failed writing updated dose events for specific meds.", buf, v21);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  id v7 = *(id *)(v14 + 1344);
  id v6 = *(void (**)(uint64_t, uint64_t))(v14 + 1248);
  uint64_t v4 = *(void *)(v14 + 1144);
  uint64_t v5 = *(void *)(v14 + 1128);

  v6(v4, v5);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  id v8 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  outlined destroy of [HKQuantityType]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v2 = *(uint64_t (**)(char *))(*(void *)(v14 + 536) + 8);
  return v2(v8);
}

uint64_t SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 536) = *v1;
  *(void *)(v3 + 1328) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 536) = *v1;
  *(void *)(v3 + 1384) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 536) = *v1;
  *(void *)(v3 + 1472) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:), 0);
}

uint64_t SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v2;
  v4[67] = *v2;
  v4[176] = a1;
  v4[177] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:), 0);
}

{
  void *v2;
  void *v4;
  uint64_t v5;

  uint64_t v4 = (void *)*v2;
  v4[67] = *v2;
  v4[180] = a1;
  v4[181] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:), 0);
}

uint64_t SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 1376) = v25;
  *(void *)(v8 + 1368) = v24;
  *(unsigned char *)(v8 + 1922) = v23;
  *(unsigned char *)(v8 + 1921) = v22;
  *(void *)(v8 + 1360) = a8;
  *(void *)(v8 + 1352) = a7;
  *(unsigned char *)(v8 + 1915) = a6;
  *(void *)(v8 + 1344) = a5;
  *(unsigned char *)(v8 + 1914) = a4 & 1;
  *(void *)(v8 + 1336) = a3;
  *(void *)(v8 + 1328) = a2;
  *(void *)(v8 + 1320) = a1;
  *(void *)(v8 + 600) = v8;
  *(void *)(v8 + 400) = 0;
  *(void *)(v8 + 408) = 0;
  *(void *)(v8 + 608) = 0;
  *(unsigned char *)(v8 + 1912) = 0;
  *(void *)(v8 + 576) = 0;
  *(unsigned char *)(v8 + 584) = 0;
  *(void *)(v8 + 416) = 0;
  *(void *)(v8 + 424) = 0;
  *(unsigned char *)(v8 + 1920) = 0;
  *(unsigned char *)(v8 + 1928) = 0;
  *(void *)(v8 + 432) = 0;
  *(void *)(v8 + 440) = 0;
  *(void *)(v8 + 624) = 0;
  *(void *)(v8 + 632) = 0;
  *(void *)(v8 + 640) = 0;
  *(void *)(v8 + 648) = 0;
  *(void *)(v8 + 720) = 0;
  *(void *)(v8 + 728) = 0;
  *(void *)(v8 + 448) = 0;
  *(void *)(v8 + 456) = 0;
  *(void *)(v8 + 752) = 0;
  *(void *)(v8 + 760) = 0;
  *(void *)(v8 + 808) = 0;
  *(void *)(v8 + 856) = 0;
  *(void *)(v8 + 496) = 0;
  *(void *)(v8 + 504) = 0;
  *(void *)(v8 + 880) = 0;
  *(void *)(v8 + 888) = 0;
  *(void *)(v8 + 896) = 0;
  *(void *)(v8 + 992) = 0;
  *(void *)(v8 + 512) = 0;
  *(void *)(v8 + 520) = 0;
  *(void *)(v8 + 1064) = 0;
  *(void *)(v8 + 1176) = 0;
  *(void *)(v8 + 544) = 0;
  *(void *)(v8 + 552) = 0;
  *(void *)(v8 + 1264) = 0;
  uint64_t v12 = type metadata accessor for Date();
  *(void *)(v8 + 1384) = v12;
  *(void *)(v8 + 1392) = *(void *)(v12 - 8);
  *(void *)(v8 + 1400) = swift_task_alloc();
  *(void *)(v8 + 1408) = swift_task_alloc();
  *(void *)(v8 + 1416) = swift_task_alloc();
  *(void *)(v8 + 1424) = swift_task_alloc();
  uint64_t v13 = type metadata accessor for DateInterval();
  *(void *)(v8 + 1432) = v13;
  *(void *)(v8 + 1440) = *(void *)(v13 - 8);
  *(void *)(v8 + 1448) = swift_task_alloc();
  uint64_t v14 = type metadata accessor for Logger();
  *(void *)(v8 + 1456) = v14;
  *(void *)(v8 + 1464) = *(void *)(v14 - 8);
  *(void *)(v8 + 1472) = swift_task_alloc();
  *(void *)(v8 + 1480) = swift_task_alloc();
  *(void *)(v8 + 1488) = swift_task_alloc();
  *(void *)(v8 + 1496) = swift_task_alloc();
  *(void *)(v8 + 1504) = swift_task_alloc();
  *(void *)(v8 + 1512) = swift_task_alloc();
  *(void *)(v8 + 1520) = swift_task_alloc();
  *(void *)(v8 + 1528) = swift_task_alloc();
  *(void *)(v8 + 1536) = swift_task_alloc();
  *(void *)(v8 + 1544) = swift_task_alloc();
  *(void *)(v8 + 1552) = swift_task_alloc();
  *(void *)(v8 + 1560) = swift_task_alloc();
  *(void *)(v8 + 1568) = swift_task_alloc();
  *(void *)(v8 + 400) = a1;
  *(void *)(v8 + 408) = a2;
  *(void *)(v8 + 608) = a3;
  *(unsigned char *)(v8 + 1912) = a4 & 1;
  *(void *)(v8 + 576) = a5;
  *(unsigned char *)(v8 + 584) = a6 & 1;
  *(void *)(v8 + 416) = a7;
  *(void *)(v8 + 424) = a8;
  *(unsigned char *)(v8 + 1920) = v22;
  *(unsigned char *)(v8 + 1928) = v23;
  *(void *)(v8 + 432) = v24;
  *(void *)(v8 + 440) = v25;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:), 0);
}

uint64_t SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)()
{
  uint64_t v257 = v0;
  uint64_t v1 = *(void *)(v0 + 1568);
  uint64_t v193 = *(void *)(v0 + 1464);
  uint64_t v195 = *(void *)(v0 + 1456);
  char v200 = *(unsigned char *)(v0 + 1922);
  char v201 = *(unsigned char *)(v0 + 1921);
  uint64_t v205 = *(void *)(v0 + 1360);
  uint64_t v204 = *(void *)(v0 + 1352);
  char v203 = *(unsigned char *)(v0 + 1915);
  uint64_t v202 = *(void *)(v0 + 1344);
  char v199 = *(unsigned char *)(v0 + 1914);
  uint64_t v198 = *(void *)(v0 + 1336);
  uint64_t v197 = *(void *)(v0 + 1328);
  uint64_t v196 = *(void *)(v0 + 1320);
  *(void *)(v0 + 600) = v0;
  uint64_t v194 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  char v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v193 + 16);
  *(void *)(v0 + 1576) = v2;
  *(void *)(v0 + 1584) = (v193 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v2(v1, v194, v195);
  swift_endAccess();
  swift_bridgeObjectRetain();
  uint64_t v207 = swift_allocObject();
  *(void *)(v207 + 16) = v196;
  *(void *)(v207 + 24) = v197;
  swift_bridgeObjectRetain();
  uint64_t v209 = swift_allocObject();
  *(void *)(v209 + 16) = v198;
  uint64_t v211 = swift_allocObject();
  *(unsigned char *)(v211 + 16) = v199 & 1;
  uint64_t v215 = swift_allocObject();
  *(unsigned char *)(v215 + 16) = v200;
  uint64_t v217 = swift_allocObject();
  *(unsigned char *)(v217 + 16) = v201;
  uint64_t v219 = swift_allocObject();
  *(void *)(v219 + 16) = v202;
  *(unsigned char *)(v219 + 24) = v203 & 1;
  swift_bridgeObjectRetain();
  uint64_t v221 = swift_allocObject();
  *(void *)(v221 + 16) = v204;
  *(void *)(v221 + 24) = v205;
  NSMeasurement v245 = Logger.logObject.getter();
  os_log_type_t v246 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 616) = 68;
  *(void *)(v0 + 1592) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 1600) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 1608) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 596);
  uint64_t v223 = swift_allocObject();
  *(unsigned char *)(v223 + 16) = 32;
  uint64_t v224 = swift_allocObject();
  *(unsigned char *)(v224 + 16) = 8;
  uint64_t v208 = swift_allocObject();
  *(void *)(v208 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v208 + 24) = v207;
  uint64_t v225 = swift_allocObject();
  *(void *)(v225 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v225 + 24) = v208;
  uint64_t v226 = swift_allocObject();
  *(unsigned char *)(v226 + 16) = 32;
  uint64_t v227 = swift_allocObject();
  *(unsigned char *)(v227 + 16) = 8;
  uint64_t v210 = swift_allocObject();
  *(void *)(v210 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  *(void *)(v210 + 24) = v209;
  uint64_t v228 = swift_allocObject();
  *(void *)(v228 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v228 + 24) = v210;
  uint64_t v229 = swift_allocObject();
  *(unsigned char *)(v229 + 16) = 0;
  uint64_t v230 = swift_allocObject();
  *(unsigned char *)(v230 + 16) = 4;
  uint64_t v212 = swift_allocObject();
  *(void *)(v212 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(void *)(v212 + 24) = v211;
  uint64_t v213 = swift_allocObject();
  *(void *)(v213 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(void *)(v213 + 24) = v212;
  uint64_t v214 = swift_allocObject();
  *(void *)(v214 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(void *)(v214 + 24) = v213;
  uint64_t v231 = swift_allocObject();
  *(void *)(v231 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
  *(void *)(v231 + 24) = v214;
  uint64_t v232 = swift_allocObject();
  *(unsigned char *)(v232 + 16) = 32;
  uint64_t v233 = swift_allocObject();
  *(unsigned char *)(v233 + 16) = 8;
  uint64_t v216 = swift_allocObject();
  *(void *)(v216 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  *(void *)(v216 + 24) = v215;
  uint64_t v234 = swift_allocObject();
  *(void *)(v234 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v234 + 24) = v216;
  uint64_t v235 = swift_allocObject();
  *(unsigned char *)(v235 + 16) = 32;
  uint64_t v236 = swift_allocObject();
  *(unsigned char *)(v236 + 16) = 8;
  uint64_t v218 = swift_allocObject();
  *(void *)(v218 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  *(void *)(v218 + 24) = v217;
  uint64_t v237 = swift_allocObject();
  *(void *)(v237 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v237 + 24) = v218;
  uint64_t v238 = swift_allocObject();
  *(unsigned char *)(v238 + 16) = 32;
  uint64_t v239 = swift_allocObject();
  *(unsigned char *)(v239 + 16) = 8;
  uint64_t v220 = swift_allocObject();
  *(void *)(v220 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(void *)(v220 + 24) = v219;
  uint64_t v240 = swift_allocObject();
  *(void *)(v240 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v240 + 24) = v220;
  uint64_t v241 = swift_allocObject();
  *(unsigned char *)(v241 + 16) = 32;
  uint64_t v242 = swift_allocObject();
  *(unsigned char *)(v242 + 16) = 8;
  uint64_t v222 = swift_allocObject();
  *(void *)(v222 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(void *)(v222 + 24) = v221;
  uint64_t v243 = swift_allocObject();
  *(void *)(v243 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v243 + 24) = v222;
  *(void *)(v0 + 1616) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  NSMeasurement v244 = v3;
  swift_retain();
  *NSMeasurement v244 = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[1] = v223;
  swift_retain();
  v244[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[3] = v224;
  swift_retain();
  v244[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[5] = v225;
  swift_retain();
  v244[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[7] = v226;
  swift_retain();
  v244[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[9] = v227;
  swift_retain();
  v244[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[11] = v228;
  swift_retain();
  v244[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[13] = v229;
  swift_retain();
  v244[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[15] = v230;
  swift_retain();
  v244[16] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v244[17] = v231;
  swift_retain();
  v244[18] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[19] = v232;
  swift_retain();
  v244[20] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[21] = v233;
  swift_retain();
  v244[22] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[23] = v234;
  swift_retain();
  v244[24] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[25] = v235;
  swift_retain();
  v244[26] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[27] = v236;
  swift_retain();
  v244[28] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[29] = v237;
  swift_retain();
  v244[30] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[31] = v238;
  swift_retain();
  v244[32] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[33] = v239;
  swift_retain();
  v244[34] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[35] = v240;
  swift_retain();
  v244[36] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[37] = v241;
  swift_retain();
  v244[38] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[39] = v242;
  swift_retain();
  v244[40] = partial apply for closure #1 in OSLogArguments.append(_:);
  v244[41] = v243;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v245, v246))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v188 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v190 = createStorage<A>(capacity:type:)(0);
    uint64_t v191 = createStorage<A>(capacity:type:)(6);
    unsigned int v252 = buf;
    uint64_t v253 = v190;
    uint64_t v254 = v191;
    serialize(_:at:)(2, &v252);
    serialize(_:at:)(7, &v252);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v223;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v224;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v225;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v226;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v227;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v228;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v229;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v230;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    uint64_t v256 = v231;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v232;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v233;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v234;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v235;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v236;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v237;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v238;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v239;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v240;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v241;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v242;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    uint64_t v255 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v256 = v243;
    closure #1 in osLogInternal(_:log:type:)(&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    _os_log_impl(&dword_25DE00000, v245, v246, "Calling saveWithID() for specified scheduleID (%s) and potentially medicationID (%s) with medStatus: %{BOOL}d, confirmedAsScheduled: %s, confirmedAsNeeded: (%s), dosage (%s), dosageUnit (%s)", buf, size);
    destroyStorage<A>(_:count:)(v190, 0, v188);
    destroyStorage<A>(_:count:)(v191, 6, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v177 = *(void *)(v192 + 1568);
  uint64_t v178 = *(void *)(v192 + 1456);
  uint64_t v180 = *(void *)(v192 + 1424);
  uint64_t v184 = *(void *)(v192 + 1416);
  uint64_t v181 = *(void *)(v192 + 1408);
  uint64_t v185 = *(void *)(v192 + 1400);
  uint64_t v182 = *(void *)(v192 + 1384);
  uint64_t v187 = *(void *)(v192 + 1336);
  uint64_t v176 = *(void *)(v192 + 1464);
  uint64_t v179 = *(void *)(v192 + 1392);

  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v176 + 8);
  *(void *)(v192 + 1624) = v4;
  *(void *)(v192 + 1632) = (v176 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v4(v177, v178);
  Date.init()();
  Date.startOfDay.getter(v184);
  uint64_t v183 = *(void (**)(uint64_t, uint64_t))(v179 + 8);
  v183(v180, v182);
  Date.init()();
  Date.endOfDay.getter(v185);
  v183(v181, v182);
  DateInterval.init(start:end:)();
  *(void *)(v192 + 1640) = type metadata accessor for HKMedicationExposableDoseEvent();
  uint64_t v186 = _allocateUninitializedArray<A>(_:)();
  *(void *)(v192 + 1648) = v186;
  swift_bridgeObjectRetain();
  *(void *)(v192 + 624) = v186;
  swift_bridgeObjectRetain();
  if (!v187)
  {
    uint32_t v32 = (void *)swift_task_alloc();
    *(void *)(v192 + 1792) = v32;
    void *v32 = *(void *)(v192 + 600);
    v32[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    uint64_t v8 = *(void *)(v192 + 1448);
    uint64_t v9 = *(void *)(v192 + 1376);
    uint64_t v10 = *(void *)(v192 + 1368);
    uint64_t v7 = 0;
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v8, v7, v10, v9);
  }
  uint64_t v173 = *(void *)(v192 + 1336);
  swift_bridgeObjectRelease();
  *(void *)(v192 + 992) = v173;
  swift_bridgeObjectRetain();
  *(void *)(v192 + 1000) = v173;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  Collection<>.makeIterator()();
  *(void *)(v192 + 1656) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  uint64_t v174 = *(void *)(v192 + 528);
  uint64_t v175 = *(void *)(v192 + 536);
  *(void *)(v192 + 1664) = v175;
  if (v175)
  {
    *(void *)(v192 + 544) = v174;
    *(void *)(v192 + 552) = v175;
    uint64_t v5 = swift_allocObject();
    *(void *)(v192 + 1672) = v5;
    *(void *)(v192 + 1264) = v5 + 16;
    type metadata accessor for HKMedicationIdentifier();
    swift_bridgeObjectRetain();
    id v172 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
    *(void *)(v192 + 1680) = v172;
    id v6 = (void *)swift_task_alloc();
    uint64_t v7 = (uint64_t)v172;
    *(void *)(v192 + 1688) = v6;
    void *v6 = *(void *)(v192 + 600);
    v6[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    uint64_t v8 = *(void *)(v192 + 1448);
    uint64_t v9 = *(void *)(v192 + 1376);
    uint64_t v10 = *(void *)(v192 + 1368);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v8, v7, v10, v9);
  }
  char v171 = *(unsigned char *)(v192 + 1922);
  outlined destroy of [HKQuantityType]();
  *(unsigned char *)(v192 + 585) = v171;
  *(unsigned char *)(v192 + 586) = 1;
  if (*(unsigned char *)(v192 + 585) == 2)
  {
    if (*(unsigned char *)(v192 + 586) != 2) {
      goto LABEL_27;
    }
  }
  else
  {
    outlined init with copy of Bool?((unsigned char *)(v192 + 585), (unsigned char *)(v192 + 1913));
    if (*(unsigned char *)(v192 + 586) == 2 || (*(unsigned char *)(v192 + 1913) & 1) != (*(unsigned char *)(v192 + 586) & 1)) {
      goto LABEL_27;
    }
  }
  *(unsigned char *)(v192 + 591) = *(unsigned char *)(v192 + 1921);
  *(unsigned char *)(v192 + 592) = 0;
  if (*(unsigned char *)(v192 + 591) != 2)
  {
    outlined init with copy of Bool?((unsigned char *)(v192 + 591), (unsigned char *)(v192 + 595));
    if (*(unsigned char *)(v192 + 592) != 2)
    {
      BOOL v170 = (*(unsigned char *)(v192 + 595) & 1) == (*(unsigned char *)(v192 + 592) & 1);
      goto LABEL_23;
    }
    goto LABEL_25;
  }
  if (*(unsigned char *)(v192 + 592) != 2)
  {
LABEL_25:
    BOOL v170 = 0;
    goto LABEL_23;
  }
  BOOL v170 = 1;
LABEL_23:
  if (v170)
  {
    uint64_t v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(v192 + 1576);
    uint64_t v29 = *(void *)(v192 + 1520);
    uint64_t v100 = *(void *)(v192 + 1456);
    uint64_t v99 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v101(v29, v99, v100);
    swift_endAccess();
    os_log_type_t v104 = Logger.logObject.getter();
    os_log_type_t v103 = static os_log_type_t.debug.getter();
    *(void *)(v192 + 1216) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v102 = *(_DWORD *)(v192 + 1964);
    uint64_t v105 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v104, v103))
    {
      uint64_t v95 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v96 = createStorage<A>(capacity:type:)(0);
      uint64_t v97 = createStorage<A>(capacity:type:)(0);
      *(void *)(v192 + 1232) = v95;
      *(void *)(v192 + 1240) = v96;
      *(void *)(v192 + 1248) = v97;
      serialize(_:at:)(0, (unsigned char **)(v192 + 1232));
      serialize(_:at:)(0, (unsigned char **)(v192 + 1232));
      *(void *)(v192 + 1256) = v105;
      uint64_t v98 = (void *)swift_task_alloc();
      v98[2] = v192 + 1232;
      v98[3] = v192 + 1240;
      v98[4] = v192 + 1248;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v104, v103, "saveWithID: confirmedAsScheduled is true, confirmedAsNeeded is false. No reprompt needed - continuing.", v95, v102);
      destroyStorage<A>(_:count:)(v96, 0, v94);
      destroyStorage<A>(_:count:)(v97, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v95, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    char v88 = *(void (**)(uint64_t, uint64_t))(v192 + 1624);
    uint64_t v86 = *(void *)(v192 + 1520);
    uint64_t v87 = *(void *)(v192 + 1456);
    uint64_t v91 = *(void *)(v192 + 1328);
    uint64_t v90 = *(void *)(v192 + 1320);

    v88(v86, v87);
    uint64_t v89 = *(void *)(v192 + 624);
    swift_bridgeObjectRetain();
    *(void *)(v192 + 1224) = v89;
    swift_bridgeObjectRetain();
    uint64_t v92 = swift_task_alloc();
    *(void *)(v92 + 16) = v90;
    *(void *)(v92 + 24) = v91;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    uint64_t v93 = _ArrayProtocol.filter(_:)();
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    *(void *)(v192 + 632) = v93;
    swift_bridgeObjectRelease();
    uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v192 + 1576);
    uint64_t v30 = *(void *)(v192 + 1480);
    uint64_t v59 = *(void *)(v192 + 1456);
    char v64 = *(unsigned char *)(v192 + 1914);
    uint64_t v63 = *(void *)(v192 + 1336);
    uint64_t v62 = *(void *)(v192 + 1328);
    uint64_t v61 = *(void *)(v192 + 1320);
    uint64_t v58 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v60(v30, v58, v59);
    swift_endAccess();
    swift_bridgeObjectRetain();
    uint64_t v66 = swift_allocObject();
    *(void *)(v66 + 16) = v61;
    *(void *)(v66 + 24) = v62;
    swift_bridgeObjectRetain();
    uint64_t v68 = swift_allocObject();
    *(void *)(v68 + 16) = v63;
    uint64_t v70 = swift_allocObject();
    *(unsigned char *)(v70 + 16) = v64 & 1;
    uint64_t v84 = Logger.logObject.getter();
    os_log_type_t v85 = static os_log_type_t.debug.getter();
    *(void *)(v192 + 832) = 28;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v65 = *(_DWORD *)(v192 + 1936);
    uint64_t v74 = swift_allocObject();
    *(unsigned char *)(v74 + 16) = 32;
    uint64_t v75 = swift_allocObject();
    *(unsigned char *)(v75 + 16) = 8;
    uint64_t v67 = swift_allocObject();
    *(void *)(v67 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v67 + 24) = v66;
    uint64_t v76 = swift_allocObject();
    *(void *)(v76 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v76 + 24) = v67;
    uint64_t v77 = swift_allocObject();
    *(unsigned char *)(v77 + 16) = 32;
    uint64_t v78 = swift_allocObject();
    *(unsigned char *)(v78 + 16) = 8;
    uint64_t v69 = swift_allocObject();
    *(void *)(v69 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    *(void *)(v69 + 24) = v68;
    uint64_t v79 = swift_allocObject();
    *(void *)(v79 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v79 + 24) = v69;
    uint64_t v80 = swift_allocObject();
    *(unsigned char *)(v80 + 16) = 0;
    uint64_t v81 = swift_allocObject();
    *(unsigned char *)(v81 + 16) = 4;
    uint64_t v71 = swift_allocObject();
    *(void *)(v71 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(void *)(v71 + 24) = v70;
    uint64_t v72 = swift_allocObject();
    *(void *)(v72 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
    *(void *)(v72 + 24) = v71;
    uint64_t v73 = swift_allocObject();
    *(void *)(v73 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
    *(void *)(v73 + 24) = v72;
    uint64_t v82 = swift_allocObject();
    *(void *)(v82 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
    *(void *)(v82 + 24) = v73;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v83 = v31;
    swift_retain();
    *uint64_t v83 = partial apply for closure #1 in OSLogArguments.append(_:);
    v83[1] = v74;
    swift_retain();
    v83[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v83[3] = v75;
    swift_retain();
    v83[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v83[5] = v76;
    swift_retain();
    v83[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v83[7] = v77;
    swift_retain();
    v83[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v83[9] = v78;
    swift_retain();
    v83[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v83[11] = v79;
    swift_retain();
    v83[12] = partial apply for closure #1 in OSLogArguments.append(_:);
    v83[13] = v80;
    swift_retain();
    v83[14] = partial apply for closure #1 in OSLogArguments.append(_:);
    v83[15] = v81;
    swift_retain();
    v83[16] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v83[17] = v82;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v55 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v56 = createStorage<A>(capacity:type:)(0);
      uint64_t v57 = createStorage<A>(capacity:type:)(2);
      uint64_t v247 = v55;
      uint64_t v248 = v56;
      uint64_t v249 = v57;
      serialize(_:at:)(2, &v247);
      serialize(_:at:)(3, &v247);
      uint64_t v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v251 = v74;
      closure #1 in osLogInternal(_:log:type:)(&v250, (uint64_t)&v247, (uint64_t)&v248, (uint64_t)&v249);
      uint64_t v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v251 = v75;
      closure #1 in osLogInternal(_:log:type:)(&v250, (uint64_t)&v247, (uint64_t)&v248, (uint64_t)&v249);
      uint64_t v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v251 = v76;
      closure #1 in osLogInternal(_:log:type:)(&v250, (uint64_t)&v247, (uint64_t)&v248, (uint64_t)&v249);
      uint64_t v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v251 = v77;
      closure #1 in osLogInternal(_:log:type:)(&v250, (uint64_t)&v247, (uint64_t)&v248, (uint64_t)&v249);
      uint64_t v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v251 = v78;
      closure #1 in osLogInternal(_:log:type:)(&v250, (uint64_t)&v247, (uint64_t)&v248, (uint64_t)&v249);
      uint64_t v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v251 = v79;
      closure #1 in osLogInternal(_:log:type:)(&v250, (uint64_t)&v247, (uint64_t)&v248, (uint64_t)&v249);
      uint64_t v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v251 = v80;
      closure #1 in osLogInternal(_:log:type:)(&v250, (uint64_t)&v247, (uint64_t)&v248, (uint64_t)&v249);
      uint64_t v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v251 = v81;
      closure #1 in osLogInternal(_:log:type:)(&v250, (uint64_t)&v247, (uint64_t)&v248, (uint64_t)&v249);
      uint64_t v250 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      uint64_t v251 = v82;
      closure #1 in osLogInternal(_:log:type:)(&v250, (uint64_t)&v247, (uint64_t)&v248, (uint64_t)&v249);
      _os_log_impl(&dword_25DE00000, v84, v85, "Calling writeDoseEvent() for specified scheduleID (%s) and potentially medicationID (%s) with medStatus: %{BOOL}d", v55, v65);
      destroyStorage<A>(_:count:)(v56, 0, v54);
      destroyStorage<A>(_:count:)(v57, 2, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v55, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v192 + 1624);
    uint64_t v48 = *(void *)(v192 + 1480);
    uint64_t v49 = *(void *)(v192 + 1456);
    id v51 = *(id *)(v192 + 1376);
    uint64_t v53 = *(void *)(v192 + 1336);

    v50(v48, v49);
    id v33 = v51;
    uint64_t v52 = *(void *)(v192 + 632);
    *(void *)(v192 + 1888) = v52;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v53)
    {
      uint64_t v43 = *(void *)(v192 + 1336);
      swift_bridgeObjectRetain();
      *(void *)(v192 + 840) = v43;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      uint64_t v44 = *(void *)(v192 + 480);
      uint64_t v45 = *(void *)(v192 + 488);
      swift_bridgeObjectRelease();
      uint64_t v46 = v44;
      uint64_t v47 = v45;
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v47 = 0;
    }
    *(void *)(v192 + 464) = v46;
    *(void *)(v192 + 472) = v47;
    BOOL v42 = *(void *)(v192 + 472) != 0;
    char v41 = *(unsigned char *)(v192 + 1915);
    outlined destroy of String.UTF8View();
    uint64_t v34 = (void *)swift_task_alloc();
    *(void *)(v192 + 1896) = v34;
    void *v34 = *(void *)(v192 + 600);
    v34[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    uint64_t v35 = *(void *)(v192 + 1376);
    uint64_t v36 = *(void *)(v192 + 1360);
    uint64_t v37 = *(void *)(v192 + 1352);
    uint64_t v38 = *(void *)(v192 + 1344);
    char v39 = *(unsigned char *)(v192 + 1914);
    uint64_t v263 = *(void *)(v192 + 1368);
    uint64_t v264 = v35;
    return SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(v35, v52, v39 & 1, v42, v38, v41 & 1, v37, v36);
  }
LABEL_27:
  *(unsigned char *)(v192 + 587) = *(unsigned char *)(v192 + 1921);
  *(unsigned char *)(v192 + 588) = 1;
  if (*(unsigned char *)(v192 + 587) == 2)
  {
    if (*(unsigned char *)(v192 + 588) != 2)
    {
LABEL_54:
      uint64_t v126 = *(void *)(v192 + 624);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      *(void *)(v192 + 1016) = v126;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
      lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      uint64_t v127 = *(void *)(v192 + 1008);
      *(void *)(v192 + 1752) = v127;
      if (v127)
      {
        char v125 = *(unsigned char *)(v192 + 1915);
        *(void *)(v192 + 1064) = v127;
        swift_bridgeObjectRelease();
        char v22 = (void *)swift_task_alloc();
        *(void *)(v192 + 1760) = v22;
        *char v22 = *(void *)(v192 + 600);
        v22[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
        uint64_t v23 = *(void *)(v192 + 1376);
        uint64_t v24 = *(void *)(v192 + 1368);
        uint64_t v25 = *(void *)(v192 + 1360);
        uint64_t v26 = *(void *)(v192 + 1352);
        uint64_t v27 = *(void *)(v192 + 1344);
        return SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)(v127, v27, v125 & 1, v26, v25, v24, v23);
      }
      uint64_t v120 = *(void (**)(uint64_t, uint64_t, uint64_t))(v192 + 1576);
      uint64_t v28 = *(void *)(v192 + 1528);
      uint64_t v119 = *(void *)(v192 + 1456);
      swift_bridgeObjectRelease();
      uint64_t v118 = Logger.wellness.unsafeMutableAddressor();
      swift_beginAccess();
      v120(v28, v118, v119);
      swift_endAccess();
      uint64_t v123 = Logger.logObject.getter();
      os_log_type_t v122 = static os_log_type_t.error.getter();
      *(void *)(v192 + 1024) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v121 = *(_DWORD *)(v192 + 1948);
      uint64_t v124 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v123, v122))
      {
        uint64_t v114 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v113 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v115 = createStorage<A>(capacity:type:)(0);
        uint64_t v116 = createStorage<A>(capacity:type:)(0);
        *(void *)(v192 + 1032) = v114;
        *(void *)(v192 + 1040) = v115;
        *(void *)(v192 + 1048) = v116;
        serialize(_:at:)(0, (unsigned char **)(v192 + 1032));
        serialize(_:at:)(0, (unsigned char **)(v192 + 1032));
        *(void *)(v192 + 1056) = v124;
        uint64_t v117 = (void *)swift_task_alloc();
        v117[2] = v192 + 1032;
        v117[3] = v192 + 1040;
        v117[4] = v192 + 1048;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25DE00000, v123, v122, "No doseEvent found in saveWithID's fallback condition, returning failure status", v114, v121);
        destroyStorage<A>(_:count:)(v115, 0, v113);
        destroyStorage<A>(_:count:)(v116, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v114, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v108 = *(void (**)(uint64_t, uint64_t))(v192 + 1624);
      uint64_t v106 = *(void *)(v192 + 1528);
      uint64_t v107 = *(void *)(v192 + 1456);
      uint64_t v111 = *(void *)(v192 + 1448);
      uint64_t v110 = *(void *)(v192 + 1432);
      uint64_t v109 = *(void *)(v192 + 1440);

      v108(v106, v107);
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      uint64_t v112 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
      swift_bridgeObjectRelease();
      outlined destroy of [HKQuantityType]();
      (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v111, v110);
      uint64_t v135 = v112;
      goto LABEL_75;
    }
  }
  else
  {
    outlined init with copy of Bool?((unsigned char *)(v192 + 587), (unsigned char *)(v192 + 594));
    if (*(unsigned char *)(v192 + 588) == 2 || (*(unsigned char *)(v192 + 594) & 1) != (*(unsigned char *)(v192 + 588) & 1)) {
      goto LABEL_54;
    }
  }
  *(unsigned char *)(v192 + 589) = *(unsigned char *)(v192 + 1922);
  *(unsigned char *)(v192 + 590) = 0;
  if (*(unsigned char *)(v192 + 589) == 2)
  {
    if (*(unsigned char *)(v192 + 590) == 2)
    {
      BOOL v169 = 1;
      goto LABEL_41;
    }
    goto LABEL_43;
  }
  outlined init with copy of Bool?((unsigned char *)(v192 + 589), (unsigned char *)(v192 + 593));
  if (*(unsigned char *)(v192 + 590) == 2)
  {
LABEL_43:
    BOOL v169 = 0;
    goto LABEL_41;
  }
  BOOL v169 = (*(unsigned char *)(v192 + 593) & 1) == (*(unsigned char *)(v192 + 590) & 1);
LABEL_41:
  if (!v169) {
    goto LABEL_54;
  }
  uint64_t v164 = *(void (**)(uint64_t, uint64_t, uint64_t))(v192 + 1576);
  uint64_t v12 = *(void *)(v192 + 1552);
  uint64_t v163 = *(void *)(v192 + 1456);
  uint64_t v162 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v164(v12, v162, v163);
  swift_endAccess();
  oslog = Logger.logObject.getter();
  os_log_type_t v166 = static os_log_type_t.debug.getter();
  *(void *)(v192 + 1112) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v165 = *(_DWORD *)(v192 + 1956);
  uint64_t v168 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v166))
  {
    uint64_t v158 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v159 = createStorage<A>(capacity:type:)(0);
    uint64_t v160 = createStorage<A>(capacity:type:)(0);
    *(void *)(v192 + 1184) = v158;
    *(void *)(v192 + 1192) = v159;
    *(void *)(v192 + 1200) = v160;
    serialize(_:at:)(0, (unsigned char **)(v192 + 1184));
    serialize(_:at:)(0, (unsigned char **)(v192 + 1184));
    *(void *)(v192 + 1208) = v168;
    uint64_t v161 = (void *)swift_task_alloc();
    v161[2] = v192 + 1184;
    v161[3] = v192 + 1192;
    v161[4] = v192 + 1200;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, oslog, v166, "saveWithID: confirmedAsNeeded is true, confirmedAsScheduled is false. No reprompt needed - continuing.", v158, v165);
    destroyStorage<A>(_:count:)(v159, 0, v157);
    destroyStorage<A>(_:count:)(v160, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v158, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  unint64_t v154 = *(void (**)(uint64_t, uint64_t))(v192 + 1624);
  uint64_t v152 = *(void *)(v192 + 1552);
  uint64_t v153 = *(void *)(v192 + 1456);

  v154(v152, v153);
  uint64_t v155 = *(void *)(v192 + 624);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v192 + 1128) = v155;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [HKQuantityType]();
  unint64_t v156 = *(void **)(v192 + 1120);
  *(void *)(v192 + 1712) = v156;
  if (!v156)
  {
    uint64_t v143 = *(void (**)(uint64_t, uint64_t, uint64_t))(v192 + 1576);
    uint64_t v21 = *(void *)(v192 + 1544);
    uint64_t v142 = *(void *)(v192 + 1456);
    swift_bridgeObjectRelease();
    uint64_t v141 = Logger.wellness.unsafeMutableAddressor();
    swift_beginAccess();
    v143(v21, v141, v142);
    swift_endAccess();
    log = Logger.logObject.getter();
    os_log_type_t v145 = static os_log_type_t.error.getter();
    *(void *)(v192 + 1136) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v144 = *(_DWORD *)(v192 + 1960);
    uint64_t v147 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v145))
    {
      unint64_t v137 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v138 = createStorage<A>(capacity:type:)(0);
      uint64_t v139 = createStorage<A>(capacity:type:)(0);
      *(void *)(v192 + 1144) = v137;
      *(void *)(v192 + 1152) = v138;
      *(void *)(v192 + 1160) = v139;
      serialize(_:at:)(0, (unsigned char **)(v192 + 1144));
      serialize(_:at:)(0, (unsigned char **)(v192 + 1144));
      *(void *)(v192 + 1168) = v147;
      unsigned int v140 = (void *)swift_task_alloc();
      v140[2] = v192 + 1144;
      v140[3] = v192 + 1152;
      v140[4] = v192 + 1160;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, log, v145, "No doseEvent found in saveWithID's fallback condition, returning failure status", v137, v144);
      destroyStorage<A>(_:count:)(v138, 0, v136);
      destroyStorage<A>(_:count:)(v139, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v137, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v130 = *(void (**)(uint64_t, uint64_t))(v192 + 1624);
    uint64_t v128 = *(void *)(v192 + 1544);
    uint64_t v129 = *(void *)(v192 + 1456);
    uint64_t v133 = *(void *)(v192 + 1448);
    uint64_t v132 = *(void *)(v192 + 1432);
    uint64_t v131 = *(void *)(v192 + 1440);

    v130(v128, v129);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v134 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    swift_bridgeObjectRelease();
    outlined destroy of [HKQuantityType]();
    (*(void (**)(uint64_t, uint64_t))(v131 + 8))(v133, v132);
    uint64_t v135 = v134;
LABEL_75:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v40 = *(uint64_t (**)(char *))(*(void *)(v192 + 600) + 8);
    return v40(v135);
  }
  char v150 = *(unsigned char *)(v192 + 1915);
  *(void *)(v192 + 1176) = v156;
  swift_bridgeObjectRelease();
  id v148 = objc_msgSend(v156, sel_medicationIdentifier);
  *(void *)(v192 + 1720) = objc_msgSend(v148, sel_underlyingIdentifier);
  uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v149 = v13;
  *(void *)(v192 + 1728) = v13;

  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v192 + 1736) = v14;
  *uint64_t v14 = *(void *)(v192 + 600);
  v14[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  uint64_t v15 = *(void *)(v192 + 1376);
  uint64_t v16 = *(void *)(v192 + 1368);
  uint64_t v17 = *(void *)(v192 + 1360);
  uint64_t v18 = *(void *)(v192 + 1352);
  uint64_t v19 = *(void *)(v192 + 1344);
  char v20 = *(unsigned char *)(v192 + 1914);
  char v259 = 1;
  uint64_t v260 = 0;
  uint64_t v261 = 0;
  uint64_t v262 = v16;
  uint64_t v263 = v15;
  return SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)(v151, v149, v20 & 1, v19, v150 & 1, v18, v17, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t (*v38)(char *);
  char v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint32_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t, uint64_t);
  uint32_t v100;
  os_log_type_t v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(uint64_t, uint64_t, uint64_t);
  uint32_t v119;
  os_log_type_t v120;
  NSObject *v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint8_t *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(uint64_t, uint64_t, uint64_t);
  uint32_t v142;
  os_log_type_t v143;
  NSObject *v144;
  uint64_t v145;
  id v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(uint64_t, uint64_t);
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint8_t *v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(uint64_t, uint64_t, uint64_t);
  uint32_t v163;
  os_log_type_t v164;
  NSObject *log;
  uint64_t v166;
  BOOL v167;
  BOOL v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t);
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint8_t *buf;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void (*v181)(uint64_t, uint64_t, uint64_t);
  uint64_t v182;
  uint32_t size;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  void *v189;
  NSObject *oslog;
  os_log_type_t v191;
  uint64_t v192;
  uint64_t v193;
  id v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint8_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t (*v205)(uint64_t, uint64_t, uint64_t);
  uint64_t v206;
  void *v207;
  uint64_t v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;

  uint64_t v207 = v0;
  uint64_t v1 = v0[213];
  char v2 = v0[212];
  uint64_t v196 = v0[209];
  char v199 = v0[166];
  uint64_t v198 = v0[165];
  v0[75] = v0;
  *(void *)(v196 + 16) = v2;
  swift_beginAccess();
  uint64_t v197 = *(void *)(v196 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  v0[159] = v197;
  swift_bridgeObjectRetain();
  char v200 = swift_task_alloc();
  *(void *)(v200 + 16) = v198;
  *(void *)(v200 + 24) = v199;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  id result = _ArrayProtocol.filter(_:)();
  char v201 = result;
  if (v1) {
    return result;
  }
  uint64_t v182 = *(void *)(v195 + 1672);
  uint64_t v181 = *(void (**)(uint64_t, uint64_t, uint64_t))(v195 + 1576);
  uint64_t v9 = *(void *)(v195 + 1560);
  uint64_t v180 = *(void *)(v195 + 1456);
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v182 + 16) = v201;
  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v179 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v181(v9, v179, v180);
  swift_endAccess();
  swift_retain();
  swift_retain();
  uint64_t v184 = swift_allocObject();
  *(void *)(v184 + 16) = partial apply for implicit closure #6 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
  *(void *)(v184 + 24) = v182;
  swift_release();
  oslog = Logger.logObject.getter();
  uint64_t v191 = static os_log_type_t.debug.getter();
  *(void *)(v195 + 1280) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v195 + 1968);
  uint64_t v186 = swift_allocObject();
  *(unsigned char *)(v186 + 16) = 32;
  uint64_t v187 = swift_allocObject();
  *(unsigned char *)(v187 + 16) = 8;
  uint64_t v185 = swift_allocObject();
  *(void *)(v185 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  *(void *)(v185 + 24) = v184;
  uint64_t v188 = swift_allocObject();
  *(void *)(v188 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v188 + 24) = v185;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v189 = v10;
  swift_retain();
  *uint64_t v189 = partial apply for closure #1 in OSLogArguments.append(_:);
  v189[1] = v186;
  swift_retain();
  v189[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v189[3] = v187;
  swift_retain();
  v189[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v189[5] = v188;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v191))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v177 = createStorage<A>(capacity:type:)(0);
    uint64_t v178 = createStorage<A>(capacity:type:)(1);
    *(void *)(v195 + 1296) = buf;
    *(void *)(v195 + 1304) = v177;
    *(void *)(v195 + 1312) = v178;
    serialize(_:at:)(2, (unsigned char **)(v195 + 1296));
    serialize(_:at:)(1, (unsigned char **)(v195 + 1296));
    *(void *)(v195 + 560) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v195 + 568) = v186;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v195 + 560), v195 + 1296, v195 + 1304, v195 + 1312);
    *(void *)(v195 + 560) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v195 + 568) = v187;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v195 + 560), v195 + 1296, v195 + 1304, v195 + 1312);
    *(void *)(v195 + 560) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v195 + 568) = v188;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v195 + 560), v195 + 1296, v195 + 1304, v195 + 1312);
    _os_log_impl(&dword_25DE00000, oslog, v191, "doseEventsForID: %s", buf, size);
    destroyStorage<A>(_:count:)(v177, 0, v175);
    destroyStorage<A>(_:count:)(v178, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_release();
  swift_release();
  swift_release();
  id v172 = *(void (**)(uint64_t, uint64_t))(v195 + 1624);
  BOOL v170 = *(void *)(v195 + 1560);
  char v171 = *(void *)(v195 + 1456);
  uint64_t v173 = (uint64_t *)(*(void *)(v195 + 1672) + 16);

  v172(v170, v171);
  swift_beginAccess();
  uint64_t v174 = *v173;
  swift_bridgeObjectRetain();
  swift_endAccess();
  *(void *)(v195 + 1288) = v174;
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Array.append<A>(contentsOf:)();
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v195 + 1656) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  uint64_t v193 = *(void *)(v195 + 528);
  uint64_t v192 = *(void *)(v195 + 536);
  *(void *)(v195 + 1664) = v192;
  if (v192)
  {
    *(void *)(v195 + 544) = v193;
    *(void *)(v195 + 552) = v192;
    uint64_t v4 = swift_allocObject();
    *(void *)(v195 + 1672) = v4;
    *(void *)(v195 + 1264) = v4 + 16;
    type metadata accessor for HKMedicationIdentifier();
    swift_bridgeObjectRetain();
    uint64_t v194 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
    *(void *)(v195 + 1680) = v194;
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v195 + 1688) = v5;
    *uint64_t v5 = *(void *)(v195 + 600);
    v5[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    id v6 = *(void *)(v195 + 1448);
    uint64_t v7 = *(void *)(v195 + 1376);
    uint64_t v8 = *(void *)(v195 + 1368);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v6, (uint64_t)v194, v8, v7);
  }
  BOOL v169 = *(unsigned char *)(v195 + 1922);
  outlined destroy of [HKQuantityType]();
  *(unsigned char *)(v195 + 585) = v169;
  *(unsigned char *)(v195 + 586) = 1;
  if (*(unsigned char *)(v195 + 585) == 2)
  {
    if (*(unsigned char *)(v195 + 586) != 2) {
      goto LABEL_27;
    }
  }
  else
  {
    outlined init with copy of Bool?((unsigned char *)(v195 + 585), (unsigned char *)(v195 + 1913));
    if (*(unsigned char *)(v195 + 586) == 2 || (*(unsigned char *)(v195 + 1913) & 1) != (*(unsigned char *)(v195 + 586) & 1)) {
      goto LABEL_27;
    }
  }
  *(unsigned char *)(v195 + 591) = *(unsigned char *)(v195 + 1921);
  *(unsigned char *)(v195 + 592) = 0;
  if (*(unsigned char *)(v195 + 591) != 2)
  {
    outlined init with copy of Bool?((unsigned char *)(v195 + 591), (unsigned char *)(v195 + 595));
    if (*(unsigned char *)(v195 + 592) != 2)
    {
      uint64_t v168 = (*(unsigned char *)(v195 + 595) & 1) == (*(unsigned char *)(v195 + 592) & 1);
      goto LABEL_23;
    }
    goto LABEL_25;
  }
  if (*(unsigned char *)(v195 + 592) != 2)
  {
LABEL_25:
    uint64_t v168 = 0;
    goto LABEL_23;
  }
  uint64_t v168 = 1;
LABEL_23:
  if (v168)
  {
    uint64_t v99 = *(void (**)(uint64_t, uint64_t, uint64_t))(v195 + 1576);
    uint64_t v28 = *(void *)(v195 + 1520);
    uint64_t v98 = *(void *)(v195 + 1456);
    uint64_t v97 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v99(v28, v97, v98);
    swift_endAccess();
    uint32_t v102 = Logger.logObject.getter();
    uint64_t v101 = static os_log_type_t.debug.getter();
    *(void *)(v195 + 1216) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v100 = *(_DWORD *)(v195 + 1964);
    os_log_type_t v103 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v102, v101))
    {
      uint64_t v93 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v94 = createStorage<A>(capacity:type:)(0);
      uint64_t v95 = createStorage<A>(capacity:type:)(0);
      *(void *)(v195 + 1232) = v93;
      *(void *)(v195 + 1240) = v94;
      *(void *)(v195 + 1248) = v95;
      serialize(_:at:)(0, (unsigned char **)(v195 + 1232));
      serialize(_:at:)(0, (unsigned char **)(v195 + 1232));
      *(void *)(v195 + 1256) = v103;
      uint64_t v96 = (void *)swift_task_alloc();
      v96[2] = v195 + 1232;
      v96[3] = v195 + 1240;
      v96[4] = v195 + 1248;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v102, v101, "saveWithID: confirmedAsScheduled is true, confirmedAsNeeded is false. No reprompt needed - continuing.", v93, v100);
      destroyStorage<A>(_:count:)(v94, 0, v92);
      destroyStorage<A>(_:count:)(v95, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v93, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v86 = *(void (**)(uint64_t, uint64_t))(v195 + 1624);
    uint64_t v84 = *(void *)(v195 + 1520);
    os_log_type_t v85 = *(void *)(v195 + 1456);
    uint64_t v89 = *(void *)(v195 + 1328);
    char v88 = *(void *)(v195 + 1320);

    v86(v84, v85);
    uint64_t v87 = *(void *)(v195 + 624);
    swift_bridgeObjectRetain();
    *(void *)(v195 + 1224) = v87;
    swift_bridgeObjectRetain();
    uint64_t v90 = swift_task_alloc();
    *(void *)(v90 + 16) = v88;
    *(void *)(v90 + 24) = v89;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    uint64_t v91 = _ArrayProtocol.filter(_:)();
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    *(void *)(v195 + 632) = v91;
    swift_bridgeObjectRelease();
    uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v195 + 1576);
    uint64_t v29 = *(void *)(v195 + 1480);
    uint64_t v57 = *(void *)(v195 + 1456);
    uint64_t v62 = *(unsigned char *)(v195 + 1914);
    uint64_t v61 = *(void *)(v195 + 1336);
    uint64_t v60 = *(void *)(v195 + 1328);
    uint64_t v59 = *(void *)(v195 + 1320);
    uint64_t v56 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v58(v29, v56, v57);
    swift_endAccess();
    swift_bridgeObjectRetain();
    char v64 = swift_allocObject();
    *(void *)(v64 + 16) = v59;
    *(void *)(v64 + 24) = v60;
    swift_bridgeObjectRetain();
    uint64_t v66 = swift_allocObject();
    *(void *)(v66 + 16) = v61;
    uint64_t v68 = swift_allocObject();
    *(unsigned char *)(v68 + 16) = v62 & 1;
    uint64_t v82 = Logger.logObject.getter();
    uint64_t v83 = static os_log_type_t.debug.getter();
    *(void *)(v195 + 832) = 28;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v63 = *(_DWORD *)(v195 + 1936);
    uint64_t v72 = swift_allocObject();
    *(unsigned char *)(v72 + 16) = 32;
    uint64_t v73 = swift_allocObject();
    *(unsigned char *)(v73 + 16) = 8;
    uint32_t v65 = swift_allocObject();
    *(void *)(v65 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v65 + 24) = v64;
    uint64_t v74 = swift_allocObject();
    *(void *)(v74 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v74 + 24) = v65;
    uint64_t v75 = swift_allocObject();
    *(unsigned char *)(v75 + 16) = 32;
    uint64_t v76 = swift_allocObject();
    *(unsigned char *)(v76 + 16) = 8;
    uint64_t v67 = swift_allocObject();
    *(void *)(v67 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    *(void *)(v67 + 24) = v66;
    uint64_t v77 = swift_allocObject();
    *(void *)(v77 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v77 + 24) = v67;
    uint64_t v78 = swift_allocObject();
    *(unsigned char *)(v78 + 16) = 0;
    uint64_t v79 = swift_allocObject();
    *(unsigned char *)(v79 + 16) = 4;
    uint64_t v69 = swift_allocObject();
    *(void *)(v69 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(void *)(v69 + 24) = v68;
    uint64_t v70 = swift_allocObject();
    *(void *)(v70 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
    *(void *)(v70 + 24) = v69;
    uint64_t v71 = swift_allocObject();
    *(void *)(v71 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
    *(void *)(v71 + 24) = v70;
    uint64_t v80 = swift_allocObject();
    *(void *)(v80 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
    *(void *)(v80 + 24) = v71;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v81 = v30;
    swift_retain();
    *uint64_t v81 = partial apply for closure #1 in OSLogArguments.append(_:);
    v81[1] = v72;
    swift_retain();
    v81[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v81[3] = v73;
    swift_retain();
    v81[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v81[5] = v74;
    swift_retain();
    v81[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v81[7] = v75;
    swift_retain();
    v81[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v81[9] = v76;
    swift_retain();
    v81[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v81[11] = v77;
    swift_retain();
    v81[12] = partial apply for closure #1 in OSLogArguments.append(_:);
    v81[13] = v78;
    swift_retain();
    v81[14] = partial apply for closure #1 in OSLogArguments.append(_:);
    v81[15] = v79;
    swift_retain();
    v81[16] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v81[17] = v80;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v53 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v54 = createStorage<A>(capacity:type:)(0);
      uint64_t v55 = createStorage<A>(capacity:type:)(2);
      uint64_t v202 = v53;
      char v203 = v54;
      uint64_t v204 = v55;
      serialize(_:at:)(2, &v202);
      serialize(_:at:)(3, &v202);
      uint64_t v205 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v206 = v72;
      closure #1 in osLogInternal(_:log:type:)(&v205, (uint64_t)&v202, (uint64_t)&v203, (uint64_t)&v204);
      uint64_t v205 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v206 = v73;
      closure #1 in osLogInternal(_:log:type:)(&v205, (uint64_t)&v202, (uint64_t)&v203, (uint64_t)&v204);
      uint64_t v205 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v206 = v74;
      closure #1 in osLogInternal(_:log:type:)(&v205, (uint64_t)&v202, (uint64_t)&v203, (uint64_t)&v204);
      uint64_t v205 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v206 = v75;
      closure #1 in osLogInternal(_:log:type:)(&v205, (uint64_t)&v202, (uint64_t)&v203, (uint64_t)&v204);
      uint64_t v205 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v206 = v76;
      closure #1 in osLogInternal(_:log:type:)(&v205, (uint64_t)&v202, (uint64_t)&v203, (uint64_t)&v204);
      uint64_t v205 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v206 = v77;
      closure #1 in osLogInternal(_:log:type:)(&v205, (uint64_t)&v202, (uint64_t)&v203, (uint64_t)&v204);
      uint64_t v205 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v206 = v78;
      closure #1 in osLogInternal(_:log:type:)(&v205, (uint64_t)&v202, (uint64_t)&v203, (uint64_t)&v204);
      uint64_t v205 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v206 = v79;
      closure #1 in osLogInternal(_:log:type:)(&v205, (uint64_t)&v202, (uint64_t)&v203, (uint64_t)&v204);
      uint64_t v205 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      uint64_t v206 = v80;
      closure #1 in osLogInternal(_:log:type:)(&v205, (uint64_t)&v202, (uint64_t)&v203, (uint64_t)&v204);
      _os_log_impl(&dword_25DE00000, v82, v83, "Calling writeDoseEvent() for specified scheduleID (%s) and potentially medicationID (%s) with medStatus: %{BOOL}d", v53, v63);
      destroyStorage<A>(_:count:)(v54, 0, v52);
      destroyStorage<A>(_:count:)(v55, 2, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v53, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v195 + 1624);
    uint64_t v46 = *(void *)(v195 + 1480);
    uint64_t v47 = *(void *)(v195 + 1456);
    uint64_t v49 = *(id *)(v195 + 1376);
    id v51 = *(void *)(v195 + 1336);

    v48(v46, v47);
    uint64_t v31 = v49;
    uint64_t v50 = *(void *)(v195 + 632);
    *(void *)(v195 + 1888) = v50;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v51)
    {
      char v41 = *(void *)(v195 + 1336);
      swift_bridgeObjectRetain();
      *(void *)(v195 + 840) = v41;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      BOOL v42 = *(void *)(v195 + 480);
      uint64_t v43 = *(void *)(v195 + 488);
      swift_bridgeObjectRelease();
      uint64_t v44 = v42;
      uint64_t v45 = v43;
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v45 = 0;
    }
    *(void *)(v195 + 464) = v44;
    *(void *)(v195 + 472) = v45;
    os_log_type_t v40 = *(void *)(v195 + 472) != 0;
    char v39 = *(unsigned char *)(v195 + 1915);
    outlined destroy of String.UTF8View();
    uint32_t v32 = (void *)swift_task_alloc();
    *(void *)(v195 + 1896) = v32;
    void *v32 = *(void *)(v195 + 600);
    v32[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    id v33 = *(void *)(v195 + 1376);
    uint64_t v34 = *(void *)(v195 + 1360);
    uint64_t v35 = *(void *)(v195 + 1352);
    uint64_t v36 = *(void *)(v195 + 1344);
    uint64_t v37 = *(unsigned char *)(v195 + 1914);
    uint64_t v213 = *(void *)(v195 + 1368);
    uint64_t v214 = v33;
    return SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(v33, v50, v37 & 1, v40, v36, v39 & 1, v35, v34);
  }
LABEL_27:
  *(unsigned char *)(v195 + 587) = *(unsigned char *)(v195 + 1921);
  *(unsigned char *)(v195 + 588) = 1;
  if (*(unsigned char *)(v195 + 587) == 2)
  {
    if (*(unsigned char *)(v195 + 588) != 2)
    {
LABEL_54:
      uint64_t v124 = *(void *)(v195 + 624);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      *(void *)(v195 + 1016) = v124;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
      lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      char v125 = *(void *)(v195 + 1008);
      *(void *)(v195 + 1752) = v125;
      if (v125)
      {
        uint64_t v123 = *(unsigned char *)(v195 + 1915);
        *(void *)(v195 + 1064) = v125;
        swift_bridgeObjectRelease();
        uint64_t v21 = (void *)swift_task_alloc();
        *(void *)(v195 + 1760) = v21;
        *uint64_t v21 = *(void *)(v195 + 600);
        v21[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
        char v22 = *(void *)(v195 + 1376);
        uint64_t v23 = *(void *)(v195 + 1368);
        uint64_t v24 = *(void *)(v195 + 1360);
        uint64_t v25 = *(void *)(v195 + 1352);
        uint64_t v26 = *(void *)(v195 + 1344);
        return SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)(v125, v26, v123 & 1, v25, v24, v23, v22);
      }
      uint64_t v118 = *(void (**)(uint64_t, uint64_t, uint64_t))(v195 + 1576);
      uint64_t v27 = *(void *)(v195 + 1528);
      uint64_t v117 = *(void *)(v195 + 1456);
      swift_bridgeObjectRelease();
      uint64_t v116 = Logger.wellness.unsafeMutableAddressor();
      swift_beginAccess();
      v118(v27, v116, v117);
      swift_endAccess();
      uint32_t v121 = Logger.logObject.getter();
      uint64_t v120 = static os_log_type_t.error.getter();
      *(void *)(v195 + 1024) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v119 = *(_DWORD *)(v195 + 1948);
      os_log_type_t v122 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v121, v120))
      {
        uint64_t v112 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v113 = createStorage<A>(capacity:type:)(0);
        uint64_t v114 = createStorage<A>(capacity:type:)(0);
        *(void *)(v195 + 1032) = v112;
        *(void *)(v195 + 1040) = v113;
        *(void *)(v195 + 1048) = v114;
        serialize(_:at:)(0, (unsigned char **)(v195 + 1032));
        serialize(_:at:)(0, (unsigned char **)(v195 + 1032));
        *(void *)(v195 + 1056) = v122;
        uint64_t v115 = (void *)swift_task_alloc();
        v115[2] = v195 + 1032;
        v115[3] = v195 + 1040;
        v115[4] = v195 + 1048;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25DE00000, v121, v120, "No doseEvent found in saveWithID's fallback condition, returning failure status", v112, v119);
        destroyStorage<A>(_:count:)(v113, 0, v111);
        destroyStorage<A>(_:count:)(v114, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v112, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v195 + 1624);
      os_log_type_t v104 = *(void *)(v195 + 1528);
      uint64_t v105 = *(void *)(v195 + 1456);
      uint64_t v109 = *(void *)(v195 + 1448);
      uint64_t v108 = *(void *)(v195 + 1432);
      uint64_t v107 = *(void *)(v195 + 1440);

      v106(v104, v105);
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      uint64_t v110 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
      swift_bridgeObjectRelease();
      outlined destroy of [HKQuantityType]();
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v109, v108);
      uint64_t v133 = v110;
      goto LABEL_72;
    }
  }
  else
  {
    outlined init with copy of Bool?((unsigned char *)(v195 + 587), (unsigned char *)(v195 + 594));
    if (*(unsigned char *)(v195 + 588) == 2 || (*(unsigned char *)(v195 + 594) & 1) != (*(unsigned char *)(v195 + 588) & 1)) {
      goto LABEL_54;
    }
  }
  *(unsigned char *)(v195 + 589) = *(unsigned char *)(v195 + 1922);
  *(unsigned char *)(v195 + 590) = 0;
  if (*(unsigned char *)(v195 + 589) == 2)
  {
    if (*(unsigned char *)(v195 + 590) == 2)
    {
      uint64_t v167 = 1;
      goto LABEL_41;
    }
    goto LABEL_43;
  }
  outlined init with copy of Bool?((unsigned char *)(v195 + 589), (unsigned char *)(v195 + 593));
  if (*(unsigned char *)(v195 + 590) == 2)
  {
LABEL_43:
    uint64_t v167 = 0;
    goto LABEL_41;
  }
  uint64_t v167 = (*(unsigned char *)(v195 + 593) & 1) == (*(unsigned char *)(v195 + 590) & 1);
LABEL_41:
  if (!v167) {
    goto LABEL_54;
  }
  uint64_t v162 = *(void (**)(uint64_t, uint64_t, uint64_t))(v195 + 1576);
  uint64_t v11 = *(void *)(v195 + 1552);
  uint64_t v161 = *(void *)(v195 + 1456);
  uint64_t v160 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v162(v11, v160, v161);
  swift_endAccess();
  log = Logger.logObject.getter();
  uint64_t v164 = static os_log_type_t.debug.getter();
  *(void *)(v195 + 1112) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v163 = *(_DWORD *)(v195 + 1956);
  os_log_type_t v166 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(log, v164))
  {
    unint64_t v156 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v157 = createStorage<A>(capacity:type:)(0);
    uint64_t v158 = createStorage<A>(capacity:type:)(0);
    *(void *)(v195 + 1184) = v156;
    *(void *)(v195 + 1192) = v157;
    *(void *)(v195 + 1200) = v158;
    serialize(_:at:)(0, (unsigned char **)(v195 + 1184));
    serialize(_:at:)(0, (unsigned char **)(v195 + 1184));
    *(void *)(v195 + 1208) = v166;
    uint64_t v159 = (void *)swift_task_alloc();
    v159[2] = v195 + 1184;
    v159[3] = v195 + 1192;
    v159[4] = v195 + 1200;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, log, v164, "saveWithID: confirmedAsNeeded is true, confirmedAsScheduled is false. No reprompt needed - continuing.", v156, v163);
    destroyStorage<A>(_:count:)(v157, 0, v155);
    destroyStorage<A>(_:count:)(v158, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v156, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v152 = *(void (**)(uint64_t, uint64_t))(v195 + 1624);
  char v150 = *(void *)(v195 + 1552);
  uint64_t v151 = *(void *)(v195 + 1456);

  v152(v150, v151);
  uint64_t v153 = *(void *)(v195 + 624);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v195 + 1128) = v153;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [HKQuantityType]();
  unint64_t v154 = *(void **)(v195 + 1120);
  *(void *)(v195 + 1712) = v154;
  if (!v154)
  {
    uint64_t v141 = *(void (**)(uint64_t, uint64_t, uint64_t))(v195 + 1576);
    char v20 = *(void *)(v195 + 1544);
    unsigned int v140 = *(void *)(v195 + 1456);
    swift_bridgeObjectRelease();
    uint64_t v139 = Logger.wellness.unsafeMutableAddressor();
    swift_beginAccess();
    v141(v20, v139, v140);
    swift_endAccess();
    uint32_t v144 = Logger.logObject.getter();
    uint64_t v143 = static os_log_type_t.error.getter();
    *(void *)(v195 + 1136) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v142 = *(_DWORD *)(v195 + 1960);
    os_log_type_t v145 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v144, v143))
    {
      uint64_t v135 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v136 = createStorage<A>(capacity:type:)(0);
      unint64_t v137 = createStorage<A>(capacity:type:)(0);
      *(void *)(v195 + 1144) = v135;
      *(void *)(v195 + 1152) = v136;
      *(void *)(v195 + 1160) = v137;
      serialize(_:at:)(0, (unsigned char **)(v195 + 1144));
      serialize(_:at:)(0, (unsigned char **)(v195 + 1144));
      *(void *)(v195 + 1168) = v145;
      uint64_t v138 = (void *)swift_task_alloc();
      v138[2] = v195 + 1144;
      v138[3] = v195 + 1152;
      v138[4] = v195 + 1160;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v144, v143, "No doseEvent found in saveWithID's fallback condition, returning failure status", v135, v142);
      destroyStorage<A>(_:count:)(v136, 0, v134);
      destroyStorage<A>(_:count:)(v137, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v135, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v128 = *(void (**)(uint64_t, uint64_t))(v195 + 1624);
    uint64_t v126 = *(void *)(v195 + 1544);
    uint64_t v127 = *(void *)(v195 + 1456);
    uint64_t v131 = *(void *)(v195 + 1448);
    uint64_t v130 = *(void *)(v195 + 1432);
    uint64_t v129 = *(void *)(v195 + 1440);

    v128(v126, v127);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v132 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    swift_bridgeObjectRelease();
    outlined destroy of [HKQuantityType]();
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v131, v130);
    uint64_t v133 = v132;
LABEL_72:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v38 = *(uint64_t (**)(char *))(*(void *)(v195 + 600) + 8);
    return v38(v133);
  }
  id v148 = *(unsigned char *)(v195 + 1915);
  *(void *)(v195 + 1176) = v154;
  swift_bridgeObjectRelease();
  uint64_t v146 = objc_msgSend(v154, sel_medicationIdentifier);
  *(void *)(v195 + 1720) = objc_msgSend(v146, sel_underlyingIdentifier);
  uint64_t v149 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v147 = v12;
  *(void *)(v195 + 1728) = v12;

  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v195 + 1736) = v13;
  void *v13 = *(void *)(v195 + 600);
  v13[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  uint64_t v14 = *(void *)(v195 + 1376);
  uint64_t v15 = *(void *)(v195 + 1368);
  uint64_t v16 = *(void *)(v195 + 1360);
  uint64_t v17 = *(void *)(v195 + 1352);
  uint64_t v18 = *(void *)(v195 + 1344);
  uint64_t v19 = *(unsigned char *)(v195 + 1914);
  uint64_t v209 = 1;
  uint64_t v210 = 0;
  uint64_t v211 = 0;
  uint64_t v212 = v15;
  uint64_t v213 = v14;
  return SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)(v149, v147, v19 & 1, v18, v148 & 1, v17, v16, 0);
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = (void *)v0[214];
  id v6 = v0[181];
  uint64_t v4 = v0[180];
  uint64_t v5 = v0[179];
  v0[75] = v0;

  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
  uint64_t v7 = v0[218];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v2 = *(uint64_t (**)(uint64_t))(v0[75] + 8);
  return v2(v7);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint8_t *buf;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint32_t v26;
  os_log_type_t v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v1 = *(void *)(v0 + 1768);
  *(void *)(v0 + 600) = v0;
  if (v1)
  {
    uint64_t v30 = *(void *)(v31 + 1752);

    char v2 = (void *)swift_task_alloc();
    *(void *)(v31 + 1776) = v2;
    *char v2 = *(void *)(v31 + 600);
    v2[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    uint64_t v3 = *(void *)(v31 + 1376);
    uint64_t v4 = *(void *)(v31 + 1368);
    uint64_t v5 = *(unsigned char *)(v31 + 1914) & 1;
    return SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:)(v30, v5, v4, v3);
  }
  else
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 1576);
    uint64_t v7 = *(void *)(v31 + 1536);
    uint64_t v24 = *(void *)(v31 + 1456);
    uint64_t v23 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v25(v7, v23, v24);
    swift_endAccess();
    uint64_t v28 = Logger.logObject.getter();
    uint64_t v27 = static os_log_type_t.debug.getter();
    *(void *)(v31 + 1072) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v26 = *(_DWORD *)(v31 + 1952);
    uint64_t v29 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v28, v27))
    {
      uint64_t v8 = *(void *)(v31 + 1656);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      char v20 = createStorage<A>(capacity:type:)(0);
      uint64_t v21 = createStorage<A>(capacity:type:)(0);
      *(void *)(v31 + 1080) = buf;
      *(void *)(v31 + 1088) = v20;
      *(void *)(v31 + 1096) = v21;
      serialize(_:at:)(0, (unsigned char **)(v31 + 1080));
      serialize(_:at:)(0, (unsigned char **)(v31 + 1080));
      *(void *)(v31 + 1104) = v29;
      char v22 = (void *)swift_task_alloc();
      v22[2] = v31 + 1080;
      v22[3] = v31 + 1088;
      v22[4] = v31 + 1096;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      id result = Sequence.forEach(_:)();
      if (v8) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v28, v27, "Got a complex med request wrt dosage/dosageUnit in first turn, skipping confirmAsScheduled & punching out.", buf, v26);
      destroyStorage<A>(_:count:)(v20, 0, v18);
      destroyStorage<A>(_:count:)(v21, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v31 + 1624);
    uint64_t v10 = *(void *)(v31 + 1536);
    uint64_t v11 = *(void *)(v31 + 1456);
    uint64_t v16 = *(void *)(v31 + 1448);
    uint64_t v15 = *(void *)(v31 + 1432);
    uint64_t v13 = *(id *)(v31 + 1752);
    uint64_t v14 = *(void *)(v31 + 1440);

    v12(v10, v11);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v17 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(112, 0);

    swift_bridgeObjectRelease();
    outlined destroy of [HKQuantityType]();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(char *))(*(void *)(v31 + 600) + 8);
    return v9(v17);
  }
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = (void *)v0[219];
  id v6 = v0[181];
  uint64_t v4 = v0[180];
  uint64_t v5 = v0[179];
  v0[75] = v0;

  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v6, v5);
  uint64_t v7 = v0[223];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v2 = *(uint64_t (**)(uint64_t))(v0[75] + 8);
  return v2(v7);
}

{
  void *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t (*v26)(char *);
  char v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint32_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint32_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  NSObject *v90;
  os_log_type_t v91;
  uint64_t v92;
  Class v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t);
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t, uint64_t);
  uint32_t v111;
  os_log_type_t v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  Class isa;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  uint8_t *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t, uint64_t);
  uint32_t v135;
  os_log_type_t v136;
  NSObject *log;
  uint64_t v138;
  Swift::Bool v139;
  Swift::Bool v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t);
  uint64_t v144;
  uint8_t *buf;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  void (*v151)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v153;
  NSObject *oslog;
  uint64_t v155;
  Swift::Bool v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  Swift::OpaquePointer v162;
  uint8_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t (*v166)(uint64_t, uint64_t, uint64_t);
  uint64_t v167;
  uint8_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t (*v171)(uint64_t, uint64_t, uint64_t);
  uint64_t v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;

  uint64_t v173 = v0;
  uint64_t v1 = v0[226];
  uint64_t v158 = v0[225];
  uint64_t v160 = v0[166];
  uint64_t v159 = v0[165];
  v0[75] = v0;
  swift_bridgeObjectRetain();
  v0[80] = v158;
  v0[87] = v158;
  swift_bridgeObjectRetain();
  uint64_t v161 = swift_task_alloc();
  *(void *)(v161 + 16) = v159;
  *(void *)(v161 + 24) = v160;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  id result = _ArrayProtocol.filter(_:)();
  v162._rawValue = (void *)result;
  if (v1) {
    return result;
  }
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(Swift::OpaquePointer *)(v157 + 640) = v162;
  swift_bridgeObjectRelease();
  *(void *)(v157 + 632) = _allocateUninitializedArray<A>(_:)();
  unint64_t v156 = allDoseEventsAreUnlogged(doseEvents:)(v162);
  swift_bridgeObjectRelease();
  if (v156)
  {
    uint64_t v151 = *(void (**)(uint64_t, uint64_t, uint64_t))(v157 + 1576);
    uint64_t v3 = *(void *)(v157 + 1512);
    char v150 = *(void *)(v157 + 1456);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v149 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v151(v3, v149, v150);
    swift_endAccess();
    oslog = Logger.logObject.getter();
    uint64_t v153 = static os_log_type_t.debug.getter();
    *(void *)(v157 + 944) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v157 + 1944);
    uint64_t v155 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v153))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint32_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v146 = createStorage<A>(capacity:type:)(0);
      uint64_t v147 = createStorage<A>(capacity:type:)(0);
      *(void *)(v157 + 960) = buf;
      *(void *)(v157 + 968) = v146;
      *(void *)(v157 + 976) = v147;
      serialize(_:at:)(0, (unsigned char **)(v157 + 960));
      serialize(_:at:)(0, (unsigned char **)(v157 + 960));
      *(void *)(v157 + 984) = v155;
      id v148 = (void *)swift_task_alloc();
      v148[2] = v157 + 960;
      v148[3] = v157 + 968;
      v148[4] = v157 + 976;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, oslog, v153, "All dose events in group are unlogged, continuing to write", buf, size);
      destroyStorage<A>(_:count:)(v146, 0, v144);
      destroyStorage<A>(_:count:)(v147, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v143 = *(void (**)(uint64_t, uint64_t))(v157 + 1624);
    uint64_t v141 = *(void *)(v157 + 1512);
    uint64_t v142 = *(void *)(v157 + 1456);

    v143(v141, v142);
    *(Swift::OpaquePointer *)(v157 + 952) = v162;
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    Array.append<A>(contentsOf:)();
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  unsigned int v140 = allLoggedWithMixedStatus(doseEvents:)(v162);
  swift_bridgeObjectRelease();
  if (v140)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    uint64_t v134 = *(void (**)(uint64_t, uint64_t, uint64_t))(v157 + 1576);
    uint64_t v4 = *(void *)(v157 + 1504);
    uint64_t v133 = *(void *)(v157 + 1456);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v132 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v134(v4, v132, v133);
    swift_endAccess();
    log = Logger.logObject.getter();
    uint64_t v136 = static os_log_type_t.debug.getter();
    *(void *)(v157 + 848) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v135 = *(_DWORD *)(v157 + 1940);
    uint64_t v138 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v136))
    {
      uint64_t v128 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v129 = createStorage<A>(capacity:type:)(0);
      uint64_t v130 = createStorage<A>(capacity:type:)(0);
      *(void *)(v157 + 912) = v128;
      *(void *)(v157 + 920) = v129;
      *(void *)(v157 + 928) = v130;
      serialize(_:at:)(0, (unsigned char **)(v157 + 912));
      serialize(_:at:)(0, (unsigned char **)(v157 + 912));
      *(void *)(v157 + 936) = v138;
      uint64_t v131 = (void *)swift_task_alloc();
      v131[2] = v157 + 912;
      v131[3] = v157 + 920;
      v131[4] = v157 + 928;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, log, v136, "Calling either allLoggedWithMixedStatus or oneExistingStatusWithConflictingRequest", v128, v135);
      destroyStorage<A>(_:count:)(v129, 0, v127);
      destroyStorage<A>(_:count:)(v130, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v128, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    char v125 = *(void (**)(uint64_t, uint64_t))(v157 + 1624);
    uint64_t v123 = *(void *)(v157 + 1504);
    uint64_t v124 = *(void *)(v157 + 1456);

    v125(v123, v124);
    *(void *)(v157 + 1816) = type metadata accessor for MatchedMedName();
    *(void *)(v157 + 856) = _allocateUninitializedArray<A>(_:)();
    *(Swift::OpaquePointer *)(v157 + 864) = v162;
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    Collection<>.makeIterator()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    uint64_t v126 = *(void *)(v157 + 872);
    *(void *)(v157 + 1824) = v126;
    if (v126)
    {
      *(void *)(v157 + 888) = v126;
      uint64_t v5 = (void *)swift_task_alloc();
      id v6 = v126;
      *(void *)(v157 + 1832) = v5;
      *uint64_t v5 = *(void *)(v157 + 600);
      v5[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
      uint64_t v7 = *(void *)(v157 + 1376);
      uint64_t v8 = *(void *)(v157 + 1368);
      return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v6, 1, v8, v7);
    }
    uint64_t v120 = *(void *)(v157 + 1448);
    uint64_t v119 = *(void *)(v157 + 1432);
    uint64_t v118 = *(void *)(v157 + 1440);
    outlined destroy of [HKQuantityType]();
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint32_t v121 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(110, 0);
    uint64_t v9 = v121;
    uint64_t v10 = v121;
    *(void *)(v157 + 880) = v121;
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v121, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v120, v119);
    os_log_type_t v122 = v121;
    goto LABEL_37;
  }
  uint64_t v139 = oneExistingStatusWithConflictingRequest(doseEvents:requestedStatus:)(v162, *(unsigned char *)(v157 + 1914) & 1);
  swift_bridgeObjectRelease();
  if (v139) {
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  uint64_t v115 = getUnloggedDoseEvents(doseEvents:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  *(void *)(v157 + 704) = v115;
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  uint64_t v116 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  if ((v116 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v92 = getUnloggedDoseEvents(doseEvents:)();
    swift_bridgeObjectRelease();
    *(void *)(v157 + 808) = v92;
    swift_bridgeObjectRetain();
    *(void *)(v157 + 816) = v92;
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    Array.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
LABEL_25:
    uint64_t v82 = *(void *)(v157 + 1648);
    uint64_t v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v157 + 1576);
    uint64_t v15 = *(void *)(v157 + 1488);
    uint64_t v80 = *(void *)(v157 + 1456);
    uint64_t v79 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v81(v15, v79, v80);
    swift_endAccess();
    uint64_t v84 = swift_allocObject();
    *(void *)(v84 + 16) = v82;
    uint64_t v90 = Logger.logObject.getter();
    uint64_t v91 = static os_log_type_t.debug.getter();
    *(void *)(v157 + 824) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v83 = *(_DWORD *)(v157 + 1932);
    uint64_t v86 = swift_allocObject();
    *(unsigned char *)(v86 + 16) = 0;
    uint64_t v87 = swift_allocObject();
    *(unsigned char *)(v87 + 16) = 8;
    os_log_type_t v85 = swift_allocObject();
    *(void *)(v85 + 16) = partial apply for specialized implicit closure #10 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(void *)(v85 + 24) = v84;
    char v88 = swift_allocObject();
    *(void *)(v88 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(void *)(v88 + 24) = v85;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v89 = v16;
    swift_retain();
    *uint64_t v89 = partial apply for closure #1 in OSLogArguments.append(_:);
    v89[1] = v86;
    swift_retain();
    v89[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v89[3] = v87;
    swift_retain();
    v89[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v89[5] = v88;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v76 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v77 = createStorage<A>(capacity:type:)(0);
      uint64_t v78 = createStorage<A>(capacity:type:)(0);
      uint64_t v168 = v76;
      BOOL v169 = v77;
      BOOL v170 = v78;
      serialize(_:at:)(0, &v168);
      serialize(_:at:)(1, &v168);
      char v171 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      id v172 = v86;
      closure #1 in osLogInternal(_:log:type:)(&v171, (uint64_t)&v168, (uint64_t)&v169, (uint64_t)&v170);
      char v171 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      id v172 = v87;
      closure #1 in osLogInternal(_:log:type:)(&v171, (uint64_t)&v168, (uint64_t)&v169, (uint64_t)&v170);
      char v171 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      id v172 = v88;
      closure #1 in osLogInternal(_:log:type:)(&v171, (uint64_t)&v168, (uint64_t)&v169, (uint64_t)&v170);
      _os_log_impl(&dword_25DE00000, v90, v91, "saveWithID, medicationIDs not provided: appended %ld doseEvents", v76, v83);
      destroyStorage<A>(_:count:)(v77, 0, v75);
      destroyStorage<A>(_:count:)(v78, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v76, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v157 + 1624);
    uint64_t v44 = *(void *)(v157 + 1488);
    uint64_t v45 = *(void *)(v157 + 1456);

    v46(v44, v45);
    outlined destroy of [HKQuantityType]();
    uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v157 + 1576);
    uint64_t v17 = *(void *)(v157 + 1480);
    uint64_t v48 = *(void *)(v157 + 1456);
    uint64_t v53 = *(unsigned char *)(v157 + 1914);
    uint64_t v52 = *(void *)(v157 + 1336);
    id v51 = *(void *)(v157 + 1328);
    uint64_t v50 = *(void *)(v157 + 1320);
    uint64_t v47 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v49(v17, v47, v48);
    swift_endAccess();
    swift_bridgeObjectRetain();
    uint64_t v55 = swift_allocObject();
    *(void *)(v55 + 16) = v50;
    *(void *)(v55 + 24) = v51;
    swift_bridgeObjectRetain();
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = v52;
    uint64_t v59 = swift_allocObject();
    *(unsigned char *)(v59 + 16) = v53 & 1;
    uint64_t v73 = Logger.logObject.getter();
    uint64_t v74 = static os_log_type_t.debug.getter();
    *(void *)(v157 + 832) = 28;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v54 = *(_DWORD *)(v157 + 1936);
    uint64_t v63 = swift_allocObject();
    *(unsigned char *)(v63 + 16) = 32;
    char v64 = swift_allocObject();
    *(unsigned char *)(v64 + 16) = 8;
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v56 + 24) = v55;
    uint32_t v65 = swift_allocObject();
    *(void *)(v65 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v65 + 24) = v56;
    uint64_t v66 = swift_allocObject();
    *(unsigned char *)(v66 + 16) = 32;
    uint64_t v67 = swift_allocObject();
    *(unsigned char *)(v67 + 16) = 8;
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    *(void *)(v58 + 24) = v57;
    uint64_t v68 = swift_allocObject();
    *(void *)(v68 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v68 + 24) = v58;
    uint64_t v69 = swift_allocObject();
    *(unsigned char *)(v69 + 16) = 0;
    uint64_t v70 = swift_allocObject();
    *(unsigned char *)(v70 + 16) = 4;
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(void *)(v60 + 24) = v59;
    uint64_t v61 = swift_allocObject();
    *(void *)(v61 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
    *(void *)(v61 + 24) = v60;
    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
    *(void *)(v62 + 24) = v61;
    uint64_t v71 = swift_allocObject();
    *(void *)(v71 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
    *(void *)(v71 + 24) = v62;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v72 = v18;
    swift_retain();
    *uint64_t v72 = partial apply for closure #1 in OSLogArguments.append(_:);
    v72[1] = v63;
    swift_retain();
    v72[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v72[3] = v64;
    swift_retain();
    v72[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v72[5] = v65;
    swift_retain();
    v72[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v72[7] = v66;
    swift_retain();
    v72[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v72[9] = v67;
    swift_retain();
    v72[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v72[11] = v68;
    swift_retain();
    v72[12] = partial apply for closure #1 in OSLogArguments.append(_:);
    v72[13] = v69;
    swift_retain();
    v72[14] = partial apply for closure #1 in OSLogArguments.append(_:);
    v72[15] = v70;
    swift_retain();
    v72[16] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v72[17] = v71;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v73, v74))
    {
      char v41 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      os_log_type_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      BOOL v42 = createStorage<A>(capacity:type:)(0);
      uint64_t v43 = createStorage<A>(capacity:type:)(2);
      uint64_t v163 = v41;
      uint64_t v164 = v42;
      uint32_t v165 = v43;
      serialize(_:at:)(2, &v163);
      serialize(_:at:)(3, &v163);
      os_log_type_t v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v167 = v63;
      closure #1 in osLogInternal(_:log:type:)(&v166, (uint64_t)&v163, (uint64_t)&v164, (uint64_t)&v165);
      os_log_type_t v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v167 = v64;
      closure #1 in osLogInternal(_:log:type:)(&v166, (uint64_t)&v163, (uint64_t)&v164, (uint64_t)&v165);
      os_log_type_t v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v167 = v65;
      closure #1 in osLogInternal(_:log:type:)(&v166, (uint64_t)&v163, (uint64_t)&v164, (uint64_t)&v165);
      os_log_type_t v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v167 = v66;
      closure #1 in osLogInternal(_:log:type:)(&v166, (uint64_t)&v163, (uint64_t)&v164, (uint64_t)&v165);
      os_log_type_t v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v167 = v67;
      closure #1 in osLogInternal(_:log:type:)(&v166, (uint64_t)&v163, (uint64_t)&v164, (uint64_t)&v165);
      os_log_type_t v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v167 = v68;
      closure #1 in osLogInternal(_:log:type:)(&v166, (uint64_t)&v163, (uint64_t)&v164, (uint64_t)&v165);
      os_log_type_t v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v167 = v69;
      closure #1 in osLogInternal(_:log:type:)(&v166, (uint64_t)&v163, (uint64_t)&v164, (uint64_t)&v165);
      os_log_type_t v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v167 = v70;
      closure #1 in osLogInternal(_:log:type:)(&v166, (uint64_t)&v163, (uint64_t)&v164, (uint64_t)&v165);
      os_log_type_t v166 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      uint64_t v167 = v71;
      closure #1 in osLogInternal(_:log:type:)(&v166, (uint64_t)&v163, (uint64_t)&v164, (uint64_t)&v165);
      _os_log_impl(&dword_25DE00000, v73, v74, "Calling writeDoseEvent() for specified scheduleID (%s) and potentially medicationID (%s) with medStatus: %{BOOL}d", v41, v54);
      destroyStorage<A>(_:count:)(v42, 0, v40);
      destroyStorage<A>(_:count:)(v43, 2, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v41, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v157 + 1624);
    uint64_t v34 = *(void *)(v157 + 1480);
    uint64_t v35 = *(void *)(v157 + 1456);
    uint64_t v37 = *(id *)(v157 + 1376);
    char v39 = *(void *)(v157 + 1336);

    v36(v34, v35);
    uint64_t v19 = v37;
    uint64_t v38 = *(void *)(v157 + 632);
    *(void *)(v157 + 1888) = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v39)
    {
      uint64_t v29 = *(void *)(v157 + 1336);
      swift_bridgeObjectRetain();
      *(void *)(v157 + 840) = v29;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      uint64_t v30 = *(void *)(v157 + 480);
      uint64_t v31 = *(void *)(v157 + 488);
      swift_bridgeObjectRelease();
      uint32_t v32 = v30;
      id v33 = v31;
    }
    else
    {
      uint32_t v32 = 0;
      id v33 = 0;
    }
    *(void *)(v157 + 464) = v32;
    *(void *)(v157 + 472) = v33;
    uint64_t v28 = *(void *)(v157 + 472) != 0;
    uint64_t v27 = *(unsigned char *)(v157 + 1915);
    outlined destroy of String.UTF8View();
    char v20 = (void *)swift_task_alloc();
    *(void *)(v157 + 1896) = v20;
    *char v20 = *(void *)(v157 + 600);
    v20[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    uint64_t v21 = *(void *)(v157 + 1376);
    char v22 = *(void *)(v157 + 1360);
    uint64_t v23 = *(void *)(v157 + 1352);
    uint64_t v24 = *(void *)(v157 + 1344);
    uint64_t v25 = *(unsigned char *)(v157 + 1914);
    uint64_t v175 = *(void *)(v157 + 1368);
    uint64_t v176 = v21;
    return SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(v21, v38, v25 & 1, v28, v24, v27 & 1, v23, v22);
  }
  uint64_t v110 = *(void (**)(uint64_t, uint64_t, uint64_t))(v157 + 1576);
  uint64_t v11 = *(void *)(v157 + 1496);
  uint64_t v109 = *(void *)(v157 + 1456);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v108 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v110(v11, v108, v109);
  swift_endAccess();
  uint64_t v113 = Logger.logObject.getter();
  uint64_t v112 = static os_log_type_t.debug.getter();
  *(void *)(v157 + 712) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v111 = *(_DWORD *)(v157 + 1924);
  uint64_t v114 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v113, v112))
  {
    os_log_type_t v104 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    os_log_type_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v105 = createStorage<A>(capacity:type:)(0);
    uint64_t v106 = createStorage<A>(capacity:type:)(0);
    *(void *)(v157 + 776) = v104;
    *(void *)(v157 + 784) = v105;
    *(void *)(v157 + 792) = v106;
    serialize(_:at:)(0, (unsigned char **)(v157 + 776));
    serialize(_:at:)(0, (unsigned char **)(v157 + 776));
    *(void *)(v157 + 800) = v114;
    uint64_t v107 = (void *)swift_task_alloc();
    v107[2] = v157 + 776;
    v107[3] = v157 + 784;
    v107[4] = v157 + 792;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v113, v112, "allMedsLoggedAlready, returning code .allMedsLoggedAlready", v104, v111);
    destroyStorage<A>(_:count:)(v105, 0, v103);
    destroyStorage<A>(_:count:)(v106, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v104, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v100 = *(void (**)(uint64_t, uint64_t))(v157 + 1624);
  uint64_t v98 = *(void *)(v157 + 1496);
  uint64_t v99 = *(void *)(v157 + 1456);

  v100(v98, v99);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  uint64_t v101 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(111, 0);
  *(void *)(v157 + 1848) = v101;
  uint64_t v12 = v101;
  uint64_t v13 = v101;
  *(void *)(v157 + 720) = v101;
  *(void *)(v157 + 1856) = type metadata accessor for MatchedMedName();
  *(void *)(v157 + 728) = _allocateUninitializedArray<A>(_:)();
  *(Swift::OpaquePointer *)(v157 + 736) = v162;
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  uint32_t v102 = *(void *)(v157 + 744);
  *(void *)(v157 + 1864) = v102;
  if (v102)
  {
    *(void *)(v157 + 752) = v102;
    uint64_t v14 = (void *)swift_task_alloc();
    id v6 = v102;
    *(void *)(v157 + 1872) = v14;
    *uint64_t v14 = *(void *)(v157 + 600);
    v14[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    uint64_t v7 = *(void *)(v157 + 1376);
    uint64_t v8 = *(void *)(v157 + 1368);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v6, 1, v8, v7);
  }
  uint64_t v94 = *(id *)(v157 + 1848);
  uint64_t v97 = *(void *)(v157 + 1448);
  uint64_t v96 = *(void *)(v157 + 1432);
  uint64_t v95 = *(void *)(v157 + 1440);
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRetain();
  uint64_t v93 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v94, sel_setMatchingMeds_, v93);

  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v97, v96);
  os_log_type_t v122 = *(char **)(v157 + 1848);
LABEL_37:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v26 = *(uint64_t (**)(char *))(*(void *)(v157 + 600) + 8);
  return v26(v122);
}

{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  char *v7;
  uint64_t (*v8)(char *);
  Class isa;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  uint64_t v15 = (void *)v0[230];
  uint64_t v16 = (void *)v0[228];
  v0[75] = v0;
  v0[112] = v15;
  uint64_t v1 = v15;
  v0[113] = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  uint64_t v17 = v0[109];
  v0[228] = v17;
  if (v17)
  {
    *(void *)(v14 + 888) = v17;
    char v2 = (void *)swift_task_alloc();
    *(void *)(v14 + 1832) = v2;
    *char v2 = *(void *)(v14 + 600);
    v2[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    uint64_t v3 = *(void *)(v14 + 1376);
    uint64_t v4 = *(void *)(v14 + 1368);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v17, 1, v4, v3);
  }
  else
  {
    uint64_t v12 = *(void *)(v14 + 1448);
    uint64_t v11 = *(void *)(v14 + 1432);
    uint64_t v10 = *(void *)(v14 + 1440);
    outlined destroy of [HKQuantityType]();
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v13 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(110, 0);
    id v6 = v13;
    uint64_t v7 = v13;
    *(void *)(v14 + 880) = v13;
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v13, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(char *))(*(void *)(v14 + 600) + 8);
    return v8(v13);
  }
}

{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t);
  Class isa;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  uint64_t v14 = (void *)v0[235];
  uint64_t v15 = (void *)v0[233];
  v0[75] = v0;
  v0[95] = v14;
  uint64_t v1 = v14;
  v0[96] = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  uint64_t v16 = v0[93];
  v0[233] = v16;
  if (v16)
  {
    *(void *)(v13 + 752) = v16;
    char v2 = (void *)swift_task_alloc();
    *(void *)(v13 + 1872) = v2;
    *char v2 = *(void *)(v13 + 600);
    v2[1] = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
    uint64_t v3 = *(void *)(v13 + 1376);
    uint64_t v4 = *(void *)(v13 + 1368);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v16, 1, v4, v3);
  }
  else
  {
    uint64_t v8 = *(id *)(v13 + 1848);
    uint64_t v11 = *(void *)(v13 + 1448);
    uint64_t v10 = *(void *)(v13 + 1432);
    uint64_t v9 = *(void *)(v13 + 1440);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v10);
    uint64_t v12 = *(void *)(v13 + 1848);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v6 = *(uint64_t (**)(uint64_t))(*(void *)(v13 + 600) + 8);
    return v6(v12);
  }
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v5 = v0[181];
  uint64_t v3 = v0[180];
  uint64_t v4 = v0[179];
  v0[75] = v0;
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v5, v4);
  id v6 = v0[238];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0[75] + 8);
  return v1(v6);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t (*v4)(char *);
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  char *v9;
  uint64_t v10;
  uint8_t *buf;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint32_t v23;
  os_log_type_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;

  uint64_t v1 = *(void **)(v0 + 1680);
  uint64_t v18 = *(void *)(v0 + 1448);
  uint64_t v16 = *(void *)(v0 + 1440);
  uint64_t v17 = *(void *)(v0 + 1432);
  *(void *)(v0 + 600) = v0;

  swift_deallocUninitializedObject();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v18, v17);
  uint64_t v19 = *(id *)(v0 + 1704);
  char v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1576);
  char v2 = *(void *)(v0 + 1472);
  uint64_t v21 = *(void *)(v0 + 1456);
  uint64_t v3 = v19;
  *(void *)(v0 + 648) = v19;
  char v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v22(v2, v20, v21);
  swift_endAccess();
  uint64_t v25 = Logger.logObject.getter();
  uint64_t v24 = static os_log_type_t.error.getter();
  *(void *)(v0 + 656) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v23 = *(_DWORD *)(v0 + 1916);
  uint64_t v26 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v25, v24))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    uint64_t v13 = createStorage<A>(capacity:type:)(0);
    *(void *)(v15 + 664) = buf;
    *(void *)(v15 + 672) = v12;
    *(void *)(v15 + 680) = v13;
    serialize(_:at:)(0, (unsigned char **)(v15 + 664));
    serialize(_:at:)(0, (unsigned char **)(v15 + 664));
    *(void *)(v15 + 688) = v26;
    uint64_t v14 = (void *)swift_task_alloc();
    void v14[2] = v15 + 664;
    v14[3] = v15 + 672;
    v14[4] = v15 + 680;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v25, v24, "Failed fetching dose events for specified timeframe.", buf, v23);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v15 + 1624);
  id v6 = *(void *)(v15 + 1472);
  uint64_t v7 = *(void *)(v15 + 1456);

  v8(v6, v7);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  uint64_t v9 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(char *))(*(void *)(v15 + 600) + 8);
  return v4(v9);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t (*v3)(char *);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  char *v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint32_t v22;
  os_log_type_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v17 = *(void *)(v0 + 1448);
  uint64_t v15 = *(void *)(v0 + 1440);
  uint64_t v16 = *(void *)(v0 + 1432);
  *(void *)(v0 + 600) = v0;
  outlined destroy of [HKQuantityType]();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
  uint64_t v18 = *(id *)(v0 + 1808);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1576);
  uint64_t v1 = *(void *)(v0 + 1472);
  char v20 = *(void *)(v0 + 1456);
  char v2 = v18;
  *(void *)(v0 + 648) = v18;
  uint64_t v19 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v21(v1, v19, v20);
  swift_endAccess();
  uint64_t v24 = Logger.logObject.getter();
  uint64_t v23 = static os_log_type_t.error.getter();
  *(void *)(v0 + 656) = 2;
  UnsignedInteger<>.init<A>(_:)();
  char v22 = *(_DWORD *)(v0 + 1916);
  uint64_t v25 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v24, v23))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 664) = buf;
    *(void *)(v14 + 672) = v11;
    *(void *)(v14 + 680) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 664));
    serialize(_:at:)(0, (unsigned char **)(v14 + 664));
    *(void *)(v14 + 688) = v25;
    uint64_t v13 = (void *)swift_task_alloc();
    void v13[2] = v14 + 664;
    v13[3] = v14 + 672;
    void v13[4] = v14 + 680;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v24, v23, "Failed fetching dose events for specified timeframe.", buf, v22);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v14 + 1624);
  uint64_t v5 = *(void *)(v14 + 1472);
  id v6 = *(void *)(v14 + 1456);

  v7(v5, v6);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  uint64_t v8 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(char *))(*(void *)(v14 + 600) + 8);
  return v3(v8);
}

uint64_t SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(uint64_t a1)
{
  id v6 = (void *)*v2;
  uint64_t v5 = *v2 + 16;
  v6[75] = *v2;
  v6[212] = a1;
  v6[213] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  }
  else
  {

    uint64_t v3 = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  uint64_t v3 = *(void **)(*v1 + 1720);
  *(void *)(v4 + 600) = *v1;
  *(void *)(v4 + 1744) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 600) = *v1;
  *(void *)(v3 + 1768) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 600) = *v1;
  *(void *)(v3 + 1784) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:), 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  void *v5;
  uint64_t v6;

  uint64_t v5 = (void *)*v2;
  v5[75] = *v2;
  v5[225] = a1;
  v5[226] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  }
  else
  {
    uint64_t v3 = SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 600) = *v1;
  *(void *)(v3 + 1840) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 600) = *v1;
  *(void *)(v3 + 1880) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:), 0);
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  uint64_t v3 = *(void **)(*v1 + 1376);
  *(void *)(v4 + 600) = *v1;
  *(void *)(v4 + 1904) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:), 0);
}

uint64_t implicit closure #2 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)()
{
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)()
{
  return String.init<A>(describing:)();
}

uint64_t implicit closure #6 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)()
{
  return String.init<A>(describing:)();
}

uint64_t implicit closure #7 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)()
{
  return String.init<A>(describing:)();
}

id HKMedicationIdentifier.__allocating_init(rawIdentifier:)()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKMedicationIdentifier.init(rawIdentifier:)();
}

uint64_t SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[55] = a4;
  v4[54] = a2;
  v4[53] = a1;
  v4[28] = v4;
  v4[29] = 0;
  v4[30] = 0;
  v4[24] = 0;
  v4[25] = 0;
  v4[36] = 0;
  v4[43] = 0;
  v4[26] = 0;
  v4[27] = 0;
  v4[46] = 0;
  uint64_t v5 = type metadata accessor for Logger();
  v4[56] = v5;
  v4[57] = *(void *)(v5 - 8);
  v4[58] = swift_task_alloc();
  v4[59] = swift_task_alloc();
  v4[60] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DateInterval();
  v4[61] = v6;
  v4[62] = *(void *)(v6 - 8);
  v4[63] = swift_task_alloc();
  v4[64] = swift_task_alloc();
  v4[65] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Calendar();
  v4[66] = v7;
  v4[67] = *(void *)(v7 - 8);
  v4[68] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v4[69] = swift_task_alloc();
  v4[70] = swift_task_alloc();
  v4[71] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Date();
  v4[72] = v8;
  v4[73] = *(void *)(v8 - 8);
  v4[74] = swift_task_alloc();
  v4[75] = swift_task_alloc();
  v4[76] = swift_task_alloc();
  v4[77] = swift_task_alloc();
  v4[78] = swift_task_alloc();
  v4[79] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  v4[80] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  v4[81] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for DateComponents();
  v4[82] = v9;
  v4[83] = *(void *)(v9 - 8);
  v4[84] = swift_task_alloc();
  v4[85] = swift_task_alloc();
  v4[29] = a1;
  v4[30] = a2;
  v4[24] = a3;
  v4[25] = a4;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:), 0);
}

uint64_t SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)()
{
  uint64_t v181 = v0;
  uint64_t v161 = 0;
  uint64_t v158 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v164 = v0[85];
  uint64_t v170 = v0[84];
  uint64_t v169 = v0[83];
  uint64_t v171 = v0[82];
  uint64_t v159 = v0[81];
  uint64_t v160 = v0[80];
  uint64_t v165 = v0[78];
  uint64_t v166 = v0[77];
  uint64_t v177 = v0[73];
  uint64_t v180 = v0[72];
  uint64_t v178 = v0[71];
  uint64_t v175 = v0[68];
  uint64_t v174 = v0[67];
  uint64_t v1 = v174;
  uint64_t v176 = v0[66];
  v0[28] = v0;
  char v2 = *(void (**)(void))(v1 + 56);
  unsigned int v179 = 1;
  v2();
  uint64_t v3 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v160, 1);
  uint64_t v162 = &v68;
  uint64_t v68 = 0;
  int v163 = 1;
  char v69 = 1;
  uint64_t v70 = 0;
  char v71 = 1;
  uint64_t v72 = 0;
  char v73 = 1;
  uint64_t v74 = 0;
  char v75 = 1;
  uint64_t v76 = 0;
  char v77 = 1;
  uint64_t v78 = 0;
  char v79 = 1;
  uint64_t v80 = 0;
  char v81 = 1;
  uint64_t v82 = 0;
  char v83 = 1;
  uint64_t v84 = 0;
  char v85 = 1;
  uint64_t v86 = 0;
  char v87 = 1;
  uint64_t v88 = 0;
  char v89 = 1;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  DateComponents.second.setter();
  static Calendar.current.getter();
  uint64_t v4 = v164;
  uint64_t v5 = v170;
  uint64_t v6 = v171;
  uint64_t v7 = v169 + 16;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v169 + 16);
  v0[86] = v8;
  v0[87] = v7 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v8(v5, v4, v6);
  Date.init()();
  Date.startOfDay.getter(v166);
  uint64_t v9 = v165;
  uint64_t v10 = v180;
  uint64_t v11 = v177 + 8;
  uint64_t v168 = *(void (**)(uint64_t, uint64_t))(v177 + 8);
  uint64_t v12 = v168;
  v0[88] = v168;
  uint64_t v167 = v11;
  v0[89] = v11 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v12(v9, v10);
  default argument 2 of Calendar.date(byAdding:to:wrappingComponents:)();
  Calendar.date(byAdding:to:wrappingComponents:)();
  v168(v166, v180);
  uint64_t v13 = v170;
  uint64_t v14 = v171;
  uint64_t v15 = v169 + 8;
  id v172 = *(void (**)(uint64_t, uint64_t))(v169 + 8);
  uint64_t v16 = v172;
  v0[90] = v172;
  uint64_t v173 = v15;
  v0[91] = v15 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v16(v13, v14);
  uint64_t v17 = v175;
  uint64_t v18 = v176;
  uint64_t v19 = v174 + 8;
  char v20 = *(void (**)(uint64_t, uint64_t))(v174 + 8);
  v0[92] = v20;
  v0[93] = v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v20(v17, v18);
  uint64_t v21 = v178;
  uint64_t v22 = v179;
  uint64_t v23 = v180;
  uint64_t v24 = v177 + 48;
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v177 + 48);
  v0[94] = v25;
  v0[95] = v24 & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v25(v21, v22, v23) == 1)
  {
    uint64_t v55 = *(void *)(v157 + 568);
    uint64_t v56 = *(void *)(v157 + 464);
    uint64_t v57 = *(void *)(v157 + 456);
    uint64_t v133 = *(void *)(v157 + 448);
    uint64_t v131 = v57;
    outlined destroy of Date?(v55);
    uint64_t v132 = Logger.wellness.unsafeMutableAddressor();
    uint64_t v134 = v157 + 120;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v131 + 16))(v56, v132, v133);
    swift_endAccess();
    os_log_t oslog = (os_log_t)Logger.logObject.getter();
    int v139 = static os_log_type_t.debug.getter();
    uint64_t v137 = v157 + 248;
    *(void *)(v157 + 248) = 2;
    unint64_t v135 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v136 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v157 + 832);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v141 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, (os_log_type_t)v139))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v120 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v121 = 0;
      uint64_t v123 = createStorage<A>(capacity:type:)(0);
      uint64_t v58 = createStorage<A>(capacity:type:)(v121);
      uint64_t v59 = v123;
      uint64_t v60 = v157;
      uint64_t v124 = v58;
      uint64_t v61 = (unsigned char **)(v157 + 256);
      uint64_t v126 = (unsigned char **)(v157 + 256);
      *(void *)(v157 + 256) = buf;
      uint64_t v127 = v60 + 264;
      *(void *)(v60 + 264) = v59;
      uint64_t v128 = v60 + 272;
      *(void *)(v60 + 272) = v58;
      unsigned int v125 = 0;
      serialize(_:at:)(0, v61);
      serialize(_:at:)(v125, v126);
      *(void *)(v157 + 280) = v141;
      uint64_t v62 = (void *)swift_task_alloc();
      uint64_t v63 = v127;
      uint64_t v64 = v128;
      uint64_t v129 = v62;
      v62[2] = v126;
      v62[3] = v63;
      v62[4] = v64;
      uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, oslog, (os_log_type_t)v139, "failed to adjust day start for Meds in getMedScheduleWithDefinedValues, return nil", buf, size);
      uint64_t v119 = 0;
      destroyStorage<A>(_:count:)(v123, 0, v120);
      destroyStorage<A>(_:count:)(v124, v119, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v95 = *(void *)(v157 + 680);
    uint64_t v94 = *(void *)(v157 + 656);
    uint64_t v91 = *(void *)(v157 + 464);
    uint64_t v65 = *(void *)(v157 + 456);
    uint64_t v92 = *(void *)(v157 + 448);
    uint64_t v90 = v65;

    (*(void (**)(uint64_t, uint64_t))(v90 + 8))(v91, v92);
    uint64_t v93 = 0;
    type metadata accessor for HKMedicationExposableDoseEvent();
    uint64_t v118 = _allocateUninitializedArray<A>(_:)();
    v172(v95, v94);
    uint64_t v115 = v157 + 232;
    uint64_t v116 = v157 + 240;
    uint64_t v117 = v157 + 192;
    uint64_t v96 = *(void *)(v157 + 672);
    uint64_t v97 = *(void *)(v157 + 648);
    uint64_t v98 = *(void *)(v157 + 640);
    uint64_t v99 = *(void *)(v157 + 632);
    uint64_t v100 = *(void *)(v157 + 624);
    uint64_t v101 = *(void *)(v157 + 616);
    uint64_t v102 = *(void *)(v157 + 608);
    uint64_t v103 = *(void *)(v157 + 600);
    uint64_t v104 = *(void *)(v157 + 592);
    uint64_t v105 = *(void *)(v157 + 568);
    uint64_t v106 = *(void *)(v157 + 560);
    uint64_t v107 = *(void *)(v157 + 552);
    uint64_t v108 = *(void *)(v157 + 544);
    uint64_t v109 = *(void *)(v157 + 520);
    uint64_t v110 = *(void *)(v157 + 512);
    uint64_t v111 = *(void *)(v157 + 504);
    uint64_t v112 = *(void *)(v157 + 480);
    uint64_t v113 = *(void *)(v157 + 472);
    uint64_t v114 = *(void *)(v157 + 464);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v66 = v118;
    uint64_t v67 = *(uint64_t (**)(uint64_t))(*(void *)(v157 + 224) + 8);
    return v67(v66);
  }
  else
  {
    uint64_t v26 = v157;
    uint64_t v143 = *(void *)(v157 + 632);
    uint64_t v146 = *(void *)(v157 + 624);
    uint64_t v144 = *(void *)(v157 + 616);
    uint64_t v147 = *(void *)(v157 + 608);
    uint64_t v27 = *(void *)(v157 + 584);
    uint64_t v145 = *(void *)(v157 + 576);
    uint64_t v149 = *(void *)(v157 + 520);
    uint64_t v152 = *(void *)(v157 + 512);
    uint64_t v28 = *(void *)(v157 + 496);
    uint64_t v151 = *(void *)(v157 + 488);
    id v155 = *(id *)(v157 + 440);
    uint64_t v153 = *(void *)(v157 + 432);
    uint64_t v142 = v27;
    uint64_t v148 = v28;
    uint64_t v150 = v28;
    uint64_t v29 = *(void (**)(void))(v27 + 32);
    *(void *)(v157 + 768) = v29;
    *(void *)(v26 + 776) = (v27 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v29();
    uint64_t v30 = v143;
    uint64_t v31 = v145;
    uint64_t v32 = v157;
    uint64_t v33 = v146;
    uint64_t v34 = v142 + 16;
    uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v142 + 16);
    *(void *)(v157 + 784) = v35;
    *(void *)(v32 + 792) = v34 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v35(v33, v30, v31);
    Date.init()();
    Date.endOfDay.getter(v147);
    uint64_t v36 = v152;
    v168(v144, v145);
    DateInterval.init(start:end:)();
    id v37 = v155;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v148 + 16))(v36, v149, v151);
    v38.super.Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
    uint64_t v39 = v150;
    uint64_t v40 = v151;
    uint64_t v41 = v157;
    Class isa = v38.super.isa;
    uint64_t v43 = v152;
    Class v154 = isa;
    *(void *)(v157 + 800) = isa;
    uint64_t v44 = v39 + 8;
    uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    *(void *)(v41 + 808) = v45;
    *(void *)(v41 + 816) = v44 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v45(v43, v40);
    uint64_t v46 = v157;
    uint64_t v47 = *(void *)(v157 + 224);
    uint64_t v156 = v157 + 16;
    *(void *)(v157 + 16) = v47;
    *(void *)(v46 + 56) = v46 + 296;
    *(void *)(v46 + 24) = SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:);
    uint64_t v48 = swift_continuation_init();
    uint64_t v49 = v153;
    Class v50 = v154;
    uint64_t v51 = v157;
    uint64_t v52 = v48;
    id v53 = v155;
    *(void *)(v157 + 112) = v52;
    *(void *)(v51 + 80) = MEMORY[0x263EF8330];
    *(_DWORD *)(v51 + 88) = 0x40000000;
    *(_DWORD *)(v51 + 92) = 0;
    *(void *)(v51 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [HKMedicationExposableDoseEvent];
    *(void *)(v51 + 104) = &block_descriptor_971;
    objc_msgSend(v53, sel_doseEventsForDateInterval_medicationIdentifier_completion_, v50, v49);
    return __swift_continuation_await_point();
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  uint64_t v4 = (void *)*v0;
  v4[28] = *v0;
  uint64_t v1 = v4[6];
  v4[103] = v1;
  if (v1)
  {
    char v2 = SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:);
  }
  else
  {
    char v2 = SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint32_t v28;
  os_log_type_t v29;
  NSObject *log;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *buf;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint32_t size;
  os_log_type_t v59;
  NSObject *oslog;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  void (*v82)(uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t);
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  unsigned int (*v91)(uint64_t, uint64_t, uint64_t);
  uint64_t v92;

  uint64_t v78 = (void *)v0[100];
  uint64_t v91 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[94];
  uint64_t v88 = (void (*)(uint64_t, uint64_t))v0[92];
  char v85 = (void (*)(uint64_t, uint64_t))v0[90];
  uint64_t v82 = (void (*)(uint64_t, uint64_t))v0[88];
  uint64_t v80 = (void (*)(uint64_t, uint64_t, uint64_t))v0[86];
  char v79 = v0[85];
  char v83 = v0[84];
  uint64_t v84 = v0[82];
  char v81 = v0[78];
  uint64_t v90 = v0[72];
  char v89 = v0[70];
  uint64_t v86 = v0[68];
  char v87 = v0[66];
  uint64_t v76 = (void *)v0[55];
  v0[28] = v0;
  char v77 = v0[37];
  swift_bridgeObjectRetain();
  v0[36] = v77;

  static Calendar.current.getter();
  v80(v83, v79, v84);
  DateInterval.start.getter();
  default argument 2 of Calendar.date(byAdding:to:wrappingComponents:)();
  Calendar.date(byAdding:to:wrappingComponents:)();
  v82(v81, v90);
  v85(v83, v84);
  v88(v86, v87);
  if (v91(v89, 1, v90) == 1)
  {
    uint64_t v24 = *(void *)(v75 + 560);
    uint64_t v3 = *(void *)(v75 + 472);
    uint64_t v27 = *(void *)(v75 + 448);
    uint64_t v25 = *(void *)(v75 + 456);
    swift_bridgeObjectRelease();
    outlined destroy of Date?(v24);
    uint64_t v26 = Logger.wellness.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v3, v26, v27);
    swift_endAccess();
    log = Logger.logObject.getter();
    uint64_t v29 = static os_log_type_t.debug.getter();
    *(void *)(v75 + 304) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v28 = *(_DWORD *)(v75 + 836);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v31 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v29))
    {
      char v20 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v21 = createStorage<A>(capacity:type:)(0);
      uint64_t v22 = createStorage<A>(capacity:type:)(0);
      *(void *)(v75 + 312) = v20;
      *(void *)(v75 + 320) = v21;
      *(void *)(v75 + 328) = v22;
      serialize(_:at:)(0, (unsigned char **)(v75 + 312));
      serialize(_:at:)(0, (unsigned char **)(v75 + 312));
      *(void *)(v75 + 336) = v31;
      uint64_t v23 = (void *)swift_task_alloc();
      v23[2] = v75 + 312;
      v23[3] = v75 + 320;
      v23[4] = v75 + 328;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, log, v29, "failed to adjust interval start for Meds in getMedScheduleWithDefinedValues, return nil", v20, v28);
      destroyStorage<A>(_:count:)(v21, 0, v19);
      destroyStorage<A>(_:count:)(v22, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v20, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v75 + 808);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v75 + 720);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v75 + 704);
    uint64_t v15 = *(void *)(v75 + 680);
    uint64_t v16 = *(void *)(v75 + 656);
    uint64_t v12 = *(void *)(v75 + 632);
    uint64_t v13 = *(void *)(v75 + 576);
    uint64_t v11 = *(void *)(v75 + 520);
    uint64_t v9 = *(void *)(v75 + 488);
    uint64_t v7 = *(void *)(v75 + 472);
    uint64_t v8 = *(void *)(v75 + 448);
    uint64_t v6 = *(void *)(v75 + 456);

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    type metadata accessor for HKMedicationExposableDoseEvent();
    uint64_t v18 = _allocateUninitializedArray<A>(_:)();
    outlined destroy of [HKQuantityType]();
    v10(v11, v9);
    v14(v12, v13);
    v17(v15, v16);
    uint64_t v44 = v18;
  }
  else
  {
    uint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 784);
    char v73 = *(void *)(v75 + 624);
    uint64_t v70 = *(void *)(v75 + 600);
    char v71 = *(void *)(v75 + 576);
    (*(void (**)(void))(v75 + 768))();
    v72(v73, v70, v71);
    DateInterval.end.getter();
    DateInterval.init(start:end:)();
    type metadata accessor for HKMedicationExposableDoseEvent();
    *(void *)(v75 + 344) = _allocateUninitializedArray<A>(_:)();
    *(void *)(v75 + 352) = v77;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    Collection<>.makeIterator()();
    uint64_t v74 = 0;
    while (1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
      IndexingIterator.next()();
      char v69 = *(id *)(v75 + 360);
      if (!v69) {
        break;
      }
      *(void *)(v75 + 368) = v69;
      uint64_t v67 = objc_msgSend(v69, sel_scheduledDate);
      if (v67)
      {
        uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 768);
        uint64_t v62 = *(void *)(v75 + 624);
        uint64_t v65 = *(void *)(v75 + 576);
        uint64_t v66 = *(void *)(v75 + 552);
        uint64_t v64 = *(void *)(v75 + 584);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();
        v63(v66, v62, v65);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v64 + 56))(v66, 0, 1, v65);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v75 + 584) + 56))(*(void *)(v75 + 552), 1, 1, *(void *)(v75 + 576));
      }
      if ((*(unsigned int (**)(void, uint64_t, void))(v75 + 752))(*(void *)(v75 + 552), 1, *(void *)(v75 + 576)) == 1)
      {
        char v2 = *(void *)(v75 + 480);
        uint64_t v57 = *(void *)(v75 + 448);
        uint64_t v55 = *(void *)(v75 + 456);
        outlined destroy of Date?(*(void *)(v75 + 552));
        uint64_t v56 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v2, v56, v57);
        swift_endAccess();
        os_log_t oslog = Logger.logObject.getter();
        uint64_t v59 = static os_log_type_t.debug.getter();
        *(void *)(v75 + 376) = 2;
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t size = *(_DWORD *)(v75 + 840);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v61 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(oslog, v59))
        {
          buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          Class v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v52 = createStorage<A>(capacity:type:)(0);
          id v53 = createStorage<A>(capacity:type:)(0);
          *(void *)(v75 + 384) = buf;
          *(void *)(v75 + 392) = v52;
          *(void *)(v75 + 400) = v53;
          serialize(_:at:)(0, (unsigned char **)(v75 + 384));
          serialize(_:at:)(0, (unsigned char **)(v75 + 384));
          *(void *)(v75 + 408) = v61;
          uint64_t v54 = (void *)swift_task_alloc();
          v54[2] = v75 + 384;
          v54[3] = v75 + 392;
          v54[4] = v75 + 400;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_25DE00000, oslog, v59, "doesn't have a scheduled date, skipping.", buf, size);
          destroyStorage<A>(_:count:)(v52, 0, v50);
          destroyStorage<A>(_:count:)(v53, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
          uint64_t v48 = 0;
          uint64_t v49 = 0;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v48 = v74;
          uint64_t v49 = v68;
        }
        uint64_t v46 = *(void *)(v75 + 480);
        uint64_t v47 = *(void *)(v75 + 448);
        uint64_t v45 = *(void *)(v75 + 456);

        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v47);
        uint64_t v74 = v48;
        uint64_t v68 = v49;
      }
      else
      {
        (*(void (**)(void))(v75 + 768))();
        if (DateInterval.contains(_:)())
        {
          uint64_t v1 = v69;
          *(void *)(v75 + 416) = v69;
          Array.append(_:)();
        }
        (*(void (**)(void, void))(v75 + 704))(*(void *)(v75 + 592), *(void *)(v75 + 576));
      }
    }
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v75 + 808);
    BOOL v42 = *(void (**)(uint64_t, uint64_t))(v75 + 720);
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v75 + 704);
    uint64_t v40 = *(void *)(v75 + 680);
    uint64_t v41 = *(void *)(v75 + 656);
    id v37 = *(void *)(v75 + 632);
    uint64_t v33 = *(void *)(v75 + 600);
    NSDateInterval v38 = *(void *)(v75 + 576);
    uint64_t v36 = *(void *)(v75 + 520);
    uint64_t v32 = *(void *)(v75 + 504);
    uint64_t v34 = *(void *)(v75 + 488);
    outlined destroy of [HKQuantityType]();
    uint64_t v43 = *(void *)(v75 + 344);
    swift_bridgeObjectRetain();
    outlined destroy of [HKQuantityType]();
    v35(v32, v34);
    v39(v33, v38);
    outlined destroy of [HKQuantityType]();
    v35(v36, v34);
    v39(v37, v38);
    v42(v40, v41);
    uint64_t v44 = v43;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(v75 + 224) + 8);
  return v4(v44);
}

{
  void *v0;
  uint64_t (*v1)();
  id v3;
  id v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v6 = (void (*)(uint64_t, uint64_t))v0[101];
  uint64_t v4 = (id)v0[100];
  uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[90];
  uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[88];
  uint64_t v11 = v0[85];
  uint64_t v9 = v0[82];
  uint64_t v12 = v0[79];
  uint64_t v7 = v0[72];
  uint64_t v13 = v0[65];
  uint64_t v5 = v0[61];
  uint64_t v3 = (id)v0[55];
  v0[28] = v0;
  swift_willThrow();

  v6(v13, v5);
  v8(v12, v7);
  v10(v11, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)())(v0[28] + 8);
  return v1();
}

uint64_t closure #1 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(id *a1, uint64_t a2, uint64_t a3)
{
  id v19 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  id v19 = *a1;
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  id v13 = objc_msgSend(v19, sel_scheduleItemIdentifier);
  if (v13)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v3;

    uint64_t v9 = v7;
    uint64_t v10 = v8;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15[0] = v9;
  v15[1] = v10;
  v15[2] = a2;
  uint64_t v16 = a3;
  if (!v10)
  {
    if (!v16)
    {
      outlined destroy of String.UTF8View();
      char v6 = 1;
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  outlined init with copy of String?(v15, &v14);
  if (!v16)
  {
    outlined destroy of String.UTF8View();
LABEL_11:
    outlined destroy of (String?, String?)();
    char v6 = 0;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of String.UTF8View();
  char v6 = v5;
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6 & 1;
}

uint64_t implicit closure #8 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(a1 + 16);
  swift_beginAccess();
  outlined init with copy of [NSSortDescriptor](v3, a2);
  return swift_endAccess();
}

uint64_t SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 664) = a7;
  *(void *)(v7 + 656) = a6;
  *(void *)(v7 + 648) = a5;
  *(void *)(v7 + 640) = a4;
  *(unsigned char *)(v7 + 41) = a3;
  *(void *)(v7 + 632) = a2;
  *(void *)(v7 + 624) = a1;
  *(void *)(v7 + 384) = v7;
  *(void *)(v7 + 392) = 0;
  *(void *)(v7 + 352) = 0;
  *(unsigned char *)(v7 + 360) = 0;
  *(void *)(v7 + 288) = 0;
  *(void *)(v7 + 296) = 0;
  *(void *)(v7 + 304) = 0;
  *(void *)(v7 + 312) = 0;
  *(unsigned char *)(v7 + 952) = 0;
  *(void *)(v7 + 320) = 0;
  *(void *)(v7 + 328) = 0;
  *(void *)(v7 + 336) = 0;
  *(void *)(v7 + 344) = 0;
  *(unsigned char *)(v7 + 960) = 0;
  *(void *)(v7 + 464) = 0;
  *(void *)(v7 + 488) = 0;
  *(void *)(v7 + 496) = 0;
  *(void *)(v7 + 512) = 0;
  *(unsigned char *)(v7 + 968) = 0;
  *(void *)(v7 + 616) = 0;
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v7 + 672) = v8;
  *(void *)(v7 + 680) = *(void *)(v8 - 8);
  *(void *)(v7 + 688) = swift_task_alloc();
  *(void *)(v7 + 696) = swift_task_alloc();
  *(void *)(v7 + 704) = swift_task_alloc();
  *(void *)(v7 + 712) = swift_task_alloc();
  *(void *)(v7 + 720) = swift_task_alloc();
  *(void *)(v7 + 728) = swift_task_alloc();
  *(void *)(v7 + 736) = swift_task_alloc();
  *(void *)(v7 + 744) = swift_task_alloc();
  *(void *)(v7 + 752) = swift_task_alloc();
  *(void *)(v7 + 760) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  *(void *)(v7 + 768) = v9;
  *(void *)(v7 + 776) = *(void *)(v9 - 8);
  *(void *)(v7 + 784) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v7 + 792) = swift_task_alloc();
  *(void *)(v7 + 392) = a1;
  *(void *)(v7 + 352) = a2;
  *(unsigned char *)(v7 + 360) = a3 & 1;
  *(void *)(v7 + 288) = a4;
  *(void *)(v7 + 296) = a5;
  *(void *)(v7 + 304) = a6;
  *(void *)(v7 + 312) = a7;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:), 0);
}

uint64_t SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)()
{
  uint64_t v1 = *(void **)(v0 + 624);
  *(void *)(v0 + 384) = v0;
  id v18 = objc_msgSend(v1, sel_scheduledDate);
  if (v18)
  {
    uint64_t v16 = *(void *)(v17 + 792);
    uint64_t v14 = *(void *)(v17 + 784);
    uint64_t v15 = *(void *)(v17 + 768);
    uint64_t v13 = *(void *)(v17 + 776);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v16, v14, v15);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v15);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v17 + 776) + 56))(*(void *)(v17 + 792), 1, 1, *(void *)(v17 + 768));
  }
  BOOL v12 = (*(unsigned int (**)(void, uint64_t, void))(*(void *)(v17 + 776) + 48))(*(void *)(v17 + 792), 1, *(void *)(v17 + 768)) != 1;
  *(unsigned char *)(v17 + 42) = v12;
  id v7 = *(id *)(v17 + 624);
  outlined destroy of Date?(*(void *)(v17 + 792));
  *(unsigned char *)(v17 + 952) = v12;
  id v8 = objc_msgSend(v7, sel_medicationIdentifier);
  id v9 = objc_msgSend(v8, sel_underlyingIdentifier);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v2;
  *(void *)(v17 + 800) = v11;
  *(void *)(v17 + 808) = v2;
  *(void *)(v17 + 320) = v11;
  *(void *)(v17 + 328) = v2;

  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v17 + 816) = v3;
  void *v3 = *(void *)(v17 + 384);
  v3[1] = SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
  uint64_t v4 = *(void *)(v17 + 664);
  uint64_t v5 = *(void *)(v17 + 656);
  return SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(v11, v10, v5, v4, 1.0);
}

{
  uint64_t v0;
  Swift::String_optional v1;
  uint64_t v2;
  Swift::String_optional v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t (*v22)(id);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint32_t v32;
  os_log_type_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint32_t v46;
  os_log_type_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint32_t v59;
  os_log_type_t v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint32_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  NSObject *v85;
  os_log_type_t v86;
  id v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint32_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  NSObject *v104;
  os_log_type_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  id v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint8_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint32_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  NSObject *log;
  os_log_type_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void (*v142)(uint64_t, uint64_t);
  char v143;
  uint64_t v144;
  uint8_t *buf;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(uint64_t, uint64_t, uint64_t);
  Swift::Bool v153;
  Swift::String_optional v154;
  uint64_t v155;
  uint64_t v156;
  uint32_t size;
  uint64_t v158;
  uint64_t v159;
  Swift::String_optional *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  NSObject *oslog;
  os_log_type_t v175;
  uint8_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t (*v179)(uint64_t, uint64_t, uint64_t);
  uint64_t v180;
  Class isa;
  uint8_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t (*v185)(uint64_t, uint64_t, uint64_t);
  uint64_t v186;
  uint8_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t (*v190)(uint64_t, uint64_t, uint64_t);
  uint64_t v191;
  uint8_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t (*v195)(uint64_t, uint64_t, uint64_t);
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;

  uint64_t v197 = v0;
  uint64_t v1 = *(Swift::String_optional *)(v0 + 848);
  uint64_t v156 = *(void *)(v0 + 832);
  id v155 = *(void *)(v0 + 824);
  uint64_t v2 = *(void *)(v0 + 760);
  uint64_t v149 = *(void *)(v0 + 680);
  uint64_t v151 = *(void *)(v0 + 672);
  uint64_t v3 = *(Swift::String_optional *)(v0 + 640);
  Class v154 = v3;
  *(void *)(v0 + 384) = v0;
  uint64_t v153 = isCompatibleUnit(_:_:)(v3, v1);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v0 + 960) = v153;
  uint64_t v150 = Logger.wellness.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v152 = *(void (**)(uint64_t, uint64_t, uint64_t))(v149 + 16);
  *(void *)(v0 + 864) = v152;
  *(void *)(v0 + 872) = (v149 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v152(v2, v150, v151);
  swift_endAccess();
  uint64_t v158 = swift_allocObject();
  *(unsigned char *)(v158 + 16) = v153;
  swift_bridgeObjectRetain();
  uint64_t v160 = (Swift::String_optional *)swift_allocObject();
  v160[1] = v154;
  swift_bridgeObjectRetain();
  uint64_t v162 = swift_allocObject();
  *(void *)(v162 + 16) = v155;
  *(void *)(v162 + 24) = v156;
  os_log_t oslog = Logger.logObject.getter();
  uint64_t v175 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 400) = 32;
  *(void *)(v0 + 880) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 888) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 896) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 44);
  uint64_t v164 = swift_allocObject();
  *(unsigned char *)(v164 + 16) = 32;
  uint64_t v165 = swift_allocObject();
  *(unsigned char *)(v165 + 16) = 8;
  uint64_t v159 = swift_allocObject();
  *(void *)(v159 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
  *(void *)(v159 + 24) = v158;
  uint64_t v166 = swift_allocObject();
  *(void *)(v166 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v166 + 24) = v159;
  uint64_t v167 = swift_allocObject();
  *(unsigned char *)(v167 + 16) = 32;
  uint64_t v168 = swift_allocObject();
  *(unsigned char *)(v168 + 16) = 8;
  uint64_t v161 = swift_allocObject();
  *(void *)(v161 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(void *)(v161 + 24) = v160;
  uint64_t v169 = swift_allocObject();
  *(void *)(v169 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v169 + 24) = v161;
  uint64_t v170 = swift_allocObject();
  *(unsigned char *)(v170 + 16) = 32;
  uint64_t v171 = swift_allocObject();
  *(unsigned char *)(v171 + 16) = 8;
  int v163 = swift_allocObject();
  *(void *)(v163 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(void *)(v163 + 24) = v162;
  id v172 = swift_allocObject();
  *(void *)(v172 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v172 + 24) = v163;
  *(void *)(v0 + 904) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v173 = v4;
  swift_retain();
  *uint64_t v173 = partial apply for closure #1 in OSLogArguments.append(_:);
  v173[1] = v164;
  swift_retain();
  v173[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v173[3] = v165;
  swift_retain();
  v173[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v173[5] = v166;
  swift_retain();
  v173[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v173[7] = v167;
  swift_retain();
  v173[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v173[9] = v168;
  swift_retain();
  v173[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v173[11] = v169;
  swift_retain();
  v173[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v173[13] = v170;
  swift_retain();
  v173[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v173[15] = v171;
  swift_retain();
  v173[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v173[17] = v172;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v175))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v146 = createStorage<A>(capacity:type:)(0);
    uint64_t v147 = createStorage<A>(capacity:type:)(3);
    uint64_t v192 = buf;
    uint64_t v193 = v146;
    uint64_t v194 = v147;
    serialize(_:at:)(2, &v192);
    serialize(_:at:)(3, &v192);
    uint64_t v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v196 = v164;
    closure #1 in osLogInternal(_:log:type:)(&v195, (uint64_t)&v192, (uint64_t)&v193, (uint64_t)&v194);
    uint64_t v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v196 = v165;
    closure #1 in osLogInternal(_:log:type:)(&v195, (uint64_t)&v192, (uint64_t)&v193, (uint64_t)&v194);
    uint64_t v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v196 = v166;
    closure #1 in osLogInternal(_:log:type:)(&v195, (uint64_t)&v192, (uint64_t)&v193, (uint64_t)&v194);
    uint64_t v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v196 = v167;
    closure #1 in osLogInternal(_:log:type:)(&v195, (uint64_t)&v192, (uint64_t)&v193, (uint64_t)&v194);
    uint64_t v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v196 = v168;
    closure #1 in osLogInternal(_:log:type:)(&v195, (uint64_t)&v192, (uint64_t)&v193, (uint64_t)&v194);
    uint64_t v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v196 = v169;
    closure #1 in osLogInternal(_:log:type:)(&v195, (uint64_t)&v192, (uint64_t)&v193, (uint64_t)&v194);
    uint64_t v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v196 = v170;
    closure #1 in osLogInternal(_:log:type:)(&v195, (uint64_t)&v192, (uint64_t)&v193, (uint64_t)&v194);
    uint64_t v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v196 = v171;
    closure #1 in osLogInternal(_:log:type:)(&v195, (uint64_t)&v192, (uint64_t)&v193, (uint64_t)&v194);
    uint64_t v195 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v196 = v172;
    closure #1 in osLogInternal(_:log:type:)(&v195, (uint64_t)&v192, (uint64_t)&v193, (uint64_t)&v194);
    _os_log_impl(&dword_25DE00000, oslog, v175, "hasCompatibleUnit: (%s), with inputDosageUnit (%s) and getAsNeededDosageUnit(%s)", buf, size);
    destroyStorage<A>(_:count:)(v146, 0, v144);
    destroyStorage<A>(_:count:)(v147, 3, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v143 = *(unsigned char *)(v148 + 42);
  unsigned int v140 = *(void *)(v148 + 760);
  uint64_t v141 = *(void *)(v148 + 672);
  int v139 = *(void *)(v148 + 680);

  uint64_t v142 = *(void (**)(uint64_t, uint64_t))(v139 + 8);
  *(void *)(v148 + 912) = v142;
  *(void *)(v148 + 920) = (v139 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v142(v140, v141);
  if (v143)
  {
    uint64_t v5 = *(void *)(v148 + 752);
    uint64_t v120 = *(void *)(v148 + 672);
    uint64_t v124 = *(void *)(v148 + 648);
    uint64_t v123 = *(void *)(v148 + 640);
    os_log_type_t v122 = *(unsigned char *)(v148 + 41);
    uint64_t v121 = *(void *)(v148 + 632);
    uint64_t v119 = Logger.wellness.unsafeMutableAddressor();
    swift_beginAccess();
    v152(v5, v119, v120);
    swift_endAccess();
    uint64_t v126 = swift_allocObject();
    *(void *)(v126 + 16) = v121;
    *(unsigned char *)(v126 + 24) = v122 & 1;
    swift_bridgeObjectRetain();
    uint64_t v128 = swift_allocObject();
    *(void *)(v128 + 16) = v123;
    *(void *)(v128 + 24) = v124;
    log = Logger.logObject.getter();
    uint64_t v138 = static os_log_type_t.debug.getter();
    *(void *)(v148 + 584) = 22;
    UnsignedInteger<>.init<A>(_:)();
    unsigned int v125 = *(_DWORD *)(v148 + 980);
    uint64_t v130 = swift_allocObject();
    *(unsigned char *)(v130 + 16) = 32;
    uint64_t v131 = swift_allocObject();
    *(unsigned char *)(v131 + 16) = 8;
    uint64_t v127 = swift_allocObject();
    *(void *)(v127 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(void *)(v127 + 24) = v126;
    uint64_t v132 = swift_allocObject();
    *(void *)(v132 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v132 + 24) = v127;
    uint64_t v133 = swift_allocObject();
    *(unsigned char *)(v133 + 16) = 32;
    uint64_t v134 = swift_allocObject();
    *(unsigned char *)(v134 + 16) = 8;
    uint64_t v129 = swift_allocObject();
    *(void *)(v129 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
    *(void *)(v129 + 24) = v128;
    unint64_t v135 = swift_allocObject();
    *(void *)(v135 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v135 + 24) = v129;
    _allocateUninitializedArray<A>(_:)();
    unint64_t v136 = v6;
    swift_retain();
    *unint64_t v136 = partial apply for closure #1 in OSLogArguments.append(_:);
    v136[1] = v130;
    swift_retain();
    v136[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v136[3] = v131;
    swift_retain();
    v136[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v136[5] = v132;
    swift_retain();
    v136[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v136[7] = v133;
    swift_retain();
    v136[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v136[9] = v134;
    swift_retain();
    v136[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v136[11] = v135;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v138))
    {
      uint64_t v116 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v117 = createStorage<A>(capacity:type:)(0);
      uint64_t v118 = createStorage<A>(capacity:type:)(2);
      uint64_t v187 = v116;
      uint64_t v188 = v117;
      uint64_t v189 = v118;
      serialize(_:at:)(2, &v187);
      serialize(_:at:)(2, &v187);
      uint64_t v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v191 = v130;
      closure #1 in osLogInternal(_:log:type:)(&v190, (uint64_t)&v187, (uint64_t)&v188, (uint64_t)&v189);
      uint64_t v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v191 = v131;
      closure #1 in osLogInternal(_:log:type:)(&v190, (uint64_t)&v187, (uint64_t)&v188, (uint64_t)&v189);
      uint64_t v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v191 = v132;
      closure #1 in osLogInternal(_:log:type:)(&v190, (uint64_t)&v187, (uint64_t)&v188, (uint64_t)&v189);
      uint64_t v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v191 = v133;
      closure #1 in osLogInternal(_:log:type:)(&v190, (uint64_t)&v187, (uint64_t)&v188, (uint64_t)&v189);
      uint64_t v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v191 = v134;
      closure #1 in osLogInternal(_:log:type:)(&v190, (uint64_t)&v187, (uint64_t)&v188, (uint64_t)&v189);
      uint64_t v190 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v191 = v135;
      closure #1 in osLogInternal(_:log:type:)(&v190, (uint64_t)&v187, (uint64_t)&v188, (uint64_t)&v189);
      _os_log_impl(&dword_25DE00000, log, v138, "updateDosageForDoseEvent: scheduled med, got inputDosage (%s) and inputDosageUnit (%s)", v116, v125);
      destroyStorage<A>(_:count:)(v117, 0, v115);
      destroyStorage<A>(_:count:)(v118, 2, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v116, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v112 = *(void *)(v148 + 752);
    uint64_t v113 = *(void *)(v148 + 672);
    uint64_t v114 = *(unsigned char *)(v148 + 41);

    v142(v112, v113);
    id v7 = *(id *)(v148 + 624);
    if (v114)
    {
      uint64_t v111 = 1;
LABEL_22:
      uint64_t v10 = *(void *)(v148 + 744);
      uint64_t v96 = *(void *)(v148 + 672);

      *(unsigned char *)(v148 + 968) = v111 & 1;
      uint64_t v95 = Logger.wellness.unsafeMutableAddressor();
      swift_beginAccess();
      v152(v10, v95, v96);
      swift_endAccess();
      uint64_t v98 = swift_allocObject();
      *(unsigned char *)(v98 + 16) = v111 & 1;
      uint64_t v104 = Logger.logObject.getter();
      uint64_t v105 = static os_log_type_t.debug.getter();
      *(void *)(v148 + 592) = 12;
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v97 = *(_DWORD *)(v148 + 984);
      uint64_t v100 = swift_allocObject();
      *(unsigned char *)(v100 + 16) = 32;
      uint64_t v101 = swift_allocObject();
      *(unsigned char *)(v101 + 16) = 8;
      uint64_t v99 = swift_allocObject();
      *(void *)(v99 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
      *(void *)(v99 + 24) = v98;
      uint64_t v102 = swift_allocObject();
      *(void *)(v102 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v102 + 24) = v99;
      _allocateUninitializedArray<A>(_:)();
      uint64_t v103 = v11;
      swift_retain();
      *uint64_t v103 = partial apply for closure #1 in OSLogArguments.append(_:);
      v103[1] = v100;
      swift_retain();
      v103[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v103[3] = v101;
      swift_retain();
      v103[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v103[5] = v102;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v104, v105))
      {
        uint64_t v92 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v93 = createStorage<A>(capacity:type:)(0);
        uint64_t v94 = createStorage<A>(capacity:type:)(1);
        uint64_t v182 = v92;
        uint64_t v183 = v93;
        uint64_t v184 = v94;
        serialize(_:at:)(2, &v182);
        serialize(_:at:)(1, &v182);
        uint64_t v185 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v186 = v100;
        closure #1 in osLogInternal(_:log:type:)(&v185, (uint64_t)&v182, (uint64_t)&v183, (uint64_t)&v184);
        uint64_t v185 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v186 = v101;
        closure #1 in osLogInternal(_:log:type:)(&v185, (uint64_t)&v182, (uint64_t)&v183, (uint64_t)&v184);
        uint64_t v185 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v186 = v102;
        closure #1 in osLogInternal(_:log:type:)(&v185, (uint64_t)&v182, (uint64_t)&v183, (uint64_t)&v184);
        _os_log_impl(&dword_25DE00000, v104, v105, "has compatible dosage: (%s)", v92, v97);
        destroyStorage<A>(_:count:)(v93, 0, v91);
        destroyStorage<A>(_:count:)(v94, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v92, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      char v89 = *(void *)(v148 + 744);
      uint64_t v90 = *(void *)(v148 + 672);

      v142(v89, v90);
      if (v153 && (v111 & 1) != 0)
      {
        *(void *)(v148 + 608) = objc_msgSend(*(id *)(v148 + 624), sel_scheduledDoseQuantity);
        if (*(void *)(v148 + 608))
        {
          Class isa = *(Class *)(v148 + 608);
        }
        else
        {
          type metadata accessor for NSNumber();
          Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
          outlined destroy of HealthKitPersistor((id *)(v148 + 608));
        }
        char v87 = objc_msgSend(*(id *)(v148 + 624), sel_updateForNewDoseQuantity_);

        *(void *)(v148 + 616) = v87;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v88 = v87;
LABEL_48:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v22 = *(uint64_t (**)(id))(*(void *)(v148 + 384) + 8);
        return v22(v88);
      }
      BOOL v12 = *(void *)(v148 + 736);
      uint64_t v70 = *(void *)(v148 + 672);
      uint64_t v72 = *(void *)(v148 + 648);
      char v71 = *(void *)(v148 + 640);
      char v69 = Logger.wellness.unsafeMutableAddressor();
      swift_beginAccess();
      v152(v12, v69, v70);
      swift_endAccess();
      uint64_t v74 = swift_allocObject();
      *(unsigned char *)(v74 + 16) = v153;
      swift_bridgeObjectRetain();
      uint64_t v76 = swift_allocObject();
      *(void *)(v76 + 16) = v71;
      *(void *)(v76 + 24) = v72;
      char v85 = Logger.logObject.getter();
      uint64_t v86 = static os_log_type_t.debug.getter();
      *(void *)(v148 + 600) = 22;
      UnsignedInteger<>.init<A>(_:)();
      char v73 = *(_DWORD *)(v148 + 988);
      uint64_t v78 = swift_allocObject();
      *(unsigned char *)(v78 + 16) = 32;
      char v79 = swift_allocObject();
      *(unsigned char *)(v79 + 16) = 8;
      char v75 = swift_allocObject();
      *(void *)(v75 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
      *(void *)(v75 + 24) = v74;
      uint64_t v80 = swift_allocObject();
      *(void *)(v80 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v80 + 24) = v75;
      char v81 = swift_allocObject();
      *(unsigned char *)(v81 + 16) = 32;
      uint64_t v82 = swift_allocObject();
      *(unsigned char *)(v82 + 16) = 8;
      char v77 = swift_allocObject();
      *(void *)(v77 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
      *(void *)(v77 + 24) = v76;
      char v83 = swift_allocObject();
      *(void *)(v83 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v83 + 24) = v77;
      _allocateUninitializedArray<A>(_:)();
      uint64_t v84 = v13;
      swift_retain();
      *uint64_t v84 = partial apply for closure #1 in OSLogArguments.append(_:);
      v84[1] = v78;
      swift_retain();
      v84[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v84[3] = v79;
      swift_retain();
      v84[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v84[5] = v80;
      swift_retain();
      v84[6] = partial apply for closure #1 in OSLogArguments.append(_:);
      v84[7] = v81;
      swift_retain();
      v84[8] = partial apply for closure #1 in OSLogArguments.append(_:);
      v84[9] = v82;
      swift_retain();
      v84[10] = partial apply for closure #1 in OSLogArguments.append(_:);
      v84[11] = v83;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v85, v86))
      {
        uint64_t v66 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v67 = createStorage<A>(capacity:type:)(0);
        uint64_t v68 = createStorage<A>(capacity:type:)(2);
        uint64_t v176 = v66;
        uint64_t v177 = v67;
        uint64_t v178 = v68;
        serialize(_:at:)(2, &v176);
        serialize(_:at:)(2, &v176);
        unsigned int v179 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v180 = v78;
        closure #1 in osLogInternal(_:log:type:)(&v179, (uint64_t)&v176, (uint64_t)&v177, (uint64_t)&v178);
        unsigned int v179 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v180 = v79;
        closure #1 in osLogInternal(_:log:type:)(&v179, (uint64_t)&v176, (uint64_t)&v177, (uint64_t)&v178);
        unsigned int v179 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v180 = v80;
        closure #1 in osLogInternal(_:log:type:)(&v179, (uint64_t)&v176, (uint64_t)&v177, (uint64_t)&v178);
        unsigned int v179 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v180 = v81;
        closure #1 in osLogInternal(_:log:type:)(&v179, (uint64_t)&v176, (uint64_t)&v177, (uint64_t)&v178);
        unsigned int v179 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v180 = v82;
        closure #1 in osLogInternal(_:log:type:)(&v179, (uint64_t)&v176, (uint64_t)&v177, (uint64_t)&v178);
        unsigned int v179 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v180 = v83;
        closure #1 in osLogInternal(_:log:type:)(&v179, (uint64_t)&v176, (uint64_t)&v177, (uint64_t)&v178);
        _os_log_impl(&dword_25DE00000, v85, v86, "isScheduled fell through, with hasCompatibleUnit (%s) and hasCompatibleDosage (%s)", v66, v73);
        destroyStorage<A>(_:count:)(v67, 0, v65);
        destroyStorage<A>(_:count:)(v68, 2, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v66, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v63 = *(void *)(v148 + 736);
      uint64_t v64 = *(void *)(v148 + 672);

      v142(v63, v64);
LABEL_45:
      uint64_t v21 = *(void *)(v148 + 688);
      uint64_t v31 = *(void *)(v148 + 672);
      uint64_t v30 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v152(v21, v30, v31);
      swift_endAccess();
      uint64_t v34 = Logger.logObject.getter();
      uint64_t v33 = static os_log_type_t.error.getter();
      *(void *)(v148 + 416) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v32 = *(_DWORD *)(v148 + 380);
      uint64_t v35 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v34, v33))
      {
        uint64_t v26 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v27 = createStorage<A>(capacity:type:)(0);
        uint64_t v28 = createStorage<A>(capacity:type:)(0);
        *(void *)(v148 + 424) = v26;
        *(void *)(v148 + 432) = v27;
        *(void *)(v148 + 440) = v28;
        serialize(_:at:)(0, (unsigned char **)(v148 + 424));
        serialize(_:at:)(0, (unsigned char **)(v148 + 424));
        *(void *)(v148 + 448) = v35;
        uint64_t v29 = (void *)swift_task_alloc();
        v29[2] = v148 + 424;
        v29[3] = v148 + 432;
        v29[4] = v148 + 440;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25DE00000, v34, v33, "updateDosageForDoseEvent fell through, this is a complex med request. Returning nil.", v26, v32);
        destroyStorage<A>(_:count:)(v27, 0, v25);
        destroyStorage<A>(_:count:)(v28, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v26, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void *)(v148 + 688);
      uint64_t v24 = *(void *)(v148 + 672);

      v142(v23, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v88 = 0;
      goto LABEL_48;
    }
    uint64_t v110 = objc_msgSend(*(id *)(v148 + 624), sel_scheduledDoseQuantity);
    if (v110)
    {
      objc_msgSend(v110, sel_doubleValue);
      uint64_t v107 = v8;

      uint64_t v108 = v107;
      uint64_t v109 = 0;
    }
    else
    {
      uint64_t v108 = 0;
      uint64_t v109 = 1;
    }
    id v9 = *(unsigned char *)(v148 + 41);
    *(void *)(v148 + 16) = *(void *)(v148 + 632);
    *(unsigned char *)(v148 + 24) = v9 & 1;
    *(void *)(v148 + 32) = v108;
    *(unsigned char *)(v148 + 40) = v109 & 1;
    if (*(unsigned char *)(v148 + 24))
    {
      if (*(unsigned char *)(v148 + 40))
      {
        uint64_t v106 = 1;
        goto LABEL_19;
      }
    }
    else
    {
      outlined init with copy of Double?(v148 + 16, v148 + 368);
      if ((*(unsigned char *)(v148 + 40) & 1) == 0)
      {
        uint64_t v106 = *(double *)(v148 + 368) == *(double *)(v148 + 32);
LABEL_19:
        uint64_t v111 = v106;
        goto LABEL_22;
      }
    }
    uint64_t v106 = 0;
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)(v148 + 728);
  uint64_t v58 = *(void *)(v148 + 672);
  uint64_t v57 = Logger.wellness.unsafeMutableAddressor();
  swift_beginAccess();
  v152(v14, v57, v58);
  swift_endAccess();
  uint64_t v61 = Logger.logObject.getter();
  uint64_t v60 = static os_log_type_t.debug.getter();
  *(void *)(v148 + 408) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v59 = *(_DWORD *)(v148 + 364);
  uint64_t v62 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v61, v60))
  {
    id v53 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v54 = createStorage<A>(capacity:type:)(0);
    uint64_t v55 = createStorage<A>(capacity:type:)(0);
    *(void *)(v148 + 552) = v53;
    *(void *)(v148 + 560) = v54;
    *(void *)(v148 + 568) = v55;
    serialize(_:at:)(0, (unsigned char **)(v148 + 552));
    serialize(_:at:)(0, (unsigned char **)(v148 + 552));
    *(void *)(v148 + 576) = v62;
    uint64_t v56 = (void *)swift_task_alloc();
    v56[2] = v148 + 552;
    v56[3] = v148 + 560;
    v56[4] = v148 + 568;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v61, v60, "updateDosageForDoseEvent: this is an as needed event", v53, v59);
    destroyStorage<A>(_:count:)(v54, 0, v52);
    destroyStorage<A>(_:count:)(v55, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v53, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  Class v50 = *(void *)(v148 + 728);
  uint64_t v51 = *(void *)(v148 + 672);

  v142(v50, v51);
  if (!v153) {
    goto LABEL_45;
  }
  uint64_t v15 = *(void *)(v148 + 720);
  uint64_t v45 = *(void *)(v148 + 672);
  uint64_t v44 = Logger.wellness.unsafeMutableAddressor();
  swift_beginAccess();
  v152(v15, v44, v45);
  swift_endAccess();
  uint64_t v48 = Logger.logObject.getter();
  uint64_t v47 = static os_log_type_t.debug.getter();
  *(void *)(v148 + 456) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v46 = *(_DWORD *)(v148 + 956);
  uint64_t v49 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v48, v47))
  {
    uint64_t v40 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v41 = createStorage<A>(capacity:type:)(0);
    BOOL v42 = createStorage<A>(capacity:type:)(0);
    *(void *)(v148 + 520) = v40;
    *(void *)(v148 + 528) = v41;
    *(void *)(v148 + 536) = v42;
    serialize(_:at:)(0, (unsigned char **)(v148 + 520));
    serialize(_:at:)(0, (unsigned char **)(v148 + 520));
    *(void *)(v148 + 544) = v49;
    uint64_t v43 = (void *)swift_task_alloc();
    v43[2] = v148 + 520;
    v43[3] = v148 + 528;
    v43[4] = v148 + 536;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v48, v47, "updateDosageForDoseEvent: hasCompatibleUnit is true", v40, v46);
    destroyStorage<A>(_:count:)(v41, 0, v39);
    destroyStorage<A>(_:count:)(v42, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v40, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  *(void *)(v148 + 928) = 0;
  NSDateInterval v38 = *(void *)(v148 + 808);
  uint64_t v36 = *(void *)(v148 + 720);
  id v37 = *(void *)(v148 + 672);

  v142(v36, v37);
  swift_bridgeObjectRetain();
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v148 + 936) = v16;
  *uint64_t v16 = *(void *)(v148 + 384);
  v16[1] = SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
  uint64_t v17 = *(void *)(v148 + 800);
  id v18 = *(void *)(v148 + 664);
  uint64_t v19 = *(void *)(v148 + 656);
  return SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:)(v17, v38, v19, v18);
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t (*v9)(id);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  Swift::Double v13;
  id v14;
  Class isa;
  id v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint32_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  id v37;
  Class v38;
  id v39;
  id v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  Swift::Double value;
  uint32_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  NSObject *log;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint8_t *buf;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint32_t size;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  NSObject *oslog;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  uint64_t v96 = v0;
  char v71 = *(void *)(v0 + 944);
  uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 864);
  uint64_t v1 = *(void *)(v0 + 712);
  char v69 = *(void *)(v0 + 672);
  *(void *)(v0 + 384) = v0;
  *(void *)(v0 + 464) = v71;
  uint64_t v68 = Logger.wellness.unsafeMutableAddressor();
  swift_beginAccess();
  v70(v1, v68, v69);
  swift_endAccess();
  char v73 = swift_allocObject();
  *(void *)(v73 + 16) = v71;
  os_log_t oslog = Logger.logObject.getter();
  uint64_t v80 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 472) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 964);
  char v75 = swift_allocObject();
  *(unsigned char *)(v75 + 16) = 32;
  uint64_t v76 = swift_allocObject();
  *(unsigned char *)(v76 + 16) = 8;
  uint64_t v74 = swift_allocObject();
  *(void *)(v74 + 16) = partial apply for implicit closure #12 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
  *(void *)(v74 + 24) = v73;
  char v77 = swift_allocObject();
  *(void *)(v77 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v77 + 24) = v74;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v78 = v2;
  swift_retain();
  *uint64_t v78 = partial apply for closure #1 in OSLogArguments.append(_:);
  v78[1] = v75;
  swift_retain();
  v78[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v78[3] = v76;
  swift_retain();
  v78[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v78[5] = v77;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v80))
  {
    uint64_t v3 = *(void *)(v67 + 928);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v65 = createStorage<A>(capacity:type:)(0);
    uint64_t v66 = createStorage<A>(capacity:type:)(1);
    uint64_t v91 = buf;
    uint64_t v92 = v65;
    uint64_t v93 = v66;
    serialize(_:at:)(2, &v91);
    serialize(_:at:)(1, &v91);
    uint64_t v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v95 = v75;
    id result = closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v91, (uint64_t)&v92, (uint64_t)&v93);
    if (v3) {
      return result;
    }
    uint64_t v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v95 = v76;
    closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v91, (uint64_t)&v92, (uint64_t)&v93);
    uint64_t v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v95 = v77;
    closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v91, (uint64_t)&v92, (uint64_t)&v93);
    _os_log_impl(&dword_25DE00000, oslog, v80, "updateDosageForDoseEvent: asNeededDosageFromHealthApp (%s)", buf, size);
    destroyStorage<A>(_:count:)(v65, 0, v63);
    destroyStorage<A>(_:count:)(v66, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v62 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v62 = *(void *)(v67 + 928);
  }
  uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v67 + 912);
  uint64_t v58 = *(void *)(v67 + 712);
  uint64_t v59 = *(void *)(v67 + 672);
  uint64_t v61 = *(unsigned char *)(v67 + 41);

  v60(v58, v59);
  if (v61)
  {
    uint64_t v24 = *(void *)(v67 + 944);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 864);
    id v7 = *(void *)(v67 + 696);
    uint64_t v22 = *(void *)(v67 + 672);
    uint64_t v21 = Logger.wellness.unsafeMutableAddressor();
    swift_beginAccess();
    v23(v7, v21, v22);
    swift_endAccess();
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v24;
    uint64_t v32 = Logger.logObject.getter();
    uint64_t v33 = static os_log_type_t.debug.getter();
    *(void *)(v67 + 480) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v25 = *(_DWORD *)(v67 + 972);
    uint64_t v28 = swift_allocObject();
    *(unsigned char *)(v28 + 16) = 32;
    uint64_t v29 = swift_allocObject();
    *(unsigned char *)(v29 + 16) = 8;
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = partial apply for implicit closure #12 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
    *(void *)(v27 + 24) = v26;
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v30 + 24) = v27;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v31 = v8;
    swift_retain();
    void *v31 = partial apply for closure #1 in OSLogArguments.append(_:);
    v31[1] = v28;
    swift_retain();
    v31[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v31[3] = v29;
    swift_retain();
    v31[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v31[5] = v30;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v32, v33))
    {
      id v18 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v19 = createStorage<A>(capacity:type:)(0);
      char v20 = createStorage<A>(capacity:type:)(1);
      char v81 = v18;
      uint64_t v82 = v19;
      char v83 = v20;
      serialize(_:at:)(2, &v81);
      serialize(_:at:)(1, &v81);
      uint64_t v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      char v85 = v28;
      id result = closure #1 in osLogInternal(_:log:type:)(&v84, (uint64_t)&v81, (uint64_t)&v82, (uint64_t)&v83);
      if (v62) {
        return result;
      }
      uint64_t v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      char v85 = v29;
      closure #1 in osLogInternal(_:log:type:)(&v84, (uint64_t)&v81, (uint64_t)&v82, (uint64_t)&v83);
      uint64_t v84 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      char v85 = v30;
      closure #1 in osLogInternal(_:log:type:)(&v84, (uint64_t)&v81, (uint64_t)&v82, (uint64_t)&v83);
      _os_log_impl(&dword_25DE00000, v32, v33, "updateDosageForDoseEvent: using healthAppDosage (%s)", v18, v25);
      destroyStorage<A>(_:count:)(v19, 0, v17);
      destroyStorage<A>(_:count:)(v20, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v18, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v13 = *(double *)(v67 + 944);
    BOOL v12 = *(void (**)(uint64_t, uint64_t))(v67 + 912);
    uint64_t v10 = *(void *)(v67 + 696);
    uint64_t v11 = *(void *)(v67 + 672);
    uint64_t v14 = *(id *)(v67 + 624);

    v12(v10, v11);
    type metadata accessor for NSNumber();
    Class isa = NSNumber.__allocating_init(value:)(v13).super.super.isa;
    uint64_t v16 = objc_msgSend(v14, sel_updateForNewDoseQuantity_);

    *(void *)(v67 + 488) = v16;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v40 = v16;
  }
  else
  {
    value = *(double *)(v67 + 632);
    uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 864);
    uint64_t v5 = *(void *)(v67 + 704);
    uint64_t v46 = *(void *)(v67 + 672);
    *(Swift::Double *)(v67 + 496) = value;
    uint64_t v45 = Logger.wellness.unsafeMutableAddressor();
    swift_beginAccess();
    v47(v5, v45, v46);
    swift_endAccess();
    Class v50 = swift_allocObject();
    *(Swift::Double *)(v50 + 16) = value;
    log = Logger.logObject.getter();
    uint64_t v57 = static os_log_type_t.debug.getter();
    *(void *)(v67 + 504) = 12;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v49 = *(_DWORD *)(v67 + 976);
    uint64_t v52 = swift_allocObject();
    *(unsigned char *)(v52 + 16) = 32;
    id v53 = swift_allocObject();
    *(unsigned char *)(v53 + 16) = 8;
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = partial apply for implicit closure #12 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
    *(void *)(v51 + 24) = v50;
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v54 + 24) = v51;
    _allocateUninitializedArray<A>(_:)();
    uint64_t v55 = v6;
    swift_retain();
    *uint64_t v55 = partial apply for closure #1 in OSLogArguments.append(_:);
    v55[1] = v52;
    swift_retain();
    v55[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v55[3] = v53;
    swift_retain();
    v55[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v55[5] = v54;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v57))
    {
      BOOL v42 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v43 = createStorage<A>(capacity:type:)(0);
      uint64_t v44 = createStorage<A>(capacity:type:)(1);
      uint64_t v86 = v42;
      char v87 = v43;
      uint64_t v88 = v44;
      serialize(_:at:)(2, &v86);
      serialize(_:at:)(1, &v86);
      char v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v90 = v52;
      id result = closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
      if (v62) {
        return result;
      }
      char v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v90 = v53;
      closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
      char v89 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v90 = v54;
      closure #1 in osLogInternal(_:log:type:)(&v89, (uint64_t)&v86, (uint64_t)&v87, (uint64_t)&v88);
      _os_log_impl(&dword_25DE00000, log, v57, "updateDosageForDoseEvent: using inputDosage (%s)", v42, v49);
      destroyStorage<A>(_:count:)(v43, 0, v41);
      destroyStorage<A>(_:count:)(v44, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v42, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v67 + 912);
    uint64_t v34 = *(void *)(v67 + 704);
    uint64_t v35 = *(void *)(v67 + 672);
    id v37 = *(id *)(v67 + 624);

    v36(v34, v35);
    type metadata accessor for NSNumber();
    NSDateInterval v38 = NSNumber.__allocating_init(value:)(value).super.super.isa;
    uint64_t v39 = objc_msgSend(v37, sel_updateForNewDoseQuantity_);

    *(void *)(v67 + 512) = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v40 = v39;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v9 = *(uint64_t (**)(id))(*(void *)(v67 + 384) + 8);
  return v9(v40);
}

uint64_t SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)(uint64_t a1, uint64_t a2)
{
  BOOL v12 = *(void **)v2;
  uint64_t v10 = *(void **)v2;
  uint64_t v11 = *(void *)(*(void *)v2 + 808);
  v10[48] = *(void *)v2;
  v10[103] = a1;
  v10[104] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  v10[42] = a1;
  v10[43] = a2;
  swift_bridgeObjectRetain();
  uint64_t v3 = (void *)swift_task_alloc();
  v10[105] = v3;
  void *v3 = v10[48];
  v3[1] = SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
  uint64_t v4 = v12[100];
  uint64_t v5 = v12[83];
  uint64_t v6 = v12[82];
  return SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(v4, v11, v6, v5, 1.0);
}

{
  void *v2;
  void *v4;
  uint64_t v5;

  uint64_t v4 = (void *)*v2;
  v4[48] = *v2;
  v4[106] = a1;
  v4[107] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:), 0);
}

uint64_t SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)(double a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 384) = *v1;
  *(double *)(v3 + 944) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:), 0);
}

uint64_t SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 432) = a4;
  *(void *)(v4 + 424) = a3;
  *(unsigned char *)(v4 + 553) = a2 & 1;
  *(void *)(v4 + 416) = a1;
  *(void *)(v4 + 128) = v4;
  *(void *)(v4 + 136) = 0;
  *(unsigned char *)(v4 + 552) = 0;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 120) = 0;
  *(void *)(v4 + 152) = 0;
  *(void *)(v4 + 160) = 0;
  *(void *)(v4 + 208) = 0;
  *(void *)(v4 + 216) = 0;
  *(void *)(v4 + 264) = 0;
  *(void *)(v4 + 272) = 0;
  *(void *)(v4 + 352) = 0;
  *(void *)(v4 + 360) = 0;
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v4 + 440) = v5;
  *(void *)(v4 + 448) = *(void *)(v5 - 8);
  *(void *)(v4 + 456) = swift_task_alloc();
  *(void *)(v4 + 464) = swift_task_alloc();
  *(void *)(v4 + 472) = swift_task_alloc();
  *(void *)(v4 + 480) = swift_task_alloc();
  *(void *)(v4 + 136) = a1;
  *(unsigned char *)(v4 + 552) = a2 & 1;
  *(void *)(v4 + 112) = a3;
  *(void *)(v4 + 120) = a4;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:), 0);
}

uint64_t SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:)()
{
  uint64_t v1 = *(void **)(v0 + 416);
  *(void *)(v0 + 128) = v0;
  if (isLogged(doseEvent:)(v1))
  {
    BOOL v86 = (*(unsigned char *)(v87 + 553) & 1) != 0;
    id v2 = *(id *)(v87 + 416);
    if (v86)
    {
    }
    else
    {
      *(void *)(v87 + 400) = objc_msgSend(*(id *)(v87 + 416), sel_status);
      *(void *)(v87 + 408) = 5;
      type metadata accessor for HKMedicationDoseEventStatus();
      lazy protocol witness table accessor for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus();
      char v85 = == infix<A>(_:_:)();

      if (v85)
      {
        uint64_t v3 = *(void *)(v87 + 480);
        uint64_t v80 = *(void *)(v87 + 440);
        uint64_t v78 = *(void *)(v87 + 448);
        uint64_t v79 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 16))(v3, v79, v80);
        swift_endAccess();
        char v83 = Logger.logObject.getter();
        os_log_type_t v82 = static os_log_type_t.debug.getter();
        *(void *)(v87 + 344) = 2;
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v81 = *(_DWORD *)(v87 + 568);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v84 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v83, v82))
        {
          buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v75 = createStorage<A>(capacity:type:)(0);
          uint64_t v76 = createStorage<A>(capacity:type:)(0);
          *(void *)(v87 + 368) = buf;
          *(void *)(v87 + 376) = v75;
          *(void *)(v87 + 384) = v76;
          serialize(_:at:)(0, (unsigned char **)(v87 + 368));
          serialize(_:at:)(0, (unsigned char **)(v87 + 368));
          *(void *)(v87 + 392) = v84;
          char v77 = (void *)swift_task_alloc();
          v77[2] = v87 + 368;
          v77[3] = v87 + 376;
          v77[4] = v87 + 384;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_25DE00000, v83, v82, "requested & existing status both skipped, returning .statusBothSkipped", buf, v81);
          destroyStorage<A>(_:count:)(v75, 0, v73);
          destroyStorage<A>(_:count:)(v76, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
        }
        swift_bridgeObjectRelease();
        uint64_t v71 = *(void *)(v87 + 480);
        uint64_t v72 = *(void *)(v87 + 440);
        uint64_t v70 = *(void *)(v87 + 448);

        (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v71, v72);
        uint64_t v4 = (void *)swift_task_alloc();
        *(void *)(v87 + 488) = v4;
        *uint64_t v4 = *(void *)(v87 + 128);
        v4[1] = SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:);
        uint64_t v5 = *(void *)(v87 + 432);
        uint64_t v6 = *(void *)(v87 + 424);
        uint64_t v7 = *(void *)(v87 + 416);
        return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v7, 1, v6, v5);
      }
    }
    BOOL v69 = (*(unsigned char *)(v87 + 553) & 1) != 1;
    id v9 = *(id *)(v87 + 416);
    if (v69)
    {
      id v66 = *(id *)(v87 + 416);

      id v11 = v66;
    }
    else
    {
      *(void *)(v87 + 328) = objc_msgSend(*(id *)(v87 + 416), sel_status);
      *(void *)(v87 + 336) = 4;
      type metadata accessor for HKMedicationDoseEventStatus();
      lazy protocol witness table accessor for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus();
      char v68 = == infix<A>(_:_:)();
      id v67 = *(id *)(v87 + 416);

      id v10 = v67;
      if (v68)
      {

LABEL_20:
        uint64_t v13 = *(void *)(v87 + 472);
        uint64_t v59 = *(void *)(v87 + 440);
        uint64_t v57 = *(void *)(v87 + 448);
        uint64_t v58 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v13, v58, v59);
        swift_endAccess();
        os_log_t oslog = Logger.logObject.getter();
        os_log_type_t v61 = static os_log_type_t.debug.getter();
        *(void *)(v87 + 256) = 2;
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t size = *(_DWORD *)(v87 + 564);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v63 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(oslog, v61))
        {
          id v53 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v54 = createStorage<A>(capacity:type:)(0);
          uint64_t v55 = createStorage<A>(capacity:type:)(0);
          *(void *)(v87 + 280) = v53;
          *(void *)(v87 + 288) = v54;
          *(void *)(v87 + 296) = v55;
          serialize(_:at:)(0, (unsigned char **)(v87 + 280));
          serialize(_:at:)(0, (unsigned char **)(v87 + 280));
          *(void *)(v87 + 304) = v63;
          uint64_t v56 = (void *)swift_task_alloc();
          v56[2] = v87 + 280;
          v56[3] = v87 + 288;
          v56[4] = v87 + 296;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_25DE00000, oslog, v61, "needs confirmation whether to log as needed, returning .needsConfirmLogAsNeeded", v53, size);
          destroyStorage<A>(_:count:)(v54, 0, v52);
          destroyStorage<A>(_:count:)(v55, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](v53, MEMORY[0x263F8E778]);
        }
        swift_bridgeObjectRelease();
        uint64_t v50 = *(void *)(v87 + 472);
        uint64_t v51 = *(void *)(v87 + 440);
        uint64_t v49 = *(void *)(v87 + 448);

        (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v51);
        uint64_t v14 = (void *)swift_task_alloc();
        *(void *)(v87 + 504) = v14;
        *uint64_t v14 = *(void *)(v87 + 128);
        v14[1] = SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:);
        uint64_t v5 = *(void *)(v87 + 432);
        uint64_t v6 = *(void *)(v87 + 424);
        uint64_t v7 = *(void *)(v87 + 416);
        return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v7, 1, v6, v5);
      }
    }
    BOOL v65 = (*(unsigned char *)(v87 + 553) & 1) != 1;
    id v12 = *(id *)(v87 + 416);
    if (v65)
    {
      char v64 = 0;
    }
    else
    {
      *(void *)(v87 + 312) = objc_msgSend(*(id *)(v87 + 416), sel_status);
      *(void *)(v87 + 320) = 5;
      type metadata accessor for HKMedicationDoseEventStatus();
      lazy protocol witness table accessor for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus();
      char v64 = == infix<A>(_:_:)();
    }

    if (v64) {
      goto LABEL_20;
    }
    uint64_t v15 = *(void *)(v87 + 464);
    uint64_t v44 = *(void *)(v87 + 440);
    uint64_t v42 = *(void *)(v87 + 448);
    uint64_t v43 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v15, v43, v44);
    swift_endAccess();
    log = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    *(void *)(v87 + 200) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v45 = *(_DWORD *)(v87 + 560);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v48 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v46))
    {
      NSDateInterval v38 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v39 = createStorage<A>(capacity:type:)(0);
      uint64_t v40 = createStorage<A>(capacity:type:)(0);
      *(void *)(v87 + 224) = v38;
      *(void *)(v87 + 232) = v39;
      *(void *)(v87 + 240) = v40;
      serialize(_:at:)(0, (unsigned char **)(v87 + 224));
      serialize(_:at:)(0, (unsigned char **)(v87 + 224));
      *(void *)(v87 + 248) = v48;
      uint64_t v41 = (void *)swift_task_alloc();
      v41[2] = v87 + 224;
      v41[3] = v87 + 232;
      v41[4] = v87 + 240;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, log, v46, "needs confirmation whether to update status, returning .needsConfirmUpdateToStatus", v38, v45);
      destroyStorage<A>(_:count:)(v39, 0, v37);
      destroyStorage<A>(_:count:)(v40, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v38, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v35 = *(void *)(v87 + 464);
    uint64_t v36 = *(void *)(v87 + 440);
    uint64_t v34 = *(void *)(v87 + 448);

    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v36);
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v87 + 520) = v16;
    *uint64_t v16 = *(void *)(v87 + 128);
    v16[1] = SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:);
    uint64_t v5 = *(void *)(v87 + 432);
    uint64_t v6 = *(void *)(v87 + 424);
    uint64_t v7 = *(void *)(v87 + 416);
  }
  else
  {
    uint64_t v17 = *(void *)(v87 + 456);
    uint64_t v29 = *(void *)(v87 + 440);
    uint64_t v27 = *(void *)(v87 + 448);
    uint64_t v28 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v17, v28, v29);
    swift_endAccess();
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    *(void *)(v87 + 144) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v30 = *(_DWORD *)(v87 + 556);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v33 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v32, v31))
    {
      uint64_t v23 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v24 = createStorage<A>(capacity:type:)(0);
      uint64_t v25 = createStorage<A>(capacity:type:)(0);
      *(void *)(v87 + 168) = v23;
      *(void *)(v87 + 176) = v24;
      *(void *)(v87 + 184) = v25;
      serialize(_:at:)(0, (unsigned char **)(v87 + 168));
      serialize(_:at:)(0, (unsigned char **)(v87 + 168));
      *(void *)(v87 + 192) = v33;
      uint64_t v26 = (void *)swift_task_alloc();
      v26[2] = v87 + 168;
      v26[3] = v87 + 176;
      v26[4] = v87 + 184;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v32, v31, "one doseEvent found, but needs confirmation whether to log as scheduled, returning .needsConfirmLogAsScheduled", v23, v30);
      destroyStorage<A>(_:count:)(v24, 0, v22);
      destroyStorage<A>(_:count:)(v25, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v23, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(v87 + 456);
    uint64_t v21 = *(void *)(v87 + 440);
    uint64_t v19 = *(void *)(v87 + 448);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v21);
    id v18 = (void *)swift_task_alloc();
    *(void *)(v87 + 536) = v18;
    *id v18 = *(void *)(v87 + 128);
    v18[1] = SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:);
    uint64_t v5 = *(void *)(v87 + 432);
    uint64_t v6 = *(void *)(v87 + 424);
    uint64_t v7 = *(void *)(v87 + 416);
  }
  return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v7, 1, v6, v5);
}

{
  uint64_t v0;
  char *v1;
  char *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(char *);
  void *v7;
  Class isa;
  id v9;
  char *v10;
  uint64_t v11;

  id v9 = *(id *)(v0 + 496);
  *(void *)(v0 + 128) = v0;
  *(void *)(v0 + 352) = v9;
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  id v10 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(108, 0);
  uint64_t v1 = v10;
  id v2 = v10;
  *(void *)(v0 + 360) = v10;
  type metadata accessor for MatchedMedName();
  _allocateUninitializedArray<A>(_:)();
  uint64_t v7 = v3;
  uint64_t v4 = v9;
  void *v7 = v9;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setMatchingMeds_, isa);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(char *))(*(void *)(v0 + 128) + 8);
  return v5(v10);
}

{
  uint64_t v0;
  char *v1;
  char *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(char *);
  void *v7;
  Class isa;
  id v9;
  char *v10;
  uint64_t v11;

  id v9 = *(id *)(v0 + 512);
  *(void *)(v0 + 128) = v0;
  *(void *)(v0 + 264) = v9;
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  id v10 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(107, 0);
  uint64_t v1 = v10;
  id v2 = v10;
  *(void *)(v0 + 272) = v10;
  type metadata accessor for MatchedMedName();
  _allocateUninitializedArray<A>(_:)();
  uint64_t v7 = v3;
  uint64_t v4 = v9;
  void *v7 = v9;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setMatchingMeds_, isa);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(char *))(*(void *)(v0 + 128) + 8);
  return v5(v10);
}

{
  uint64_t v0;
  char *v1;
  char *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(char *);
  void *v7;
  Class isa;
  id v9;
  char *v10;
  uint64_t v11;

  id v9 = *(id *)(v0 + 528);
  *(void *)(v0 + 128) = v0;
  *(void *)(v0 + 208) = v9;
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  id v10 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(109, 0);
  uint64_t v1 = v10;
  id v2 = v10;
  *(void *)(v0 + 216) = v10;
  type metadata accessor for MatchedMedName();
  _allocateUninitializedArray<A>(_:)();
  uint64_t v7 = v3;
  uint64_t v4 = v9;
  void *v7 = v9;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setMatchingMeds_, isa);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(char *))(*(void *)(v0 + 128) + 8);
  return v5(v10);
}

{
  uint64_t v0;
  char *v1;
  char *v2;
  void *v3;
  id v4;
  uint64_t (*v5)(char *);
  void *v7;
  Class isa;
  id v9;
  char *v10;
  uint64_t v11;

  id v9 = *(id *)(v0 + 544);
  *(void *)(v0 + 128) = v0;
  *(void *)(v0 + 152) = v9;
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  id v10 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(106, 0);
  uint64_t v1 = v10;
  id v2 = v10;
  *(void *)(v0 + 160) = v10;
  type metadata accessor for MatchedMedName();
  _allocateUninitializedArray<A>(_:)();
  uint64_t v7 = v3;
  uint64_t v4 = v9;
  void *v7 = v9;
  _finalizeUninitializedArray<A>(_:)();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setMatchingMeds_, isa);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(char *))(*(void *)(v0 + 128) + 8);
  return v5(v10);
}

uint64_t SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 128) = *v1;
  *(void *)(v3 + 496) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 128) = *v1;
  *(void *)(v3 + 512) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 128) = *v1;
  *(void *)(v3 + 528) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 128) = *v1;
  *(void *)(v3 + 544) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:), 0);
}

uint64_t SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 232) = a4;
  *(void *)(v4 + 224) = a3;
  *(unsigned char *)(v4 + 457) = a2 & 1;
  *(void *)(v4 + 216) = a1;
  *(void *)(v4 + 136) = v4;
  *(void *)(v4 + 144) = 0;
  *(unsigned char *)(v4 + 456) = 0;
  *(void *)(v4 + 40) = 0;
  *(void *)(v4 + 48) = 0;
  *(void *)(v4 + 56) = 0;
  *(void *)(v4 + 64) = 0;
  *(void *)(v4 + 152) = 0;
  *(void *)(v4 + 200) = 0;
  *(void *)(v4 + 104) = 0;
  *(void *)(v4 + 112) = 0;
  *(void *)(v4 + 208) = 0;
  *(void *)(v4 + 120) = 0;
  *(void *)(v4 + 128) = 0;
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v4 + 240) = v5;
  *(void *)(v4 + 248) = *(void *)(v5 - 8);
  *(void *)(v4 + 256) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v4 + 264) = v6;
  *(void *)(v4 + 272) = *(void *)(v6 - 8);
  *(void *)(v4 + 280) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  *(void *)(v4 + 288) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  *(void *)(v4 + 296) = v7;
  *(void *)(v4 + 304) = *(void *)(v7 - 8);
  *(void *)(v4 + 312) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v4 + 320) = swift_task_alloc();
  *(void *)(v4 + 328) = swift_task_alloc();
  *(void *)(v4 + 144) = a1;
  *(unsigned char *)(v4 + 456) = a2 & 1;
  *(void *)(v4 + 40) = a3;
  *(void *)(v4 + 48) = a4;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:), 0);
}

uint64_t SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  uint64_t v1 = (void *)v0[27];
  uint64_t v23 = v1;
  v0[17] = v0;
  id v19 = objc_msgSend(v1, sel_medicationIdentifier);
  id v22 = objc_msgSend(v19, sel_underlyingIdentifier);
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v2;
  v0[42] = v20;
  v0[43] = v2;
  v0[7] = v20;
  v0[8] = v2;

  type metadata accessor for MatchedMedName();
  Swift::String v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Match", 5uLL, 1);
  INObject.__allocating_init(identifier:display:)(v4, (Swift::String_optional)0, v3);
  uint64_t v24 = v5;
  v0[44] = v5;
  v0[19] = v5;
  id v25 = objc_msgSend(v23, sel_scheduleItemIdentifier);
  if (v25)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v6;

    uint64_t v16 = v14;
    uint64_t v17 = v15;
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
  }
  if (v17)
  {
    uint64_t v12 = MEMORY[0x2611C8860](v16);
    swift_bridgeObjectRelease();
    uint64_t v13 = (void *)v12;
  }
  else
  {
    uint64_t v13 = 0;
  }
  objc_msgSend(v24, sel_setScheduleID_);

  swift_bridgeObjectRetain();
  id v11 = (id)MEMORY[0x2611C8860](v20, v21);
  swift_bridgeObjectRelease();
  objc_msgSend(v24, sel_setMedicationID_, v11);

  swift_bridgeObjectRetain();
  uint64_t v7 = (void *)swift_task_alloc();
  v18[45] = v7;
  void *v7 = v18[17];
  v7[1] = SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  uint64_t v8 = v18[29];
  uint64_t v9 = v18[28];
  return SpecificMedicationsPersistor.displayNameFor(identifier:)(v20, v21, v9, v8);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t countAndFlagsBits;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *buf;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint32_t size;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  NSObject *oslog;
  os_log_type_t v100;
  id v101;
  id v102;
  id v103;
  id v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  Class isa;
  Class v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  id v116;
  uint64_t v117;
  void *v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  id v136;
  id v137;
  id v138;
  id v139;
  uint64_t v140;
  uint8_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(uint64_t, uint64_t, uint64_t);
  uint64_t v145;
  void *v146;
  uint64_t v147;

  uint64_t v146 = v0;
  uint64_t v1 = v0[47];
  uint64_t v2 = v0[46];
  v0[17] = v0;
  v0[11] = v2;
  v0[12] = v1;
  if (v0[12])
  {
    Swift::String v3 = *(void *)(v140 + 96);
    *(void *)(v140 + 72) = *(void *)(v140 + 88);
    *(void *)(v140 + 80) = v3;
  }
  else
  {
    *(Swift::String *)(v140 + 72) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown Name", 0xCuLL, 1);
    outlined destroy of String.UTF8View();
  }
  unint64_t v136 = *(id *)(v140 + 352);
  uint64_t v138 = *(id *)(v140 + 216);
  uint64_t v137 = (id)MEMORY[0x2611C8860](*(void *)(v140 + 72));
  swift_bridgeObjectRelease();
  objc_msgSend(v136, sel_setName_, v137);

  int v139 = objc_msgSend(v138, sel_scheduledDate);
  if (v139)
  {
    unint64_t v135 = *(void *)(v140 + 328);
    uint64_t v133 = *(void *)(v140 + 312);
    uint64_t v134 = *(void *)(v140 + 296);
    uint64_t v132 = *(void *)(v140 + 304);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v132 + 32))(v135, v133, v134);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v132 + 56))(v135, 0, 1, v134);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v140 + 304) + 56))(*(void *)(v140 + 328), 1, 1, *(void *)(v140 + 296));
  }
  uint64_t v129 = *(void *)(v140 + 328);
  uint64_t v130 = getFormattedTimeString(time:)(v129);
  uint64_t v131 = v4;
  outlined destroy of Date?(v129);
  if (v131)
  {
    uint64_t v127 = MEMORY[0x2611C8860](v130);
    swift_bridgeObjectRelease();
    uint64_t v128 = (void *)v127;
  }
  else
  {
    uint64_t v128 = 0;
  }
  uint64_t v123 = *(void *)(v140 + 320);
  uint64_t v121 = *(void *)(v140 + 312);
  os_log_type_t v122 = *(void *)(v140 + 296);
  uint64_t v119 = *(id *)(v140 + 216);
  uint64_t v120 = *(void *)(v140 + 304);
  objc_msgSend(*(id *)(v140 + 352), sel_setSchedule_);

  unsigned int v125 = objc_msgSend(v119, sel_startDate);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 32))(v123, v121, v122);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v120 + 56))(v123, 0, 1, v122);
  uint64_t v124 = getFormattedTimeString(time:)(v123);
  uint64_t v126 = v5;
  outlined destroy of Date?(v123);

  if (v126)
  {
    uint64_t v117 = MEMORY[0x2611C8860](v124);
    swift_bridgeObjectRelease();
    uint64_t v118 = (void *)v117;
  }
  else
  {
    uint64_t v118 = 0;
  }
  uint64_t v115 = *(id *)(v140 + 216);
  objc_msgSend(*(id *)(v140 + 352), sel_setLoggedTime_);

  uint64_t v116 = objc_msgSend(v115, sel_persistedUUID);
  if (v116)
  {
    uint64_t v114 = *(void *)(v140 + 288);
    uint64_t v112 = *(void *)(v140 + 280);
    uint64_t v113 = *(void *)(v140 + 264);
    uint64_t v111 = *(void *)(v140 + 272);
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 32))(v114, v112, v113);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v111 + 56))(v114, 0, 1, v113);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v140 + 272) + 56))(*(void *)(v140 + 288), 1, 1, *(void *)(v140 + 264));
  }
  if ((*(unsigned int (**)(void, uint64_t, void))(*(void *)(v140 + 272) + 48))(*(void *)(v140 + 288), 1, *(void *)(v140 + 264)) == 1)
  {
    uint64_t v110 = 0;
  }
  else
  {
    uint64_t v108 = *(void *)(v140 + 288);
    uint64_t v107 = *(void *)(v140 + 264);
    uint64_t v106 = *(void *)(v140 + 272);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v108, v107);
    uint64_t v110 = isa;
  }
  uint64_t v105 = *(id *)(v140 + 216);
  objc_msgSend(*(id *)(v140 + 352), sel_setPersistedUUID_);

  *(void *)(v140 + 160) = objc_msgSend(v105, sel_status);
  *(void *)(v140 + 168) = 4;
  type metadata accessor for HKMedicationDoseEventStatus();
  lazy protocol witness table accessor for type HKMedicationDoseEventStatus and conformance HKMedicationDoseEventStatus();
  if (== infix<A>(_:_:)())
  {
    uint64_t v103 = *(id *)(v140 + 352);
    uint64_t countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("taken", 5uLL, 1)._countAndFlagsBits;
    uint64_t v104 = (id)MEMORY[0x2611C8860](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v103, sel_setCompletionStatus_, v104);
  }
  else
  {
    *(void *)(v140 + 176) = objc_msgSend(*(id *)(v140 + 216), sel_status);
    *(void *)(v140 + 184) = 5;
    if (== infix<A>(_:_:)())
    {
      uint64_t v101 = *(id *)(v140 + 352);
      uint64_t v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("skipped", 7uLL, 1)._countAndFlagsBits;
      uint64_t v102 = (id)MEMORY[0x2611C8860](v7);
      swift_bridgeObjectRelease();
      objc_msgSend(v101, sel_setCompletionStatus_, v102);
    }
    else
    {
      objc_msgSend(*(id *)(v140 + 352), sel_setCompletionStatus_, 0);
    }
  }
  if (*(unsigned char *)(v140 + 457))
  {
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v140 + 384) = v8;
    *uint64_t v8 = *(void *)(v140 + 136);
    v8[1] = SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    uint64_t v9 = *(void *)(v140 + 344);
    id v10 = *(void *)(v140 + 336);
    id v11 = *(void *)(v140 + 232);
    uint64_t v12 = *(void *)(v140 + 224);
    return SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:)(v10, v9, v12, v11);
  }
  else
  {
    uint64_t v41 = *(id *)(v140 + 352);
    uint64_t v39 = *(void *)(v140 + 344);
    NSDateInterval v38 = *(void *)(v140 + 336);
    uint64_t v14 = *(void *)(v140 + 256);
    uint64_t v37 = *(void *)(v140 + 240);
    uint64_t v40 = *(id *)(v140 + 216);
    uint64_t v35 = *(void *)(v140 + 248);
    uint64_t v36 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v14, v36, v37);
    swift_endAccess();
    uint64_t v15 = v41;
    uint64_t v43 = swift_allocObject();
    *(void *)(v43 + 16) = v41;
    swift_bridgeObjectRetain();
    uint32_t v45 = swift_allocObject();
    *(void *)(v45 + 16) = v38;
    *(void *)(v45 + 24) = v39;
    uint64_t v16 = v41;
    uint64_t v47 = swift_allocObject();
    *(void *)(v47 + 16) = v41;
    uint64_t v17 = v41;
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = v41;
    id v18 = v41;
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = v41;
    id v19 = v40;
    id v53 = swift_allocObject();
    *(void *)(v53 + 16) = v40;
    uint64_t v20 = v41;
    uint64_t v55 = swift_allocObject();
    *(void *)(v55 + 16) = v41;
    uint64_t v21 = v41;
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = v41;
    id v22 = v41;
    uint64_t v59 = swift_allocObject();
    *(void *)(v59 + 16) = v41;
    uint64_t v23 = v41;
    os_log_type_t v61 = swift_allocObject();
    *(void *)(v61 + 16) = v41;
    uint64_t v24 = v41;
    uint64_t v63 = swift_allocObject();
    *(void *)(v63 + 16) = v41;
    os_log_t oslog = Logger.logObject.getter();
    uint64_t v100 = static os_log_type_t.debug.getter();
    *(void *)(v140 + 192) = 112;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v140 + 460);
    BOOL v65 = swift_allocObject();
    *(unsigned char *)(v65 + 16) = 32;
    id v66 = swift_allocObject();
    *(unsigned char *)(v66 + 16) = 8;
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(void *)(v44 + 24) = v43;
    id v67 = swift_allocObject();
    *(void *)(v67 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v67 + 24) = v44;
    char v68 = swift_allocObject();
    *(unsigned char *)(v68 + 16) = 32;
    BOOL v69 = swift_allocObject();
    *(unsigned char *)(v69 + 16) = 8;
    os_log_type_t v46 = swift_allocObject();
    *(void *)(v46 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
    *(void *)(v46 + 24) = v45;
    uint64_t v70 = swift_allocObject();
    *(void *)(v70 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v70 + 24) = v46;
    uint64_t v71 = swift_allocObject();
    *(unsigned char *)(v71 + 16) = 32;
    uint64_t v72 = swift_allocObject();
    *(unsigned char *)(v72 + 16) = 8;
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(void *)(v48 + 24) = v47;
    uint64_t v73 = swift_allocObject();
    *(void *)(v73 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v73 + 24) = v48;
    uint64_t v74 = swift_allocObject();
    *(unsigned char *)(v74 + 16) = 32;
    uint64_t v75 = swift_allocObject();
    *(unsigned char *)(v75 + 16) = 8;
    uint64_t v50 = swift_allocObject();
    *(void *)(v50 + 16) = partial apply for implicit closure #5 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(void *)(v50 + 24) = v49;
    uint64_t v76 = swift_allocObject();
    *(void *)(v76 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v76 + 24) = v50;
    char v77 = swift_allocObject();
    *(unsigned char *)(v77 + 16) = 32;
    uint64_t v78 = swift_allocObject();
    *(unsigned char *)(v78 + 16) = 8;
    uint64_t v52 = swift_allocObject();
    *(void *)(v52 + 16) = partial apply for implicit closure #6 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(void *)(v52 + 24) = v51;
    uint64_t v79 = swift_allocObject();
    *(void *)(v79 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v79 + 24) = v52;
    uint64_t v80 = swift_allocObject();
    *(unsigned char *)(v80 + 16) = 32;
    uint32_t v81 = swift_allocObject();
    *(unsigned char *)(v81 + 16) = 8;
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = partial apply for implicit closure #7 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(void *)(v54 + 24) = v53;
    os_log_type_t v82 = swift_allocObject();
    *(void *)(v82 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v82 + 24) = v54;
    char v83 = swift_allocObject();
    *(unsigned char *)(v83 + 16) = 32;
    uint64_t v84 = swift_allocObject();
    *(unsigned char *)(v84 + 16) = 8;
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = partial apply for implicit closure #6 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(void *)(v56 + 24) = v55;
    char v85 = swift_allocObject();
    *(void *)(v85 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v85 + 24) = v56;
    BOOL v86 = swift_allocObject();
    *(unsigned char *)(v86 + 16) = 32;
    uint64_t v87 = swift_allocObject();
    *(unsigned char *)(v87 + 16) = 8;
    uint64_t v58 = swift_allocObject();
    *(void *)(v58 + 16) = partial apply for implicit closure #7 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(void *)(v58 + 24) = v57;
    uint64_t v88 = swift_allocObject();
    *(void *)(v88 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v88 + 24) = v58;
    char v89 = swift_allocObject();
    *(unsigned char *)(v89 + 16) = 32;
    uint64_t v90 = swift_allocObject();
    *(unsigned char *)(v90 + 16) = 8;
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = partial apply for implicit closure #10 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(void *)(v60 + 24) = v59;
    uint64_t v91 = swift_allocObject();
    *(void *)(v91 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v91 + 24) = v60;
    uint64_t v92 = swift_allocObject();
    *(unsigned char *)(v92 + 16) = 32;
    uint64_t v93 = swift_allocObject();
    *(unsigned char *)(v93 + 16) = 8;
    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = partial apply for implicit closure #11 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(void *)(v62 + 24) = v61;
    uint64_t v94 = swift_allocObject();
    *(void *)(v94 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v94 + 24) = v62;
    uint64_t v95 = swift_allocObject();
    *(unsigned char *)(v95 + 16) = 32;
    uint64_t v96 = swift_allocObject();
    *(unsigned char *)(v96 + 16) = 8;
    char v64 = swift_allocObject();
    *(void *)(v64 + 16) = partial apply for implicit closure #12 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(void *)(v64 + 24) = v63;
    uint64_t v97 = swift_allocObject();
    *(void *)(v97 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v97 + 24) = v64;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    uint64_t v98 = v25;
    swift_retain();
    *uint64_t v98 = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[1] = v65;
    swift_retain();
    v98[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[3] = v66;
    swift_retain();
    v98[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[5] = v67;
    swift_retain();
    v98[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[7] = v68;
    swift_retain();
    v98[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[9] = v69;
    swift_retain();
    v98[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[11] = v70;
    swift_retain();
    v98[12] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[13] = v71;
    swift_retain();
    v98[14] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[15] = v72;
    swift_retain();
    v98[16] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[17] = v73;
    swift_retain();
    v98[18] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[19] = v74;
    swift_retain();
    v98[20] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[21] = v75;
    swift_retain();
    v98[22] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[23] = v76;
    swift_retain();
    v98[24] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[25] = v77;
    swift_retain();
    v98[26] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[27] = v78;
    swift_retain();
    v98[28] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[29] = v79;
    swift_retain();
    v98[30] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[31] = v80;
    swift_retain();
    v98[32] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[33] = v81;
    swift_retain();
    v98[34] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[35] = v82;
    swift_retain();
    v98[36] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[37] = v83;
    swift_retain();
    v98[38] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[39] = v84;
    swift_retain();
    v98[40] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[41] = v85;
    swift_retain();
    v98[42] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[43] = v86;
    swift_retain();
    v98[44] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[45] = v87;
    swift_retain();
    v98[46] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[47] = v88;
    swift_retain();
    v98[48] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[49] = v89;
    swift_retain();
    v98[50] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[51] = v90;
    swift_retain();
    v98[52] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[53] = v91;
    swift_retain();
    v98[54] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[55] = v92;
    swift_retain();
    v98[56] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[57] = v93;
    swift_retain();
    v98[58] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[59] = v94;
    swift_retain();
    v98[60] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[61] = v95;
    swift_retain();
    v98[62] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[63] = v96;
    swift_retain();
    v98[64] = partial apply for closure #1 in OSLogArguments.append(_:);
    v98[65] = v97;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v100))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      os_log_type_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v33 = createStorage<A>(capacity:type:)(0);
      uint64_t v34 = createStorage<A>(capacity:type:)(11);
      uint64_t v141 = buf;
      uint64_t v142 = v33;
      uint64_t v143 = v34;
      serialize(_:at:)(2, &v141);
      serialize(_:at:)(11, &v141);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v65;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v66;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v67;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v68;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v69;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v70;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v71;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v72;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v73;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v74;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v75;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v76;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v77;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v78;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v79;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v80;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v81;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v82;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v83;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v84;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v85;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v86;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v87;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v88;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v89;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v90;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v91;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v92;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v93;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v94;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v95;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v96;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      uint64_t v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v145 = v97;
      closure #1 in osLogInternal(_:log:type:)(&v144, (uint64_t)&v141, (uint64_t)&v142, (uint64_t)&v143);
      _os_log_impl(&dword_25DE00000, oslog, v100, "    Built MatchedMedName:\n        scheduleID (%s),\n        medID (%s),\n        name (%s),\n        schedule (%s),\n        loggedTime (%s),\n        status (%s),\n        dosage (%s),\n        dosageUnit (%s),\n        strength (%s),\n        strengthUnit (%s),\n        completionStatus (%s)", buf, size);
      destroyStorage<A>(_:count:)(v33, 0, v31);
      destroyStorage<A>(_:count:)(v34, 11, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint32_t v30 = *(void *)(v140 + 256);
    uint64_t v29 = *(void *)(v140 + 240);
    uint64_t v28 = *(void *)(v140 + 248);

    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v30, v29);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v26 = *(uint64_t (**)(uint64_t))(*(void *)(v140 + 136) + 8);
    uint64_t v27 = *(void *)(v140 + 352);
    return v26(v27);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  Class isa;
  id v9;
  id v10;
  Swift::Double v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;

  uint64_t v1 = *(void *)(v0 + 408);
  *(void *)(v0 + 136) = v0;
  if (v1)
  {
    id v11 = v14[49];
    uint64_t v12 = *((void *)v14 + 50);
    uint64_t v13 = *((void *)v14 + 51);
  }
  else
  {
    id v11 = 0.0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  if (v13)
  {
    uint64_t v9 = (id)*((void *)v14 + 44);
    v14[26] = v11;
    *((void *)v14 + 15) = v12;
    *((void *)v14 + 16) = v13;
    type metadata accessor for NSNumber();
    Class isa = NSNumber.__allocating_init(value:)(v11).super.super.isa;
    objc_msgSend(v9, sel_setStrength_);

    swift_bridgeObjectRetain();
    id v10 = (id)MEMORY[0x2611C8860](v12, v13);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setStrengthUnit_, v10);

    swift_bridgeObjectRelease();
  }
  uint64_t v7 = *((void *)v14 + 43);
  swift_bridgeObjectRetain();
  uint64_t v2 = (void *)swift_task_alloc();
  *((void *)v14 + 52) = v2;
  *uint64_t v2 = *((void *)v14 + 17);
  v2[1] = SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  Swift::String v3 = *((void *)v14 + 42);
  uint64_t v4 = *((void *)v14 + 29);
  uint64_t v5 = *((void *)v14 + 28);
  return SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:)(v3, v7, v5, v4);
}

{
  double *v0;
  void *v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Double value;
  id v8;
  Class isa;
  double *v10;
  uint64_t v11;
  uint64_t v12;

  value = v0[53];
  uint64_t v8 = (id)*((void *)v0 + 44);
  id v11 = *((void *)v0 + 43);
  *((void *)v0 + 17) = v0;
  v0[25] = value;
  type metadata accessor for NSNumber();
  Class isa = NSNumber.__allocating_init(value:)(value).super.super.isa;
  objc_msgSend(v8, sel_setDosage_);

  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_task_alloc();
  *((void *)v10 + 54) = v1;
  void *v1 = *((void *)v10 + 17);
  v1[1] = SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  uint64_t v2 = v10[53];
  Swift::String v3 = *((void *)v10 + 42);
  uint64_t v4 = *((void *)v10 + 29);
  uint64_t v5 = *((void *)v10 + 28);
  return SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(v3, v11, v5, v4, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *buf;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint32_t size;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  NSObject *oslog;
  os_log_type_t v89;
  uint64_t v90;
  id v91;
  id v92;
  uint64_t v93;
  uint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  uint64_t v100 = v0;
  uint64_t v1 = *(void *)(v0 + 448);
  *(void *)(v0 + 136) = v0;
  if (v1)
  {
    uint64_t v93 = *(void *)(v94 + 448);
    uint64_t v90 = *(void *)(v94 + 440);
    uint64_t v91 = *(id *)(v94 + 352);
    *(void *)(v94 + 104) = v90;
    *(void *)(v94 + 112) = v93;
    swift_bridgeObjectRetain();
    uint64_t v92 = (id)MEMORY[0x2611C8860](v90, v93);
    swift_bridgeObjectRelease();
    objc_msgSend(v91, sel_setDosageUnit_, v92);

    swift_bridgeObjectRelease();
  }
  uint32_t v30 = *(id *)(v94 + 352);
  uint64_t v28 = *(void *)(v94 + 344);
  uint64_t v27 = *(void *)(v94 + 336);
  uint64_t v2 = *(void *)(v94 + 256);
  uint64_t v26 = *(void *)(v94 + 240);
  uint64_t v29 = *(id *)(v94 + 216);
  uint64_t v24 = *(void *)(v94 + 248);
  id v25 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v2, v25, v26);
  swift_endAccess();
  Swift::String v3 = v30;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v30;
  swift_bridgeObjectRetain();
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = v27;
  *(void *)(v34 + 24) = v28;
  uint64_t v4 = v30;
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = v30;
  uint64_t v5 = v30;
  NSDateInterval v38 = swift_allocObject();
  *(void *)(v38 + 16) = v30;
  uint64_t v6 = v30;
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = v30;
  uint64_t v7 = v29;
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = v29;
  uint64_t v8 = v30;
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v30;
  uint64_t v9 = v30;
  os_log_type_t v46 = swift_allocObject();
  *(void *)(v46 + 16) = v30;
  id v10 = v30;
  uint64_t v48 = swift_allocObject();
  *(void *)(v48 + 16) = v30;
  id v11 = v30;
  uint64_t v50 = swift_allocObject();
  *(void *)(v50 + 16) = v30;
  uint64_t v12 = v30;
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = v30;
  os_log_t oslog = Logger.logObject.getter();
  char v89 = static os_log_type_t.debug.getter();
  *(void *)(v94 + 192) = 112;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v94 + 460);
  uint64_t v54 = swift_allocObject();
  *(unsigned char *)(v54 + 16) = 32;
  uint64_t v55 = swift_allocObject();
  *(unsigned char *)(v55 + 16) = 8;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(void *)(v33 + 24) = v32;
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v56 + 24) = v33;
  uint64_t v57 = swift_allocObject();
  *(unsigned char *)(v57 + 16) = 32;
  uint64_t v58 = swift_allocObject();
  *(unsigned char *)(v58 + 16) = 8;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v35 + 24) = v34;
  uint64_t v59 = swift_allocObject();
  *(void *)(v59 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v59 + 24) = v35;
  uint64_t v60 = swift_allocObject();
  *(unsigned char *)(v60 + 16) = 32;
  os_log_type_t v61 = swift_allocObject();
  *(unsigned char *)(v61 + 16) = 8;
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(void *)(v37 + 24) = v36;
  uint64_t v62 = swift_allocObject();
  *(void *)(v62 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v62 + 24) = v37;
  uint64_t v63 = swift_allocObject();
  *(unsigned char *)(v63 + 16) = 32;
  char v64 = swift_allocObject();
  *(unsigned char *)(v64 + 16) = 8;
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = partial apply for implicit closure #5 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(void *)(v39 + 24) = v38;
  BOOL v65 = swift_allocObject();
  *(void *)(v65 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v65 + 24) = v39;
  id v66 = swift_allocObject();
  *(unsigned char *)(v66 + 16) = 32;
  id v67 = swift_allocObject();
  *(unsigned char *)(v67 + 16) = 8;
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = partial apply for implicit closure #6 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(void *)(v41 + 24) = v40;
  char v68 = swift_allocObject();
  *(void *)(v68 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v68 + 24) = v41;
  BOOL v69 = swift_allocObject();
  *(unsigned char *)(v69 + 16) = 32;
  uint64_t v70 = swift_allocObject();
  *(unsigned char *)(v70 + 16) = 8;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = partial apply for implicit closure #7 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(void *)(v43 + 24) = v42;
  uint64_t v71 = swift_allocObject();
  *(void *)(v71 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v71 + 24) = v43;
  uint64_t v72 = swift_allocObject();
  *(unsigned char *)(v72 + 16) = 32;
  uint64_t v73 = swift_allocObject();
  *(unsigned char *)(v73 + 16) = 8;
  uint32_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = partial apply for implicit closure #6 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(void *)(v45 + 24) = v44;
  uint64_t v74 = swift_allocObject();
  *(void *)(v74 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v74 + 24) = v45;
  uint64_t v75 = swift_allocObject();
  *(unsigned char *)(v75 + 16) = 32;
  uint64_t v76 = swift_allocObject();
  *(unsigned char *)(v76 + 16) = 8;
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = partial apply for implicit closure #7 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(void *)(v47 + 24) = v46;
  char v77 = swift_allocObject();
  *(void *)(v77 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v77 + 24) = v47;
  uint64_t v78 = swift_allocObject();
  *(unsigned char *)(v78 + 16) = 32;
  uint64_t v79 = swift_allocObject();
  *(unsigned char *)(v79 + 16) = 8;
  uint64_t v49 = swift_allocObject();
  *(void *)(v49 + 16) = partial apply for implicit closure #10 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(void *)(v49 + 24) = v48;
  uint64_t v80 = swift_allocObject();
  *(void *)(v80 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v80 + 24) = v49;
  uint32_t v81 = swift_allocObject();
  *(unsigned char *)(v81 + 16) = 32;
  os_log_type_t v82 = swift_allocObject();
  *(unsigned char *)(v82 + 16) = 8;
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = partial apply for implicit closure #11 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(void *)(v51 + 24) = v50;
  char v83 = swift_allocObject();
  *(void *)(v83 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v83 + 24) = v51;
  uint64_t v84 = swift_allocObject();
  *(unsigned char *)(v84 + 16) = 32;
  char v85 = swift_allocObject();
  *(unsigned char *)(v85 + 16) = 8;
  id v53 = swift_allocObject();
  *(void *)(v53 + 16) = partial apply for implicit closure #12 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
  *(void *)(v53 + 24) = v52;
  BOOL v86 = swift_allocObject();
  *(void *)(v86 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v86 + 24) = v53;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v87 = v13;
  swift_retain();
  *uint64_t v87 = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[1] = v54;
  swift_retain();
  v87[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[3] = v55;
  swift_retain();
  v87[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[5] = v56;
  swift_retain();
  v87[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[7] = v57;
  swift_retain();
  v87[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[9] = v58;
  swift_retain();
  v87[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[11] = v59;
  swift_retain();
  v87[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[13] = v60;
  swift_retain();
  v87[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[15] = v61;
  swift_retain();
  v87[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[17] = v62;
  swift_retain();
  v87[18] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[19] = v63;
  swift_retain();
  v87[20] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[21] = v64;
  swift_retain();
  v87[22] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[23] = v65;
  swift_retain();
  v87[24] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[25] = v66;
  swift_retain();
  v87[26] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[27] = v67;
  swift_retain();
  v87[28] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[29] = v68;
  swift_retain();
  v87[30] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[31] = v69;
  swift_retain();
  v87[32] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[33] = v70;
  swift_retain();
  v87[34] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[35] = v71;
  swift_retain();
  v87[36] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[37] = v72;
  swift_retain();
  v87[38] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[39] = v73;
  swift_retain();
  v87[40] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[41] = v74;
  swift_retain();
  v87[42] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[43] = v75;
  swift_retain();
  v87[44] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[45] = v76;
  swift_retain();
  v87[46] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[47] = v77;
  swift_retain();
  v87[48] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[49] = v78;
  swift_retain();
  v87[50] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[51] = v79;
  swift_retain();
  v87[52] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[53] = v80;
  swift_retain();
  v87[54] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[55] = v81;
  swift_retain();
  v87[56] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[57] = v82;
  swift_retain();
  v87[58] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[59] = v83;
  swift_retain();
  v87[60] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[61] = v84;
  swift_retain();
  v87[62] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[63] = v85;
  swift_retain();
  v87[64] = partial apply for closure #1 in OSLogArguments.append(_:);
  v87[65] = v86;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v89))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    id v22 = createStorage<A>(capacity:type:)(0);
    uint64_t v23 = createStorage<A>(capacity:type:)(11);
    uint64_t v95 = buf;
    uint64_t v96 = v22;
    uint64_t v97 = v23;
    serialize(_:at:)(2, &v95);
    serialize(_:at:)(11, &v95);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v54;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v55;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v56;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v57;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v58;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v59;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v60;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v61;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v62;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v63;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v64;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v65;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v66;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v67;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v68;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v69;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v70;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v71;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v72;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v73;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v74;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v75;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v76;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v77;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v78;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v79;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v80;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v81;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v82;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v83;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v84;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v85;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    uint64_t v98 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v99 = v86;
    closure #1 in osLogInternal(_:log:type:)(&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    _os_log_impl(&dword_25DE00000, oslog, v89, "    Built MatchedMedName:\n        scheduleID (%s),\n        medID (%s),\n        name (%s),\n        schedule (%s),\n        loggedTime (%s),\n        status (%s),\n        dosage (%s),\n        dosageUnit (%s),\n        strength (%s),\n        strengthUnit (%s),\n        completionStatus (%s)", buf, size);
    destroyStorage<A>(_:count:)(v22, 0, v20);
    destroyStorage<A>(_:count:)(v23, 11, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  id v19 = *(void *)(v94 + 256);
  id v18 = *(void *)(v94 + 240);
  uint64_t v17 = *(void *)(v94 + 248);

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)(v94 + 136) + 8);
  uint64_t v15 = *(void *)(v94 + 352);
  return v14(v15);
}

uint64_t SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v2;
  v4[17] = *v2;
  v4[46] = a1;
  v4[47] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:), 0);
}

{
  void *v2;
  void *v4;
  uint64_t v5;

  uint64_t v4 = (void *)*v2;
  v4[17] = *v2;
  v4[55] = a1;
  v4[56] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:), 0);
}

uint64_t SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v3;
  v5[17] = *v3;
  v5[49] = a1;
  v5[50] = a2;
  v5[51] = a3;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:), 0);
}

uint64_t SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(double a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 136) = *v1;
  *(double *)(v3 + 424) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:), 0);
}

uint64_t specialized implicit closure #12 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  unint64_t v1 = type metadata accessor for HKMedicationExposableDoseEvent();
  uint64_t v4 = MEMORY[0x2611C8A30](a1, v1);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 536) = a5;
  *(void *)(v5 + 528) = a4;
  *(unsigned char *)(v5 + 817) = a3 & 1;
  *(void *)(v5 + 520) = a2;
  *(void *)(v5 + 512) = a1;
  *(void *)(v5 + 216) = v5;
  *(void *)(v5 + 224) = 0;
  *(void *)(v5 + 232) = 0;
  *(unsigned char *)(v5 + 816) = 0;
  *(void *)(v5 + 136) = 0;
  *(void *)(v5 + 144) = 0;
  *(void *)(v5 + 248) = 0;
  *(void *)(v5 + 256) = 0;
  *(void *)(v5 + 152) = 0;
  *(void *)(v5 + 160) = 0;
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 360) = 0;
  *(void *)(v5 + 376) = 0;
  *(void *)(v5 + 184) = 0;
  *(void *)(v5 + 192) = 0;
  *(void *)(v5 + 400) = 0;
  *(void *)(v5 + 408) = 0;
  *(void *)(v5 + 416) = 0;
  *(void *)(v5 + 200) = 0;
  *(void *)(v5 + 208) = 0;
  *(void *)(v5 + 472) = 0;
  *(void *)(v5 + 480) = 0;
  uint64_t v6 = type metadata accessor for DateInterval();
  *(void *)(v5 + 544) = v6;
  uint64_t v9 = *(void *)(v6 - 8);
  *(void *)(v5 + 552) = v9;
  *(void *)(v5 + 560) = *(void *)(v9 + 64);
  *(void *)(v5 + 568) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Logger();
  *(void *)(v5 + 576) = v7;
  *(void *)(v5 + 584) = *(void *)(v7 - 8);
  *(void *)(v5 + 592) = swift_task_alloc();
  *(void *)(v5 + 600) = swift_task_alloc();
  *(void *)(v5 + 608) = swift_task_alloc();
  *(void *)(v5 + 616) = swift_task_alloc();
  *(void *)(v5 + 624) = swift_task_alloc();
  *(void *)(v5 + 224) = a1;
  *(void *)(v5 + 232) = a2;
  *(unsigned char *)(v5 + 816) = a3 & 1;
  *(void *)(v5 + 136) = a4;
  *(void *)(v5 + 144) = a5;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:), 0);
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)()
{
  uint64_t v145 = v0;
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v110 = *(void *)(v0 + 584);
  uint64_t v112 = *(void *)(v0 + 576);
  uint64_t v118 = *(void *)(v0 + 568);
  uint64_t v116 = *(void *)(v0 + 552);
  uint64_t v119 = *(void *)(v0 + 544);
  uint64_t v115 = *(void *)(v0 + 520);
  uint64_t v113 = *(void *)(v0 + 512);
  *(void *)(v0 + 216) = v0;
  uint64_t v111 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v110 + 16);
  *(void *)(v0 + 632) = v2;
  *(void *)(v0 + 640) = (v110 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v2(v1, v111, v112);
  swift_endAccess();
  swift_bridgeObjectRetain();
  uint64_t v114 = swift_allocObject();
  *(void *)(v114 + 16) = v113;
  swift_retain();
  uint64_t v122 = swift_allocObject();
  *(void *)(v122 + 16) = partial apply for implicit closure #3 in getPreferredUnit(for:store:);
  *(void *)(v122 + 24) = v114;
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v116 + 16))(v118, v115, v119);
  unint64_t v117 = (*(unsigned __int8 *)(v116 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80);
  uint64_t v120 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v116 + 32))(v120 + v117, v118, v119);
  swift_retain();
  uint64_t v124 = swift_allocObject();
  *(void *)(v124 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
  *(void *)(v124 + 24) = v120;
  swift_release();
  uint64_t v133 = Logger.logObject.getter();
  os_log_type_t v134 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 240) = 22;
  *(void *)(v0 + 648) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 656) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 664) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 820);
  uint64_t v126 = swift_allocObject();
  *(unsigned char *)(v126 + 16) = 32;
  uint64_t v127 = swift_allocObject();
  *(unsigned char *)(v127 + 16) = 8;
  uint64_t v123 = swift_allocObject();
  *(void *)(v123 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  *(void *)(v123 + 24) = v122;
  uint64_t v128 = swift_allocObject();
  *(void *)(v128 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v128 + 24) = v123;
  uint64_t v129 = swift_allocObject();
  *(unsigned char *)(v129 + 16) = 32;
  uint64_t v130 = swift_allocObject();
  *(unsigned char *)(v130 + 16) = 8;
  uint64_t v125 = swift_allocObject();
  *(void *)(v125 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
  *(void *)(v125 + 24) = v124;
  uint64_t v131 = swift_allocObject();
  *(void *)(v131 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v131 + 24) = v125;
  *(void *)(v0 + 672) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v132 = v3;
  swift_retain();
  void *v132 = partial apply for closure #1 in OSLogArguments.append(_:);
  v132[1] = v126;
  swift_retain();
  v132[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v132[3] = v127;
  swift_retain();
  v132[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v132[5] = v128;
  swift_retain();
  v132[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v132[7] = v129;
  swift_retain();
  v132[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v132[9] = v130;
  swift_retain();
  v132[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v132[11] = v131;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v133, v134))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v107 = createStorage<A>(capacity:type:)(0);
    uint64_t v108 = createStorage<A>(capacity:type:)(2);
    unsigned int v140 = buf;
    uint64_t v141 = v107;
    uint64_t v142 = v108;
    serialize(_:at:)(2, &v140);
    serialize(_:at:)(2, &v140);
    uint64_t v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v144 = v126;
    closure #1 in osLogInternal(_:log:type:)(&v143, (uint64_t)&v140, (uint64_t)&v141, (uint64_t)&v142);
    uint64_t v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v144 = v127;
    closure #1 in osLogInternal(_:log:type:)(&v143, (uint64_t)&v140, (uint64_t)&v141, (uint64_t)&v142);
    uint64_t v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v144 = v128;
    closure #1 in osLogInternal(_:log:type:)(&v143, (uint64_t)&v140, (uint64_t)&v141, (uint64_t)&v142);
    uint64_t v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v144 = v129;
    closure #1 in osLogInternal(_:log:type:)(&v143, (uint64_t)&v140, (uint64_t)&v141, (uint64_t)&v142);
    uint64_t v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v144 = v130;
    closure #1 in osLogInternal(_:log:type:)(&v143, (uint64_t)&v140, (uint64_t)&v141, (uint64_t)&v142);
    uint64_t v143 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v144 = v131;
    closure #1 in osLogInternal(_:log:type:)(&v143, (uint64_t)&v140, (uint64_t)&v141, (uint64_t)&v142);
    _os_log_impl(&dword_25DE00000, v133, v134, "Name: %s and Time: %s specified.", buf, size);
    destroyStorage<A>(_:count:)(v107, 0, v105);
    destroyStorage<A>(_:count:)(v108, 2, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v99 = *(void *)(v109 + 624);
  uint64_t v100 = *(void *)(v109 + 576);
  uint64_t v101 = *(void *)(v109 + 512);
  uint64_t v98 = *(void *)(v109 + 584);

  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v98 + 8);
  *(void *)(v109 + 680) = v4;
  *(void *)(v109 + 688) = (v98 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v4(v99, v100);
  *(void *)(v109 + 696) = type metadata accessor for HKMedicationExposableDoseEvent();
  *(void *)(v109 + 248) = _allocateUninitializedArray<A>(_:)();
  uint64_t v5 = swift_allocObject();
  *(void *)(v109 + 704) = v5;
  *(void *)(v109 + 256) = v5 + 16;
  *(void *)(v5 + 16) = 0;
  swift_bridgeObjectRetain();
  *(void *)(v109 + 264) = v101;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  uint64_t v102 = *(void *)(v109 + 168);
  uint64_t v103 = *(void *)(v109 + 176);
  *(void *)(v109 + 712) = v103;
  if (v103)
  {
    *(void *)(v109 + 200) = v102;
    *(void *)(v109 + 208) = v103;
    type metadata accessor for HKMedicationIdentifier();
    swift_bridgeObjectRetain();
    id v97 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
    *(void *)(v109 + 720) = v97;
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v109 + 728) = v6;
    void *v6 = *(void *)(v109 + 216);
    v6[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
    uint64_t v7 = *(void *)(v109 + 536);
    uint64_t v8 = *(void *)(v109 + 528);
    uint64_t v9 = *(void *)(v109 + 520);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v9, (uint64_t)v97, v8, v7);
  }
  outlined destroy of [HKQuantityType]();
  uint64_t v91 = *(void *)(v109 + 248);
  swift_bridgeObjectRetain();
  uint64_t v92 = filterUniqueDoseEvents(doseEvents:)(v91);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)(v109 + 248) = v92;
  swift_bridgeObjectRelease();
  *(void *)(v109 + 272) = v92;
  uint64_t v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  unint64_t v95 = lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  uint64_t v96 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:), 0, v93, v94, MEMORY[0x263F8E628], v95, MEMORY[0x263F8E658], v104);
  outlined destroy of [HKQuantityType]();
  *(void *)(v109 + 280) = v96;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
  lazy protocol witness table accessor for type String? and conformance <A> A?();
  lazy protocol witness table accessor for type [String?] and conformance [A]();
  uint64_t v89 = Set.init<A>(_:)();
  *(void *)(v109 + 752) = v89;
  *(void *)(v109 + 288) = v89;
  swift_bridgeObjectRetain();
  *(void *)(v109 + 296) = v92;
  char v90 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  if (v90)
  {
    uint64_t v84 = *(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 632);
    uint64_t v11 = *(void *)(v109 + 616);
    uint64_t v83 = *(void *)(v109 + 576);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v82 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v84(v11, v82, v83);
    swift_endAccess();
    os_log_t oslog = Logger.logObject.getter();
    os_log_type_t v86 = static os_log_type_t.debug.getter();
    *(void *)(v109 + 432) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v85 = *(_DWORD *)(v109 + 832);
    uint64_t v88 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v86))
    {
      uint64_t v78 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v79 = createStorage<A>(capacity:type:)(0);
      uint64_t v80 = createStorage<A>(capacity:type:)(0);
      *(void *)(v109 + 440) = v78;
      *(void *)(v109 + 448) = v79;
      *(void *)(v109 + 456) = v80;
      serialize(_:at:)(0, (unsigned char **)(v109 + 440));
      serialize(_:at:)(0, (unsigned char **)(v109 + 440));
      *(void *)(v109 + 464) = v88;
      uint32_t v81 = (void *)swift_task_alloc();
      v81[2] = v109 + 440;
      v81[3] = v109 + 448;
      v81[4] = v109 + 456;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, oslog, v86, "Name and time specified, but no potential time match found. Returning .noMatchFound.", v78, v85);
      destroyStorage<A>(_:count:)(v79, 0, v77);
      destroyStorage<A>(_:count:)(v80, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v78, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v74 = *(void (**)(uint64_t, uint64_t))(v109 + 680);
    uint64_t v72 = *(void *)(v109 + 616);
    uint64_t v73 = *(void *)(v109 + 576);

    v74(v72, v73);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v75 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [HKQuantityType]();
    uint64_t v76 = v75;
    goto LABEL_30;
  }
  if (Set.count.getter() <= 1 && *(uint64_t *)(*(void *)(v109 + 704) + 16) <= 1)
  {
    uint64_t v42 = *(void *)(v109 + 696);
    swift_bridgeObjectRelease();
    uint64_t v43 = MEMORY[0x2611C8A30](v92, v42);
    swift_bridgeObjectRelease();
    if (v43 != 1
      || (swift_bridgeObjectRetain(),
          *(void *)(v109 + 352) = v92,
          Collection.first.getter(),
          outlined destroy of [HKQuantityType](),
          uint64_t v41 = *(void *)(v109 + 344),
          (*(void *)(v109 + 792) = v41) == 0))
    {
      swift_bridgeObjectRelease();
      uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 632);
      uint64_t v23 = *(void *)(v109 + 600);
      uint64_t v35 = *(void *)(v109 + 576);
      uint64_t v34 = Logger.wellness.unsafeMutableAddressor();
      swift_beginAccess();
      v36(v23, v34, v35);
      swift_endAccess();
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      *(void *)(v109 + 304) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v37 = *(_DWORD *)(v109 + 824);
      uint64_t v40 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v39, v38))
      {
        uint32_t v30 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v31 = createStorage<A>(capacity:type:)(0);
        uint64_t v32 = createStorage<A>(capacity:type:)(0);
        *(void *)(v109 + 312) = v30;
        *(void *)(v109 + 320) = v31;
        *(void *)(v109 + 328) = v32;
        serialize(_:at:)(0, (unsigned char **)(v109 + 312));
        serialize(_:at:)(0, (unsigned char **)(v109 + 312));
        *(void *)(v109 + 336) = v40;
        uint64_t v33 = (void *)swift_task_alloc();
        v33[2] = v109 + 312;
        v33[3] = v109 + 320;
        v33[4] = v109 + 328;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25DE00000, v39, v38, "More than 1 doseEvent found in saveScheduledMedication's fallback condition, returning failure status", v30, v37);
        destroyStorage<A>(_:count:)(v31, 0, v29);
        destroyStorage<A>(_:count:)(v32, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v30, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v109 + 680);
      uint64_t v25 = *(void *)(v109 + 600);
      uint64_t v26 = *(void *)(v109 + 576);

      v27(v25, v26);
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      uint64_t v28 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [HKQuantityType]();
      uint64_t v76 = v28;
      goto LABEL_30;
    }
    *(void *)(v109 + 360) = v41;
    swift_bridgeObjectRelease();
    id v19 = (void *)swift_task_alloc();
    *(void *)(v109 + 800) = v19;
    *id v19 = *(void *)(v109 + 216);
    v19[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
    uint64_t v20 = *(void *)(v109 + 536);
    uint64_t v21 = *(void *)(v109 + 528);
    char v22 = *(unsigned char *)(v109 + 817) & 1;
    return SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:)(v41, v22, v21, v20);
  }
  else
  {
    uint64_t v61 = *(void *)(v109 + 704);
    uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v109 + 632);
    uint64_t v12 = *(void *)(v109 + 608);
    uint64_t v55 = *(void *)(v109 + 576);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v54 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v56(v12, v54, v55);
    swift_endAccess();
    swift_bridgeObjectRetain();
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = v89;
    swift_retain();
    uint64_t v59 = swift_allocObject();
    *(void *)(v59 + 16) = partial apply for implicit closure #3 in getPreferredUnit(for:store:);
    *(void *)(v59 + 24) = v57;
    swift_release();
    swift_retain();
    log = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.debug.getter();
    *(void *)(v109 + 368) = 22;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v58 = *(_DWORD *)(v109 + 828);
    uint64_t v63 = swift_allocObject();
    *(unsigned char *)(v63 + 16) = 32;
    uint64_t v64 = swift_allocObject();
    *(unsigned char *)(v64 + 16) = 8;
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
    *(void *)(v60 + 24) = v59;
    uint64_t v65 = swift_allocObject();
    *(void *)(v65 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v65 + 24) = v60;
    uint64_t v66 = swift_allocObject();
    *(unsigned char *)(v66 + 16) = 0;
    uint64_t v67 = swift_allocObject();
    *(unsigned char *)(v67 + 16) = 8;
    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = partial apply for implicit closure #7 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
    *(void *)(v62 + 24) = v61;
    uint64_t v68 = swift_allocObject();
    *(void *)(v68 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(void *)(v68 + 24) = v62;
    _allocateUninitializedArray<A>(_:)();
    BOOL v69 = v13;
    swift_retain();
    *BOOL v69 = partial apply for closure #1 in OSLogArguments.append(_:);
    v69[1] = v63;
    swift_retain();
    v69[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v69[3] = v64;
    swift_retain();
    v69[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v69[5] = v65;
    swift_retain();
    v69[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v69[7] = v66;
    swift_retain();
    v69[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v69[9] = v67;
    swift_retain();
    v69[10] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v69[11] = v68;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v71))
    {
      uint64_t v51 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v52 = createStorage<A>(capacity:type:)(0);
      uint64_t v53 = createStorage<A>(capacity:type:)(1);
      unint64_t v135 = v51;
      uint64_t v136 = v52;
      uint64_t v137 = v53;
      serialize(_:at:)(2, &v135);
      serialize(_:at:)(2, &v135);
      uint64_t v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v139 = v63;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      uint64_t v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v139 = v64;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      uint64_t v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v139 = v65;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      uint64_t v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v139 = v66;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      uint64_t v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v139 = v67;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      uint64_t v138 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
      uint64_t v139 = v68;
      closure #1 in osLogInternal(_:log:type:)(&v138, (uint64_t)&v135, (uint64_t)&v136, (uint64_t)&v137);
      _os_log_impl(&dword_25DE00000, log, v71, "Multiple times (%s) or strengths (%ld) found for specified name today, returning .needsNameDisambiguation", v51, v58);
      destroyStorage<A>(_:count:)(v52, 0, v50);
      destroyStorage<A>(_:count:)(v53, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v51, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v109 + 680);
    uint64_t v46 = *(void *)(v109 + 608);
    uint64_t v47 = *(void *)(v109 + 576);

    v48(v46, v47);
    *(void *)(v109 + 760) = type metadata accessor for MatchedMedName();
    *(void *)(v109 + 376) = _allocateUninitializedArray<A>(_:)();
    *(void *)(v109 + 384) = v92;
    Collection<>.makeIterator()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    uint64_t v49 = *(void *)(v109 + 392);
    *(void *)(v109 + 768) = v49;
    if (!v49)
    {
      outlined destroy of [HKQuantityType]();
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      uint32_t v45 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(103, 0);
      uint64_t v17 = v45;
      id v18 = v45;
      *(void *)(v109 + 400) = v45;
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v45, sel_setMatchingMeds_, isa);

      outlined destroy of [HKQuantityType]();
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [HKQuantityType]();
      uint64_t v76 = v45;
LABEL_30:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v24 = *(uint64_t (**)(char *))(*(void *)(v109 + 216) + 8);
      return v24(v76);
    }
    *(void *)(v109 + 408) = v49;
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v109 + 776) = v14;
    *uint64_t v14 = *(void *)(v109 + 216);
    v14[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
    uint64_t v15 = *(void *)(v109 + 536);
    uint64_t v16 = *(void *)(v109 + 528);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v49, 1, v16, v15);
  }
}

{
  void *v0;
  uint64_t result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t (*v21)(char *);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  char *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  uint32_t v34;
  os_log_type_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Class isa;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint32_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  NSObject *log;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  char *v72;
  char *v73;
  uint64_t v74;
  uint8_t *buf;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v83;
  NSObject *oslog;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint8_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  void *v107;
  uint64_t v108;

  uint64_t v107 = v0;
  uint64_t v100 = v0[92];
  v0[27] = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[59] = v100;
  v0[62] = v100;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Array.append<A>(contentsOf:)();
  swift_bridgeObjectRetain();
  v0[63] = v100;
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  uint64_t v101 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  id result = v101;
  if ((v101 & 1) == 0)
  {
    uint64_t v6 = *(void *)(*(void *)(v99 + 704) + 16);
    unint64_t v95 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      return result;
    }
    *(void *)(*(void *)(v99 + 704) + 16) = v95;
  }
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  uint64_t v94 = *(void *)(v99 + 744);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[String]>);
  IndexingIterator.next()();
  id v97 = *(void *)(v99 + 168);
  uint64_t v96 = *(void *)(v99 + 176);
  *(void *)(v99 + 712) = v96;
  if (v96)
  {
    *(void *)(v99 + 200) = v97;
    *(void *)(v99 + 208) = v96;
    type metadata accessor for HKMedicationIdentifier();
    swift_bridgeObjectRetain();
    uint64_t v98 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
    *(void *)(v99 + 720) = v98;
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v99 + 728) = v2;
    *uint64_t v2 = *(void *)(v99 + 216);
    v2[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
    uint64_t v3 = *(void *)(v99 + 536);
    uint64_t v4 = *(void *)(v99 + 528);
    uint64_t v5 = *(void *)(v99 + 520);
    return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v5, (uint64_t)v98, v4, v3);
  }
  else
  {
    outlined destroy of [HKQuantityType]();
    uint64_t v88 = *(void *)(v99 + 248);
    swift_bridgeObjectRetain();
    uint64_t v89 = filterUniqueDoseEvents(doseEvents:)(v88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(void *)(v99 + 248) = v89;
    swift_bridgeObjectRelease();
    *(void *)(v99 + 272) = v89;
    char v90 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    uint64_t v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v93 = lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    id result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:), 0, v90, v91, MEMORY[0x263F8E628], v93, MEMORY[0x263F8E658], v92);
    if (v94) {
      return result;
    }
    outlined destroy of [HKQuantityType]();
    *(void *)(v99 + 280) = result;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
    lazy protocol witness table accessor for type String? and conformance <A> A?();
    lazy protocol witness table accessor for type [String?] and conformance [A]();
    os_log_type_t v86 = Set.init<A>(_:)();
    *(void *)(v99 + 752) = v86;
    *(void *)(v99 + 288) = v86;
    swift_bridgeObjectRetain();
    *(void *)(v99 + 296) = v89;
    uint64_t v87 = Collection.isEmpty.getter();
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRelease();
    if (v87)
    {
      uint32_t v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 632);
      uint64_t v8 = *(void *)(v99 + 616);
      uint64_t v80 = *(void *)(v99 + 576);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v79 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v81(v8, v79, v80);
      swift_endAccess();
      os_log_t oslog = Logger.logObject.getter();
      uint64_t v83 = static os_log_type_t.debug.getter();
      *(void *)(v99 + 432) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t size = *(_DWORD *)(v99 + 832);
      uint32_t v85 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v83))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v76 = createStorage<A>(capacity:type:)(0);
        uint64_t v77 = createStorage<A>(capacity:type:)(0);
        *(void *)(v99 + 440) = buf;
        *(void *)(v99 + 448) = v76;
        *(void *)(v99 + 456) = v77;
        serialize(_:at:)(0, (unsigned char **)(v99 + 440));
        serialize(_:at:)(0, (unsigned char **)(v99 + 440));
        *(void *)(v99 + 464) = v85;
        uint64_t v78 = (void *)swift_task_alloc();
        v78[2] = v99 + 440;
        v78[3] = v99 + 448;
        v78[4] = v99 + 456;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25DE00000, oslog, v83, "Name and time specified, but no potential time match found. Returning .noMatchFound.", buf, size);
        destroyStorage<A>(_:count:)(v76, 0, v74);
        destroyStorage<A>(_:count:)(v77, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      os_log_type_t v71 = *(void (**)(uint64_t, uint64_t))(v99 + 680);
      BOOL v69 = *(void *)(v99 + 616);
      uint64_t v70 = *(void *)(v99 + 576);

      v71(v69, v70);
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      uint64_t v72 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
      swift_bridgeObjectRelease();
      swift_release();
      outlined destroy of [HKQuantityType]();
      uint64_t v73 = v72;
      goto LABEL_35;
    }
    if (Set.count.getter() <= 1 && *(uint64_t *)(*(void *)(v99 + 704) + 16) <= 1)
    {
      uint64_t v39 = *(void *)(v99 + 696);
      swift_bridgeObjectRelease();
      uint64_t v40 = MEMORY[0x2611C8A30](v89, v39);
      swift_bridgeObjectRelease();
      if (v40 != 1
        || (swift_bridgeObjectRetain(),
            *(void *)(v99 + 352) = v89,
            Collection.first.getter(),
            outlined destroy of [HKQuantityType](),
            os_log_type_t v38 = *(void *)(v99 + 344),
            (*(void *)(v99 + 792) = v38) == 0))
      {
        swift_bridgeObjectRelease();
        uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 632);
        uint64_t v20 = *(void *)(v99 + 600);
        uint64_t v32 = *(void *)(v99 + 576);
        uint64_t v31 = Logger.wellness.unsafeMutableAddressor();
        swift_beginAccess();
        v33(v20, v31, v32);
        swift_endAccess();
        uint64_t v36 = Logger.logObject.getter();
        uint64_t v35 = static os_log_type_t.error.getter();
        *(void *)(v99 + 304) = 2;
        UnsignedInteger<>.init<A>(_:)();
        uint64_t v34 = *(_DWORD *)(v99 + 824);
        uint32_t v37 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v36, v35))
        {
          uint64_t v27 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v28 = createStorage<A>(capacity:type:)(0);
          uint64_t v29 = createStorage<A>(capacity:type:)(0);
          *(void *)(v99 + 312) = v27;
          *(void *)(v99 + 320) = v28;
          *(void *)(v99 + 328) = v29;
          serialize(_:at:)(0, (unsigned char **)(v99 + 312));
          serialize(_:at:)(0, (unsigned char **)(v99 + 312));
          *(void *)(v99 + 336) = v37;
          uint32_t v30 = (void *)swift_task_alloc();
          v30[2] = v99 + 312;
          v30[3] = v99 + 320;
          v30[4] = v99 + 328;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_25DE00000, v36, v35, "More than 1 doseEvent found in saveScheduledMedication's fallback condition, returning failure status", v27, v34);
          destroyStorage<A>(_:count:)(v28, 0, v26);
          destroyStorage<A>(_:count:)(v29, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](v27, MEMORY[0x263F8E778]);
        }
        swift_bridgeObjectRelease();
        uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v99 + 680);
        char v22 = *(void *)(v99 + 600);
        uint64_t v23 = *(void *)(v99 + 576);

        v24(v22, v23);
        type metadata accessor for LogSpecificMedicationsIntentResponse();
        uint64_t v25 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
        swift_bridgeObjectRelease();
        swift_release();
        outlined destroy of [HKQuantityType]();
        uint64_t v73 = v25;
        goto LABEL_35;
      }
      *(void *)(v99 + 360) = v38;
      swift_bridgeObjectRelease();
      uint64_t v16 = (void *)swift_task_alloc();
      *(void *)(v99 + 800) = v16;
      *uint64_t v16 = *(void *)(v99 + 216);
      v16[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
      uint64_t v17 = *(void *)(v99 + 536);
      id v18 = *(void *)(v99 + 528);
      id v19 = *(unsigned char *)(v99 + 817) & 1;
      return SpecificMedicationsPersistor.buildConfirmationForScheduledOrAsNeeded(doseEvent:requestedMedStatus:)(v38, v19, v18, v17);
    }
    else
    {
      uint32_t v58 = *(void *)(v99 + 704);
      uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 632);
      uint64_t v9 = *(void *)(v99 + 608);
      uint64_t v52 = *(void *)(v99 + 576);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v51 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v53(v9, v51, v52);
      swift_endAccess();
      swift_bridgeObjectRetain();
      uint64_t v54 = swift_allocObject();
      *(void *)(v54 + 16) = v86;
      swift_retain();
      uint64_t v56 = swift_allocObject();
      *(void *)(v56 + 16) = partial apply for implicit closure #3 in getPreferredUnit(for:store:);
      *(void *)(v56 + 24) = v54;
      swift_release();
      swift_retain();
      log = Logger.logObject.getter();
      uint64_t v68 = static os_log_type_t.debug.getter();
      *(void *)(v99 + 368) = 22;
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v55 = *(_DWORD *)(v99 + 828);
      uint64_t v60 = swift_allocObject();
      *(unsigned char *)(v60 + 16) = 32;
      uint64_t v61 = swift_allocObject();
      *(unsigned char *)(v61 + 16) = 8;
      uint64_t v57 = swift_allocObject();
      *(void *)(v57 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
      *(void *)(v57 + 24) = v56;
      uint64_t v62 = swift_allocObject();
      *(void *)(v62 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v62 + 24) = v57;
      uint64_t v63 = swift_allocObject();
      *(unsigned char *)(v63 + 16) = 0;
      uint64_t v64 = swift_allocObject();
      *(unsigned char *)(v64 + 16) = 8;
      uint64_t v59 = swift_allocObject();
      *(void *)(v59 + 16) = partial apply for implicit closure #7 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
      *(void *)(v59 + 24) = v58;
      uint64_t v65 = swift_allocObject();
      *(void *)(v65 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
      *(void *)(v65 + 24) = v59;
      _allocateUninitializedArray<A>(_:)();
      uint64_t v66 = v10;
      swift_retain();
      *uint64_t v66 = partial apply for closure #1 in OSLogArguments.append(_:);
      v66[1] = v60;
      swift_retain();
      v66[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v66[3] = v61;
      swift_retain();
      v66[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v66[5] = v62;
      swift_retain();
      v66[6] = partial apply for closure #1 in OSLogArguments.append(_:);
      v66[7] = v63;
      swift_retain();
      v66[8] = partial apply for closure #1 in OSLogArguments.append(_:);
      v66[9] = v64;
      swift_retain();
      v66[10] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
      v66[11] = v65;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(log, v68))
      {
        uint64_t v48 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v49 = createStorage<A>(capacity:type:)(0);
        uint64_t v50 = createStorage<A>(capacity:type:)(1);
        uint64_t v102 = v48;
        uint64_t v103 = v49;
        uint64_t v104 = v50;
        serialize(_:at:)(2, &v102);
        serialize(_:at:)(2, &v102);
        uint64_t v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v106 = v60;
        closure #1 in osLogInternal(_:log:type:)(&v105, (uint64_t)&v102, (uint64_t)&v103, (uint64_t)&v104);
        uint64_t v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v106 = v61;
        closure #1 in osLogInternal(_:log:type:)(&v105, (uint64_t)&v102, (uint64_t)&v103, (uint64_t)&v104);
        uint64_t v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v106 = v62;
        closure #1 in osLogInternal(_:log:type:)(&v105, (uint64_t)&v102, (uint64_t)&v103, (uint64_t)&v104);
        uint64_t v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v106 = v63;
        closure #1 in osLogInternal(_:log:type:)(&v105, (uint64_t)&v102, (uint64_t)&v103, (uint64_t)&v104);
        uint64_t v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v106 = v64;
        closure #1 in osLogInternal(_:log:type:)(&v105, (uint64_t)&v102, (uint64_t)&v103, (uint64_t)&v104);
        uint64_t v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
        uint64_t v106 = v65;
        closure #1 in osLogInternal(_:log:type:)(&v105, (uint64_t)&v102, (uint64_t)&v103, (uint64_t)&v104);
        _os_log_impl(&dword_25DE00000, log, v68, "Multiple times (%s) or strengths (%ld) found for specified name today, returning .needsNameDisambiguation", v48, v55);
        destroyStorage<A>(_:count:)(v49, 0, v47);
        destroyStorage<A>(_:count:)(v50, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v48, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      uint32_t v45 = *(void (**)(uint64_t, uint64_t))(v99 + 680);
      uint64_t v43 = *(void *)(v99 + 608);
      uint64_t v44 = *(void *)(v99 + 576);

      v45(v43, v44);
      *(void *)(v99 + 760) = type metadata accessor for MatchedMedName();
      *(void *)(v99 + 376) = _allocateUninitializedArray<A>(_:)();
      *(void *)(v99 + 384) = v89;
      Collection<>.makeIterator()();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
      IndexingIterator.next()();
      uint64_t v46 = *(void *)(v99 + 392);
      *(void *)(v99 + 768) = v46;
      if (!v46)
      {
        outlined destroy of [HKQuantityType]();
        type metadata accessor for LogSpecificMedicationsIntentResponse();
        uint64_t v42 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(103, 0);
        uint64_t v14 = v42;
        uint64_t v15 = v42;
        *(void *)(v99 + 400) = v42;
        swift_bridgeObjectRetain();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v42, sel_setMatchingMeds_, isa);

        outlined destroy of [HKQuantityType]();
        swift_bridgeObjectRelease();
        swift_release();
        outlined destroy of [HKQuantityType]();
        uint64_t v73 = v42;
LABEL_35:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v21 = *(uint64_t (**)(char *))(*(void *)(v99 + 216) + 8);
        return v21(v73);
      }
      *(void *)(v99 + 408) = v46;
      uint64_t v11 = (void *)swift_task_alloc();
      *(void *)(v99 + 776) = v11;
      *uint64_t v11 = *(void *)(v99 + 216);
      v11[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
      uint64_t v12 = *(void *)(v99 + 536);
      uint64_t v13 = *(void *)(v99 + 528);
      return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v46, 1, v13, v12);
    }
  }
}

{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  char *v7;
  uint64_t (*v8)(char *);
  Class isa;
  char *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v12 = (id)v0[98];
  uint64_t v13 = (id)v0[96];
  v0[27] = v0;
  v0[52] = v12;
  uint64_t v1 = v12;
  v0[53] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  uint64_t v14 = v0[49];
  v0[96] = v14;
  if (v14)
  {
    *(void *)(v11 + 408) = v14;
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v11 + 776) = v2;
    *uint64_t v2 = *(void *)(v11 + 216);
    v2[1] = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
    uint64_t v3 = *(void *)(v11 + 536);
    uint64_t v4 = *(void *)(v11 + 528);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v14, 1, v4, v3);
  }
  else
  {
    outlined destroy of [HKQuantityType]();
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    id v10 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(103, 0);
    uint64_t v6 = v10;
    uint64_t v7 = v10;
    *(void *)(v11 + 400) = v10;
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRelease();
    swift_release();
    outlined destroy of [HKQuantityType]();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(char *))(*(void *)(v11 + 216) + 8);
    return v8(v10);
  }
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(uint64_t);
  uint64_t v4;
  uint64_t v5;

  uint64_t v1 = (void *)v0[99];
  v0[27] = v0;

  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of [HKQuantityType]();
  uint64_t v4 = v0[101];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0[27] + 8);
  return v2(v4);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  uint64_t (*v6)(char *);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  id v11;
  char *v12;
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  id v21;
  uint32_t size;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint32_t v37 = v0;
  uint64_t v21 = *(id *)(v0 + 744);
  uint64_t v1 = *(void **)(v0 + 720);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 632);
  uint64_t v2 = *(void *)(v0 + 592);
  id v19 = *(void *)(v0 + 576);
  *(void *)(v0 + 216) = v0;

  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  swift_release();
  outlined destroy of [HKQuantityType]();
  uint64_t v3 = v21;
  *(void *)(v0 + 480) = v21;
  id v18 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v20(v2, v18, v19);
  swift_endAccess();
  uint64_t v4 = v21;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v21;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  uint32_t v30 = Logger.logObject.getter();
  uint64_t v31 = static os_log_type_t.error.getter();
  *(void *)(v0 + 488) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 836);
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = 64;
  uint64_t v27 = swift_allocObject();
  *(unsigned char *)(v27 + 16) = 8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(void *)(v24 + 24) = v23;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(void *)(v25 + 24) = v24;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v28 + 24) = v25;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v29 = v5;
  swift_retain();
  *uint64_t v29 = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[1] = v26;
  swift_retain();
  v29[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[3] = v27;
  swift_retain();
  v29[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v29[5] = v28;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v30, v31))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v15 = createStorage<A>(capacity:type:)(1);
    uint64_t v16 = createStorage<A>(capacity:type:)(0);
    uint64_t v32 = buf;
    uint64_t v33 = v15;
    uint64_t v34 = v16;
    serialize(_:at:)(2, &v32);
    serialize(_:at:)(1, &v32);
    uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v36 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v36 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v36 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    _os_log_impl(&dword_25DE00000, v30, v31, "Failed fetching dose events for specified timeframe: %@", buf, size);
    destroyStorage<A>(_:count:)(v15, 1, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v11 = (id)v17[93];
  id v10 = (void (*)(uint64_t, uint64_t))v17[85];
  uint64_t v8 = v17[74];
  uint64_t v9 = v17[72];

  v10(v8, v9);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  uint64_t v12 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(char *))(v17[27] + 8);
  return v6(v12);
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 216) = *v2;
  *(void *)(v5 + 736) = a1;
  *(void *)(v5 + 744) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
  }
  else
  {

    uint64_t v3 = SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 216) = *v1;
  *(void *)(v3 + 784) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 216) = *v1;
  *(void *)(v3 + 808) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:), 0);
}

uint64_t SpecificMedicationsPersistor.getDateIntervalCloserToNow(firstDateInterval:secondDateInterval:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v16 = a5;
  uint64_t v17 = a1;
  uint64_t v22 = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v46 = 0;
  uint64_t v45 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  double v39 = 0.0;
  double v36 = 0.0;
  uint64_t v28 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v28 - 8);
  uint64_t v24 = v28 - 8;
  unint64_t v20 = (*(void *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v28);
  uint64_t v27 = (char *)&v15 - v20;
  unint64_t v21 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v15 - v20);
  uint64_t v26 = (char *)&v15 - v21;
  uint64_t v46 = (char *)&v15 - v21;
  uint64_t v45 = a1;
  uint64_t v44 = v7;
  uint64_t v42 = v8;
  uint64_t v43 = v9;
  Date.init()();
  DateInterval.start.getter();
  Date.timeIntervalSince(_:)();
  uint64_t v25 = v10;
  uint32_t v30 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v29 = v23 + 8;
  v30(v27, v28);
  uint64_t v40 = v25;
  uint64_t v32 = MEMORY[0x263F8D538];
  uint64_t v33 = MEMORY[0x263F8D560];
  uint64_t v34 = MEMORY[0x263F8D590];
  abs<A>(_:)();
  double v35 = v41;
  double v39 = v41;
  DateInterval.start.getter();
  Date.timeIntervalSince(_:)();
  uint64_t v31 = v11;
  v30(v27, v28);
  uint64_t v37 = v31;
  abs<A>(_:)();
  double v36 = v38;
  if (v35 >= v38)
  {
    uint64_t v13 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v16, v22);
  }
  else
  {
    uint64_t v12 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v16, v17);
  }
  return ((uint64_t (*)(char *, uint64_t))v30)(v26, v28);
}

uint64_t implicit closure #2 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = type metadata accessor for DateInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a2, a1);
}

void closure #1 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v8 = objc_msgSend(*a1, sel_scheduleItemIdentifier);
  if (v8)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v2;

    uint64_t v5 = v3;
    uint64_t v6 = v4;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v5;
  a2[1] = v6;
}

uint64_t implicit closure #5 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(a1 + 16);
  swift_endAccess();
  return v3;
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 1800) = a4;
  *(void *)(v4 + 1792) = a3;
  *(unsigned char *)(v4 + 2401) = a2 & 1;
  *(void *)(v4 + 1784) = a1;
  *(void *)(v4 + 1128) = v4;
  *(void *)(v4 + 1136) = 0;
  *(unsigned char *)(v4 + 2400) = 0;
  *(void *)(v4 + 888) = 0;
  *(void *)(v4 + 896) = 0;
  *(void *)(v4 + 1160) = 0;
  *(void *)(v4 + 1168) = 0;
  *(void *)(v4 + 1232) = 0;
  *(void *)(v4 + 904) = 0;
  *(void *)(v4 + 912) = 0;
  *(void *)(v4 + 1280) = 0;
  *(void *)(v4 + 1288) = 0;
  *(void *)(v4 + 920) = 0;
  *(void *)(v4 + 928) = 0;
  *(void *)(v4 + 1312) = 0;
  *(void *)(v4 + 1320) = 0;
  *(void *)(v4 + 1368) = 0;
  *(void *)(v4 + 1376) = 0;
  *(void *)(v4 + 936) = 0;
  *(void *)(v4 + 944) = 0;
  *(void *)(v4 + 1400) = 0;
  *(void *)(v4 + 1416) = 0;
  *(unsigned char *)(v4 + 2408) = 0;
  *(unsigned char *)(v4 + 2416) = 0;
  *(void *)(v4 + 1440) = 0;
  *(void *)(v4 + 952) = 0;
  *(void *)(v4 + 960) = 0;
  *(void *)(v4 + 1464) = 0;
  *(void *)(v4 + 1472) = 0;
  *(void *)(v4 + 1480) = 0;
  *(void *)(v4 + 1504) = 0;
  *(void *)(v4 + 968) = 0;
  *(void *)(v4 + 976) = 0;
  *(void *)(v4 + 1536) = 0;
  *(void *)(v4 + 1552) = 0;
  *(void *)(v4 + 1608) = 0;
  memset((void *)(v4 + 56), 0, 0x28uLL);
  *(void *)(v4 + 1616) = 0;
  *(void *)(v4 + 984) = 0;
  *(void *)(v4 + 992) = 0;
  *(void *)(v4 + 1000) = 0;
  *(void *)(v4 + 1008) = 0;
  *(void *)(v4 + 1624) = 0;
  *(void *)(v4 + 1632) = 0;
  *(void *)(v4 + 1728) = 0;
  *(void *)(v4 + 1096) = 0;
  *(void *)(v4 + 1104) = 0;
  *(void *)(v4 + 1744) = 0;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (scheduleDate: Date?, medID: String, count: Int));
  *(void *)(v4 + 1808) = v5;
  *(void *)(v4 + 1816) = *(void *)(v5 - 8);
  *(void *)(v4 + 1824) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String?, value: (scheduleDate: Date?, medID: String, count: Int))?);
  *(void *)(v4 + 1832) = swift_task_alloc();
  *(void *)(v4 + 1840) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  *(void *)(v4 + 1848) = v6;
  *(void *)(v4 + 1856) = *(void *)(v6 - 8);
  *(void *)(v4 + 1864) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (scheduleDate: Date?, medID: String, count: Int)?);
  *(void *)(v4 + 1872) = swift_task_alloc();
  *(void *)(v4 + 1880) = swift_task_alloc();
  *(void *)(v4 + 1888) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, String, Int)?);
  *(void *)(v4 + 1896) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  *(void *)(v4 + 1904) = swift_task_alloc();
  *(void *)(v4 + 1912) = swift_task_alloc();
  *(void *)(v4 + 1920) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DateInterval();
  *(void *)(v4 + 1928) = v7;
  uint64_t v10 = *(void *)(v7 - 8);
  *(void *)(v4 + 1936) = v10;
  *(void *)(v4 + 1944) = *(void *)(v10 + 64);
  *(void *)(v4 + 1952) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  *(void *)(v4 + 1960) = v8;
  *(void *)(v4 + 1968) = *(void *)(v8 - 8);
  *(void *)(v4 + 1976) = swift_task_alloc();
  *(void *)(v4 + 1984) = swift_task_alloc();
  *(void *)(v4 + 1992) = swift_task_alloc();
  *(void *)(v4 + 2000) = swift_task_alloc();
  *(void *)(v4 + 2008) = swift_task_alloc();
  *(void *)(v4 + 2016) = swift_task_alloc();
  *(void *)(v4 + 2024) = swift_task_alloc();
  *(void *)(v4 + 2032) = swift_task_alloc();
  *(void *)(v4 + 2040) = swift_task_alloc();
  *(void *)(v4 + 2048) = swift_task_alloc();
  *(void *)(v4 + 2056) = swift_task_alloc();
  *(void *)(v4 + 2064) = swift_task_alloc();
  *(void *)(v4 + 2072) = swift_task_alloc();
  *(void *)(v4 + 1136) = a1;
  *(unsigned char *)(v4 + 2400) = a2 & 1;
  *(void *)(v4 + 888) = a3;
  *(void *)(v4 + 896) = a4;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:), 0);
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  uint64_t v54 = v0;
  uint64_t v1 = *(void *)(v0 + 2072);
  uint64_t v41 = *(void *)(v0 + 1968);
  uint64_t v43 = *(void *)(v0 + 1960);
  *(void *)(v0 + 1128) = v0;
  uint64_t v42 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
  *(void *)(v0 + 2080) = v44;
  *(void *)(v0 + 2088) = (v41 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v44(v1, v42, v43);
  swift_endAccess();
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 1144) = 2;
  *(void *)(v0 + 2096) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 2104) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 2112) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t size = *(unsigned int *)(v0 + 2404);
  *(void *)(v0 + 2120) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v48 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v46))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v37 = createStorage<A>(capacity:type:)(0);
    uint64_t v38 = createStorage<A>(capacity:type:)(0);
    *(void *)(v40 + 1752) = buf;
    *(void *)(v40 + 1760) = v37;
    *(void *)(v40 + 1768) = v38;
    serialize(_:at:)(0, (unsigned char **)(v40 + 1752));
    serialize(_:at:)(0, (unsigned char **)(v40 + 1752));
    *(void *)(v40 + 1776) = v48;
    double v39 = (void *)swift_task_alloc();
    v39[2] = v40 + 1752;
    v39[3] = v40 + 1760;
    v39[4] = v40 + 1768;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, oslog, v46, "Got startTime, endTime.", buf, size);
    destroyStorage<A>(_:count:)(v37, 0, v35);
    destroyStorage<A>(_:count:)(v38, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(v40 + 2072);
  uint64_t v2 = *(void *)(v40 + 2064);
  uint64_t v20 = *(void *)(v40 + 1960);
  uint64_t v24 = *(void *)(v40 + 1952);
  uint64_t v25 = *(void *)(v40 + 1928);
  uint64_t v22 = *(void *)(v40 + 1784);
  uint64_t v16 = *(void *)(v40 + 1968);
  uint64_t v21 = *(void *)(v40 + 1936);

  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  *(void *)(v40 + 2128) = v18;
  *(void *)(v40 + 2136) = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v18(v17, v20);
  uint64_t v19 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v44(v2, v19, v20);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v24, v22, v25);
  unint64_t v23 = (*(unsigned __int8 *)(v21 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v27 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v21 + 32))(v27 + v23, v24, v25);
  log = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  *(void *)(v40 + 1152) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v26 = *(_DWORD *)(v40 + 2412);
  uint64_t v29 = swift_allocObject();
  *(unsigned char *)(v29 + 16) = 32;
  uint64_t v30 = swift_allocObject();
  *(unsigned char *)(v30 + 16) = 8;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
  *(void *)(v28 + 24) = v27;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v31 + 24) = v28;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v32 = v3;
  swift_retain();
  void *v32 = partial apply for closure #1 in OSLogArguments.append(_:);
  v32[1] = v29;
  swift_retain();
  v32[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v32[3] = v30;
  swift_retain();
  v32[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v32[5] = v31;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v34))
  {
    uint64_t v13 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v14 = createStorage<A>(capacity:type:)(0);
    uint64_t v15 = createStorage<A>(capacity:type:)(1);
    uint64_t v49 = v13;
    uint64_t v50 = v14;
    uint64_t v51 = v15;
    serialize(_:at:)(2, &v49);
    serialize(_:at:)(1, &v49);
    uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v53 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v52, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v51);
    uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v53 = v30;
    closure #1 in osLogInternal(_:log:type:)(&v52, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v51);
    uint64_t v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v53 = v31;
    closure #1 in osLogInternal(_:log:type:)(&v52, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v51);
    _os_log_impl(&dword_25DE00000, log, v34, "searching dateinterval: %s", v13, v26);
    destroyStorage<A>(_:count:)(v14, 0, v12);
    destroyStorage<A>(_:count:)(v15, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v13, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v10 = *(void *)(v40 + 2064);
  uint64_t v11 = *(void *)(v40 + 1960);

  v18(v10, v11);
  uint64_t v4 = swift_allocObject();
  *(void *)(v40 + 2144) = v4;
  *(void *)(v40 + 1160) = v4 + 16;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v40 + 2152) = v5;
  *uint64_t v5 = *(void *)(v40 + 1128);
  v5[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
  uint64_t v6 = *(void *)(v40 + 1800);
  uint64_t v7 = *(void *)(v40 + 1792);
  uint64_t v8 = *(void *)(v40 + 1784);
  return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v8, 0, v7, v6);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  char *v4;
  char *v5;
  uint64_t *v6;
  Swift::String v7;
  INObject *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  char *v27;
  char *v28;
  uint64_t (*v29)(char *);
  Class isa;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  id *v35;
  id v36;
  uint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *buf;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint32_t size;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  NSObject *oslog;
  os_log_type_t v71;
  id v72;
  id v73;
  id *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  uint64_t v1 = v0[283];
  uint64_t v2 = v0[282];
  v0[141] = v0;
  v0[129] = v2;
  v0[130] = v1;
  if (v0[130])
  {
    uint64_t v19 = *(void *)(v99 + 1040);
    *(void *)(v99 + 1016) = *(void *)(v99 + 1032);
    *(void *)(v99 + 1024) = v19;
  }
  else
  {
    *(Swift::String *)(v99 + 1016) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown Name", 0xCuLL, 1);
    outlined destroy of String.UTF8View();
  }
  uint64_t v73 = *(id *)(v99 + 2240);
  uint64_t v76 = *(void *)(v99 + 2216);
  uint64_t v74 = (id *)(*(void *)(v99 + 2232) + 16);
  uint64_t v72 = (id)MEMORY[0x2611C8860](*(void *)(v99 + 1016));
  swift_bridgeObjectRelease();
  objc_msgSend(v73, sel_setMedName_, v72);

  swift_beginAccess();
  uint64_t v75 = *v74;
  uint64_t v20 = *v74;
  id result = swift_endAccess();
  if (__OFSUB__(v76, 1))
  {
    __break(1u);
    return result;
  }
  uint64_t v53 = *(void *)(v99 + 2232);
  uint64_t v49 = *(void *)(v99 + 2216);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 2080);
  uint64_t v22 = *(void *)(v99 + 2016);
  uint64_t v47 = *(void *)(v99 + 1960);
  *(void *)(v99 + 1640) = v76 - 1;
  unint64_t v23 = String.init<A>(_:)();
  uint64_t v45 = (id)MEMORY[0x2611C8860](v23);
  swift_bridgeObjectRelease();
  objc_msgSend(v75, sel_setRemainingMedCount_, v45);

  os_log_type_t v46 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v48(v22, v46, v47);
  swift_endAccess();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v55 = swift_allocObject();
  *(void *)(v55 + 16) = v49;
  os_log_t oslog = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.debug.getter();
  *(void *)(v99 + 1648) = 42;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t size = *(_DWORD *)(v99 + 2452);
  uint64_t v57 = swift_allocObject();
  *(unsigned char *)(v57 + 16) = 32;
  uint32_t v58 = swift_allocObject();
  *(unsigned char *)(v58 + 16) = 8;
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = partial apply for implicit closure #9 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
  *(void *)(v51 + 24) = v53;
  uint64_t v59 = swift_allocObject();
  *(void *)(v59 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v59 + 24) = v51;
  uint64_t v60 = swift_allocObject();
  *(unsigned char *)(v60 + 16) = 32;
  uint64_t v61 = swift_allocObject();
  *(unsigned char *)(v61 + 16) = 8;
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = partial apply for implicit closure #10 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
  *(void *)(v52 + 24) = v53;
  uint64_t v62 = swift_allocObject();
  *(void *)(v62 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v62 + 24) = v52;
  uint64_t v63 = swift_allocObject();
  *(unsigned char *)(v63 + 16) = 32;
  uint64_t v64 = swift_allocObject();
  *(unsigned char *)(v64 + 16) = 8;
  uint64_t v54 = swift_allocObject();
  *(void *)(v54 + 16) = partial apply for implicit closure #11 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
  *(void *)(v54 + 24) = v53;
  uint64_t v65 = swift_allocObject();
  *(void *)(v65 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v65 + 24) = v54;
  uint64_t v66 = swift_allocObject();
  *(unsigned char *)(v66 + 16) = 0;
  uint64_t v67 = swift_allocObject();
  *(unsigned char *)(v67 + 16) = 8;
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = partial apply for implicit closure #12 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
  *(void *)(v56 + 24) = v55;
  uint64_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  *(void *)(v68 + 24) = v56;
  _allocateUninitializedArray<A>(_:)();
  BOOL v69 = v24;
  swift_retain();
  *BOOL v69 = partial apply for closure #1 in OSLogArguments.append(_:);
  v69[1] = v57;
  swift_retain();
  v69[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v69[3] = v58;
  swift_retain();
  v69[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v69[5] = v59;
  swift_retain();
  v69[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v69[7] = v60;
  swift_retain();
  v69[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v69[9] = v61;
  swift_retain();
  v69[10] = partial apply for closure #1 in OSLogArguments.append(_:);
  v69[11] = v62;
  swift_retain();
  v69[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v69[13] = v63;
  swift_retain();
  v69[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v69[15] = v64;
  swift_retain();
  v69[16] = partial apply for closure #1 in OSLogArguments.append(_:);
  v69[17] = v65;
  swift_retain();
  v69[18] = partial apply for closure #1 in OSLogArguments.append(_:);
  v69[19] = v66;
  swift_retain();
  v69[20] = partial apply for closure #1 in OSLogArguments.append(_:);
  v69[21] = v67;
  swift_retain();
  v69[22] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v69[23] = v68;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v71))
  {
    uint64_t v25 = *(void *)(v99 + 2200);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v43 = createStorage<A>(capacity:type:)(0);
    uint64_t v44 = createStorage<A>(capacity:type:)(3);
    *(void *)(v99 + 1664) = buf;
    *(void *)(v99 + 1672) = v43;
    *(void *)(v99 + 1680) = v44;
    serialize(_:at:)(2, (unsigned char **)(v99 + 1664));
    serialize(_:at:)(4, (unsigned char **)(v99 + 1664));
    *(void *)(v99 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v99 + 1056) = v57;
    id result = closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 1048), v99 + 1664, v99 + 1672, v99 + 1680);
    if (v25) {
      return result;
    }
    *(void *)(v99 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v99 + 1056) = v58;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 1048), v99 + 1664, v99 + 1672, v99 + 1680);
    *(void *)(v99 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v99 + 1056) = v59;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 1048), v99 + 1664, v99 + 1672, v99 + 1680);
    *(void *)(v99 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v99 + 1056) = v60;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 1048), v99 + 1664, v99 + 1672, v99 + 1680);
    *(void *)(v99 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v99 + 1056) = v61;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 1048), v99 + 1664, v99 + 1672, v99 + 1680);
    *(void *)(v99 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v99 + 1056) = v62;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 1048), v99 + 1664, v99 + 1672, v99 + 1680);
    *(void *)(v99 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v99 + 1056) = v63;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 1048), v99 + 1664, v99 + 1672, v99 + 1680);
    *(void *)(v99 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v99 + 1056) = v64;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 1048), v99 + 1664, v99 + 1672, v99 + 1680);
    *(void *)(v99 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v99 + 1056) = v65;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 1048), v99 + 1664, v99 + 1672, v99 + 1680);
    *(void *)(v99 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v99 + 1056) = v66;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 1048), v99 + 1664, v99 + 1672, v99 + 1680);
    *(void *)(v99 + 1048) = partial apply for closure #1 in OSLogArguments.append(_:);
    *(void *)(v99 + 1056) = v67;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 1048), v99 + 1664, v99 + 1672, v99 + 1680);
    *(void *)(v99 + 1048) = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    *(void *)(v99 + 1056) = v68;
    closure #1 in osLogInternal(_:log:type:)((uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 1048), v99 + 1664, v99 + 1672, v99 + 1680);
    _os_log_impl(&dword_25DE00000, oslog, v71, "Appending MatchedMedSchedule with scheduleID (%s), medName (%s), schedule (%s), and remainingMedCount (%ld)", buf, size);
    destroyStorage<A>(_:count:)(v43, 0, v41);
    destroyStorage<A>(_:count:)(v44, 3, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v40 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v40 = *(void *)(v99 + 2200);
  }
  os_log_type_t v34 = *(void (**)(uint64_t, uint64_t))(v99 + 2128);
  uint64_t v32 = *(void *)(v99 + 2016);
  uint64_t v33 = *(void *)(v99 + 1960);
  uint64_t v37 = *(void *)(v99 + 1904);
  uint64_t v35 = (id *)(*(void *)(v99 + 2232) + 16);

  v34(v32, v33);
  swift_beginAccess();
  double v36 = *v35;
  uint32_t v26 = *v35;
  swift_endAccess();
  *(void *)(v99 + 1656) = v36;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedSchedule]);
  Array.append(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of Date?(v37);
  swift_bridgeObjectRelease();
  *(void *)(v99 + 2200) = v40;
  double v39 = *(_OWORD **)(v99 + 1840);
  uint64_t v38 = *(_OWORD **)(v99 + 1832);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String? : (scheduleDate: Date?, medID: String, count: Int)].Iterator);
  Dictionary.Iterator.next()();
  outlined init with take of (key: String?, value: (scheduleDate: Date?, medID: String, count: Int))?(v38, v39);
  uint64_t v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String?, value: (scheduleDate: Date?, medID: String, count: Int)));
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(*(void *)(v84 - 8) + 48))(v39, 1) == 1)
  {
    outlined destroy of [String? : (scheduleDate: Date?, medID: String, count: Int)].Iterator();
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v31 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(104, 0);
    uint64_t v27 = v31;
    uint64_t v28 = v31;
    *(void *)(v99 + 1616) = v31;
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v31, sel_setMatchingSchedules_, isa);

    outlined destroy of [HKQuantityType]();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = *(uint64_t (**)(char *))(*(void *)(v99 + 1128) + 8);
    return v29(v31);
  }
  else
  {
    uint64_t v91 = *(void **)(v99 + 1904);
    uint64_t v3 = *(uint64_t **)(v99 + 1840);
    uint64_t v92 = *(char **)(v99 + 1824);
    char v90 = *(void *)(v99 + 1808);
    uint64_t v89 = *v3;
    uint64_t v98 = v3[1];
    *(void *)(v99 + 2208) = v98;
    uint64_t v4 = (char *)v3 + *(int *)(v84 + 48);
    uint64_t v5 = &v4[*(int *)(v90 + 48)];
    uint32_t v85 = *(void *)v5;
    uint64_t v87 = *((void *)v5 + 1);
    unint64_t v95 = *(void *)&v4[*(int *)(v90 + 64)];
    *(void *)(v99 + 2216) = v95;
    os_log_type_t v86 = &v92[*(int *)(v90 + 48)];
    uint64_t v88 = *(int *)(v90 + 64);
    outlined init with take of Date?(v4, v92);
    *(void *)os_log_type_t v86 = v85;
    *((void *)v86 + 1) = v87;
    *(void *)&v92[v88] = v95;
    *(void *)(v99 + 984) = v89;
    *(void *)(v99 + 992) = v98;
    uint64_t v6 = (uint64_t *)&v92[*(int *)(v90 + 48)];
    uint64_t v93 = *v6;
    uint64_t v94 = v6[1];
    *(void *)(v99 + 2224) = v94;
    outlined init with take of Date?(v92, v91);
    *(void *)(v99 + 1000) = v93;
    *(void *)(v99 + 1008) = v94;
    *(void *)(v99 + 1624) = v95;
    uint64_t v96 = swift_allocObject();
    *(void *)(v99 + 2232) = v96;
    *(void *)(v99 + 1632) = v96 + 16;
    uint64_t v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Match", 5uLL, 1);
    INObject.__allocating_init(identifier:display:)(v8, (Swift::String_optional)0, v7);
    *(void *)(v96 + 16) = v9;
    swift_beginAccess();
    id v97 = *(id *)(v96 + 16);
    uint64_t v10 = v97;
    swift_endAccess();
    swift_bridgeObjectRetain();
    if (v98)
    {
      uint64_t v82 = MEMORY[0x2611C8860](v89);
      swift_bridgeObjectRelease();
      uint64_t v83 = (void *)v82;
    }
    else
    {
      uint64_t v83 = 0;
    }
    uint64_t v80 = *(void *)(v99 + 1904);
    objc_msgSend(v97, sel_setScheduleID_);

    swift_beginAccess();
    uint64_t v79 = *(id *)(v96 + 16);
    uint64_t v11 = v79;
    swift_endAccess();
    uint32_t v81 = getFormattedTimeString(time:)(v80);
    if (v12)
    {
      uint64_t v77 = MEMORY[0x2611C8860](v81);
      swift_bridgeObjectRelease();
      uint64_t v78 = (void *)v77;
    }
    else
    {
      uint64_t v78 = 0;
    }
    objc_msgSend(v79, sel_setSchedule_);

    swift_beginAccess();
    uint64_t v13 = *(void **)(v96 + 16);
    *(void *)(v99 + 2240) = v13;
    uint64_t v14 = v13;
    swift_endAccess();
    swift_bridgeObjectRetain();
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v99 + 2248) = v15;
    *uint64_t v15 = *(void *)(v99 + 1128);
    v15[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
    uint64_t v16 = *(void *)(v99 + 1800);
    uint64_t v17 = *(void *)(v99 + 1792);
    return SpecificMedicationsPersistor.displayNameFor(identifier:)(v93, v94, v17, v16);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 1128) = v0;
  outlined destroy of [HKQuantityType]();
  swift_release();
  swift_release();
  uint64_t v3 = *(void *)(v0 + 2288);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 1128) + 8);
  return v1(v3);
}

{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v6;
  char *v7;
  uint64_t (*v8)(char *);
  Class isa;
  char *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v12 = (id)v0[290];
  uint64_t v13 = (id)v0[288];
  v0[141] = v0;
  v0[185] = v12;
  uint64_t v1 = v12;
  v0[186] = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  IndexingIterator.next()();
  uint64_t v14 = v0[182];
  v0[288] = v14;
  if (v14)
  {
    *(void *)(v11 + 1472) = v14;
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v11 + 2312) = v2;
    *uint64_t v2 = *(void *)(v11 + 1128);
    v2[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
    uint64_t v3 = *(void *)(v11 + 1800);
    uint64_t v4 = *(void *)(v11 + 1792);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v14, 1, v4, v3);
  }
  else
  {
    outlined destroy of [HKQuantityType]();
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v10 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(110, 0);
    uint64_t v6 = v10;
    uint64_t v7 = v10;
    *(void *)(v11 + 1464) = v10;
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(char *))(*(void *)(v11 + 1128) + 8);
    return v8(v10);
  }
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 1128) = v0;
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v3 = *(void *)(v0 + 2352);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 1128) + 8);
  return v1(v3);
}

{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t);
  Class isa;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;

  uint64_t v11 = (id)v0[299];
  uint64_t v12 = (id)v0[297];
  v0[141] = v0;
  v0[165] = v11;
  uint64_t v1 = v11;
  v0[166] = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
  Array.append(_:)();

  IndexingIterator.next()();
  uint64_t v13 = v0[163];
  v0[297] = v13;
  if (v13)
  {
    *(void *)(v10 + 1312) = v13;
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v10 + 2384) = v2;
    *uint64_t v2 = *(void *)(v10 + 1128);
    v2[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
    uint64_t v3 = *(void *)(v10 + 1800);
    uint64_t v4 = *(void *)(v10 + 1792);
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v13, 1, v4, v3);
  }
  else
  {
    uint64_t v8 = *(id *)(v10 + 2360);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    swift_release();
    swift_release();
    uint64_t v9 = *(void *)(v10 + 2360);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(uint64_t))(*(void *)(v10 + 1128) + 8);
    return v6(v9);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t (*v3)(char *);
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  id v8;
  char *v9;
  uint64_t v10;
  uint8_t *buf;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v21;
  NSObject *oslog;
  uint64_t v23;
  uint64_t v24;

  uint64_t v16 = *(id *)(v0 + 2168);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2080);
  uint64_t v1 = *(void *)(v0 + 1976);
  uint64_t v18 = *(void *)(v0 + 1960);
  *(void *)(v0 + 1128) = v0;
  swift_deallocUninitializedObject();
  uint64_t v2 = v16;
  *(void *)(v0 + 1168) = v16;
  uint64_t v17 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v19(v1, v17, v18);
  swift_endAccess();
  os_log_t oslog = Logger.logObject.getter();
  uint64_t v21 = static os_log_type_t.error.getter();
  *(void *)(v0 + 1176) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t size = *(_DWORD *)(v0 + 2420);
  unint64_t v23 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v21))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    uint64_t v13 = createStorage<A>(capacity:type:)(0);
    *(void *)(v15 + 1184) = buf;
    *(void *)(v15 + 1192) = v12;
    *(void *)(v15 + 1200) = v13;
    serialize(_:at:)(0, (unsigned char **)(v15 + 1184));
    serialize(_:at:)(0, (unsigned char **)(v15 + 1184));
    *(void *)(v15 + 1208) = v23;
    uint64_t v14 = (void *)swift_task_alloc();
    void v14[2] = v15 + 1184;
    v14[3] = v15 + 1192;
    v14[4] = v15 + 1200;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, oslog, v21, "Failed fetching dose events for specified timeframe.", buf, size);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = *(id *)(v15 + 2168);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v15 + 2128);
  uint64_t v5 = *(void *)(v15 + 1976);
  uint64_t v6 = *(void *)(v15 + 1960);

  v7(v5, v6);
  type metadata accessor for LogSpecificMedicationsIntentResponse();
  uint64_t v9 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(char *))(*(void *)(v15 + 1128) + 8);
  return v3(v9);
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[141] = *v2;
  v5[270] = a1;
  v5[271] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
  }
  else
  {
    uint64_t v3 = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t *v30;
  char *v31;
  char *v32;
  uint64_t *v33;
  Swift::String v34;
  INObject *v35;
  uint64_t v36;
  id v37;
  id v38;
  uint64_t v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  void *v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  id v65;
  id v66;
  void *v67;
  char v68;
  uint64_t v69;
  char *v70;
  char *v71;
  void *v72;
  uint64_t (*v73)(char *);
  Class v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  char *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t, uint64_t);
  uint32_t v91;
  os_log_type_t v92;
  NSObject *v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  id v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  Class v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(uint64_t, uint64_t);
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  Swift::OpaquePointer v114;
  void **v115;
  char v116;
  Swift::OpaquePointer v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t, uint64_t);
  Swift::Bool v121;
  Swift::Bool v122;
  uint32_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  NSObject *v135;
  os_log_type_t v136;
  uint64_t v137;
  char v138;
  Swift::OpaquePointer v139;
  Swift::Bool v140;
  uint64_t v141;
  Swift::OpaquePointer v142;
  Swift::Bool v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t, uint64_t);
  id v147;
  uint64_t v148;
  uint64_t v149;
  uint8_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void (*v155)(uint64_t, uint64_t, uint64_t);
  char v156;
  uint32_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  NSObject *v166;
  os_log_type_t v167;
  id v168;
  id v169;
  uint64_t v170;
  uint64_t v171;
  void (*v172)(uint64_t, uint64_t);
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint8_t *v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(uint64_t, uint64_t, uint64_t);
  uint32_t v184;
  os_log_type_t v185;
  NSObject *v186;
  uint64_t v187;
  uint64_t v188;
  Swift::OpaquePointer doseEvents;
  Swift::Bool v190;
  Class v191;
  char *v192;
  uint64_t v193;
  void *v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  void *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  id v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void (*v216)(uint64_t, uint64_t);
  _OWORD *v217;
  _OWORD *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint8_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void (*v227)(uint64_t, uint64_t, uint64_t);
  uint32_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  void *v233;
  NSObject *v234;
  os_log_type_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  void (*v241)(uint64_t, uint64_t);
  char *v242;
  char *v243;
  uint64_t v244;
  uint8_t *v245;
  uint64_t v246;
  uint64_t v247;
  void *v248;
  uint64_t v249;
  uint64_t v250;
  void (*v251)(uint64_t, uint64_t, uint64_t);
  uint32_t v252;
  os_log_type_t v253;
  NSObject *v254;
  uint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  char v258;
  id v259;
  uint64_t v260;
  uint64_t v261;
  void *v262;
  id v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  id v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  id v276;
  uint64_t v277;
  uint64_t v278;
  char *v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  id v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  void (*v309)(uint64_t, uint64_t);
  id v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint8_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void (*v319)(uint64_t, uint64_t, uint64_t);
  uint32_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  void *v336;
  NSObject *v337;
  os_log_type_t v338;
  void *v339;
  uint64_t v340;
  uint64_t v341;
  void (*v342)(uint64_t, uint64_t);
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint8_t *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  void (*v357)(uint64_t, uint64_t);
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  void (*v362)(uint64_t, uint64_t, uint64_t);
  uint32_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  void *v369;
  NSObject *log;
  os_log_type_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint8_t *buf;
  uint64_t v376;
  uint64_t v377;
  void *v378;
  uint64_t v379;
  uint64_t v380;
  void (*v381)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  void *v388;
  NSObject *oslog;
  os_log_type_t v390;
  Class v391;
  uint8_t *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t (*v395)(uint64_t, uint64_t, uint64_t);
  uint64_t v396;
  uint8_t *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t (*v400)(uint64_t, uint64_t, uint64_t);
  uint64_t v401;
  Class isa;
  uint8_t *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t (*v406)(uint64_t, uint64_t, uint64_t);
  uint64_t v407;
  uint8_t *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t (*v411)(uint64_t, uint64_t, uint64_t);
  uint64_t v412;
  uint8_t *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t (*v416)(uint64_t, uint64_t, uint64_t);
  uint64_t v417;
  uint8_t *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t (*v421)(uint64_t, uint64_t, uint64_t);
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;

  v423 = v1;
  MEMORY[0x270FA5388](a1);
  v378 = (void *)v1;
  uint64_t v2 = *(void *)(v1 + 2160);
  v383 = *(void *)(v1 + 2144);
  uint64_t v381 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
  uint64_t v3 = *(void *)(v1 + 2056);
  v380 = *(void *)(v1 + 1960);
  *(void *)(v1 + 1128) = v1;
  *(void *)(v383 + 16) = v2;
  v379 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v381(v3, v379, v380);
  swift_endAccess();
  swift_retain();
  os_log_t oslog = Logger.logObject.getter();
  uint64_t v390 = static os_log_type_t.debug.getter();
  *(void *)(v1 + 1216) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t size = *(_DWORD *)(v1 + 2424);
  uint64_t v385 = swift_allocObject();
  *(unsigned char *)(v385 + 16) = 0;
  uint64_t v386 = swift_allocObject();
  *(unsigned char *)(v386 + 16) = 8;
  uint64_t v384 = swift_allocObject();
  *(void *)(v384 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
  *(void *)(v384 + 24) = v383;
  unint64_t v387 = swift_allocObject();
  *(void *)(v387 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  *(void *)(v387 + 24) = v384;
  _allocateUninitializedArray<A>(_:)();
  v388 = v4;
  swift_retain();
  char *v388 = partial apply for closure #1 in OSLogArguments.append(_:);
  v388[1] = v385;
  swift_retain();
  v388[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v388[3] = v386;
  swift_retain();
  v388[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v388[5] = v387;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v390))
  {
    uint64_t v5 = *(void *)(v1 + 2168);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v374 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v376 = createStorage<A>(capacity:type:)(0);
    v377 = createStorage<A>(capacity:type:)(0);
    unint64_t v418 = buf;
    v419 = v376;
    unint64_t v420 = v377;
    serialize(_:at:)(0, &v418);
    serialize(_:at:)(1, &v418);
    v421 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    unint64_t v422 = v385;
    id result = closure #1 in osLogInternal(_:log:type:)(&v421, (uint64_t)&v418, (uint64_t)&v419, (uint64_t)&v420);
    if (v5) {
      return result;
    }
    v421 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    unint64_t v422 = v386;
    closure #1 in osLogInternal(_:log:type:)(&v421, (uint64_t)&v418, (uint64_t)&v419, (uint64_t)&v420);
    v421 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
    unint64_t v422 = v387;
    closure #1 in osLogInternal(_:log:type:)(&v421, (uint64_t)&v418, (uint64_t)&v419, (uint64_t)&v420);
    _os_log_impl(&dword_25DE00000, oslog, v390, "fetched %ld doseEvents", buf, size);
    destroyStorage<A>(_:count:)(v376, 0, v374);
    destroyStorage<A>(_:count:)(v377, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    v373 = 0;
    v372 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    v373 = *(void *)(v1 + 2168);
  }
  v364 = *(void *)(v1 + 2144);
  v357 = *(void (**)(uint64_t, uint64_t))(v1 + 2128);
  v362 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
  uint64_t v356 = *(void *)(v1 + 2056);
  uint64_t v7 = *(void *)(v1 + 2048);
  v361 = *(void *)(v1 + 1960);

  v357(v356, v361);
  swift_beginAccess();
  v358 = *(void *)(v364 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  v359 = filterUniqueDoseEvents(doseEvents:)(v358);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v364 + 16) = v359;
  swift_bridgeObjectRelease();
  swift_endAccess();
  v360 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v362(v7, v360, v361);
  swift_endAccess();
  swift_retain();
  log = Logger.logObject.getter();
  v371 = static os_log_type_t.debug.getter();
  *(void *)(v1 + 1224) = 12;
  UnsignedInteger<>.init<A>(_:)();
  v363 = *(_DWORD *)(v1 + 2428);
  v366 = swift_allocObject();
  *(unsigned char *)(v366 + 16) = 0;
  v367 = swift_allocObject();
  *(unsigned char *)(v367 + 16) = 8;
  v365 = swift_allocObject();
  *(void *)(v365 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:);
  *(void *)(v365 + 24) = v364;
  v368 = swift_allocObject();
  *(void *)(v368 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  *(void *)(v368 + 24) = v365;
  _allocateUninitializedArray<A>(_:)();
  v369 = v8;
  swift_retain();
  *v369 = partial apply for closure #1 in OSLogArguments.append(_:);
  v369[1] = v366;
  swift_retain();
  v369[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v369[3] = v367;
  swift_retain();
  v369[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v369[5] = v368;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v371))
  {
    v353 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    unsigned int v352 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v354 = createStorage<A>(capacity:type:)(0);
    v355 = createStorage<A>(capacity:type:)(0);
    v413 = v353;
    unint64_t v414 = v354;
    v415 = v355;
    serialize(_:at:)(0, &v413);
    serialize(_:at:)(1, &v413);
    uint64_t v416 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v417 = v366;
    id result = closure #1 in osLogInternal(_:log:type:)(&v416, (uint64_t)&v413, (uint64_t)&v414, (uint64_t)&v415);
    if (v373) {
      return result;
    }
    uint64_t v416 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    v417 = v367;
    closure #1 in osLogInternal(_:log:type:)(&v416, (uint64_t)&v413, (uint64_t)&v414, (uint64_t)&v415);
    uint64_t v416 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v417 = v368;
    closure #1 in osLogInternal(_:log:type:)(&v416, (uint64_t)&v413, (uint64_t)&v414, (uint64_t)&v415);
    _os_log_impl(&dword_25DE00000, log, v371, "filtered to %ld unique doseEvents", v353, v363);
    destroyStorage<A>(_:count:)(v354, 0, v352);
    destroyStorage<A>(_:count:)(v355, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v353, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v350 = 0;
    uint64_t v351 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v350 = v373;
    uint64_t v351 = v372;
  }
  uint64_t v342 = *(void (**)(uint64_t, uint64_t))(v1 + 2128);
  uint64_t v340 = *(void *)(v1 + 2048);
  uint64_t v341 = *(void *)(v1 + 1960);
  uint64_t v346 = (uint64_t *)(*(void *)(v1 + 2144) + 16);

  v342(v340, v341);
  uint64_t v345 = swift_allocObject();
  *(void *)(v1 + 2176) = v345;
  *(void *)(v1 + 1232) = v345 + 16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String?, (scheduleDate: Date?, medID: String, count: Int)));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v343 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  uint64_t v344 = lazy protocol witness table accessor for type String? and conformance <A> A?();
  *(void *)(v345 + 16) = Dictionary.init(dictionaryLiteral:)();
  swift_beginAccess();
  uint64_t v347 = *v346;
  swift_bridgeObjectRetain();
  swift_endAccess();
  *(void *)(v1 + 1240) = v347;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection<>.makeIterator()();
  uint64_t v348 = v350;
  v349 = v351;
  while (1)
  {
    *(void *)(v1 + 2184) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    v339 = *(void **)(v1 + 1248);
    if (!v339) {
      break;
    }
    uint64_t v319 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
    uint64_t v9 = *(void *)(v1 + 2040);
    int v318 = *(void *)(v1 + 1960);
    *(void *)(v1 + 1728) = v339;
    v317 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v319(v9, v317, v318);
    swift_endAccess();
    uint64_t v10 = v339;
    uint64_t v321 = swift_allocObject();
    *(void *)(v321 + 16) = v339;
    uint64_t v11 = v339;
    uint64_t v323 = swift_allocObject();
    *(void *)(v323 + 16) = v339;
    uint64_t v12 = v339;
    id v325 = swift_allocObject();
    *(void *)(v325 + 16) = v339;
    uint64_t v337 = Logger.logObject.getter();
    v338 = static os_log_type_t.debug.getter();
    *(void *)(v1 + 1736) = 32;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v320 = *(_DWORD *)(v1 + 2460);
    v327 = swift_allocObject();
    *(unsigned char *)(v327 + 16) = 32;
    uint64_t v328 = swift_allocObject();
    *(unsigned char *)(v328 + 16) = 8;
    v322 = swift_allocObject();
    *(void *)(v322 + 16) = partial apply for implicit closure #4 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
    *(void *)(v322 + 24) = v321;
    v329 = swift_allocObject();
    *(void *)(v329 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v329 + 24) = v322;
    v330 = swift_allocObject();
    *(unsigned char *)(v330 + 16) = 32;
    v331 = swift_allocObject();
    *(unsigned char *)(v331 + 16) = 8;
    v324 = swift_allocObject();
    *(void *)(v324 + 16) = partial apply for implicit closure #5 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
    *(void *)(v324 + 24) = v323;
    v332 = swift_allocObject();
    *(void *)(v332 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v332 + 24) = v324;
    v333 = swift_allocObject();
    *(unsigned char *)(v333 + 16) = 32;
    uint64_t v334 = swift_allocObject();
    *(unsigned char *)(v334 + 16) = 8;
    v326 = swift_allocObject();
    *(void *)(v326 + 16) = partial apply for implicit closure #7 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:);
    *(void *)(v326 + 24) = v325;
    v335 = swift_allocObject();
    *(void *)(v335 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v335 + 24) = v326;
    _allocateUninitializedArray<A>(_:)();
    id v336 = v13;
    swift_retain();
    *id v336 = partial apply for closure #1 in OSLogArguments.append(_:);
    v336[1] = v327;
    swift_retain();
    v336[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v336[3] = v328;
    swift_retain();
    v336[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v336[5] = v329;
    swift_retain();
    v336[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v336[7] = v330;
    swift_retain();
    v336[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v336[9] = v331;
    swift_retain();
    v336[10] = partial apply for closure #1 in OSLogArguments.append(_:);
    v336[11] = v332;
    swift_retain();
    v336[12] = partial apply for closure #1 in OSLogArguments.append(_:);
    v336[13] = v333;
    swift_retain();
    v336[14] = partial apply for closure #1 in OSLogArguments.append(_:);
    v336[15] = v334;
    swift_retain();
    v336[16] = partial apply for closure #1 in OSLogArguments.append(_:);
    v336[17] = v335;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v337, v338))
    {
      uint64_t v314 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v313 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v315 = createStorage<A>(capacity:type:)(0);
      v316 = createStorage<A>(capacity:type:)(3);
      v408 = v314;
      uint64_t v409 = v315;
      uint64_t v410 = v316;
      serialize(_:at:)(2, &v408);
      serialize(_:at:)(3, &v408);
      uint64_t v411 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      unint64_t v412 = v327;
      id result = closure #1 in osLogInternal(_:log:type:)(&v411, (uint64_t)&v408, (uint64_t)&v409, (uint64_t)&v410);
      if (v348) {
        return result;
      }
      uint64_t v411 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      unint64_t v412 = v328;
      closure #1 in osLogInternal(_:log:type:)(&v411, (uint64_t)&v408, (uint64_t)&v409, (uint64_t)&v410);
      uint64_t v411 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      unint64_t v412 = v329;
      closure #1 in osLogInternal(_:log:type:)(&v411, (uint64_t)&v408, (uint64_t)&v409, (uint64_t)&v410);
      uint64_t v411 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      unint64_t v412 = v330;
      closure #1 in osLogInternal(_:log:type:)(&v411, (uint64_t)&v408, (uint64_t)&v409, (uint64_t)&v410);
      uint64_t v411 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      unint64_t v412 = v331;
      closure #1 in osLogInternal(_:log:type:)(&v411, (uint64_t)&v408, (uint64_t)&v409, (uint64_t)&v410);
      uint64_t v411 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      unint64_t v412 = v332;
      closure #1 in osLogInternal(_:log:type:)(&v411, (uint64_t)&v408, (uint64_t)&v409, (uint64_t)&v410);
      uint64_t v411 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      unint64_t v412 = v333;
      closure #1 in osLogInternal(_:log:type:)(&v411, (uint64_t)&v408, (uint64_t)&v409, (uint64_t)&v410);
      uint64_t v411 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      unint64_t v412 = v334;
      closure #1 in osLogInternal(_:log:type:)(&v411, (uint64_t)&v408, (uint64_t)&v409, (uint64_t)&v410);
      uint64_t v411 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      unint64_t v412 = v335;
      closure #1 in osLogInternal(_:log:type:)(&v411, (uint64_t)&v408, (uint64_t)&v409, (uint64_t)&v410);
      _os_log_impl(&dword_25DE00000, v337, v338, "got a dose event with scheduleID: %s, medID: %s, status: %s", v314, v320);
      destroyStorage<A>(_:count:)(v315, 0, v313);
      destroyStorage<A>(_:count:)(v316, 3, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v314, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v311 = 0;
      uint64_t v312 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v311 = v348;
      uint64_t v312 = v349;
    }
    uint64_t v309 = *(void (**)(uint64_t, uint64_t))(v1 + 2128);
    uint64_t v307 = *(void *)(v1 + 2040);
    uint64_t v308 = *(void *)(v1 + 1960);

    v309(v307, v308);
    uint64_t v310 = objc_msgSend(v339, sel_scheduleItemIdentifier);
    if (v310)
    {
      uint64_t v303 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      int v304 = v14;

      uint64_t v305 = v303;
      uint64_t v306 = v304;
    }
    else
    {
      uint64_t v305 = 0;
      uint64_t v306 = 0;
    }
    uint64_t v302 = *(void *)(v1 + 1888);
    uint64_t v301 = *(void *)(v1 + 1808);
    uint32_t v300 = *(void *)(v1 + 1816);
    *(void *)(v1 + 1064) = v305;
    *(void *)(v1 + 1072) = v306;
    MEMORY[0x2611C8800]();
    outlined destroy of String.UTF8View();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v300 + 48))(v302, 1, v301) == 1)
    {
      int v277 = *(void *)(v1 + 1896);
      outlined destroy of (scheduleDate: Date?, medID: String, count: Int)?(*(void *)(v1 + 1888));
      unint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, String, Int));
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v277, 1);
    }
    else
    {
      uint64_t v299 = *(char **)(v1 + 1896);
      char v292 = *(char **)(v1 + 1888);
      uint64_t v15 = *(void *)(v1 + 1808);
      uint64_t v16 = &v292[*(int *)(v15 + 48)];
      uint64_t v293 = *(void *)v16;
      uint64_t v295 = *((void *)v16 + 1);
      uint64_t v297 = *(void *)&v292[*(int *)(v15 + 64)];
      uint64_t v298 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, String, Int));
      v294 = &v299[*(int *)(v298 + 48)];
      uint64_t v296 = *(int *)(v298 + 64);
      outlined init with take of Date?(v292, v299);
      *(void *)v294 = v293;
      *((void *)v294 + 1) = v295;
      *(void *)&v299[v296] = v297;
      (*(void (**)(void))(*(void *)(v298 - 8) + 56))();
    }
    uint64_t v290 = *(void *)(v1 + 1896);
    uint64_t v291 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, String, Int));
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(v291 - 8) + 48))(v290, 1) == 1)
    {
      outlined destroy of (Date?, String, Int)?(*(void *)(v1 + 1896));
      uint64_t v276 = objc_msgSend(v339, sel_scheduleItemIdentifier);
      if (v276)
      {
        uint64_t v272 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v273 = v24;

        uint64_t v274 = v272;
        uint64_t v275 = v273;
      }
      else
      {
        uint64_t v274 = 0;
        uint64_t v275 = 0;
      }
      uint64_t v268 = *(void *)(v1 + 1872);
      uint64_t v25 = *(void *)(v1 + 1808);
      uint64_t v269 = (uint64_t *)(v268 + *(int *)(v25 + 48));
      uint64_t v270 = *(int *)(v25 + 64);
      uint64_t v271 = objc_msgSend(v339, sel_scheduledDate);
      if (v271)
      {
        uint64_t v267 = *(void *)(v1 + 1912);
        uint64_t v265 = *(void *)(v1 + 1864);
        uint64_t v266 = *(void *)(v1 + 1848);
        uint64_t v264 = *(void *)(v1 + 1856);
        static Date._unconditionallyBridgeFromObjectiveC(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v264 + 32))(v267, v265, v266);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v264 + 56))(v267, 0, 1, v266);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v1 + 1856) + 56))(*(void *)(v1 + 1912), 1, 1, *(void *)(v1 + 1848));
      }
      uint64_t v262 = *(void **)(v1 + 1872);
      uint64_t v261 = *(void *)(v1 + 1808);
      uint64_t v260 = *(void *)(v1 + 1816);
      outlined init with take of Date?(*(const void **)(v1 + 1912), v262);
      char v259 = objc_msgSend(v339, sel_medicationIdentifier);
      uint64_t v263 = objc_msgSend(v259, sel_underlyingIdentifier);
      *uint64_t v269 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v269[1] = v26;

      *(void *)(v268 + v270) = 1;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v260 + 56))(v262, 0, 1, v261);
      *(void *)(v1 + 1080) = v274;
      *(void *)(v1 + 1088) = v275;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String? : (scheduleDate: Date?, medID: String, count: Int)]);
      Dictionary.subscript.setter();

      uint64_t v348 = v311;
      v349 = v312;
    }
    else
    {
      uint64_t v17 = *(char **)(v1 + 1896);
      uint64_t v18 = &v17[*(int *)(v291 + 48)];
      uint64_t v286 = *(void *)v18;
      uint64_t v287 = *((void *)v18 + 1);
      uint64_t v288 = *(void *)&v17[*(int *)(v291 + 64)];
      outlined init with take of Date?(v17, *(void **)(v1 + 1920));
      *(void *)(v1 + 1096) = v286;
      *(void *)(v1 + 1104) = v287;
      *(void *)(v1 + 1744) = v288;
      v289 = objc_msgSend(v339, sel_scheduleItemIdentifier);
      if (v289)
      {
        uint64_t v282 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v283 = v19;

        uint64_t v284 = v282;
        uint64_t v285 = v283;
      }
      else
      {
        uint64_t v284 = 0;
        uint64_t v285 = 0;
      }
      uint64_t v279 = *(char **)(v1 + 1880);
      uint64_t v20 = *(void *)(v1 + 1808);
      uint64_t v281 = &v279[*(int *)(v20 + 48)];
      uint64_t v280 = *(int *)(v20 + 64);
      outlined init with copy of Date?(*(const void **)(v1 + 1920), v279);
      id result = swift_bridgeObjectRetain();
      *(void *)uint64_t v281 = v286;
      *((void *)v281 + 1) = v287;
      if (__OFADD__(v288, 1))
      {
        __break(1u);
        return result;
      }
      uint64_t v278 = *(void *)(v1 + 1920);
      uint64_t v22 = *(void *)(v1 + 1816);
      *(void *)&v279[v280] = v288 + 1;
      (*(void (**)(void))(v22 + 56))();
      *(void *)(v1 + 1112) = v284;
      *(void *)(v1 + 1120) = v285;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String? : (scheduleDate: Date?, medID: String, count: Int)]);
      Dictionary.subscript.setter();
      swift_bridgeObjectRelease();
      outlined destroy of Date?(v278);

      uint64_t v348 = v311;
      v349 = v312;
    }
  }
  uint64_t v256 = (uint64_t *)(*(void *)(v1 + 2144) + 16);
  outlined destroy of [HKQuantityType]();
  swift_beginAccess();
  uint64_t v257 = *v256;
  swift_bridgeObjectRetain();
  swift_endAccess();
  swift_bridgeObjectRetain();
  *(void *)(v1 + 1256) = v257;
  uint64_t v258 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  if (v258)
  {
    uint64_t v251 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
    uint64_t v27 = *(void *)(v1 + 2032);
    uint64_t v250 = *(void *)(v1 + 1960);
    uint64_t v249 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v251(v27, v249, v250);
    swift_endAccess();
    uint64_t v254 = Logger.logObject.getter();
    uint64_t v253 = static os_log_type_t.debug.getter();
    *(void *)(v1 + 1688) = 2;
    UnsignedInteger<>.init<A>(_:)();
    unsigned int v252 = *(_DWORD *)(v1 + 2456);
    uint64_t v255 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v254, v253))
    {
      NSMeasurement v245 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      NSMeasurement v244 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      os_log_type_t v246 = createStorage<A>(capacity:type:)(0);
      uint64_t v247 = createStorage<A>(capacity:type:)(0);
      *(void *)(v1 + 1696) = v245;
      *(void *)(v1 + 1704) = v246;
      *(void *)(v1 + 1712) = v247;
      serialize(_:at:)(0, (unsigned char **)(v1 + 1696));
      serialize(_:at:)(0, (unsigned char **)(v1 + 1696));
      *(void *)(v1 + 1720) = v255;
      uint64_t v248 = (void *)swift_task_alloc();
      v248[2] = v1 + 1696;
      v248[3] = v1 + 1704;
      v248[4] = v1 + 1712;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      id result = Sequence.forEach(_:)();
      if (v348) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v254, v253, "Time specified, but no potential time match found. Returning .noMatchFound.", v245, v252);
      destroyStorage<A>(_:count:)(v246, 0, v244);
      destroyStorage<A>(_:count:)(v247, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v245, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v241 = *(void (**)(uint64_t, uint64_t))(v1 + 2128);
    uint64_t v239 = *(void *)(v1 + 2032);
    uint64_t v240 = *(void *)(v1 + 1960);

    v241(v239, v240);
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v242 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
    swift_release();
    swift_release();
    uint64_t v243 = v242;
    goto LABEL_116;
  }
  uint64_t v236 = *(void *)(v1 + 1808);
  uint64_t v237 = *(void *)(v345 + 16);
  swift_bridgeObjectRetain();
  uint64_t v238 = MEMORY[0x2611C87D0](v237, v343, v236, v344);
  swift_bridgeObjectRelease();
  if (v238 <= 1)
  {
    uint64_t v188 = *(void *)(v1 + 2144);
    swift_beginAccess();
    doseEvents._rawValue = *(void **)(v188 + 16);
    swift_bridgeObjectRetain();
    swift_endAccess();
    uint64_t v190 = allDoseEventsAreUnlogged(doseEvents:)(doseEvents);
    swift_bridgeObjectRelease();
    if (v190)
    {
      uint64_t v183 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
      uint64_t v47 = *(void *)(v1 + 2008);
      uint64_t v182 = *(void *)(v1 + 1960);
      uint64_t v181 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v183(v47, v181, v182);
      swift_endAccess();
      uint64_t v186 = Logger.logObject.getter();
      uint64_t v185 = static os_log_type_t.debug.getter();
      *(void *)(v1 + 1496) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v184 = *(_DWORD *)(v1 + 2440);
      uint64_t v187 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v186, v185))
      {
        uint64_t v177 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v178 = createStorage<A>(capacity:type:)(0);
        unsigned int v179 = createStorage<A>(capacity:type:)(0);
        *(void *)(v1 + 1568) = v177;
        *(void *)(v1 + 1576) = v178;
        *(void *)(v1 + 1584) = v179;
        serialize(_:at:)(0, (unsigned char **)(v1 + 1568));
        serialize(_:at:)(0, (unsigned char **)(v1 + 1568));
        *(void *)(v1 + 1592) = v187;
        uint64_t v180 = (void *)swift_task_alloc();
        v180[2] = v1 + 1568;
        v180[3] = v1 + 1576;
        v180[4] = v1 + 1584;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        id result = Sequence.forEach(_:)();
        if (v348) {
          return result;
        }
        swift_task_dealloc();
        _os_log_impl(&dword_25DE00000, v186, v185, "All dose events in group are unlogged, continuing to write", v177, v184);
        destroyStorage<A>(_:count:)(v178, 0, v176);
        destroyStorage<A>(_:count:)(v179, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v177, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
        uint64_t v175 = 0;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v175 = v348;
      }
      id v172 = *(void (**)(uint64_t, uint64_t))(v1 + 2128);
      uint64_t v170 = *(void *)(v1 + 2008);
      uint64_t v171 = *(void *)(v1 + 1960);
      uint64_t v173 = (uint64_t *)(*(void *)(v1 + 2144) + 16);

      v172(v170, v171);
      type metadata accessor for HKMedicationExposableDoseEvent();
      *(void *)(v1 + 1504) = _allocateUninitializedArray<A>(_:)();
      swift_beginAccess();
      uint64_t v174 = *v173;
      swift_bridgeObjectRetain();
      swift_endAccess();
      *(void *)(v1 + 1512) = v174;
      Collection<>.makeIterator()();
      while (1)
      {
        IndexingIterator.next()();
        uint64_t v169 = *(id *)(v1 + 1520);
        if (!v169) {
          break;
        }
        *(void *)(v1 + 1536) = v169;
        *(void *)(v1 + 1544) = objc_msgSend(v169, sel_scheduledDoseQuantity);
        if (*(void *)(v1 + 1544))
        {
          Class isa = *(Class *)(v1 + 1544);
        }
        else
        {
          type metadata accessor for NSNumber();
          Class isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
          outlined destroy of HealthKitPersistor((id *)(v1 + 1544));
        }
        uint64_t v168 = objc_msgSend(v169, sel_updateForNewDoseQuantity_);

        *(void *)(v1 + 1552) = v168;
        uint64_t v48 = v168;
        *(void *)(v1 + 1560) = v168;
        Array.append(_:)();
      }
      id v155 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
      uint64_t v49 = *(void *)(v1 + 2000);
      Class v154 = *(void *)(v1 + 1960);
      uint64_t v156 = *(unsigned char *)(v1 + 2401);
      outlined destroy of [HKQuantityType]();
      uint64_t v153 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v155(v49, v153, v154);
      swift_endAccess();
      uint64_t v158 = swift_allocObject();
      *(unsigned char *)(v158 + 16) = v156 & 1;
      uint64_t v166 = Logger.logObject.getter();
      uint64_t v167 = static os_log_type_t.debug.getter();
      *(void *)(v1 + 1528) = 8;
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v157 = *(_DWORD *)(v1 + 2444);
      uint64_t v162 = swift_allocObject();
      *(unsigned char *)(v162 + 16) = 0;
      int v163 = swift_allocObject();
      *(unsigned char *)(v163 + 16) = 4;
      uint64_t v159 = swift_allocObject();
      *(void *)(v159 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
      *(void *)(v159 + 24) = v158;
      uint64_t v160 = swift_allocObject();
      *(void *)(v160 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
      *(void *)(v160 + 24) = v159;
      uint64_t v161 = swift_allocObject();
      *(void *)(v161 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
      *(void *)(v161 + 24) = v160;
      uint64_t v164 = swift_allocObject();
      *(void *)(v164 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
      *(void *)(v164 + 24) = v161;
      _allocateUninitializedArray<A>(_:)();
      uint64_t v165 = v50;
      swift_retain();
      *uint64_t v165 = partial apply for closure #1 in OSLogArguments.append(_:);
      v165[1] = v162;
      swift_retain();
      v165[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v165[3] = v163;
      swift_retain();
      v165[4] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      v165[5] = v164;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v166, v167))
      {
        uint64_t v150 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v151 = createStorage<A>(capacity:type:)(0);
        uint64_t v152 = createStorage<A>(capacity:type:)(0);
        uint64_t v397 = v150;
        unint64_t v398 = v151;
        v399 = v152;
        serialize(_:at:)(0, &v397);
        serialize(_:at:)(1, &v397);
        unint64_t v400 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v401 = v162;
        id result = closure #1 in osLogInternal(_:log:type:)(&v400, (uint64_t)&v397, (uint64_t)&v398, (uint64_t)&v399);
        if (v175) {
          return result;
        }
        unint64_t v400 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v401 = v163;
        closure #1 in osLogInternal(_:log:type:)(&v400, (uint64_t)&v397, (uint64_t)&v398, (uint64_t)&v399);
        unint64_t v400 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
        v401 = v164;
        closure #1 in osLogInternal(_:log:type:)(&v400, (uint64_t)&v397, (uint64_t)&v398, (uint64_t)&v399);
        _os_log_impl(&dword_25DE00000, v166, v167, "Calling writeDoseEvent() for specified time with medStatus: %{BOOL}d", v150, v157);
        destroyStorage<A>(_:count:)(v151, 0, v149);
        destroyStorage<A>(_:count:)(v152, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v150, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v146 = *(void (**)(uint64_t, uint64_t))(v1 + 2128);
      uint64_t v144 = *(void *)(v1 + 2000);
      uint64_t v145 = *(void *)(v1 + 1960);
      uint64_t v147 = *(id *)(v1 + 1800);

      v146(v144, v145);
      uint64_t v51 = v147;
      uint64_t v148 = *(void *)(v1 + 1504);
      *(void *)(v1 + 2272) = v148;
      swift_bridgeObjectRetain();
      uint64_t v52 = (void *)swift_task_alloc();
      uint64_t v53 = v148;
      *(void *)(v1 + 2280) = v52;
      *uint64_t v52 = *(void *)(v1 + 1128);
      v52[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
      uint64_t v54 = *(void *)(v1 + 1800);
      uint64_t v55 = *(unsigned char *)(v1 + 2401);
      v425 = *(void *)(v1 + 1792);
      unint64_t v426 = v54;
      uint64_t v56 = v55 & 1;
      return SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(v54, v53, v56, 0, 0, 1, 0, 0);
    }
    uint64_t v141 = *(void *)(v1 + 2144);
    swift_beginAccess();
    v142._rawValue = *(void **)(v141 + 16);
    swift_bridgeObjectRetain();
    swift_endAccess();
    uint64_t v143 = allLoggedWithMixedStatus(doseEvents:)(v142);
    swift_bridgeObjectRelease();
    if (v143) {
      goto LABEL_86;
    }
    uint64_t v137 = *(void *)(v1 + 2144);
    uint64_t v138 = *(unsigned char *)(v1 + 2401);
    swift_beginAccess();
    v139._rawValue = *(void **)(v137 + 16);
    swift_bridgeObjectRetain();
    swift_endAccess();
    unsigned int v140 = oneExistingStatusWithConflictingRequest(doseEvents:requestedStatus:)(v139, v138 & 1);
    swift_bridgeObjectRelease();
    if (v140)
    {
LABEL_86:
      uint64_t v120 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
      uint64_t v57 = *(void *)(v1 + 1992);
      uint64_t v119 = *(void *)(v1 + 1960);
      uint64_t v116 = *(unsigned char *)(v1 + 2401);
      uint64_t v115 = (void **)(*(void *)(v1 + 2144) + 16);
      swift_beginAccess();
      v114._rawValue = *v115;
      swift_bridgeObjectRetain();
      swift_endAccess();
      uint64_t v121 = allLoggedWithMixedStatus(doseEvents:)(v114);
      swift_bridgeObjectRelease();
      *(unsigned char *)(v1 + 2408) = v121;
      swift_beginAccess();
      v117._rawValue = *v115;
      swift_bridgeObjectRetain();
      swift_endAccess();
      uint64_t v122 = oneExistingStatusWithConflictingRequest(doseEvents:requestedStatus:)(v117, v116 & 1);
      swift_bridgeObjectRelease();
      *(unsigned char *)(v1 + 2416) = v122;
      uint64_t v118 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v120(v57, v118, v119);
      swift_endAccess();
      uint64_t v124 = swift_allocObject();
      *(unsigned char *)(v124 + 16) = v121;
      uint64_t v126 = swift_allocObject();
      *(unsigned char *)(v126 + 16) = v122;
      unint64_t v135 = Logger.logObject.getter();
      uint64_t v136 = static os_log_type_t.debug.getter();
      *(void *)(v1 + 1432) = 22;
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v123 = *(_DWORD *)(v1 + 2436);
      uint64_t v128 = swift_allocObject();
      *(unsigned char *)(v128 + 16) = 32;
      uint64_t v129 = swift_allocObject();
      *(unsigned char *)(v129 + 16) = 8;
      uint64_t v125 = swift_allocObject();
      *(void *)(v125 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
      *(void *)(v125 + 24) = v124;
      uint64_t v130 = swift_allocObject();
      *(void *)(v130 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v130 + 24) = v125;
      uint64_t v131 = swift_allocObject();
      *(unsigned char *)(v131 + 16) = 32;
      uint64_t v132 = swift_allocObject();
      *(unsigned char *)(v132 + 16) = 8;
      uint64_t v127 = swift_allocObject();
      *(void *)(v127 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:);
      *(void *)(v127 + 24) = v126;
      uint64_t v133 = swift_allocObject();
      *(void *)(v133 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v133 + 24) = v127;
      _allocateUninitializedArray<A>(_:)();
      os_log_type_t v134 = v58;
      swift_retain();
      *os_log_type_t v134 = partial apply for closure #1 in OSLogArguments.append(_:);
      v134[1] = v128;
      swift_retain();
      void v134[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v134[3] = v129;
      swift_retain();
      v134[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v134[5] = v130;
      swift_retain();
      v134[6] = partial apply for closure #1 in OSLogArguments.append(_:);
      v134[7] = v131;
      swift_retain();
      v134[8] = partial apply for closure #1 in OSLogArguments.append(_:);
      v134[9] = v132;
      swift_retain();
      v134[10] = partial apply for closure #1 in OSLogArguments.append(_:);
      v134[11] = v133;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v135, v136))
      {
        uint64_t v111 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v112 = createStorage<A>(capacity:type:)(0);
        uint64_t v113 = createStorage<A>(capacity:type:)(2);
        uint64_t v392 = v111;
        unint64_t v393 = v112;
        uint64_t v394 = v113;
        serialize(_:at:)(2, &v392);
        serialize(_:at:)(2, &v392);
        uint64_t v395 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v396 = v128;
        id result = closure #1 in osLogInternal(_:log:type:)(&v395, (uint64_t)&v392, (uint64_t)&v393, (uint64_t)&v394);
        if (v348) {
          return result;
        }
        uint64_t v395 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v396 = v129;
        closure #1 in osLogInternal(_:log:type:)(&v395, (uint64_t)&v392, (uint64_t)&v393, (uint64_t)&v394);
        uint64_t v395 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v396 = v130;
        closure #1 in osLogInternal(_:log:type:)(&v395, (uint64_t)&v392, (uint64_t)&v393, (uint64_t)&v394);
        uint64_t v395 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v396 = v131;
        closure #1 in osLogInternal(_:log:type:)(&v395, (uint64_t)&v392, (uint64_t)&v393, (uint64_t)&v394);
        uint64_t v395 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v396 = v132;
        closure #1 in osLogInternal(_:log:type:)(&v395, (uint64_t)&v392, (uint64_t)&v393, (uint64_t)&v394);
        uint64_t v395 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v396 = v133;
        closure #1 in osLogInternal(_:log:type:)(&v395, (uint64_t)&v392, (uint64_t)&v393, (uint64_t)&v394);
        _os_log_impl(&dword_25DE00000, v135, v136, "Calling either allLoggedWithMixedStatus (%s) or oneExistingStatusWithConflictingRequest (%s)", v111, v123);
        destroyStorage<A>(_:count:)(v112, 0, v110);
        destroyStorage<A>(_:count:)(v113, 2, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v111, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v106 = *(void (**)(uint64_t, uint64_t))(v1 + 2128);
      uint64_t v104 = *(void *)(v1 + 1992);
      uint64_t v105 = *(void *)(v1 + 1960);
      uint64_t v107 = (uint64_t *)(*(void *)(v1 + 2144) + 16);

      v106(v104, v105);
      *(void *)(v1 + 2296) = type metadata accessor for MatchedMedName();
      *(void *)(v1 + 1440) = _allocateUninitializedArray<A>(_:)();
      swift_beginAccess();
      uint64_t v108 = *v107;
      swift_bridgeObjectRetain();
      swift_endAccess();
      *(void *)(v1 + 1448) = v108;
      Collection<>.makeIterator()();
      IndexingIterator.next()();
      uint64_t v109 = *(void *)(v1 + 1456);
      *(void *)(v1 + 2304) = v109;
      if (!v109)
      {
        outlined destroy of [HKQuantityType]();
        type metadata accessor for LogSpecificMedicationsIntentResponse();
        uint64_t v103 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(110, 0);
        uint64_t v63 = v103;
        uint64_t v64 = v103;
        *(void *)(v1 + 1464) = v103;
        swift_bridgeObjectRetain();
        uint64_t v102 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v103, sel_setMatchingMeds_, v102);

        outlined destroy of [HKQuantityType]();
        swift_release();
        swift_release();
        uint64_t v243 = v103;
        goto LABEL_116;
      }
      *(void *)(v1 + 1472) = v109;
      uint64_t v59 = (void *)swift_task_alloc();
      uint64_t v60 = v109;
      v378[289] = v59;
      *uint64_t v59 = v378[141];
      v59[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
      uint64_t v61 = v378[225];
      uint64_t v62 = v378[224];
    }
    else
    {
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_endAccess();
      uint64_t v100 = getUnloggedDoseEvents(doseEvents:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      *(void *)(v1 + 1264) = v100;
      uint64_t v101 = Collection.isEmpty.getter();
      outlined destroy of [HKQuantityType]();
      swift_bridgeObjectRelease();
      if ((v101 & 1) == 0)
      {
        swift_beginAccess();
        swift_bridgeObjectRetain();
        swift_endAccess();
        uint64_t v99 = getUnloggedDoseEvents(doseEvents:)();
        *(void *)(v1 + 2328) = v99;
        swift_bridgeObjectRelease();
        *(void *)(v1 + 1368) = v99;
        type metadata accessor for HKMedicationExposableDoseEvent();
        *(void *)(v1 + 1376) = _allocateUninitializedArray<A>(_:)();
        swift_bridgeObjectRetain();
        *(void *)(v1 + 1384) = v99;
        Collection<>.makeIterator()();
        while (1)
        {
          IndexingIterator.next()();
          uint64_t v98 = *(id *)(v1 + 1392);
          if (!v98) {
            break;
          }
          *(void *)(v1 + 1400) = v98;
          *(void *)(v1 + 1408) = objc_msgSend(v98, sel_scheduledDoseQuantity);
          if (*(void *)(v1 + 1408))
          {
            unint64_t v391 = *(Class *)(v1 + 1408);
          }
          else
          {
            type metadata accessor for NSNumber();
            unint64_t v391 = NSNumber.init(integerLiteral:)(1).super.super.isa;
            outlined destroy of HealthKitPersistor((id *)(v1 + 1408));
          }
          id v97 = objc_msgSend(v98, sel_updateForNewDoseQuantity_);

          *(void *)(v1 + 1416) = v97;
          uint64_t v65 = v97;
          *(void *)(v1 + 1424) = v97;
          Array.append(_:)();
        }
        unint64_t v95 = *(id *)(v1 + 1800);
        outlined destroy of [HKQuantityType]();
        uint64_t v66 = v95;
        uint64_t v96 = *(void *)(v1 + 1376);
        *(void *)(v1 + 2336) = v96;
        swift_bridgeObjectRetain();
        uint64_t v67 = (void *)swift_task_alloc();
        uint64_t v53 = v96;
        *(void *)(v1 + 2344) = v67;
        *uint64_t v67 = *(void *)(v1 + 1128);
        v67[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
        uint64_t v54 = *(void *)(v1 + 1800);
        uint64_t v68 = *(unsigned char *)(v1 + 2401);
        v425 = *(void *)(v1 + 1792);
        unint64_t v426 = v54;
        uint64_t v56 = v68 & 1;
        return SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(v54, v53, v56, 0, 0, 1, 0, 0);
      }
      char v90 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
      BOOL v69 = *(void *)(v1 + 1984);
      uint64_t v89 = *(void *)(v1 + 1960);
      uint64_t v88 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v90(v69, v88, v89);
      swift_endAccess();
      uint64_t v93 = Logger.logObject.getter();
      uint64_t v92 = static os_log_type_t.debug.getter();
      *(void *)(v1 + 1272) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v91 = *(_DWORD *)(v1 + 2432);
      uint64_t v94 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v93, v92))
      {
        uint64_t v84 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint32_t v85 = createStorage<A>(capacity:type:)(0);
        os_log_type_t v86 = createStorage<A>(capacity:type:)(0);
        *(void *)(v1 + 1336) = v84;
        *(void *)(v1 + 1344) = v85;
        *(void *)(v1 + 1352) = v86;
        serialize(_:at:)(0, (unsigned char **)(v1 + 1336));
        serialize(_:at:)(0, (unsigned char **)(v1 + 1336));
        *(void *)(v1 + 1360) = v94;
        uint64_t v87 = (void *)swift_task_alloc();
        v87[2] = v1 + 1336;
        v87[3] = v1 + 1344;
        v87[4] = v1 + 1352;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        id result = Sequence.forEach(_:)();
        if (v348) {
          return result;
        }
        swift_task_dealloc();
        _os_log_impl(&dword_25DE00000, v93, v92, "allMedsLoggedAlready, returning code .allMedsLoggedAlready", v84, v91);
        destroyStorage<A>(_:count:)(v85, 0, v83);
        destroyStorage<A>(_:count:)(v86, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v84, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v1 + 2128);
      uint64_t v76 = *(void *)(v1 + 1984);
      uint64_t v77 = *(void *)(v1 + 1960);
      uint64_t v80 = (uint64_t *)(*(void *)(v1 + 2144) + 16);

      v78(v76, v77);
      type metadata accessor for LogSpecificMedicationsIntentResponse();
      uint64_t v79 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(111, 0);
      *(void *)(v1 + 2360) = v79;
      uint64_t v70 = v79;
      os_log_type_t v71 = v79;
      *(void *)(v1 + 1280) = v79;
      *(void *)(v1 + 2368) = type metadata accessor for MatchedMedName();
      *(void *)(v1 + 1288) = _allocateUninitializedArray<A>(_:)();
      swift_beginAccess();
      uint32_t v81 = *v80;
      swift_bridgeObjectRetain();
      swift_endAccess();
      *(void *)(v1 + 1296) = v81;
      Collection<>.makeIterator()();
      IndexingIterator.next()();
      uint64_t v82 = *(void *)(v1 + 1304);
      *(void *)(v1 + 2376) = v82;
      if (!v82)
      {
        uint64_t v75 = *(id *)(v1 + 2360);
        outlined destroy of [HKQuantityType]();
        swift_bridgeObjectRetain();
        uint64_t v74 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v75, sel_setMatchingMeds_, v74);

        outlined destroy of [HKQuantityType]();
        swift_release();
        swift_release();
        uint64_t v243 = *(char **)(v1 + 2360);
        goto LABEL_116;
      }
      *(void *)(v1 + 1312) = v82;
      uint64_t v72 = (void *)swift_task_alloc();
      uint64_t v60 = v82;
      v378[298] = v72;
      *uint64_t v72 = v378[141];
      v72[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
      uint64_t v61 = v378[225];
      uint64_t v62 = v378[224];
    }
    return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(v60, 1, v62, v61);
  }
  uint64_t v227 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 2080);
  uint64_t v28 = *(void *)(v1 + 2024);
  uint64_t v226 = *(void *)(v1 + 1960);
  uint64_t v225 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v227(v28, v225, v226);
  swift_endAccess();
  swift_retain();
  uint64_t v234 = Logger.logObject.getter();
  uint64_t v235 = static os_log_type_t.debug.getter();
  *(void *)(v1 + 1600) = 12;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v228 = *(_DWORD *)(v1 + 2448);
  uint64_t v230 = swift_allocObject();
  *(unsigned char *)(v230 + 16) = 0;
  uint64_t v231 = swift_allocObject();
  *(unsigned char *)(v231 + 16) = 8;
  uint64_t v229 = swift_allocObject();
  *(void *)(v229 + 16) = partial apply for implicit closure #7 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
  *(void *)(v229 + 24) = v345;
  uint64_t v232 = swift_allocObject();
  *(void *)(v232 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  *(void *)(v232 + 24) = v229;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v233 = v29;
  swift_retain();
  *uint64_t v233 = partial apply for closure #1 in OSLogArguments.append(_:);
  v233[1] = v230;
  swift_retain();
  v233[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v233[3] = v231;
  swift_retain();
  v233[4] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
  v233[5] = v232;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v234, v235))
  {
    uint64_t v222 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v221 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v223 = createStorage<A>(capacity:type:)(0);
    uint64_t v224 = createStorage<A>(capacity:type:)(0);
    v403 = v222;
    uint64_t v404 = v223;
    uint64_t v405 = v224;
    serialize(_:at:)(0, &v403);
    serialize(_:at:)(1, &v403);
    uint64_t v406 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    unint64_t v407 = v230;
    id result = closure #1 in osLogInternal(_:log:type:)(&v406, (uint64_t)&v403, (uint64_t)&v404, (uint64_t)&v405);
    if (v348) {
      return result;
    }
    uint64_t v406 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    unint64_t v407 = v231;
    closure #1 in osLogInternal(_:log:type:)(&v406, (uint64_t)&v403, (uint64_t)&v404, (uint64_t)&v405);
    uint64_t v406 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
    unint64_t v407 = v232;
    closure #1 in osLogInternal(_:log:type:)(&v406, (uint64_t)&v403, (uint64_t)&v404, (uint64_t)&v405);
    _os_log_impl(&dword_25DE00000, v234, v235, "Multiple schedules (%ld) found for specified timeframe without name, returning .needsScheduleDisambiguation", v222, v228);
    destroyStorage<A>(_:count:)(v223, 0, v221);
    destroyStorage<A>(_:count:)(v224, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v222, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v220 = 0;
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    uint64_t v220 = v348;
  }
  uint64_t v216 = *(void (**)(uint64_t, uint64_t))(v1 + 2128);
  uint64_t v214 = *(void *)(v1 + 2024);
  uint64_t v215 = *(void *)(v1 + 1960);

  v216(v214, v215);
  *(void *)(v1 + 2192) = type metadata accessor for MatchedMedSchedule();
  *(void *)(v1 + 1608) = _allocateUninitializedArray<A>(_:)();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_endAccess();
  Dictionary.makeIterator()();
  memcpy((void *)(v1 + 56), (const void *)(v1 + 16), 0x28uLL);
  *(void *)(v1 + 2200) = v220;
  uint64_t v218 = *(_OWORD **)(v1 + 1840);
  uint64_t v217 = *(_OWORD **)(v1 + 1832);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String? : (scheduleDate: Date?, medID: String, count: Int)].Iterator);
  Dictionary.Iterator.next()();
  outlined init with take of (key: String?, value: (scheduleDate: Date?, medID: String, count: Int))?(v217, v218);
  uint64_t v219 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String?, value: (scheduleDate: Date?, medID: String, count: Int)));
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(*(void *)(v219 - 8) + 48))(v218, 1) == 1)
  {
    outlined destroy of [String? : (scheduleDate: Date?, medID: String, count: Int)].Iterator();
    type metadata accessor for LogSpecificMedicationsIntentResponse();
    uint64_t v192 = LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(104, 0);
    uint64_t v45 = v192;
    os_log_type_t v46 = v192;
    *(void *)(v1 + 1616) = v192;
    swift_bridgeObjectRetain();
    uint64_t v191 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v192, sel_setMatchingSchedules_, v191);

    outlined destroy of [HKQuantityType]();
    swift_release();
    swift_release();
    uint64_t v243 = v192;
LABEL_116:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v73 = *(uint64_t (**)(char *))(*(void *)(v1 + 1128) + 8);
    return v73(v243);
  }
  uint64_t v206 = *(void **)(v1 + 1904);
  uint64_t v30 = *(uint64_t **)(v1 + 1840);
  uint64_t v207 = *(char **)(v1 + 1824);
  uint64_t v205 = *(void *)(v1 + 1808);
  uint64_t v204 = *v30;
  uint64_t v213 = v30[1];
  *(void *)(v1 + 2208) = v213;
  uint64_t v31 = (char *)v30 + *(int *)(v219 + 48);
  uint64_t v32 = &v31[*(int *)(v205 + 48)];
  char v200 = *(void *)v32;
  uint64_t v202 = *((void *)v32 + 1);
  uint64_t v210 = *(void *)&v31[*(int *)(v205 + 64)];
  *(void *)(v1 + 2216) = v210;
  char v201 = &v207[*(int *)(v205 + 48)];
  char v203 = *(int *)(v205 + 64);
  outlined init with take of Date?(v31, v207);
  *(void *)char v201 = v200;
  *((void *)v201 + 1) = v202;
  *(void *)&v207[v203] = v210;
  *(void *)(v1 + 984) = v204;
  *(void *)(v1 + 992) = v213;
  uint64_t v33 = (uint64_t *)&v207[*(int *)(v205 + 48)];
  uint64_t v208 = *v33;
  uint64_t v209 = v33[1];
  *(void *)(v1 + 2224) = v209;
  outlined init with take of Date?(v207, v206);
  *(void *)(v1 + 1000) = v208;
  *(void *)(v1 + 1008) = v209;
  *(void *)(v1 + 1624) = v210;
  uint64_t v211 = swift_allocObject();
  *(void *)(v1 + 2232) = v211;
  *(void *)(v1 + 1632) = v211 + 16;
  os_log_type_t v34 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Match", 5uLL, 1);
  INObject.__allocating_init(identifier:display:)(v35, (Swift::String_optional)0, v34);
  *(void *)(v211 + 16) = v36;
  swift_beginAccess();
  uint64_t v212 = *(id *)(v211 + 16);
  uint64_t v37 = v212;
  swift_endAccess();
  swift_bridgeObjectRetain();
  if (v213)
  {
    uint64_t v198 = MEMORY[0x2611C8860](v204);
    swift_bridgeObjectRelease();
    char v199 = (void *)v198;
  }
  else
  {
    char v199 = 0;
  }
  uint64_t v196 = *(void *)(v1 + 1904);
  objc_msgSend(v212, sel_setScheduleID_);

  swift_beginAccess();
  uint64_t v195 = *(id *)(v211 + 16);
  uint64_t v38 = v195;
  swift_endAccess();
  uint64_t v197 = getFormattedTimeString(time:)(v196);
  if (v39)
  {
    uint64_t v193 = MEMORY[0x2611C8860](v197);
    swift_bridgeObjectRelease();
    uint64_t v194 = (void *)v193;
  }
  else
  {
    uint64_t v194 = 0;
  }
  objc_msgSend(v195, sel_setSchedule_);

  swift_beginAccess();
  uint64_t v40 = *(void **)(v211 + 16);
  *(void *)(v1 + 2240) = v40;
  uint64_t v41 = v40;
  swift_endAccess();
  swift_bridgeObjectRetain();
  uint64_t v42 = (void *)swift_task_alloc();
  v378[281] = v42;
  *uint64_t v42 = v378[141];
  v42[1] = SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:);
  uint64_t v43 = v378[225];
  uint64_t v44 = v378[224];
  return SpecificMedicationsPersistor.displayNameFor(identifier:)(v208, v209, v44, v43);
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  uint64_t v3 = *(void **)(*v1 + 1800);
  *(void *)(v4 + 1128) = *v1;
  *(void *)(v4 + 2288) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 1128) = *v1;
  *(void *)(v3 + 2320) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:), 0);
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  uint64_t v3 = *(void **)(*v1 + 1800);
  *(void *)(v4 + 1128) = *v1;
  *(void *)(v4 + 2352) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 1128) = *v1;
  *(void *)(v3 + 2392) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:), 0);
}

uint64_t SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v2;
  v4[141] = *v2;
  v4[282] = a1;
  v4[283] = a2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:), 0);
}

uint64_t implicit closure #1 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  v2[1] = a1;
  uint64_t v5 = type metadata accessor for DateInterval();
  uint64_t v4 = *(void *)(v5 - 8);
  unint64_t v3 = (*(void *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v5);
  uint64_t v6 = (char *)v2 - v3;
  (*(void (**)(void))(v4 + 16))();
  lazy protocol witness table accessor for type DateInterval and conformance DateInterval();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #2 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  unint64_t v1 = type metadata accessor for HKMedicationExposableDoseEvent();
  uint64_t v5 = MEMORY[0x2611C8A30](v4, v1);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t implicit closure #4 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_scheduleItemIdentifier);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #5 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(void *a1)
{
  return String.init<A>(describing:)();
}

uint64_t implicit closure #6 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(void *a1)
{
  return String.init<A>(describing:)();
}

uint64_t implicit closure #7 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v6 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (scheduleDate: Date?, medID: String, count: Int));
  unint64_t v1 = lazy protocol witness table accessor for type String? and conformance <A> A?();
  uint64_t v7 = MEMORY[0x2611C87D0](v6, v4, v5, v1);
  swift_bridgeObjectRelease();
  return v7;
}

void __swiftcall INObject.__allocating_init(identifier:display:)(INObject *__return_ptr retstr, Swift::String_optional identifier, Swift::String display)
{
  uint64_t countAndFlagsBits = identifier.value._countAndFlagsBits;
  object = identifier.value._object;
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  @nonobjc INObject.init(identifier:display:)(countAndFlagsBits, (uint64_t)object, display._countAndFlagsBits, (uint64_t)display._object);
}

uint64_t SpecificMedicationsPersistor.displayNameFor(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[34] = a4;
  v4[33] = a3;
  v4[32] = a2;
  v4[31] = a1;
  v4[18] = v4;
  v4[8] = 0;
  v4[9] = 0;
  v4[10] = 0;
  v4[11] = 0;
  v4[12] = 0;
  v4[13] = 0;
  v4[24] = 0;
  v4[30] = 0;
  uint64_t v5 = type metadata accessor for Logger();
  v4[35] = v5;
  v4[36] = *(void *)(v5 - 8);
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  v4[8] = a1;
  v4[9] = a2;
  v4[10] = a3;
  v4[11] = a4;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.displayNameFor(identifier:), 0);
}

uint64_t SpecificMedicationsPersistor.displayNameFor(identifier:)()
{
  uint64_t v24 = *(void *)(v0 + 256);
  *(void *)(v0 + 144) = v0;
  swift_bridgeObjectRetain();
  if (v24)
  {
    uint64_t v1 = *(void *)(v23 + 256);
    *(void *)(v23 + 96) = *(void *)(v23 + 248);
    *(void *)(v23 + 104) = v1;
    id v2 = (void *)swift_task_alloc();
    *(void *)(v23 + 312) = v2;
    *id v2 = *(void *)(v23 + 144);
    v2[1] = SpecificMedicationsPersistor.displayNameFor(identifier:);
    uint64_t v3 = *(void *)(v23 + 272);
    uint64_t v4 = *(void *)(v23 + 264);
    return SpecificMedicationsPersistor.UTCQuery()(v4, v3);
  }
  else
  {
    uint64_t v6 = *(void *)(v23 + 304);
    uint64_t v18 = *(void *)(v23 + 280);
    uint64_t v16 = *(void *)(v23 + 288);
    uint64_t v17 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v6, v17, v18);
    swift_endAccess();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    *(void *)(v23 + 152) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v19 = *(_DWORD *)(v23 + 336);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v22 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v21, v20))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v13 = createStorage<A>(capacity:type:)(0);
      uint64_t v14 = createStorage<A>(capacity:type:)(0);
      *(void *)(v23 + 160) = buf;
      *(void *)(v23 + 168) = v13;
      *(void *)(v23 + 176) = v14;
      serialize(_:at:)(0, (unsigned char **)(v23 + 160));
      serialize(_:at:)(0, (unsigned char **)(v23 + 160));
      *(void *)(v23 + 184) = v22;
      uint64_t v15 = (void *)swift_task_alloc();
      v15[2] = v23 + 160;
      void v15[3] = v23 + 168;
      v15[4] = v23 + 176;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v21, v20, "Identifier passed into displayNameFor() was nil, returning nil", buf, v19);
      destroyStorage<A>(_:count:)(v13, 0, v11);
      destroyStorage<A>(_:count:)(v14, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void *)(v23 + 304);
    uint64_t v10 = *(void *)(v23 + 280);
    uint64_t v8 = *(void *)(v23 + 288);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)(v23 + 144) + 8);
    return v7(0);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  uint64_t v1 = v0[40];
  uint64_t v5 = v0[32];
  uint64_t v4 = v0[31];
  v0[18] = v0;
  v0[30] = v1;
  swift_bridgeObjectRetain();
  v0[16] = v4;
  v0[17] = v5;
  MEMORY[0x2611C8800]();
  outlined destroy of String.UTF8View();
  uint64_t v6 = v0[14];
  uint64_t v7 = v0[15];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(uint64_t, uint64_t))(v0[18] + 8);
  return v2(v6, v7);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v15 = *(void **)(v0 + 328);
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v16 = *(void *)(v0 + 288);
  uint64_t v18 = *(void *)(v0 + 280);
  *(void *)(v0 + 144) = v0;
  swift_bridgeObjectRelease();
  id v2 = v15;
  *(void *)(v0 + 192) = v15;
  uint64_t v17 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v1, v17, v18);
  swift_endAccess();
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  *(void *)(v0 + 200) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v19 = *(unsigned int *)(v0 + 340);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v22 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v21, v20))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 208) = buf;
    *(void *)(v14 + 216) = v11;
    *(void *)(v14 + 224) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 208));
    serialize(_:at:)(0, (unsigned char **)(v14 + 208));
    *(void *)(v14 + 232) = v22;
    uint64_t v13 = (void *)swift_task_alloc();
    void v13[2] = v14 + 208;
    v13[3] = v14 + 216;
    void v13[4] = v14 + 224;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v21, v20, "Call to UTCQuery() threw, returning nil", buf, v19);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = *(id *)(v14 + 328);
  uint64_t v6 = *(void *)(v14 + 296);
  uint64_t v7 = *(void *)(v14 + 280);
  uint64_t v5 = *(void *)(v14 + 288);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v14 + 144) + 8);
  return v3(0);
}

uint64_t SpecificMedicationsPersistor.displayNameFor(identifier:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[18] = *v2;
  v5[40] = a1;
  v5[41] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SpecificMedicationsPersistor.displayNameFor(identifier:);
  }
  else
  {
    uint64_t v3 = SpecificMedicationsPersistor.displayNameFor(identifier:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t implicit closure #9 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v4 = *(void **)(a1 + 16);
  id v1 = v4;
  swift_endAccess();
  id v5 = objc_msgSend(v4, sel_scheduleID);
  if (v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #10 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v4 = *(void **)(a1 + 16);
  id v1 = v4;
  swift_endAccess();
  id v5 = objc_msgSend(v4, sel_medName);
  if (v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #11 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v4 = *(void **)(a1 + 16);
  id v1 = v4;
  swift_endAccess();
  id v5 = objc_msgSend(v4, sel_schedule);
  if (v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #12 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(uint64_t result)
{
  if (__OFSUB__(result, 1)) {
    __break(1u);
  }
  else {
    --result;
  }
  return result;
}

uint64_t implicit closure #16 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  return String.init<A>(describing:)();
}

id closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  id result = objc_msgSend(self, sel_asNeededExposableDoseEventForMedication_doseQuantity_, *a1, a2);
  *a3 = result;
  return result;
}

uint64_t implicit closure #4 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)(uint64_t a1)
{
  unint64_t v1 = type metadata accessor for HKMedicationExposableDoseEvent();
  return MEMORY[0x2611C8A30](a1, v1);
}

uint64_t implicit closure #3 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(void *a1)
{
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(void *a1)
{
  return String.init<A>(describing:)();
}

uint64_t implicit closure #5 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(void *a1)
{
  return String.init<A>(describing:)();
}

uint64_t SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  *(void *)(v5 + 368) = a4;
  *(void *)(v5 + 360) = a3;
  *(double *)(v5 + 352) = a5;
  *(void *)(v5 + 344) = a2;
  *(void *)(v5 + 336) = a1;
  *(void *)(v5 + 200) = v5;
  *(void *)(v5 + 136) = 0;
  *(void *)(v5 + 144) = 0;
  *(void *)(v5 + 208) = 0;
  *(void *)(v5 + 152) = 0;
  *(void *)(v5 + 160) = 0;
  *(void *)(v5 + 168) = 0;
  *(void *)(v5 + 176) = 0;
  *(void *)(v5 + 256) = 0;
  *(void *)(v5 + 280) = 0;
  *(void *)(v5 + 312) = 0;
  *(void *)(v5 + 184) = 0;
  *(void *)(v5 + 192) = 0;
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v5 + 376) = v6;
  *(void *)(v5 + 384) = *(void *)(v6 - 8);
  *(void *)(v5 + 392) = swift_task_alloc();
  *(void *)(v5 + 400) = swift_task_alloc();
  *(void *)(v5 + 408) = swift_task_alloc();
  *(void *)(v5 + 416) = swift_task_alloc();
  *(void *)(v5 + 424) = swift_task_alloc();
  *(void *)(v5 + 136) = a1;
  *(void *)(v5 + 144) = a2;
  *(double *)(v5 + 208) = a5;
  *(void *)(v5 + 152) = a3;
  *(void *)(v5 + 160) = a4;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:), 0);
}

uint64_t SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)()
{
  uint64_t v24 = *(void *)(v0 + 344);
  *(void *)(v0 + 200) = v0;
  swift_bridgeObjectRetain();
  if (v24)
  {
    uint64_t v1 = *(void *)(v23 + 344);
    *(void *)(v23 + 168) = *(void *)(v23 + 336);
    *(void *)(v23 + 176) = v1;
    id v2 = (void *)swift_task_alloc();
    *(void *)(v23 + 432) = v2;
    *id v2 = *(void *)(v23 + 200);
    v2[1] = SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:);
    uint64_t v3 = *(void *)(v23 + 368);
    uint64_t v4 = *(void *)(v23 + 360);
    return SpecificMedicationsPersistor.doUTCQueryForMedications()(v4, v3);
  }
  else
  {
    uint64_t v6 = *(void *)(v23 + 400);
    uint64_t v18 = *(void *)(v23 + 376);
    uint64_t v16 = *(void *)(v23 + 384);
    uint64_t v17 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v6, v17, v18);
    swift_endAccess();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    *(void *)(v23 + 216) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v23 + 456);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v22 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v21, v20))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v13 = createStorage<A>(capacity:type:)(0);
      uint64_t v14 = createStorage<A>(capacity:type:)(0);
      *(void *)(v23 + 224) = buf;
      *(void *)(v23 + 232) = v13;
      *(void *)(v23 + 240) = v14;
      serialize(_:at:)(0, (unsigned char **)(v23 + 224));
      serialize(_:at:)(0, (unsigned char **)(v23 + 224));
      *(void *)(v23 + 248) = v22;
      uint64_t v15 = (void *)swift_task_alloc();
      v15[2] = v23 + 224;
      void v15[3] = v23 + 232;
      v15[4] = v23 + 240;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v21, v20, "medicationID passed into getAsNeededDosageUnitFromHealthApp was nil, returning nil", buf, size);
      destroyStorage<A>(_:count:)(v13, 0, v11);
      destroyStorage<A>(_:count:)(v14, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void *)(v23 + 400);
    uint64_t v10 = *(void *)(v23 + 376);
    uint64_t v8 = *(void *)(v23 + 384);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)(v23 + 200) + 8);
    return v7(0);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  id v5;
  void *v6;
  Swift::String_optional v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t (*v13)(uint64_t, void *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint32_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint32_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  NSObject *log;
  os_log_type_t v49;
  Swift::String_optional v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  Swift::Double fora;
  uint64_t v56;
  uint8_t *buf;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  NSObject *oslog;
  os_log_type_t v72;
  id v73;
  id v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t, uint64_t);
  uint64_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t, uint64_t, uint64_t);
  uint64_t v96;
  void *v97;
  uint64_t v98;

  id v97 = v0;
  uint64_t v1 = v0[56];
  id v2 = v0[55];
  uint64_t v79 = v0[43];
  uint64_t v78 = v0[42];
  v0[25] = v0;
  v0[34] = v2;
  swift_bridgeObjectRetain();
  uint64_t v80 = swift_task_alloc();
  *(void *)(v80 + 16) = v78;
  *(void *)(v80 + 24) = v79;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
  id result = _ArrayProtocol.filter(_:)();
  uint32_t v81 = result;
  if (!v1)
  {
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    *(void *)(v77 + 280) = v81;
    swift_bridgeObjectRetain();
    *(void *)(v77 + 296) = v81;
    lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    uint64_t v76 = *(id *)(v77 + 288);
    if (v76)
    {
      uint64_t v73 = objc_msgSend(v76, sel_medication);

      uint64_t v74 = objc_msgSend(v73, sel_loggingUnit);
      uint64_t v75 = v74;
    }
    else
    {
      uint64_t v75 = 0;
    }
    if (v75)
    {
      uint64_t v4 = *(void *)(v77 + 424);
      uint64_t v62 = *(void *)(v77 + 376);
      uint64_t v60 = *(void *)(v77 + 384);
      *(void *)(v77 + 312) = v75;
      uint64_t v61 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16);
      v63(v4, v61, v62);
      swift_endAccess();
      uint64_t v5 = v75;
      uint64_t v65 = swift_allocObject();
      *(void *)(v65 + 16) = v75;
      os_log_t oslog = Logger.logObject.getter();
      uint64_t v72 = static os_log_type_t.debug.getter();
      *(void *)(v77 + 320) = 12;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t size = *(_DWORD *)(v77 + 468);
      uint64_t v67 = swift_allocObject();
      *(unsigned char *)(v67 + 16) = 32;
      uint64_t v68 = swift_allocObject();
      *(unsigned char *)(v68 + 16) = 8;
      uint64_t v66 = swift_allocObject();
      *(void *)(v66 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:);
      *(void *)(v66 + 24) = v65;
      BOOL v69 = swift_allocObject();
      *(void *)(v69 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v69 + 24) = v66;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      _allocateUninitializedArray<A>(_:)();
      uint64_t v70 = v6;
      swift_retain();
      *uint64_t v70 = partial apply for closure #1 in OSLogArguments.append(_:);
      v70[1] = v67;
      swift_retain();
      v70[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v70[3] = v68;
      swift_retain();
      v70[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v70[5] = v69;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(oslog, v72))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint32_t v58 = createStorage<A>(capacity:type:)(0);
        uint64_t v59 = createStorage<A>(capacity:type:)(1);
        uint64_t v92 = buf;
        uint64_t v93 = v58;
        uint64_t v94 = v59;
        serialize(_:at:)(2, &v92);
        serialize(_:at:)(1, &v92);
        unint64_t v95 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v96 = v67;
        closure #1 in osLogInternal(_:log:type:)(&v95, (uint64_t)&v92, (uint64_t)&v93, (uint64_t)&v94);
        unint64_t v95 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v96 = v68;
        closure #1 in osLogInternal(_:log:type:)(&v95, (uint64_t)&v92, (uint64_t)&v93, (uint64_t)&v94);
        unint64_t v95 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        uint64_t v96 = v69;
        closure #1 in osLogInternal(_:log:type:)(&v95, (uint64_t)&v92, (uint64_t)&v93, (uint64_t)&v94);
        _os_log_impl(&dword_25DE00000, oslog, v72, "getAsNeededDosageUnit had raw unit of %s", buf, size);
        destroyStorage<A>(_:count:)(v58, 0, v56);
        destroyStorage<A>(_:count:)(v59, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v52 = *(void *)(v77 + 424);
      uint64_t v53 = *(void *)(v77 + 376);
      fora = *(double *)(v77 + 352);
      uint64_t v51 = *(void *)(v77 + 384);

      uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
      v54(v52, v53);
      uint64_t v7 = HKMedicationLoggingUnit.getDisplayUnit(for:)(fora);
      if (v7.value._object)
      {
        *(Swift::String_optional *)(v77 + 184) = v7;

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v50 = v7;
      }
      else
      {
        uint64_t v8 = *(void *)(v77 + 416);
        uint64_t v40 = *(void *)(v77 + 376);
        double v39 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        v63(v8, v39, v40);
        swift_endAccess();
        uint64_t v9 = v75;
        uint64_t v42 = swift_allocObject();
        *(void *)(v42 + 16) = v75;
        log = Logger.logObject.getter();
        uint64_t v49 = static os_log_type_t.debug.getter();
        *(void *)(v77 + 328) = 12;
        UnsignedInteger<>.init<A>(_:)();
        uint64_t v41 = *(_DWORD *)(v77 + 472);
        uint64_t v44 = swift_allocObject();
        *(unsigned char *)(v44 + 16) = 64;
        uint64_t v45 = swift_allocObject();
        *(unsigned char *)(v45 + 16) = 8;
        uint64_t v43 = swift_allocObject();
        *(void *)(v43 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
        *(void *)(v43 + 24) = v42;
        os_log_type_t v46 = swift_allocObject();
        *(void *)(v46 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
        *(void *)(v46 + 24) = v43;
        _allocateUninitializedArray<A>(_:)();
        uint64_t v47 = v10;
        swift_retain();
        *uint64_t v47 = partial apply for closure #1 in OSLogArguments.append(_:);
        v47[1] = v44;
        swift_retain();
        v47[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v47[3] = v45;
        swift_retain();
        v47[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v47[5] = v46;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(log, v49))
        {
          double v36 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v37 = createStorage<A>(capacity:type:)(1);
          uint64_t v38 = createStorage<A>(capacity:type:)(0);
          uint64_t v87 = v36;
          uint64_t v88 = v37;
          uint64_t v89 = v38;
          serialize(_:at:)(2, &v87);
          serialize(_:at:)(1, &v87);
          char v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v91 = v44;
          closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v87, (uint64_t)&v88, (uint64_t)&v89);
          char v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v91 = v45;
          closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v87, (uint64_t)&v88, (uint64_t)&v89);
          char v90 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v91 = v46;
          closure #1 in osLogInternal(_:log:type:)(&v90, (uint64_t)&v87, (uint64_t)&v88, (uint64_t)&v89);
          _os_log_impl(&dword_25DE00000, log, v49, "Failed to find or map displayDosageUnit, here's dosageUnit: %@", v36, v41);
          destroyStorage<A>(_:count:)(v37, 1, v35);
          destroyStorage<A>(_:count:)(v38, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](v36, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        uint64_t v33 = *(void *)(v77 + 416);
        os_log_type_t v34 = *(void *)(v77 + 376);

        v54(v33, v34);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v50.value._uint64_t countAndFlagsBits = 0;
        v50.value._object = 0;
      }
    }
    else
    {
      uint64_t v11 = *(void *)(v77 + 408);
      uint64_t v23 = *(void *)(v77 + 376);
      uint64_t v21 = *(void *)(v77 + 384);
      uint64_t v22 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v11, v22, v23);
      swift_endAccess();
      swift_bridgeObjectRetain();
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = v81;
      uint64_t v31 = Logger.logObject.getter();
      uint64_t v32 = static os_log_type_t.debug.getter();
      *(void *)(v77 + 304) = 12;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v24 = *(_DWORD *)(v77 + 464);
      uint64_t v27 = swift_allocObject();
      *(unsigned char *)(v27 + 16) = 32;
      uint64_t v28 = swift_allocObject();
      *(unsigned char *)(v28 + 16) = 8;
      uint32_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:);
      *(void *)(v26 + 24) = v25;
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
      *(void *)(v29 + 24) = v26;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      _allocateUninitializedArray<A>(_:)();
      uint64_t v30 = v12;
      swift_retain();
      *uint64_t v30 = partial apply for closure #1 in OSLogArguments.append(_:);
      v30[1] = v27;
      swift_retain();
      v30[2] = partial apply for closure #1 in OSLogArguments.append(_:);
      v30[3] = v28;
      swift_retain();
      v30[4] = partial apply for closure #1 in OSLogArguments.append(_:);
      v30[5] = v29;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v18 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint32_t v19 = createStorage<A>(capacity:type:)(0);
        os_log_type_t v20 = createStorage<A>(capacity:type:)(1);
        uint64_t v82 = v18;
        uint64_t v83 = v19;
        uint64_t v84 = v20;
        serialize(_:at:)(2, &v82);
        serialize(_:at:)(1, &v82);
        uint32_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        os_log_type_t v86 = v27;
        closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
        uint32_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        os_log_type_t v86 = v28;
        closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
        uint32_t v85 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        os_log_type_t v86 = v29;
        closure #1 in osLogInternal(_:log:type:)(&v85, (uint64_t)&v82, (uint64_t)&v83, (uint64_t)&v84);
        _os_log_impl(&dword_25DE00000, v31, v32, "Failed to find or map dosageUnit, here's the med: %s", v18, v24);
        destroyStorage<A>(_:count:)(v19, 0, v17);
        destroyStorage<A>(_:count:)(v20, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v18, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
      }
      uint64_t v15 = *(void *)(v77 + 408);
      uint64_t v16 = *(void *)(v77 + 376);
      uint64_t v14 = *(void *)(v77 + 384);

      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v50.value._uint64_t countAndFlagsBits = 0;
      v50.value._object = 0;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(uint64_t, void *))(*(void *)(v77 + 200) + 8);
    return v13(v50.value._countAndFlagsBits, v50.value._object);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  uint64_t (*v5)(void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint8_t *buf;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint32_t size;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v35 = v0;
  uint32_t v19 = *(id *)(v0 + 448);
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v16 = *(void *)(v0 + 384);
  uint64_t v18 = *(void *)(v0 + 376);
  *(void *)(v0 + 200) = v0;
  id v2 = v19;
  *(void *)(v0 + 256) = v19;
  uint64_t v17 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v1, v17, v18);
  swift_endAccess();
  uint64_t v3 = v19;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v19;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  uint64_t v28 = Logger.logObject.getter();
  uint64_t v29 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 264) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 460);
  uint64_t v24 = swift_allocObject();
  *(unsigned char *)(v24 + 16) = 64;
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = 8;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(void *)(v22 + 24) = v21;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(void *)(v23 + 24) = v22;
  uint32_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v26 + 24) = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v27 = v4;
  swift_retain();
  *uint64_t v27 = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[1] = v24;
  swift_retain();
  v27[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[3] = v25;
  swift_retain();
  v27[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[5] = v26;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v28, v29))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v13 = createStorage<A>(capacity:type:)(1);
    uint64_t v14 = createStorage<A>(capacity:type:)(0);
    uint64_t v30 = buf;
    uint64_t v31 = v13;
    uint64_t v32 = v14;
    serialize(_:at:)(2, &v30);
    serialize(_:at:)(1, &v30);
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    os_log_type_t v34 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    os_log_type_t v34 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    os_log_type_t v34 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    _os_log_impl(&dword_25DE00000, v28, v29, "Error getting as needed dosage unit: %@", buf, size);
    destroyStorage<A>(_:count:)(v13, 1, v11);
    destroyStorage<A>(_:count:)(v14, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v10 = (id)v15[56];
  uint64_t v8 = v15[49];
  uint64_t v9 = v15[47];
  uint64_t v7 = v15[48];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(void))(v15[25] + 8);
  return v5(0);
}

uint64_t SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[25] = *v2;
  v5[55] = a1;
  v5[56] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:);
  }
  else
  {
    uint64_t v3 = SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[45] = a2;
  v4[44] = a1;
  v4[29] = v4;
  v4[19] = 0;
  v4[20] = 0;
  v4[21] = 0;
  v4[22] = 0;
  v4[30] = 0;
  v4[33] = 0;
  v4[23] = 0;
  v4[24] = 0;
  v4[41] = 0;
  v4[43] = 0;
  v4[27] = 0;
  v4[28] = 0;
  uint64_t v5 = type metadata accessor for Logger();
  v4[46] = v5;
  v4[47] = *(void *)(v5 - 8);
  v4[48] = swift_task_alloc();
  v4[49] = swift_task_alloc();
  v4[50] = swift_task_alloc();
  v4[19] = a1;
  v4[20] = a2;
  v4[21] = a3;
  v4[22] = a4;
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v10 + 408) = v6;
  void *v6 = *(void *)(v10 + 232);
  v6[1] = SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:);
  return SpecificMedicationsPersistor.doUTCQueryForMedications()(a3, a4);
}

uint64_t SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[29] = *v2;
  v5[52] = a1;
  v5[53] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:);
  }
  else
  {
    uint64_t v3 = SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:)()
{
  uint64_t v77 = v0;
  uint64_t v1 = v0[53];
  uint64_t v2 = v0[52];
  uint64_t v69 = v0[45];
  uint64_t v68 = v0[44];
  v0[29] = v0;
  v0[32] = v2;
  swift_bridgeObjectRetain();
  uint64_t v70 = swift_task_alloc();
  *(void *)(v70 + 16) = v68;
  *(void *)(v70 + 24) = v69;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
  uint64_t result = _ArrayProtocol.filter(_:)();
  uint64_t v71 = result;
  if (!v1)
  {
    swift_task_dealloc();
    swift_bridgeObjectRelease();
    *(void *)(v67 + 264) = v71;
    swift_bridgeObjectRetain();
    *(void *)(v67 + 280) = v71;
    lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    uint64_t v66 = *(void **)(v67 + 272);
    if (v66)
    {
      id v63 = objc_msgSend(v66, sel_medication);

      id v64 = objc_msgSend(v63, sel_displayNameComponents);
      id v65 = objc_msgSend(v64, sel_displayStrength);
      if (v65)
      {
        uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v60 = v4;

        uint64_t v61 = v59;
        uint64_t v62 = v60;
      }
      else
      {
        uint64_t v61 = 0;
        uint64_t v62 = 0;
      }

      uint64_t v57 = v61;
      uint64_t v58 = v62;
    }
    else
    {
      uint64_t v57 = 0;
      uint64_t v58 = 0;
    }
    if (v58)
    {
      *(void *)(v67 + 184) = v57;
      *(void *)(v67 + 192) = v58;
      *(void *)(v67 + 200) = v57;
      *(void *)(v67 + 208) = v58;
      Swift::String v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
      unint64_t v55 = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v54 = MEMORY[0x263F8D310];
      uint64_t v53 = default argument 1 of StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
      char v6 = default argument 2 of StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
      uint64_t v56 = MEMORY[0x2611C8DF0](v5._countAndFlagsBits, v5._object, v53, v6 & 1, v54, v55);
      swift_bridgeObjectRelease();
      *(void *)(v67 + 328) = v56;
      if (MEMORY[0x2611C8A30]() == 2)
      {
        Array.subscript.getter();
        uint64_t v52 = Double.init(_:)();
        if (v7)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v49 = 0;
          uint64_t v50 = 0;
          uint64_t v51 = 0;
        }
        else
        {
          *(void *)(v67 + 344) = v52;
          Array.subscript.getter();
          uint64_t v47 = MEMORY[0x2611C88E0](*(void *)(v67 + 48), *(void *)(v67 + 56), *(void *)(v67 + 64));
          uint64_t v48 = v8;
          swift_bridgeObjectRelease();
          *(void *)(v67 + 216) = v47;
          *(void *)(v67 + 224) = v48;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v49 = v52;
          uint64_t v50 = v47;
          uint64_t v51 = v48;
        }
      }
      else
      {
        uint64_t v9 = *(void *)(v67 + 400);
        uint64_t v37 = *(void *)(v67 + 368);
        uint64_t v35 = *(void *)(v67 + 376);
        uint64_t v36 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v9, v36, v37);
        swift_endAccess();
        swift_bridgeObjectRetain();
        uint64_t v39 = swift_allocObject();
        *(void *)(v39 + 16) = v57;
        *(void *)(v39 + 24) = v58;
        os_log_t oslog = Logger.logObject.getter();
        os_log_type_t v46 = static os_log_type_t.debug.getter();
        *(void *)(v67 + 336) = 12;
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t size = *(_DWORD *)(v67 + 440);
        uint64_t v41 = swift_allocObject();
        *(unsigned char *)(v41 + 16) = 32;
        uint64_t v42 = swift_allocObject();
        *(unsigned char *)(v42 + 16) = 8;
        uint64_t v40 = swift_allocObject();
        *(void *)(v40 + 16) = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
        *(void *)(v40 + 24) = v39;
        uint64_t v43 = swift_allocObject();
        *(void *)(v43 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
        *(void *)(v43 + 24) = v40;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        _allocateUninitializedArray<A>(_:)();
        uint64_t v44 = v10;
        swift_retain();
        void *v44 = partial apply for closure #1 in OSLogArguments.append(_:);
        v44[1] = v41;
        swift_retain();
        v44[2] = partial apply for closure #1 in OSLogArguments.append(_:);
        v44[3] = v42;
        swift_retain();
        v44[4] = partial apply for closure #1 in OSLogArguments.append(_:);
        v44[5] = v43;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(oslog, v46))
        {
          buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v33 = createStorage<A>(capacity:type:)(0);
          uint64_t v34 = createStorage<A>(capacity:type:)(1);
          uint64_t v72 = buf;
          uint64_t v73 = v33;
          uint64_t v74 = v34;
          serialize(_:at:)(2, &v72);
          serialize(_:at:)(1, &v72);
          uint64_t v75 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v76 = v41;
          closure #1 in osLogInternal(_:log:type:)(&v75, (uint64_t)&v72, (uint64_t)&v73, (uint64_t)&v74);
          uint64_t v75 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v76 = v42;
          closure #1 in osLogInternal(_:log:type:)(&v75, (uint64_t)&v72, (uint64_t)&v73, (uint64_t)&v74);
          uint64_t v75 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          uint64_t v76 = v43;
          closure #1 in osLogInternal(_:log:type:)(&v75, (uint64_t)&v72, (uint64_t)&v73, (uint64_t)&v74);
          _os_log_impl(&dword_25DE00000, oslog, v46, "Unexpected displayStrength string format: %s", buf, size);
          destroyStorage<A>(_:count:)(v33, 0, v31);
          destroyStorage<A>(_:count:)(v34, 1, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
          swift_release();
          swift_release();
          swift_release();
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        uint64_t v29 = *(void *)(v67 + 400);
        uint64_t v30 = *(void *)(v67 + 368);
        uint64_t v28 = *(void *)(v67 + 376);

        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v30);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v49 = 0;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
      }
    }
    else
    {
      uint64_t v11 = *(void *)(v67 + 392);
      uint64_t v23 = *(void *)(v67 + 368);
      uint64_t v21 = *(void *)(v67 + 376);
      uint64_t v22 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v11, v22, v23);
      swift_endAccess();
      log = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.debug.getter();
      *(void *)(v67 + 288) = 2;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v24 = *(_DWORD *)(v67 + 436);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v27 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(log, v25))
      {
        uint64_t v17 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v18 = createStorage<A>(capacity:type:)(0);
        uint64_t v19 = createStorage<A>(capacity:type:)(0);
        *(void *)(v67 + 296) = v17;
        *(void *)(v67 + 304) = v18;
        *(void *)(v67 + 312) = v19;
        serialize(_:at:)(0, (unsigned char **)(v67 + 296));
        serialize(_:at:)(0, (unsigned char **)(v67 + 296));
        *(void *)(v67 + 320) = v27;
        os_log_type_t v20 = (void *)swift_task_alloc();
        v20[2] = v67 + 296;
        v20[3] = v67 + 304;
        v20[4] = v67 + 312;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25DE00000, log, v25, "getAsNeededStrengthFromHealthApp: Couldn't find displayStrength in UserTrackedMeds", v17, v24);
        destroyStorage<A>(_:count:)(v18, 0, v16);
        destroyStorage<A>(_:count:)(v19, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v17, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(v67 + 392);
      uint64_t v15 = *(void *)(v67 + 368);
      uint64_t v13 = *(void *)(v67 + 376);

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
      swift_bridgeObjectRelease();
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 + 232) + 8);
    return v12(v49, v50, v51);
  }
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  uint64_t (*v5)(void, void);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint8_t *buf;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint32_t size;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  uint64_t v35 = v0;
  uint64_t v19 = *(id *)(v0 + 424);
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v16 = *(void *)(v0 + 376);
  uint64_t v18 = *(void *)(v0 + 368);
  *(void *)(v0 + 232) = v0;
  uint64_t v2 = v19;
  *(void *)(v0 + 240) = v19;
  uint64_t v17 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v1, v17, v18);
  swift_endAccess();
  uint64_t v3 = v19;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v19;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  uint64_t v28 = Logger.logObject.getter();
  uint64_t v29 = static os_log_type_t.error.getter();
  *(void *)(v0 + 248) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 432);
  uint32_t v24 = swift_allocObject();
  *(unsigned char *)(v24 + 16) = 64;
  os_log_type_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = 8;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(void *)(v22 + 24) = v21;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(void *)(v23 + 24) = v22;
  uint32_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v26 + 24) = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v27 = v4;
  swift_retain();
  *uint64_t v27 = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[1] = v24;
  swift_retain();
  v27[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[3] = v25;
  swift_retain();
  v27[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v27[5] = v26;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v28, v29))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v13 = createStorage<A>(capacity:type:)(1);
    uint64_t v14 = createStorage<A>(capacity:type:)(0);
    uint64_t v30 = buf;
    uint64_t v31 = v13;
    uint64_t v32 = v14;
    serialize(_:at:)(2, &v30);
    serialize(_:at:)(1, &v30);
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v34 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v34 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v34 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v33, (uint64_t)&v30, (uint64_t)&v31, (uint64_t)&v32);
    _os_log_impl(&dword_25DE00000, v28, v29, "Error doing UTC Query for Medications: %@", buf, size);
    destroyStorage<A>(_:count:)(v13, 1, v11);
    destroyStorage<A>(_:count:)(v14, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v10 = (id)v15[53];
  uint64_t v8 = v15[48];
  uint64_t v9 = v15[46];
  char v7 = v15[47];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v5 = *(uint64_t (**)(void, void))(v15[29] + 8);
  return v5(0, 0);
}

uint64_t SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[61] = a4;
  v4[60] = a3;
  v4[59] = a2;
  v4[58] = a1;
  v4[23] = v4;
  v4[17] = 0;
  v4[18] = 0;
  v4[19] = 0;
  v4[20] = 0;
  v4[21] = 0;
  v4[22] = 0;
  v4[29] = 0;
  v4[30] = 0;
  v4[43] = 0;
  v4[51] = 0;
  v4[52] = 0;
  uint64_t v5 = type metadata accessor for Logger();
  v4[62] = v5;
  v4[63] = *(void *)(v5 - 8);
  v4[64] = swift_task_alloc();
  v4[65] = swift_task_alloc();
  v4[66] = swift_task_alloc();
  v4[67] = swift_task_alloc();
  v4[68] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DateInterval();
  v4[69] = v6;
  v4[70] = *(void *)(v6 - 8);
  v4[71] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Calendar();
  v4[72] = v7;
  v4[73] = *(void *)(v7 - 8);
  v4[74] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v4[75] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  v4[76] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  v4[77] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DateComponents();
  v4[78] = v8;
  v4[79] = *(void *)(v8 - 8);
  v4[80] = swift_task_alloc();
  v4[81] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  v4[82] = v9;
  v4[83] = *(void *)(v9 - 8);
  v4[84] = swift_task_alloc();
  v4[85] = swift_task_alloc();
  v4[86] = swift_task_alloc();
  v4[87] = swift_task_alloc();
  v4[17] = a1;
  v4[18] = a2;
  v4[19] = a3;
  v4[20] = a4;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:), 0);
}

uint64_t SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:)()
{
  uint64_t v137 = v0;
  uint64_t v132 = "Fatal error";
  uint64_t v133 = "Unexpectedly found nil while unwrapping an Optional value";
  os_log_type_t v134 = "SiriWellnessIntents/LogSpecificMedicationsIntentHandler.swift";
  unint64_t v135 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v136 = *(void *)(v0 + 472);
  *(void *)(v0 + 184) = v0;
  swift_bridgeObjectRetain();
  if (v136)
  {
    uint64_t v1 = v131;
    uint64_t v110 = *(void *)(v131 + 472);
    uint64_t v2 = v110;
    uint64_t v119 = *(void *)(v131 + 696);
    uint64_t v3 = *(void *)(v131 + 664);
    uint64_t v130 = *(void *)(v131 + 656);
    uint64_t v118 = *(void *)(v131 + 648);
    uint64_t v121 = *(void *)(v131 + 640);
    uint64_t v4 = *(void *)(v131 + 632);
    uint64_t v122 = *(void *)(v131 + 624);
    uint64_t v112 = *(void *)(v131 + 616);
    uint64_t v113 = *(void *)(v131 + 608);
    uint64_t v128 = *(void *)(v131 + 600);
    uint64_t v124 = *(void *)(v131 + 592);
    uint64_t v5 = *(void *)(v131 + 584);
    uint64_t v125 = *(void *)(v131 + 576);
    uint64_t v6 = *(void *)(v131 + 464);
    uint64_t v127 = v3;
    uint64_t v117 = v4;
    uint64_t v120 = v4;
    uint64_t v111 = v5;
    uint64_t v123 = v5;
    uint64_t v126 = v131 + 168;
    *(void *)(v131 + 168) = v6;
    *(void *)(v1 + 176) = v2;
    Date.init()();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v111 + 56);
    unsigned int v129 = 1;
    v7(v112, 1, 1, v125);
    uint64_t v114 = 0;
    uint64_t v8 = type metadata accessor for TimeZone();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v113, 1);
    uint64_t v115 = &v34;
    uint64_t v34 = 0;
    int v116 = 1;
    LOBYTE(v35) = 1;
    uint64_t v36 = 0;
    char v37 = 1;
    uint64_t v38 = 0;
    char v39 = 1;
    uint64_t v40 = 0;
    char v41 = 1;
    uint64_t v42 = 0;
    char v43 = 1;
    uint64_t v44 = 0;
    char v45 = 1;
    uint64_t v46 = 0;
    char v47 = 1;
    uint64_t v48 = 0;
    char v49 = 1;
    uint64_t v50 = 0;
    char v51 = 1;
    uint64_t v52 = 0;
    char v53 = 1;
    uint64_t v54 = 0;
    char v55 = 1;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    DateComponents.day.setter();
    static Calendar.current.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v117 + 16))(v121, v118, v122);
    default argument 2 of Calendar.date(byAdding:to:wrappingComponents:)();
    Calendar.date(byAdding:to:wrappingComponents:)();
    uint64_t v9 = v121;
    uint64_t v10 = v122;
    uint64_t v11 = v131;
    uint64_t v12 = v120 + 8;
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v120 + 8);
    *(void *)(v131 + 704) = v13;
    *(void *)(v11 + 712) = v12 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v13(v9, v10);
    (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v124, v125);
    if ((*(unsigned int (**)(uint64_t, void, uint64_t))(v127 + 48))(v128, v129, v130) == 1)
    {
      LOBYTE(v34) = 2;
      uint64_t v35 = 966;
      LODWORD(v36) = 0;
      return _assertionFailure(_:_:file:line:flags:)();
    }
    else
    {
      uint64_t v101 = *(void *)(v131 + 696);
      uint64_t v100 = *(void *)(v131 + 688);
      uint64_t v107 = *(void *)(v131 + 680);
      uint64_t v106 = *(void *)(v131 + 672);
      uint64_t v15 = *(void *)(v131 + 664);
      uint64_t v102 = *(void *)(v131 + 656);
      uint64_t v105 = *(void *)(v131 + 568);
      uint64_t v108 = *(void *)(v131 + 464);
      uint64_t v99 = v15;
      (*(void (**)(void))(v15 + 32))();
      uint64_t v104 = *(void (**)(uint64_t, uint64_t, uint64_t))(v99 + 16);
      uint64_t v103 = v99 + 16;
      v104(v107, v100, v102);
      v104(v106, v101, v102);
      DateInterval.init(start:end:)();
      type metadata accessor for HKMedicationIdentifier();
      swift_bridgeObjectRetain();
      id v109 = HKMedicationIdentifier.__allocating_init(rawIdentifier:)();
      *(void *)(v131 + 720) = v109;
      uint64_t v16 = (void *)swift_task_alloc();
      uint64_t v17 = (void *)v131;
      uint64_t v18 = (uint64_t)v109;
      *(void *)(v131 + 728) = v16;
      *uint64_t v16 = v17[23];
      v16[1] = SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:);
      uint64_t v19 = v17[71];
      uint64_t v20 = v17[61];
      uint64_t v21 = v17[60];
      return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(v19, v18, v21, v20);
    }
  }
  else
  {
    uint64_t v22 = *(void *)(v131 + 520);
    uint64_t v23 = *(void *)(v131 + 504);
    uint64_t v90 = *(void *)(v131 + 496);
    uint64_t v88 = v23;
    uint64_t v89 = Logger.wellnessIntents.unsafeMutableAddressor();
    uint64_t v91 = v131 + 16;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16))(v22, v89, v90);
    swift_endAccess();
    os_log_t oslog = (os_log_t)Logger.logObject.getter();
    int v96 = static os_log_type_t.debug.getter();
    uint64_t v94 = v131 + 192;
    *(void *)(v131 + 192) = 2;
    unint64_t v92 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v93 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v131 + 752);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v98 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, (os_log_type_t)v96))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v78 = 0;
      uint64_t v80 = createStorage<A>(capacity:type:)(0);
      uint64_t v24 = createStorage<A>(capacity:type:)(0);
      uint64_t v25 = v80;
      uint64_t v26 = v131;
      uint64_t v81 = v24;
      uint64_t v27 = (unsigned char **)(v131 + 200);
      uint64_t v83 = (unsigned char **)(v131 + 200);
      *(void *)(v131 + 200) = buf;
      uint64_t v84 = v26 + 208;
      *(void *)(v26 + 208) = v25;
      uint64_t v85 = v26 + 216;
      *(void *)(v26 + 216) = v24;
      int v82 = 0;
      serialize(_:at:)(0, v27);
      serialize(_:at:)(0, v83);
      *(void *)(v131 + 224) = v98;
      uint64_t v28 = (void *)swift_task_alloc();
      uint64_t v29 = v84;
      uint64_t v30 = v85;
      os_log_type_t v86 = v28;
      void v28[2] = v83;
      v28[3] = v29;
      v28[4] = v30;
      uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, oslog, (os_log_type_t)v96, "medicationID passed into getAsNeededDosageFromHealthApp was nil, returning 1.0", buf, size);
      uint64_t v76 = 0;
      destroyStorage<A>(_:count:)(v80, 0, v77);
      destroyStorage<A>(_:count:)(v81, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v57 = *(void *)(v131 + 520);
    uint64_t v31 = *(void *)(v131 + 504);
    uint64_t v58 = *(void *)(v131 + 496);
    uint64_t v56 = v31;

    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v57, v58);
    uint64_t v74 = v131 + 136;
    uint64_t v75 = v131 + 152;
    uint64_t v59 = *(void *)(v131 + 688);
    uint64_t v60 = *(void *)(v131 + 680);
    uint64_t v61 = *(void *)(v131 + 672);
    uint64_t v62 = *(void *)(v131 + 648);
    uint64_t v63 = *(void *)(v131 + 640);
    uint64_t v64 = *(void *)(v131 + 616);
    uint64_t v65 = *(void *)(v131 + 608);
    uint64_t v66 = *(void *)(v131 + 600);
    uint64_t v67 = *(void *)(v131 + 592);
    uint64_t v68 = *(void *)(v131 + 568);
    uint64_t v69 = *(void *)(v131 + 544);
    uint64_t v70 = *(void *)(v131 + 536);
    uint64_t v71 = *(void *)(v131 + 528);
    uint64_t v72 = *(void *)(v131 + 520);
    uint64_t v73 = *(void *)(v131 + 512);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v32 = *(uint64_t (**)(__n128))(*(void *)(v131 + 184) + 8);
    v33.n128_u64[0] = 1.0;
    return v32(v33);
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  double v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t (*v11)(__n128);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint32_t v34;
  os_log_type_t v35;
  NSObject *log;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint32_t size;
  os_log_type_t v61;
  NSObject *oslog;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  double v75;
  id v76;
  void *v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  double v94;
  double v95;
  uint64_t v96;
  uint8_t *buf;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint32_t v104;
  os_log_type_t v105;
  NSObject *v106;
  uint64_t v107;
  id v108;
  void *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;

  uint64_t v113 = v0[92];
  v0[23] = v0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[29] = v113;
  swift_bridgeObjectRetain();
  v0[32] = v113;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  uint64_t v114 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  if (v114)
  {
    uint64_t v8 = *(void *)(v112 + 528);
    __n128 v33 = *(void *)(v112 + 496);
    uint64_t v31 = *(void *)(v112 + 504);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v8, v32, v33);
    swift_endAccess();
    log = Logger.logObject.getter();
    uint64_t v35 = static os_log_type_t.debug.getter();
    *(void *)(v112 + 264) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v34 = *(_DWORD *)(v112 + 760);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    char v37 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v35))
    {
      uint64_t v9 = *(void *)(v112 + 744);
      uint64_t v27 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v28 = createStorage<A>(capacity:type:)(0);
      uint64_t v29 = createStorage<A>(capacity:type:)(0);
      *(void *)(v112 + 272) = v27;
      *(void *)(v112 + 280) = v28;
      *(void *)(v112 + 288) = v29;
      serialize(_:at:)(0, (unsigned char **)(v112 + 272));
      serialize(_:at:)(0, (unsigned char **)(v112 + 272));
      *(void *)(v112 + 296) = v37;
      uint64_t v30 = (void *)swift_task_alloc();
      v30[2] = v112 + 272;
      v30[3] = v112 + 280;
      v30[4] = v112 + 288;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v9) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, log, v35, "No previously logged As Needed dose events in health app. Falling back to dosage == 1.", v27, v34);
      destroyStorage<A>(_:count:)(v28, 0, v26);
      destroyStorage<A>(_:count:)(v29, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v27, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v112 + 704);
    uint64_t v23 = *(void *)(v112 + 696);
    uint64_t v19 = *(void *)(v112 + 688);
    uint64_t v24 = *(void *)(v112 + 656);
    uint64_t v20 = *(void *)(v112 + 648);
    uint64_t v21 = *(void *)(v112 + 624);
    uint64_t v17 = *(void *)(v112 + 568);
    uint64_t v16 = *(void *)(v112 + 552);
    uint64_t v13 = *(void *)(v112 + 528);
    uint64_t v14 = *(void *)(v112 + 496);
    uint64_t v18 = *(void *)(v112 + 664);
    uint64_t v15 = *(void *)(v112 + 560);
    uint64_t v12 = *(void *)(v112 + 504);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
    outlined destroy of [HKQuantityType]();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v25(v19, v24);
    v22(v20, v21);
    v25(v23, v24);
    swift_bridgeObjectRelease();
    unint64_t v95 = 1.0;
  }
  else
  {
    uint64_t v110 = *(void *)(v112 + 736);
    swift_bridgeObjectRetain();
    *(void *)(v112 + 312) = v110;
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    uint64_t v111 = *(void **)(v112 + 304);
    swift_bridgeObjectRelease();
    if (v111)
    {
      uint64_t v108 = objc_msgSend(v111, sel_scheduledDoseQuantity);

      id v109 = v108;
    }
    else
    {
      id v109 = 0;
    }
    if (v109)
    {
      uint64_t v1 = *(void *)(v112 + 544);
      uint64_t v103 = *(void *)(v112 + 496);
      uint64_t v101 = *(void *)(v112 + 504);
      swift_bridgeObjectRelease();
      *(void *)(v112 + 416) = v109;
      uint64_t v102 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v101 + 16))(v1, v102, v103);
      swift_endAccess();
      uint64_t v106 = Logger.logObject.getter();
      uint64_t v105 = static os_log_type_t.debug.getter();
      *(void *)(v112 + 424) = 2;
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v104 = *(_DWORD *)(v112 + 768);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v107 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v106, v105))
      {
        uint64_t v2 = *(void *)(v112 + 744);
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        int v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v98 = createStorage<A>(capacity:type:)(0);
        uint64_t v99 = createStorage<A>(capacity:type:)(0);
        *(void *)(v112 + 432) = buf;
        *(void *)(v112 + 440) = v98;
        *(void *)(v112 + 448) = v99;
        serialize(_:at:)(0, (unsigned char **)(v112 + 432));
        serialize(_:at:)(0, (unsigned char **)(v112 + 432));
        *(void *)(v112 + 456) = v107;
        uint64_t v100 = (void *)swift_task_alloc();
        v100[2] = v112 + 432;
        v100[3] = v112 + 440;
        v100[4] = v112 + 448;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        uint64_t result = Sequence.forEach(_:)();
        if (v2) {
          return result;
        }
        swift_task_dealloc();
        _os_log_impl(&dword_25DE00000, v106, v105, "This is a scheduled med. Whether being taken per schedule or As Needed, return the scheduledDoseQuantity.", buf, v104);
        destroyStorage<A>(_:count:)(v98, 0, v96);
        destroyStorage<A>(_:count:)(v99, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v90 = *(void (**)(uint64_t, uint64_t))(v112 + 704);
      uint64_t v91 = *(void *)(v112 + 696);
      uint64_t v87 = *(void *)(v112 + 688);
      unint64_t v92 = *(void *)(v112 + 656);
      uint64_t v88 = *(void *)(v112 + 648);
      uint64_t v89 = *(void *)(v112 + 624);
      uint64_t v85 = *(void *)(v112 + 568);
      uint64_t v84 = *(void *)(v112 + 552);
      uint64_t v81 = *(void *)(v112 + 544);
      int v82 = *(void *)(v112 + 496);
      os_log_type_t v86 = *(void *)(v112 + 664);
      uint64_t v83 = *(void *)(v112 + 560);
      uint64_t v80 = *(void *)(v112 + 504);

      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v81, v82);
      objc_msgSend(v109, sel_doubleValue);
      uint64_t v94 = v4;

      outlined destroy of [HKQuantityType]();
      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v85, v84);
      unint64_t v93 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
      v93(v87, v92);
      v90(v88, v89);
      v93(v91, v92);
      swift_bridgeObjectRelease();
      unint64_t v95 = v94;
    }
    else
    {
      uint64_t v5 = *(void *)(v112 + 744);
      *(void *)(v112 + 328) = *(void *)(v112 + 736);
      lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
      uint64_t result = Sequence.sorted(by:)();
      if (v5) {
        return result;
      }
      outlined destroy of [HKQuantityType]();
      *(void *)(v112 + 336) = result;
      lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
      BidirectionalCollection.reversed()();
      uint64_t v78 = *(void *)(v112 + 320);
      *(void *)(v112 + 344) = v78;
      swift_bridgeObjectRetain();
      *(void *)(v112 + 360) = v78;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ReversedCollection<[HKMedicationExposableDoseEvent]>);
      lazy protocol witness table accessor for type ReversedCollection<[HKMedicationExposableDoseEvent]> and conformance ReversedCollection<A>();
      Collection.first.getter();
      outlined destroy of [HKQuantityType]();
      uint64_t v79 = *(id *)(v112 + 352);
      if (v79)
      {
        uint64_t v76 = objc_msgSend(v79, sel_doseQuantity);

        uint64_t v77 = v76;
      }
      else
      {
        uint64_t v77 = 0;
      }
      if (v77)
      {
        uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v112 + 704);
        uint64_t v72 = *(void *)(v112 + 696);
        uint64_t v68 = *(void *)(v112 + 688);
        uint64_t v73 = *(void *)(v112 + 656);
        uint64_t v69 = *(void *)(v112 + 648);
        uint64_t v70 = *(void *)(v112 + 624);
        uint64_t v66 = *(void *)(v112 + 568);
        uint64_t v65 = *(void *)(v112 + 552);
        uint64_t v67 = *(void *)(v112 + 664);
        uint64_t v64 = *(void *)(v112 + 560);
        *(void *)(v112 + 408) = v77;
        objc_msgSend(v77, sel_doubleValue);
        uint64_t v75 = v6;

        swift_bridgeObjectRelease();
        outlined destroy of [HKQuantityType]();
        (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v66, v65);
        uint64_t v74 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
        v74(v68, v73);
        v71(v69, v70);
        v74(v72, v73);
        swift_bridgeObjectRelease();
        unint64_t v95 = v75;
      }
      else
      {
        uint64_t v7 = *(void *)(v112 + 536);
        uint64_t v59 = *(void *)(v112 + 496);
        uint64_t v57 = *(void *)(v112 + 504);
        uint64_t v58 = Logger.wellnessIntents.unsafeMutableAddressor();
        swift_beginAccess();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v7, v58, v59);
        swift_endAccess();
        os_log_t oslog = Logger.logObject.getter();
        uint64_t v61 = static os_log_type_t.debug.getter();
        *(void *)(v112 + 368) = 2;
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t size = *(_DWORD *)(v112 + 764);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v63 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(oslog, v61))
        {
          char v53 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v54 = createStorage<A>(capacity:type:)(0);
          char v55 = createStorage<A>(capacity:type:)(0);
          *(void *)(v112 + 376) = v53;
          *(void *)(v112 + 384) = v54;
          *(void *)(v112 + 392) = v55;
          serialize(_:at:)(0, (unsigned char **)(v112 + 376));
          serialize(_:at:)(0, (unsigned char **)(v112 + 376));
          *(void *)(v112 + 400) = v63;
          uint64_t v56 = (void *)swift_task_alloc();
          v56[2] = v112 + 376;
          v56[3] = v112 + 384;
          v56[4] = v112 + 392;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          swift_task_dealloc();
          _os_log_impl(&dword_25DE00000, oslog, v61, "No previously logged As Needed dose events in health app. Falling back to dosage == 1.", v53, size);
          destroyStorage<A>(_:count:)(v54, 0, v52);
          destroyStorage<A>(_:count:)(v55, 0, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](v53, MEMORY[0x263F8E778]);
        }
        swift_bridgeObjectRelease();
        uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v112 + 704);
        char v49 = *(void *)(v112 + 696);
        char v45 = *(void *)(v112 + 688);
        uint64_t v50 = *(void *)(v112 + 656);
        uint64_t v46 = *(void *)(v112 + 648);
        char v47 = *(void *)(v112 + 624);
        char v43 = *(void *)(v112 + 568);
        uint64_t v42 = *(void *)(v112 + 552);
        char v39 = *(void *)(v112 + 536);
        uint64_t v40 = *(void *)(v112 + 496);
        uint64_t v44 = *(void *)(v112 + 664);
        char v41 = *(void *)(v112 + 560);
        uint64_t v38 = *(void *)(v112 + 504);

        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v40);
        swift_bridgeObjectRelease();
        outlined destroy of [HKQuantityType]();
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v43, v42);
        char v51 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
        v51(v45, v50);
        v48(v46, v47);
        v51(v49, v50);
        swift_bridgeObjectRelease();
        unint64_t v95 = 1.0;
      }
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v10.n128_f64[0] = v95;
  uint64_t v11 = *(uint64_t (**)(__n128))(*(void *)(v112 + 184) + 8);
  return v11(v10);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  uint64_t (*v6)(__n128);
  __n128 v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint8_t *buf;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint32_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  uint64_t v48 = v0;
  uint64_t v32 = *(id *)(v0 + 744);
  uint64_t v1 = *(void **)(v0 + 720);
  uint64_t v2 = *(void *)(v0 + 512);
  uint64_t v29 = *(void *)(v0 + 504);
  uint64_t v31 = *(void *)(v0 + 496);
  *(void *)(v0 + 184) = v0;

  uint64_t v3 = v32;
  *(void *)(v0 + 240) = v32;
  uint64_t v30 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v2, v30, v31);
  swift_endAccess();
  uint64_t v4 = v32;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = v32;
  default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
  swift_bridgeObjectRelease();
  char v41 = Logger.logObject.getter();
  uint64_t v42 = static os_log_type_t.error.getter();
  *(void *)(v0 + 248) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  __n128 v33 = *(_DWORD *)(v0 + 756);
  char v37 = swift_allocObject();
  *(unsigned char *)(v37 + 16) = 64;
  uint64_t v38 = swift_allocObject();
  *(unsigned char *)(v38 + 16) = 8;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  *(void *)(v35 + 24) = v34;
  uint64_t v36 = swift_allocObject();
  *(void *)(v36 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  *(void *)(v36 + 24) = v35;
  char v39 = swift_allocObject();
  *(void *)(v39 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v39 + 24) = v36;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v40 = v5;
  swift_retain();
  *uint64_t v40 = partial apply for closure #1 in OSLogArguments.append(_:);
  v40[1] = v37;
  swift_retain();
  v40[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v40[3] = v38;
  swift_retain();
  v40[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v40[5] = v39;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v41, v42))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v26 = createStorage<A>(capacity:type:)(1);
    uint64_t v27 = createStorage<A>(capacity:type:)(0);
    char v43 = buf;
    uint64_t v44 = v26;
    char v45 = v27;
    serialize(_:at:)(2, &v43);
    serialize(_:at:)(1, &v43);
    uint64_t v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    char v47 = v37;
    closure #1 in osLogInternal(_:log:type:)(&v46, (uint64_t)&v43, (uint64_t)&v44, (uint64_t)&v45);
    uint64_t v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    char v47 = v38;
    closure #1 in osLogInternal(_:log:type:)(&v46, (uint64_t)&v43, (uint64_t)&v44, (uint64_t)&v45);
    uint64_t v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    char v47 = v39;
    closure #1 in osLogInternal(_:log:type:)(&v46, (uint64_t)&v43, (uint64_t)&v44, (uint64_t)&v45);
    _os_log_impl(&dword_25DE00000, v41, v42, "Failed to write doseEvents: %@. Falling back to dosage == 1.", buf, v33);
    destroyStorage<A>(_:count:)(v26, 1, v24);
    destroyStorage<A>(_:count:)(v27, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v12 = (id)v28[93];
  uint64_t v20 = (void (*)(uint64_t, uint64_t))v28[88];
  uint64_t v21 = v28[87];
  uint64_t v17 = v28[86];
  uint64_t v22 = v28[82];
  uint64_t v18 = v28[81];
  uint64_t v19 = v28[78];
  uint64_t v14 = v28[71];
  uint64_t v15 = v28[69];
  uint64_t v10 = v28[64];
  uint64_t v11 = v28[62];
  uint64_t v16 = v28[83];
  uint64_t v13 = v28[70];
  uint64_t v9 = v28[63];

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v23(v17, v22);
  v20(v18, v19);
  v23(v21, v22);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(__n128))(v28[23] + 8);
  v7.n128_u64[0] = 1.0;
  return v6(v7);
}

uint64_t SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:)(uint64_t a1)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 184) = *v2;
  *(void *)(v5 + 736) = a1;
  *(void *)(v5 + 744) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:);
  }
  else
  {

    uint64_t v3 = SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t implicit closure #2 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_scheduleID);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_name);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #5 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_schedule);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #6 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_loggedTime);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #10 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(void *a1)
{
  return String.init<A>(describing:)();
}

uint64_t implicit closure #11 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_strengthUnit);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #12 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_completionStatus);
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type String? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #12 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for SpecificMedicationsPersisting.isLoggingAuthorized() in conformance SpecificMedicationsPersistor()
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v6 = *(void **)v0;
  uint64_t v5 = *(void *)(v0 + 8);
  id v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *id v2 = *(void *)(v4 + 16);
  v2[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return SpecificMedicationsPersistor.isLoggingAuthorized()(v6, v5);
}

uint64_t protocol witness for SpecificMedicationsPersisting.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:) in conformance SpecificMedicationsPersistor(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  uint64_t v11 = v8;
  *(void *)(v8 + 16) = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v11 + 24) = v9;
  *uint64_t v9 = *(void *)(v11 + 16);
  v9[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return SpecificMedicationsPersistor.save(startTime:endTime:hasMeridiem:medicationIDs:medStatusTaken:dosage:dosageUnit:)(a1, a2, a3 & 1, a4, a5 & 1, a6, a7 & 1, a8);
}

uint64_t protocol witness for SpecificMedicationsPersisting.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:) in conformance SpecificMedicationsPersistor(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = v8;
  *(void *)(v8 + 16) = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v11 + 24) = v9;
  *uint64_t v9 = *(void *)(v11 + 16);
  v9[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(a1, a2, a3, a4 & 1, a5, a6 & 1, a7, a8);
}

uint64_t protocol witness for SpecificMedicationsPersisting.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:) in conformance SpecificMedicationsPersistor(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = v8;
  *(void *)(v8 + 16) = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v11 + 24) = v9;
  *uint64_t v9 = *(void *)(v11 + 16);
  v9[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)(a1, a2, a3 & 1, a4, a5 & 1, a6, a7, a8);
}

uint64_t protocol witness for SpecificMedicationsPersisting.displayNameFor(identifier:) in conformance SpecificMedicationsPersistor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v8 = *v2;
  uint64_t v9 = v2[1];
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for SpecificMedicationsPersisting.displayNameFor(identifier:) in conformance SpecificMedicationsPersistor;
  return SpecificMedicationsPersistor.displayNameFor(identifier:)(a1, a2, v8, v9);
}

{
  uint64_t *v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v8;

  uint64_t v5 = *v2;
  *(void *)(v5 + 16) = *v2;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 + 16) + 8);
  return v3(a1, a2);
}

uint64_t protocol witness for SpecificMedicationsPersisting.sampleScheduleIDFor(dateInterval:) in conformance SpecificMedicationsPersistor(uint64_t a1)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v6 = *v1;
  uint64_t v7 = v1[1];
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  void *v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for SpecificMedicationsPersisting.displayNameFor(identifier:) in conformance SpecificMedicationsPersistor;
  return SpecificMedicationsPersistor.sampleScheduleIDFor(dateInterval:)(a1, v6, v7);
}

uint64_t SpecificMedicationsPersistor.sampleScheduleIDFor(dateInterval:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[12] = v3;
  v3[13] = 0;
  v3[8] = 0;
  v3[9] = 0;
  v3[14] = 0;
  v3[15] = 0;
  v3[10] = 0;
  v3[11] = 0;
  uint64_t v4 = type metadata accessor for Logger();
  v3[24] = v4;
  v3[25] = *(void *)(v4 - 8);
  v3[26] = swift_task_alloc();
  v3[27] = swift_task_alloc();
  v3[13] = a1;
  v3[8] = a2;
  v3[9] = a3;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 224) = v5;
  *uint64_t v5 = *(void *)(v7 + 96);
  v5[1] = SpecificMedicationsPersistor.sampleScheduleIDFor(dateInterval:);
  return SpecificMedicationsPersistor.getDoseEvents(for:medicationIdentifier:)(a1, 0, a2, a3);
}

uint64_t SpecificMedicationsPersistor.sampleScheduleIDFor(dateInterval:)(uint64_t a1)
{
  uint64_t v5 = (void *)*v2;
  v5[12] = *v2;
  v5[29] = a1;
  v5[30] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = SpecificMedicationsPersistor.sampleScheduleIDFor(dateInterval:);
  }
  else
  {
    uint64_t v3 = SpecificMedicationsPersistor.sampleScheduleIDFor(dateInterval:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

uint64_t SpecificMedicationsPersistor.sampleScheduleIDFor(dateInterval:)()
{
  char v41 = v0;
  uint64_t v34 = v0[29];
  v0[12] = v0;
  swift_bridgeObjectRetain();
  v0[14] = v34;
  swift_bridgeObjectRetain();
  v0[22] = v34;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [HKQuantityType]();
  uint64_t v35 = (void *)v0[21];
  swift_bridgeObjectRelease();
  if (v35)
  {
    id v32 = objc_msgSend(v35, sel_scheduleItemIdentifier);
    if (v32)
    {
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v29 = v1;

      uint64_t v30 = v28;
      uint64_t v31 = v29;
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = 0;
    }

    uint64_t v26 = v30;
    uint64_t v27 = v31;
  }
  else
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  uint64_t v2 = *(void *)(v33 + 216);
  uint64_t v16 = *(void *)(v33 + 192);
  uint64_t v14 = *(void *)(v33 + 200);
  *(void *)(v33 + 80) = v26;
  *(void *)(v33 + 88) = v27;
  uint64_t v15 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v2, v15, v16);
  swift_endAccess();
  swift_bridgeObjectRetain();
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v26;
  *(void *)(v18 + 24) = v27;
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  *(void *)(v33 + 184) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v33 + 252);
  uint64_t v20 = swift_allocObject();
  *(unsigned char *)(v20 + 16) = 32;
  uint64_t v21 = swift_allocObject();
  *(unsigned char *)(v21 + 16) = 8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:);
  *(void *)(v19 + 24) = v18;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v22 + 24) = v19;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v23 = v3;
  swift_retain();
  *uint64_t v23 = partial apply for closure #1 in OSLogArguments.append(_:);
  v23[1] = v20;
  swift_retain();
  v23[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v23[3] = v21;
  swift_retain();
  v23[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v23[5] = v22;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v4 = *(void *)(v33 + 240);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    uint64_t v13 = createStorage<A>(capacity:type:)(1);
    uint64_t v36 = buf;
    uint64_t v37 = v12;
    uint64_t v38 = v13;
    serialize(_:at:)(2, &v36);
    serialize(_:at:)(1, &v36);
    char v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v40 = v20;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    if (v4) {
      return result;
    }
    char v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v40 = v21;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    char v39 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v40 = v22;
    closure #1 in osLogInternal(_:log:type:)(&v39, (uint64_t)&v36, (uint64_t)&v37, (uint64_t)&v38);
    _os_log_impl(&dword_25DE00000, v24, v25, "got scheduleItemIdentifier: %s", buf, size);
    destroyStorage<A>(_:count:)(v12, 0, v10);
    destroyStorage<A>(_:count:)(v13, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v8 = *(void *)(v33 + 216);
  uint64_t v9 = *(void *)(v33 + 192);
  uint64_t v7 = *(void *)(v33 + 200);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  outlined destroy of [HKQuantityType]();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v33 + 96) + 8);
  return v6(v26, v27);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v15 = *(void **)(v0 + 240);
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v16 = *(void *)(v0 + 200);
  uint64_t v18 = *(void *)(v0 + 192);
  *(void *)(v0 + 96) = v0;
  uint64_t v2 = v15;
  *(void *)(v0 + 120) = v15;
  uint64_t v17 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v1, v17, v18);
  swift_endAccess();
  uint64_t v21 = Logger.logObject.getter();
  uint64_t v20 = static os_log_type_t.error.getter();
  *(void *)(v0 + 128) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v19 = *(unsigned int *)(v0 + 248);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v22 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v21, v20))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 136) = buf;
    *(void *)(v14 + 144) = v11;
    *(void *)(v14 + 152) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 136));
    serialize(_:at:)(0, (unsigned char **)(v14 + 136));
    *(void *)(v14 + 160) = v22;
    uint64_t v13 = (void *)swift_task_alloc();
    void v13[2] = v14 + 136;
    v13[3] = v14 + 144;
    void v13[4] = v14 + 152;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v21, v20, "Failed fetching dose events for specified timeframe.", buf, v19);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = *(id *)(v14 + 240);
  uint64_t v6 = *(void *)(v14 + 208);
  uint64_t v7 = *(void *)(v14 + 192);
  uint64_t v5 = *(void *)(v14 + 200);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v14 + 96) + 8);
  return v3(0);
}

uint64_t protocol witness for SpecificMedicationsPersisting.buildMatchedMedName(from:shouldIncludeAsNeededParams:) in conformance SpecificMedicationsPersistor(uint64_t a1, char a2)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v8 = *v2;
  uint64_t v9 = v2[1];
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(a1, a2 & 1, v8, v9);
}

uint64_t SpecificMedicationsPersistor.doUTCQueryForMedications()(uint64_t a1, uint64_t a2)
{
  v2[7] = a2;
  v2[6] = a1;
  v2[4] = v2;
  void v2[2] = 0;
  v2[3] = 0;
  void v2[2] = a1;
  v2[3] = a2;
  return MEMORY[0x270FA2498](SpecificMedicationsPersistor.doUTCQueryForMedications(), 0);
}

uint64_t SpecificMedicationsPersistor.doUTCQueryForMedications()()
{
  id v8 = (id)v0[7];
  id v7 = (id)v0[6];
  v0[4] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("doUTCQueryForMedications()", 0x1AuLL, 1);
  v0[8] = v1._object;
  id v2 = v7;
  id v3 = v8;
  uint64_t v10 = swift_task_alloc();
  v0[9] = v10;
  *(void *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v8;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v9 + 80) = v4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  *uint64_t v4 = *(void *)(v9 + 32);
  v4[1] = SpecificMedicationsPersistor.doUTCQueryForMedications();
  return MEMORY[0x270FA2360](v9 + 40, 0, 0, v1._countAndFlagsBits, v1._object, partial apply for closure #1 in SpecificMedicationsPersistor.doUTCQueryForMedications(), v10, v5);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  uint64_t v6 = (void *)*v1;
  v6[4] = *v1;
  v6[11] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = SpecificMedicationsPersistor.doUTCQueryForMedications();
  }
  else
  {
    uint64_t v5 = (void *)v6[7];
    uint64_t v4 = (void *)v6[6];
    swift_task_dealloc();

    swift_bridgeObjectRelease();
    id v2 = SpecificMedicationsPersistor.doUTCQueryForMedications();
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 32) = v0;
  return (*(uint64_t (**)(void))(*(void *)(v0 + 32) + 8))(*(void *)(v0 + 40));
}

{
  void *v0;
  uint64_t (*v1)();
  id v3;
  id v4;
  uint64_t v5;

  uint64_t v4 = (id)v0[7];
  id v3 = (id)v0[6];
  v0[4] = v0;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  Swift::String v1 = *(uint64_t (**)())(v0[4] + 8);
  return v1();
}

void closure #1 in SpecificMedicationsPersistor.doUTCQueryForMedications()(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v18 = a1;
  id v19 = a2;
  uint64_t v20 = a3;
  uint64_t v28 = 0;
  uint64_t v14 = partial apply for closure #1 in closure #1 in SpecificMedicationsPersistor.doUTCQueryForMedications();
  uint64_t v15 = "Fatal error";
  uint64_t v16 = "Unexpectedly found nil while implicitly unwrapping an Optional value";
  uint64_t v17 = "SiriWellnessIntents/LogSpecificMedicationsIntentHandler.swift";
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  id v32 = 0;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HKUserTrackedMedication], Error>);
  uint64_t v23 = *(void *)(v21 - 8);
  uint64_t v22 = v21 - 8;
  uint64_t v24 = v23;
  uint64_t v25 = *(void *)(v23 + 64);
  unint64_t v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v27 = (char *)&v8 - v26;
  uint64_t v35 = v3;
  uint64_t v33 = v4;
  uint64_t v34 = v5;
  unint64_t v29 = type metadata accessor for HKUserTrackedConceptQuery();
  type metadata accessor for HKUserTrackedConceptType();
  uint64_t v30 = (void *)*MEMORY[0x263F0A020];
  id v6 = v30;
  id v31 = HKUserTrackedConceptType.__allocating_init(identifier:)(v30);
  if (v31)
  {
    uint64_t v13 = v31;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t v11 = v13;
  uint64_t v8 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v27, v18, v21);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v23 + 32))(v10 + v9, v27, v21);
  id v12 = HKUserTrackedConceptQuery.__allocating_init(userTrackedConceptType:predicate:sortDescriptors:resultsHandler:)(v11, 0, 0, (uint64_t)v14, v10);
  id v32 = v12;
  id v7 = v19;
  objc_msgSend(v19, sel_executeQuery_, v12);
}

id HKUserTrackedConceptType.__allocating_init(identifier:)(void *a1)
{
  id v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKUserTrackedConceptType.init(identifier:)(a1);
}

void closure #1 in closure #1 in SpecificMedicationsPersistor.doUTCQueryForMedications()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v114 = a1;
  uint64_t v116 = a2;
  uint64_t v125 = a3;
  uint64_t v115 = a4;
  uint64_t v107 = partial apply for implicit closure #1 in closure #1 in closure #1 in HKHealthStore.query(correlationType:firstQuantityType:secondQuantityType:start:end:);
  uint64_t v108 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  id v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v111 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v112 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v157 = 0;
  uint64_t v156 = 0;
  id v155 = 0;
  uint64_t v154 = 0;
  uint64_t v113 = 0;
  uint64_t v145 = 0;
  uint64_t v144 = 0;
  uint64_t v142 = 0;
  uint64_t v143 = 0;
  id v138 = 0;
  id v137 = 0;
  unint64_t v135 = 0;
  uint64_t v117 = type metadata accessor for Logger();
  uint64_t v118 = *(void *)(v117 - 8);
  uint64_t v119 = v117 - 8;
  uint64_t v121 = *(void *)(v118 + 64);
  unint64_t v120 = (v121 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = MEMORY[0x270FA5388](v125);
  uint64_t v122 = (char *)v34 - v120;
  unint64_t v123 = v120;
  uint64_t v5 = (void *)MEMORY[0x270FA5388](v4);
  uint64_t v124 = (char *)v34 - v123;
  uint64_t v157 = v6;
  uint64_t v156 = v7;
  id v155 = v5;
  uint64_t v154 = v8;
  id v9 = v5;
  if (v125)
  {
    uint64_t v106 = v125;
    uint64_t v10 = v124;
    id v87 = v125;
    unint64_t v135 = v125;
    uint64_t v85 = Logger.wellnessIntents.unsafeMutableAddressor();
    os_log_type_t v86 = &v134;
    uint64_t v93 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v10, v85, v117);
    swift_endAccess();
    id v11 = v87;
    uint64_t v94 = 7;
    uint64_t v95 = swift_allocObject();
    *(void *)(v95 + 16) = v87;
    uint64_t v103 = Logger.logObject.getter();
    int v104 = static os_log_type_t.error.getter();
    uint64_t v90 = &v132;
    uint64_t v132 = 12;
    unint64_t v88 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v89 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v91 = v133;
    uint64_t v92 = 17;
    uint64_t v97 = swift_allocObject();
    *(unsigned char *)(v97 + 16) = 64;
    uint64_t v98 = swift_allocObject();
    *(unsigned char *)(v98 + 16) = 8;
    uint64_t v12 = swift_allocObject();
    uint64_t v13 = v95;
    uint64_t v96 = v12;
    *(void *)(v12 + 16) = v107;
    *(void *)(v12 + 24) = v13;
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = v96;
    uint64_t v100 = v14;
    *(void *)(v14 + 16) = v108;
    *(void *)(v14 + 24) = v15;
    uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v99 = _allocateUninitializedArray<A>(_:)();
    uint64_t v101 = v16;
    swift_retain();
    uint64_t v17 = v97;
    uint64_t v18 = v101;
    *uint64_t v101 = v109;
    v18[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v17;
    swift_retain();
    uint64_t v19 = v98;
    uint64_t v20 = v101;
    void v101[2] = v110;
    v20[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v19;
    swift_retain();
    uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v100;
    uint64_t v22 = v101;
    v101[4] = v111;
    v22[5] = v21;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v103, (os_log_type_t)v104))
    {
      uint64_t v23 = v113;
      uint64_t v78 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v79 = createStorage<A>(capacity:type:)(1);
      uint64_t v80 = createStorage<A>(capacity:type:)(0);
      uint64_t v81 = &v130;
      uint64_t v130 = v78;
      int v82 = &v129;
      uint64_t v129 = v79;
      uint64_t v83 = &v128;
      uint64_t v128 = v80;
      serialize(_:at:)(2, &v130);
      serialize(_:at:)(1, v81);
      uint64_t v126 = v109;
      uint64_t v127 = v97;
      closure #1 in osLogInternal(_:log:type:)(&v126, (uint64_t)v81, (uint64_t)v82, (uint64_t)v83);
      uint64_t v84 = v23;
      if (v23)
      {
        __break(1u);
      }
      else
      {
        uint64_t v126 = v110;
        uint64_t v127 = v98;
        closure #1 in osLogInternal(_:log:type:)(&v126, (uint64_t)&v130, (uint64_t)&v129, (uint64_t)&v128);
        uint64_t v76 = 0;
        uint64_t v126 = v111;
        uint64_t v127 = v100;
        closure #1 in osLogInternal(_:log:type:)(&v126, (uint64_t)&v130, (uint64_t)&v129, (uint64_t)&v128);
        _os_log_impl(&dword_25DE00000, v103, (os_log_type_t)v104, "Error while querying HealthKit for medication samples: %@", v78, v91);
        destroyStorage<A>(_:count:)(v79, 1, v77);
        destroyStorage<A>(_:count:)(v80, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v78, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v118 + 8))(v124, v117);
    id v24 = v87;
    uint64_t v75 = &v131;
    id v131 = v87;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HKUserTrackedMedication], Error>);
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    swift_bridgeObjectRetain();
    if (v116)
    {
      uint64_t v105 = v116;
      uint64_t v63 = v116;
      uint64_t v145 = v116;
      uint64_t v62 = 0;
      type metadata accessor for HKUserTrackedMedication();
      uint64_t v144 = _allocateUninitializedArray<A>(_:)();
      swift_bridgeObjectRetain();
      uint64_t v141 = v63;
      uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedConcept]);
      lazy protocol witness table accessor for type [HKUserTrackedConcept] and conformance [A]();
      Collection<>.makeIterator()();
      for (uint64_t i = v113; ; uint64_t i = v60)
      {
        uint64_t v60 = i;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKUserTrackedConcept]>);
        IndexingIterator.next()();
        id v61 = v140;
        if (!v140) {
          break;
        }
        id v59 = v61;
        id v54 = v61;
        id v138 = v61;
        id v26 = v61;
        self;
        uint64_t v27 = swift_dynamicCastObjCClass();
        char v55 = (void *)v27;
        if (v27)
        {
          char v53 = v55;
        }
        else
        {
          uint64_t v52 = 0;

          char v53 = v52;
        }
        id v51 = v53;
        if (v53)
        {
          id v50 = v51;
          id v49 = v51;
          id v137 = v51;
          id v28 = v51;
          uint64_t v48 = &v136;
          id v136 = v49;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
          Array.append(_:)();
        }
      }
      outlined destroy of [HKQuantityType]();
      uint64_t v58 = &v144;
      uint64_t v56 = v144;
      swift_bridgeObjectRetain();
      uint64_t v57 = &v139;
      uint64_t v139 = v56;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HKUserTrackedMedication], Error>);
      CheckedContinuation.resume(returning:)();
      outlined destroy of [HKQuantityType]();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v25 = v122;
      uint64_t v66 = Logger.wellnessIntents.unsafeMutableAddressor();
      uint64_t v67 = &v153;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v118 + 16))(v25, v66, v117);
      swift_endAccess();
      uint64_t v73 = Logger.logObject.getter();
      int v72 = static os_log_type_t.error.getter();
      uint64_t v70 = &v151;
      uint64_t v151 = 2;
      unint64_t v68 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v69 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v71 = v152;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v74 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v73, (os_log_type_t)v72))
      {
        uint64_t v29 = v113;
        uint64_t v38 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v37 = 0;
        uint64_t v39 = createStorage<A>(capacity:type:)(0);
        uint64_t v40 = createStorage<A>(capacity:type:)(v37);
        uint64_t v44 = &v149;
        uint64_t v149 = v38;
        char v45 = &v148;
        uint64_t v148 = v39;
        uint64_t v42 = &v147;
        uint64_t v147 = v40;
        unsigned int v41 = 0;
        serialize(_:at:)(0, &v149);
        serialize(_:at:)(v41, v44);
        uint64_t v146 = v74;
        char v43 = v34;
        MEMORY[0x270FA5388](v34);
        uint64_t v30 = v45;
        id v31 = &v34[-6];
        uint64_t v46 = &v34[-6];
        v31[2] = v44;
        v31[3] = v30;
        v31[4] = v32;
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v29)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_25DE00000, v73, (os_log_type_t)v72, "No dose events found using HKUserTrackedConceptQuery, returning empty array", v38, v71);
          uint64_t v35 = 0;
          destroyStorage<A>(_:count:)(v39, 0, v36);
          destroyStorage<A>(_:count:)(v40, v35, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](v38, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v118 + 8))(v122, v117);
      v34[1] = 0;
      type metadata accessor for HKUserTrackedMedication();
      uint64_t v33 = _allocateUninitializedArray<A>(_:)();
      v34[2] = &v150;
      uint64_t v150 = v33;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HKUserTrackedMedication], Error>);
      CheckedContinuation.resume(returning:)();
    }
  }
}

id HKUserTrackedConceptQuery.__allocating_init(userTrackedConceptType:predicate:sortDescriptors:resultsHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v5 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKUserTrackedConceptQuery.init(userTrackedConceptType:predicate:sortDescriptors:resultsHandler:)(a1, a2, a3, a4, a5);
}

uint64_t SpecificMedicationsPersistor.UTCQuery()(uint64_t a1, uint64_t a2)
{
  v2[17] = v2;
  v2[5] = 0;
  v2[6] = 0;
  v2[18] = 0;
  v2[19] = 0;
  v2[7] = 0;
  v2[8] = 0;
  v2[22] = 0;
  v2[9] = 0;
  v2[10] = 0;
  v2[11] = 0;
  v2[12] = 0;
  uint64_t v3 = type metadata accessor for Logger();
  v2[24] = v3;
  v2[25] = *(void *)(v3 - 8);
  v2[26] = swift_task_alloc();
  v2[5] = a1;
  v2[6] = a2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 216) = v4;
  *uint64_t v4 = *(void *)(v6 + 136);
  v4[1] = SpecificMedicationsPersistor.UTCQuery();
  return SpecificMedicationsPersistor.doUTCQueryForMedications()(a1, a2);
}

uint64_t SpecificMedicationsPersistor.UTCQuery()(uint64_t a1)
{
  uint64_t v6 = (void *)*v2;
  v6[17] = *v2;
  v6[28] = a1;
  v6[29] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(uint64_t))(v6[17] + 8);
    return v4(v3);
  }
  else
  {
    return MEMORY[0x270FA2498](SpecificMedicationsPersistor.UTCQuery(), 0);
  }
}

uint64_t SpecificMedicationsPersistor.UTCQuery()()
{
  id v50 = v0;
  uint64_t v43 = v0[28];
  v0[17] = v0;
  v0[18] = v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, String));
  _allocateUninitializedArray<A>(_:)();
  v0[19] = Dictionary.init(dictionaryLiteral:)();
  swift_bridgeObjectRetain();
  v0[20] = v43;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
  Collection<>.makeIterator()();
  uint64_t v44 = v0[29];
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKUserTrackedMedication]>);
    IndexingIterator.next()();
    unsigned int v41 = *(void **)(v42 + 168);
    if (!v41) {
      break;
    }
    uint64_t v1 = *(void *)(v42 + 208);
    uint64_t v30 = *(void *)(v42 + 192);
    uint64_t v28 = *(void *)(v42 + 200);
    *(void *)(v42 + 176) = v41;
    uint64_t v29 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v1, v29, v30);
    swift_endAccess();
    id v2 = v41;
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = v41;
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.debug.getter();
    *(void *)(v42 + 184) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v42 + 240);
    uint64_t v34 = swift_allocObject();
    *(unsigned char *)(v34 + 16) = 32;
    uint64_t v35 = swift_allocObject();
    *(unsigned char *)(v35 + 16) = 8;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = partial apply for implicit closure #1 in SpecificMedicationsPersistor.UTCQuery();
    *(void *)(v33 + 24) = v32;
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v36 + 24) = v33;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    uint64_t v37 = v3;
    swift_retain();
    *uint64_t v37 = partial apply for closure #1 in OSLogArguments.append(_:);
    v37[1] = v34;
    swift_retain();
    v37[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    void v37[3] = v35;
    swift_retain();
    v37[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v37[5] = v36;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v38, v39))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v26 = createStorage<A>(capacity:type:)(0);
      uint64_t v27 = createStorage<A>(capacity:type:)(1);
      char v45 = buf;
      uint64_t v46 = v26;
      uint64_t v47 = v27;
      serialize(_:at:)(2, &v45);
      serialize(_:at:)(1, &v45);
      uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v49 = v34;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v48, (uint64_t)&v45, (uint64_t)&v46, (uint64_t)&v47);
      if (v44) {
        return result;
      }
      uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v49 = v35;
      closure #1 in osLogInternal(_:log:type:)(&v48, (uint64_t)&v45, (uint64_t)&v46, (uint64_t)&v47);
      uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v49 = v36;
      closure #1 in osLogInternal(_:log:type:)(&v48, (uint64_t)&v45, (uint64_t)&v46, (uint64_t)&v47);
      _os_log_impl(&dword_25DE00000, v38, v39, "Got a medication: %s", buf, size);
      destroyStorage<A>(_:count:)(v26, 0, v24);
      destroyStorage<A>(_:count:)(v27, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v22 = 0;
      uint64_t v23 = 0;
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      uint64_t v22 = v44;
      uint64_t v23 = v40;
    }
    uint64_t v10 = *(void *)(v42 + 208);
    uint64_t v11 = *(void *)(v42 + 192);
    uint64_t v9 = *(void *)(v42 + 200);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    id v12 = [v41 (SEL)0x1F682527FLL];
    id v13 = objc_msgSend(v12, sel_identifier);

    id v14 = objc_msgSend(v13, sel_underlyingIdentifier);
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v21 = v5;
    *(void *)(v42 + 72) = v18;
    *(void *)(v42 + 80) = v5;

    id v15 = [v41 (SEL)0x1F682527FLL];
    id v16 = objc_msgSend(v15, sel_displayNameComponents);

    id v17 = objc_msgSend(v16, sel_medicationDisplayName);
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v20 = v6;
    *(void *)(v42 + 88) = v19;
    *(void *)(v42 + 96) = v6;

    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    *(void *)(v42 + 104) = v19;
    *(void *)(v42 + 112) = v20;
    *(void *)(v42 + 120) = v18;
    *(void *)(v42 + 128) = v21;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
    Dictionary.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v44 = v22;
    uint64_t v40 = v23;
  }
  outlined destroy of [HKQuantityType]();
  uint64_t v8 = *(void *)(v42 + 152);
  swift_bridgeObjectRetain();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)(v42 + 136) + 8);
  return v7(v8);
}

uint64_t implicit closure #1 in SpecificMedicationsPersistor.UTCQuery()(void *a1)
{
  id v2 = objc_msgSend(a1, sel_medication);
  id v3 = objc_msgSend(v2, sel_displayNameComponents);

  id v4 = objc_msgSend(v3, sel_medicationDisplayName);
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t closure #1 in SpecificMedicationsPersistor.getAsNeededDosageFromHealthApp(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a1;
  v7[1] = a2;
  id v24 = 0;
  id v23 = 0;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v18 - 8);
  uint64_t v14 = v18 - 8;
  unint64_t v9 = (*(void *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v2 = MEMORY[0x270FA5388](v8);
  id v15 = (char *)v7 - v9;
  unint64_t v10 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  id v4 = (id *)MEMORY[0x270FA5388](v2);
  id v17 = (char *)v7 - v10;
  id v24 = *v4;
  id v12 = *v5;
  id v23 = v12;
  unint64_t v11 = 0x1F6B15000uLL;
  id v21 = [v24 (SEL)0x1F6B15B18];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  id v16 = [v12 (SEL)(v11 + 2840)];
  static Date._unconditionallyBridgeFromObjectiveC(_:)();
  int v22 = static Date.< infix(_:_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v13 + 8);
  uint64_t v19 = v13 + 8;
  v20(v15, v18);

  v20(v17, v18);
  return v22 & 1;
}

uint64_t closure #1 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(id *a1)
{
  id v2 = objc_msgSend(*a1, sel_medication);
  id v3 = objc_msgSend(v2, sel_identifier);

  id v4 = objc_msgSend(v3, sel_underlyingIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  char v5 = Sequence<>.contains(_:)();
  outlined destroy of String.UTF8View();

  return v5 & 1;
}

uint64_t closure #2 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(id *a1, char a2)
{
  if (a2) {
    unsigned int v3 = objc_msgSend(*a1, sel_hasSchedule) ^ 1;
  }
  else {
    LOBYTE(v3) = 1;
  }
  return v3 & 1;
}

uint64_t closure #3 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v143 = a1;
  double v142 = *(double *)&a2;
  int v141 = a3;
  uint64_t v139 = a4;
  uint64_t v140 = a5;
  uint32_t v133 = partial apply for implicit closure #4 in LogQuantityIntentHandler.handle(intent:);
  char v134 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  unint64_t v135 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v136 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v137 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  id v138 = partial apply for closure #1 in osLogInternal(_:log:type:);
  id v186 = 0;
  uint64_t v184 = 0;
  char v185 = 0;
  uint64_t v182 = 0;
  uint64_t v183 = 0;
  double v181 = 0.0;
  uint64_t v179 = 0;
  uint64_t v180 = 0;
  uint64_t v170 = 0;
  uint64_t v171 = 0;
  uint64_t v167 = 0;
  double v158 = 0.0;
  uint64_t v152 = 0;
  uint64_t v153 = 0;
  uint64_t v144 = type metadata accessor for Logger();
  uint64_t v145 = *(void *)(v144 - 8);
  uint64_t v146 = v144 - 8;
  unint64_t v147 = (*(void *)(v145 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v5 = MEMORY[0x270FA5388](v143);
  uint64_t v148 = (char *)&v38 - v147;
  unint64_t v149 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v7 = (id *)MEMORY[0x270FA5388](v5);
  uint64_t v150 = (char *)&v38 - v149;
  id v151 = *v7;
  id v186 = v151;
  uint64_t v184 = v8;
  char v185 = v9 & 1;
  uint64_t v182 = v10;
  uint64_t v183 = v11;
  if ((v9 & 1) != 0 || (v131 = v142, double v130 = v142, v181 = v142, swift_bridgeObjectRetain(), !v140))
  {
    int v93 = 1;
    uint64_t v94 = v132;
  }
  else
  {
    uint64_t v128 = v139;
    uint64_t v129 = v140;
    uint64_t v123 = v140;
    uint64_t v124 = v139;
    uint64_t v179 = v139;
    uint64_t v180 = v140;
    id v125 = objc_msgSend(v151, sel_medication);
    id v126 = objc_msgSend(v125, sel_displayNameComponents);

    id v127 = objc_msgSend(v126, sel_displayStrength);
    if (v127)
    {
      id v122 = v127;
      id v117 = v127;
      uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v119 = v12;

      uint64_t v120 = v118;
      uint64_t v121 = v119;
    }
    else
    {
      uint64_t v120 = 0;
      uint64_t v121 = 0;
    }
    uint64_t v115 = v121;
    uint64_t v116 = v120;
    if (v121)
    {
      uint64_t v113 = v116;
      uint64_t v114 = v115;
      uint64_t v98 = v115;
      uint64_t v97 = v116;
      uint64_t v170 = v116;
      uint64_t v171 = v115;

      uint64_t v168 = v97;
      uint64_t v169 = v98;
      Swift::String v102 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
      unint64_t v101 = lazy protocol witness table accessor for type String and conformance String();
      uint64_t v100 = MEMORY[0x263F8D310];
      uint64_t v99 = default argument 1 of StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
      char v14 = default argument 2 of StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)();
      uint64_t v103 = MEMORY[0x2611C8DF0](v102._countAndFlagsBits, v102._object, v99, v14 & 1, v100, v101);
      swift_bridgeObjectRelease();
      uint64_t v167 = v103;
      if (MEMORY[0x2611C8A30]() != 2)
      {
        uint64_t v18 = v148;
        uint64_t v67 = Logger.wellnessIntents.unsafeMutableAddressor();
        unint64_t v68 = &v166;
        uint64_t v74 = 32;
        swift_beginAccess();
        (*(void (**)(char *, uint64_t, uint64_t))(v145 + 16))(v18, v67, v144);
        swift_endAccess();
        swift_bridgeObjectRetain();
        uint64_t v75 = 7;
        uint64_t v19 = swift_allocObject();
        uint64_t v20 = v98;
        uint64_t v76 = v19;
        *(void *)(v19 + 16) = v97;
        *(void *)(v19 + 24) = v20;
        uint64_t v84 = Logger.logObject.getter();
        int v85 = static os_log_type_t.debug.getter();
        uint32_t v71 = &v164;
        uint64_t v164 = 12;
        unint64_t v69 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        unint64_t v70 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
        lazy protocol witness table accessor for type Int and conformance Int();
        UnsignedInteger<>.init<A>(_:)();
        uint32_t v72 = v165;
        uint64_t v73 = 17;
        uint64_t v78 = swift_allocObject();
        *(unsigned char *)(v78 + 16) = 32;
        uint64_t v79 = swift_allocObject();
        *(unsigned char *)(v79 + 16) = 8;
        uint64_t v21 = swift_allocObject();
        uint64_t v22 = v76;
        uint64_t v77 = v21;
        *(void *)(v21 + 16) = v133;
        *(void *)(v21 + 24) = v22;
        uint64_t v23 = swift_allocObject();
        uint64_t v24 = v77;
        uint64_t v81 = v23;
        *(void *)(v23 + 16) = v134;
        *(void *)(v23 + 24) = v24;
        uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
        uint64_t v80 = _allocateUninitializedArray<A>(_:)();
        int v82 = v25;
        swift_retain();
        uint64_t v26 = v78;
        uint64_t v27 = v82;
        *int v82 = v135;
        v27[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v26;
        swift_retain();
        uint64_t v28 = v79;
        uint64_t v29 = v82;
        v82[2] = v136;
        v29[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v28;
        swift_retain();
        uint64_t v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v81;
        id v31 = v82;
        v82[4] = v137;
        v31[5] = v30;
        _finalizeUninitializedArray<A>(_:)();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v84, (os_log_type_t)v85))
        {
          uint64_t v60 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          uint64_t v61 = createStorage<A>(capacity:type:)(0);
          uint64_t v62 = createStorage<A>(capacity:type:)(1);
          uint64_t v63 = &v163;
          int v163 = v60;
          uint64_t v64 = &v162;
          uint64_t v162 = v61;
          uint64_t v65 = &v161;
          uint64_t v161 = v62;
          serialize(_:at:)(2, &v163);
          serialize(_:at:)(1, v63);
          uint64_t v32 = v132;
          uint64_t v159 = v135;
          uint64_t v160 = v78;
          closure #1 in osLogInternal(_:log:type:)(&v159, (uint64_t)v63, (uint64_t)v64, (uint64_t)v65);
          uint64_t v66 = v32;
          if (v32)
          {
            __break(1u);
          }
          else
          {
            uint64_t v159 = v136;
            uint64_t v160 = v79;
            closure #1 in osLogInternal(_:log:type:)(&v159, (uint64_t)&v163, (uint64_t)&v162, (uint64_t)&v161);
            uint64_t v57 = 0;
            uint64_t v159 = v137;
            uint64_t v160 = v81;
            closure #1 in osLogInternal(_:log:type:)(&v159, (uint64_t)&v163, (uint64_t)&v162, (uint64_t)&v161);
            uint64_t v56 = 0;
            _os_log_impl(&dword_25DE00000, v84, (os_log_type_t)v85, "Unexpected displayStrength string format: %s", v60, v72);
            destroyStorage<A>(_:count:)(v61, 0, v59);
            destroyStorage<A>(_:count:)(v62, 1, MEMORY[0x263F8EE58] + 8);
            MEMORY[0x2611C8D90](v60, MEMORY[0x263F8E778]);
            swift_release();
            swift_release();
            swift_release();
            uint64_t v58 = v56;
          }
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
          uint64_t v58 = v132;
        }
        uint64_t v55 = v58;

        (*(void (**)(char *, uint64_t))(v145 + 8))(v148, v144);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int v93 = 0;
        uint64_t v94 = v55;
      }
      else
      {
        Array.subscript.getter();
        double v96 = COERCE_DOUBLE(Double.init(_:)());
        if (v16)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int v93 = 0;
          uint64_t v94 = v132;
        }
        else
        {
          double v95 = v96;
          double v90 = v96;
          double v158 = v96;
          Array.subscript.getter();
          uint64_t v88 = v157;
          uint64_t v89 = MEMORY[0x2611C88E0](v154, v155, v156);
          uint64_t v91 = v17;
          swift_bridgeObjectRelease();
          uint64_t v152 = v89;
          uint64_t v153 = v91;
          BOOL v92 = v90 != v130;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v92) {
            int v87 = 0;
          }
          else {
            int v87 = static String.== infix(_:_:)();
          }
          int v86 = v87;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          int v93 = v86;
          uint64_t v94 = v132;
        }
      }
    }
    else
    {
      uint64_t v13 = v150;

      uint64_t v104 = Logger.wellnessIntents.unsafeMutableAddressor();
      uint64_t v105 = &v178;
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v145 + 16))(v13, v104, v144);
      swift_endAccess();
      uint64_t v111 = Logger.logObject.getter();
      int v110 = static os_log_type_t.debug.getter();
      uint64_t v108 = &v176;
      uint64_t v176 = 2;
      unint64_t v106 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      unint64_t v107 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      uint32_t v109 = v177;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      uint64_t v112 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v111, (os_log_type_t)v110))
      {
        uint64_t v44 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v43 = 0;
        uint64_t v45 = createStorage<A>(capacity:type:)(0);
        uint64_t v46 = createStorage<A>(capacity:type:)(v43);
        id v50 = &v175;
        uint64_t v175 = v44;
        uint64_t v51 = &v174;
        uint64_t v174 = v45;
        uint64_t v48 = &v173;
        uint64_t v173 = v46;
        unsigned int v47 = 0;
        serialize(_:at:)(0, &v175);
        serialize(_:at:)(v47, v50);
        uint64_t v172 = v112;
        uint64_t v49 = &v38;
        MEMORY[0x270FA5388](&v38);
        uint64_t v33 = v51;
        uint64_t v34 = &v38 - 6;
        uint64_t v52 = &v38 - 6;
        v34[2] = (uint64_t)v50;
        void v34[3] = (uint64_t)v33;
        v34[4] = v35;
        uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        uint64_t v36 = v132;
        Sequence.forEach(_:)();
        uint64_t v54 = v36;
        if (v36)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_25DE00000, v111, (os_log_type_t)v110, "Couldn't find displayStrength in UserTrackedMed", v44, v109);
          uint64_t v40 = 0;
          destroyStorage<A>(_:count:)(v45, 0, v42);
          destroyStorage<A>(_:count:)(v46, v40, MEMORY[0x263F8EE58] + 8);
          MEMORY[0x2611C8D90](v44, MEMORY[0x263F8E778]);
          swift_bridgeObjectRelease();
          uint64_t v41 = v54;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v41 = v132;
      }
      uint64_t v39 = v41;

      (*(void (**)(char *, uint64_t))(v145 + 8))(v150, v144);
      swift_bridgeObjectRelease();
      int v93 = 0;
      uint64_t v94 = v39;
    }
  }
  return v93 & 1;
}

uint64_t default argument 1 of StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t default argument 2 of StringProtocol<>.split(separator:maxSplits:omittingEmptySubsequences:)()
{
  return 1;
}

uint64_t implicit closure #2 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(uint64_t a1)
{
  unint64_t v1 = type metadata accessor for HKUserTrackedMedication();
  return MEMORY[0x2611C8A30](a1, v1);
}

uint64_t closure #1 in SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:)(id *a1)
{
  id v2 = objc_msgSend(*a1, sel_medication);
  id v3 = objc_msgSend(v2, sel_identifier);

  id v4 = objc_msgSend(v3, sel_underlyingIdentifier);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  char v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();

  return v5 & 1;
}

uint64_t implicit closure #1 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)()
{
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
  lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]();
  Collection.first.getter();
  outlined destroy of [HKQuantityType]();
  if (v1)
  {
    objc_msgSend(v1, sel_medication);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HKMedication?);
  lazy protocol witness table accessor for type HKMedication? and conformance A?();
  return String.init<A>(describing:)();
}

uint64_t implicit closure #2 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(void *a1)
{
  id v1 = a1;
  type metadata accessor for HKMedicationLoggingUnit();
  lazy protocol witness table accessor for type HKMedicationLoggingUnit and conformance NSObject();
  return String.init<A>(describing:)();
}

id @nonobjc NSNumber.init(value:)(uint64_t a1)
{
  return objc_msgSend(v1, sel_initWithInteger_, a1);
}

id @nonobjc HKMedicationIdentifier.init(rawIdentifier:)()
{
  id v2 = (id)MEMORY[0x2611C8860]();
  id v3 = objc_msgSend(v1, sel_initWithRawIdentifier_);

  swift_bridgeObjectRelease();
  return v3;
}

id @nonobjc INObject.init(identifier:display:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v7 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    uint64_t v8 = (void *)v7;
  }
  else
  {
    uint64_t v8 = 0;
  }
  id v5 = (id)MEMORY[0x2611C8860](a3, a4);
  id v6 = objc_msgSend(v11, sel_initWithIdentifier_displayString_, v8);

  swift_bridgeObjectRelease();
  return v6;
}

id @nonobjc HKUserTrackedConceptType.init(identifier:)(void *a1)
{
  id v4 = objc_msgSend(v1, sel_initWithIdentifier_);

  return v4;
}

id @nonobjc HKUserTrackedConceptQuery.init(userTrackedConceptType:predicate:sortDescriptors:resultsHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    type metadata accessor for NSSortDescriptor();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v9 = isa;
  }
  else
  {
    Class v9 = 0;
  }
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v16 = 1107296256;
  int v17 = 0;
  uint64_t v18 = thunk for @escaping @callee_guaranteed (@guaranteed HKUserTrackedConceptQuery, @guaranteed [HKUserTrackedConcept]?, @guaranteed Error?) -> ();
  uint64_t v19 = &block_descriptor_2011;
  id v6 = _Block_copy(&aBlock);
  id v7 = objc_msgSend(v14, sel_initWithUserTrackedConceptType_predicate_sortDescriptors_resultsHandler_, a1, a2, v9);
  _Block_release(v6);
  swift_release();

  return v7;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed HKUserTrackedConceptQuery, @guaranteed [HKUserTrackedConcept]?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v12 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  id v4 = a2;
  id v5 = a3;
  if (a3)
  {
    type metadata accessor for HKUserTrackedConcept();
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v6 = a4;
  if (a4) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = 0;
  }
  v12(a2, v10);

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_25DECA72C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  return implicit closure #2 in LogSpecificMedicationsIntentHandler.handle(intent:)(*(void *)(v0 + 16));
}

uint64_t sub_25DECA774()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  return implicit closure #3 in LogSpecificMedicationsIntentHandler.handle(intent:)(*(void *)(v0 + 16));
}

uint64_t sub_25DECA7BC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  return implicit closure #4 in LogSpecificMedicationsIntentHandler.handle(intent:)(*(void **)(v0 + 16));
}

uint64_t sub_25DECA804()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  return implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:)(*(unsigned char *)(v0 + 16) & 1);
}

uint64_t sub_25DECA83C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  return implicit closure #6 in LogSpecificMedicationsIntentHandler.handle(intent:)(*(void **)(v0 + 16));
}

uint64_t sub_25DECA884()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  return implicit closure #7 in LogSpecificMedicationsIntentHandler.handle(intent:)(*(void **)(v0 + 16));
}

uint64_t sub_25DECA8CC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECA8F8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECA924()
{
  return swift_deallocObject();
}

uint64_t sub_25DECA964()
{
  return swift_deallocObject();
}

uint64_t sub_25DECA9A4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECA9D0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECA9FC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECAA3C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECAA7C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECAAA8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECAAD4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECAB14()
{
  return swift_deallocObject();
}

uint64_t sub_25DECAB54()
{
  return swift_deallocObject();
}

uint64_t sub_25DECAB80()
{
  return swift_deallocObject();
}

BOOL implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return (a1() & 1) != 0;
}

uint64_t sub_25DECAC00()
{
  return swift_deallocObject();
}

BOOL partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_25DECAC74()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)()
{
  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_25DECACFC()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(_DWORD *a1@<X8>)
{
  return thunk for @escaping @callee_guaranteed () -> (@unowned Int32)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_25DECAD48()
{
  return swift_deallocObject();
}

uint64_t _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = *(void *)(v3 + 24);
  unint64_t v4 = lazy protocol witness table accessor for type Int32 and conformance Int32();
  uint64_t v5 = MEMORY[0x263F8E548];
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v9, v10, v5, v4);
}

unint64_t lazy protocol witness table accessor for type Int32 and conformance Int32()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Int32 and conformance Int32;
  if (!lazy protocol witness table cache variable for type Int32 and conformance Int32)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Int32 and conformance Int32);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DECAE78()
{
  return swift_deallocObject();
}

uint64_t sub_25DECAEA4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECAED0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECAF10()
{
  return swift_deallocObject();
}

uint64_t sub_25DECAF50()
{
  return swift_deallocObject();
}

uint64_t sub_25DECAF7C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECAFA8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECAFE8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB028()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB068()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB0A8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB0D4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB114()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB154()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB180()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB1AC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB1EC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB22C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB258()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB284()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB2C4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB304()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB330()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB35C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB39C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB3DC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB41C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB45C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB488()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB4B4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB4F4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB534()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB560()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB58C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB5CC()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DECB690()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  return implicit closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:)();
}

uint64_t sub_25DECB6D8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB704()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB730()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB770()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB7B0()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:)()
{
  uint64_t v5 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v8 = (void *)v0[2];
  id v6 = (const void *)v0[3];
  id v7 = (void *)v0[4];
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v2;
  *uint64_t v2 = *(void *)(v5 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  uint64_t v3 = async function pointer to @objc closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:);
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in LogSpecificMedicationsIntentHandler.handle(intent:)
                                                               + v3))(v8, v6, v7);
}

unint64_t type metadata accessor for HKMedicationIdentifier()
{
  uint64_t v2 = lazy cache variable for type metadata for HKMedicationIdentifier;
  if (!lazy cache variable for type metadata for HKMedicationIdentifier)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMedicationIdentifier);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25DECB954()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB994()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB9C0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECB9EC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBA2C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBA6C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBAAC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBAEC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBB18()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBB44()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBB84()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBBC4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBC04()
{
  uint64_t v2 = *(void *)(type metadata accessor for DateInterval() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for DateInterval() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return implicit closure #1 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(v2);
}

uint64_t sub_25DECBD38()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBD64()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBD90()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBDD0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBE10()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBE50()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)()
{
  return implicit closure #2 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(v0);
}

uint64_t sub_25DECBE84()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBEB0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBEDC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBF1C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBF5C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBF88()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBFB4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECBFF4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC034()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type String? and conformance <A> A?()
{
  uint64_t v2 = lazy protocol witness table cache variable for type String? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type String? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for String?);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type String? and conformance <A> A?);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [String?] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [String?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String?] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String?]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [String?] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [String?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String?] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String?]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [String?] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Set<String?> and conformance Set<A>()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Set<String?> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<String?> and conformance Set<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String?>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Set<String?> and conformance Set<A>);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type Set<String?> and conformance Set<A>;
  if (!lazy protocol witness table cache variable for type Set<String?> and conformance Set<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Set<String?>);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Set<String?> and conformance Set<A>);
    return WitnessTable;
  }
  return v2;
}

id partial apply for closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return closure #2 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)(a1, *(void *)(v2 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type [HKUserTrackedMedication] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKUserTrackedMedication] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKUserTrackedMedication] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKUserTrackedMedication] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [HKUserTrackedMedication] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKUserTrackedMedication] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKUserTrackedMedication]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKUserTrackedMedication] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DECC2BC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)()
{
  return implicit closure #4 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)(*(void *)(v0 + 16));
}

uint64_t sub_25DECC304()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC330()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC35C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC39C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC3DC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC408()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC434()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC460()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC4A0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC4E0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC520()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)@<X0>(void *a1@<X8>)
{
  return implicit closure #8 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(v1, a1);
}

uint64_t sub_25DECC568()
{
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_3()
{
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
  unint64_t v1 = lazy protocol witness table accessor for type [String?] and conformance [A]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

uint64_t partial apply for implicit closure #7 in SpecificMedicationsPersistor.saveMedication(named:medStatusTaken:dosage:dosageUnit:)()
{
  return implicit closure #5 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(v0);
}

uint64_t sub_25DECC694()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC6C0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC6EC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC72C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC76C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC798()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC7C4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC804()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return closure #1 in SpecificMedicationsPersistor.saveAsNeededWithStrength(medicationID:medStatusTaken:dosage:dosageUnit:strength:strengthUnit:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_25DECC870()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC8B0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECC9D4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCA00()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCA2C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCA6C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCAAC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCAEC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCB18()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCB44()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCB84()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCBC4()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for HKUserTrackedMedication()
{
  uint64_t v2 = lazy cache variable for type metadata for HKUserTrackedMedication;
  if (!lazy cache variable for type metadata for HKUserTrackedMedication)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKUserTrackedMedication);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t partial apply for closure #1 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(id *a1)
{
  return closure #1 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(a1) & 1;
}

uint64_t partial apply for closure #2 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(id *a1)
{
  return closure #2 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(a1, *(unsigned char *)(v1 + 16) & 1) & 1;
}

uint64_t partial apply for closure #3 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(uint64_t a1)
{
  return closure #3 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24) & 1, *(void *)(v1 + 32), *(void *)(v1 + 40)) & 1;
}

uint64_t sub_25DECCD88()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)()
{
  return implicit closure #2 in SpecificMedicationsPersistor.getMedicationsMatching(medicationIDs:strength:strengthUnit:isAsNeeded:)(*(void *)(v0 + 16));
}

uint64_t sub_25DECCDD0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCDFC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCE28()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCE68()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCEA8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)()
{
  return implicit closure #6 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)();
}

uint64_t sub_25DECCEE4()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)()
{
  return implicit closure #7 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)();
}

uint64_t sub_25DECCF30()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCF5C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCF88()
{
  return swift_deallocObject();
}

uint64_t sub_25DECCFC8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD008()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD034()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD060()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD0A0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD0E0()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #10 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)()
{
  return specialized implicit closure #12 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(*(void *)(v0 + 16));
}

uint64_t sub_25DECD128()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD154()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD180()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD1C0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD200()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)()
{
  return implicit closure #3 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(*(void **)(v0 + 16));
}

uint64_t sub_25DECD248()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)()
{
  return implicit closure #4 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(*(void **)(v0 + 16));
}

uint64_t sub_25DECD290()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)()
{
  return implicit closure #5 in SpecificMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:medicationIDPresent:dosage:dosageUnit:)(*(void **)(v0 + 16));
}

uint64_t sub_25DECD2D8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD304()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD330()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD370()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD3B0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD3DC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD408()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD448()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD488()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD4B4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD4E0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD520()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD560()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD5A0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD5E0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD620()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD64C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD678()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD6B8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD6F8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD724()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD750()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD790()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD7D0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD7FC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD828()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD868()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD92C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD96C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)()
{
  return implicit closure #2 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)();
}

uint64_t sub_25DECD9B4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECD9E0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)()
{
  return implicit closure #4 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)();
}

uint64_t sub_25DECDA14()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDA40()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDA6C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDAAC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDAD8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDB04()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDB44()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDB84()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDBB0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDBDC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDC1C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDC5C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDC88()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDCB4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDCF4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDD34()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDD74()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDDB4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDDE0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDE0C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDE4C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDE8C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDEB8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDEE4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDF24()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDF64()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDF90()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDFBC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECDFFC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE03C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE068()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE094()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE0D4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(id *a1)
{
  return closure #1 in SpecificMedicationsPersistor.saveWithID(scheduleID:medicationIDs:medStatus:dosage:dosageUnit:confirmedAsNeeded:confirmedAsScheduled:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_25DECE144()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE184()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE1B0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE1DC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE21C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE25C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE29C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE2DC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE308()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE334()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE360()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE3A0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE3E0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE40C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE438()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE478()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE4B8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE4E4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE510()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE550()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE590()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE5D0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE610()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE734()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE760()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE78C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE7CC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE80C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)()
{
  return implicit closure #16 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)();
}

uint64_t sub_25DECE844()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE884()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE8C4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE8F0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE91C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE95C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE99C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE9C8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECE9F4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEA34()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEA74()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEAA0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEACC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEB0C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEB4C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #12 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)()
{
  return implicit closure #12 in SpecificMedicationsPersistor.updateDosageForDoseEvent(doseEvent:inputDosage:inputDosageUnit:)();
}

uint64_t sub_25DECEB80()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEBAC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEBD8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEC18()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEC58()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEC84()
{
  return swift_deallocObject();
}

uint64_t sub_25DECECB0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECECDC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECED1C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECED5C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECED88()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEDB4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEDE0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEE20()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEE60()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEE8C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEECC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEEF8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEF24()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEF64()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEFA4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEFD0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECEFFC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF03C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF07C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF0A8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF0D4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF100()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF140()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF180()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF1AC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF1EC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF218()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF244()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF284()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF2C4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF2F0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF31C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF35C()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of Double?(uint64_t a1, uint64_t a2)
{
  uint64_t result = a2;
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t sub_25DECF3B8()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  return implicit closure #2 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(void **)(v0 + 16));
}

uint64_t sub_25DECF400()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF440()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  return implicit closure #4 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(void **)(v0 + 16));
}

uint64_t sub_25DECF488()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  return implicit closure #5 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(void **)(v0 + 16));
}

uint64_t sub_25DECF4D0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  return implicit closure #6 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(void **)(v0 + 16));
}

uint64_t sub_25DECF518()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  return implicit closure #6 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(*(void **)(v0 + 16));
}

uint64_t sub_25DECF560()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF5A0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF5E0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #10 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  return implicit closure #10 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(void **)(v0 + 16));
}

uint64_t sub_25DECF628()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #11 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  return implicit closure #11 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(void **)(v0 + 16));
}

uint64_t sub_25DECF670()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #12 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)()
{
  return implicit closure #12 in SpecificMedicationsPersistor.buildMatchedMedName(from:shouldIncludeAsNeededParams:)(*(void **)(v0 + 16));
}

uint64_t sub_25DECF6B8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF6E4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF710()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF750()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF790()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF7BC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF7E8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF828()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF868()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF894()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF8C0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF900()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF940()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF96C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF998()
{
  return swift_deallocObject();
}

uint64_t sub_25DECF9D8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFA18()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFA44()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFA70()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFAB0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFAF0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFB1C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFB48()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFB88()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFBC8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFBF4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFC20()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFC60()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFCA0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFCCC()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFCF8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFD38()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFD78()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFDA4()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFDD0()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFE10()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFE50()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFE7C()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFEA8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFEE8()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFF28()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFF54()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFF80()
{
  return swift_deallocObject();
}

uint64_t sub_25DECFFC0()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0000()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0040()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0080()
{
  uint64_t v2 = *(void *)(type metadata accessor for DateInterval() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DateInterval();
  uint64_t v3 = v1
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  return implicit closure #2 in SpecificMedicationsPersistor.saveScheduledMedication(named:specifiedDateInterval:medStatusTaken:)(v3, a1);
}

uint64_t sub_25DED01C4()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type DateInterval and conformance DateInterval()
{
  uint64_t v2 = lazy protocol witness table cache variable for type DateInterval and conformance DateInterval;
  if (!lazy protocol witness table cache variable for type DateInterval and conformance DateInterval)
  {
    type metadata accessor for DateInterval();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DED02E4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0310()
{
  return swift_deallocObject();
}

uint64_t sub_25DED033C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED037C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED03BC()
{
  return swift_deallocObject();
}

uint64_t sub_25DED03E8()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0414()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0454()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0494()
{
  return swift_deallocObject();
}

uint64_t sub_25DED04D4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED05F8()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0624()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0650()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0690()
{
  return swift_deallocObject();
}

uint64_t sub_25DED06D0()
{
  return swift_deallocObject();
}

uint64_t sub_25DED06FC()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0728()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0768()
{
  return swift_deallocObject();
}

uint64_t sub_25DED07A8()
{
  return swift_deallocObject();
}

uint64_t sub_25DED07E8()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0814()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0840()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0880()
{
  return swift_deallocObject();
}

uint64_t sub_25DED08C0()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0900()
{
  uint64_t v2 = *(void *)(type metadata accessor for DateInterval() - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

uint64_t sub_25DED09CC()
{
  return swift_deallocObject();
}

uint64_t sub_25DED09F8()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0A24()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0A64()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0AA4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0AD0()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0AFC()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0B3C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0B7C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0BA8()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0BD4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0C14()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0C54()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0C94()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0CC0()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0CEC()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0D18()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0D44()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0D84()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0DC4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0DF0()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0E1C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0E5C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0E9C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0EC8()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0EF4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0F20()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0F60()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0FA0()
{
  return swift_deallocObject();
}

uint64_t sub_25DED0FE0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  return implicit closure #7 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(v0);
}

uint64_t sub_25DED1028()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1054()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1080()
{
  return swift_deallocObject();
}

uint64_t sub_25DED10C0()
{
  return swift_deallocObject();
}

_OWORD *outlined init with take of (key: String?, value: (scheduleDate: Date?, medID: String, count: Int))?(_OWORD *a1, _OWORD *a2)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String?, value: (scheduleDate: Date?, medID: String, count: Int)));
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t))(v13 + 48))(a1, 1))
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String?, value: (scheduleDate: Date?, medID: String, count: Int))?);
    memcpy(a2, a1, *(void *)(*(void *)(v4 - 8) + 64));
  }
  else
  {
    *a2 = *a1;
    __dst = (char *)a2 + *(int *)(v12 + 48);
    __src = (char *)a1 + *(int *)(v12 + 48);
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v9 + 48))(__src, 1))
    {
      uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
      memcpy(__dst, __src, *(void *)(*(void *)(v2 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(__dst, __src, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(__dst, 0, 1, v8);
    }
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (scheduleDate: Date?, medID: String, count: Int));
    *(_OWORD *)&__dst[*(int *)(v3 + 48)] = *(_OWORD *)&__src[*(int *)(v3 + 48)];
    *(void *)&__dst[*(int *)(v3 + 64)] = *(void *)&__src[*(int *)(v3 + 64)];
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v12);
  }
  return a2;
}

uint64_t sub_25DED13E0()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  return implicit closure #9 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(v0);
}

uint64_t partial apply for implicit closure #10 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  return implicit closure #10 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(v0);
}

uint64_t partial apply for implicit closure #11 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  return implicit closure #11 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(v0);
}

uint64_t sub_25DED1438()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #12 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  return implicit closure #12 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(*(void *)(v0 + 16));
}

uint64_t sub_25DED146C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1498()
{
  return swift_deallocObject();
}

uint64_t sub_25DED14C4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1504()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1544()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1570()
{
  return swift_deallocObject();
}

uint64_t sub_25DED159C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED15DC()
{
  return swift_deallocObject();
}

uint64_t sub_25DED161C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1648()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1674()
{
  return swift_deallocObject();
}

uint64_t sub_25DED16B4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED16F4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1720()
{
  return swift_deallocObject();
}

uint64_t sub_25DED174C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED178C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED17CC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  return implicit closure #4 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(*(void **)(v0 + 16));
}

uint64_t sub_25DED1814()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)()
{
  return implicit closure #5 in SpecificMedicationsPersistor.saveScheduledMedication(specifiedDateInterval:medStatusTaken:)(*(void **)(v0 + 16));
}

uint64_t sub_25DED185C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED189C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED18C8()
{
  return swift_deallocObject();
}

uint64_t sub_25DED18F4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1934()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1974()
{
  return swift_deallocObject();
}

uint64_t sub_25DED19A0()
{
  return swift_deallocObject();
}

uint64_t sub_25DED19CC()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1A0C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1A4C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1A78()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1AA4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1AE4()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of (scheduleDate: Date?, medID: String, count: Int)?(uint64_t a1)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (scheduleDate: Date?, medID: String, count: Int));
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(a1, 1))
  {
    uint64_t v2 = type metadata accessor for Date();
    uint64_t v3 = *(void *)(v2 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v3 + 48))(a1, 1)) {
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    }
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t outlined destroy of (Date?, String, Int)?(uint64_t a1)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Date?, String, Int));
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(a1, 1))
  {
    uint64_t v2 = type metadata accessor for Date();
    uint64_t v3 = *(void *)(v2 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v3 + 48))(a1, 1)) {
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
    }
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_25DED1D64()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1DA4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1DD0()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1DFC()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1E3C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1E7C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(id *a1)
{
  return closure #1 in SpecificMedicationsPersistor.getAsNeededStrengthFromHealthApp(for:)(a1) & 1;
}

uint64_t sub_25DED1EEC()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)()
{
  return implicit closure #1 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)();
}

uint64_t sub_25DED1F34()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1F60()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1F8C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED1FCC()
{
  return swift_deallocObject();
}

uint64_t sub_25DED200C()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)()
{
  return implicit closure #2 in SpecificMedicationsPersistor.getAsNeededDosageUnit(for:dosageCount:)(*(void **)(v0 + 16));
}

uint64_t sub_25DED2054()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2080()
{
  return swift_deallocObject();
}

uint64_t sub_25DED20AC()
{
  return swift_deallocObject();
}

uint64_t sub_25DED20EC()
{
  return swift_deallocObject();
}

uint64_t sub_25DED212C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED216C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2198()
{
  return swift_deallocObject();
}

uint64_t sub_25DED21C4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2204()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2244()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2284()
{
  return swift_deallocObject();
}

uint64_t sub_25DED22B0()
{
  return swift_deallocObject();
}

uint64_t sub_25DED22DC()
{
  return swift_deallocObject();
}

uint64_t sub_25DED231C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED235C()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  uint64_t v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DED2418()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2458()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2484()
{
  return swift_deallocObject();
}

uint64_t sub_25DED24B0()
{
  return swift_deallocObject();
}

uint64_t sub_25DED24F0()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2530()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2570()
{
  return swift_deallocObject();
}

uint64_t sub_25DED259C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED25C8()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2608()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2648()
{
  return swift_deallocObject();
}

uint64_t sub_25DED270C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED274C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2778()
{
  return swift_deallocObject();
}

uint64_t sub_25DED27A4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED27E4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in SpecificMedicationsPersistor.doUTCQueryForMedications()(uint64_t a1)
{
  closure #1 in SpecificMedicationsPersistor.doUTCQueryForMedications()(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_25DED2830()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in SpecificMedicationsPersistor.UTCQuery()()
{
  return implicit closure #1 in SpecificMedicationsPersistor.UTCQuery()(*(void **)(v0 + 16));
}

uint64_t sub_25DED2878()
{
  return swift_deallocObject();
}

uint64_t sub_25DED28A4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED28D0()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2910()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for LogSpecificMedicationsIntentHandler()
{
  return self;
}

ValueMetadata *type metadata accessor for SpecificMedicationsPersistor()
{
  return &type metadata for SpecificMedicationsPersistor;
}

unint64_t type metadata accessor for HKUserTrackedConceptQuery()
{
  uint64_t v2 = lazy cache variable for type metadata for HKUserTrackedConceptQuery;
  if (!lazy cache variable for type metadata for HKUserTrackedConceptQuery)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKUserTrackedConceptQuery);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for HKUserTrackedConceptType()
{
  uint64_t v2 = lazy cache variable for type metadata for HKUserTrackedConceptType;
  if (!lazy cache variable for type metadata for HKUserTrackedConceptType)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKUserTrackedConceptType);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25DED2A5C()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HKUserTrackedMedication], Error>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in SpecificMedicationsPersistor.doUTCQueryForMedications()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<[HKUserTrackedMedication], Error>);
  uint64_t v5 = v3
     + ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80));
  closure #1 in closure #1 in SpecificMedicationsPersistor.doUTCQueryForMedications()(a1, a2, a3, v5);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

unint64_t type metadata accessor for HKUserTrackedConcept()
{
  uint64_t v2 = lazy cache variable for type metadata for HKUserTrackedConcept;
  if (!lazy cache variable for type metadata for HKUserTrackedConcept)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKUserTrackedConcept);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [HKUserTrackedConcept] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKUserTrackedConcept] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKUserTrackedConcept] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKUserTrackedConcept]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKUserTrackedConcept] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DED2D0C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2D4C()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2D78()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2DA4()
{
  return swift_deallocObject();
}

uint64_t sub_25DED2DE4()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for HKMedicationLoggingUnit()
{
  uint64_t v2 = lazy cache variable for type metadata for HKMedicationLoggingUnit;
  if (!lazy cache variable for type metadata for HKMedicationLoggingUnit)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMedicationLoggingUnit);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type HKMedicationLoggingUnit and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKMedicationLoggingUnit and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HKMedicationLoggingUnit and conformance NSObject)
  {
    type metadata accessor for HKMedicationLoggingUnit();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKMedicationLoggingUnit and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type HKMedication? and conformance A?()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKMedication? and conformance A?;
  if (!lazy protocol witness table cache variable for type HKMedication? and conformance A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for HKMedication?);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKMedication? and conformance A?);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type HKMedicationIdentifier and conformance NSObject()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKMedicationIdentifier and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HKMedicationIdentifier and conformance NSObject)
  {
    type metadata accessor for HKMedicationIdentifier();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKMedicationIdentifier and conformance NSObject);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type NSNumber? and conformance A?()
{
  uint64_t v2 = lazy protocol witness table cache variable for type NSNumber? and conformance A?;
  if (!lazy protocol witness table cache variable for type NSNumber? and conformance A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for NSNumber?);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type NSNumber? and conformance A?);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Double? and conformance A?()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Double? and conformance A?;
  if (!lazy protocol witness table cache variable for type Double? and conformance A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Double?);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Double? and conformance A?);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [String]? and conformance A?()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [String]? and conformance A?;
  if (!lazy protocol witness table cache variable for type [String]? and conformance A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]?);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [String]? and conformance A?);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Bool? and conformance A?()
{
  uint64_t v2 = lazy protocol witness table cache variable for type Bool? and conformance A?;
  if (!lazy protocol witness table cache variable for type Bool? and conformance A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Bool?);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type Bool? and conformance A?);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DED3228()
{
  return swift_deallocObject();
}

uint64_t sub_25DED3268()
{
  return swift_deallocObject();
}

uint64_t sub_25DED3294()
{
  return swift_deallocObject();
}

uint64_t sub_25DED32C0()
{
  return swift_deallocObject();
}

uint64_t sub_25DED3300()
{
  return swift_deallocObject();
}

uint64_t isWithinGenericRetentionPolicy(dateInterval:)()
{
  return 1;
}

uint64_t isWithinSleepRetentionPolicy(dateInterval:)()
{
  return 1;
}

uint64_t Logger.wellnessIntents.unsafeMutableAddressor()
{
  if (one-time initialization token for wellnessIntents != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logger.wellnessIntents);
}

uint64_t one-time initialization function for subsystem()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.siri", 0xEuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static Log.subsystem = (__int128)v1;
  return result;
}

long long *Log.subsystem.unsafeMutableAddressor()
{
  if (one-time initialization token for subsystem != -1) {
    swift_once();
  }
  return &static Log.subsystem;
}

uint64_t one-time initialization function for healthCategory()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Health", 6uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static Log.healthCategory = (__int128)v1;
  return result;
}

long long *Log.healthCategory.unsafeMutableAddressor()
{
  if (one-time initialization token for healthCategory != -1) {
    swift_once();
  }
  return &static Log.healthCategory;
}

uint64_t one-time initialization function for wellnessCategory()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Wellness", 8uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static Log.wellnessCategory = (__int128)v1;
  return result;
}

long long *Log.wellnessCategory.unsafeMutableAddressor()
{
  if (one-time initialization token for wellnessCategory != -1) {
    swift_once();
  }
  return &static Log.wellnessCategory;
}

uint64_t one-time initialization function for emergencyCategory()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Emergency", 9uLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static Log.emergencyCategory = (__int128)v1;
  return result;
}

long long *Log.emergencyCategory.unsafeMutableAddressor()
{
  if (one-time initialization token for emergencyCategory != -1) {
    swift_once();
  }
  return &static Log.emergencyCategory;
}

uint64_t one-time initialization function for commonCategory()
{
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HealthCommon", 0xCuLL, 1);
  uint64_t result = v1._countAndFlagsBits;
  static Log.commonCategory = (__int128)v1;
  return result;
}

long long *Log.commonCategory.unsafeMutableAddressor()
{
  if (one-time initialization token for commonCategory != -1) {
    swift_once();
  }
  return &static Log.commonCategory;
}

uint64_t one-time initialization function for health()
{
  type metadata accessor for OS_os_log();
  Log.subsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  Log.healthCategory.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.health = result;
  return result;
}

{
  id v0;
  uint64_t v2;

  uint64_t v2 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v2, static Logger.health);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.health);
  uint64_t v0 = (id)*Log.health.unsafeMutableAddressor();
  return Logger.init(_:)();
}

uint64_t *Log.health.unsafeMutableAddressor()
{
  if (one-time initialization token for health != -1) {
    swift_once();
  }
  return &static Log.health;
}

void *static Log.health.getter()
{
  uint64_t v2 = (void *)*Log.health.unsafeMutableAddressor();
  id v0 = v2;
  return v2;
}

uint64_t one-time initialization function for wellnessIntents()
{
  type metadata accessor for OS_os_log();
  Log.subsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  Log.wellnessCategory.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.wellnessIntents = result;
  return result;
}

{
  id v0;
  uint64_t v2;

  uint64_t v2 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v2, static Logger.wellnessIntents);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.wellnessIntents);
  id v0 = (id)*Log.wellnessIntents.unsafeMutableAddressor();
  return Logger.init(_:)();
}

uint64_t *Log.wellnessIntents.unsafeMutableAddressor()
{
  if (one-time initialization token for wellnessIntents != -1) {
    swift_once();
  }
  return &static Log.wellnessIntents;
}

void *static Log.wellnessIntents.getter()
{
  uint64_t v2 = (void *)*Log.wellnessIntents.unsafeMutableAddressor();
  id v0 = v2;
  return v2;
}

uint64_t one-time initialization function for emergency()
{
  type metadata accessor for OS_os_log();
  Log.subsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  Log.emergencyCategory.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.emergency = result;
  return result;
}

{
  id v0;
  uint64_t v2;

  uint64_t v2 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v2, static Logger.emergency);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.emergency);
  id v0 = (id)*Log.emergency.unsafeMutableAddressor();
  return Logger.init(_:)();
}

uint64_t *Log.emergency.unsafeMutableAddressor()
{
  if (one-time initialization token for emergency != -1) {
    swift_once();
  }
  return &static Log.emergency;
}

void *static Log.emergency.getter()
{
  uint64_t v2 = (void *)*Log.emergency.unsafeMutableAddressor();
  id v0 = v2;
  return v2;
}

uint64_t one-time initialization function for common()
{
  type metadata accessor for OS_os_log();
  Log.subsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  Log.commonCategory.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.common = result;
  return result;
}

{
  id v0;
  uint64_t v2;

  uint64_t v2 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v2, static Logger.common);
  __swift_project_value_buffer(v2, (uint64_t)static Logger.common);
  id v0 = (id)*Log.common.unsafeMutableAddressor();
  return Logger.init(_:)();
}

uint64_t *Log.common.unsafeMutableAddressor()
{
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  return &static Log.common;
}

void *static Log.common.getter()
{
  uint64_t v2 = (void *)*Log.common.unsafeMutableAddressor();
  id v0 = v2;
  return v2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0) {
    return *(void *)a2;
  }
  return v3;
}

unint64_t type metadata accessor for OS_os_log()
{
  uint64_t v2 = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t __swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = a2;
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v2 = swift_slowAlloc();
    *a2 = v2;
    return v2;
  }
  return (uint64_t)v5;
}

uint64_t static Logger.wellnessIntents.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v1 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 16))(a1, v3);
  return swift_endAccess();
}

uint64_t static Logger.wellnessIntents.setter(uint64_t a1)
{
  uint64_t v9 = a1;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v10 - 8);
  uint64_t v8 = v10 - 8;
  unint64_t v3 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v10);
  uint64_t v5 = (char *)&v2 - v3;
  uint64_t v4 = Logger.wellnessIntents.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, v9, v10);
  id v6 = &v11;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v4, v5, v10);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v9, v10);
}

uint64_t (*static Logger.wellnessIntents.modify())()
{
  return static Logger.wellnessIntents.modify;
}

uint64_t static Logger.wellnessIntents.modify()
{
  return swift_endAccess();
}

uint64_t Logger.health.unsafeMutableAddressor()
{
  if (one-time initialization token for health != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logger.health);
}

uint64_t static Logger.health.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = Logger.health.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v1 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 16))(a1, v3);
  return swift_endAccess();
}

uint64_t static Logger.health.setter(uint64_t a1)
{
  uint64_t v9 = a1;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v10 - 8);
  uint64_t v8 = v10 - 8;
  unint64_t v3 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v10);
  uint64_t v5 = (char *)&v2 - v3;
  uint64_t v4 = Logger.health.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, v9, v10);
  id v6 = &v11;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v4, v5, v10);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v9, v10);
}

uint64_t (*static Logger.health.modify())()
{
  return static Logger.wellnessIntents.modify;
}

uint64_t Logger.emergency.unsafeMutableAddressor()
{
  if (one-time initialization token for emergency != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logger.emergency);
}

uint64_t static Logger.emergency.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = Logger.emergency.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v1 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 16))(a1, v3);
  return swift_endAccess();
}

uint64_t static Logger.emergency.setter(uint64_t a1)
{
  uint64_t v9 = a1;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v10 - 8);
  uint64_t v8 = v10 - 8;
  unint64_t v3 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v10);
  uint64_t v5 = (char *)&v2 - v3;
  uint64_t v4 = Logger.emergency.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, v9, v10);
  id v6 = &v11;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v4, v5, v10);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v9, v10);
}

uint64_t (*static Logger.emergency.modify())()
{
  return static Logger.wellnessIntents.modify;
}

uint64_t Logger.common.unsafeMutableAddressor()
{
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logger.common);
}

uint64_t static Logger.common.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = Logger.common.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v1 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 16))(a1, v3);
  return swift_endAccess();
}

uint64_t static Logger.common.setter(uint64_t a1)
{
  uint64_t v9 = a1;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v10 - 8);
  uint64_t v8 = v10 - 8;
  unint64_t v3 = (*(void *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v10);
  uint64_t v5 = (char *)&v2 - v3;
  uint64_t v4 = Logger.common.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v5, v9, v10);
  id v6 = &v11;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(v4, v5, v10);
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v9, v10);
}

uint64_t (*static Logger.common.modify())()
{
  return static Logger.wellnessIntents.modify;
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

uint64_t HealthKitDistanceProvider.Source.quantityTypeIdentifier.getter(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v10 = *MEMORY[0x263F09DE8];
      id v2 = (id)*MEMORY[0x263F09DE8];
      uint64_t v12 = v10;
      break;
    case 2:
      uint64_t v9 = *MEMORY[0x263F09DB0];
      id v3 = (id)*MEMORY[0x263F09DB0];
      uint64_t v12 = v9;
      break;
    case 3:
      uint64_t v8 = *MEMORY[0x263F09DD8];
      id v4 = (id)*MEMORY[0x263F09DD8];
      uint64_t v12 = v8;
      break;
    case 4:
      uint64_t v7 = *MEMORY[0x263F09DB8];
      id v5 = (id)*MEMORY[0x263F09DB8];
      uint64_t v12 = v7;
      break;
    default:
      uint64_t v11 = *MEMORY[0x263F09DE0];
      id v1 = (id)*MEMORY[0x263F09DE0];
      uint64_t v12 = v11;
      break;
  }
  return v12;
}

BOOL static HealthKitDistanceProvider.Source.__derived_enum_equals(_:_:)(char a1, char a2)
{
  switch(a1)
  {
    case 1:
      uint64_t v4 = 1;
      break;
    case 2:
      uint64_t v4 = 2;
      break;
    case 3:
      uint64_t v4 = 3;
      break;
    case 4:
      uint64_t v4 = 4;
      break;
    default:
      uint64_t v4 = 0;
      break;
  }
  switch(a2)
  {
    case 1:
      uint64_t v3 = 1;
      break;
    case 2:
      uint64_t v3 = 2;
      break;
    case 3:
      uint64_t v3 = 3;
      break;
    case 4:
      uint64_t v3 = 4;
      break;
    default:
      uint64_t v3 = 0;
      break;
  }
  return v4 == v3;
}

uint64_t HealthKitDistanceProvider.Source.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t HealthKitDistanceProvider.Source.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

uint64_t type metadata accessor for HealthKitDistanceProvider.Source()
{
  return __swift_instantiateGenericMetadata();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HealthKitDistanceProvider<A>.Source(char *a1, char *a2)
{
  return static HealthKitDistanceProvider.Source.__derived_enum_equals(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HealthKitDistanceProvider<A>.Source()
{
  return HealthKitDistanceProvider.Source.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HealthKitDistanceProvider<A>.Source()
{
  return HealthKitDistanceProvider.Source.hash(into:)();
}

void *HealthKitDistanceProvider.init(store:sources:failure:mapIntent:)@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X5>, void *a7@<X6>, void *a8@<X8>)
{
  memset(__b, 0, 0x30uLL);
  __b[6] = a7;
  id v8 = a1;
  id v9 = a1;
  __b[0] = a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  __b[1] = a2;
  swift_retain();
  swift_retain();
  __b[2] = a3;
  __b[3] = a4;
  swift_retain();
  swift_retain();
  __b[4] = a5;
  __b[5] = a6;
  id v10 = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  outlined destroy of HealthKitDistanceProvider<A>(__b);
  uint64_t result = a1;
  *a8 = a1;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HealthKitDistanceProvider<A>(id *a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
}

uint64_t HealthKitDistanceProvider.isQueryAuthorized()()
{
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = v0;
  id v6 = *v0;
  v1[4] = *v0;
  id v2 = v6;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 40) = v3;
  void *v3 = *(void *)(v5 + 16);
  v3[1] = CycleTrackingFetcher.isReadingAuthorized();
  return isSiriAuthorizedToAccessHealthData(store:)((uint64_t)v6);
}

uint64_t HealthKitDistanceProvider.query(start:end:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[23] = v4;
  v5[22] = a3;
  v5[21] = a2;
  v5[20] = a1;
  v5[14] = v5;
  v5[15] = 0;
  v5[16] = 0;
  memset(v5 + 8, 0, 0x30uLL);
  v5[18] = 0;
  v5[19] = 0;
  memcpy(v5 + 2, __src, 0x30uLL);
  uint64_t v12 = v5[2];
  uint64_t v13 = v5[3];
  uint64_t v14 = v5[4];
  uint64_t v15 = v5[5];
  uint64_t v16 = v5[6];
  uint64_t v17 = v5[7];
  uint64_t v6 = *(void *)(a4 + 16);
  v5[24] = v6;
  v5[25] = *(void *)(v6 - 8);
  v5[26] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[15] = a2;
  v5[16] = a3;
  v5[8] = v12;
  v5[9] = v13;
  v5[10] = v14;
  v5[11] = v15;
  v5[12] = v16;
  v5[13] = v17;
  return MEMORY[0x270FA2498](HealthKitDistanceProvider.query(start:end:), 0);
}

uint64_t HealthKitDistanceProvider.query(start:end:)()
{
  uint64_t v7 = (void *)v0[28];
  id v8 = (void *)v0[27];
  uint64_t v5 = v0[24];
  uint64_t v6 = (id *)v0[23];
  uint64_t v4 = (const void *)v0[22];
  uint64_t v3 = (const void *)v0[21];
  v0[14] = v0;
  type metadata accessor for HealthKitDistanceProvider.Source();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Statistics<Double>?);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  outlined retain of HealthKitDistanceProvider<A>(v6);
  outlined init with copy of Date?(v3, v7);
  outlined init with copy of Date?(v4, v8);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[29] = v11;
  v11[2] = v5;
  v11[3] = v6;
  v11[4] = v7;
  void v11[5] = v8;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Statistics<Double>);
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for Dictionary();
  default argument 1 of withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(TupleTypeMetadata2, v10);
  id v1 = (void *)swift_task_alloc();
  *(void *)(v9 + 240) = v1;
  void *v1 = *(void *)(v9 + 112);
  v1[1] = HealthKitDistanceProvider.query(start:end:);
  return MEMORY[0x270FA22B8](v9 + 136, TupleTypeMetadata2, v10, 0, 0, &async function pointer to partial apply for closure #1 in HealthKitDistanceProvider.query(start:end:), v11);
}

{
  uint64_t v0;
  void *v1;
  uint64_t (*v2)();
  id *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  uint64_t v7 = (void *)*v1;
  v7[14] = *v1;
  v7[31] = v0;
  swift_task_dealloc();
  if (v0)
  {
    id v2 = HealthKitDistanceProvider.query(start:end:);
  }
  else
  {
    uint64_t v5 = v7[28];
    uint64_t v6 = v7[27];
    uint64_t v4 = (id *)v7[23];
    swift_task_dealloc();
    outlined release of HealthKitDistanceProvider<A>(v4);
    outlined destroy of Date?(v5);
    outlined destroy of Date?(v6);
    id v2 = HealthKitDistanceProvider.query(start:end:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  id v8 = v0[26];
  uint64_t v6 = v0[25];
  uint64_t v7 = v0[24];
  id v1 = v0[23];
  uint64_t v5 = v0[20];
  v0[14] = v0;
  uint64_t v9 = v0[17];
  v0[19] = v9;
  uint64_t v4 = *(void (**)(uint64_t))(v1 + 32);
  swift_retain();
  v4(v9);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v7);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v2 = *(uint64_t (**)(void))(v0[14] + 8);
  return v2();
}

{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t);
  id v9;
  uint64_t v10;

  uint64_t v9 = (id)v0[31];
  uint64_t v5 = v0[28];
  uint64_t v6 = v0[27];
  uint64_t v7 = v0[23];
  v0[14] = v0;
  swift_task_dealloc();
  outlined release of HealthKitDistanceProvider<A>((id *)v7);
  outlined destroy of Date?(v5);
  outlined destroy of Date?(v6);
  id v1 = v9;
  v0[18] = v9;
  id v8 = *(void (**)(uint64_t))(v7 + 16);
  id v2 = swift_retain();
  v8(v2);
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0[14] + 8);
  return v3();
}

uint64_t closure #1 in HealthKitDistanceProvider.query(start:end:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 192) = a6;
  *(void *)(v6 + 184) = a5;
  *(void *)(v6 + 176) = a4;
  *(void *)(v6 + 168) = a3;
  *(void *)(v6 + 160) = a2;
  *(void *)(v6 + 152) = a1;
  *(void *)(v6 + 96) = v6;
  *(void *)(v6 + 104) = 0;
  *(void *)(v6 + 112) = 0;
  *(void *)(v6 + 120) = 0;
  *(void *)(v6 + 128) = 0;
  *(void *)(v6 + 136) = 0;
  memset((void *)(v6 + 56), 0, 0x28uLL);
  *(unsigned char *)(v6 + 360) = 0;
  *(unsigned char *)(v6 + 368) = 0;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  *(void *)(v6 + 200) = v7;
  *(void *)(v6 + 208) = *(void *)(v7 - 8);
  *(void *)(v6 + 216) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>?);
  *(void *)(v6 + 224) = swift_task_alloc();
  *(void *)(v6 + 232) = swift_task_alloc();
  *(void *)(v6 + 240) = swift_task_alloc();
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                  - 8);
  *(void *)(v6 + 248) = v10;
  *(void *)(v6 + 256) = *(void *)(v10 + 64);
  *(void *)(v6 + 264) = swift_task_alloc();
  *(void *)(v6 + 272) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(void *)(v6 + 280) = swift_task_alloc();
  *(void *)(v6 + 288) = type metadata accessor for HealthKitDistanceProvider.Source();
  *(void *)(v6 + 296) = swift_getTupleTypeMetadata2();
  type metadata accessor for Optional();
  *(void *)(v6 + 304) = swift_task_alloc();
  *(void *)(v6 + 312) = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
  uint64_t v8 = type metadata accessor for ThrowingTaskGroup.Iterator();
  *(void *)(v6 + 320) = v8;
  *(void *)(v6 + 328) = *(void *)(v8 - 8);
  *(void *)(v6 + 336) = swift_task_alloc();
  *(void *)(v6 + 104) = a2;
  *(void *)(v6 + 112) = a3;
  *(void *)(v6 + 120) = a4;
  *(void *)(v6 + 128) = a5;
  return MEMORY[0x270FA2498](closure #1 in HealthKitDistanceProvider.query(start:end:), 0);
}

uint64_t closure #1 in HealthKitDistanceProvider.query(start:end:)()
{
  v0[12] = v0;
  v0[43] = swift_getWitnessTable();
  v0[17] = Dictionary.init()();
  swift_bridgeObjectRetain();
  Set.makeIterator()();
  memcpy(v0 + 7, v0 + 2, 0x28uLL);
  while (1)
  {
    type metadata accessor for Set.Iterator();
    Set.Iterator.next()();
    int v20 = *(unsigned __int8 *)(v21 + 361);
    if (v20 == 5) {
      break;
    }
    uint64_t v19 = *(void *)(v21 + 280);
    uint64_t v14 = *(void **)(v21 + 272);
    uint64_t v17 = *(void **)(v21 + 264);
    uint64_t v11 = *(void *)(v21 + 256);
    uint64_t v12 = *(void *)(v21 + 192);
    uint64_t v9 = *(const void **)(v21 + 184);
    uint64_t v8 = *(const void **)(v21 + 176);
    __src = *(id **)(v21 + 168);
    uint64_t v10 = *(void *)(v21 + 248);
    *(unsigned char *)(v21 + 368) = v20;
    uint64_t v4 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v19, 1);
    outlined retain of HealthKitDistanceProvider<A>(__src);
    outlined init with copy of Date?(v8, v14);
    outlined init with copy of Date?(v9, v17);
    uint64_t v5 = *(_DWORD *)(v10 + 80);
    uint64_t v15 = (v5 + 96) & ~v5;
    uint64_t v16 = (v15 + v11 + v5) & ~v5;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = 0;
    *(void *)(v18 + 24) = 0;
    *(void *)(v18 + 32) = v12;
    *(unsigned char *)(v18 + 40) = v20;
    memcpy((void *)(v18 + 48), __src, 0x30uLL);
    outlined init with take of Date?(v14, (void *)(v18 + v15));
    outlined init with take of Date?(v17, (void *)(v18 + v16));
    uint64_t v6 = type metadata accessor for ThrowingTaskGroup();
    _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(v19, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in HealthKitDistanceProvider.query(start:end:), v18, v6);
    outlined destroy of TaskPriority?(v19);
  }
  outlined destroy of [String? : (scheduleDate: Date?, medID: String, count: Int)].Iterator();
  ThrowingTaskGroup.makeAsyncIterator()();
  id v1 = (void *)swift_task_alloc();
  *(void *)(v21 + 352) = v1;
  void *v1 = *(void *)(v21 + 96);
  v1[1] = closure #1 in HealthKitDistanceProvider.query(start:end:);
  uint64_t v2 = *(void *)(v21 + 320);
  uint64_t v3 = *(void *)(v21 + 304);
  return MEMORY[0x270FA2058](v3, 0, 0, v2, v21 + 144);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;

  *(void *)(*(void *)v1 + 96) = *(void *)v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in HealthKitDistanceProvider.query(start:end:);
  }
  else
  {
    uint64_t v2 = closure #1 in HealthKitDistanceProvider.query(start:end:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  char *v5;
  char *v6;
  __n128 v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  id v1 = v0[38];
  uint64_t v2 = v0[37];
  v0[12] = v0;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1) == 1)
  {
    int v20 = *(void **)(v21 + 152);
    (*(void (**)(void))(*(void *)(v21 + 328) + 8))();
    *int v20 = *(void *)(v21 + 136);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v21 + 96) + 8);
    return v3();
  }
  else
  {
    uint64_t v5 = *(char **)(v21 + 304);
    uint64_t v16 = *(char **)(v21 + 240);
    uint64_t v19 = *(char **)(v21 + 232);
    uint64_t v18 = *(void *)(v21 + 200);
    uint64_t v17 = *(void *)(v21 + 208);
    uint64_t v15 = *v5;
    uint64_t v6 = &v5[*(int *)(*(void *)(v21 + 296) + 48)];
    *(unsigned char *)(v21 + 360) = *v5;
    outlined init with take of Statistics<Double>?(v6, v16);
    outlined init with copy of Statistics<Double>?(v16, v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v19, 1, v18) == 1)
    {
      outlined destroy of Statistics<Double>?(*(void *)(v21 + 232));
    }
    else
    {
      uint64_t v13 = *(char **)(v21 + 224);
      uint64_t v14 = *(char **)(v21 + 216);
      uint64_t v12 = *(void *)(v21 + 200);
      uint64_t v11 = *(void *)(v21 + 208);
      outlined init with take of Statistics<Double>(*(char **)(v21 + 232), v14);
      uint64_t v7 = outlined init with copy of Statistics<Double>(v14, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t, __n128))(v11 + 56))(v13, 0, 1, v12, v7);
      *(unsigned char *)(v21 + 362) = v15;
      type metadata accessor for Dictionary();
      Dictionary.subscript.setter();
      outlined destroy of Statistics<Double>((uint64_t)v14);
    }
    outlined destroy of Statistics<Double>?(*(void *)(v21 + 240));
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v21 + 352) = v8;
    *uint64_t v8 = *(void *)(v21 + 96);
    v8[1] = closure #1 in HealthKitDistanceProvider.query(start:end:);
    uint64_t v9 = *(void *)(v21 + 320);
    uint64_t v10 = *(void *)(v21 + 304);
    return MEMORY[0x270FA2058](v10, 0, 0, v9, v21 + 144);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;

  id v1 = *(void *)(v0 + 328);
  *(void *)(v0 + 96) = v0;
  (*(void (**)(void))(v1 + 8))();
  outlined destroy of [HKQuantityType]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v0 + 96) + 8);
  return v2();
}

id *outlined retain of HealthKitDistanceProvider<A>(id *a1)
{
  id v1 = *a1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t partial apply for closure #1 in HealthKitDistanceProvider.query(start:end:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v11 = v2[2];
  uint64_t v8 = v2[3];
  uint64_t v9 = v2[4];
  uint64_t v10 = v2[5];
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = _sIeghH_IeAgH_TRTQ0_;
  return closure #1 in HealthKitDistanceProvider.query(start:end:)(a1, a2, v8, v9, v10, v11);
}

uint64_t closure #1 in closure #1 in HealthKitDistanceProvider.query(start:end:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 88) = a8;
  *(void *)(v8 + 80) = a7;
  *(void *)(v8 + 72) = a6;
  *(void *)(v8 + 64) = a5;
  *(unsigned char *)(v8 + 153) = a4;
  *(void *)(v8 + 56) = a1;
  *(void *)(v8 + 16) = v8;
  *(unsigned char *)(v8 + 152) = 0;
  *(void *)(v8 + 24) = 0;
  *(void *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = 0;
  *(void *)(v8 + 48) = 0;
  type metadata accessor for HealthKitDistanceProvider.Source();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Statistics<Double>?);
  *(void *)(v8 + 96) = swift_getTupleTypeMetadata2();
  *(void *)(v8 + 104) = swift_task_alloc();
  *(void *)(v8 + 112) = swift_task_alloc();
  *(unsigned char *)(v8 + 152) = a4;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 40) = a7;
  return MEMORY[0x270FA2498](closure #1 in closure #1 in HealthKitDistanceProvider.query(start:end:), 0);
}

uint64_t closure #1 in closure #1 in HealthKitDistanceProvider.query(start:end:)()
{
  uint64_t v10 = *(void ***)(v0 + 64);
  char v9 = *(unsigned char *)(v0 + 153);
  *(void *)(v0 + 16) = v0;
  type metadata accessor for HKQuantityType();
  uint64_t v1 = HealthKitDistanceProvider.Source.quantityTypeIdentifier.getter(v9);
  uint64_t v12 = MEMORY[0x2611C8CE0](v1);
  *(void *)(v0 + 120) = v12;
  *(void *)(v0 + 48) = v12;
  uint64_t v2 = *v10;
  *(void *)(v0 + 128) = *v10;
  id v3 = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v11[17] = v4;
  *uint64_t v4 = v11[2];
  v4[1] = closure #1 in closure #1 in HealthKitDistanceProvider.query(start:end:);
  uint64_t v5 = v11[14];
  uint64_t v6 = v11[10];
  uint64_t v7 = v11[9];
  return HKHealthStore.query(quantityType:start:end:)(v5, v12, v7, v6);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  *(void *)(v4 + 16) = *v1;
  *(void *)(v4 + 144) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = closure #1 in closure #1 in HealthKitDistanceProvider.query(start:end:);
  }
  else
  {

    uint64_t v2 = closure #1 in closure #1 in HealthKitDistanceProvider.query(start:end:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  char *v1;
  char v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  char v6;
  uint64_t v7;
  unsigned char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unsigned char *v12;
  uint64_t v13;

  uint64_t v10 = *(id *)(v0 + 120);
  uint64_t v1 = *(char **)(v0 + 112);
  uint64_t v11 = (uint64_t)v1;
  uint64_t v12 = *(unsigned char **)(v0 + 104);
  char v9 = *(void *)(v0 + 96);
  uint64_t v2 = *(unsigned char *)(v0 + 153);
  uint64_t v6 = v2;
  uint64_t v8 = *(unsigned char **)(v0 + 56);
  *(void *)(v0 + 16) = v0;
  uint64_t v7 = *(int *)(v9 + 48);
  *uint64_t v12 = v2;
  outlined init with copy of Statistics<Double>?(v1, &v12[v7]);
  id v3 = *(int *)(v9 + 48);
  *uint64_t v8 = v6;
  outlined init with copy of Statistics<Double>?(&v12[v7], &v8[v3]);
  outlined destroy of (HealthKitDistanceProvider<A>.Source, Statistics<Double>?)((uint64_t)v12, v9);
  outlined destroy of Statistics<Double>?(v11);

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(v0 + 16) + 8);
  return v4();
}

{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);
  id v4;
  uint64_t v5;

  uint64_t v1 = (void *)v0[16];
  uint64_t v4 = (id)v0[15];
  v0[2] = v0;

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0[2] + 8);
  return v2();
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a1;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  unint64_t v32 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v4 = (const void *)MEMORY[0x270FA5388](v31);
  uint64_t v33 = (uint64_t)&v7 - v32;
  outlined init with copy of TaskPriority?(v4, (char *)&v7 - v32);
  uint64_t v34 = type metadata accessor for TaskPriority();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = v34 - 8;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v35 + 48))(v33, 1) == 1)
  {
    uint64_t v25 = 0;
    outlined destroy of TaskPriority?(v33);
    uint64_t v26 = v25;
  }
  else
  {
    int v24 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
    uint64_t v26 = v24;
  }
  uint64_t v21 = v26 | 0x3100;
  uint64_t v23 = *(void *)(v28 + 16);
  uint64_t v22 = *(void *)(v28 + 24);
  swift_unknownObjectRetain();
  if (v23)
  {
    uint64_t v19 = v23;
    uint64_t v20 = v22;
    uint64_t v13 = v22;
    uint64_t v14 = v23;
    swift_getObjectType();
    uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v16 = v5;
    swift_unknownObjectRelease();
    uint64_t v17 = v15;
    uint64_t v18 = v16;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  uint64_t v8 = v18;
  uint64_t v9 = v17;
  uint64_t v10 = *v30;
  uint64_t v11 = *(void *)(v29 + 16);
  v40[4] = v11;
  uint64_t v12 = 0;
  if (v17 != 0 || v18 != 0)
  {
    v40[0] = 0;
    v40[1] = 0;
    v40[2] = v9;
    v40[3] = v8;
    uint64_t v12 = v40;
  }
  uint64_t v37 = 1;
  uint64_t v38 = v12;
  uint64_t v39 = v10;
  swift_task_create();
  return swift_release();
}

uint64_t default argument 1 of withThrowingTaskGroup<A, B>(of:returning:isolation:body:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

id *outlined release of HealthKitDistanceProvider<A>(id *a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return a1;
}

uint64_t protocol witness for DataProviding.isQueryAuthorized() in conformance HealthKitDistanceProvider<A>()
{
  *(void *)(v1 + 64) = v1;
  memcpy((void *)(v1 + 16), v0, 0x30uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 72) = v2;
  *uint64_t v2 = *(void *)(v4 + 64);
  v2[1] = protocol witness for DataProviding.isQueryAuthorized() in conformance HealthKitDistanceProvider<A>;
  return HealthKitDistanceProvider.isQueryAuthorized()();
}

uint64_t protocol witness for DataProviding.isQueryAuthorized() in conformance HealthKitDistanceProvider<A>(unsigned int a1)
{
  uint64_t v4 = *v1;
  *(void *)(v4 + 64) = *v1;
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(v4 + 64) + 8);
  return v2(a1);
}

uint64_t protocol witness for DataProviding.isLoggingAuthorized() in conformance HealthKitDistanceProvider<A>()
{
  *(void *)(v1 + 64) = v1;
  memcpy((void *)(v1 + 16), v0, 0x30uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 72) = v2;
  *uint64_t v2 = *(void *)(v4 + 64);
  v2[1] = protocol witness for DataProviding.isQueryAuthorized() in conformance HealthKitDistanceProvider<A>;
  return HealthKitDistanceProvider.isQueryAuthorized()();
}

void *static HealthKitDistanceProvider<A>.ambiguousDistance(store:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v2 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source);
  _allocateUninitializedArray<A>(_:)();
  unsigned char *v3 = 0;
  v3[1] = 1;
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source]);
  lazy protocol witness table accessor for type HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source and conformance HealthKitDistanceProvider<A>.Source();
  lazy protocol witness table accessor for type [HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source] and conformance [A]();
  uint64_t v6 = (void *)Set.init<A>(_:)();
  AmbiguousDistanceIntentResponse = (void *)type metadata accessor for GetAmbiguousDistanceIntentResponse();
  HealthKitDistanceProvider.init(store:sources:failure:mapIntent:)(a1, v6, implicit closure #1 in static HealthKitDistanceProvider<A>.ambiguousDistance(store:), 0, closure #1 in static HealthKitDistanceProvider<A>.ambiguousDistance(store:), 0, AmbiguousDistanceIntentResponse, v9);
  return memcpy(a2, v9, 0x30uLL);
}

unint64_t lazy protocol witness table accessor for type HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source and conformance HealthKitDistanceProvider<A>.Source()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source and conformance HealthKitDistanceProvider<A>.Source;
  if (!lazy protocol witness table cache variable for type HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source and conformance HealthKitDistanceProvider<A>.Source)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source and conformance HealthKitDistanceProvider<A>.Source);
    return WitnessTable;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

char *implicit closure #1 in static HealthKitDistanceProvider<A>.ambiguousDistance(store:)@<X0>(char **a1@<X8>)
{
  type metadata accessor for GetAmbiguousDistanceIntentResponse();
  uint64_t result = GetAmbiguousDistanceIntentResponse.__allocating_init(code:userActivity:)(5, 0);
  *a1 = result;
  return result;
}

char *closure #1 in static HealthKitDistanceProvider<A>.ambiguousDistance(store:)@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v69 = a1;
  int v86 = 0;
  int v85 = 0;
  uint64_t v84 = 0;
  uint64_t v83 = 0;
  uint64_t v80 = 0;
  uint64_t v79 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = type metadata accessor for DateInterval();
  uint64_t v45 = *(void **)(v44 - 8);
  uint64_t v46 = v44 - 8;
  unint64_t v47 = (v45[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v48 = (char *)&v24 - v47;
  unint64_t v49 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v3);
  id v50 = (char *)&v24 - v49;
  uint64_t v51 = type metadata accessor for Date();
  uint64_t v52 = *(void **)(v51 - 8);
  uint64_t v53 = v51 - 8;
  unint64_t v54 = (v52[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v51);
  uint64_t v55 = (char *)&v24 - v54;
  unint64_t v56 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v24 - v54);
  uint64_t v57 = (char *)&v24 - v56;
  unint64_t v58 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v24 - v56);
  uint64_t v59 = (char *)&v24 - v58;
  unint64_t v60 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v24 - v58);
  uint64_t v61 = (char *)&v24 - v60;
  int v86 = (char *)&v24 - v60;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>?);
  unint64_t v62 = (*(void *)(*(void *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  uint64_t v63 = (char *)&v24 - v62;
  unint64_t v64 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388]((char *)&v24 - v62);
  uint64_t v75 = (char *)&v24 - v64;
  uint64_t v76 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  uint64_t v73 = *((void *)v76 - 1);
  uint64_t v74 = v76 - 2;
  unint64_t v65 = (*(void *)(v73 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v69);
  uint64_t v66 = (char *)&v24 - v65;
  int v85 = (char *)&v24 - v65;
  unint64_t v67 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v10);
  unint64_t v68 = (char *)&v24 - v67;
  uint64_t v84 = (char *)&v24 - v67;
  uint64_t v83 = v11;
  uint32_t v71 = &v82;
  char v82 = 0;
  uint64_t v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source);
  unint64_t AmbiguousDistanceIntent = lazy protocol witness table accessor for type HealthKitDistanceProvider<GetAmbiguousDistanceIntentResponse>.Source and conformance HealthKitDistanceProvider<A>.Source();
  MEMORY[0x2611C8800](v71, v69, v70, v76);
  uint64_t v77 = *(unsigned int (**)(char *, uint64_t, int *))(v73 + 48);
  uint64_t v78 = v73 + 48;
  if (v77(v75, 1, v76) == 1)
  {
    outlined destroy of Statistics<Double>?((uint64_t)v75);
  }
  else
  {
    __n128 v12 = outlined init with take of Statistics<Double>(v75, v68);
    char v81 = 1;
    MEMORY[0x2611C8800](&v81, v69, v70, v76, AmbiguousDistanceIntent, v12);
    if (v77(v63, 1, v76) != 1)
    {
      uint64_t v13 = v50;
      __n128 v14 = outlined init with take of Statistics<Double>(v63, v66);
      uint64_t v15 = &v68[v76[7]];
      uint64_t v36 = (void (*)(char *, char *, uint64_t, __n128))v45[2];
      uint64_t v35 = v45 + 2;
      v36(v13, v15, v44, v14);
      DateInterval.start.getter();
      uint64_t v16 = v48;
      uint64_t v38 = (void (*)(char *, uint64_t))v45[1];
      uint64_t v37 = v45 + 1;
      v38(v50, v44);
      ((void (*)(char *, char *, uint64_t))v36)(v16, &v66[v76[7]], v44);
      DateInterval.start.getter();
      v38(v48, v44);
      unint64_t v39 = lazy protocol witness table accessor for type Date and conformance Date();
      min<A>(_:_:)();
      uint64_t v41 = (void (*)(char *, uint64_t))v52[1];
      uint64_t v40 = v52 + 1;
      v41(v57, v51);
      v41(v59, v51);
      uint64_t v80 = v59;
      ((void (*)(char *, char *, uint64_t))v36)(v50, &v68[v76[7]], v44);
      DateInterval.end.getter();
      uint64_t v17 = v48;
      v38(v50, v44);
      ((void (*)(char *, char *, uint64_t))v36)(v17, &v66[v76[7]], v44);
      DateInterval.end.getter();
      v38(v48, v44);
      max<A>(_:_:)();
      v41(v55, v51);
      v41(v57, v51);
      uint64_t v26 = 0;
      type metadata accessor for GetAmbiguousDistanceIntentResponse();
      uint64_t v34 = GetAmbiguousDistanceIntentResponse.__allocating_init(code:userActivity:)(4, v26);
      uint64_t v79 = v34;
      uint64_t v29 = (void (*)(char *, char *, uint64_t))v52[2];
      uint64_t v28 = v52 + 2;
      v29(v57, v61, v51);
      v18.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
      uint64_t v19 = v57;
      Class isa = v18.super.isa;
      v41(v57, v51);
      objc_msgSend(v34, sel_setSampleStartDate_, isa);

      v29(v19, v59, v51);
      Class v30 = Date._bridgeToObjectiveC()().super.isa;
      v41(v57, v51);
      objc_msgSend(v34, sel_setSampleEndDate_, v30);

      objc_msgSend(v34, sel_setWalkRunDistance_, *(double *)&v68[v76[13]]);
      objc_msgSend(v34, sel_setWheelchairDistance_, *(double *)&v66[v76[13]]);
      uint64_t v20 = &v68[v76[9]];
      uint64_t v31 = *(void *)v20;
      uint64_t v32 = *((void *)v20 + 1);
      swift_bridgeObjectRetain();
      id v33 = (id)MEMORY[0x2611C8860](v31, v32);
      swift_bridgeObjectRelease();
      objc_msgSend(v34, sel_setUnit_, v33);

      uint64_t v21 = v34;
      uint64_t v22 = v34;
      *uint64_t v42 = v34;

      v41(v59, v51);
      v41(v61, v51);
      outlined destroy of Statistics<Double>((uint64_t)v66);
      return (char *)outlined destroy of Statistics<Double>((uint64_t)v68);
    }
    outlined destroy of Statistics<Double>?((uint64_t)v63);
    outlined destroy of Statistics<Double>((uint64_t)v68);
  }
  uint64_t v25 = 0;
  type metadata accessor for GetAmbiguousDistanceIntentResponse();
  uint64_t result = GetAmbiguousDistanceIntentResponse.__allocating_init(code:userActivity:)(102, v25);
  *uint64_t v42 = result;
  return result;
}

uint64_t protocol witness for AmbiguousDistanceProviding.query(start:end:) in conformance <A> HealthKitDistanceProvider<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 64) = v4;
  memcpy((void *)(v4 + 16), v3, 0x30uLL);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v7 + 80) = v5;
  *uint64_t v5 = *(void *)(v7 + 64);
  v5[1] = protocol witness for AmbiguousDistanceProviding.query(start:end:) in conformance <A> HealthKitDistanceProvider<A>;
  return HealthKitDistanceProvider.query(start:end:)(v7 + 72, a1, a2, a3);
}

uint64_t protocol witness for AmbiguousDistanceProviding.query(start:end:) in conformance <A> HealthKitDistanceProvider<A>()
{
  uint64_t v4 = *v0;
  uint64_t v5 = *v0;
  *(void *)(v5 + 64) = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(void *)(v4 + 72);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(v5 + 64) + 8);
  return v2(v1);
}

uint64_t type metadata instantiation function for HealthKitDistanceProvider()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t destroy for HealthKitDistanceProvider(id *a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void *initializeWithCopy for HealthKitDistanceProvider(void *a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  id v2 = *(id *)a2;
  *a1 = v4;
  uint64_t v5 = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  a1[1] = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  swift_retain();
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  a1[4] = v10;
  a1[5] = v11;
  return result;
}

uint64_t assignWithCopy for HealthKitDistanceProvider(uint64_t a1, uint64_t a2)
{
  id v5 = *(id *)a2;
  id v2 = *(id *)a2;
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = v5;

  uint64_t v6 = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  swift_retain();
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  swift_release();
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a2 + 40);
  swift_retain();
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v11;
  swift_release();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy48_8(void *a1, const void *a2)
{
}

uint64_t assignWithTake for HealthKitDistanceProvider(uint64_t a1, void *a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = *a2;

  *(void *)(a1 + 8) = a2[1];
  swift_bridgeObjectRelease();
  uint64_t v3 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v3;
  swift_release();
  uint64_t v4 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v4;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HealthKitDistanceProvider(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 48))
    {
      int v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      int v3 = -1;
      if (!HIDWORD(*(void *)a1)) {
        int v3 = *(void *)a1;
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HealthKitDistanceProvider(uint64_t result, unsigned int a2, unsigned int a3)
{
  BOOL v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(void *)uint64_t result = a2 + 0x80000000;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 48) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 48) = 0;
      }
      else {
        __break(1u);
      }
    }
    if (a2) {
      *(void *)uint64_t result = a2 - 1;
    }
  }
  return result;
}

uint64_t type metadata accessor for HealthKitDistanceProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata instantiation function for HealthKitDistanceProvider.Source()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t base witness table accessor for Equatable in HealthKitDistanceProvider<A>.Source()
{
  return swift_getWitnessTable();
}

char *outlined init with take of Statistics<Double>?(char *a1, char *a2)
{
  uint64_t v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  uint64_t v10 = *((void *)v9 - 1);
  if ((*(unsigned int (**)(char *, uint64_t))(v10 + 48))(a1, 1))
  {
    uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>?);
    memcpy(a2, a1, *(void *)(*(void *)(v3 - 8) + 64));
  }
  else
  {
    uint64_t v5 = type metadata accessor for DateInterval();
    uint64_t v6 = *(void *)(v5 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v6 + 48))(a1, 1))
    {
      uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
      memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a2, a1, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, v5);
    }
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&a2[v9[7]], &a1[v9[7]], v5);
    *(void *)&a2[v9[8]] = *(void *)&a1[v9[8]];
    *(_OWORD *)&a2[v9[9]] = *(_OWORD *)&a1[v9[9]];
    *(_OWORD *)&a2[v9[10]] = *(_OWORD *)&a1[v9[10]];
    *(void *)&a2[v9[11]] = *(void *)&a1[v9[11]];
    *(void *)&a2[v9[12]] = *(void *)&a1[v9[12]];
    *(void *)&a2[v9[13]] = *(void *)&a1[v9[13]];
    (*(void (**)(void))(v10 + 56))();
  }
  return a2;
}

char *outlined init with copy of Statistics<Double>?(char *a1, char *a2)
{
  __n128 v12 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  uint64_t v13 = *((void *)v12 - 1);
  if ((*(unsigned int (**)(char *, uint64_t))(v13 + 48))(a1, 1))
  {
    uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>?);
    memcpy(a2, a1, *(void *)(*(void *)(v4 - 8) + 64));
  }
  else
  {
    uint64_t v8 = type metadata accessor for DateInterval();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t))(v9 + 48))(a1, 1))
    {
      uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
      memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(a2, a1, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, v8);
    }
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(&a2[v12[7]], &a1[v12[7]], v8);
    *(void *)&a2[v12[8]] = *(void *)&a1[v12[8]];
    uint64_t v3 = v12[9];
    uint64_t v6 = &a2[v3];
    *(void *)&a2[v3] = *(void *)&a1[v3];
    uint64_t v7 = *(void *)&a1[v3 + 8];
    swift_bridgeObjectRetain();
    *((void *)v6 + 1) = v7;
    *(_OWORD *)&a2[v12[10]] = *(_OWORD *)&a1[v12[10]];
    *(void *)&a2[v12[11]] = *(void *)&a1[v12[11]];
    *(void *)&a2[v12[12]] = *(void *)&a1[v12[12]];
    *(void *)&a2[v12[13]] = *(void *)&a1[v12[13]];
    (*(void (**)(void))(v13 + 56))();
  }
  return a2;
}

uint64_t sub_25DED915C()
{
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                 - 8);
  uint64_t v1 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = (v1 + 96) & ~v1;
  uint64_t v5 = (v6 + *(void *)(v4 + 64) + v1) & ~v1;
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int (**)(void))(v8 + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v9)(v0 + v6, 1)) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3 + v6, v7);
  }
  if (!v9()) {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3 + v5, v7);
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in HealthKitDistanceProvider.query(start:end:)(uint64_t a1)
{
  uint64_t v7 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v13 = *(void *)(v1 + 32);
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                 - 8);
  uint64_t v3 = *(_DWORD *)(v6 + 80);
  uint64_t v11 = (v3 + 96) & ~v3;
  uint64_t v12 = (v11 + *(void *)(v6 + 64) + v3) & ~v3;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  char v10 = *(unsigned char *)(v1 + 40);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v7 + 24) = v4;
  *uint64_t v4 = *(void *)(v7 + 16);
  v4[1] = _sIeghH_IeAgH_TRTQ0_;
  return closure #1 in closure #1 in HealthKitDistanceProvider.query(start:end:)(a1, v8, v9, v10, v1 + 48, v1 + v11, v1 + v12, v13);
}

void *outlined init with copy of TaskPriority?(const void *a1, void *a2)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
    memcpy(a2, a1, *(void *)(*(void *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of (HealthKitDistanceProvider<A>.Source, Statistics<Double>?)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(a2 + 48);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Statistics<Double>);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(a1 + v5, 1))
  {
    uint64_t v3 = type metadata accessor for DateInterval();
    uint64_t v4 = *(void *)(v3 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1 + v5, 1)) {
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1 + v5, v3);
    }
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1 + v5 + *(int *)(v7 + 28), v3);
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[1] = a3;
  v7[0] = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return UnsafeContinuation.resume(throwing:)((uint64_t)v7, a1, a3, v3);
}

uint64_t _resumeUnsafeThrowingContinuation<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UnsafeContinuation.resume(returning:)(a2, a1, a3);
}

id LogPeriodIntentHandler.__allocating_init(storage:)(void *a1)
{
  id v2 = objc_allocWithZone(v1);
  return LogPeriodIntentHandler.init(storage:)(a1);
}

id LogPeriodIntentHandler.init(storage:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  id v2 = v1;
  id v13 = v1;
  outlined init with copy of QuantityPersisting?(a1, v11);
  if (v11[3])
  {
    outlined init with take of QuantityPersisting(v11, __dst);
  }
  else
  {
    id v3 = PeriodPersistor.init()();
    __dst[3] = &type metadata for PeriodPersistor;
    __dst[4] = &protocol witness table for PeriodPersistor;
    __dst[0] = v3;
    outlined destroy of QuantityPersisting?((uint64_t)v11);
  }
  outlined init with take of QuantityPersisting(__dst, &v7[OBJC_IVAR____TtC19SiriWellnessIntents22LogPeriodIntentHandler_storage]);

  v10.receiver = v13;
  v10.super_class = ObjectType;
  id v6 = objc_msgSendSuper2(&v10, sel_init);
  id v4 = v6;
  id v13 = v6;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v6;
}

id PeriodPersistor.init()()
{
  id v4 = 0;
  type metadata accessor for HKMenstrualCyclesStore();
  type metadata accessor for HKHealthStore();
  uint64_t v0 = NSDateFormatter.__allocating_init()();
  id v3 = HKUnitPreferenceController.__allocating_init(healthStore:)(v0);
  id v1 = v3;
  id v4 = v3;
  outlined destroy of HealthKitPersistor(&v4);
  return v3;
}

uint64_t LogPeriodIntentHandler.handle(intent:)(uint64_t a1)
{
  v2[48] = v1;
  v2[47] = a1;
  v2[24] = v2;
  v2[25] = 0;
  v2[26] = 0;
  uint64_t v3 = type metadata accessor for Date();
  v2[49] = v3;
  v2[50] = *(void *)(v3 - 8);
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v2[53] = swift_task_alloc();
  v2[54] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[55] = v4;
  v2[56] = *(void *)(v4 - 8);
  v2[57] = swift_task_alloc();
  v2[58] = swift_task_alloc();
  v2[59] = swift_task_alloc();
  v2[60] = swift_task_alloc();
  v2[25] = a1;
  v2[26] = v1;
  return MEMORY[0x270FA2498](LogPeriodIntentHandler.handle(intent:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 192) = *v1;
  *(void *)(v3 + 576) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](LogPeriodIntentHandler.handle(intent:), 0);
}

uint64_t LogPeriodIntentHandler.handle(intent:)()
{
  uint64_t v1 = *(void *)(v0 + 480);
  uint64_t v19 = *(void *)(v0 + 448);
  uint64_t v21 = *(void *)(v0 + 440);
  *(void *)(v0 + 192) = v0;
  uint64_t v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  id v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  *(void *)(v0 + 488) = v2;
  *(void *)(v0 + 496) = (v19 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v2(v1, v20, v21);
  swift_endAccess();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 216) = 2;
  *(void *)(v0 + 504) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 512) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 520) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v22 = *(unsigned int *)(v0 + 584);
  *(void *)(v0 + 528) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v25 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v24, v23))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v15 = createStorage<A>(capacity:type:)(0);
    uint64_t v16 = createStorage<A>(capacity:type:)(0);
    *(void *)(v18 + 344) = buf;
    *(void *)(v18 + 352) = v15;
    *(void *)(v18 + 360) = v16;
    serialize(_:at:)(0, (unsigned char **)(v18 + 344));
    serialize(_:at:)(0, (unsigned char **)(v18 + 344));
    *(void *)(v18 + 368) = v25;
    uint64_t v17 = (void *)swift_task_alloc();
    v17[2] = v18 + 344;
    v17[3] = v18 + 352;
    v17[4] = v18 + 360;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v24, v23, "Checking authorization for Cycle Tracking...", buf, v22);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  *(void *)(v18 + 536) = 0;
  uint64_t v7 = *(void *)(v18 + 480);
  uint64_t v8 = *(void *)(v18 + 440);
  uint64_t v9 = *(void *)(v18 + 384);
  uint64_t v6 = *(void *)(v18 + 448);

  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v18 + 544) = v3;
  *(void *)(v18 + 552) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v3(v7, v8);
  outlined init with copy of QuantityPersisting(v9 + OBJC_IVAR____TtC19SiriWellnessIntents22LogPeriodIntentHandler_storage, v18 + 16);
  uint64_t v12 = *(void *)(v18 + 40);
  uint64_t v10 = *(void *)(v18 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v18 + 16), v12);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v10 + 8) + **(int **)(v10 + 8));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v18 + 560) = v4;
  *uint64_t v4 = *(void *)(v18 + 192);
  v4[1] = LogPeriodIntentHandler.handle(intent:);
  return v11(v12, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unsigned int (**v4)(void, uint64_t, void);
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(char *);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  char *v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint32_t v23;
  os_log_type_t v24;
  NSObject *log;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, id, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint8_t *buf;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v50;
  NSObject *oslog;
  uint64_t v52;
  unsigned int (*v53)(void, uint64_t, void);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t, uint64_t, uint64_t);
  uint32_t v72;
  os_log_type_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;

  uint64_t v77 = *(unsigned char *)(v0 + 600);
  *(void *)(v0 + 192) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if (v77)
  {
    uint32_t v71 = *(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 488);
    uint64_t v1 = *(void *)(v76 + 472);
    uint64_t v70 = *(void *)(v76 + 440);
    uint64_t v69 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v71(v1, v69, v70);
    swift_endAccess();
    uint64_t v74 = Logger.logObject.getter();
    uint64_t v73 = static os_log_type_t.debug.getter();
    *(void *)(v76 + 264) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v72 = *(_DWORD *)(v76 + 592);
    uint64_t v75 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v74, v73))
    {
      id v2 = *(void *)(v76 + 536);
      unint64_t v65 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      unint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v66 = createStorage<A>(capacity:type:)(0);
      unint64_t v67 = createStorage<A>(capacity:type:)(0);
      *(void *)(v76 + 312) = v65;
      *(void *)(v76 + 320) = v66;
      *(void *)(v76 + 328) = v67;
      serialize(_:at:)(0, (unsigned char **)(v76 + 312));
      serialize(_:at:)(0, (unsigned char **)(v76 + 312));
      *(void *)(v76 + 336) = v75;
      unint64_t v68 = (void *)swift_task_alloc();
      v68[2] = v76 + 312;
      v68[3] = v76 + 320;
      v68[4] = v76 + 328;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v2) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v74, v73, "Authorization check successful for Cycle Tracking!", v65, v72);
      destroyStorage<A>(_:count:)(v66, 0, v64);
      destroyStorage<A>(_:count:)(v67, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v65, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
      uint64_t v63 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v63 = *(void *)(v76 + 536);
    }
    unint64_t v60 = *(void (**)(uint64_t, uint64_t))(v76 + 544);
    unint64_t v58 = *(void *)(v76 + 472);
    uint64_t v59 = *(void *)(v76 + 440);
    uint64_t v61 = *(id *)(v76 + 376);

    v60(v58, v59);
    unint64_t v62 = objc_msgSend(v61, sel_date);
    if (v62)
    {
      uint64_t v57 = *(void *)(v76 + 432);
      uint64_t v55 = *(void *)(v76 + 416);
      unint64_t v56 = *(void *)(v76 + 392);
      unint64_t v54 = *(void *)(v76 + 400);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32))(v57, v55, v56);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v57, 0, 1, v56);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v76 + 400) + 56))(*(void *)(v76 + 432), 1, 1, *(void *)(v76 + 392));
    }
    uint64_t v4 = (unsigned int (**)(void, uint64_t, void))(*(void *)(v76 + 400) + 48);
    uint64_t v53 = *v4;
    if ((*v4)(*(void *)(v76 + 432), 1, *(void *)(v76 + 392)) == 1)
    {
      outlined destroy of Date?(*(void *)(v76 + 432));
      uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 488);
      uint64_t v5 = *(void *)(v76 + 464);
      unint64_t v47 = *(void *)(v76 + 440);
      uint64_t v46 = Logger.wellness.unsafeMutableAddressor();
      swift_beginAccess();
      v48(v5, v46, v47);
      swift_endAccess();
      os_log_t oslog = Logger.logObject.getter();
      id v50 = static os_log_type_t.debug.getter();
      *(void *)(v76 + 272) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint32_t size = *(_DWORD *)(v76 + 596);
      uint64_t v52 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(oslog, v50))
      {
        buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v43 = createStorage<A>(capacity:type:)(0);
        uint64_t v44 = createStorage<A>(capacity:type:)(0);
        *(void *)(v76 + 280) = buf;
        *(void *)(v76 + 288) = v43;
        *(void *)(v76 + 296) = v44;
        serialize(_:at:)(0, (unsigned char **)(v76 + 280));
        serialize(_:at:)(0, (unsigned char **)(v76 + 280));
        *(void *)(v76 + 304) = v52;
        uint64_t v45 = (void *)swift_task_alloc();
        v45[2] = v76 + 280;
        v45[3] = v76 + 288;
        v45[4] = v76 + 296;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        uint64_t result = Sequence.forEach(_:)();
        if (v63) {
          return result;
        }
        swift_task_dealloc();
        _os_log_impl(&dword_25DE00000, oslog, v50, "LogPeriodIntentHandler missing date. Assuming date is Now.", buf, size);
        destroyStorage<A>(_:count:)(v43, 0, v41);
        destroyStorage<A>(_:count:)(v44, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v76 + 544);
      uint64_t v38 = *(void *)(v76 + 464);
      unint64_t v39 = *(void *)(v76 + 440);

      v40(v38, v39);
    }
    else
    {
      outlined destroy of Date?(*(void *)(v76 + 432));
    }
    uint64_t v37 = objc_msgSend(*(id *)(v76 + 376), sel_date);
    if (v37)
    {
      uint64_t v36 = *(void *)(v76 + 424);
      uint64_t v34 = *(void *)(v76 + 416);
      uint64_t v35 = *(void *)(v76 + 392);
      id v33 = *(void *)(v76 + 400);
      static Date._unconditionallyBridgeFromObjectiveC(_:)();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32))(v36, v34, v35);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v36, 0, 1, v35);
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v76 + 400) + 56))(*(void *)(v76 + 424), 1, 1, *(void *)(v76 + 392));
    }
    if (v53(*(void *)(v76 + 424), 1, *(void *)(v76 + 392)) == 1)
    {
      uint64_t v32 = *(void *)(v76 + 424);
      Date.init()();
      outlined destroy of Date?(v32);
    }
    else
    {
      (*(void (**)(void, void, void))(*(void *)(v76 + 400) + 32))(*(void *)(v76 + 408), *(void *)(v76 + 424), *(void *)(v76 + 392));
    }
    uint64_t v27 = *(id *)(v76 + 376);
    outlined init with copy of QuantityPersisting(*(void *)(v76 + 384) + OBJC_IVAR____TtC19SiriWellnessIntents22LogPeriodIntentHandler_storage, v76 + 56);
    uint64_t v29 = *(void *)(v76 + 80);
    Class v30 = *(void *)(v76 + 88);
    __swift_project_boxed_opaque_existential_1((void *)(v76 + 56), v29);
    uint64_t v28 = objc_msgSend(v27, sel_flow);
    uint64_t v31 = (uint64_t (*)(uint64_t, id, uint64_t, uint64_t))(*(void *)(v30 + 16) + **(int **)(v30 + 16));
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v76 + 568) = v6;
    char *v6 = *(void *)(v76 + 192);
    v6[1] = LogPeriodIntentHandler.handle(intent:);
    uint64_t v7 = *(void *)(v76 + 408);
    return v31(v7, v28, v29, v30);
  }
  else
  {
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 488);
    uint64_t v8 = *(void *)(v76 + 456);
    uint64_t v21 = *(void *)(v76 + 440);
    uint64_t v20 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v22(v8, v20, v21);
    swift_endAccess();
    log = Logger.logObject.getter();
    uint64_t v24 = static os_log_type_t.error.getter();
    *(void *)(v76 + 224) = 2;
    UnsignedInteger<>.init<A>(_:)();
    os_log_type_t v23 = *(_DWORD *)(v76 + 588);
    uint64_t v26 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v24))
    {
      uint64_t v9 = *(void *)(v76 + 536);
      uint64_t v16 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v17 = createStorage<A>(capacity:type:)(0);
      uint64_t v18 = createStorage<A>(capacity:type:)(0);
      *(void *)(v76 + 232) = v16;
      *(void *)(v76 + 240) = v17;
      *(void *)(v76 + 248) = v18;
      serialize(_:at:)(0, (unsigned char **)(v76 + 232));
      serialize(_:at:)(0, (unsigned char **)(v76 + 232));
      *(void *)(v76 + 256) = v26;
      uint64_t v19 = (void *)swift_task_alloc();
      v19[2] = v76 + 232;
      v19[3] = v76 + 240;
      v19[4] = v76 + 248;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v9) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, log, v24, "Not authorized to write Cycle Tracking data.", v16, v23);
      destroyStorage<A>(_:count:)(v17, 0, v15);
      destroyStorage<A>(_:count:)(v18, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v16, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v76 + 544);
    uint64_t v11 = *(void *)(v76 + 456);
    uint64_t v12 = *(void *)(v76 + 440);

    v13(v11, v12);
    type metadata accessor for LogPeriodIntentResponse();
    __n128 v14 = LogPeriodIntentResponse.__allocating_init(code:userActivity:)(101, 0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(char *))(*(void *)(v76 + 192) + 8);
    return v10(v14);
  }
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = v0[51];
  uint64_t v3 = v0[50];
  uint64_t v5 = v0[49];
  v0[24] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v4, v5);
  uint64_t v6 = v0[72];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0[24] + 8);
  return v1(v6);
}

uint64_t LogPeriodIntentHandler.handle(intent:)(char a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 192) = *v1;
  *(unsigned char *)(v3 + 600) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](LogPeriodIntentHandler.handle(intent:), 0);
}

uint64_t @objc closure #1 in LogPeriodIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  v3[4] = a3;
  v3[3] = a1;
  id v3[2] = v3;
  id v5 = a1;
  v3[5] = _Block_copy(a2);
  id v6 = a3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 48) = v7;
  void *v7 = *(void *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return LogPeriodIntentHandler.handle(intent:)((uint64_t)a1);
}

id LogPeriodIntentHandler.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t LogPeriodIntentHandler.init()()
{
  if (!"SiriWellnessIntents.LogPeriodIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.LogPeriodIntentHandler", 42, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/LogPeriodIntentHandler.swift", 48, 2, v1, 0xFuLL, 0x14uLL);
  __break(1u);
  return result;
}

id LogPeriodIntentHandler.__deallocating_deinit()
{
  uint64_t v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t static PeriodPersistor.StorageError.__derived_enum_equals(_:_:)()
{
  return 1;
}

uint64_t PeriodPersistor.StorageError.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t PeriodPersistor.StorageError.hashValue.getter()
{
  return _hashValue<A>(for:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PeriodPersistor.StorageError()
{
  return static PeriodPersistor.StorageError.__derived_enum_equals(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PeriodPersistor.StorageError()
{
  return PeriodPersistor.StorageError.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PeriodPersistor.StorageError()
{
  return PeriodPersistor.StorageError.hash(into:)();
}

uint64_t PeriodPersistor.isLoggingAuthorized()(uint64_t a1)
{
  v1[4] = a1;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = a1;
  return MEMORY[0x270FA2498](PeriodPersistor.isLoggingAuthorized(), 0);
}

uint64_t PeriodPersistor.isLoggingAuthorized()()
{
  id v4 = (id)v0[4];
  v0[2] = v0;
  id v1 = v4;
  id v6 = objc_msgSend(v4, sel_healthStore);
  v0[5] = v6;

  objc_super v2 = (void *)swift_task_alloc();
  *(void *)(v5 + 48) = v2;
  *objc_super v2 = *(void *)(v5 + 16);
  v2[1] = PeriodPersistor.isLoggingAuthorized();
  return isSiriAuthorizedToAccessHealthData(store:)((uint64_t)v6);
}

uint64_t PeriodPersistor.isLoggingAuthorized()(unsigned int a1)
{
  uint64_t v5 = *v1;
  id v4 = *(void **)(*v1 + 40);
  *(void *)(v5 + 16) = *v1;
  swift_task_dealloc();

  objc_super v2 = *(uint64_t (**)(void))(*(void *)(v5 + 16) + 8);
  return v2(a1);
}

uint64_t PeriodPersistor.save(date:flow:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[29] = a3;
  v3[28] = a2;
  v3[27] = a1;
  v3[18] = v3;
  v3[19] = 0;
  v3[20] = 0;
  v3[21] = 0;
  v3[22] = 0;
  v3[23] = 0;
  v3[24] = 0;
  v3[26] = 0;
  uint64_t v4 = type metadata accessor for Logger();
  v3[30] = v4;
  v3[31] = *(void *)(v4 - 8);
  v3[32] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Calendar();
  v3[33] = v5;
  v3[34] = *(void *)(v5 - 8);
  v3[35] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  v3[36] = v6;
  v3[37] = *(void *)(v6 - 8);
  v3[38] = swift_task_alloc();
  v3[19] = a1;
  v3[20] = a2;
  v3[21] = a3;
  return MEMORY[0x270FA2498](PeriodPersistor.save(date:flow:), 0);
}

uint64_t PeriodPersistor.save(date:flow:)()
{
  uint64_t v8 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v11 = *(void *)(v0 + 280);
  uint64_t v9 = *(void *)(v0 + 272);
  uint64_t v10 = *(void *)(v0 + 264);
  uint64_t v17 = *(void **)(v0 + 232);
  uint64_t v14 = *(void *)(v0 + 224);
  uint64_t v1 = *(void *)(v0 + 216);
  *(void *)(v0 + 144) = v0;
  objc_super v2 = *(void (**)(uint64_t, uint64_t))(v6 + 16);
  *(void *)(v0 + 312) = v2;
  *(void *)(v0 + 320) = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v2(v8, v1);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 328) = isa;
  *(void *)(v0 + 176) = isa;
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v0 + 336) = v3;
  *(void *)(v0 + 344) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v3(v8, v7);
  static Calendar.current.getter();
  Class v13 = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v10);
  id v16 = [(objc_class *)isa hk_dayIndexWithCalendar:v13];

  *(void *)(v0 + 184) = v16;
  id v4 = v17;
  uint64_t v15 = PeriodFlow.toMenstrualFlow()(v14);
  *(void *)(v0 + 16) = *(void *)(v0 + 144);
  *(void *)(v0 + 56) = v0 + 364;
  *(void *)(v0 + 24) = PeriodPersistor.save(date:flow:);
  *(void *)(v0 + 112) = swift_continuation_init();
  *(void *)(v0 + 80) = MEMORY[0x263EF8330];
  *(_DWORD *)(v0 + 88) = 0x40000000;
  *(_DWORD *)(v0 + 92) = 0;
  *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool;
  *(void *)(v0 + 104) = &block_descriptor_3;
  objc_msgSend(v17, sel_saveBleedingFlow_forBleedingType_dayIndex_completion_, v15, 0, v16);
  return __swift_continuation_await_point();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  id v4 = (void *)*v0;
  v4[18] = *v0;
  uint64_t v1 = v4[6];
  v4[44] = v1;
  if (v1)
  {
    objc_super v2 = PeriodPersistor.save(date:flow:);
  }
  else
  {
    objc_super v2 = PeriodPersistor.save(date:flow:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  uint64_t (*v6)(char *);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint32_t size;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  NSObject *oslog;
  os_log_type_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  Class isa;
  uint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  unint64_t v47 = v0;
  uint64_t v1 = *(void **)(v0 + 232);
  *(void *)(v0 + 144) = v0;
  uint64_t v41 = *(unsigned char *)(v0 + 364);

  if (v41)
  {
    id v33 = *(void (**)(uint64_t, uint64_t))(v40 + 336);
    uint64_t v37 = *(void **)(v40 + 328);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 312);
    uint64_t v34 = *(void *)(v40 + 304);
    uint64_t v32 = *(void *)(v40 + 288);
    uint64_t v36 = *(void *)(v40 + 224);
    Class v30 = *(void *)(v40 + 216);
    type metadata accessor for LogPeriodIntentResponse();
    uint64_t v38 = LogPeriodIntentResponse.__allocating_init(code:userActivity:)(4, 0);
    *(void *)(v40 + 208) = v38;
    v31(v34, v30, v32);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    v33(v34, v32);
    objc_msgSend(v38, sel_setDate_, isa);

    objc_msgSend(v38, sel_setFlow_, v36);
    unint64_t v39 = v38;
  }
  else
  {
    lazy protocol witness table accessor for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError();
    uint64_t v20 = (id)swift_allocError();
    swift_willThrow();
    objc_super v2 = *(void *)(v40 + 256);
    uint64_t v19 = *(void *)(v40 + 240);
    uint64_t v17 = *(void *)(v40 + 248);
    uint64_t v3 = v20;
    *(void *)(v40 + 192) = v20;
    uint64_t v18 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v2, v18, v19);
    swift_endAccess();
    id v4 = v20;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = v20;
    os_log_t oslog = Logger.logObject.getter();
    uint64_t v29 = static os_log_type_t.error.getter();
    *(void *)(v40 + 200) = 12;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v40 + 360);
    uint64_t v24 = swift_allocObject();
    *(unsigned char *)(v24 + 16) = 32;
    uint64_t v25 = swift_allocObject();
    *(unsigned char *)(v25 + 16) = 8;
    os_log_type_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = partial apply for implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:);
    *(void *)(v23 + 24) = v22;
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(void *)(v26 + 24) = v23;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    _allocateUninitializedArray<A>(_:)();
    uint64_t v27 = v5;
    swift_retain();
    *uint64_t v27 = partial apply for closure #1 in OSLogArguments.append(_:);
    v27[1] = v24;
    swift_retain();
    v27[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v27[3] = v25;
    swift_retain();
    v27[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v27[5] = v26;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v29))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      Class v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v15 = createStorage<A>(capacity:type:)(0);
      id v16 = createStorage<A>(capacity:type:)(1);
      uint64_t v42 = buf;
      uint64_t v43 = v15;
      uint64_t v44 = v16;
      serialize(_:at:)(2, &v42);
      serialize(_:at:)(1, &v42);
      uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v46 = v24;
      closure #1 in osLogInternal(_:log:type:)(&v45, (uint64_t)&v42, (uint64_t)&v43, (uint64_t)&v44);
      uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v46 = v25;
      closure #1 in osLogInternal(_:log:type:)(&v45, (uint64_t)&v42, (uint64_t)&v43, (uint64_t)&v44);
      uint64_t v45 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v46 = v26;
      closure #1 in osLogInternal(_:log:type:)(&v45, (uint64_t)&v42, (uint64_t)&v43, (uint64_t)&v44);
      _os_log_impl(&dword_25DE00000, oslog, v29, "Failed to persist sample. Error: %s", buf, size);
      destroyStorage<A>(_:count:)(v15, 0, v13);
      destroyStorage<A>(_:count:)(v16, 1, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v11 = *(id *)(v40 + 328);
    uint64_t v9 = *(void *)(v40 + 256);
    uint64_t v10 = *(void *)(v40 + 240);
    uint64_t v8 = *(void *)(v40 + 248);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    type metadata accessor for LogPeriodIntentResponse();
    uint64_t v12 = LogPeriodIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    unint64_t v39 = v12;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(char *))(*(void *)(v40 + 144) + 8);
  return v6(v39);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  uint64_t (*v5)(char *);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char *v11;
  uint64_t v12;
  uint8_t *buf;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint32_t size;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  uint64_t v36 = v0;
  uint64_t v17 = *(id *)(v0 + 232);
  *(void *)(v0 + 144) = v0;
  swift_willThrow();

  uint64_t v21 = *(id *)(v0 + 352);
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v18 = *(void *)(v0 + 248);
  uint64_t v20 = *(void *)(v0 + 240);
  objc_super v2 = v21;
  *(void *)(v0 + 192) = v21;
  uint64_t v19 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v1, v19, v20);
  swift_endAccess();
  uint64_t v3 = v21;
  os_log_type_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v21;
  uint64_t v29 = Logger.logObject.getter();
  Class v30 = static os_log_type_t.error.getter();
  *(void *)(v0 + 200) = 12;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v0 + 360);
  uint64_t v25 = swift_allocObject();
  *(unsigned char *)(v25 + 16) = 32;
  uint64_t v26 = swift_allocObject();
  *(unsigned char *)(v26 + 16) = 8;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = partial apply for implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:);
  *(void *)(v24 + 24) = v23;
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  *(void *)(v27 + 24) = v24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v28 = v4;
  swift_retain();
  *uint64_t v28 = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[1] = v25;
  swift_retain();
  void v28[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[3] = v26;
  swift_retain();
  v28[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v28[5] = v27;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v29, v30))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v14 = createStorage<A>(capacity:type:)(0);
    uint64_t v15 = createStorage<A>(capacity:type:)(1);
    uint64_t v31 = buf;
    uint64_t v32 = v14;
    id v33 = v15;
    serialize(_:at:)(2, &v31);
    serialize(_:at:)(1, &v31);
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v35 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v34, (uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v33);
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v35 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v34, (uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v33);
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v35 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v34, (uint64_t)&v31, (uint64_t)&v32, (uint64_t)&v33);
    _os_log_impl(&dword_25DE00000, v29, v30, "Failed to persist sample. Error: %s", buf, size);
    destroyStorage<A>(_:count:)(v14, 0, v12);
    destroyStorage<A>(_:count:)(v15, 1, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v10 = (id)v16[41];
  uint64_t v8 = v16[32];
  uint64_t v9 = v16[30];
  uint64_t v7 = v16[31];

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  type metadata accessor for LogPeriodIntentResponse();
  uint64_t v11 = LogPeriodIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(char *))(v16[18] + 8);
  return v5(v11);
}

void @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned Bool, @unowned NSError?) -> () with result type Bool(uint64_t a1, char a2, id a3)
{
  id v3 = a3;
  uint64_t v8 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = a3;
    _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v8, (uint64_t)a3, MEMORY[0x263F8D4F8]);
  }
  else
  {
    char v9 = a2 & 1;
    _resumeUnsafeThrowingContinuation<A>(_:_:)(v8, (uint64_t)&v9, MEMORY[0x263F8D4F8]);
  }
}

uint64_t protocol witness for PeriodPersisting.isLoggingAuthorized() in conformance PeriodPersistor()
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v5 = *v0;
  objc_super v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *objc_super v2 = *(void *)(v4 + 16);
  v2[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return PeriodPersistor.isLoggingAuthorized()(v5);
}

uint64_t protocol witness for PeriodPersisting.save(date:flow:) in conformance PeriodPersistor(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v8 = *v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return PeriodPersistor.save(date:flow:)(a1, a2, v8);
}

uint64_t sub_25DEDD570()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LogPeriodIntentHandler.handle(intent:)()
{
  uint64_t v5 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v8 = (void *)v0[2];
  uint64_t v6 = (const void *)v0[3];
  uint64_t v7 = (void *)v0[4];
  objc_super v2 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v2;
  *objc_super v2 = *(void *)(v5 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  uint64_t v3 = async function pointer to @objc closure #1 in LogPeriodIntentHandler.handle(intent:);
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in LogPeriodIntentHandler.handle(intent:)
                                                               + v3))(v8, v6, v7);
}

unint64_t lazy protocol witness table accessor for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError()
{
  uint64_t v2 = lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError;
  if (!lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError;
  if (!lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError;
  if (!lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DEDD72C()
{
  return swift_deallocObject();
}

uint64_t UnsafeContinuation.resume(returning:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_continuation_throwingResume();
}

uint64_t UnsafeContinuation.resume(throwing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_allocError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v4, a1);
  return swift_continuation_throwingResumeWithError();
}

uint64_t sub_25DEDD87C()
{
  return swift_deallocObject();
}

uint64_t sub_25DEDD8A8()
{
  return swift_deallocObject();
}

uint64_t sub_25DEDD8D4()
{
  return swift_deallocObject();
}

uint64_t sub_25DEDD914()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for LogPeriodIntentHandler()
{
  return self;
}

ValueMetadata *type metadata accessor for PeriodPersistor()
{
  return &type metadata for PeriodPersistor;
}

ValueMetadata *type metadata accessor for PeriodPersistor.StorageError()
{
  return &type metadata for PeriodPersistor.StorageError;
}

unint64_t base witness table accessor for Equatable in PeriodPersistor.StorageError()
{
  return lazy protocol witness table accessor for type PeriodPersistor.StorageError and conformance PeriodPersistor.StorageError();
}

unint64_t type metadata accessor for HKMenstrualCyclesStore()
{
  uint64_t v2 = lazy cache variable for type metadata for HKMenstrualCyclesStore;
  if (!lazy cache variable for type metadata for HKMenstrualCyclesStore)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKMenstrualCyclesStore);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t PeriodProjectionFocus.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PeriodProjectionFocus()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance PeriodProjectionFocus()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PeriodProjectionFocus()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance PeriodProjectionFocus()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PeriodProjectionFocus@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = PeriodProjectionFocus.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PeriodProjectionFocus(void *a1@<X8>)
{
  PeriodProjectionFocus.rawValue.getter();
  *a1 = v1;
}

id static PeriodProjectionFocusResolutionResult.success(with:)()
{
  id ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
  PeriodProjectionFocus.rawValue.getter();
  id v1 = objc_msgSend(ObjCClassFromMetadata, sel_successWithResolvedValue_, v0);
  return v1;
}

id static PeriodProjectionFocusResolutionResult.confirmationRequired(with:)()
{
  id ObjCClassFromMetadata = (id)swift_getObjCClassFromMetadata();
  PeriodProjectionFocus.rawValue.getter();
  id v1 = objc_msgSend(ObjCClassFromMetadata, sel_confirmationRequiredWithValueToConfirm_, v0);
  return v1;
}

id PeriodProjectionFocusResolutionResult.__allocating_init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v4 = objc_allocWithZone(v2);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  id v7 = objc_msgSend(v4, sel_initWithJSONDictionary_forIntent_);

  swift_bridgeObjectRelease();
  return v7;
}

id PeriodProjectionFocusResolutionResult.init(JSONDictionary:intent:)(uint64_t a1, void *a2)
{
  id v11 = 0;
  uint64_t v10 = a1;
  uint64_t v9 = a2;
  swift_bridgeObjectRetain();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8.receiver = 0;
  v8.super_class = (Class)type metadata accessor for PeriodProjectionFocusResolutionResult();
  id v7 = objc_msgSendSuper2(&v8, sel_initWithJSONDictionary_forIntent_, isa, a2);

  if (v7)
  {
    id v2 = v7;
    id v11 = v7;

    swift_bridgeObjectRelease();
    return v7;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t type metadata accessor for PeriodProjectionFocusResolutionResult()
{
  return self;
}

id PeriodProjectionFocusResolutionResult.__deallocating_deinit()
{
  char v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for PeriodProjectionFocusResolutionResult();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in PeriodProjectionFocus()
{
  return lazy protocol witness table accessor for type PeriodProjectionFocus and conformance PeriodProjectionFocus();
}

ValueMetadata *type metadata accessor for PeriodProjectionFocus()
{
  return &type metadata for PeriodProjectionFocus;
}

char *LogSpecificMedicationsIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  id v3 = objc_allocWithZone(v2);
  return LogSpecificMedicationsIntentResponse.init(code:userActivity:)(a1, a2);
}

id LogSpecificMedicationsIntent.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id LogSpecificMedicationsIntent.init()()
{
  id v4 = 0;
  v3.receiver = 0;
  v3.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntent();
  id v2 = objc_msgSendSuper2(&v3, sel_init);
  id v0 = v2;
  id v4 = v2;

  return v2;
}

id LogSpecificMedicationsIntent.__allocating_init(coder:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id LogSpecificMedicationsIntent.init(coder:)(void *a1)
{
  id v8 = 0;
  id v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntent();
  id v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    id v1 = v5;
    id v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id LogSpecificMedicationsIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v11 = objc_allocWithZone(v3);
  if (a2)
  {
    uint64_t v6 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    id v7 = (void *)v6;
  }
  else
  {
    id v7 = 0;
  }
  id v5 = objc_msgSend(v11, sel_initWithIdentifier_backingStore_);

  return v5;
}

id LogSpecificMedicationsIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v15 = 0;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v12 = a3;
  swift_bridgeObjectRetain();
  if (a2)
  {
    uint64_t v6 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    id v7 = (void *)v6;
  }
  else
  {
    id v7 = 0;
  }
  v11.receiver = 0;
  v11.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntent();
  id v5 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_backingStore_, v7, a3);

  id v3 = v5;
  id v15 = v5;

  swift_bridgeObjectRelease();
  return v5;
}

id LogSpecificMedicationsIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v13 = objc_allocWithZone(v5);
  id v16 = (void *)MEMORY[0x2611C8860](a1, a2);
  uint64_t v18 = (void *)MEMORY[0x2611C8860](a3, a4);
  if (a5)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, isa);
  }
  else
  {
    id v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, 0);
  }
  id v9 = v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

id LogSpecificMedicationsIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v23 = 0;
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v18 = a5;
  swift_bridgeObjectRetain();
  id v12 = (id)MEMORY[0x2611C8860](a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  id v15 = (void *)MEMORY[0x2611C8860](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a5)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v9 = isa;
  }
  else
  {
    Class v9 = 0;
  }
  v17.receiver = 0;
  v17.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntent();
  id v7 = objc_msgSendSuper2(&v17, sel_initWithDomain_verb_parametersByName_, v12, v15, v9);

  id v5 = v7;
  id v23 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v7;
}

id LogSpecificMedicationsIntent.__deallocating_deinit()
{
  id v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t LogSpecificMedicationsIntentResponseCode.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 100:
      return 100;
    case 101:
      return 101;
    case 102:
      return 102;
    case 103:
      return 103;
    case 104:
      return 104;
    case 105:
      return 105;
    case 106:
      return 106;
    case 107:
      return 107;
    case 108:
      return 108;
    case 109:
      return 109;
    case 110:
      return 110;
    case 111:
      return 111;
    case 112:
      return 112;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LogSpecificMedicationsIntentResponseCode()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LogSpecificMedicationsIntentResponseCode()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LogSpecificMedicationsIntentResponseCode()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance LogSpecificMedicationsIntentResponseCode()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LogSpecificMedicationsIntentResponseCode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = LogSpecificMedicationsIntentResponseCode.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LogSpecificMedicationsIntentResponseCode(void *a1@<X8>)
{
  LogSpecificMedicationsIntentResponseCode.rawValue.getter();
  *a1 = v1;
}

uint64_t LogSpecificMedicationsIntentResponse.code.getter()
{
  objc_super v2 = (uint64_t *)(v0 + OBJC_IVAR___LogSpecificMedicationsIntentResponse_code);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t LogSpecificMedicationsIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___LogSpecificMedicationsIntentResponse_code);
  swift_beginAccess();
  void *v3 = a1;
  return swift_endAccess();
}

uint64_t (*LogSpecificMedicationsIntentResponse.code.modify())()
{
  return LogQuantityIntentResponse.code.modify;
}

void key path getter for LogSpecificMedicationsIntentResponse.code : LogSpecificMedicationsIntentResponse(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  id v2 = *a1;
  *a2 = LogSpecificMedicationsIntentResponse.code.getter();
}

void key path setter for LogSpecificMedicationsIntentResponse.code : LogSpecificMedicationsIntentResponse(uint64_t *a1, id *a2)
{
  uint64_t v4 = *a1;
  id v3 = *a2;
  id v2 = *a2;
  LogSpecificMedicationsIntentResponse.code.setter(v4);
}

char *LogSpecificMedicationsIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  Class v9 = (char *)objc_msgSend(v10, sel_init);
  id v2 = v9;
  id v3 = v9;
  uint64_t v4 = v9;
  id v6 = &v9[OBJC_IVAR___LogSpecificMedicationsIntentResponse_code];
  swift_beginAccess();
  *(void *)id v6 = a1;
  swift_endAccess();

  objc_msgSend(v9, sel_setUserActivity_, a2);
  return v9;
}

uint64_t type metadata accessor for LogSpecificMedicationsIntent()
{
  return self;
}

id LogSpecificMedicationsIntentResponse.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id LogSpecificMedicationsIntentResponse.init()()
{
  uint64_t v1 = v0;
  id v6 = v0;
  *(void *)&v0[OBJC_IVAR___LogSpecificMedicationsIntentResponse_code] = 0;

  v5.receiver = v6;
  v5.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntentResponse();
  id v4 = objc_msgSendSuper2(&v5, sel_init);
  id v2 = v4;
  id v6 = v4;

  return v4;
}

uint64_t type metadata accessor for LogSpecificMedicationsIntentResponse()
{
  return self;
}

id LogSpecificMedicationsIntentResponse.__allocating_init(coder:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id LogSpecificMedicationsIntentResponse.init(coder:)(void *a1)
{
  Class v9 = a1;
  id v2 = v1;
  id v10 = v1;
  *(void *)&v1[OBJC_IVAR___LogSpecificMedicationsIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntentResponse();
  id v7 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);
  if (v7)
  {
    id v3 = v7;
    id v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id LogSpecificMedicationsIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v4;
}

id LogSpecificMedicationsIntentResponse.init(backingStore:)(void *a1)
{
  Class v9 = a1;
  id v2 = v1;
  id v10 = v1;
  *(void *)&v1[OBJC_IVAR___LogSpecificMedicationsIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntentResponse();
  id v7 = objc_msgSendSuper2(&v8, sel_initWithBackingStore_, a1);
  if (v7)
  {
    id v3 = v7;
    id v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id LogSpecificMedicationsIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  id v8 = objc_allocWithZone(v1);
  if (a1)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, isa);
  }
  else
  {
    id v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, 0);
  }
  id v5 = v2;

  return v5;
}

id LogSpecificMedicationsIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  uint64_t v11 = a1;
  id v2 = v1;
  id v12 = v1;
  *(void *)&v1[OBJC_IVAR___LogSpecificMedicationsIntentResponse_code] = 0;

  swift_bridgeObjectRetain();
  if (a1)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v8 = isa;
  }
  else
  {
    Class v8 = 0;
  }
  v10.receiver = v12;
  v10.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntentResponse();
  id v6 = objc_msgSendSuper2(&v10, sel_initWithPropertiesByName_, v8);

  if (v6)
  {
    id v3 = v6;
    id v12 = v6;
    swift_bridgeObjectRelease();

    return v6;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id LogSpecificMedicationsIntentResponse.__deallocating_deinit()
{
  id v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LogSpecificMedicationsIntentResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in LogSpecificMedicationsIntentResponseCode()
{
  return lazy protocol witness table accessor for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode();
}

unint64_t lazy protocol witness table accessor for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode()
{
  uint64_t v2 = lazy protocol witness table cache variable for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode;
  if (!lazy protocol witness table cache variable for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode;
  if (!lazy protocol witness table cache variable for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type LogSpecificMedicationsIntentResponseCode and conformance LogSpecificMedicationsIntentResponseCode);
    return WitnessTable;
  }
  return v2;
}

void sub_25DEDFD30(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_25DEDFD48(uint64_t *a1, id *a2)
{
}

ValueMetadata *type metadata accessor for LogSpecificMedicationsIntentResponseCode()
{
  return &type metadata for LogSpecificMedicationsIntentResponseCode;
}

id LogGenericMedicationsIntentHandler.__allocating_init(storage:)(void *a1)
{
  id v2 = objc_allocWithZone(v1);
  return LogGenericMedicationsIntentHandler.init(storage:)(a1);
}

id LogGenericMedicationsIntentHandler.init(storage:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  id v2 = v1;
  id v13 = v1;
  outlined init with copy of QuantityPersisting?(a1, v11);
  if (v11[3])
  {
    outlined init with take of QuantityPersisting(v11, __dst);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    __dst[3] = &type metadata for GenericMedicationsPersistor;
    __dst[4] = &protocol witness table for GenericMedicationsPersistor;
    __dst[0] = swift_allocObject();
    GenericMedicationsPersistor.init(medStorageHelper:)(v10, (void *)(__dst[0] + 16));
    outlined destroy of QuantityPersisting?((uint64_t)v11);
  }
  outlined init with take of QuantityPersisting(__dst, &v6[OBJC_IVAR____TtC19SiriWellnessIntents34LogGenericMedicationsIntentHandler_storage]);

  v9.receiver = v13;
  v9.super_class = ObjectType;
  id v5 = objc_msgSendSuper2(&v9, sel_init);
  id v3 = v5;
  id v13 = v5;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v5;
}

id *GenericMedicationsPersistor.init(medStorageHelper:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  memset(__b, 0, sizeof(__b));
  __dst[5] = a1;
  type metadata accessor for HKHealthStore();
  id v7 = NSDateFormatter.__allocating_init()();
  id v2 = v7;
  __b[0] = v7;
  type metadata accessor for HKMedicationExposableDoseEventControl();
  __b[1] = HKUnitPreferenceController.__allocating_init(healthStore:)(v7);
  outlined init with copy of QuantityPersisting?(a1, v10);
  if (v10[3])
  {
    outlined init with take of QuantityPersisting(v10, __dst);
  }
  else
  {
    uint64_t v5 = type metadata accessor for MedStorageHelper();
    memset(v9, 0, sizeof(v9));
    id v3 = MedStorageHelper.__allocating_init(storage:)(v9);
    __dst[3] = v5;
    __dst[4] = &protocol witness table for MedStorageHelper;
    __dst[0] = v3;
    outlined destroy of QuantityPersisting?((uint64_t)v10);
  }
  outlined init with take of QuantityPersisting(__dst, &__b[2]);
  outlined init with copy of GenericMedicationsPersistor((uint64_t)__b, a2);
  outlined destroy of QuantityPersisting?((uint64_t)a1);
  return outlined destroy of GenericMedicationsPersistor(__b);
}

uint64_t sub_25DEE00CC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return swift_deallocObject();
}

uint64_t LogGenericMedicationsIntentHandler.handle(intent:)(uint64_t a1)
{
  *(void *)(v2 + 584) = v1;
  *(void *)(v2 + 576) = a1;
  *(void *)(v2 + 304) = v2;
  *(void *)(v2 + 312) = 0;
  *(void *)(v2 + 320) = 0;
  *(unsigned char *)(v2 + 776) = 0;
  *(unsigned char *)(v2 + 784) = 0;
  *(unsigned char *)(v2 + 792) = 0;
  *(unsigned char *)(v2 + 800) = 0;
  uint64_t v3 = type metadata accessor for Logger();
  *(void *)(v2 + 592) = v3;
  *(void *)(v2 + 600) = *(void *)(v3 - 8);
  *(void *)(v2 + 608) = swift_task_alloc();
  *(void *)(v2 + 616) = swift_task_alloc();
  *(void *)(v2 + 624) = swift_task_alloc();
  *(void *)(v2 + 632) = swift_task_alloc();
  *(void *)(v2 + 640) = swift_task_alloc();
  *(void *)(v2 + 648) = swift_task_alloc();
  *(void *)(v2 + 656) = swift_task_alloc();
  *(void *)(v2 + 312) = a1;
  *(void *)(v2 + 320) = v1;
  return MEMORY[0x270FA2498](LogGenericMedicationsIntentHandler.handle(intent:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 304) = *v1;
  *(void *)(v3 + 752) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](LogGenericMedicationsIntentHandler.handle(intent:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 304) = *v1;
  *(void *)(v3 + 768) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](LogGenericMedicationsIntentHandler.handle(intent:), 0);
}

uint64_t LogGenericMedicationsIntentHandler.handle(intent:)()
{
  uint64_t v1 = *(void *)(v0 + 656);
  uint64_t v19 = *(void *)(v0 + 600);
  uint64_t v21 = *(void *)(v0 + 592);
  *(void *)(v0 + 304) = v0;
  uint64_t v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  *(void *)(v0 + 664) = v2;
  *(void *)(v0 + 672) = (v19 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v2(v1, v20, v21);
  swift_endAccess();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 328) = 2;
  *(void *)(v0 + 680) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 688) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 696) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v22 = *(unsigned int *)(v0 + 780);
  *(void *)(v0 + 704) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v25 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v24, v23))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v15 = createStorage<A>(capacity:type:)(0);
    uint64_t v16 = createStorage<A>(capacity:type:)(0);
    *(void *)(v18 + 544) = buf;
    *(void *)(v18 + 552) = v15;
    *(void *)(v18 + 560) = v16;
    serialize(_:at:)(0, (unsigned char **)(v18 + 544));
    serialize(_:at:)(0, (unsigned char **)(v18 + 544));
    *(void *)(v18 + 568) = v25;
    objc_super v17 = (void *)swift_task_alloc();
    v17[2] = v18 + 544;
    v17[3] = v18 + 552;
    v17[4] = v18 + 560;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v24, v23, "Checking authorization for medications...", buf, v22);
    destroyStorage<A>(_:count:)(v15, 0, v13);
    destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  *(void *)(v18 + 712) = 0;
  uint64_t v7 = *(void *)(v18 + 656);
  uint64_t v8 = *(void *)(v18 + 592);
  uint64_t v9 = *(void *)(v18 + 584);
  uint64_t v6 = *(void *)(v18 + 600);

  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v18 + 720) = v3;
  *(void *)(v18 + 728) = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v3(v7, v8);
  outlined init with copy of QuantityPersisting(v9 + OBJC_IVAR____TtC19SiriWellnessIntents34LogGenericMedicationsIntentHandler_storage, v18 + 16);
  uint64_t v12 = *(void *)(v18 + 40);
  uint64_t v10 = *(void *)(v18 + 48);
  __swift_project_boxed_opaque_existential_1((void *)(v18 + 16), v12);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v10 + 8) + **(int **)(v10 + 8));
  id v4 = (void *)swift_task_alloc();
  *(void *)(v18 + 736) = v4;
  *id v4 = *(void *)(v18 + 304);
  v4[1] = LogGenericMedicationsIntentHandler.handle(intent:);
  return v11(v12, v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(char *);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint32_t v32;
  os_log_type_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint32_t v47;
  os_log_type_t v48;
  NSObject *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  char *v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t, uint64_t);
  uint32_t v63;
  os_log_type_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(void, void, void, uint64_t, uint64_t);
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  uint32_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  NSObject *v104;
  os_log_type_t v105;
  id v106;
  unsigned __int8 v107;
  char v108;
  id v109;
  unsigned __int8 v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(void, void, uint64_t, uint64_t);
  uint64_t v119;
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t, uint64_t);
  uint32_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  NSObject *log;
  os_log_type_t v143;
  id v144;
  unsigned __int8 v145;
  char v146;
  id v147;
  unsigned __int8 v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(uint64_t, uint64_t);
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint8_t *buf;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v164;
  NSObject *oslog;
  uint64_t v166;
  uint64_t v167;
  char v168;
  char v169;
  uint8_t *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t (*v173)(uint64_t, uint64_t, uint64_t);
  uint64_t v174;
  uint8_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t (*v178)(uint64_t, uint64_t, uint64_t);
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;

  uint64_t v180 = v0;
  uint64_t v168 = *(unsigned char *)(v0 + 777);
  *(void *)(v0 + 304) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if ((v168 & 1) == 0)
  {
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 664);
    uint64_t v18 = *(void *)(v167 + 608);
    Class v30 = *(void *)(v167 + 592);
    uint64_t v29 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v31(v18, v29, v30);
    swift_endAccess();
    uint64_t v34 = Logger.logObject.getter();
    id v33 = static os_log_type_t.error.getter();
    *(void *)(v167 + 336) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v32 = *(_DWORD *)(v167 + 788);
    uint64_t v35 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v34, v33))
    {
      uint64_t v19 = *(void *)(v167 + 712);
      uint64_t v25 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v26 = createStorage<A>(capacity:type:)(0);
      uint64_t v27 = createStorage<A>(capacity:type:)(0);
      *(void *)(v167 + 344) = v25;
      *(void *)(v167 + 352) = v26;
      *(void *)(v167 + 360) = v27;
      serialize(_:at:)(0, (unsigned char **)(v167 + 344));
      serialize(_:at:)(0, (unsigned char **)(v167 + 344));
      *(void *)(v167 + 368) = v35;
      uint64_t v28 = (void *)swift_task_alloc();
      void v28[2] = v167 + 344;
      v28[3] = v167 + 352;
      v28[4] = v167 + 360;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v19) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v34, v33, "Not authorized to write medications data.", v25, v32);
      destroyStorage<A>(_:count:)(v26, 0, v24);
      destroyStorage<A>(_:count:)(v27, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v25, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    os_log_type_t v23 = *(void (**)(uint64_t, uint64_t))(v167 + 720);
    uint64_t v21 = *(void *)(v167 + 608);
    uint64_t v22 = *(void *)(v167 + 592);

    v23(v21, v22);
    type metadata accessor for LogGenericMedicationsIntentResponse();
    unint64_t v54 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(101, 0);
    goto LABEL_59;
  }
  uint64_t v162 = *(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 664);
  uint64_t v1 = *(void *)(v167 + 648);
  uint64_t v161 = *(void *)(v167 + 592);
  uint64_t v160 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v162(v1, v160, v161);
  swift_endAccess();
  os_log_t oslog = Logger.logObject.getter();
  uint64_t v164 = static os_log_type_t.debug.getter();
  *(void *)(v167 + 376) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint32_t size = *(_DWORD *)(v167 + 796);
  char v166 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(oslog, v164))
  {
    uint64_t v2 = *(void *)(v167 + 712);
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v155 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v157 = createStorage<A>(capacity:type:)(0);
    double v158 = createStorage<A>(capacity:type:)(0);
    *(void *)(v167 + 512) = buf;
    *(void *)(v167 + 520) = v157;
    *(void *)(v167 + 528) = v158;
    serialize(_:at:)(0, (unsigned char **)(v167 + 512));
    serialize(_:at:)(0, (unsigned char **)(v167 + 512));
    *(void *)(v167 + 536) = v166;
    uint64_t v159 = (void *)swift_task_alloc();
    v159[2] = v167 + 512;
    v159[3] = v167 + 520;
    v159[4] = v167 + 528;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    uint64_t result = Sequence.forEach(_:)();
    if (v2) {
      return result;
    }
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, oslog, v164, "Authorization check successful for medications!", buf, size);
    destroyStorage<A>(_:count:)(v157, 0, v155);
    destroyStorage<A>(_:count:)(v158, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_bridgeObjectRelease();
    uint64_t v154 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v154 = *(void *)(v167 + 712);
  }
  uint64_t v152 = *(void (**)(uint64_t, uint64_t))(v167 + 720);
  uint64_t v150 = *(void *)(v167 + 648);
  id v151 = *(void *)(v167 + 592);
  uint64_t v153 = *(id *)(v167 + 576);

  v152(v150, v151);
  *(void *)(v167 + 384) = objc_msgSend(v153, sel_medStatus);
  if (*(void *)(v167 + 384))
  {
    unint64_t v147 = *(id *)(v167 + 384);
    id v4 = v147;
    outlined destroy of HealthKitPersistor((id *)(v167 + 384));
    uint64_t v148 = objc_msgSend(v147, sel_BOOLValue);

    unint64_t v149 = v148 & 1;
  }
  else
  {
    outlined destroy of HealthKitPersistor((id *)(v167 + 384));
    unint64_t v149 = 2;
  }
  if (v149 == 2)
  {
    uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 664);
    objc_super v17 = *(void *)(v167 + 616);
    uint64_t v45 = *(void *)(v167 + 592);
    uint64_t v44 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v46(v17, v44, v45);
    swift_endAccess();
    unint64_t v49 = Logger.logObject.getter();
    uint64_t v48 = static os_log_type_t.error.getter();
    *(void *)(v167 + 392) = 2;
    UnsignedInteger<>.init<A>(_:)();
    unint64_t v47 = *(_DWORD *)(v167 + 804);
    id v50 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v49, v48))
    {
      uint64_t v40 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      unint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v41 = createStorage<A>(capacity:type:)(0);
      uint64_t v42 = createStorage<A>(capacity:type:)(0);
      *(void *)(v167 + 400) = v40;
      *(void *)(v167 + 408) = v41;
      *(void *)(v167 + 416) = v42;
      serialize(_:at:)(0, (unsigned char **)(v167 + 400));
      serialize(_:at:)(0, (unsigned char **)(v167 + 400));
      *(void *)(v167 + 424) = v50;
      uint64_t v43 = (void *)swift_task_alloc();
      v43[2] = v167 + 400;
      v43[3] = v167 + 408;
      v43[4] = v167 + 416;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v154) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v49, v48, "Unable to extract BOOLean value for medStatusTaken from LogGenericMedicationsIntent.", v40, v47);
      destroyStorage<A>(_:count:)(v41, 0, v39);
      destroyStorage<A>(_:count:)(v42, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v40, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v167 + 720);
    uint64_t v36 = *(void *)(v167 + 616);
    uint64_t v37 = *(void *)(v167 + 592);

    v38(v36, v37);
    type metadata accessor for LogGenericMedicationsIntentResponse();
    unint64_t v54 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    goto LABEL_59;
  }
  uint64_t v5 = *(void **)(v167 + 576);
  *(unsigned char *)(v167 + 776) = v149 & 1;
  *(void *)(v167 + 432) = objc_msgSend(v5, sel_shouldOverwriteExistingStatuses);
  if (*(void *)(v167 + 432))
  {
    uint64_t v144 = *(id *)(v167 + 432);
    uint64_t v6 = v144;
    outlined destroy of HealthKitPersistor((id *)(v167 + 432));
    uint64_t v145 = objc_msgSend(v144, sel_BOOLValue);

    uint64_t v146 = v145 & 1;
  }
  else
  {
    outlined destroy of HealthKitPersistor((id *)(v167 + 432));
    uint64_t v146 = 2;
  }
  if (v146 != 2)
  {
    id v125 = *(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 664);
    uint64_t v7 = *(void *)(v167 + 640);
    uint64_t v124 = *(void *)(v167 + 592);
    *(unsigned char *)(v167 + 800) = v146 & 1;
    uint64_t v123 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v125(v7, v123, v124);
    swift_endAccess();
    id v127 = swift_allocObject();
    *(unsigned char *)(v127 + 16) = v149 & 1;
    double v131 = swift_allocObject();
    *(unsigned char *)(v131 + 16) = v146 & 1;
    log = Logger.logObject.getter();
    uint64_t v143 = static os_log_type_t.debug.getter();
    *(void *)(v167 + 504) = 14;
    UnsignedInteger<>.init<A>(_:)();
    id v126 = *(_DWORD *)(v167 + 816);
    unint64_t v135 = swift_allocObject();
    *(unsigned char *)(v135 + 16) = 0;
    id v136 = swift_allocObject();
    *(unsigned char *)(v136 + 16) = 4;
    uint64_t v128 = swift_allocObject();
    *(void *)(v128 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(void *)(v128 + 24) = v127;
    uint64_t v129 = swift_allocObject();
    *(void *)(v129 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
    *(void *)(v129 + 24) = v128;
    double v130 = swift_allocObject();
    *(void *)(v130 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
    *(void *)(v130 + 24) = v129;
    id v137 = swift_allocObject();
    *(void *)(v137 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
    *(void *)(v137 + 24) = v130;
    id v138 = swift_allocObject();
    *(unsigned char *)(v138 + 16) = 0;
    uint64_t v139 = swift_allocObject();
    *(unsigned char *)(v139 + 16) = 4;
    uint64_t v132 = swift_allocObject();
    *(void *)(v132 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
    *(void *)(v132 + 24) = v131;
    uint32_t v133 = swift_allocObject();
    *(void *)(v133 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
    *(void *)(v133 + 24) = v132;
    char v134 = swift_allocObject();
    *(void *)(v134 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
    *(void *)(v134 + 24) = v133;
    uint64_t v140 = swift_allocObject();
    *(void *)(v140 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
    *(void *)(v140 + 24) = v134;
    _allocateUninitializedArray<A>(_:)();
    int v141 = v8;
    swift_retain();
    *int v141 = partial apply for closure #1 in OSLogArguments.append(_:);
    v141[1] = v135;
    swift_retain();
    v141[2] = partial apply for closure #1 in OSLogArguments.append(_:);
    v141[3] = v136;
    swift_retain();
    v141[4] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v141[5] = v137;
    swift_retain();
    v141[6] = partial apply for closure #1 in OSLogArguments.append(_:);
    v141[7] = v138;
    swift_retain();
    v141[8] = partial apply for closure #1 in OSLogArguments.append(_:);
    v141[9] = v139;
    swift_retain();
    v141[10] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v141[11] = v140;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(log, v143))
    {
      uint64_t v120 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v121 = createStorage<A>(capacity:type:)(0);
      id v122 = createStorage<A>(capacity:type:)(0);
      uint64_t v175 = v120;
      uint64_t v176 = v121;
      uint32_t v177 = v122;
      serialize(_:at:)(0, &v175);
      serialize(_:at:)(2, &v175);
      char v178 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v179 = v135;
      uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v178, (uint64_t)&v175, (uint64_t)&v176, (uint64_t)&v177);
      if (v154) {
        return result;
      }
      char v178 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v179 = v136;
      closure #1 in osLogInternal(_:log:type:)(&v178, (uint64_t)&v175, (uint64_t)&v176, (uint64_t)&v177);
      char v178 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      uint64_t v179 = v137;
      closure #1 in osLogInternal(_:log:type:)(&v178, (uint64_t)&v175, (uint64_t)&v176, (uint64_t)&v177);
      char v178 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v179 = v138;
      closure #1 in osLogInternal(_:log:type:)(&v178, (uint64_t)&v175, (uint64_t)&v176, (uint64_t)&v177);
      char v178 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      uint64_t v179 = v139;
      closure #1 in osLogInternal(_:log:type:)(&v178, (uint64_t)&v175, (uint64_t)&v176, (uint64_t)&v177);
      char v178 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      uint64_t v179 = v140;
      closure #1 in osLogInternal(_:log:type:)(&v178, (uint64_t)&v175, (uint64_t)&v176, (uint64_t)&v177);
      _os_log_impl(&dword_25DE00000, log, v143, "Persisting generic medications with override...\n  medStatusIsTaken: %{BOOL}d\n  shouldOverwriteExistingStatuses: %{BOOL}d", v120, v126);
      destroyStorage<A>(_:count:)(v121, 0, v119);
      destroyStorage<A>(_:count:)(v122, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v120, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v114 = *(void (**)(uint64_t, uint64_t))(v167 + 720);
    uint64_t v112 = *(void *)(v167 + 640);
    uint64_t v113 = *(void *)(v167 + 592);
    uint64_t v115 = *(void *)(v167 + 584);

    v114(v112, v113);
    outlined init with copy of QuantityPersisting(v115 + OBJC_IVAR____TtC19SiriWellnessIntents34LogGenericMedicationsIntentHandler_storage, v167 + 96);
    uint64_t v116 = *(void *)(v167 + 120);
    id v117 = *(void *)(v167 + 128);
    __swift_project_boxed_opaque_existential_1((void *)(v167 + 96), v116);
    uint64_t v118 = (uint64_t (*)(void, void, uint64_t, uint64_t))(*(void *)(v117 + 16) + **(int **)(v117 + 16));
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v167 + 744) = v9;
    *uint64_t v9 = *(void *)(v167 + 304);
    v9[1] = LogGenericMedicationsIntentHandler.handle(intent:);
    return v118(v149 & 1, v146 & 1, v116, v117);
  }
  *(void *)(v167 + 440) = objc_msgSend(*(id *)(v167 + 576), sel_isTimeframeToday);
  if (*(void *)(v167 + 440))
  {
    uint32_t v109 = *(id *)(v167 + 440);
    uint64_t v10 = v109;
    outlined destroy of HealthKitPersistor((id *)(v167 + 440));
    int v110 = objc_msgSend(v109, sel_BOOLValue);

    uint64_t v111 = v110 & 1;
  }
  else
  {
    outlined destroy of HealthKitPersistor((id *)(v167 + 440));
    uint64_t v111 = 2;
  }
  if (v111 == 2)
  {
    unint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 664);
    uint64_t v16 = *(void *)(v167 + 624);
    uint64_t v61 = *(void *)(v167 + 592);
    unint64_t v60 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v62(v16, v60, v61);
    swift_endAccess();
    unint64_t v65 = Logger.logObject.getter();
    unint64_t v64 = static os_log_type_t.error.getter();
    *(void *)(v167 + 448) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v63 = *(_DWORD *)(v167 + 808);
    uint64_t v66 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v65, v64))
    {
      unint64_t v56 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v57 = createStorage<A>(capacity:type:)(0);
      unint64_t v58 = createStorage<A>(capacity:type:)(0);
      *(void *)(v167 + 456) = v56;
      *(void *)(v167 + 464) = v57;
      *(void *)(v167 + 472) = v58;
      serialize(_:at:)(0, (unsigned char **)(v167 + 456));
      serialize(_:at:)(0, (unsigned char **)(v167 + 456));
      *(void *)(v167 + 480) = v66;
      uint64_t v59 = (void *)swift_task_alloc();
      v59[2] = v167 + 456;
      void v59[3] = v167 + 464;
      v59[4] = v167 + 472;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v154) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v65, v64, "Not an override case & unable to extract BOOLean value for isTimeframeToday from LogGenericMedicationsIntent.", v56, v63);
      destroyStorage<A>(_:count:)(v57, 0, v55);
      destroyStorage<A>(_:count:)(v58, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v56, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v167 + 720);
    uint64_t v51 = *(void *)(v167 + 624);
    uint64_t v52 = *(void *)(v167 + 592);

    v53(v51, v52);
    type metadata accessor for LogGenericMedicationsIntentResponse();
    unint64_t v54 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
LABEL_59:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(char *))(*(void *)(v167 + 304) + 8);
    return v20(v54);
  }
  uint64_t v11 = *(void **)(v167 + 576);
  *(unsigned char *)(v167 + 784) = v111 & 1;
  *(void *)(v167 + 488) = objc_msgSend(v11, sel_confirmedLogAsScheduled);
  if (*(void *)(v167 + 488))
  {
    unint64_t v106 = *(id *)(v167 + 488);
    uint64_t v12 = v106;
    outlined destroy of HealthKitPersistor((id *)(v167 + 488));
    unint64_t v107 = objc_msgSend(v106, sel_BOOLValue);

    uint64_t v108 = v107 & 1;
  }
  else
  {
    outlined destroy of HealthKitPersistor((id *)(v167 + 488));
    uint64_t v108 = 2;
  }
  if (v108 == 2) {
    uint64_t v169 = 0;
  }
  else {
    uint64_t v169 = v108 & 1;
  }
  uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v167 + 664);
  uint64_t v13 = *(void *)(v167 + 632);
  uint64_t v79 = *(void *)(v167 + 592);
  *(unsigned char *)(v167 + 792) = v169 & 1;
  uint64_t v78 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v80(v13, v78, v79);
  swift_endAccess();
  char v82 = swift_allocObject();
  *(unsigned char *)(v82 + 16) = v111 & 1;
  int v86 = swift_allocObject();
  *(unsigned char *)(v86 + 16) = v149 & 1;
  double v90 = swift_allocObject();
  *(unsigned char *)(v90 + 16) = v169 & 1;
  uint64_t v104 = Logger.logObject.getter();
  uint64_t v105 = static os_log_type_t.debug.getter();
  *(void *)(v167 + 496) = 20;
  UnsignedInteger<>.init<A>(_:)();
  char v81 = *(_DWORD *)(v167 + 812);
  uint64_t v94 = swift_allocObject();
  *(unsigned char *)(v94 + 16) = 0;
  double v95 = swift_allocObject();
  *(unsigned char *)(v95 + 16) = 4;
  uint64_t v83 = swift_allocObject();
  *(void *)(v83 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(void *)(v83 + 24) = v82;
  uint64_t v84 = swift_allocObject();
  *(void *)(v84 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(void *)(v84 + 24) = v83;
  int v85 = swift_allocObject();
  *(void *)(v85 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(void *)(v85 + 24) = v84;
  double v96 = swift_allocObject();
  *(void *)(v96 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
  *(void *)(v96 + 24) = v85;
  uint64_t v97 = swift_allocObject();
  *(unsigned char *)(v97 + 16) = 0;
  uint64_t v98 = swift_allocObject();
  *(unsigned char *)(v98 + 16) = 4;
  int v87 = swift_allocObject();
  *(void *)(v87 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(void *)(v87 + 24) = v86;
  uint64_t v88 = swift_allocObject();
  *(void *)(v88 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(void *)(v88 + 24) = v87;
  uint64_t v89 = swift_allocObject();
  *(void *)(v89 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(void *)(v89 + 24) = v88;
  uint64_t v99 = swift_allocObject();
  *(void *)(v99 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
  *(void *)(v99 + 24) = v89;
  uint64_t v100 = swift_allocObject();
  *(unsigned char *)(v100 + 16) = 0;
  unint64_t v101 = swift_allocObject();
  *(unsigned char *)(v101 + 16) = 4;
  uint64_t v91 = swift_allocObject();
  *(void *)(v91 + 16) = partial apply for implicit closure #5 in LogSpecificMedicationsIntentHandler.handle(intent:);
  *(void *)(v91 + 24) = v90;
  BOOL v92 = swift_allocObject();
  *(void *)(v92 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(void *)(v92 + 24) = v91;
  int v93 = swift_allocObject();
  *(void *)(v93 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:);
  *(void *)(v93 + 24) = v92;
  Swift::String v102 = swift_allocObject();
  *(void *)(v102 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int32);
  *(void *)(v102 + 24) = v93;
  _allocateUninitializedArray<A>(_:)();
  uint64_t v103 = v14;
  swift_retain();
  *uint64_t v103 = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[1] = v94;
  swift_retain();
  v103[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[3] = v95;
  swift_retain();
  v103[4] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v103[5] = v96;
  swift_retain();
  v103[6] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[7] = v97;
  swift_retain();
  v103[8] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[9] = v98;
  swift_retain();
  v103[10] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v103[11] = v99;
  swift_retain();
  v103[12] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[13] = v100;
  swift_retain();
  v103[14] = partial apply for closure #1 in OSLogArguments.append(_:);
  v103[15] = v101;
  swift_retain();
  v103[16] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
  v103[17] = v102;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v104, v105))
  {
    uint64_t v75 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v76 = createStorage<A>(capacity:type:)(0);
    uint64_t v77 = createStorage<A>(capacity:type:)(0);
    uint64_t v170 = v75;
    uint64_t v171 = v76;
    uint64_t v172 = v77;
    serialize(_:at:)(0, &v170);
    serialize(_:at:)(3, &v170);
    uint64_t v173 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v174 = v94;
    uint64_t result = closure #1 in osLogInternal(_:log:type:)(&v173, (uint64_t)&v170, (uint64_t)&v171, (uint64_t)&v172);
    if (v154) {
      return result;
    }
    uint64_t v173 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v174 = v95;
    closure #1 in osLogInternal(_:log:type:)(&v173, (uint64_t)&v170, (uint64_t)&v171, (uint64_t)&v172);
    uint64_t v173 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    uint64_t v174 = v96;
    closure #1 in osLogInternal(_:log:type:)(&v173, (uint64_t)&v170, (uint64_t)&v171, (uint64_t)&v172);
    uint64_t v173 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v174 = v97;
    closure #1 in osLogInternal(_:log:type:)(&v173, (uint64_t)&v170, (uint64_t)&v171, (uint64_t)&v172);
    uint64_t v173 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v174 = v98;
    closure #1 in osLogInternal(_:log:type:)(&v173, (uint64_t)&v170, (uint64_t)&v171, (uint64_t)&v172);
    uint64_t v173 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    uint64_t v174 = v99;
    closure #1 in osLogInternal(_:log:type:)(&v173, (uint64_t)&v170, (uint64_t)&v171, (uint64_t)&v172);
    uint64_t v173 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v174 = v100;
    closure #1 in osLogInternal(_:log:type:)(&v173, (uint64_t)&v170, (uint64_t)&v171, (uint64_t)&v172);
    uint64_t v173 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v174 = v101;
    closure #1 in osLogInternal(_:log:type:)(&v173, (uint64_t)&v170, (uint64_t)&v171, (uint64_t)&v172);
    uint64_t v173 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    uint64_t v174 = v102;
    closure #1 in osLogInternal(_:log:type:)(&v173, (uint64_t)&v170, (uint64_t)&v171, (uint64_t)&v172);
    _os_log_impl(&dword_25DE00000, v104, v105, "Persisting generic medications...\n  isTimeframeToday: %{BOOL}d\n  medStatusIsTaken: %{BOOL}d\n  confirmedLogAsScheduled: %{BOOL}d", v75, v81);
    destroyStorage<A>(_:count:)(v76, 0, v74);
    destroyStorage<A>(_:count:)(v77, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v75, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v167 + 720);
  unint64_t v67 = *(void *)(v167 + 632);
  unint64_t v68 = *(void *)(v167 + 592);
  uint64_t v70 = *(void *)(v167 + 584);

  v69(v67, v68);
  outlined init with copy of QuantityPersisting(v70 + OBJC_IVAR____TtC19SiriWellnessIntents34LogGenericMedicationsIntentHandler_storage, v167 + 56);
  uint32_t v71 = *(void *)(v167 + 80);
  uint32_t v72 = *(void *)(v167 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v167 + 56), v71);
  uint64_t v73 = (uint64_t (*)(void, void, void, uint64_t, uint64_t))(*(void *)(v72 + 24) + **(int **)(v72 + 24));
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v167 + 760) = v15;
  *uint64_t v15 = *(void *)(v167 + 304);
  v15[1] = LogGenericMedicationsIntentHandler.handle(intent:);
  return v73(v111 & 1, v149 & 1, v169 & 1, v71, v72);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 304) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 752);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 304) + 8);
  return v1(v3);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 304) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 768);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 304) + 8);
  return v1(v3);
}

uint64_t LogGenericMedicationsIntentHandler.handle(intent:)(char a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 304) = *v1;
  *(unsigned char *)(v3 + 777) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](LogGenericMedicationsIntentHandler.handle(intent:), 0);
}

uint64_t @objc closure #1 in LogGenericMedicationsIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  v3[4] = a3;
  v3[3] = a1;
  id v3[2] = v3;
  id v5 = a1;
  v3[5] = _Block_copy(a2);
  id v6 = a3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 48) = v7;
  void *v7 = *(void *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return LogGenericMedicationsIntentHandler.handle(intent:)((uint64_t)a1);
}

id LogGenericMedicationsIntentHandler.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t LogGenericMedicationsIntentHandler.init()()
{
  if (!"SiriWellnessIntents.LogGenericMedicationsIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.LogGenericMedicationsIntentHandler", 54, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/LogGenericMedicationsIntentHandler.swift", 60, 2, v1, 0x11uLL, 0x14uLL);
  __break(1u);
  return result;
}

id LogGenericMedicationsIntentHandler.__deallocating_deinit()
{
  uint64_t v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void *outlined init with copy of GenericMedicationsPersistor(uint64_t a1, void *a2)
{
  id v6 = *(id *)a1;
  id v2 = *(id *)a1;
  *a2 = v6;
  uint64_t v7 = *(void **)(a1 + 8);
  id v3 = v7;
  a2[1] = v7;
  uint64_t v4 = *(void *)(a1 + 40);
  a2[5] = v4;
  a2[6] = *(void *)(a1 + 48);
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a2 + 2), a1 + 16);
  return a2;
}

id *outlined destroy of GenericMedicationsPersistor(id *a1)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 2));
  return a1;
}

uint64_t GenericMedicationsPersistor.isLoggingAuthorized()()
{
  v1[4] = v0;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = v0;
  return MEMORY[0x270FA2498](GenericMedicationsPersistor.isLoggingAuthorized(), 0);
}

{
  void *v0;
  void **v1;
  id v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  uint64_t v1 = (void **)v0[4];
  v0[2] = v0;
  id v6 = *v1;
  v0[5] = *v1;
  id v2 = v6;
  id v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 48) = v3;
  void *v3 = *(void *)(v5 + 16);
  v3[1] = PeriodPersistor.isLoggingAuthorized();
  return isSiriAuthorizedToAccessHealthData(store:)((uint64_t)v6);
}

uint64_t GenericMedicationsPersistor.numMedInAppToday(doseEvents:)(uint64_t a1)
{
  v2[15] = a1;
  v2[8] = v2;
  v2[9] = 0;
  v2[10] = 0;
  v2[11] = 0;
  void v2[2] = 0;
  v2[3] = 0;
  v2[14] = 0;
  v2[9] = a1;
  v2[10] = v1;
  return MEMORY[0x270FA2498](GenericMedicationsPersistor.numMedInAppToday(doseEvents:), 0);
}

uint64_t GenericMedicationsPersistor.numMedInAppToday(doseEvents:)()
{
  uint64_t v11 = v0[15];
  v0[8] = v0;
  _allocateUninitializedArray<A>(_:)();
  v0[11] = Set.init(arrayLiteral:)();
  swift_bridgeObjectRetain();
  v0[12] = v11;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection<>.makeIterator()();
  while (1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    uint64_t v9 = (void *)v10[13];
    if (!v9) {
      break;
    }
    v10[14] = v9;
    id v5 = objc_msgSend(v9, sel_medicationIdentifier);
    id v8 = objc_msgSend(v5, sel_underlyingIdentifier);
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v1;

    v10[6] = v6;
    v10[7] = v7;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<String>);
    Set.insert(_:)();

    swift_bridgeObjectRelease();
  }
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRetain();
  uint64_t v4 = Set.count.getter();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  id v2 = *(uint64_t (**)(uint64_t))(v10[8] + 8);
  return v2(v4);
}

uint64_t GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:)(char a1, char a2)
{
  *(void *)(v3 + 248) = v2;
  *(unsigned char *)(v3 + 538) = a2 & 1;
  *(unsigned char *)(v3 + 537) = a1 & 1;
  *(void *)(v3 + 168) = v3;
  *(unsigned char *)(v3 + 536) = 0;
  *(unsigned char *)(v3 + 544) = 0;
  *(void *)(v3 + 176) = 0;
  *(void *)(v3 + 184) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 144) = 0;
  *(void *)(v3 + 152) = 0;
  *(void *)(v3 + 160) = 0;
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v3 + 256) = v4;
  *(void *)(v3 + 264) = *(void *)(v4 - 8);
  *(void *)(v3 + 272) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  *(void *)(v3 + 280) = v5;
  *(void *)(v3 + 288) = *(void *)(v5 - 8);
  *(void *)(v3 + 296) = swift_task_alloc();
  *(void *)(v3 + 304) = swift_task_alloc();
  *(void *)(v3 + 312) = swift_task_alloc();
  *(void *)(v3 + 320) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DateInterval();
  *(void *)(v3 + 328) = v6;
  *(void *)(v3 + 336) = *(void *)(v6 - 8);
  *(void *)(v3 + 344) = swift_task_alloc();
  *(void *)(v3 + 352) = swift_task_alloc();
  *(unsigned char *)(v3 + 536) = a1 & 1;
  *(unsigned char *)(v3 + 544) = a2 & 1;
  *(void *)(v3 + 176) = v2;
  return MEMORY[0x270FA2498](GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:), 0);
}

uint64_t GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:)()
{
  uint64_t v12 = *(void *)(v0 + 352);
  uint64_t v15 = *(void *)(v0 + 344);
  uint64_t v13 = *(void *)(v0 + 336);
  uint64_t v14 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 320);
  uint64_t v9 = *(void *)(v0 + 312);
  uint64_t v6 = *(void *)(v0 + 304);
  uint64_t v10 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 288);
  uint64_t v7 = *(void *)(v0 + 280);
  uint64_t v11 = *(void *)(v0 + 248);
  *(void *)(v0 + 168) = v0;
  Date.init()();
  Date.startOfDay.getter(v9);
  id v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v5, v7);
  Date.init()();
  Date.endOfDay.getter(v10);
  v8(v6, v7);
  DateInterval.init(start:end:)();
  objc_super v17 = *(void **)(v11 + 8);
  *(void *)(v0 + 360) = v17;
  id v1 = v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v15, v12, v14);
  Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 368) = isa;
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(void *)(v0 + 376) = v2;
  *(void *)(v0 + 384) = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v2(v15, v14);
  *(void *)(v0 + 16) = *(void *)(v0 + 168);
  *(void *)(v0 + 56) = v0 + 192;
  *(void *)(v0 + 24) = GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:);
  *(void *)(v0 + 112) = swift_continuation_init();
  *(void *)(v0 + 80) = MEMORY[0x263EF8330];
  *(_DWORD *)(v0 + 88) = 0x40000000;
  *(_DWORD *)(v0 + 92) = 0;
  *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [HKMedicationExposableDoseEvent];
  *(void *)(v0 + 104) = &block_descriptor_4;
  objc_msgSend(v17, sel_doseEventsForDateInterval_medicationIdentifier_completion_, isa, 0);
  return __swift_continuation_await_point();
}

{
  void *v0;
  uint64_t v1;
  uint64_t (*v2)();
  void *v4;
  uint64_t v5;

  uint64_t v4 = (void *)*v0;
  v4[21] = *v0;
  id v1 = v4[6];
  v4[49] = v1;
  if (v1)
  {
    uint64_t v2 = GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:);
  }
  else
  {
    uint64_t v2 = GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char v8;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;

  uint64_t v27 = *(id *)(v0 + 368);
  uint64_t v26 = *(id *)(v0 + 360);
  id v33 = *(unsigned char *)(v0 + 537);
  *(void *)(v0 + 168) = v0;
  uint64_t v28 = *(void *)(v0 + 192);
  swift_bridgeObjectRetain();
  *(void *)(v0 + 184) = v28;

  uint64_t v29 = filterUniqueDoseEvents(doseEvents:)(v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  *(void *)(v0 + 184) = v29;
  swift_bridgeObjectRelease();
  Class v30 = GenericMedicationsPersistor.getDoseEventsByStatus(doseEvents:)(v29);
  uint64_t v31 = v1;
  uint64_t v32 = v2;
  *(void *)(v0 + 400) = v30;
  *(void *)(v0 + 408) = v1;
  *(void *)(v0 + 416) = v2;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 144) = v30;
  *(void *)(v0 + 152) = v31;
  *(void *)(v0 + 160) = v32;
  if (v33)
  {
    if (*(unsigned char *)(v25 + 538))
    {
      uint64_t v24 = *(void **)(*(void *)(v25 + 248) + 8);
      *(void *)(v25 + 424) = v24;
      uint64_t v3 = v24;
      type metadata accessor for HKMedicationExposableDoseEvent();
      os_log_type_t v23 = static Array.+ infix(_:_:)();
      *(void *)(v25 + 432) = v23;
      uint64_t v4 = swift_task_alloc();
      uint64_t v5 = v23;
      uint64_t v6 = (void *)v4;
      uint64_t v7 = (uint64_t)v24;
      *(void *)(v25 + 440) = v6;
      char *v6 = *(void *)(v25 + 168);
      v6[1] = GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:);
      id v8 = 1;
    }
    else
    {
      uint64_t v22 = *(void **)(*(void *)(v25 + 248) + 8);
      *(void *)(v25 + 456) = v22;
      uint64_t v10 = v22;
      uint64_t v11 = swift_task_alloc();
      uint64_t v5 = v32;
      uint64_t v12 = (void *)v11;
      uint64_t v7 = (uint64_t)v22;
      *(void *)(v25 + 464) = v12;
      *uint64_t v12 = *(void *)(v25 + 168);
      v12[1] = GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:);
      id v8 = 1;
    }
  }
  else if (*(unsigned char *)(v25 + 538))
  {
    uint64_t v21 = *(void **)(*(void *)(v25 + 248) + 8);
    *(void *)(v25 + 480) = v21;
    uint64_t v13 = v21;
    type metadata accessor for HKMedicationExposableDoseEvent();
    uint64_t v20 = static Array.+ infix(_:_:)();
    *(void *)(v25 + 488) = v20;
    uint64_t v14 = swift_task_alloc();
    uint64_t v5 = v20;
    uint64_t v15 = (void *)v14;
    uint64_t v7 = (uint64_t)v21;
    *(void *)(v25 + 496) = v15;
    *uint64_t v15 = *(void *)(v25 + 168);
    v15[1] = GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:);
    id v8 = 0;
  }
  else
  {
    uint64_t v19 = *(void **)(*(void *)(v25 + 248) + 8);
    *(void *)(v25 + 512) = v19;
    uint64_t v16 = v19;
    objc_super v17 = swift_task_alloc();
    uint64_t v5 = v32;
    uint64_t v18 = (void *)v17;
    uint64_t v7 = (uint64_t)v19;
    *(void *)(v25 + 520) = v18;
    *uint64_t v18 = *(void *)(v25 + 168);
    v18[1] = GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:);
    id v8 = 0;
  }
  return GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:)(v7, v5, v8);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[47];
  uint64_t v5 = v0[44];
  uint64_t v3 = v0[41];
  v0[21] = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  v4(v5, v3);
  uint64_t v6 = v0[56];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(uint64_t))(v0[21] + 8);
  return v1(v6);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[47];
  uint64_t v5 = v0[44];
  uint64_t v3 = v0[41];
  v0[21] = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  v4(v5, v3);
  uint64_t v6 = v0[59];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(uint64_t))(v0[21] + 8);
  return v1(v6);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[47];
  uint64_t v5 = v0[44];
  uint64_t v3 = v0[41];
  v0[21] = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  v4(v5, v3);
  uint64_t v6 = v0[63];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(uint64_t))(v0[21] + 8);
  return v1(v6);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[47];
  uint64_t v5 = v0[44];
  uint64_t v3 = v0[41];
  v0[21] = v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  v4(v5, v3);
  uint64_t v6 = v0[66];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(uint64_t))(v0[21] + 8);
  return v1(v6);
}

{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(char *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;

  uint64_t v21 = *(void **)(v0 + 392);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  objc_super v17 = *(void **)(v0 + 368);
  uint64_t v16 = *(void **)(v0 + 360);
  uint64_t v18 = *(void *)(v0 + 352);
  uint64_t v19 = *(void *)(v0 + 328);
  uint64_t v15 = *(void *)(v0 + 272);
  uint64_t v22 = *(void *)(v0 + 264);
  uint64_t v24 = *(void *)(v0 + 256);
  *(void *)(v0 + 168) = v0;
  swift_willThrow();

  v20(v18, v19);
  id v1 = v21;
  *(void *)(v0 + 200) = v21;
  os_log_type_t v23 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v15, v23, v24);
  swift_endAccess();
  uint64_t v27 = Logger.logObject.getter();
  uint64_t v26 = static os_log_type_t.error.getter();
  *(void *)(v0 + 208) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v25 = *(unsigned int *)(v0 + 540);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v28 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v27, v26))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 216) = buf;
    *(void *)(v14 + 224) = v11;
    *(void *)(v14 + 232) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 216));
    serialize(_:at:)(0, (unsigned char **)(v14 + 216));
    *(void *)(v14 + 240) = v28;
    uint64_t v13 = (void *)swift_task_alloc();
    void v13[2] = v14 + 216;
    v13[3] = v14 + 224;
    void v13[4] = v14 + 232;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v27, v26, "Failed fetching dose events for timeframe.", buf, v25);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v7 = *(id *)(v14 + 392);
  uint64_t v5 = *(void *)(v14 + 272);
  uint64_t v6 = *(void *)(v14 + 256);
  uint64_t v4 = *(void *)(v14 + 264);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v6);
  type metadata accessor for LogGenericMedicationsIntentResponse();
  id v8 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(char *))(*(void *)(v14 + 168) + 8);
  return v2(v8);
}

uint64_t GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:)(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v3 = *(void **)(*v1 + 424);
  *(void *)(v4 + 168) = *v1;
  *(void *)(v4 + 448) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA2498](GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:), 0);
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  uint64_t v3 = *(void **)(*v1 + 456);
  *(void *)(v4 + 168) = *v1;
  *(void *)(v4 + 472) = a1;
  swift_task_dealloc();

  return MEMORY[0x270FA2498](GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:), 0);
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  uint64_t v3 = *(void **)(*v1 + 480);
  *(void *)(v4 + 168) = *v1;
  *(void *)(v4 + 504) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA2498](GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:), 0);
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  uint64_t v3 = *(void **)(*v1 + 512);
  *(void *)(v4 + 168) = *v1;
  *(void *)(v4 + 528) = a1;
  swift_task_dealloc();

  return MEMORY[0x270FA2498](GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:), 0);
}

uint64_t GenericMedicationsPersistor.getDoseEventsByStatus(doseEvents:)(uint64_t a1)
{
  uint64_t v40 = a1;
  uint64_t v53 = 0;
  uint64_t v38 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v73 = 0;
  uint64_t v72 = 0;
  uint64_t v68 = 0;
  uint64_t v67 = 0;
  uint64_t v66 = 0;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  id v61 = 0;
  uint64_t v43 = 0;
  uint64_t v39 = 0;
  uint64_t v47 = type metadata accessor for Logger();
  uint64_t v44 = *(void *)(v47 - 8);
  uint64_t v45 = v47 - 8;
  unint64_t v41 = (*(void *)(v44 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  id v1 = (char *)v11 - v41;
  uint64_t v42 = (char *)v11 - v41;
  uint64_t v73 = MEMORY[0x270FA5388](v40);
  uint64_t v72 = v2;
  uint64_t v46 = Logger.wellnessIntents.unsafeMutableAddressor();
  uint64_t v48 = &v71;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v1, v46, v47);
  swift_endAccess();
  uint64_t v55 = Logger.logObject.getter();
  int v54 = static os_log_type_t.debug.getter();
  uint64_t v51 = &v69;
  uint64_t v69 = 2;
  unint64_t v49 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v50 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v52 = v70;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v56 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v55, (os_log_type_t)v54))
  {
    uint64_t v3 = v39;
    uint64_t v27 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v26 = 0;
    uint64_t v28 = createStorage<A>(capacity:type:)(0);
    uint64_t v29 = createStorage<A>(capacity:type:)(v26);
    id v33 = v60;
    v60[0] = v27;
    uint64_t v34 = &v59;
    uint64_t v59 = v28;
    uint64_t v31 = &v58;
    uint64_t v58 = v29;
    unsigned int v30 = 0;
    serialize(_:at:)(0, v60);
    serialize(_:at:)(v30, v33);
    uint64_t v57 = v56;
    uint64_t v32 = v11;
    MEMORY[0x270FA5388](v11);
    uint64_t v4 = v34;
    uint64_t v5 = &v11[-6];
    uint64_t v35 = &v11[-6];
    v5[2] = v33;
    v5[3] = v4;
    v5[4] = v6;
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    uint64_t v37 = v3;
    if (v3)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_25DE00000, v55, (os_log_type_t)v54, "getting doseEvents by status", v27, v52);
      uint64_t v23 = 0;
      destroyStorage<A>(_:count:)(v28, 0, v25);
      destroyStorage<A>(_:count:)(v29, v23, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v27, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
      uint64_t v24 = v37;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v24 = v39;
  }
  uint64_t v21 = v24;

  (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v47);
  uint64_t v19 = 0;
  unint64_t v18 = type metadata accessor for HKMedicationExposableDoseEvent();
  uint64_t v68 = _allocateUninitializedArray<A>(_:)();
  uint64_t v67 = _allocateUninitializedArray<A>(_:)();
  uint64_t v66 = _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  uint64_t v63 = v40;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection<>.makeIterator()();
  for (uint64_t i = v21; ; uint64_t i = v16)
  {
    uint64_t v16 = i;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    id v17 = v62;
    if (!v62) {
      break;
    }
    id v15 = v17;
    id v13 = v17;
    id v61 = v17;
    id v14 = objc_msgSend(v17, sel_status);
    if (v14 == (id)4)
    {
      id v7 = v13;
      v60[1] = v13;
      Array.append(_:)();
    }
    else
    {
      if (v14 == (id)5)
      {
        id v8 = v13;
        v60[2] = v13;
      }
      else
      {
        id v9 = v13;
        v60[3] = v13;
      }
      Array.append(_:)();
    }
  }
  outlined destroy of [HKQuantityType]();
  v11[3] = &v68;
  uint64_t v12 = v68;
  swift_bridgeObjectRetain();
  v11[2] = &v67;
  v11[4] = v67;
  swift_bridgeObjectRetain();
  v11[1] = &v66;
  void v11[5] = v66;
  swift_bridgeObjectRetain();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  return v12;
}

uint64_t GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:)(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 520) = v3;
  *(unsigned char *)(v4 + 761) = a3 & 1;
  *(void *)(v4 + 512) = a2;
  *(void *)(v4 + 504) = a1;
  *(void *)(v4 + 264) = v4;
  *(void *)(v4 + 272) = 0;
  *(void *)(v4 + 280) = 0;
  *(unsigned char *)(v4 + 760) = 0;
  *(void *)(v4 + 288) = 0;
  *(void *)(v4 + 304) = 0;
  *(void *)(v4 + 312) = 0;
  *(void *)(v4 + 320) = 0;
  *(void *)(v4 + 328) = 0;
  *(void *)(v4 + 248) = 0;
  *(void *)(v4 + 256) = 0;
  *(void *)(v4 + 352) = 0;
  *(void *)(v4 + 400) = 0;
  *(void *)(v4 + 408) = 0;
  *(void *)(v4 + 416) = 0;
  *(void *)(v4 + 424) = 0;
  *(void *)(v4 + 440) = 0;
  *(void *)(v4 + 456) = 0;
  uint64_t v5 = type metadata accessor for Date();
  *(void *)(v4 + 528) = v5;
  *(void *)(v4 + 536) = *(void *)(v5 - 8);
  *(void *)(v4 + 544) = swift_task_alloc();
  *(void *)(v4 + 552) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  *(void *)(v4 + 560) = v6;
  *(void *)(v4 + 568) = *(void *)(v6 - 8);
  *(void *)(v4 + 576) = swift_task_alloc();
  *(void *)(v4 + 584) = swift_task_alloc();
  *(void *)(v4 + 272) = a1;
  *(void *)(v4 + 280) = a2;
  *(unsigned char *)(v4 + 760) = a3 & 1;
  *(void *)(v4 + 288) = v3;
  return MEMORY[0x270FA2498](GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:), 0);
}

uint64_t GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:)()
{
  uint64_t v1 = *(void *)(v0 + 584);
  uint64_t v35 = *(void *)(v0 + 568);
  uint64_t v37 = *(void *)(v0 + 560);
  *(void *)(v0 + 264) = v0;
  uint64_t v36 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16);
  *(void *)(v0 + 592) = v2;
  *(void *)(v0 + 600) = (v35 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v2(v1, v36, v37);
  swift_endAccess();
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 296) = 2;
  *(void *)(v0 + 608) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 616) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 624) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v38 = *(unsigned int *)(v0 + 764);
  *(void *)(v0 + 632) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v41 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v40, v39))
  {
    unsigned int v30 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v31 = createStorage<A>(capacity:type:)(0);
    uint64_t v32 = createStorage<A>(capacity:type:)(0);
    *(void *)(v34 + 472) = v30;
    *(void *)(v34 + 480) = v31;
    *(void *)(v34 + 488) = v32;
    serialize(_:at:)(0, (unsigned char **)(v34 + 472));
    serialize(_:at:)(0, (unsigned char **)(v34 + 472));
    *(void *)(v34 + 496) = v41;
    id v33 = (void *)swift_task_alloc();
    v33[2] = v34 + 472;
    v33[3] = v34 + 480;
    v33[4] = v34 + 488;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v40, v39, "Starting to write dose event", v30, v38);
    destroyStorage<A>(_:count:)(v31, 0, v29);
    destroyStorage<A>(_:count:)(v32, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v30, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void *)(v34 + 584);
  uint64_t v27 = *(void *)(v34 + 560);
  char v28 = *(unsigned char *)(v34 + 761);
  uint64_t v25 = *(void *)(v34 + 568);

  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  *(void *)(v34 + 640) = v3;
  *(void *)(v34 + 648) = (v25 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v3(v26, v27);
  if (v28) {
    uint64_t v24 = 4;
  }
  else {
    uint64_t v24 = 5;
  }
  *(void *)(v34 + 656) = v24;
  uint64_t v22 = *(void *)(v34 + 512);
  *(void *)(v34 + 304) = v24;
  *(void *)(v34 + 664) = type metadata accessor for HKMedicationExposableDoseEvent();
  *(void *)(v34 + 312) = _allocateUninitializedArray<A>(_:)();
  *(void *)(v34 + 672) = type metadata accessor for MatchedMedName();
  *(void *)(v34 + 320) = _allocateUninitializedArray<A>(_:)();
  *(void *)(v34 + 328) = _allocateUninitializedArray<A>(_:)();
  Date.init()();
  swift_bridgeObjectRetain();
  *(void *)(v34 + 336) = v22;
  *(void *)(v34 + 680) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  id v23 = *(id *)(v34 + 344);
  *(void *)(v34 + 688) = v23;
  if (v23)
  {
    uint64_t v4 = *(void *)(v34 + 656);
    uint64_t v13 = *(void *)(v34 + 552);
    uint64_t v5 = *(void *)(v34 + 544);
    uint64_t v14 = *(void *)(v34 + 528);
    uint64_t v17 = *(void *)(v34 + 520);
    uint64_t v12 = *(void *)(v34 + 536);
    *(void *)(v34 + 408) = v23;
    id v15 = objc_msgSend(v23, sel_updateForNewStatus_, v4);
    *(void *)(v34 + 696) = v15;
    *(void *)(v34 + 416) = v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v5, v13, v14);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v5, v14);
    id v21 = objc_msgSend(v15, sel_updateForNewStartDate_, isa);
    *(void *)(v34 + 704) = v21;

    *(void *)(v34 + 424) = v21;
    id v6 = v21;
    *(void *)(v34 + 432) = v21;
    Array.append(_:)();
    outlined init with copy of QuantityPersisting(v17 + 16, v34 + 120);
    uint64_t v18 = *(void *)(v34 + 144);
    uint64_t v19 = *(void *)(v34 + 152);
    __swift_project_boxed_opaque_existential_1((void *)(v34 + 120), v18);
    uint64_t v20 = (uint64_t (*)(id, uint64_t, uint64_t, uint64_t))(*(void *)(v19 + 24) + **(int **)(v19 + 24));
    id v7 = (void *)swift_task_alloc();
    *(void *)(v34 + 712) = v7;
    void *v7 = *(void *)(v34 + 264);
    v7[1] = GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:);
    return v20(v21, 1, v18, v19);
  }
  else
  {
    id v11 = *(id *)(v34 + 504);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    Class v10 = Array._bridgeToObjectiveC()().super.isa;
    *(void *)(v34 + 744) = v10;
    swift_bridgeObjectRelease();
    *(void *)(v34 + 16) = *(void *)(v34 + 264);
    *(void *)(v34 + 56) = v9;
    *(void *)(v34 + 24) = GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:);
    *(void *)(v34 + 112) = swift_continuation_init();
    *(void *)(v34 + 80) = MEMORY[0x263EF8330];
    *(_DWORD *)(v34 + 88) = 0x40000000;
    *(_DWORD *)(v34 + 92) = 0;
    *(void *)(v34 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) @Sendable (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
    *(void *)(v34 + 104) = &block_descriptor_149;
    objc_msgSend(v11, sel_writeDoseEvents_completion_, v10);
    return __swift_continuation_await_point();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(v0 + 720);
  *(void *)(v0 + 264) = v0;
  if (v1)
  {
    uint64_t v9 = (void *)v10[90];
    v10[57] = v9;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v10 + 15));
    uint64_t v2 = v9;
    v10[58] = v9;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
    Array.append(_:)();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v10 + 15));
  }
  id v8 = v10[86];
  outlined init with copy of QuantityPersisting(v10[65] + 16, (uint64_t)(v10 + 20));
  uint64_t v5 = v10[23];
  id v6 = v10[24];
  __swift_project_boxed_opaque_existential_1(v10 + 20, v5);
  id v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 + 24) + **(int **)(v6 + 24));
  uint64_t v3 = (void *)swift_task_alloc();
  v10[91] = v3;
  void *v3 = v10[33];
  v3[1] = GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:);
  return v7(v8, 1, v5, v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v7;
  uint64_t v8;
  Class v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(id, uint64_t, uint64_t, uint64_t);
  id v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = *(void *)(v0 + 736);
  *(void *)(v0 + 264) = v0;
  if (v1)
  {
    uint64_t v13 = *(id *)(v25 + 736);
    *(void *)(v25 + 440) = v13;
    __swift_destroy_boxed_opaque_existential_1(v25 + 160);
    id v7 = v13;
    *(void *)(v25 + 448) = v13;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
    Array.append(_:)();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v25 + 160);
  }
  id v11 = *(id *)(v25 + 696);
  uint64_t v12 = *(id *)(v25 + 688);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  uint64_t v14 = *(id *)(v25 + 344);
  *(void *)(v25 + 688) = v14;
  if (v14)
  {
    uint64_t v2 = *(void *)(v25 + 656);
    uint64_t v16 = *(void *)(v25 + 552);
    uint64_t v3 = *(void *)(v25 + 544);
    uint64_t v17 = *(void *)(v25 + 528);
    uint64_t v20 = *(void *)(v25 + 520);
    id v15 = *(void *)(v25 + 536);
    *(void *)(v25 + 408) = v14;
    uint64_t v18 = objc_msgSend(v14, sel_updateForNewStatus_, v2);
    *(void *)(v25 + 696) = v18;
    *(void *)(v25 + 416) = v18;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v3, v16, v17);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v3, v17);
    uint64_t v24 = objc_msgSend(v18, sel_updateForNewStartDate_, isa);
    *(void *)(v25 + 704) = v24;

    *(void *)(v25 + 424) = v24;
    uint64_t v4 = v24;
    *(void *)(v25 + 432) = v24;
    Array.append(_:)();
    outlined init with copy of QuantityPersisting(v20 + 16, v25 + 120);
    id v21 = *(void *)(v25 + 144);
    uint64_t v22 = *(void *)(v25 + 152);
    __swift_project_boxed_opaque_existential_1((void *)(v25 + 120), v21);
    id v23 = (uint64_t (*)(id, uint64_t, uint64_t, uint64_t))(*(void *)(v22 + 24) + **(int **)(v22 + 24));
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v25 + 712) = v5;
    *uint64_t v5 = *(void *)(v25 + 264);
    v5[1] = GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:);
    return v23(v24, 1, v21, v22);
  }
  else
  {
    Class v10 = *(id *)(v25 + 504);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    uint64_t v9 = Array._bridgeToObjectiveC()().super.isa;
    *(void *)(v25 + 744) = v9;
    swift_bridgeObjectRelease();
    *(void *)(v25 + 16) = *(void *)(v25 + 264);
    *(void *)(v25 + 56) = v8;
    *(void *)(v25 + 24) = GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:);
    *(void *)(v25 + 112) = swift_continuation_init();
    *(void *)(v25 + 80) = MEMORY[0x263EF8330];
    *(_DWORD *)(v25 + 88) = 0x40000000;
    *(_DWORD *)(v25 + 92) = 0;
    *(void *)(v25 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) @Sendable (@unowned Bool, @unowned NSError?) -> () with result type () zero on error;
    *(void *)(v25 + 104) = &block_descriptor_149;
    objc_msgSend(v10, sel_writeDoseEvents_completion_, v9);
    return __swift_continuation_await_point();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = *v0;
  uint64_t v5 = *v0;
  *(void *)(v5 + 264) = *v0;
  uint64_t v1 = *(void *)(v4 + 48);
  *(void *)(v5 + 752) = v1;
  if (v1)
  {
    uint64_t v2 = GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:);
  }
  else
  {
    uint64_t v2 = GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  uint64_t v0;
  void *v1;
  char *v2;
  char *v3;
  char *v4;
  uint64_t (*v5)(char *);
  Class isa;
  Class v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  uint64_t v1 = *(void **)(v0 + 744);
  Class v10 = *(void *)(v0 + 552);
  uint64_t v9 = *(void *)(v0 + 536);
  id v11 = *(void *)(v0 + 528);
  *(void *)(v0 + 264) = v0;

  type metadata accessor for LogGenericMedicationsIntentResponse();
  uint64_t v12 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(4, 0);
  uint64_t v2 = v12;
  uint64_t v3 = v12;
  uint64_t v4 = v12;
  *(void *)(v0 + 400) = v12;
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setMatchingMeds_, isa);

  swift_bridgeObjectRetain();
  id v8 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v12, sel_setMatchingMedsBeforeUpdate_, v8);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(char *))(*(void *)(v0 + 264) + 8);
  return v5(v12);
}

{
  uint64_t v0;
  id v1;
  uint64_t (*v2)(char *);
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint8_t *buf;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint32_t v24;
  os_log_type_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v20 = *(void **)(v0 + 752);
  uint64_t v19 = *(void **)(v0 + 744);
  id v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
  uint64_t v18 = *(void *)(v0 + 576);
  uint64_t v22 = *(void *)(v0 + 560);
  *(void *)(v0 + 264) = v0;
  swift_willThrow();

  uint64_t v1 = v20;
  *(void *)(v0 + 352) = v20;
  id v21 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v23(v18, v21, v22);
  swift_endAccess();
  uint64_t v26 = Logger.logObject.getter();
  uint64_t v25 = static os_log_type_t.error.getter();
  *(void *)(v0 + 360) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v24 = *(_DWORD *)(v0 + 768);
  uint64_t v27 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v26, v25))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v14 = createStorage<A>(capacity:type:)(0);
    id v15 = createStorage<A>(capacity:type:)(0);
    *(void *)(v17 + 368) = buf;
    *(void *)(v17 + 376) = v14;
    *(void *)(v17 + 384) = v15;
    serialize(_:at:)(0, (unsigned char **)(v17 + 368));
    serialize(_:at:)(0, (unsigned char **)(v17 + 368));
    *(void *)(v17 + 392) = v27;
    uint64_t v16 = (void *)swift_task_alloc();
    v16[2] = v17 + 368;
    v16[3] = v17 + 376;
    v16[4] = v17 + 384;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v26, v25, "Failed writing updated dose events for specific meds.", buf, v24);
    destroyStorage<A>(_:count:)(v14, 0, v12);
    destroyStorage<A>(_:count:)(v15, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  id v7 = *(id *)(v17 + 752);
  id v6 = *(void (**)(uint64_t, uint64_t))(v17 + 640);
  uint64_t v4 = *(void *)(v17 + 576);
  uint64_t v5 = *(void *)(v17 + 560);
  uint64_t v9 = *(void *)(v17 + 552);
  Class v10 = *(void *)(v17 + 528);
  id v8 = *(void *)(v17 + 536);

  v6(v4, v5);
  type metadata accessor for LogGenericMedicationsIntentResponse();
  id v11 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(char *))(*(void *)(v17 + 264) + 8);
  return v2(v11);
}

uint64_t GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 264) = *v1;
  *(void *)(v3 + 720) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 264) = *v1;
  *(void *)(v3 + 736) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:), 0);
}

uint64_t GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:)(char a1, char a2, char a3)
{
  *(void *)(v4 + 1248) = v3;
  *(unsigned char *)(v4 + 1867) = a3 & 1;
  *(unsigned char *)(v4 + 1866) = a2 & 1;
  *(unsigned char *)(v4 + 1865) = a1 & 1;
  *(void *)(v4 + 560) = v4;
  *(unsigned char *)(v4 + 1864) = 0;
  *(unsigned char *)(v4 + 1872) = 0;
  *(unsigned char *)(v4 + 1880) = 0;
  *(void *)(v4 + 568) = 0;
  *(void *)(v4 + 576) = 0;
  *(void *)(v4 + 592) = 0;
  *(void *)(v4 + 648) = 0;
  *(void *)(v4 + 672) = 0;
  *(void *)(v4 + 680) = 0;
  *(void *)(v4 + 528) = 0;
  *(void *)(v4 + 536) = 0;
  *(void *)(v4 + 704) = 0;
  *(void *)(v4 + 752) = 0;
  *(void *)(v4 + 808) = 0;
  *(void *)(v4 + 816) = 0;
  *(void *)(v4 + 544) = 0;
  *(void *)(v4 + 552) = 0;
  *(void *)(v4 + 840) = 0;
  *(void *)(v4 + 888) = 0;
  *(void *)(v4 + 1112) = 0;
  *(void *)(v4 + 1120) = 0;
  *(void *)(v4 + 1168) = 0;
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v4 + 1256) = v5;
  *(void *)(v4 + 1264) = *(void *)(v5 - 8);
  *(void *)(v4 + 1272) = swift_task_alloc();
  *(void *)(v4 + 1280) = swift_task_alloc();
  *(void *)(v4 + 1288) = swift_task_alloc();
  *(void *)(v4 + 1296) = swift_task_alloc();
  *(void *)(v4 + 1304) = swift_task_alloc();
  *(void *)(v4 + 1312) = swift_task_alloc();
  *(void *)(v4 + 1320) = swift_task_alloc();
  *(void *)(v4 + 1328) = swift_task_alloc();
  *(void *)(v4 + 1336) = swift_task_alloc();
  *(void *)(v4 + 1344) = swift_task_alloc();
  *(void *)(v4 + 1352) = swift_task_alloc();
  *(void *)(v4 + 1360) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Date();
  *(void *)(v4 + 1368) = v6;
  *(void *)(v4 + 1376) = *(void *)(v6 - 8);
  *(void *)(v4 + 1384) = swift_task_alloc();
  *(void *)(v4 + 1392) = swift_task_alloc();
  *(void *)(v4 + 1400) = swift_task_alloc();
  *(void *)(v4 + 1408) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DateInterval();
  *(void *)(v4 + 1416) = v7;
  *(void *)(v4 + 1424) = *(void *)(v7 - 8);
  *(void *)(v4 + 1432) = swift_task_alloc();
  *(void *)(v4 + 1440) = swift_task_alloc();
  *(unsigned char *)(v4 + 1864) = a1 & 1;
  *(unsigned char *)(v4 + 1872) = a2 & 1;
  *(unsigned char *)(v4 + 1880) = a3 & 1;
  *(void *)(v4 + 568) = v3;
  return MEMORY[0x270FA2498](GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:), 0);
}

uint64_t GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:)()
{
  uint64_t v12 = *(void *)(v0 + 1440);
  uint64_t v15 = *(void *)(v0 + 1432);
  uint64_t v13 = *(void *)(v0 + 1424);
  uint64_t v14 = *(void *)(v0 + 1416);
  uint64_t v5 = *(void *)(v0 + 1408);
  uint64_t v9 = *(void *)(v0 + 1400);
  uint64_t v6 = *(void *)(v0 + 1392);
  uint64_t v10 = *(void *)(v0 + 1384);
  uint64_t v4 = *(void *)(v0 + 1376);
  uint64_t v7 = *(void *)(v0 + 1368);
  uint64_t v11 = *(void *)(v0 + 1248);
  *(void *)(v0 + 560) = v0;
  Date.init()();
  Date.startOfDay.getter(v9);
  id v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v8(v5, v7);
  Date.init()();
  Date.endOfDay.getter(v10);
  v8(v6, v7);
  DateInterval.init(start:end:)();
  uint64_t v17 = *(void **)(v11 + 8);
  *(void *)(v0 + 1448) = v17;
  id v1 = v17;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v15, v12, v14);
  Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  *(void *)(v0 + 1456) = isa;
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(void *)(v0 + 1464) = v2;
  *(void *)(v0 + 1472) = (v13 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v2(v15, v14);
  *(void *)(v0 + 16) = *(void *)(v0 + 560);
  *(void *)(v0 + 56) = v0 + 584;
  *(void *)(v0 + 24) = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
  *(void *)(v0 + 112) = swift_continuation_init();
  *(void *)(v0 + 80) = MEMORY[0x263EF8330];
  *(_DWORD *)(v0 + 88) = 0x40000000;
  *(_DWORD *)(v0 + 92) = 0;
  *(void *)(v0 + 96) = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NSArray?, @unowned NSError?) -> () with result type [HKMedicationExposableDoseEvent];
  *(void *)(v0 + 104) = &block_descriptor_154;
  objc_msgSend(v17, sel_doseEventsForDateInterval_medicationIdentifier_completion_, isa, 0);
  return __swift_continuation_await_point();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v4 = *v0;
  uint64_t v5 = *v0;
  *(void *)(v5 + 560) = *v0;
  id v1 = *(void *)(v4 + 48);
  *(void *)(v5 + 1480) = v1;
  if (v1)
  {
    uint64_t v2 = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
  }
  else
  {
    uint64_t v2 = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
  }
  return MEMORY[0x270FA2498](v2, 0);
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  void *v12;
  uint64_t (*v13)(char *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint32_t v25;
  os_log_type_t v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint32_t v42;
  os_log_type_t v43;
  NSObject *log;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v66;
  NSObject *oslog;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint8_t *buf;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint32_t v85;
  os_log_type_t v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  uint64_t v91 = (void *)v0[182];
  double v90 = (void *)v0[181];
  v0[70] = v0;
  BOOL v92 = v0[73];
  swift_bridgeObjectRetain();
  v0[72] = v92;

  int v93 = filterUniqueDoseEvents(doseEvents:)(v92);
  v0[186] = v93;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v0[72] = v93;
  swift_bridgeObjectRelease();
  id v1 = type metadata accessor for HKMedicationExposableDoseEvent();
  uint64_t v94 = MEMORY[0x2611C8A30](v93, v1);
  swift_bridgeObjectRelease();
  if (!v94)
  {
    uint64_t v2 = *(void *)(v89 + 1360);
    uint64_t v84 = *(void *)(v89 + 1256);
    char v82 = *(void *)(v89 + 1264);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v83 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v2, v83, v84);
    swift_endAccess();
    int v87 = Logger.logObject.getter();
    int v86 = static os_log_type_t.debug.getter();
    *(void *)(v89 + 1208) = 2;
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    int v85 = *(_DWORD *)(v89 + 1920);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v88 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v87, v86))
    {
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v77 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v79 = createStorage<A>(capacity:type:)(0);
      uint64_t v80 = createStorage<A>(capacity:type:)(0);
      *(void *)(v89 + 1216) = buf;
      *(void *)(v89 + 1224) = v79;
      *(void *)(v89 + 1232) = v80;
      serialize(_:at:)(0, (unsigned char **)(v89 + 1216));
      serialize(_:at:)(0, (unsigned char **)(v89 + 1216));
      *(void *)(v89 + 1240) = v88;
      char v81 = (void *)swift_task_alloc();
      v81[2] = v89 + 1216;
      v81[3] = v89 + 1224;
      v81[4] = v89 + 1232;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v87, v86, "No medications found for today.", buf, v85);
      destroyStorage<A>(_:count:)(v79, 0, v77);
      destroyStorage<A>(_:count:)(v80, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    uint64_t v73 = *(void (**)(uint64_t, uint64_t))(v89 + 1464);
    uint64_t v74 = *(void *)(v89 + 1440);
    uint64_t v72 = *(void *)(v89 + 1416);
    uint32_t v70 = *(void *)(v89 + 1360);
    char v71 = *(void *)(v89 + 1256);
    uint64_t v69 = *(void *)(v89 + 1264);

    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v70, v71);
    type metadata accessor for LogGenericMedicationsIntentResponse();
    uint64_t v75 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(104, 0);
    outlined destroy of [HKQuantityType]();
    v73(v74, v72);
    uint64_t v76 = v75;
LABEL_20:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(char *))(*(void *)(v89 + 560) + 8);
    return v13(v76);
  }
  if (v94 == 1)
  {
    uint64_t v3 = *(void *)(v89 + 1352);
    uint64_t v63 = *(void *)(v89 + 1256);
    id v61 = *(void *)(v89 + 1264);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v62 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16);
    *(void *)(v89 + 1496) = v64;
    *(void *)(v89 + 1504) = (v61 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v64(v3, v62, v63);
    swift_endAccess();
    os_log_t oslog = Logger.logObject.getter();
    uint64_t v66 = static os_log_type_t.debug.getter();
    *(void *)(v89 + 1048) = 2;
    *(void *)(v89 + 1512) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    *(void *)(v89 + 1520) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    *(void *)(v89 + 1528) = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v89 + 1908);
    *(void *)(v89 + 1536) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v68 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v66))
    {
      uint64_t v57 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v58 = createStorage<A>(capacity:type:)(0);
      uint64_t v59 = createStorage<A>(capacity:type:)(0);
      *(void *)(v89 + 1176) = v57;
      *(void *)(v89 + 1184) = v58;
      *(void *)(v89 + 1192) = v59;
      serialize(_:at:)(0, (unsigned char **)(v89 + 1176));
      serialize(_:at:)(0, (unsigned char **)(v89 + 1176));
      *(void *)(v89 + 1200) = v68;
      unint64_t v60 = (void *)swift_task_alloc();
      v60[2] = v89 + 1176;
      v60[3] = v89 + 1184;
      v60[4] = v89 + 1192;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, oslog, v66, "One dose event found for today, treat like a specific meds request.", v57, size);
      destroyStorage<A>(_:count:)(v58, 0, v56);
      destroyStorage<A>(_:count:)(v59, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v57, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    *(void *)(v89 + 1544) = 0;
    uint32_t v52 = *(void *)(v89 + 1352);
    uint64_t v53 = *(void *)(v89 + 1256);
    uint64_t v51 = *(void *)(v89 + 1264);

    int v54 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
    *(void *)(v89 + 1552) = v54;
    *(void *)(v89 + 1560) = (v51 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v54(v52, v53);
    swift_bridgeObjectRetain();
    *(void *)(v89 + 1064) = v93;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    Collection.first.getter();
    outlined destroy of [HKQuantityType]();
    uint64_t v55 = *(void *)(v89 + 1056);
    *(void *)(v89 + 1568) = v55;
    if (!v55)
    {
      id v8 = *(void *)(v89 + 1336);
      uint64_t v41 = *(void *)(v89 + 1256);
      swift_bridgeObjectRelease();
      uint64_t v40 = Logger.wellnessIntents.unsafeMutableAddressor();
      swift_beginAccess();
      v64(v8, v40, v41);
      swift_endAccess();
      log = Logger.logObject.getter();
      uint64_t v43 = static os_log_type_t.error.getter();
      *(void *)(v89 + 1072) = 2;
      UnsignedInteger<>.init<A>(_:)();
      uint64_t v42 = *(_DWORD *)(v89 + 1912);
      uint64_t v45 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(log, v43))
      {
        uint64_t v36 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        uint64_t v37 = createStorage<A>(capacity:type:)(0);
        uint64_t v38 = createStorage<A>(capacity:type:)(0);
        *(void *)(v89 + 1080) = v36;
        *(void *)(v89 + 1088) = v37;
        *(void *)(v89 + 1096) = v38;
        serialize(_:at:)(0, (unsigned char **)(v89 + 1080));
        serialize(_:at:)(0, (unsigned char **)(v89 + 1080));
        *(void *)(v89 + 1104) = v45;
        os_log_type_t v39 = (void *)swift_task_alloc();
        v39[2] = v89 + 1080;
        v39[3] = v89 + 1088;
        v39[4] = v89 + 1096;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        swift_task_dealloc();
        _os_log_impl(&dword_25DE00000, log, v43, "Supposed to be one dose event in doseEvents, but unable to unpack it - returning .failure", v36, v42);
        destroyStorage<A>(_:count:)(v37, 0, v35);
        destroyStorage<A>(_:count:)(v38, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v36, MEMORY[0x263F8E778]);
      }
      swift_bridgeObjectRelease();
      uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v89 + 1464);
      id v33 = *(void *)(v89 + 1440);
      uint64_t v31 = *(void *)(v89 + 1416);
      uint64_t v29 = *(void *)(v89 + 1336);
      unsigned int v30 = *(void *)(v89 + 1256);

      v54(v29, v30);
      type metadata accessor for LogGenericMedicationsIntentResponse();
      uint64_t v34 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);
      outlined destroy of [HKQuantityType]();
      v32(v33, v31);
      uint64_t v76 = v34;
      goto LABEL_20;
    }
    uint64_t v46 = *(void *)(v89 + 1248);
    *(void *)(v89 + 1112) = v55;
    swift_bridgeObjectRelease();
    *(void *)(v89 + 1576) = type metadata accessor for LogGenericMedicationsIntentResponse();
    uint64_t v47 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(106, 0);
    *(void *)(v89 + 1584) = v47;
    uint64_t v4 = v47;
    uint64_t v5 = v47;
    *(void *)(v89 + 1120) = v47;
    outlined init with copy of QuantityPersisting(v46 + 16, v89 + 200);
    uint64_t v48 = *(void *)(v89 + 224);
    unint64_t v49 = *(void *)(v89 + 232);
    __swift_project_boxed_opaque_existential_1((void *)(v89 + 200), v48);
    unint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 + 24) + **(int **)(v49 + 24));
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v89 + 1592) = v6;
    char *v6 = *(void *)(v89 + 560);
    v6[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
    return v50(v55, 1, v48, v49);
  }
  else
  {
    uint64_t v9 = *(void *)(v89 + 1328);
    uint64_t v24 = *(void *)(v89 + 1256);
    uint64_t v22 = *(void *)(v89 + 1264);
    swift_bridgeObjectRelease();
    id v23 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16);
    *(void *)(v89 + 1608) = v10;
    *(void *)(v89 + 1616) = (v22 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v10(v9, v23, v24);
    swift_endAccess();
    uint64_t v27 = Logger.logObject.getter();
    uint64_t v26 = static os_log_type_t.debug.getter();
    *(void *)(v89 + 640) = 2;
    *(void *)(v89 + 1624) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    *(void *)(v89 + 1632) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    *(void *)(v89 + 1640) = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v25 = *(_DWORD *)(v89 + 1876);
    *(void *)(v89 + 1648) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    char v28 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v27, v26))
    {
      uint64_t v18 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v19 = createStorage<A>(capacity:type:)(0);
      uint64_t v20 = createStorage<A>(capacity:type:)(0);
      *(void *)(v89 + 1016) = v18;
      *(void *)(v89 + 1024) = v19;
      *(void *)(v89 + 1032) = v20;
      serialize(_:at:)(0, (unsigned char **)(v89 + 1016));
      serialize(_:at:)(0, (unsigned char **)(v89 + 1016));
      *(void *)(v89 + 1040) = v28;
      id v21 = (void *)swift_task_alloc();
      v21[2] = v89 + 1016;
      v21[3] = v89 + 1024;
      void v21[4] = v89 + 1032;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v27, v26, "Multiple dose events found for today, proceed with generic meds request.", v18, v25);
      destroyStorage<A>(_:count:)(v19, 0, v17);
      destroyStorage<A>(_:count:)(v20, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v18, MEMORY[0x263F8E778]);
    }
    swift_bridgeObjectRelease();
    *(void *)(v89 + 1656) = 0;
    uint64_t v15 = *(void *)(v89 + 1328);
    uint64_t v16 = *(void *)(v89 + 1256);
    uint64_t v14 = *(void *)(v89 + 1264);

    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    *(void *)(v89 + 1664) = v11;
    *(void *)(v89 + 1672) = (v14 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v11(v15, v16);
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v89 + 1680) = v12;
    *uint64_t v12 = *(void *)(v89 + 560);
    v12[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
    return GenericMedicationsPersistor.numMedInAppToday(doseEvents:)(v93);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t (*v7)(char *);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  id v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint8_t *buf;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint32_t v25;
  os_log_type_t v26;
  NSObject *v27;
  uint64_t v28;
  void *v29;
  Class isa;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  id v1 = *(void *)(v0 + 1600);
  *(void *)(v0 + 560) = v0;
  if (v1)
  {
    uint64_t v32 = *(void **)(v38 + 1600);
    uint64_t v31 = *(void **)(v38 + 1584);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v38 + 1464);
    uint64_t v36 = *(void *)(v38 + 1440);
    uint64_t v34 = *(void *)(v38 + 1416);
    id v33 = *(void **)(v38 + 1568);
    *(void *)(v38 + 1168) = v32;
    __swift_destroy_boxed_opaque_existential_1(v38 + 200);
    type metadata accessor for MatchedMedName();
    _allocateUninitializedArray<A>(_:)();
    uint64_t v29 = v2;
    uint64_t v3 = v32;
    *uint64_t v29 = v32;
    _finalizeUninitializedArray<A>(_:)();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v31, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    v35(v36, v34);
    uint64_t v37 = *(char **)(v38 + 1584);
  }
  else
  {
    id v21 = *(void **)(v38 + 1584);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 1496);
    uint64_t v4 = *(void *)(v38 + 1344);
    id v23 = *(void *)(v38 + 1256);

    __swift_destroy_boxed_opaque_existential_1(v38 + 200);
    uint64_t v22 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v24(v4, v22, v23);
    swift_endAccess();
    uint64_t v27 = Logger.logObject.getter();
    uint64_t v26 = static os_log_type_t.error.getter();
    *(void *)(v38 + 1128) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v25 = *(_DWORD *)(v38 + 1916);
    char v28 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v27, v26))
    {
      uint64_t v5 = *(void *)(v38 + 1544);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v18 = createStorage<A>(capacity:type:)(0);
      uint64_t v19 = createStorage<A>(capacity:type:)(0);
      *(void *)(v38 + 1136) = buf;
      *(void *)(v38 + 1144) = v18;
      *(void *)(v38 + 1152) = v19;
      serialize(_:at:)(0, (unsigned char **)(v38 + 1136));
      serialize(_:at:)(0, (unsigned char **)(v38 + 1136));
      *(void *)(v38 + 1160) = v28;
      uint64_t v20 = (void *)swift_task_alloc();
      v20[2] = v38 + 1136;
      v20[3] = v38 + 1144;
      v20[4] = v38 + 1152;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v5) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v27, v26, "GenericMedicationsPersistor: attempt to buildMatchedMed failed, returning .failure.", buf, v25);
      destroyStorage<A>(_:count:)(v18, 0, v16);
      destroyStorage<A>(_:count:)(v19, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v38 + 1552);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v38 + 1464);
    uint64_t v14 = *(void *)(v38 + 1440);
    uint64_t v12 = *(void *)(v38 + 1416);
    id v8 = *(void *)(v38 + 1344);
    uint64_t v9 = *(void *)(v38 + 1256);
    uint64_t v11 = *(id *)(v38 + 1568);

    v10(v8, v9);
    uint64_t v15 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    outlined destroy of [HKQuantityType]();
    v13(v14, v12);
    uint64_t v37 = v15;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(char *))(*(void *)(v38 + 560) + 8);
  return v7(v37);
}

{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  char v30;
  uint64_t (*v31)(char *);
  uint64_t v32;
  void *v33;
  uint64_t v34;
  Class v35;
  id v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, uint64_t);
  uint32_t v58;
  os_log_type_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  Class isa;
  id v65;
  uint64_t v66;
  void (*v67)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  uint32_t v87;
  os_log_type_t v88;
  NSObject *log;
  uint64_t v90;
  Swift::Bool v91;
  Swift::Bool v92;
  uint64_t v93;
  uint64_t v94;
  void (*v95)(uint64_t, uint64_t);
  uint64_t v96;
  uint8_t *buf;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v105;
  NSObject *oslog;
  uint64_t v107;
  Swift::OpaquePointer doseEvents;
  Swift::Bool v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(uint64_t, uint64_t, uint64_t);
  uint32_t v126;
  os_log_type_t v127;
  NSObject *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;

  id v1 = *(void *)(v0 + 1688);
  uint64_t v2 = *(unsigned char *)(v0 + 1865);
  *(void *)(v0 + 560) = v0;
  *(void *)(v0 + 648) = v1;
  if ((v2 & 1) == 0 && *(uint64_t *)(v130 + 1688) > 1)
  {
    id v125 = *(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 1608);
    uint64_t v3 = *(void *)(v130 + 1320);
    uint64_t v124 = *(void *)(v130 + 1256);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v123 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v125(v3, v123, v124);
    swift_endAccess();
    uint64_t v128 = Logger.logObject.getter();
    id v127 = static os_log_type_t.debug.getter();
    *(void *)(v130 + 976) = 2;
    UnsignedInteger<>.init<A>(_:)();
    id v126 = *(_DWORD *)(v130 + 1904);
    uint64_t v129 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v128, v127))
    {
      uint64_t v4 = *(void *)(v130 + 1656);
      uint64_t v119 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v120 = createStorage<A>(capacity:type:)(0);
      uint64_t v121 = createStorage<A>(capacity:type:)(0);
      *(void *)(v130 + 984) = v119;
      *(void *)(v130 + 992) = v120;
      *(void *)(v130 + 1000) = v121;
      serialize(_:at:)(0, (unsigned char **)(v130 + 984));
      serialize(_:at:)(0, (unsigned char **)(v130 + 984));
      *(void *)(v130 + 1008) = v129;
      id v122 = (void *)swift_task_alloc();
      v122[2] = v130 + 984;
      v122[3] = v130 + 992;
      v122[4] = v130 + 1000;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v4) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v128, v127, "Multiple medications found for none (implicitly today) timeframe, returning .multipleMedsFound", v119, v126);
      destroyStorage<A>(_:count:)(v120, 0, v118);
      destroyStorage<A>(_:count:)(v121, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v119, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v112 = *(void (**)(uint64_t, uint64_t))(v130 + 1664);
    uint64_t v114 = *(void (**)(uint64_t, uint64_t))(v130 + 1464);
    uint64_t v115 = *(void *)(v130 + 1440);
    uint64_t v113 = *(void *)(v130 + 1416);
    int v110 = *(void *)(v130 + 1320);
    uint64_t v111 = *(void *)(v130 + 1256);

    v112(v110, v111);
    type metadata accessor for LogGenericMedicationsIntentResponse();
    uint64_t v116 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(103, 0);
    outlined destroy of [HKQuantityType]();
    v114(v115, v113);
    id v117 = v116;
    goto LABEL_50;
  }
  if ((*(unsigned char *)(v130 + 1867) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v130 + 1696) = v6;
    char *v6 = *(void *)(v130 + 560);
    v6[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
    uint64_t v7 = *(void *)(v130 + 1488);
    return GenericMedicationsPersistor.getConfirmationLogAsScheduled(doseEvents:)(v7);
  }
  doseEvents._rawValue = *(void **)(v130 + 1488);
  swift_bridgeObjectRelease();
  uint32_t v109 = allDoseEventsAreUnlogged(doseEvents:)(doseEvents);
  swift_bridgeObjectRelease();
  if (v109)
  {
    uint64_t v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 1608);
    id v8 = *(void *)(v130 + 1312);
    Swift::String v102 = *(void *)(v130 + 1256);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v101 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v103(v8, v101, v102);
    swift_endAccess();
    os_log_t oslog = Logger.logObject.getter();
    uint64_t v105 = static os_log_type_t.debug.getter();
    *(void *)(v130 + 936) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v130 + 1900);
    unint64_t v107 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v105))
    {
      uint64_t v9 = *(void *)(v130 + 1656);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      double v96 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v98 = createStorage<A>(capacity:type:)(0);
      uint64_t v99 = createStorage<A>(capacity:type:)(0);
      *(void *)(v130 + 944) = buf;
      *(void *)(v130 + 952) = v98;
      *(void *)(v130 + 960) = v99;
      serialize(_:at:)(0, (unsigned char **)(v130 + 944));
      serialize(_:at:)(0, (unsigned char **)(v130 + 944));
      *(void *)(v130 + 968) = v107;
      uint64_t v100 = (void *)swift_task_alloc();
      v100[2] = v130 + 944;
      v100[3] = v130 + 952;
      v100[4] = v130 + 960;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v9) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, oslog, v105, "All dose events for day are unlogged, continuing to write", buf, size);
      destroyStorage<A>(_:count:)(v98, 0, v96);
      destroyStorage<A>(_:count:)(v99, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    double v95 = *(void (**)(uint64_t, uint64_t))(v130 + 1664);
    int v93 = *(void *)(v130 + 1312);
    uint64_t v94 = *(void *)(v130 + 1256);

    v95(v93, v94);
    goto LABEL_47;
  }
  BOOL v92 = allLoggedWithMixedStatus(doseEvents:)(*(Swift::OpaquePointer *)(v130 + 1488));
  swift_bridgeObjectRelease();
  if (v92)
  {
    swift_bridgeObjectRelease();
LABEL_25:
    int v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 1608);
    uint64_t v10 = *(void *)(v130 + 1304);
    int v85 = *(void *)(v130 + 1256);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v84 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v86(v10, v84, v85);
    swift_endAccess();
    log = Logger.logObject.getter();
    uint64_t v88 = static os_log_type_t.debug.getter();
    *(void *)(v130 + 800) = 2;
    UnsignedInteger<>.init<A>(_:)();
    int v87 = *(_DWORD *)(v130 + 1892);
    double v90 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(log, v88))
    {
      uint64_t v11 = *(void *)(v130 + 1656);
      uint64_t v80 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      char v81 = createStorage<A>(capacity:type:)(0);
      char v82 = createStorage<A>(capacity:type:)(0);
      *(void *)(v130 + 904) = v80;
      *(void *)(v130 + 912) = v81;
      *(void *)(v130 + 920) = v82;
      serialize(_:at:)(0, (unsigned char **)(v130 + 904));
      serialize(_:at:)(0, (unsigned char **)(v130 + 904));
      *(void *)(v130 + 928) = v90;
      uint64_t v83 = (void *)swift_task_alloc();
      v83[2] = v130 + 904;
      v83[3] = v130 + 912;
      v83[4] = v130 + 920;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v11) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, log, v88, "Calling either allLoggedWithMixedStatus or oneExistingStatusWithConflictingRequest", v80, v87);
      destroyStorage<A>(_:count:)(v81, 0, v79);
      destroyStorage<A>(_:count:)(v82, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v80, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
      uint64_t v78 = 0;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v78 = *(void *)(v130 + 1656);
    }
    *(void *)(v130 + 1720) = v78;
    uint64_t v74 = *(void (**)(uint64_t, uint64_t))(v130 + 1664);
    uint64_t v76 = *(void *)(v130 + 1488);
    uint64_t v72 = *(void *)(v130 + 1304);
    uint64_t v73 = *(void *)(v130 + 1256);

    v74(v72, v73);
    *(void *)(v130 + 1728) = type metadata accessor for LogGenericMedicationsIntentResponse();
    uint64_t v75 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(107, 0);
    *(void *)(v130 + 1736) = v75;
    uint64_t v12 = v75;
    uint64_t v13 = v75;
    *(void *)(v130 + 808) = v75;
    *(void *)(v130 + 1744) = type metadata accessor for MatchedMedName();
    *(void *)(v130 + 816) = _allocateUninitializedArray<A>(_:)();
    *(void *)(v130 + 824) = v76;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
    lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
    Collection<>.makeIterator()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    uint64_t v77 = *(void *)(v130 + 832);
    *(void *)(v130 + 1752) = v77;
    if (v77)
    {
      uint64_t v14 = *(void *)(v130 + 1248);
      *(void *)(v130 + 840) = v77;
      outlined init with copy of QuantityPersisting(v14 + 16, v130 + 160);
      uint64_t v69 = *(void *)(v130 + 184);
      uint32_t v70 = *(void *)(v130 + 192);
      __swift_project_boxed_opaque_existential_1((void *)(v130 + 160), v69);
      char v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v70 + 24) + **(int **)(v70 + 24));
      uint64_t v15 = swift_task_alloc();
      uint64_t v16 = v69;
      uint64_t v17 = v70;
      uint64_t v18 = v71;
      uint64_t v19 = (void *)v15;
      uint64_t v20 = v77;
      *(void *)(v130 + 1760) = v19;
      *uint64_t v19 = *(void *)(v130 + 560);
      v19[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
      return v18(v20, 1, v16, v17);
    }
    uint64_t v65 = *(id *)(v130 + 1736);
    uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v130 + 1464);
    uint64_t v68 = *(void *)(v130 + 1440);
    uint64_t v66 = *(void *)(v130 + 1416);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v65, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    v67(v68, v66);
    id v117 = *(char **)(v130 + 1736);
    goto LABEL_50;
  }
  uint64_t v91 = oneExistingStatusWithConflictingRequest(doseEvents:requestedStatus:)(*(Swift::OpaquePointer *)(v130 + 1488), *(unsigned char *)(v130 + 1866) & 1);
  swift_bridgeObjectRelease();
  if (v91) {
    goto LABEL_25;
  }
  swift_bridgeObjectRelease();
  unint64_t v62 = getUnloggedDoseEvents(doseEvents:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  *(void *)(v130 + 656) = v62;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  uint64_t v63 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRelease();
  if ((v63 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v34 = getUnloggedDoseEvents(doseEvents:)();
    swift_bridgeObjectRelease();
    *(void *)(v130 + 576) = v34;
    swift_bridgeObjectRelease();
LABEL_47:
    id v33 = *(void **)(*(void *)(v130 + 1248) + 8);
    *(void *)(v130 + 1832) = v33;
    char v28 = v33;
    uint64_t v32 = *(void *)(v130 + 576);
    *(void *)(v130 + 1840) = v32;
    swift_bridgeObjectRetain();
    uint64_t v29 = (void *)swift_task_alloc();
    *(void *)(v130 + 1848) = v29;
    *uint64_t v29 = *(void *)(v130 + 560);
    v29[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
    unsigned int v30 = *(unsigned char *)(v130 + 1866) & 1;
    return GenericMedicationsPersistor.writeDoseEvent(medicationController:doseEvents:medStatusTaken:)((uint64_t)v33, v32, v30);
  }
  uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v130 + 1608);
  id v21 = *(void *)(v130 + 1288);
  uint64_t v56 = *(void *)(v130 + 1256);
  swift_bridgeObjectRelease();
  uint64_t v55 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  v57(v21, v55, v56);
  swift_endAccess();
  unint64_t v60 = Logger.logObject.getter();
  uint64_t v59 = static os_log_type_t.debug.getter();
  *(void *)(v130 + 664) = 2;
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v58 = *(_DWORD *)(v130 + 1884);
  id v61 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v60, v59))
  {
    uint64_t v22 = *(void *)(v130 + 1656);
    uint64_t v51 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    unint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint32_t v52 = createStorage<A>(capacity:type:)(0);
    uint64_t v53 = createStorage<A>(capacity:type:)(0);
    *(void *)(v130 + 768) = v51;
    *(void *)(v130 + 776) = v52;
    *(void *)(v130 + 784) = v53;
    serialize(_:at:)(0, (unsigned char **)(v130 + 768));
    serialize(_:at:)(0, (unsigned char **)(v130 + 768));
    *(void *)(v130 + 792) = v61;
    int v54 = (void *)swift_task_alloc();
    v54[2] = v130 + 768;
    v54[3] = v130 + 776;
    v54[4] = v130 + 784;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    uint64_t result = Sequence.forEach(_:)();
    if (v22) {
      return result;
    }
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v60, v59, "allMedsLoggedAlready, returning code .allMedsLoggedAlready", v51, v58);
    destroyStorage<A>(_:count:)(v52, 0, v50);
    destroyStorage<A>(_:count:)(v53, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v51, MEMORY[0x263F8E778]);
    swift_bridgeObjectRelease();
    unint64_t v49 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v49 = *(void *)(v130 + 1656);
  }
  *(void *)(v130 + 1776) = v49;
  uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v130 + 1664);
  uint64_t v47 = *(void *)(v130 + 1488);
  uint64_t v43 = *(void *)(v130 + 1288);
  uint64_t v44 = *(void *)(v130 + 1256);

  v45(v43, v44);
  *(void *)(v130 + 1784) = type metadata accessor for LogGenericMedicationsIntentResponse();
  uint64_t v46 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(108, 0);
  *(void *)(v130 + 1792) = v46;
  id v23 = v46;
  uint64_t v24 = v46;
  *(void *)(v130 + 672) = v46;
  *(void *)(v130 + 1800) = type metadata accessor for MatchedMedName();
  *(void *)(v130 + 680) = _allocateUninitializedArray<A>(_:)();
  *(void *)(v130 + 688) = v47;
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  uint64_t v48 = *(void *)(v130 + 696);
  *(void *)(v130 + 1808) = v48;
  if (v48)
  {
    uint64_t v25 = *(void *)(v130 + 1248);
    *(void *)(v130 + 704) = v48;
    outlined init with copy of QuantityPersisting(v25 + 16, v130 + 120);
    uint64_t v40 = *(void *)(v130 + 144);
    uint64_t v41 = *(void *)(v130 + 152);
    __swift_project_boxed_opaque_existential_1((void *)(v130 + 120), v40);
    uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v41 + 24) + **(int **)(v41 + 24));
    uint64_t v26 = swift_task_alloc();
    uint64_t v16 = v40;
    uint64_t v17 = v41;
    uint64_t v18 = v42;
    uint64_t v27 = (void *)v26;
    uint64_t v20 = v48;
    *(void *)(v130 + 1816) = v27;
    *uint64_t v27 = *(void *)(v130 + 560);
    v27[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
    return v18(v20, 1, v16, v17);
  }
  uint64_t v36 = *(id *)(v130 + 1792);
  uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v130 + 1464);
  os_log_type_t v39 = *(void *)(v130 + 1440);
  uint64_t v37 = *(void *)(v130 + 1416);
  outlined destroy of [HKQuantityType]();
  swift_bridgeObjectRetain();
  uint64_t v35 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v36, sel_setMatchingMeds_, v35);

  outlined destroy of [HKQuantityType]();
  outlined destroy of [HKQuantityType]();
  v38(v39, v37);
  id v117 = *(char **)(v130 + 1792);
LABEL_50:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v31 = *(uint64_t (**)(char *))(*(void *)(v130 + 560) + 8);
  return v31(v117);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[183];
  uint64_t v5 = v0[180];
  uint64_t v3 = v0[177];
  v0[70] = v0;
  outlined destroy of [HKQuantityType]();
  v4(v5, v3);
  uint64_t v6 = v0[213];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(uint64_t))(v0[70] + 8);
  return v1(v6);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t result;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *);
  Class isa;
  id v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint8_t *buf;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint32_t v32;
  os_log_type_t v33;
  NSObject *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;

  id v1 = *(void *)(v0 + 1768);
  *(void *)(v0 + 560) = v0;
  if (v1)
  {
    uint64_t v36 = *(void **)(v42 + 1768);
    uint64_t v37 = *(void **)(v42 + 1752);
    *(void *)(v42 + 888) = v36;
    __swift_destroy_boxed_opaque_existential_1(v42 + 160);
    uint64_t v5 = v36;
    *(void *)(v42 + 896) = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
    Array.append(_:)();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    uint64_t v38 = *(void *)(v42 + 832);
    *(void *)(v42 + 1752) = v38;
    if (v38)
    {
      uint64_t v2 = *(void *)(v42 + 1248);
      *(void *)(v42 + 840) = v38;
      outlined init with copy of QuantityPersisting(v2 + 16, v42 + 160);
      os_log_type_t v39 = *(void *)(v42 + 184);
      uint64_t v40 = *(void *)(v42 + 192);
      __swift_project_boxed_opaque_existential_1((void *)(v42 + 160), v39);
      uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 + 24) + **(int **)(v40 + 24));
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v42 + 1760) = v3;
      void *v3 = *(void *)(v42 + 560);
      v3[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
      return v41(v38, 1, v39, v40);
    }
    uint64_t v10 = *(id *)(v42 + 1736);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v42 + 1464);
    uint64_t v13 = *(void *)(v42 + 1440);
    uint64_t v11 = *(void *)(v42 + 1416);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    v12(v13, v11);
    uint64_t v22 = *(char **)(v42 + 1736);
  }
  else
  {
    char v28 = *(id *)(v42 + 1736);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 1608);
    uint64_t v6 = *(void *)(v42 + 1296);
    unsigned int v30 = *(void *)(v42 + 1256);

    __swift_destroy_boxed_opaque_existential_1(v42 + 160);
    uint64_t v29 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v31(v6, v29, v30);
    swift_endAccess();
    uint64_t v34 = Logger.logObject.getter();
    id v33 = static os_log_type_t.error.getter();
    *(void *)(v42 + 848) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v32 = *(_DWORD *)(v42 + 1896);
    uint64_t v35 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v34, v33))
    {
      uint64_t v7 = *(void *)(v42 + 1720);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      id v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v25 = createStorage<A>(capacity:type:)(0);
      uint64_t v26 = createStorage<A>(capacity:type:)(0);
      *(void *)(v42 + 856) = buf;
      *(void *)(v42 + 864) = v25;
      *(void *)(v42 + 872) = v26;
      serialize(_:at:)(0, (unsigned char **)(v42 + 856));
      serialize(_:at:)(0, (unsigned char **)(v42 + 856));
      *(void *)(v42 + 880) = v35;
      uint64_t v27 = (void *)swift_task_alloc();
      v27[2] = v42 + 856;
      v27[3] = v42 + 864;
      v27[4] = v42 + 872;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v7) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v34, v33, "Couldn't create MatchedMedName from doseEvent, returning .failure.", buf, v32);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v42 + 1664);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v42 + 1464);
    uint64_t v20 = *(void *)(v42 + 1440);
    uint64_t v18 = *(void *)(v42 + 1416);
    uint64_t v14 = *(void *)(v42 + 1296);
    uint64_t v15 = *(void *)(v42 + 1256);
    uint64_t v17 = *(id *)(v42 + 1752);

    v16(v14, v15);
    id v21 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();

    outlined destroy of [HKQuantityType]();
    v19(v20, v18);
    uint64_t v22 = v21;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v8 = *(uint64_t (**)(char *))(*(void *)(v42 + 560) + 8);
  return v8(v22);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t result;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *);
  Class isa;
  id v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  id v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint8_t *buf;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint32_t v32;
  os_log_type_t v33;
  NSObject *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;

  id v1 = *(void *)(v0 + 1824);
  *(void *)(v0 + 560) = v0;
  if (v1)
  {
    uint64_t v36 = *(void **)(v42 + 1824);
    uint64_t v37 = *(void **)(v42 + 1808);
    *(void *)(v42 + 752) = v36;
    __swift_destroy_boxed_opaque_existential_1(v42 + 120);
    uint64_t v5 = v36;
    *(void *)(v42 + 760) = v36;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
    Array.append(_:)();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
    IndexingIterator.next()();
    uint64_t v38 = *(void *)(v42 + 696);
    *(void *)(v42 + 1808) = v38;
    if (v38)
    {
      uint64_t v2 = *(void *)(v42 + 1248);
      *(void *)(v42 + 704) = v38;
      outlined init with copy of QuantityPersisting(v2 + 16, v42 + 120);
      os_log_type_t v39 = *(void *)(v42 + 144);
      uint64_t v40 = *(void *)(v42 + 152);
      __swift_project_boxed_opaque_existential_1((void *)(v42 + 120), v39);
      uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 + 24) + **(int **)(v40 + 24));
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v42 + 1816) = v3;
      void *v3 = *(void *)(v42 + 560);
      v3[1] = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
      return v41(v38, 1, v39, v40);
    }
    uint64_t v10 = *(id *)(v42 + 1792);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v42 + 1464);
    uint64_t v13 = *(void *)(v42 + 1440);
    uint64_t v11 = *(void *)(v42 + 1416);
    outlined destroy of [HKQuantityType]();
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();
    v12(v13, v11);
    uint64_t v22 = *(char **)(v42 + 1792);
  }
  else
  {
    char v28 = *(id *)(v42 + 1792);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 1608);
    uint64_t v6 = *(void *)(v42 + 1280);
    unsigned int v30 = *(void *)(v42 + 1256);

    __swift_destroy_boxed_opaque_existential_1(v42 + 120);
    uint64_t v29 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v31(v6, v29, v30);
    swift_endAccess();
    uint64_t v34 = Logger.logObject.getter();
    id v33 = static os_log_type_t.error.getter();
    *(void *)(v42 + 712) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint64_t v32 = *(_DWORD *)(v42 + 1888);
    uint64_t v35 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v34, v33))
    {
      uint64_t v7 = *(void *)(v42 + 1776);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      id v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v25 = createStorage<A>(capacity:type:)(0);
      uint64_t v26 = createStorage<A>(capacity:type:)(0);
      *(void *)(v42 + 720) = buf;
      *(void *)(v42 + 728) = v25;
      *(void *)(v42 + 736) = v26;
      serialize(_:at:)(0, (unsigned char **)(v42 + 720));
      serialize(_:at:)(0, (unsigned char **)(v42 + 720));
      *(void *)(v42 + 744) = v35;
      uint64_t v27 = (void *)swift_task_alloc();
      v27[2] = v42 + 720;
      v27[3] = v42 + 728;
      v27[4] = v42 + 736;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v7) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, v34, v33, "Couldn't create MatchedMedName from doseEvent, returning .failure.", buf, v32);
      destroyStorage<A>(_:count:)(v25, 0, v23);
      destroyStorage<A>(_:count:)(v26, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v42 + 1664);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v42 + 1464);
    uint64_t v20 = *(void *)(v42 + 1440);
    uint64_t v18 = *(void *)(v42 + 1416);
    uint64_t v14 = *(void *)(v42 + 1280);
    uint64_t v15 = *(void *)(v42 + 1256);
    uint64_t v17 = *(id *)(v42 + 1808);

    v16(v14, v15);
    id v21 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

    outlined destroy of [HKQuantityType]();
    outlined destroy of [HKQuantityType]();

    outlined destroy of [HKQuantityType]();
    v19(v20, v18);
    uint64_t v22 = v21;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v8 = *(uint64_t (**)(char *))(*(void *)(v42 + 560) + 8);
  return v8(v22);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  uint64_t v4 = (void (*)(uint64_t, uint64_t))v0[183];
  uint64_t v5 = v0[180];
  uint64_t v3 = v0[177];
  v0[70] = v0;
  outlined destroy of [HKQuantityType]();
  v4(v5, v3);
  uint64_t v6 = v0[232];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v1 = *(uint64_t (**)(uint64_t))(v0[70] + 8);
  return v1(v6);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t (*v3)(char *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 1464);
  uint64_t v16 = *(void **)(v0 + 1456);
  uint64_t v15 = *(void **)(v0 + 1448);
  uint64_t v17 = *(void *)(v0 + 1440);
  uint64_t v18 = *(void *)(v0 + 1416);
  *(void *)(v0 + 560) = v0;
  swift_willThrow();

  v19(v17, v18);
  uint64_t v20 = *(void **)(v0 + 1480);
  id v1 = *(void *)(v0 + 1272);
  id v21 = *(void *)(v0 + 1264);
  id v23 = *(void *)(v0 + 1256);
  uint64_t v2 = v20;
  *(void *)(v0 + 592) = v20;
  uint64_t v22 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v1, v22, v23);
  swift_endAccess();
  uint64_t v26 = Logger.logObject.getter();
  uint64_t v25 = static os_log_type_t.error.getter();
  *(void *)(v0 + 600) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v24 = *(unsigned int *)(v0 + 1868);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v27 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v26, v25))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 608) = buf;
    *(void *)(v14 + 616) = v11;
    *(void *)(v14 + 624) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 608));
    serialize(_:at:)(0, (unsigned char **)(v14 + 608));
    *(void *)(v14 + 632) = v27;
    uint64_t v13 = (void *)swift_task_alloc();
    void v13[2] = v14 + 608;
    v13[3] = v14 + 616;
    void v13[4] = v14 + 624;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v26, v25, "Failed fetching dose events for timeframe.", buf, v24);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v14 + 1272);
  uint64_t v7 = *(void *)(v14 + 1256);
  uint64_t v5 = *(void *)(v14 + 1264);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  type metadata accessor for LogGenericMedicationsIntentResponse();
  id v8 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(char *))(*(void *)(v14 + 560) + 8);
  return v3(v8);
}

{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t (*v3)(char *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint8_t *buf;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 1464);
  uint64_t v17 = *(void *)(v0 + 1440);
  uint64_t v15 = *(void *)(v0 + 1416);
  *(void *)(v0 + 560) = v0;
  swift_bridgeObjectRelease();
  outlined destroy of [HKQuantityType]();
  v16(v17, v15);
  uint64_t v18 = *(void **)(v0 + 1712);
  id v1 = *(void *)(v0 + 1272);
  uint64_t v19 = *(void *)(v0 + 1264);
  id v21 = *(void *)(v0 + 1256);
  uint64_t v2 = v18;
  *(void *)(v0 + 592) = v18;
  uint64_t v20 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v1, v20, v21);
  swift_endAccess();
  uint64_t v24 = Logger.logObject.getter();
  id v23 = static os_log_type_t.error.getter();
  *(void *)(v0 + 600) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v22 = *(unsigned int *)(v0 + 1868);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v25 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v24, v23))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v11 = createStorage<A>(capacity:type:)(0);
    uint64_t v12 = createStorage<A>(capacity:type:)(0);
    *(void *)(v14 + 608) = buf;
    *(void *)(v14 + 616) = v11;
    *(void *)(v14 + 624) = v12;
    serialize(_:at:)(0, (unsigned char **)(v14 + 608));
    serialize(_:at:)(0, (unsigned char **)(v14 + 608));
    *(void *)(v14 + 632) = v25;
    uint64_t v13 = (void *)swift_task_alloc();
    void v13[2] = v14 + 608;
    v13[3] = v14 + 616;
    void v13[4] = v14 + 624;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v24, v23, "Failed fetching dose events for timeframe.", buf, v22);
    destroyStorage<A>(_:count:)(v11, 0, v9);
    destroyStorage<A>(_:count:)(v12, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v14 + 1272);
  uint64_t v7 = *(void *)(v14 + 1256);
  uint64_t v5 = *(void *)(v14 + 1264);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);
  type metadata accessor for LogGenericMedicationsIntentResponse();
  id v8 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(5, 0);

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(char *))(*(void *)(v14 + 560) + 8);
  return v3(v8);
}

uint64_t GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 560) = *v1;
  *(void *)(v3 + 1600) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 560) = *v1;
  *(void *)(v3 + 1688) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:), 0);
}

{
  uint64_t v1;
  void *v2;
  uint64_t (*v3)();
  void *v5;
  uint64_t v6;

  uint64_t v5 = (void *)*v2;
  v5[70] = *v2;
  v5[213] = a1;
  v5[214] = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v3 = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:);
  }
  return MEMORY[0x270FA2498](v3, 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 560) = *v1;
  *(void *)(v3 + 1768) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 560) = *v1;
  *(void *)(v3 + 1824) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:), 0);
}

{
  uint64_t *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v4 = *v1;
  uint64_t v3 = *(void **)(*v1 + 1832);
  *(void *)(v4 + 560) = *v1;
  *(void *)(v4 + 1856) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA2498](GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:), 0);
}

uint64_t GenericMedicationsPersistor.getConfirmationLogAsScheduled(doseEvents:)(uint64_t a1)
{
  v2[28] = v1;
  v2[27] = a1;
  v2[12] = v2;
  v2[13] = 0;
  v2[14] = 0;
  v2[16] = 0;
  v2[10] = 0;
  v2[11] = 0;
  v2[19] = 0;
  v2[20] = 0;
  v2[21] = 0;
  uint64_t v3 = type metadata accessor for Logger();
  v2[29] = v3;
  v2[30] = *(void *)(v3 - 8);
  v2[31] = swift_task_alloc();
  v2[13] = a1;
  v2[14] = v1;
  return MEMORY[0x270FA2498](GenericMedicationsPersistor.getConfirmationLogAsScheduled(doseEvents:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 96) = *v1;
  *(void *)(v3 + 280) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](GenericMedicationsPersistor.getConfirmationLogAsScheduled(doseEvents:), 0);
}

uint64_t GenericMedicationsPersistor.getConfirmationLogAsScheduled(doseEvents:)()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v24 = *(void *)(v0 + 240);
  uint64_t v26 = *(void *)(v0 + 232);
  *(void *)(v0 + 96) = v0;
  uint64_t v25 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v1, v25, v26);
  swift_endAccess();
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 120) = 2;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint64_t v27 = *(unsigned int *)(v0 + 288);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v30 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v29, v28))
  {
    uint64_t v19 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v20 = createStorage<A>(capacity:type:)(0);
    uint64_t v21 = createStorage<A>(capacity:type:)(0);
    *(void *)(v23 + 184) = v19;
    *(void *)(v23 + 192) = v20;
    *(void *)(v23 + 200) = v21;
    serialize(_:at:)(0, (unsigned char **)(v23 + 184));
    serialize(_:at:)(0, (unsigned char **)(v23 + 184));
    *(void *)(v23 + 208) = v30;
    uint64_t v22 = (void *)swift_task_alloc();
    v22[2] = v23 + 184;
    v22[3] = v23 + 192;
    v22[4] = v23 + 200;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    swift_task_dealloc();
    _os_log_impl(&dword_25DE00000, v29, v28, "Tried to write dose events but confirmedLogAsScheduled is false, returning .needsConfirmLogAsScheduled", v19, v27);
    destroyStorage<A>(_:count:)(v20, 0, v18);
    destroyStorage<A>(_:count:)(v21, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](v19, MEMORY[0x263F8E778]);
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(v23 + 248);
  uint64_t v15 = *(void *)(v23 + 232);
  uint64_t v16 = *(void *)(v23 + 216);
  uint64_t v13 = *(void *)(v23 + 240);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  *(void *)(v23 + 256) = type metadata accessor for MatchedMedName();
  *(void *)(v23 + 128) = _allocateUninitializedArray<A>(_:)();
  swift_bridgeObjectRetain();
  *(void *)(v23 + 136) = v16;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKMedicationExposableDoseEvent]);
  lazy protocol witness table accessor for type [HKMedicationExposableDoseEvent] and conformance [A]();
  Collection<>.makeIterator()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  uint64_t v17 = *(void *)(v23 + 144);
  *(void *)(v23 + 264) = v17;
  if (v17)
  {
    uint64_t v2 = *(void *)(v23 + 224);
    *(void *)(v23 + 160) = v17;
    outlined init with copy of QuantityPersisting(v2 + 16, v23 + 16);
    uint64_t v10 = *(void *)(v23 + 40);
    uint64_t v11 = *(void *)(v23 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v23 + 16), v10);
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 + 24) + **(int **)(v11 + 24));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v23 + 272) = v3;
    void *v3 = *(void *)(v23 + 96);
    v3[1] = GenericMedicationsPersistor.getConfirmationLogAsScheduled(doseEvents:);
    return v12(v17, 1, v10, v11);
  }
  else
  {
    outlined destroy of [HKQuantityType]();
    type metadata accessor for LogGenericMedicationsIntentResponse();
    uint64_t v9 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
    uint64_t v5 = v9;
    uint64_t v6 = v9;
    *(void *)(v23 + 152) = v9;
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(char *))(*(void *)(v23 + 96) + 8);
    return v7(v9);
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v5;
  char *v6;
  char *v7;
  uint64_t (*v8)(char *);
  Class isa;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;

  uint64_t v1 = *(void *)(v0 + 280);
  *(void *)(v0 + 96) = v0;
  if (v1)
  {
    uint64_t v11 = *(id *)(v16 + 280);
    *(void *)(v16 + 168) = v11;
    __swift_destroy_boxed_opaque_existential_1(v16 + 16);
    uint64_t v5 = v11;
    *(void *)(v16 + 176) = v11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [MatchedMedName]);
    Array.append(_:)();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(v16 + 16);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for IndexingIterator<[HKMedicationExposableDoseEvent]>);
  IndexingIterator.next()();
  uint64_t v12 = *(void *)(v16 + 144);
  *(void *)(v16 + 264) = v12;
  if (v12)
  {
    uint64_t v2 = *(void *)(v16 + 224);
    *(void *)(v16 + 160) = v12;
    outlined init with copy of QuantityPersisting(v2 + 16, v16 + 16);
    uint64_t v13 = *(void *)(v16 + 40);
    uint64_t v14 = *(void *)(v16 + 48);
    __swift_project_boxed_opaque_existential_1((void *)(v16 + 16), v13);
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 + 24) + **(int **)(v14 + 24));
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v16 + 272) = v3;
    void *v3 = *(void *)(v16 + 96);
    v3[1] = GenericMedicationsPersistor.getConfirmationLogAsScheduled(doseEvents:);
    return v15(v12, 1, v13, v14);
  }
  else
  {
    outlined destroy of [HKQuantityType]();
    type metadata accessor for LogGenericMedicationsIntentResponse();
    uint64_t v10 = LogGenericMedicationsIntentResponse.__allocating_init(code:userActivity:)(105, 0);
    uint64_t v6 = v10;
    uint64_t v7 = v10;
    *(void *)(v16 + 152) = v10;
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_setMatchingMeds_, isa);

    outlined destroy of [HKQuantityType]();
    swift_task_dealloc();
    id v8 = *(uint64_t (**)(char *))(*(void *)(v16 + 96) + 8);
    return v8(v10);
  }
}

uint64_t protocol witness for GenericMedicationsPersisting.isLoggingAuthorized() in conformance GenericMedicationsPersistor()
{
  uint64_t v3 = v0;
  *(void *)(v0 + 16) = v0;
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v3 + 24) = v1;
  void *v1 = *(void *)(v3 + 16);
  v1[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return GenericMedicationsPersistor.isLoggingAuthorized()();
}

uint64_t protocol witness for GenericMedicationsPersisting.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:) in conformance GenericMedicationsPersistor(char a1, char a2)
{
  uint64_t v5 = v2;
  *(void *)(v2 + 16) = v2;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v3;
  void *v3 = *(void *)(v5 + 16);
  v3[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return GenericMedicationsPersistor.saveWithOverride(medStatusTaken:shouldOverwriteExistingStatuses:)(a1 & 1, a2 & 1);
}

uint64_t protocol witness for GenericMedicationsPersisting.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:) in conformance GenericMedicationsPersistor(char a1, char a2, char a3)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return GenericMedicationsPersistor.save(isTimeframeToday:medStatusTaken:confirmedLogAsScheduled:)(a1 & 1, a2 & 1, a3 & 1);
}

uint64_t sub_25DEF0278()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF02A4()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF02D0()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF02FC()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF0328()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF0354()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF0394()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF03D4()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF0414()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF0454()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF0480()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF04AC()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF04EC()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF052C()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF056C()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF05AC()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF05D8()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF0604()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF0644()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF0684()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF06C4()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF0704()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF0730()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF075C()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF0788()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF07B4()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF07F4()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF0834()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF0874()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF08B4()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF08E0()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF090C()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF094C()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF098C()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF09CC()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF0A0C()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in LogGenericMedicationsIntentHandler.handle(intent:)()
{
  uint64_t v5 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v8 = (void *)v0[2];
  uint64_t v6 = (const void *)v0[3];
  uint64_t v7 = (void *)v0[4];
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v2;
  *uint64_t v2 = *(void *)(v5 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  uint64_t v3 = async function pointer to @objc closure #1 in LogGenericMedicationsIntentHandler.handle(intent:);
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in LogGenericMedicationsIntentHandler.handle(intent:)
                                                               + v3))(v8, v6, v7);
}

uint64_t type metadata accessor for LogGenericMedicationsIntentHandler()
{
  return self;
}

uint64_t destroy for GenericMedicationsPersistor(id *a1)
{
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 2));
}

void *initializeWithCopy for GenericMedicationsPersistor(void *a1, uint64_t a2)
{
  id v6 = *(id *)a2;
  id v2 = *(id *)a2;
  *a1 = v6;
  uint64_t v7 = *(void **)(a2 + 8);
  id v3 = v7;
  a1[1] = v7;
  uint64_t v4 = *(void *)(a2 + 40);
  a1[5] = v4;
  a1[6] = *(void *)(a2 + 48);
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))((uint64_t)(a1 + 2), a2 + 16);
  return a1;
}

uint64_t assignWithCopy for GenericMedicationsPersistor(uint64_t a1, uint64_t a2)
{
  id v7 = *(id *)a2;
  id v2 = *(id *)a2;
  id v3 = *(void **)a1;
  *(void *)a1 = v7;

  uint64_t v8 = *(void **)(a2 + 8);
  id v4 = v8;
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v8;

  __swift_assign_boxed_opaque_existential_1(a1 + 16, (uint64_t *)(a2 + 16));
  return a1;
}

uint64_t __swift_assign_boxed_opaque_existential_1(uint64_t result, uint64_t *a2)
{
  uint64_t v8 = (void *)result;
  if ((uint64_t *)result != a2)
  {
    uint64_t v6 = *(void *)(result + 24);
    uint64_t v7 = a2[3];
    if (v6 == v7)
    {
      if ((*(_DWORD *)(*(void *)(v6 - 8) + 80) & 0x20000) != 0)
      {
        uint64_t v5 = *a2;
        swift_retain();
        uint64_t result = swift_release();
        *uint64_t v8 = v5;
      }
      else
      {
        return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)(v6 - 8) + 24))(result, a2);
      }
    }
    else
    {
      *(void *)(result + 24) = v7;
      *(void *)(result + 32) = a2[4];
      BOOL v4 = (*(_DWORD *)(*(void *)(v7 - 8) + 80) & 0x20000) == 0;
      if ((*(_DWORD *)(*(void *)(v6 - 8) + 80) & 0x20000) != 0)
      {
        if ((*(_DWORD *)(*(void *)(v7 - 8) + 80) & 0x20000) != 0)
        {
          uint64_t v2 = *a2;
          swift_retain();
          *uint64_t v8 = v2;
        }
        else
        {
          (*(void (**)(uint64_t, uint64_t *))(*(void *)(v7 - 8) + 16))(result, a2);
        }
        return swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t))(*(void *)(v6 - 8) + 32))(v10, result);
        if (v4)
        {
          (*(void (**)(void *, uint64_t *))(*(void *)(v7 - 8) + 16))(v8, a2);
        }
        else
        {
          uint64_t v3 = *a2;
          swift_retain();
          *uint64_t v8 = v3;
        }
        return (*(uint64_t (**)(unsigned char *))(*(void *)(v6 - 8) + 8))(v10);
      }
    }
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy56_8(void *a1, const void *a2)
{
}

uint64_t assignWithTake for GenericMedicationsPersistor(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = *a2;

  BOOL v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = a2[1];

  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  memcpy((void *)(a1 + 16), a2 + 2, 0x28uLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for GenericMedicationsPersistor(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 56))
    {
      int v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      int v3 = -1;
      if (!HIDWORD(*(void *)a1)) {
        int v3 = *(void *)a1;
      }
      int v4 = v3;
    }
  }
  else
  {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GenericMedicationsPersistor(uint64_t result, unsigned int a2, unsigned int a3)
{
  BOOL v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(void *)uint64_t result = a2 + 0x80000000;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
    *(void *)(result + 40) = 0;
    *(void *)(result + 48) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 56) = 1;
      }
      else {
        __break(1u);
      }
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3) {
        *(unsigned char *)(result + 56) = 0;
      }
      else {
        __break(1u);
      }
    }
    if (a2) {
      *(void *)uint64_t result = a2 - 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GenericMedicationsPersistor()
{
  return &type metadata for GenericMedicationsPersistor;
}

uint64_t isSiriAuthorizedToAccessHealthData(store:)(uint64_t a1)
{
  v1[4] = a1;
  v1[2] = v1;
  v1[3] = 0;
  v1[3] = a1;
  return MEMORY[0x270FA2498](isSiriAuthorizedToAccessHealthData(store:), 0);
}

uint64_t isSiriAuthorizedToAccessHealthData(store:)()
{
  id v6 = (id)v0[4];
  v0[2] = v0;
  Swift::String v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("isSiriAuthorizedToAccessHealthData(store:)", 0x2AuLL, 1);
  v0[5] = v1._object;
  id v2 = v6;
  uint64_t v8 = swift_task_alloc();
  v0[6] = v8;
  *(void *)(v8 + 16) = v6;
  BOOL v3 = (void *)swift_task_alloc();
  *(void *)(v7 + 56) = v3;
  void *v3 = *(void *)(v7 + 16);
  v3[1] = isSiriAuthorizedToAccessHealthData(store:);
  uint64_t v4 = MEMORY[0x263F8D4F8];
  return MEMORY[0x270FA2318](v7 + 64, 0, 0, v1._countAndFlagsBits, v1._object, partial apply for closure #1 in isSiriAuthorizedToAccessHealthData(store:), v8, v4);
}

{
  uint64_t v0;
  void *v2;
  uint64_t v3;

  id v2 = *(void **)(*(void *)v0 + 32);
  *(void *)(*(void *)v0 + 16) = *(void *)v0;
  swift_task_dealloc();
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](isSiriAuthorizedToAccessHealthData(store:), 0);
}

{
  uint64_t v0;

  *(void *)(v0 + 16) = v0;
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 8))(*(unsigned char *)(v0 + 64) & 1);
}

void closure #1 in isSiriAuthorizedToAccessHealthData(store:)(uint64_t a1, void *a2)
{
  v3[1] = a1;
  id v14 = a2;
  uint64_t v12 = partial apply for closure #1 in closure #1 in isSiriAuthorizedToAccessHealthData(store:);
  uint64_t v24 = 0;
  id v23 = 0;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  uint64_t v7 = *(void *)(v11 - 8);
  uint64_t v8 = v11 - 8;
  uint64_t v5 = v7;
  uint64_t v6 = *(void *)(v7 + 64);
  unint64_t v4 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v11);
  uint64_t v10 = (char *)v3 - v4;
  uint64_t v24 = v2;
  id v23 = v14;
  (*(void (**)(void))(v7 + 16))();
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v13 + v9, v10, v11);
  uint64_t v21 = v12;
  uint64_t v22 = v13;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v17 = 1107296256;
  int v18 = 0;
  uint64_t v19 = thunk for @escaping @callee_guaranteed (@unowned HKSiriAuthorizationStatus, @guaranteed Error?) -> ();
  uint64_t v20 = &block_descriptor_12;
  uint64_t v15 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v14, sel_getAllHealthDataAccessForSiriWithCompletion_, v15);
  _Block_release(v15);
}

void partial apply for closure #1 in isSiriAuthorizedToAccessHealthData(store:)(uint64_t a1)
{
  closure #1 in isSiriAuthorizedToAccessHealthData(store:)(a1, *(void **)(v1 + 16));
}

void closure #1 in closure #1 in isSiriAuthorizedToAccessHealthData(store:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v113 = a1;
  uint64_t v123 = a2;
  uint64_t v114 = a3;
  unint64_t v101 = partial apply for implicit closure #10 in getPreferredUnit(for:store:);
  Swift::String v102 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
  uint64_t v103 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  uint64_t v104 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  unint64_t v107 = partial apply for implicit closure #2 in closure #1 in closure #1 in isSiriAuthorizedToAccessHealthData(store:);
  uint64_t v108 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  uint32_t v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  int v110 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v111 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
  uint64_t v147 = 0;
  uint64_t v146 = 0;
  uint64_t v145 = 0;
  uint64_t v112 = 0;
  uint32_t v133 = 0;
  uint64_t v115 = type metadata accessor for Logger();
  uint64_t v116 = *(void *)(v115 - 8);
  uint64_t v117 = v115 - 8;
  uint64_t v119 = *(void *)(v116 + 64);
  unint64_t v118 = (v119 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v3 = MEMORY[0x270FA5388](v123);
  uint64_t v120 = (char *)v38 - v118;
  unint64_t v121 = v118;
  unint64_t v4 = (void *)MEMORY[0x270FA5388](v3);
  id v122 = (char *)v38 - v121;
  uint64_t v147 = v5;
  uint64_t v146 = v4;
  uint64_t v145 = v6;
  id v7 = v4;
  if (v123)
  {
    uint64_t v100 = v123;
    uint64_t v20 = v120;
    id v62 = v123;
    uint32_t v133 = v123;
    uint64_t v60 = Logger.wellnessIntents.unsafeMutableAddressor();
    id v61 = &v132;
    uint64_t v69 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v20, v60, v115);
    swift_endAccess();
    id v21 = v62;
    uint64_t v70 = 7;
    uint64_t v68 = swift_allocObject();
    *(void *)(v68 + 16) = v62;
    default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
    swift_bridgeObjectRelease();
    uint64_t v79 = Logger.logObject.getter();
    int v80 = static os_log_type_t.error.getter();
    uint64_t v65 = &v130;
    uint64_t v130 = 12;
    unint64_t v63 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v64 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v66 = v131;
    uint64_t v67 = 17;
    uint64_t v73 = swift_allocObject();
    *(unsigned char *)(v73 + 16) = 64;
    uint64_t v74 = swift_allocObject();
    *(unsigned char *)(v74 + 16) = 8;
    uint64_t v22 = swift_allocObject();
    uint64_t v23 = v68;
    uint64_t v71 = v22;
    *(void *)(v22 + 16) = v101;
    *(void *)(v22 + 24) = v23;
    uint64_t v24 = swift_allocObject();
    uint64_t v25 = v71;
    uint64_t v72 = v24;
    *(void *)(v24 + 16) = v102;
    *(void *)(v24 + 24) = v25;
    uint64_t v26 = swift_allocObject();
    uint64_t v27 = v72;
    uint64_t v76 = v26;
    *(void *)(v26 + 16) = v103;
    *(void *)(v26 + 24) = v27;
    uint64_t v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v75 = _allocateUninitializedArray<A>(_:)();
    uint64_t v77 = v28;
    swift_retain();
    uint64_t v29 = v73;
    uint64_t v30 = v77;
    *uint64_t v77 = v104;
    v30[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v29;
    swift_retain();
    uint64_t v31 = v74;
    uint64_t v32 = v77;
    v77[2] = v105;
    v32[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v31;
    swift_retain();
    id v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v76;
    uint64_t v34 = v77;
    v77[4] = v106;
    v34[5] = v33;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v79, (os_log_type_t)v80))
    {
      uint64_t v35 = v112;
      uint64_t v53 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v54 = createStorage<A>(capacity:type:)(1);
      uint64_t v55 = createStorage<A>(capacity:type:)(0);
      uint64_t v56 = &v128;
      uint64_t v128 = v53;
      uint64_t v57 = &v127;
      uint64_t v127 = v54;
      uint64_t v58 = &v126;
      uint64_t v126 = v55;
      serialize(_:at:)(2, &v128);
      serialize(_:at:)(1, v56);
      uint64_t v124 = v104;
      uint64_t v125 = v73;
      closure #1 in osLogInternal(_:log:type:)(&v124, (uint64_t)v56, (uint64_t)v57, (uint64_t)v58);
      uint64_t v59 = v35;
      if (v35)
      {
        __break(1u);
      }
      else
      {
        uint64_t v124 = v105;
        uint64_t v125 = v74;
        closure #1 in osLogInternal(_:log:type:)(&v124, (uint64_t)&v128, (uint64_t)&v127, (uint64_t)&v126);
        uint64_t v51 = 0;
        uint64_t v124 = v106;
        uint64_t v125 = v76;
        closure #1 in osLogInternal(_:log:type:)(&v124, (uint64_t)&v128, (uint64_t)&v127, (uint64_t)&v126);
        _os_log_impl(&dword_25DE00000, v79, (os_log_type_t)v80, "🚨 Could not fetch authorization status for Health data: %@", v53, v66);
        destroyStorage<A>(_:count:)(v54, 1, v52);
        destroyStorage<A>(_:count:)(v55, 0, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v53, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v116 + 8))(v120, v115);
    unint64_t v50 = &v129;
    char v129 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
    CheckedContinuation.resume(returning:)();
  }
  else
  {
    uint64_t v8 = v122;
    uint64_t v81 = Logger.wellnessIntents.unsafeMutableAddressor();
    char v82 = &v144;
    uint64_t v88 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v8, v81, v115);
    swift_endAccess();
    uint64_t v89 = 7;
    uint64_t v90 = swift_allocObject();
    *(void *)(v90 + 16) = v113;
    uint64_t v98 = Logger.logObject.getter();
    int v99 = static os_log_type_t.debug.getter();
    int v85 = &v142;
    uint64_t v142 = 12;
    unint64_t v83 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v84 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v86 = v143;
    uint64_t v87 = 17;
    uint64_t v92 = swift_allocObject();
    *(unsigned char *)(v92 + 16) = 0;
    uint64_t v93 = swift_allocObject();
    *(unsigned char *)(v93 + 16) = 8;
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = v90;
    uint64_t v91 = v9;
    *(void *)(v9 + 16) = v107;
    *(void *)(v9 + 24) = v10;
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = v91;
    uint64_t v95 = v11;
    *(void *)(v11 + 16) = v108;
    *(void *)(v11 + 24) = v12;
    uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v94 = _allocateUninitializedArray<A>(_:)();
    double v96 = v13;
    swift_retain();
    uint64_t v14 = v92;
    uint64_t v15 = v96;
    *double v96 = v109;
    v15[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v14;
    swift_retain();
    uint64_t v16 = v93;
    int v17 = v96;
    v96[2] = v110;
    v17[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v16;
    swift_retain();
    int v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v95;
    uint64_t v19 = v96;
    v96[4] = v111;
    v19[5] = v18;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v98, (os_log_type_t)v99))
    {
      uint64_t v36 = v112;
      uint64_t v43 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v42 = 0;
      uint64_t v44 = createStorage<A>(capacity:type:)(0);
      uint64_t v45 = createStorage<A>(capacity:type:)(v42);
      uint64_t v46 = &v138;
      id v138 = v43;
      uint64_t v47 = &v137;
      uint64_t v137 = v44;
      uint64_t v48 = &v136;
      uint64_t v136 = v45;
      serialize(_:at:)(0, &v138);
      serialize(_:at:)(1, v46);
      char v134 = v109;
      uint64_t v135 = v92;
      closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)v46, (uint64_t)v47, (uint64_t)v48);
      uint64_t v49 = v36;
      if (v36)
      {
        __break(1u);
      }
      else
      {
        char v134 = v110;
        uint64_t v135 = v93;
        closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v138, (uint64_t)&v137, (uint64_t)&v136);
        uint64_t v40 = 0;
        char v134 = v111;
        uint64_t v135 = v95;
        closure #1 in osLogInternal(_:log:type:)(&v134, (uint64_t)&v138, (uint64_t)&v137, (uint64_t)&v136);
        _os_log_impl(&dword_25DE00000, v98, (os_log_type_t)v99, "Siri authorization status to access Health data is: %ld", v43, v86);
        uint64_t v39 = 0;
        destroyStorage<A>(_:count:)(v44, 0, v41);
        destroyStorage<A>(_:count:)(v45, v39, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v43, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v116 + 8))(v122, v115);
    v38[2] = &v141;
    uint64_t v141 = v113;
    v38[0] = &v140;
    uint64_t v140 = 1;
    v38[1] = type metadata accessor for HKSiriAuthorizationStatus();
    lazy protocol witness table accessor for type HKSiriAuthorizationStatus and conformance HKSiriAuthorizationStatus();
    char v37 = == infix<A>(_:_:)();
    v38[3] = &v139;
    char v139 = v37 & 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
    CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_25DEF293C()
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>)
                 - 8);
  (*(void (**)(unint64_t))(v2 + 8))(v0 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)));
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in isSiriAuthorizedToAccessHealthData(store:)(uint64_t a1, void *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Bool, Never>);
  uint64_t v4 = v2
     + ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80));
  closure #1 in closure #1 in isSiriAuthorizedToAccessHealthData(store:)(a1, a2, v4);
}

void implicit closure #2 in closure #1 in closure #1 in isSiriAuthorizedToAccessHealthData(store:)()
{
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned HKSiriAuthorizationStatus, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  id v3 = a3;
  if (a3) {
    uint64_t v5 = a3;
  }
  else {
    uint64_t v5 = 0;
  }
  v7(a2);

  return swift_release();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_25DEF2BBC()
{
  return swift_deallocObject();
}

void partial apply for implicit closure #2 in closure #1 in closure #1 in isSiriAuthorizedToAccessHealthData(store:)()
{
}

uint64_t sub_25DEF2BF0()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF2C1C()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF2C48()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF2C88()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type HKSiriAuthorizationStatus and conformance HKSiriAuthorizationStatus()
{
  uint64_t v2 = lazy protocol witness table cache variable for type HKSiriAuthorizationStatus and conformance HKSiriAuthorizationStatus;
  if (!lazy protocol witness table cache variable for type HKSiriAuthorizationStatus and conformance HKSiriAuthorizationStatus)
  {
    type metadata accessor for HKSiriAuthorizationStatus();
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type HKSiriAuthorizationStatus and conformance HKSiriAuthorizationStatus);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DEF2D4C()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF2D8C()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF2DB8()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF2DE4()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF2E24()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF2E64()
{
  return swift_deallocObject();
}

id GetSleepAnalysisIntent.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id GetSleepAnalysisIntent.init()()
{
  id v4 = 0;
  v3.receiver = 0;
  v3.super_class = (Class)type metadata accessor for GetSleepAnalysisIntent();
  id v2 = objc_msgSendSuper2(&v3, sel_init);
  id v0 = v2;
  id v4 = v2;

  return v2;
}

uint64_t type metadata accessor for GetSleepAnalysisIntent()
{
  return self;
}

id GetSleepAnalysisIntent.__allocating_init(coder:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id GetSleepAnalysisIntent.init(coder:)(void *a1)
{
  id v8 = 0;
  id v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for GetSleepAnalysisIntent();
  id v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    id v1 = v5;
    id v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id GetSleepAnalysisIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v11 = objc_allocWithZone(v3);
  if (a2)
  {
    uint64_t v6 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    id v7 = (void *)v6;
  }
  else
  {
    id v7 = 0;
  }
  id v5 = objc_msgSend(v11, sel_initWithIdentifier_backingStore_);

  return v5;
}

id GetSleepAnalysisIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v15 = 0;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v12 = a3;
  swift_bridgeObjectRetain();
  if (a2)
  {
    uint64_t v6 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    id v7 = (void *)v6;
  }
  else
  {
    id v7 = 0;
  }
  v11.receiver = 0;
  v11.super_class = (Class)type metadata accessor for GetSleepAnalysisIntent();
  id v5 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_backingStore_, v7, a3);

  id v3 = v5;
  id v15 = v5;

  swift_bridgeObjectRelease();
  return v5;
}

id GetSleepAnalysisIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v13 = objc_allocWithZone(v5);
  uint64_t v16 = (void *)MEMORY[0x2611C8860](a1, a2);
  int v18 = (void *)MEMORY[0x2611C8860](a3, a4);
  if (a5)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, isa);
  }
  else
  {
    id v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, 0);
  }
  id v9 = v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

id GetSleepAnalysisIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v23 = 0;
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v18 = a5;
  swift_bridgeObjectRetain();
  id v12 = (id)MEMORY[0x2611C8860](a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  id v15 = (void *)MEMORY[0x2611C8860](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a5)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v9 = isa;
  }
  else
  {
    Class v9 = 0;
  }
  v17.receiver = 0;
  v17.super_class = (Class)type metadata accessor for GetSleepAnalysisIntent();
  id v7 = objc_msgSendSuper2(&v17, sel_initWithDomain_verb_parametersByName_, v12, v15, v9);

  id v5 = v7;
  id v23 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v7;
}

id GetSleepAnalysisIntent.__deallocating_deinit()
{
  id v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetSleepAnalysisIntent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t GetSleepAnalysisIntentResponseCode.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 100:
      return 100;
    case 101:
      return 101;
    case 102:
      return 102;
    case 103:
      return 103;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GetSleepAnalysisIntentResponseCode()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GetSleepAnalysisIntentResponseCode()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GetSleepAnalysisIntentResponseCode()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GetSleepAnalysisIntentResponseCode()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetSleepAnalysisIntentResponseCode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = GetSleepAnalysisIntentResponseCode.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GetSleepAnalysisIntentResponseCode(void *a1@<X8>)
{
  GetSleepAnalysisIntentResponseCode.rawValue.getter();
  *a1 = v1;
}

uint64_t GetSleepAnalysisIntentResponse.code.getter()
{
  objc_super v2 = (uint64_t *)(v0 + OBJC_IVAR___GetSleepAnalysisIntentResponse_code);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t GetSleepAnalysisIntentResponse.code.setter(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR___GetSleepAnalysisIntentResponse_code);
  swift_beginAccess();
  void *v3 = a1;
  return swift_endAccess();
}

uint64_t (*GetSleepAnalysisIntentResponse.code.modify())()
{
  return LogQuantityIntentResponse.code.modify;
}

void key path getter for GetSleepAnalysisIntentResponse.code : GetSleepAnalysisIntentResponse(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = *a1;
  id v2 = *a1;
  *a2 = GetSleepAnalysisIntentResponse.code.getter();
}

void key path setter for GetSleepAnalysisIntentResponse.code : GetSleepAnalysisIntentResponse(uint64_t *a1, id *a2)
{
  uint64_t v4 = *a1;
  id v3 = *a2;
  id v2 = *a2;
  GetSleepAnalysisIntentResponse.code.setter(v4);
}

char *GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  id v3 = objc_allocWithZone(v2);
  return GetSleepAnalysisIntentResponse.init(code:userActivity:)(a1, a2);
}

char *GetSleepAnalysisIntentResponse.init(code:userActivity:)(uint64_t a1, void *a2)
{
  Class v9 = (char *)objc_msgSend(v10, sel_init);
  id v2 = v9;
  id v3 = v9;
  uint64_t v4 = v9;
  id v6 = &v9[OBJC_IVAR___GetSleepAnalysisIntentResponse_code];
  swift_beginAccess();
  *(void *)id v6 = a1;
  swift_endAccess();

  objc_msgSend(v9, sel_setUserActivity_, a2);
  return v9;
}

id GetSleepAnalysisIntentResponse.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id GetSleepAnalysisIntentResponse.init()()
{
  uint64_t v1 = v0;
  id v6 = v0;
  *(void *)&v0[OBJC_IVAR___GetSleepAnalysisIntentResponse_code] = 0;

  v5.receiver = v6;
  v5.super_class = (Class)type metadata accessor for GetSleepAnalysisIntentResponse();
  id v4 = objc_msgSendSuper2(&v5, sel_init);
  id v2 = v4;
  id v6 = v4;

  return v4;
}

uint64_t type metadata accessor for GetSleepAnalysisIntentResponse()
{
  return self;
}

id GetSleepAnalysisIntentResponse.__allocating_init(coder:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id GetSleepAnalysisIntentResponse.init(coder:)(void *a1)
{
  Class v9 = a1;
  id v2 = v1;
  id v10 = v1;
  *(void *)&v1[OBJC_IVAR___GetSleepAnalysisIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for GetSleepAnalysisIntentResponse();
  id v7 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);
  if (v7)
  {
    id v3 = v7;
    id v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id GetSleepAnalysisIntentResponse.__allocating_init(backingStore:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithBackingStore_, a1);

  return v4;
}

id GetSleepAnalysisIntentResponse.init(backingStore:)(void *a1)
{
  Class v9 = a1;
  id v2 = v1;
  id v10 = v1;
  *(void *)&v1[OBJC_IVAR___GetSleepAnalysisIntentResponse_code] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for GetSleepAnalysisIntentResponse();
  id v7 = objc_msgSendSuper2(&v8, sel_initWithBackingStore_, a1);
  if (v7)
  {
    id v3 = v7;
    id v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

id GetSleepAnalysisIntentResponse.__allocating_init(propertiesByName:)(uint64_t a1)
{
  id v8 = objc_allocWithZone(v1);
  if (a1)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, isa);
  }
  else
  {
    id v2 = objc_msgSend(v8, sel_initWithPropertiesByName_, 0);
  }
  id v5 = v2;

  return v5;
}

id GetSleepAnalysisIntentResponse.init(propertiesByName:)(uint64_t a1)
{
  uint64_t v11 = a1;
  id v2 = v1;
  id v12 = v1;
  *(void *)&v1[OBJC_IVAR___GetSleepAnalysisIntentResponse_code] = 0;

  swift_bridgeObjectRetain();
  if (a1)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v8 = isa;
  }
  else
  {
    Class v8 = 0;
  }
  v10.receiver = v12;
  v10.super_class = (Class)type metadata accessor for GetSleepAnalysisIntentResponse();
  id v6 = objc_msgSendSuper2(&v10, sel_initWithPropertiesByName_, v8);

  if (v6)
  {
    id v3 = v6;
    id v12 = v6;
    swift_bridgeObjectRelease();

    return v6;
  }
  else
  {

    swift_bridgeObjectRelease();
    return 0;
  }
}

id GetSleepAnalysisIntentResponse.__deallocating_deinit()
{
  id v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetSleepAnalysisIntentResponse();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t base witness table accessor for Equatable in GetSleepAnalysisIntentResponseCode()
{
  return lazy protocol witness table accessor for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode();
}

unint64_t lazy protocol witness table accessor for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode()
{
  uint64_t v2 = lazy protocol witness table cache variable for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode;
  if (!lazy protocol witness table cache variable for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode;
  if (!lazy protocol witness table cache variable for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode)
  {
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type GetSleepAnalysisIntentResponseCode and conformance GetSleepAnalysisIntentResponseCode);
    return WitnessTable;
  }
  return v2;
}

void sub_25DEF476C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_25DEF4784(uint64_t *a1, id *a2)
{
}

ValueMetadata *type metadata accessor for GetSleepAnalysisIntentResponseCode()
{
  return &type metadata for GetSleepAnalysisIntentResponseCode;
}

id GetSleepAnalysisIntentHandler.__allocating_init(store:)(void *a1)
{
  id v2 = objc_allocWithZone(v1);
  return GetSleepAnalysisIntentHandler.init(store:)(a1);
}

id GetSleepAnalysisIntentHandler.init(store:)(void *a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  __dst[5] = a1;
  id v2 = v1;
  id v13 = v1;
  outlined init with copy of QuantityPersisting?(a1, v11);
  if (v11[3])
  {
    outlined init with take of QuantityPersisting(v11, __dst);
  }
  else
  {
    v3.store.super.Class isa = CycleTrackingFetcher.init()().store.super.isa;
    __dst[3] = &type metadata for SleepAnalysisFetcher;
    __dst[4] = &protocol witness table for SleepAnalysisFetcher;
    __dst[0] = v3.store.super.isa;
    outlined destroy of QuantityPersisting?((uint64_t)v11);
  }
  outlined init with take of QuantityPersisting(__dst, &v7[OBJC_IVAR____TtC19SiriWellnessIntents29GetSleepAnalysisIntentHandler_store]);

  v10.receiver = v13;
  v10.super_class = ObjectType;
  id v6 = objc_msgSendSuper2(&v10, sel_init);
  id v4 = v6;
  id v13 = v6;
  outlined destroy of QuantityPersisting?((uint64_t)a1);

  return v6;
}

uint64_t GetSleepAnalysisIntentHandler.handle(intent:)(uint64_t a1)
{
  v2[28] = v1;
  v2[27] = a1;
  v2[18] = v2;
  v2[19] = 0;
  v2[20] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  v2[31] = v3;
  v2[32] = *(void *)(v3 - 8);
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Logger();
  v2[36] = v4;
  v2[37] = *(void *)(v4 - 8);
  v2[38] = swift_task_alloc();
  v2[39] = swift_task_alloc();
  v2[19] = a1;
  v2[20] = v1;
  return MEMORY[0x270FA2498](GetSleepAnalysisIntentHandler.handle(intent:), 0);
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *v1;
  *(void *)(v3 + 144) = *v1;
  *(void *)(v3 + 408) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](GetSleepAnalysisIntentHandler.handle(intent:), 0);
}

uint64_t GetSleepAnalysisIntentHandler.handle(intent:)()
{
  uint64_t v38 = v0;
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v20 = *(void *)(v0 + 296);
  uint64_t v22 = *(void *)(v0 + 288);
  id v23 = *(id *)(v0 + 216);
  *(void *)(v0 + 144) = v0;
  uint64_t v21 = Logger.wellnessIntents.unsafeMutableAddressor();
  swift_beginAccess();
  id v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
  *(void *)(v0 + 320) = v2;
  *(void *)(v0 + 328) = (v20 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v2(v1, v21, v22);
  swift_endAccess();
  id v3 = v23;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v23;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.debug.getter();
  *(void *)(v0 + 168) = 12;
  *(void *)(v0 + 336) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 344) = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  *(void *)(v0 + 352) = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v24 = *(_DWORD *)(v0 + 416);
  uint64_t v27 = swift_allocObject();
  *(unsigned char *)(v27 + 16) = 64;
  uint64_t v28 = swift_allocObject();
  *(unsigned char *)(v28 + 16) = 8;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = partial apply for implicit closure #3 in LogQuantityIntentHandler.handle(intent:);
  *(void *)(v26 + 24) = v25;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
  *(void *)(v29 + 24) = v26;
  *(void *)(v0 + 360) = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  uint64_t v30 = v4;
  swift_retain();
  *uint64_t v30 = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[1] = v27;
  swift_retain();
  v30[2] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[3] = v28;
  swift_retain();
  v30[4] = partial apply for closure #1 in OSLogArguments.append(_:);
  v30[5] = v29;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v31, v32))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v17 = createStorage<A>(capacity:type:)(1);
    uint64_t v18 = createStorage<A>(capacity:type:)(0);
    id v33 = buf;
    uint64_t v34 = v17;
    uint64_t v35 = v18;
    serialize(_:at:)(2, &v33);
    serialize(_:at:)(1, &v33);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v27;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v28;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
    uint64_t v37 = v29;
    closure #1 in osLogInternal(_:log:type:)(&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    _os_log_impl(&dword_25DE00000, v31, v32, "Handling %@", buf, v24);
    destroyStorage<A>(_:count:)(v17, 1, v15);
    destroyStorage<A>(_:count:)(v18, 0, MEMORY[0x263F8EE58] + 8);
    MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }
  v19[46] = 0;
  uint64_t v9 = v19[39];
  uint64_t v10 = v19[36];
  uint64_t v11 = v19[28];
  uint64_t v8 = v19[37];

  id v5 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v19[47] = v5;
  v19[48] = (v8 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v5(v9, v10);
  outlined init with copy of QuantityPersisting(v11 + OBJC_IVAR____TtC19SiriWellnessIntents29GetSleepAnalysisIntentHandler_store, (uint64_t)(v19 + 2));
  uint64_t v14 = v19[5];
  uint64_t v12 = v19[6];
  __swift_project_boxed_opaque_existential_1(v19 + 2, v14);
  id v13 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v12 + 8) + **(int **)(v12 + 8));
  id v6 = (void *)swift_task_alloc();
  v19[49] = v6;
  void *v6 = v19[18];
  v6[1] = GetSleepAnalysisIntentHandler.handle(intent:);
  return v13(v14, v12);
}

{
  uint64_t v0;
  unsigned int (**v1)(void, uint64_t, void);
  void (**v2)(uint64_t, uint64_t, uint64_t);
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(char *);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint8_t *buf;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint32_t size;
  os_log_type_t v22;
  NSObject *oslog;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t);
  void *v37;
  id v38;
  unsigned int (*v39)(void, uint64_t, void);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  char *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;

  uint64_t v47 = *(unsigned char *)(v0 + 424);
  *(void *)(v0 + 144) = v0;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  if ((v47 & 1) == 0)
  {
    type metadata accessor for GetSleepAnalysisIntentResponse();
    uint64_t v45 = GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(101, 0);
LABEL_22:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(char *))(*(void *)(v46 + 144) + 8);
    return v9(v45);
  }
  uint64_t v44 = objc_msgSend(*(id *)(v46 + 216), sel_start);
  if (v44)
  {
    uint64_t v41 = *(void *)(v46 + 272);
    uint64_t v42 = *(void *)(v46 + 248);
    uint64_t v43 = *(void *)(v46 + 240);
    uint64_t v40 = *(void *)(v46 + 256);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v43, v41, v42);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v43, 0, 1, v42);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v46 + 256) + 56))(*(void *)(v46 + 240), 1, 1, *(void *)(v46 + 248));
  }
  uint64_t v1 = (unsigned int (**)(void, uint64_t, void))(*(void *)(v46 + 256) + 48);
  uint64_t v39 = *v1;
  if ((*v1)(*(void *)(v46 + 240), 1, *(void *)(v46 + 248)) == 1)
  {
    outlined destroy of Date?(*(void *)(v46 + 240));
LABEL_16:
    uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 320);
    uint64_t v7 = *(void *)(v46 + 304);
    uint64_t v19 = *(void *)(v46 + 288);
    uint64_t v18 = Logger.wellnessIntents.unsafeMutableAddressor();
    swift_beginAccess();
    v20(v7, v18, v19);
    swift_endAccess();
    os_log_t oslog = Logger.logObject.getter();
    uint64_t v22 = static os_log_type_t.error.getter();
    *(void *)(v46 + 176) = 2;
    UnsignedInteger<>.init<A>(_:)();
    uint32_t size = *(_DWORD *)(v46 + 420);
    uint32_t v24 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(oslog, v22))
    {
      uint64_t v8 = *(void *)(v46 + 368);
      buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      id v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v15 = createStorage<A>(capacity:type:)(0);
      uint64_t v16 = createStorage<A>(capacity:type:)(0);
      *(void *)(v46 + 184) = buf;
      *(void *)(v46 + 192) = v15;
      *(void *)(v46 + 200) = v16;
      serialize(_:at:)(0, (unsigned char **)(v46 + 184));
      serialize(_:at:)(0, (unsigned char **)(v46 + 184));
      *(void *)(v46 + 208) = v24;
      uint64_t v17 = (void *)swift_task_alloc();
      v17[2] = v46 + 184;
      v17[3] = v46 + 192;
      v17[4] = v46 + 200;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      uint64_t result = Sequence.forEach(_:)();
      if (v8) {
        return result;
      }
      swift_task_dealloc();
      _os_log_impl(&dword_25DE00000, oslog, v22, "Must provide a start and end Date for querying sleep", buf, size);
      destroyStorage<A>(_:count:)(v15, 0, v13);
      destroyStorage<A>(_:count:)(v16, 0, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](buf, MEMORY[0x263F8E778]);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v46 + 376);
    uint64_t v10 = *(void *)(v46 + 304);
    uint64_t v11 = *(void *)(v46 + 288);

    v12(v10, v11);
    type metadata accessor for GetSleepAnalysisIntentResponse();
    uint64_t v45 = GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(5, 0);
    goto LABEL_22;
  }
  uint64_t v37 = *(void **)(v46 + 216);
  id v2 = (void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 + 256) + 32);
  uint64_t v36 = *v2;
  (*v2)(*(void *)(v46 + 280), *(void *)(v46 + 240), *(void *)(v46 + 248));
  uint64_t v38 = objc_msgSend(v37, sel_end);
  if (v38)
  {
    os_log_type_t v32 = *(void *)(v46 + 272);
    uint64_t v34 = *(void *)(v46 + 248);
    uint64_t v35 = *(void *)(v46 + 232);
    id v33 = *(void *)(v46 + 256);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();
    v36(v35, v32, v34);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v34);
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v46 + 256) + 56))(*(void *)(v46 + 232), 1, 1, *(void *)(v46 + 248));
  }
  if (v39(*(void *)(v46 + 232), 1, *(void *)(v46 + 248)) == 1)
  {
    uint64_t v31 = *(void *)(v46 + 280);
    uint64_t v30 = *(void *)(v46 + 248);
    uint64_t v29 = *(void *)(v46 + 256);
    outlined destroy of Date?(*(void *)(v46 + 232));
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v31, v30);
    goto LABEL_16;
  }
  uint64_t v25 = *(void *)(v46 + 224);
  v36(*(void *)(v46 + 264), *(void *)(v46 + 232), *(void *)(v46 + 248));
  outlined init with copy of QuantityPersisting(v25 + OBJC_IVAR____TtC19SiriWellnessIntents29GetSleepAnalysisIntentHandler_store, v46 + 56);
  uint64_t v26 = *(void *)(v46 + 80);
  uint64_t v27 = *(void *)(v46 + 88);
  __swift_project_boxed_opaque_existential_1((void *)(v46 + 56), v26);
  uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 + 16) + **(int **)(v27 + 16));
  id v3 = (void *)swift_task_alloc();
  *(void *)(v46 + 400) = v3;
  void *v3 = *(void *)(v46 + 144);
  v3[1] = GetSleepAnalysisIntentHandler.handle(intent:);
  uint64_t v4 = *(void *)(v46 + 280);
  id v5 = *(void *)(v46 + 264);
  return v28(v4, v5, v26, v27);
}

{
  void *v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  id v5 = v0[35];
  uint64_t v4 = v0[33];
  id v3 = v0[32];
  id v6 = v0[31];
  v0[18] = v0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 7));
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(v4, v6);
  v7(v5, v6);
  uint64_t v8 = v0[51];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0[18] + 8);
  return v1(v8);
}

uint64_t GetSleepAnalysisIntentHandler.handle(intent:)(char a1)
{
  uint64_t v3 = *v1;
  *(void *)(v3 + 144) = *v1;
  *(unsigned char *)(v3 + 424) = a1;
  swift_task_dealloc();
  return MEMORY[0x270FA2498](GetSleepAnalysisIntentHandler.handle(intent:), 0);
}

uint64_t sub_25DEF6030()
{
  return swift_deallocObject();
}

uint64_t @objc closure #1 in GetSleepAnalysisIntentHandler.handle(intent:)(void *a1, const void *a2, void *a3)
{
  v3[4] = a3;
  v3[3] = a1;
  void v3[2] = v3;
  id v5 = a1;
  v3[5] = _Block_copy(a2);
  id v6 = a3;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v10 + 48) = v7;
  void *v7 = *(void *)(v10 + 16);
  v7[1] = @objc closure #1 in LogQuantityIntentHandler.handle(intent:);
  return GetSleepAnalysisIntentHandler.handle(intent:)((uint64_t)a1);
}

id GetSleepAnalysisIntentHandler.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t GetSleepAnalysisIntentHandler.init()()
{
  if (!"SiriWellnessIntents.GetSleepAnalysisIntentHandler")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  uint64_t result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"SiriWellnessIntents.GetSleepAnalysisIntentHandler", 49, (unint64_t)"init()", 6, 2, (unint64_t)"SiriWellnessIntents/GetSleepAnalysisIntentHandler.swift", 55, 2, v1, 0xFuLL, 0x14uLL);
  __break(1u);
  return result;
}

id GetSleepAnalysisIntentHandler.__deallocating_deinit()
{
  uint64_t v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id SleepAnalysisFetcher.morningIndexRange(for:duration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = a1;
  uint64_t v21 = a2;
  uint64_t v9 = a3;
  uint64_t v26 = 0;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  Class v23 = 0;
  id v22 = 0;
  v6[1] = 0;
  uint64_t v16 = type metadata accessor for Calendar();
  uint64_t v14 = *(void *)(v16 - 8);
  uint64_t v15 = v16 - 8;
  unint64_t v7 = (*(void *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v17 = (char *)v6 - v7;
  uint64_t v12 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v12 - 8);
  uint64_t v11 = v12 - 8;
  MEMORY[0x270FA5388](v12);
  id v13 = (char *)v6 - v3;
  uint64_t v26 = v4;
  uint64_t v25 = v21;
  uint64_t v24 = v9;
  (*(void (**)(char *))(v10 + 16))((char *)v6 - v3);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  Class v23 = isa;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v12);
  static Calendar.autoupdatingCurrent.getter();
  Class v18 = Calendar._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v16);
  id v20 = [(objc_class *)isa hk_morningIndexWithCalendar:v18];

  id v22 = v20;
  return v20;
}

Swift::Double __swiftcall SleepAnalysisFetcher.roundToMinute(_:)(Swift::Double a1)
{
  Swift::Double v6 = a1;
  uint64_t v10 = v1;
  double v21 = 0.0;
  uint64_t v20 = 0;
  uint64_t v15 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v13 = *(void *)(v15 - 8);
  uint64_t v14 = v15 - 8;
  uint64_t v8 = *(void *)(v13 + 64);
  unint64_t v7 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v15);
  uint64_t v16 = (char *)&v4 - v7;
  unint64_t v9 = v7;
  double v2 = MEMORY[0x270FA5388]((char *)&v4 - v7);
  uint64_t v12 = (char *)&v4 - v9;
  double v21 = v2;
  uint64_t v20 = v10;
  double v11 = v2 / 60.0;
  uint64_t v17 = (_DWORD *)MEMORY[0x263F8E210];
  (*(void (**)(void))(v13 + 104))();
  double v19 = v11;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v12, v15);
  int v18 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v16, v15);
  if (v18 == *v17)
  {
    double v19 = round(v11);
    goto LABEL_15;
  }
  if (v18 == *MEMORY[0x263F8E208])
  {
    double v19 = rint(v11);
    goto LABEL_15;
  }
  if (v18 == *MEMORY[0x263F8E218])
  {
LABEL_12:
    double v19 = ceil(v11);
    goto LABEL_15;
  }
  if (v18 == *MEMORY[0x263F8E220])
  {
LABEL_14:
    double v19 = floor(v11);
    goto LABEL_15;
  }
  if (v18 == *MEMORY[0x263F8E1F8])
  {
    double v19 = trunc(v11);
    goto LABEL_15;
  }
  if (v18 == *MEMORY[0x263F8E200])
  {
    if ((Double.sign.getter() & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_14;
  }
  Double._roundSlowPath(_:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v15);
LABEL_15:
  double v5 = v19;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v15);
  return v5 * 60.0;
}

uint64_t SleepAnalysisFetcher.query(start:end:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[12] = a3;
  v3[11] = a2;
  v3[10] = a1;
  v3[4] = v3;
  v3[5] = 0;
  v3[6] = 0;
  v3[7] = 0;
  v3[8] = 0;
  void v3[2] = 0;
  v3[3] = 0;
  uint64_t v4 = type metadata accessor for Calendar();
  v3[13] = v4;
  v3[14] = *(void *)(v4 - 8);
  v3[15] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DateComponents();
  v3[16] = v5;
  v3[17] = *(void *)(v5 - 8);
  v3[18] = swift_task_alloc();
  v3[5] = a1;
  v3[6] = a2;
  v3[7] = a3;
  return MEMORY[0x270FA2498](SleepAnalysisFetcher.query(start:end:), 0);
}

uint64_t SleepAnalysisFetcher.query(start:end:)()
{
  uint64_t v31 = v0[18];
  uint64_t v30 = v0[17];
  uint64_t v32 = v0[16];
  uint64_t v28 = v0[15];
  uint64_t v27 = v0[14];
  uint64_t v29 = v0[13];
  v0[4] = v0;
  static Calendar.current.getter();
  uint64_t v26 = type metadata accessor for Calendar.Component();
  _allocateUninitializedArray<A>(_:)();
  (*(void (**)(uint64_t, void))(*(void *)(v26 - 8) + 104))(v1, *MEMORY[0x263F07870]);
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type Calendar.Component and conformance Calendar.Component();
  Set.init(arrayLiteral:)();
  Calendar.dateComponents(_:from:to:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v29);
  uint64_t v33 = DateComponents.day.getter();
  unsigned int v34 = v2;
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v32);
  unint64_t v9 = (void *)v33;
  uint64_t v10 = v34;
  if (v34) {
    uint64_t v35 = 0;
  }
  else {
    uint64_t v35 = v33;
  }
  uint64_t v24 = v35 + 1;
  if (__OFADD__(v35, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = v25[12];
    id v22 = (id)v12;
    uint64_t v13 = v25[10];
    v25[8] = v24;
    id v20 = SleepAnalysisFetcher.morningIndexRange(for:duration:)(v13, v24, v12);
    uint64_t v21 = v14;
    v25[2] = v20;
    v25[3] = v14;
    Swift::String v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("query(start:end:)", 0x11uLL, 1);
    v25[19] = v15._object;
    id v16 = v22;
    Class v23 = (void *)swift_task_alloc();
    v25[20] = v23;
    v23[2] = v20;
    v23[3] = v21;
    v23[4] = v22;
    uint64_t v17 = (void *)swift_task_alloc();
    v25[21] = v17;
    uint64_t SleepAnalysisIntentResponse = type metadata accessor for GetSleepAnalysisIntentResponse();
    uint64_t v3 = 0;
    uint64_t countAndFlagsBits = v15._countAndFlagsBits;
    object = v15._object;
    Swift::Double v6 = partial apply for closure #1 in SleepAnalysisFetcher.query(start:end:);
    unint64_t v7 = v23;
    uint64_t v8 = SleepAnalysisIntentResponse;
    void *v17 = v25[4];
    v17[1] = SleepAnalysisFetcher.query(start:end:);
    unint64_t v9 = v25 + 9;
    uint64_t v10 = 0;
  }
  return MEMORY[0x270FA2318](v9, v10, v3, countAndFlagsBits, object, v6, v7, v8);
}

{
  uint64_t v0;
  void *v2;
  uint64_t v3;

  unsigned int v2 = *(void **)(*(void *)v0 + 96);
  *(void *)(*(void *)v0 + 32) = *(void *)v0;
  swift_task_dealloc();
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  return MEMORY[0x270FA2498](SleepAnalysisFetcher.query(start:end:), 0);
}

{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t v4;

  *(void *)(v0 + 32) = v0;
  uint64_t v3 = *(void *)(v0 + 72);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(*(void *)(v0 + 32) + 8);
  return v1(v3);
}

void closure #1 in SleepAnalysisFetcher.query(start:end:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v23 = a1;
  uint64_t v37 = a2;
  uint64_t v32 = a3;
  id v38 = a4;
  uint64_t v20 = 0;
  uint64_t v35 = partial apply for closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:);
  uint64_t v45 = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  uint64_t v42 = 0;
  id v40 = 0;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>);
  uint64_t v26 = *(void *)(v30 - 8);
  uint64_t v27 = v30 - 8;
  uint64_t v24 = v26;
  uint64_t v25 = *(void *)(v26 + 64);
  unint64_t v19 = (v25 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](0);
  uint64_t v29 = (char *)&v18 - v19;
  uint64_t v45 = v4;
  uint64_t v43 = v5;
  uint64_t v44 = v6;
  uint64_t v42 = v7;
  unint64_t v22 = type metadata accessor for HKSleepDaySummaryQuery();
  uint64_t v33 = 0;
  type metadata accessor for HKSleepDaySummaryQueryOptions();
  uint64_t v8 = _allocateUninitializedArray<A>(_:)();
  *unint64_t v9 = 2;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v21 = v8;
  lazy protocol witness table accessor for type HKSleepDaySummaryQueryOptions and conformance HKSleepDaySummaryQueryOptions();
  SetAlgebra<>.init(arrayLiteral:)();
  uint64_t v34 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, v23, v30);
  id v10 = v38;
  unint64_t v28 = (*(unsigned __int8 *)(v24 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  unint64_t v31 = (v28 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v36 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v26 + 32))(v36 + v28, v29, v30);
  uint64_t v11 = v32;
  uint64_t v12 = v33;
  uint64_t v13 = v34;
  uint64_t v14 = (uint64_t)v35;
  uint64_t v15 = v36;
  uint64_t v16 = v37;
  *(void *)(v36 + v31) = v38;
  id v39 = HKSleepDaySummaryQuery.__allocating_init(morningIndexRange:ascending:limit:options:resultsHandler:)(v16, v11, 1, v12, v13, v14, v15);
  id v40 = v39;
  id v17 = v38;
  objc_msgSend(v38, sel_executeQuery_, v39);
}

void closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v302 = a1;
  uint64_t v305 = a2;
  int v318 = a3;
  uint64_t v303 = a4;
  uint64_t v304 = a5;
  uint64_t v297 = 0;
  uint64_t v269 = partial apply for implicit closure #5 in HealthKitPersistor.save(quantityIdentifier:value:units:);
  uint64_t v270 = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
  uint64_t v271 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v272 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v273 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v274 = partial apply for implicit closure #2 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:);
  uint64_t v275 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  uint64_t v276 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  int v277 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v278 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
  uint64_t v279 = partial apply for implicit closure #2 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:);
  uint64_t v280 = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
  uint64_t v281 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v282 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
  uint64_t v283 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
  uint64_t v284 = closure #1 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:);
  uint64_t v285 = closure #2 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:);
  uint64_t v286 = (void (*)(char *, char *))closure #3 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:);
  uint64_t v287 = implicit closure #4 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:);
  uint64_t v288 = (void (*)(char *, char *))closure #4 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:);
  v289 = implicit closure #4 in HKHealthStore.computeStatistics(queryDateRange:samples:unit:);
  uint64_t v290 = partial apply for closure #1 in osLogInternal(_:log:type:);
  uint64_t v386 = 0;
  uint64_t v385 = 0;
  uint64_t v384 = 0;
  uint64_t v383 = 0;
  uint64_t v382 = 0;
  uint64_t v291 = 0;
  uint64_t v373 = 0;
  uint64_t v358 = 0;
  uint64_t v356 = 0;
  id v355 = 0;
  v354 = 0;
  Swift::Double v351 = 0.0;
  Swift::Double v346 = 0.0;
  uint64_t v328 = 0;
  uint64_t v292 = type metadata accessor for DateInterval();
  uint64_t v293 = *(void *)(v292 - 8);
  uint64_t v294 = v292 - 8;
  unint64_t v295 = (*(void *)(v293 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v292);
  uint64_t v296 = (char *)v81 - v295;
  unint64_t v298 = (*(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?)
                                - 8)
                    + 64)
        + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v297);
  uint64_t v299 = (char *)v81 - v298;
  unint64_t v300 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v6);
  uint64_t v301 = (char *)v81 - v300;
  uint64_t v306 = type metadata accessor for Logger();
  uint64_t v307 = *(void *)(v306 - 8);
  uint64_t v308 = v306 - 8;
  uint64_t v314 = *(void *)(v307 + 64);
  unint64_t v309 = (v314 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v318);
  uint64_t v310 = (char *)v81 - v309;
  unint64_t v311 = (v314 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v7);
  uint64_t v312 = (char *)v81 - v311;
  unint64_t v313 = (v314 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v8);
  uint64_t v315 = (char *)v81 - v313;
  unint64_t v316 = (v314 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x270FA5388](v9);
  v317 = (char *)v81 - v316;
  uint64_t v386 = v10;
  uint64_t v385 = v11;
  uint64_t v384 = v12;
  uint64_t v383 = v13;
  uint64_t v382 = v14;
  id v15 = v12;
  if (v318)
  {
    uint64_t v268 = v318;
    uint64_t v16 = v317;
    id v249 = v318;
    uint64_t v328 = v318;
    uint64_t v247 = Logger.wellnessIntents.unsafeMutableAddressor();
    uint64_t v248 = &v327;
    uint64_t v255 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v307 + 16))(v16, v247, v306);
    swift_endAccess();
    id v17 = v249;
    uint64_t v256 = 7;
    uint64_t v257 = swift_allocObject();
    *(void *)(v257 + 16) = v249;
    uint64_t v265 = Logger.logObject.getter();
    int v266 = static os_log_type_t.error.getter();
    unsigned int v252 = &v325;
    uint64_t v325 = 12;
    unint64_t v250 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v251 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v253 = v326;
    uint64_t v254 = 17;
    uint64_t v259 = swift_allocObject();
    *(unsigned char *)(v259 + 16) = 32;
    uint64_t v260 = swift_allocObject();
    *(unsigned char *)(v260 + 16) = 8;
    uint64_t v18 = swift_allocObject();
    uint64_t v19 = v257;
    uint64_t v258 = v18;
    *(void *)(v18 + 16) = v269;
    *(void *)(v18 + 24) = v19;
    uint64_t v20 = swift_allocObject();
    uint64_t v21 = v258;
    uint64_t v262 = v20;
    *(void *)(v20 + 16) = v270;
    *(void *)(v20 + 24) = v21;
    uint64_t v264 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v261 = _allocateUninitializedArray<A>(_:)();
    uint64_t v263 = v22;
    swift_retain();
    uint64_t v23 = v259;
    uint64_t v24 = v263;
    *uint64_t v263 = v271;
    v24[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v23;
    swift_retain();
    uint64_t v25 = v260;
    uint64_t v26 = v263;
    v263[2] = v272;
    v26[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v25;
    swift_retain();
    uint64_t v27 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v262;
    unint64_t v28 = v263;
    v263[4] = v273;
    v28[5] = v27;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v265, (os_log_type_t)v266))
    {
      uint64_t v29 = v291;
      uint64_t v240 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v239 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v241 = createStorage<A>(capacity:type:)(0);
      uint64_t v242 = createStorage<A>(capacity:type:)(1);
      uint64_t v243 = &v323;
      uint64_t v323 = v240;
      NSMeasurement v244 = &v322;
      uint64_t v322 = v241;
      NSMeasurement v245 = &v321;
      uint64_t v321 = v242;
      serialize(_:at:)(2, &v323);
      serialize(_:at:)(1, v243);
      uint64_t v319 = v271;
      uint64_t v320 = v259;
      closure #1 in osLogInternal(_:log:type:)(&v319, (uint64_t)v243, (uint64_t)v244, (uint64_t)v245);
      uint64_t v246 = v29;
      if (v29)
      {
        __break(1u);
      }
      else
      {
        uint64_t v319 = v272;
        uint64_t v320 = v260;
        closure #1 in osLogInternal(_:log:type:)(&v319, (uint64_t)&v323, (uint64_t)&v322, (uint64_t)&v321);
        uint64_t v237 = 0;
        uint64_t v319 = v273;
        uint64_t v320 = v262;
        closure #1 in osLogInternal(_:log:type:)(&v319, (uint64_t)&v323, (uint64_t)&v322, (uint64_t)&v321);
        _os_log_impl(&dword_25DE00000, v265, (os_log_type_t)v266, "Error executing sleep query: %s", v240, v253);
        destroyStorage<A>(_:count:)(v241, 0, v239);
        destroyStorage<A>(_:count:)(v242, 1, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v240, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v307 + 8))(v317, v306);
    uint64_t v235 = 0;
    type metadata accessor for GetSleepAnalysisIntentResponse();
    uint64_t v30 = GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(5, v235);
    uint64_t v236 = &v324;
    v324 = v30;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>);
    CheckedContinuation.resume(returning:)();

    return;
  }
  swift_bridgeObjectRetain();
  if (!v305)
  {
    unint64_t v31 = v315;
    uint64_t v226 = Logger.wellnessIntents.unsafeMutableAddressor();
    uint64_t v227 = &v381;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v307 + 16))(v31, v226, v306);
    swift_endAccess();
    uint64_t v233 = Logger.logObject.getter();
    int v232 = static os_log_type_t.error.getter();
    uint64_t v230 = &v379;
    uint64_t v379 = 2;
    unint64_t v228 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v229 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v231 = v380;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v234 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v233, (os_log_type_t)v232))
    {
      uint64_t v76 = v291;
      int v85 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v84 = 0;
      uint64_t v86 = createStorage<A>(capacity:type:)(0);
      uint64_t v87 = createStorage<A>(capacity:type:)(v84);
      uint64_t v91 = &v377;
      v377 = v85;
      uint64_t v92 = &v376;
      uint64_t v376 = v86;
      uint64_t v89 = &v375;
      uint64_t v375 = v87;
      unsigned int v88 = 0;
      serialize(_:at:)(0, &v377);
      serialize(_:at:)(v88, v91);
      uint64_t v374 = v234;
      uint64_t v90 = v81;
      MEMORY[0x270FA5388](v81);
      uint64_t v77 = v92;
      uint64_t v78 = &v81[-6];
      uint64_t v93 = &v81[-6];
      v78[2] = v91;
      v78[3] = v77;
      v78[4] = v79;
      uint64_t v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v76)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_25DE00000, v233, (os_log_type_t)v232, "Could not unwrap day Summaries", v85, v231);
        uint64_t v82 = 0;
        destroyStorage<A>(_:count:)(v86, 0, v83);
        destroyStorage<A>(_:count:)(v87, v82, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v85, MEMORY[0x263F8E778]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v307 + 8))(v315, v306);
    v81[0] = 0;
    type metadata accessor for GetSleepAnalysisIntentResponse();
    int v80 = GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(5, v81[0]);
    v81[1] = &v378;
    v378 = v80;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>);
    CheckedContinuation.resume(returning:)();
    return;
  }
  uint64_t v267 = v305;
  uint64_t v221 = v305;
  uint64_t v373 = v305;
  swift_bridgeObjectRetain();
  uint64_t v224 = &v372;
  uint64_t v372 = v221;
  uint64_t v222 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [HKSleepDaySummary]);
  unint64_t v223 = lazy protocol witness table accessor for type [HKSleepDaySummary] and conformance [A]();
  int v225 = Collection.isEmpty.getter();
  outlined destroy of [HKQuantityType]();
  if (v225)
  {
    id v62 = v310;
    uint64_t v108 = Logger.wellnessIntents.unsafeMutableAddressor();
    uint32_t v109 = &v371;
    uint64_t v115 = 32;
    swift_beginAccess();
    (*(void (**)(char *, uint64_t, uint64_t))(v307 + 16))(v62, v108, v306);
    swift_endAccess();
    swift_bridgeObjectRetain();
    uint64_t v116 = 7;
    uint64_t v117 = swift_allocObject();
    *(void *)(v117 + 16) = v221;
    uint64_t v125 = Logger.logObject.getter();
    int v126 = static os_log_type_t.error.getter();
    uint64_t v112 = &v369;
    uint64_t v369 = 12;
    unint64_t v110 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v111 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    uint32_t v113 = v370;
    uint64_t v114 = 17;
    uint64_t v119 = swift_allocObject();
    *(unsigned char *)(v119 + 16) = 0;
    uint64_t v120 = swift_allocObject();
    *(unsigned char *)(v120 + 16) = 8;
    uint64_t v63 = swift_allocObject();
    uint64_t v64 = v117;
    uint64_t v118 = v63;
    *(void *)(v63 + 16) = v274;
    *(void *)(v63 + 24) = v64;
    uint64_t v65 = swift_allocObject();
    uint64_t v66 = v118;
    uint64_t v122 = v65;
    *(void *)(v65 + 16) = v275;
    *(void *)(v65 + 24) = v66;
    uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    uint64_t v121 = _allocateUninitializedArray<A>(_:)();
    uint64_t v123 = v67;
    swift_retain();
    uint64_t v68 = v119;
    uint64_t v69 = v123;
    *uint64_t v123 = v276;
    v69[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v68;
    swift_retain();
    uint64_t v70 = v120;
    uint64_t v71 = v123;
    v123[2] = v277;
    v71[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v70;
    swift_retain();
    uint64_t v72 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v122;
    uint64_t v73 = v123;
    v123[4] = v278;
    v73[5] = v72;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v125, (os_log_type_t)v126))
    {
      uint64_t v74 = v291;
      unint64_t v101 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      uint64_t v100 = 0;
      uint64_t v102 = createStorage<A>(capacity:type:)(0);
      uint64_t v103 = createStorage<A>(capacity:type:)(v100);
      uint64_t v104 = &v367;
      v367 = v101;
      uint64_t v105 = &v366;
      uint64_t v366 = v102;
      unint64_t v106 = &v365;
      uint64_t v365 = v103;
      serialize(_:at:)(0, &v367);
      serialize(_:at:)(1, v104);
      v363 = v276;
      uint64_t v364 = v119;
      closure #1 in osLogInternal(_:log:type:)(&v363, (uint64_t)v104, (uint64_t)v105, (uint64_t)v106);
      uint64_t v107 = v74;
      if (v74)
      {
        __break(1u);
      }
      else
      {
        v363 = v277;
        uint64_t v364 = v120;
        closure #1 in osLogInternal(_:log:type:)(&v363, (uint64_t)&v367, (uint64_t)&v366, (uint64_t)&v365);
        uint64_t v98 = 0;
        v363 = v278;
        uint64_t v364 = v122;
        closure #1 in osLogInternal(_:log:type:)(&v363, (uint64_t)&v367, (uint64_t)&v366, (uint64_t)&v365);
        _os_log_impl(&dword_25DE00000, v125, (os_log_type_t)v126, "No logged data found in the given date range (Day Summaries count is %ld)", v101, v113);
        uint64_t v97 = 0;
        destroyStorage<A>(_:count:)(v102, 0, v99);
        destroyStorage<A>(_:count:)(v103, v97, MEMORY[0x263F8EE58] + 8);
        MEMORY[0x2611C8D90](v101, MEMORY[0x263F8E778]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v307 + 8))(v310, v306);
    uint64_t v95 = 0;
    type metadata accessor for GetSleepAnalysisIntentResponse();
    uint64_t v75 = GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(102, v95);
    double v96 = &v368;
    v368 = v75;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>);
    CheckedContinuation.resume(returning:)();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v32 = v312;
  uint64_t v202 = Logger.wellnessIntents.unsafeMutableAddressor();
  char v203 = &v362;
  uint64_t v209 = 32;
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v307 + 16))(v32, v202, v306);
  swift_endAccess();
  swift_bridgeObjectRetain();
  uint64_t v210 = 7;
  uint64_t v211 = swift_allocObject();
  *(void *)(v211 + 16) = v221;
  uint64_t v219 = Logger.logObject.getter();
  int v220 = static os_log_type_t.debug.getter();
  uint64_t v206 = &v360;
  uint64_t v360 = 12;
  unint64_t v204 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  unint64_t v205 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  uint32_t v207 = v361;
  uint64_t v208 = 17;
  uint64_t v213 = swift_allocObject();
  *(unsigned char *)(v213 + 16) = 0;
  uint64_t v214 = swift_allocObject();
  *(unsigned char *)(v214 + 16) = 8;
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = v211;
  uint64_t v212 = v33;
  *(void *)(v33 + 16) = v279;
  *(void *)(v33 + 24) = v34;
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = v212;
  uint64_t v216 = v35;
  *(void *)(v35 + 16) = v280;
  *(void *)(v35 + 24) = v36;
  uint64_t v218 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  uint64_t v215 = _allocateUninitializedArray<A>(_:)();
  uint64_t v217 = v37;
  swift_retain();
  uint64_t v38 = v213;
  id v39 = v217;
  *uint64_t v217 = v281;
  v39[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v38;
  swift_retain();
  uint64_t v40 = v214;
  uint64_t v41 = v217;
  v217[2] = v282;
  v41[3] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v40;
  swift_retain();
  uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v216;
  uint64_t v43 = v217;
  v217[4] = v283;
  v43[5] = v42;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v219, (os_log_type_t)v220))
  {
    uint64_t v44 = v291;
    uint64_t v195 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    uint64_t v193 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    uint64_t v194 = 0;
    uint64_t v196 = createStorage<A>(capacity:type:)(0);
    uint64_t v197 = createStorage<A>(capacity:type:)(v194);
    uint64_t v198 = &v333;
    v333 = v195;
    char v199 = &v332;
    uint64_t v332 = v196;
    char v200 = &v331;
    uint64_t v331 = v197;
    serialize(_:at:)(0, &v333);
    serialize(_:at:)(1, v198);
    v329 = v281;
    uint64_t v330 = v213;
    closure #1 in osLogInternal(_:log:type:)(&v329, (uint64_t)v198, (uint64_t)v199, (uint64_t)v200);
    uint64_t v201 = v44;
    if (v44)
    {
      __break(1u);
    }
    else
    {
      v329 = v282;
      uint64_t v330 = v214;
      closure #1 in osLogInternal(_:log:type:)(&v329, (uint64_t)&v333, (uint64_t)&v332, (uint64_t)&v331);
      uint64_t v191 = 0;
      uint64_t v46 = v191;
      v329 = v283;
      uint64_t v330 = v216;
      closure #1 in osLogInternal(_:log:type:)(&v329, (uint64_t)&v333, (uint64_t)&v332, (uint64_t)&v331);
      uint64_t v190 = v46;
      _os_log_impl(&dword_25DE00000, v219, (os_log_type_t)v220, "Day Summaries: %ld", v195, v207);
      uint64_t v189 = 0;
      destroyStorage<A>(_:count:)(v196, 0, v193);
      destroyStorage<A>(_:count:)(v197, v189, MEMORY[0x263F8EE58] + 8);
      MEMORY[0x2611C8D90](v195, MEMORY[0x263F8E778]);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v192 = v190;
    }
  }
  else
  {
    uint64_t v45 = v291;
    swift_release();
    swift_release();
    swift_release();
    uint64_t v192 = v45;
  }
  uint64_t v47 = v192;

  (*(void (**)(char *, uint64_t))(v307 + 8))(v312, v306);
  swift_bridgeObjectRetain();
  uint64_t v359 = v221;
  unint64_t v186 = lazy protocol witness table accessor for type [HKSleepDaySummary] and conformance [A]();
  uint64_t v48 = _ArrayProtocol.filter(_:)();
  uint64_t v187 = v47;
  uint64_t v188 = v48;
  if (v47)
  {
    __break(1u);
    __break(1u);
LABEL_76:
    __break(1u);
    __break(1u);
    __break(1u);
    __break(1u);
    return;
  }
  uint64_t v182 = v188;
  unint64_t v181 = type metadata accessor for HKSleepDaySummary();
  uint64_t v183 = MEMORY[0x2611C8A30](v182);
  uint64_t v358 = v183;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v357 = v221;
  uint64_t v49 = _ArrayProtocol.filter(_:)();
  uint64_t v184 = 0;
  uint64_t v185 = v49;
  uint64_t v179 = v49;
  uint64_t v180 = MEMORY[0x2611C8A30]();
  uint64_t v356 = v180;
  swift_bridgeObjectRelease();
  if (v183) {
    BOOL v178 = 0;
  }
  else {
    BOOL v178 = v180 == 0;
  }
  if (v178)
  {
    uint64_t v176 = 0;
    type metadata accessor for GetSleepAnalysisIntentResponse();
    unint64_t v50 = GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(102, v176);
    uint32_t v177 = &v334;
    uint64_t v334 = v50;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>);
    CheckedContinuation.resume(returning:)();
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v51 = v184;
  id v169 = self;
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v171 = objc_msgSend(v169, sel_sleepMetricsForDaySummaries_, isa);

  id v355 = v171;
  uint64_t v172 = 0;
  type metadata accessor for GetSleepAnalysisIntentResponse();
  uint64_t v173 = GetSleepAnalysisIntentResponse.__allocating_init(code:userActivity:)(4, v172);
  v354 = v173;
  uint64_t v52 = MEMORY[0x2611C8A30](v221, v181);
  objc_msgSend(v173, sel_setDaysSummarized_, v52);
  objc_msgSend(v173, sel_setDaysWithAsleepData_, v183);
  v352[2] = v221;
  uint64_t v53 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v286, 0, v222, MEMORY[0x263F8D538], MEMORY[0x263F8E628], v223, MEMORY[0x263F8E658], v238);
  uint64_t v174 = v51;
  uint64_t v175 = v53;
  if (v51) {
    goto LABEL_76;
  }
  v352[1] = v175;
  char v166 = v352;
  v352[0] = 0;
  uint64_t v165 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  unint64_t v167 = lazy protocol witness table accessor for type [Double] and conformance [A]();
  Sequence.reduce<A>(_:_:)();
  uint64_t v168 = 0;
  outlined destroy of [HKQuantityType]();
  Swift::Double v351 = v353;
  Swift::Double v54 = SleepAnalysisFetcher.roundToMinute(_:)(v353);
  objc_msgSend(v173, sel_setTotalInBedDuration_, v54);
  uint64_t v349 = v221;
  uint64_t v55 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF(v288, 0, v222, MEMORY[0x263F8D538], MEMORY[0x263F8E628], v223, MEMORY[0x263F8E658], v238);
  uint64_t v163 = 0;
  uint64_t v164 = v55;
  uint64_t v348 = v164;
  uint64_t v347 = 0;
  Sequence.reduce<A>(_:_:)();
  outlined destroy of [HKQuantityType]();
  Swift::Double v346 = v350;
  Swift::Double v56 = SleepAnalysisFetcher.roundToMinute(_:)(v350);
  objc_msgSend(v173, sel_setTotalAsleepDuration_, v56);
  if (v180 > 0)
  {
    id v162 = objc_msgSend(v171, sel_averageInBedDuration);
    if (v162)
    {
      id v161 = v162;
      id v157 = v162;
      id v156 = objc_msgSend(self, sel_secondUnit);
      objc_msgSend(v157, sel_doubleValueForUnit_);
      double v158 = v57;

      double v159 = v158;
      int v160 = 0;
    }
    else
    {
      double v159 = 0.0;
      int v160 = 1;
    }
    double v335 = v159;
    char v336 = v160 & 1;
    if (v160) {
      double v337 = 0.0;
    }
    else {
      double v337 = v335;
    }
    objc_msgSend(v173, sel_setAverageInBedDuration_, v337);
  }
  if (v183 > 0)
  {
    id v155 = objc_msgSend(v171, sel_averageSleepDuration);
    if (v155)
    {
      id v154 = v155;
      id v150 = v155;
      id v149 = objc_msgSend(self, sel_secondUnit);
      objc_msgSend(v150, sel_doubleValueForUnit_);
      double v151 = v58;

      double v152 = v151;
      int v153 = 0;
    }
    else
    {
      double v152 = 0.0;
      int v153 = 1;
    }
    double v338 = v152;
    char v339 = v153 & 1;
    if (v153) {
      double v340 = 0.0;
    }
    else {
      double v340 = v338;
    }
    objc_msgSend(v173, sel_setAverageAsleepDuration_, v340);
  }
  swift_bridgeObjectRetain();
  uint64_t v147 = &v344;
  uint64_t v344 = v221;
  Collection.first.getter();
  outlined destroy of [HKQuantityType]();
  id v148 = v345;
  if (v345)
  {
    id v146 = v148;
    id v144 = v148;
    id v145 = objc_msgSend(v148, sel_dateInterval);
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    DateInterval.start.getter();
    (*(void (**)(char *, uint64_t))(v293 + 8))(v296, v292);
    uint64_t v60 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t))(*(void *)(v60 - 8) + 56))(v301, 0, 1);
  }
  else
  {
    uint64_t v59 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(void *)(v59 - 8) + 56))(v301, 1);
  }
  uint64_t v139 = type metadata accessor for Date();
  uint64_t v140 = *(void *)(v139 - 8);
  uint64_t v141 = v139 - 8;
  uint64_t v142 = *(unsigned int (**)(char *, uint64_t))(v140 + 48);
  uint64_t v143 = v140 + 48;
  if (v142(v301, 1) == 1)
  {
    Class v138 = 0;
  }
  else
  {
    Class v137 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v140 + 8))(v301, v139);
    Class v138 = v137;
  }
  Class v134 = v138;
  objc_msgSend(v173, sel_setSummaryStartDate_);

  swift_bridgeObjectRetain();
  uint64_t v135 = &v342;
  uint64_t v342 = v221;
  lazy protocol witness table accessor for type [HKSleepDaySummary] and conformance [A]();
  BidirectionalCollection.last.getter();
  outlined destroy of [HKQuantityType]();
  id v136 = v343;
  if (v343)
  {
    id v133 = v136;
    id v131 = v136;
    id v132 = objc_msgSend(v136, sel_dateInterval);
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();

    DateInterval.end.getter();
    (*(void (**)(char *, uint64_t))(v293 + 8))(v296, v292);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v140 + 56))(v299, 0, 1, v139);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v299, 1, 1, v139);
  }
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v142)(v299, 1, v139) == 1)
  {
    Class v130 = 0;
  }
  else
  {
    Class v129 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v140 + 8))(v299, v139);
    Class v130 = v129;
  }
  Class v127 = v130;
  objc_msgSend(v173, sel_setSummaryEndDate_);

  id v61 = v173;
  uint64_t v128 = &v341;
  uint64_t v341 = v173;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>);
  CheckedContinuation.resume(returning:)();

  swift_bridgeObjectRelease();
}

uint64_t implicit closure #2 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)(uint64_t a1)
{
  unint64_t v1 = type metadata accessor for HKSleepDaySummary();
  return MEMORY[0x2611C8A30](a1, v1);
}

BOOL closure #1 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)(id *a1)
{
  objc_msgSend(*a1, sel_sleepDuration);
  return v1 > 0.0;
}

BOOL closure #2 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)(id *a1)
{
  objc_msgSend(*a1, sel_inBedDuration);
  return v1 > 0.0;
}

id closure #3 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_inBedDuration);
  *a2 = v3;
  return result;
}

id closure #4 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_sleepDuration);
  *a2 = v3;
  return result;
}

id HKSleepDaySummaryQuery.__allocating_init(morningIndexRange:ascending:limit:options:resultsHandler:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HKSleepDaySummaryQuery.init(morningIndexRange:ascending:limit:options:resultsHandler:)(a1, a2, a3 & 1, a4, a5, a6, a7);
}

uint64_t protocol witness for SleepAnalysisFetching.isReadingAuthorized() in conformance SleepAnalysisFetcher()
{
  uint64_t v4 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v5 = *v0;
  unsigned int v2 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v2;
  *unsigned int v2 = *(void *)(v4 + 16);
  v2[1] = protocol witness for QuantityPersisting.isLoggingAuthorized(for:) in conformance HealthKitPersistor;
  return CycleTrackingFetcher.isReadingAuthorized()(v5);
}

uint64_t protocol witness for SleepAnalysisFetching.query(start:end:) in conformance SleepAnalysisFetcher(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v3;
  *(void *)(v3 + 16) = v3;
  uint64_t v8 = *v2;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v6 + 24) = v4;
  *uint64_t v4 = *(void *)(v6 + 16);
  v4[1] = protocol witness for QuantityPersisting.save(quantityIdentifier:value:units:) in conformance HealthKitPersistor;
  return SleepAnalysisFetcher.query(start:end:)(a1, a2, v8);
}

id @nonobjc HKSleepDaySummaryQuery.init(morningIndexRange:ascending:limit:options:resultsHandler:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t aBlock = MEMORY[0x263EF8330];
  int v17 = 1107296256;
  int v18 = 0;
  uint64_t v19 = thunk for @escaping @callee_guaranteed (@guaranteed HKSleepDaySummaryQuery, @guaranteed [HKSleepDaySummary]?, @guaranteed Error?) -> ();
  uint64_t v20 = &block_descriptor_13;
  uint64_t v14 = _Block_copy(&aBlock);
  id v15 = objc_msgSend(v13, sel_initWithMorningIndexRange_ascending_limit_options_resultsHandler_, a1, a2, a3 & 1, a4, a5);
  _Block_release(v14);
  swift_release();
  return v15;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed HKSleepDaySummaryQuery, @guaranteed [HKSleepDaySummary]?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v12 = *(void (**)(void *, uint64_t))(a1 + 32);
  swift_retain();
  id v4 = a2;
  id v5 = a3;
  if (a3)
  {
    type metadata accessor for HKSleepDaySummary();
    uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = v9;
  }
  else
  {
    uint64_t v10 = 0;
  }
  id v6 = a4;
  if (a4) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = 0;
  }
  v12(a2, v10);

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_25DEF9A60()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF9A8C()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF9AB8()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF9AF8()
{
  return swift_deallocObject();
}

uint64_t sub_25DEF9B38()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in GetSleepAnalysisIntentHandler.handle(intent:)()
{
  uint64_t v5 = v1;
  *(void *)(v1 + 16) = v1;
  uint64_t v8 = (void *)v0[2];
  id v6 = (const void *)v0[3];
  id v7 = (void *)v0[4];
  unsigned int v2 = (void *)swift_task_alloc();
  *(void *)(v5 + 24) = v2;
  *unsigned int v2 = *(void *)(v5 + 16);
  v2[1] = _sIeghH_IeAgH_TRTQ0_;
  uint64_t v3 = async function pointer to @objc closure #1 in GetSleepAnalysisIntentHandler.handle(intent:);
  return ((uint64_t (*)(void *, const void *, void *))((char *)&async function pointer to @objc closure #1 in GetSleepAnalysisIntentHandler.handle(intent:)
                                                               + v3))(v8, v6, v7);
}

void partial apply for closure #1 in SleepAnalysisFetcher.query(start:end:)(uint64_t a1)
{
  closure #1 in SleepAnalysisFetcher.query(start:end:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t type metadata accessor for GetSleepAnalysisIntentHandler()
{
  return self;
}

ValueMetadata *type metadata accessor for SleepAnalysisFetcher()
{
  return &type metadata for SleepAnalysisFetcher;
}

unint64_t type metadata accessor for HKSleepDaySummaryQuery()
{
  uint64_t v2 = lazy cache variable for type metadata for HKSleepDaySummaryQuery;
  if (!lazy cache variable for type metadata for HKSleepDaySummaryQuery)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKSleepDaySummaryQuery);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_25DEF9D28()
{
  uint64_t v3 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>)
                 - 8);
  unint64_t v1 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v4 = (v1 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t))(v3 + 8))(v0 + v1);

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<GetSleepAnalysisIntentResponse, Never>)
                 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v5 = *(void *)(v3 + ((v4 + *(void *)(v9 + 64) + 7) & 0xFFFFFFFFFFFFFFF8));
  closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)(a1, a2, a3, v3 + v4, v5);
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  swift_retain();
  uint64_t result = a1;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

unint64_t type metadata accessor for HKSleepDaySummary()
{
  uint64_t v2 = lazy cache variable for type metadata for HKSleepDaySummary;
  if (!lazy cache variable for type metadata for HKSleepDaySummary)
  {
    self;
    unint64_t ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKSleepDaySummary);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [HKSleepDaySummary] and conformance [A]()
{
  uint64_t v2 = lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKSleepDaySummary]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKSleepDaySummary]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

{
  unint64_t WitnessTable;
  uint64_t v2;

  uint64_t v2 = lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [HKSleepDaySummary]);
    unint64_t WitnessTable = swift_getWitnessTable();
    atomic_store(WitnessTable, (unint64_t *)&lazy protocol witness table cache variable for type [HKSleepDaySummary] and conformance [A]);
    return WitnessTable;
  }
  return v2;
}

uint64_t sub_25DEFA028()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)()
{
  return implicit closure #2 in closure #1 in closure #1 in SleepAnalysisFetcher.query(start:end:)(*(void *)(v0 + 16));
}

uint64_t sub_25DEFA070()
{
  return swift_deallocObject();
}

uint64_t sub_25DEFA09C()
{
  return swift_deallocObject();
}

uint64_t sub_25DEFA0C8()
{
  return swift_deallocObject();
}

uint64_t sub_25DEFA108()
{
  return swift_deallocObject();
}

uint64_t sub_25DEFA148()
{
  return swift_deallocObject();
}

uint64_t sub_25DEFA188()
{
  return swift_deallocObject();
}

uint64_t sub_25DEFA1B4()
{
  return swift_deallocObject();
}

uint64_t sub_25DEFA1E0()
{
  return swift_deallocObject();
}

uint64_t sub_25DEFA220()
{
  return swift_deallocObject();
}

uint64_t sub_25DEFA368()
{
  return swift_deallocObject();
}

uint64_t sub_25DEFA3A8()
{
  return swift_deallocObject();
}

uint64_t sub_25DEFA3D4()
{
  return swift_deallocObject();
}

uint64_t sub_25DEFA400()
{
  return swift_deallocObject();
}

uint64_t sub_25DEFA440()
{
  return swift_deallocObject();
}

char *GetHealthQuantityIntentResponse.__allocating_init(code:userActivity:)(uint64_t a1, void *a2)
{
  id v3 = objc_allocWithZone(v2);
  return GetHealthQuantityIntentResponse.init(code:userActivity:)(a1, a2);
}

id GetHealthQuantityIntent.__allocating_init()()
{
  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id GetHealthQuantityIntent.init()()
{
  id v4 = 0;
  v3.receiver = 0;
  v3.super_class = (Class)type metadata accessor for GetHealthQuantityIntent();
  id v2 = objc_msgSendSuper2(&v3, sel_init);
  id v0 = v2;
  id v4 = v2;

  return v2;
}

id GetHealthQuantityIntent.__allocating_init(coder:)(void *a1)
{
  id v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id GetHealthQuantityIntent.init(coder:)(void *a1)
{
  id v8 = 0;
  id v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for GetHealthQuantityIntent();
  id v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    id v1 = v5;
    id v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id GetHealthQuantityIntent.__allocating_init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v11 = objc_allocWithZone(v3);
  if (a2)
  {
    uint64_t v6 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    id v7 = (void *)v6;
  }
  else
  {
    id v7 = 0;
  }
  id v5 = objc_msgSend(v11, sel_initWithIdentifier_backingStore_);

  return v5;
}

id GetHealthQuantityIntent.init(identifier:backingStore:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v15 = 0;
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t v12 = a3;
  swift_bridgeObjectRetain();
  if (a2)
  {
    uint64_t v6 = MEMORY[0x2611C8860](a1);
    swift_bridgeObjectRelease();
    id v7 = (void *)v6;
  }
  else
  {
    id v7 = 0;
  }
  v11.receiver = 0;
  v11.super_class = (Class)type metadata accessor for GetHealthQuantityIntent();
  id v5 = objc_msgSendSuper2(&v11, sel_initWithIdentifier_backingStore_, v7, a3);

  id v3 = v5;
  id v15 = v5;

  swift_bridgeObjectRelease();
  return v5;
}

id GetHealthQuantityIntent.__allocating_init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v13 = objc_allocWithZone(v5);
  uint64_t v16 = (void *)MEMORY[0x2611C8860](a1, a2);
  int v18 = (void *)MEMORY[0x2611C8860](a3, a4);
  if (a5)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, isa);
  }
  else
  {
    id v6 = objc_msgSend(v13, sel_initWithDomain_verb_parametersByName_, v16, v18, 0);
  }
  id v9 = v6;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

id GetHealthQuantityIntent.init(domain:verb:parametersByName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v23 = 0;
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v18 = a5;
  swift_bridgeObjectRetain();
  id v12 = (id)MEMORY[0x2611C8860](a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  id v15 = (void *)MEMORY[0x2611C8860](a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if (a5)
  {
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    Class v9 = isa;
  }
  else
  {
    Class v9 = 0;
  }
  v17.receiver = 0;
  v17.super_class = (Class)type metadata accessor for GetHealthQuantityIntent();
  id v7 = objc_msgSendSuper2(&v17, sel_initWithDomain_verb_parametersByName_, v12, v15, v9);

  id v5 = v7;
  id v23 = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v7;
}

id GetHealthQuantityIntent.__deallocating_deinit()
{
  id v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GetHealthQuantityIntent();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t GetHealthQuantityIntentResponseCode.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 100:
      return 100;
    case 101:
      return 101;
    case 102:
      return 102;
    case 103:
      return 103;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance GetHealthQuantityIntentResponseCode()
{
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance GetHealthQuantityIntentResponseCode()
{
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance GetHealthQuantityIntentResponseCode()
{
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance GetHealthQuantityIntentResponseCode()
{
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance GetHealthQuantityIntentResponseCode@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = GetHealthQuantityIntentResponseCode.init(rawValue:)(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance GetHealthQuantityIntentResponseCode(void *a1@<X8>)
{
  GetHealthQuantityIntentResponseCode.rawValue.getter();
  *a1 = v1;
}

uint64_t GetHealthQuantityIntentResponse.code.getter()
{
  objc_super v2 = (uint64_t *)(v0 + OBJC_IVAR___GetHealthQuantityIntentResponse_code);
  swift_beginAccess();
  uint64_t v3 = *v2;
  swift_endAccess();
  return v3;
}