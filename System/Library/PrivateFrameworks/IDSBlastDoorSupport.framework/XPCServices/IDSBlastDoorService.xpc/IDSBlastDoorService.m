int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  char *v4;
  Swift::OpaquePointer v5;
  Swift::OpaquePointer v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void v11[2];

  sub_100002214(&qword_100090040);
  __chkstk_darwin();
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  register_for_dlsym_callbacks();
  _CFPrefsSetDirectModeEnabled();
  _CFPrefsSetReadOnly();
  sub_100077C20();
  qword_100091360 = sub_100077BF0();
  qword_100091368 = (uint64_t)&_swiftEmptyArrayStorage;
  v5._rawValue = &_swiftEmptyArrayStorage;
  sub_100077BC0(v5, 1);
  qword_100091370 = (uint64_t)&_swiftEmptyArrayStorage;
  v6._rawValue = &_swiftEmptyArrayStorage;
  sub_100077BD0(v6);
  sub_100077C70();
  sub_100002258();
  sub_100077C00();
  sub_100077D40();
  sub_1000022AC();
  sub_100077C00();
  sub_1000780A0();
  sub_100002300();
  sub_100077C00();
  sub_100077C50();
  sub_100002354();
  sub_100077C00();
  v11[1] = sub_1000635C4();
  sub_100077F40();
  sub_1000023B0();
  sub_100077C10();
  swift_bridgeObjectRelease();
  v7 = enum case for SandboxID.blastdoor(_:);
  v8 = sub_1000781A0();
  v9 = *(void *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 104))(v4, v7, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
  sub_100077BE0();
  sub_100002404((uint64_t)v4);
  return 0;
}

uint64_t sub_100002214(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_100002258()
{
  unint64_t result = qword_100090048;
  if (!qword_100090048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090048);
  }
  return result;
}

unint64_t sub_1000022AC()
{
  unint64_t result = qword_100090050;
  if (!qword_100090050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090050);
  }
  return result;
}

unint64_t sub_100002300()
{
  unint64_t result = qword_100090058;
  if (!qword_100090058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090058);
  }
  return result;
}

unint64_t sub_100002354()
{
  unint64_t result = qword_100090060;
  if (!qword_100090060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090060);
  }
  return result;
}

uint64_t variable initialization expression of IDSMadridProtocolPayload.isUPlusOneKey()
{
  return 2;
}

unint64_t sub_1000023B0()
{
  unint64_t result = qword_100090068;
  if (!qword_100090068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090068);
  }
  return result;
}

uint64_t sub_100002404(uint64_t a1)
{
  uint64_t v2 = sub_100002214(&qword_100090040);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100002464(char *a1, char *a2)
{
  return sub_10006A518(*a1, *a2);
}

Swift::Int sub_100002470()
{
  return sub_100078650();
}

uint64_t sub_100002514()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000025A0()
{
  return sub_100078650();
}

uint64_t sub_100002640@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000038C4(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_100002670(uint64_t *a1@<X8>)
{
  uint64_t v2 = 118;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 115;
      goto LABEL_3;
    case 2:
      *a1 = 112;
      a1[1] = 0xE100000000000000;
      break;
    case 3:
      *a1 = 26994;
      a1[1] = 0xE200000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE100000000000000;
      break;
  }
}

uint64_t sub_1000026D4()
{
  uint64_t result = 118;
  switch(*v0)
  {
    case 1:
      uint64_t result = 115;
      break;
    case 2:
      uint64_t result = 112;
      break;
    case 3:
      uint64_t result = 26994;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10000272C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000038C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100002754()
{
  return 0;
}

void sub_100002760(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10000276C(uint64_t a1)
{
  unint64_t v2 = sub_100002A1C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000027A8(uint64_t a1)
{
  unint64_t v2 = sub_100002A1C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSSessionReinitiateSchema.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100002214(&qword_100090070);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin();
  v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000029D8(a1, a1[3]);
  sub_100002A1C();
  sub_1000786A0();
  v8[15] = 0;
  sub_100078580();
  if (!v1)
  {
    v8[14] = 1;
    sub_100078540();
    v8[13] = 2;
    sub_100078540();
    type metadata accessor for IDSSessionReinitiateSchema();
    v8[12] = 3;
    sub_100077E70();
    sub_100002E84(&qword_100090080);
    sub_100078590();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

void *sub_1000029D8(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100002A1C()
{
  unint64_t result = qword_100090078;
  if (!qword_100090078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090078);
  }
  return result;
}

uint64_t type metadata accessor for IDSSessionReinitiateSchema()
{
  uint64_t result = qword_1000900F0;
  if (!qword_1000900F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t IDSSessionReinitiateSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v3 = sub_100077E70();
  uint64_t v21 = *(void *)(v3 - 8);
  __chkstk_darwin();
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002214(&qword_100090088);
  uint64_t v23 = *(void *)(v6 - 8);
  uint64_t v24 = v6;
  __chkstk_darwin();
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for IDSSessionReinitiateSchema();
  __chkstk_darwin();
  v11 = (uint64_t *)((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000029D8(a1, a1[3]);
  sub_100002A1C();
  v25 = v8;
  uint64_t v12 = v26;
  sub_100078690();
  if (v12) {
    return sub_100002E34((uint64_t)a1);
  }
  uint64_t v13 = (uint64_t)a1;
  v14 = v5;
  char v30 = 0;
  uint64_t v15 = v23;
  uint64_t v16 = v24;
  uint64_t *v11 = sub_100078480();
  char v29 = 1;
  v11[1] = sub_100078440();
  v11[2] = v17;
  uint64_t v26 = v17;
  char v28 = 2;
  v11[3] = sub_100078440();
  v11[4] = v18;
  char v27 = 3;
  sub_100002E84(&qword_100090090);
  v19 = v25;
  sub_100078490();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v16);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))((char *)v11 + *(int *)(v9 + 28), v14, v3);
  sub_100002EC8((uint64_t)v11, v22);
  sub_100002E34(v13);
  return sub_100002F2C((uint64_t)v11);
}

uint64_t sub_100002E34(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100002E84(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100077E70();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100002EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSSessionReinitiateSchema();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100002F2C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSSessionReinitiateSchema();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100002F88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSSessionReinitiateSchema.init(from:)(a1, a2);
}

uint64_t sub_100002FA0(void *a1)
{
  return IDSSessionReinitiateSchema.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSSessionReinitiateSchema(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v5 = a2[3];
    a1[2] = a2[2];
    a1[3] = v5;
    a1[4] = a2[4];
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    uint64_t v9 = sub_100077E70();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for IDSSessionReinitiateSchema(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_100077E70();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for IDSSessionReinitiateSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_100077E70();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

void *assignWithCopy for IDSSessionReinitiateSchema(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100077E70();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for IDSSessionReinitiateSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = sub_100077E70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for IDSSessionReinitiateSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_100077E70();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSSessionReinitiateSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000033F0);
}

uint64_t sub_1000033F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100077E70();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for IDSSessionReinitiateSchema(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000034B4);
}

uint64_t sub_1000034B4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100077E70();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_10000355C()
{
  uint64_t result = sub_100077E70();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for IDSSessionReinitiateSchema.CodingKeys(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for IDSSessionReinitiateSchema.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IDSSessionReinitiateSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100003770);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t sub_100003798(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1000037A4(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for IDSSessionReinitiateSchema.CodingKeys()
{
  return &type metadata for IDSSessionReinitiateSchema.CodingKeys;
}

unint64_t sub_1000037C0()
{
  unint64_t result = qword_100090130;
  if (!qword_100090130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090130);
  }
  return result;
}

unint64_t sub_100003818()
{
  unint64_t result = qword_100090138;
  if (!qword_100090138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090138);
  }
  return result;
}

unint64_t sub_100003870()
{
  unint64_t result = qword_100090140;
  if (!qword_100090140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090140);
  }
  return result;
}

uint64_t sub_1000038C4(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_100088DA0;
  v6._object = a2;
  unint64_t v4 = sub_100078390(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 4) {
    return 4;
  }
  else {
    return v4;
  }
}

uint64_t sub_100003910(char *a1, char *a2)
{
  return sub_10006A8B8(*a1, *a2);
}

Swift::Int sub_10000391C()
{
  return sub_100078650();
}

uint64_t sub_100003978()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000039B8()
{
  return sub_100078650();
}

uint64_t sub_100003A10@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100003E90(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_100003A40(void *a1@<X8>)
{
  *a1 = qword_10007B098[*v1];
  a1[1] = 0xE100000000000000;
}

uint64_t sub_100003A5C()
{
  return qword_10007B098[*v0];
}

uint64_t sub_100003A74@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100003E90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100003A9C(uint64_t a1)
{
  unint64_t v2 = sub_100003CEC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100003AD8(uint64_t a1)
{
  unint64_t v2 = sub_100003CEC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSSessionDeclineSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002214(&qword_100090148);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  int v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000029D8(a1, a1[3]);
  sub_100003CEC();
  sub_1000786A0();
  v11[0] = 0;
  sub_100078580();
  if (!v2)
  {
    v11[0] = 1;
    sub_100078540();
    v11[0] = 2;
    sub_100078540();
    sub_100003D40(v3 + 40, (uint64_t)v12);
    sub_100003D40((uint64_t)v12, (uint64_t)v11);
    v10[15] = 3;
    sub_100003DA8();
    sub_100078510();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100003CEC()
{
  unint64_t result = qword_100090150;
  if (!qword_100090150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090150);
  }
  return result;
}

uint64_t sub_100003D40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002214(&qword_100090158);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100003DA8()
{
  unint64_t result = qword_100090160;
  if (!qword_100090160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090160);
  }
  return result;
}

double IDSSessionDeclineSchema.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100003EDC(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100003E4C(void *a1)
{
  return IDSSessionDeclineSchema.encode(to:)(a1);
}

uint64_t sub_100003E90(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_100088E20;
  v6._object = a2;
  unint64_t v4 = sub_100078390(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 4) {
    return 4;
  }
  else {
    return v4;
  }
}

uint64_t sub_100003EDC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100002214(&qword_100090180);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin();
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_100003CEC();
  sub_100078690();
  if (v2) {
    return sub_100002E34((uint64_t)a1);
  }
  LOBYTE(v26) = 0;
  uint64_t v9 = sub_100078480();
  LOBYTE(v26) = 1;
  uint64_t v10 = sub_100078440();
  uint64_t v12 = v11;
  uint64_t v25 = v10;
  LOBYTE(v26) = 2;
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_100078440();
  uint64_t v15 = v14;
  uint64_t v23 = v13;
  char v28 = 3;
  sub_100004864();
  uint64_t v24 = v15;
  swift_bridgeObjectRetain();
  sub_100078410();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v16 = v26;
  unint64_t v17 = v27;
  swift_bridgeObjectRetain();
  uint64_t v18 = v24;
  swift_bridgeObjectRetain();
  sub_1000048B8(v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100002E34((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = sub_1000048CC(v16, v17);
  uint64_t v20 = v25;
  *a2 = v9;
  a2[1] = v20;
  uint64_t v21 = v23;
  a2[2] = v12;
  a2[3] = v21;
  a2[4] = v18;
  a2[5] = v16;
  a2[6] = v17;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IDSSessionDeclineSchema(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_100004214(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t destroy for IDSSessionDeclineSchema(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    return sub_1000042CC(v4, v3);
  }
  return result;
}

uint64_t sub_1000042CC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t initializeWithCopy for IDSSessionDeclineSchema(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = (uint64_t *)(a2 + 40);
  unint64_t v5 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v4;
  }
  else
  {
    uint64_t v6 = *v4;
    sub_100004214(*v4, v5);
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = v5;
  }
  return a1;
}

void *assignWithCopy for IDSSessionDeclineSchema(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2 + 5;
  unint64_t v5 = a2[6];
  if (a1[6] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_100004214(*v4, v5);
      uint64_t v8 = a1[5];
      unint64_t v9 = a1[6];
      a1[5] = v7;
      a1[6] = v5;
      sub_1000042CC(v8, v9);
      return a1;
    }
    sub_1000044A0((uint64_t)(a1 + 5));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)v4;
    return a1;
  }
  uint64_t v6 = *v4;
  sub_100004214(*v4, v5);
  a1[5] = v6;
  a1[6] = v5;
  return a1;
}

uint64_t sub_1000044A0(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for IDSSessionDeclineSchema(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for IDSSessionDeclineSchema(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  unint64_t v5 = (void *)(a2 + 40);
  unint64_t v6 = *(void *)(a1 + 48);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 48);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = *v5;
      *(void *)(a1 + 48) = v7;
      sub_1000042CC(v8, v6);
      return a1;
    }
    sub_1000044A0(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSSessionDeclineSchema(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSSessionDeclineSchema(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSSessionDeclineSchema()
{
  return &type metadata for IDSSessionDeclineSchema;
}

unsigned char *storeEnumTagSinglePayload for IDSSessionDeclineSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100004724);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSSessionDeclineSchema.CodingKeys()
{
  return &type metadata for IDSSessionDeclineSchema.CodingKeys;
}

unint64_t sub_100004760()
{
  unint64_t result = qword_100090168;
  if (!qword_100090168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090168);
  }
  return result;
}

unint64_t sub_1000047B8()
{
  unint64_t result = qword_100090170;
  if (!qword_100090170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090170);
  }
  return result;
}

unint64_t sub_100004810()
{
  unint64_t result = qword_100090178;
  if (!qword_100090178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090178);
  }
  return result;
}

unint64_t sub_100004864()
{
  unint64_t result = qword_100090188;
  if (!qword_100090188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090188);
  }
  return result;
}

uint64_t sub_1000048B8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100004214(a1, a2);
  }
  return a1;
}

uint64_t sub_1000048CC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1000042CC(a1, a2);
  }
  return a1;
}

ValueMetadata *type metadata accessor for SafetyMonitorMessageUnpacker()
{
  return &type metadata for SafetyMonitorMessageUnpacker;
}

uint64_t sub_1000048F0()
{
  return sub_100005208((unint64_t *)&qword_100090190, (void (*)(uint64_t))&type metadata accessor for IDSClientMessageResult);
}

uint64_t sub_100004938(uint64_t a1)
{
  uint64_t v82 = __chkstk_darwin(a1);
  uint64_t v83 = v2;
  uint64_t v78 = v3;
  uint64_t v4 = sub_100077DA0();
  uint64_t v76 = *(void *)(v4 - 8);
  uint64_t v77 = v4;
  __chkstk_darwin(v4);
  v75 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002214(&qword_1000901C0);
  __chkstk_darwin(v6 - 8);
  v81 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100002214(&qword_1000901C8);
  __chkstk_darwin(v8 - 8);
  v79 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100002214(&qword_1000901D0);
  __chkstk_darwin(v10 - 8);
  v80 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_100002214(&qword_1000901D8);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100002214(&qword_1000901E0);
  __chkstk_darwin(v15 - 8);
  unint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100077EB0();
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100077F20();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v31 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100077B80();
  swift_allocObject();
  uint64_t v25 = sub_100077B70();
  sub_100005250();
  sub_100077B60();
  if (v1) {
    return swift_release();
  }
  uint64_t v82 = (uint64_t)v17;
  uint64_t v83 = v25;
  v73 = v14;
  v74 = v24;
  uint64_t v71 = v22;
  uint64_t v72 = v21;
  memcpy(v85, v84, 0x970uLL);
  v57 = sub_100005D08(v85);
  v70 = v20;
  sub_100077EA0();
  uint64_t v68 = v85[3];
  uint64_t v69 = v85[1];
  uint64_t v62 = v85[6];
  uint64_t v63 = v85[4];
  uint64_t v66 = v85[7];
  uint64_t v67 = v85[5];
  uint64_t v64 = v85[11];
  uint64_t v65 = v85[9];
  uint64_t v60 = v85[8];
  uint64_t v61 = v85[13];
  uint64_t v55 = v85[14];
  uint64_t v56 = v85[12];
  uint64_t v58 = v85[10];
  uint64_t v59 = v85[15];
  uint64_t v53 = v85[17];
  uint64_t v54 = v85[16];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100077EC0();
  uint64_t v53 = v85[19];
  int v52 = LOBYTE(v85[20]);
  uint64_t v51 = v85[21];
  int v50 = LOBYTE(v85[22]);
  sub_100077EE0();
  uint64_t v48 = v85[26];
  uint64_t v49 = v85[25];
  swift_bridgeObjectRetain();
  sub_100077F00();
  uint64_t v47 = v85[29];
  int v46 = LOBYTE(v85[30]);
  int v44 = LOBYTE(v85[32]);
  uint64_t v45 = v85[31];
  uint64_t v43 = v85[33];
  int v42 = LOBYTE(v85[34]);
  int v40 = LOBYTE(v85[36]);
  uint64_t v41 = v85[35];
  uint64_t v39 = v85[37];
  int v38 = LOBYTE(v85[38]);
  int v36 = LOBYTE(v85[40]);
  uint64_t v37 = v85[39];
  uint64_t v35 = v85[41];
  int v34 = LOBYTE(v85[42]);
  sub_100077EF0();
  int v32 = LOBYTE(v85[46]);
  uint64_t v33 = v85[45];
  sub_100077ED0();
  uint64_t v31 = v85[49];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v27 = v74;
  sub_100077F10();
  sub_1000065F0((uint64_t)v85);
  uint64_t v28 = v71;
  uint64_t v29 = v72;
  char v30 = v75;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v75, v27, v72);
  (*(void (**)(char *, void, uint64_t))(v76 + 104))(v30, enum case for IDSClientMessageType.safetyMonitorMessage(_:), v77);
  sub_100077F30();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v27, v29);
}

uint64_t sub_1000050CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000052D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_100004938);
}

unint64_t sub_1000050F8(uint64_t a1)
{
  unint64_t result = sub_100005120();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100005120()
{
  unint64_t result = qword_100090198;
  if (!qword_100090198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090198);
  }
  return result;
}

unint64_t sub_100005174()
{
  unint64_t result = qword_1000901A0;
  if (!qword_1000901A0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000901A0);
  }
  return result;
}

unint64_t sub_1000051B4()
{
  unint64_t result = qword_1000901B0;
  if (!qword_1000901B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000901B0);
  }
  return result;
}

uint64_t sub_100005208(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100005250()
{
  unint64_t result = qword_1000901E8;
  if (!qword_1000901E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000901E8);
  }
  return result;
}

uint64_t sub_1000052A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000052D0(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_100069598);
}

uint64_t sub_1000052D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8 = sub_100078190();
  uint64_t v21 = *(void *)(v8 - 8);
  uint64_t v22 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100077F80();
  sub_100077C30();
  if ((v11 & 1) == 0) {
    return a5(a1, a2);
  }
  sub_1000782C0();
  sub_100005174();
  uint64_t v13 = (void *)sub_1000782D0();
  sub_100002214(&qword_1000901A8);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10007B0C0;
  uint64_t v23 = sub_100077F80();
  LOBYTE(v24) = 0;
  uint64_t v15 = sub_100078130();
  uint64_t v17 = v16;
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_1000051B4();
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = v17;
  sub_100077BB0();

  swift_bridgeObjectRelease();
  uint64_t v23 = 0;
  unint64_t v24 = 0xE000000000000000;
  sub_100078300(21);
  swift_bridgeObjectRelease();
  uint64_t v23 = 0xD000000000000013;
  unint64_t v24 = 0x8000000100079CB0;
  uint64_t v25 = sub_100077F80();
  v26._countAndFlagsBits = sub_1000785A0();
  sub_1000781F0(v26);
  swift_bridgeObjectRelease();
  sub_100078180();
  sub_100005208(&qword_1000901B8, (void (*)(uint64_t))&type metadata accessor for Explosion);
  uint64_t v18 = v22;
  swift_allocError();
  uint64_t v19 = v21;
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 16))(v20, v10, v18);
  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v10, v18);
}

uint64_t sub_1000055C0@<X0>(uint64_t a1@<X8>)
{
  v26[1] = a1;
  uint64_t v1 = sub_100078190();
  uint64_t v28 = *(void *)(v1 - 8);
  uint64_t v29 = v1;
  __chkstk_darwin(v1);
  unint64_t v27 = (char *)v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_100077CF0();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100077DA0();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100077F80();
  uint64_t v11 = sub_100077C30();
  if (v12)
  {
    sub_1000782C0();
    sub_100005174();
    uint64_t v16 = (void *)sub_1000782D0();
    sub_100002214(&qword_1000901A8);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_10007B0C0;
    uint64_t v30 = sub_100077F80();
    LOBYTE(v31) = 0;
    uint64_t v18 = sub_100078130();
    uint64_t v20 = v19;
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = sub_1000051B4();
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v20;
    sub_100077BB0();

    swift_bridgeObjectRelease();
    uint64_t v30 = 0;
    unint64_t v31 = 0xE000000000000000;
    sub_100078300(21);
    swift_bridgeObjectRelease();
    uint64_t v30 = 0xD000000000000013;
    unint64_t v31 = 0x8000000100079CB0;
    uint64_t v32 = sub_100077F80();
    v33._countAndFlagsBits = sub_1000785A0();
    sub_1000781F0(v33);
    swift_bridgeObjectRelease();
    uint64_t v21 = v27;
    sub_100078180();
    sub_100005208(&qword_1000901B8, (void (*)(uint64_t))&type metadata accessor for Explosion);
    uint64_t v22 = v29;
    swift_allocError();
    uint64_t v23 = v28;
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 16))(v24, v21, v22);
    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v21, v22);
  }
  else
  {
    uint64_t v13 = v11;
    uint64_t v14 = v26[2];
    if (v11 == 245)
    {
      (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for ClientMessageType.restricted(_:), v3);
      uint64_t result = sub_100077E30();
      if (!v14)
      {
        (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for IDSClientMessageType.messageTypeRestricted(_:), v7);
        return sub_100077F30();
      }
    }
    else
    {
      sub_10000A574();
      swift_allocError();
      *(void *)uint64_t v25 = v13;
      *(void *)(v25 + 8) = 0;
      *(unsigned char *)(v25 + 16) = 0;
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t sub_100005A24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100078190();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100077F80();
  uint64_t v10 = sub_100077C30();
  if ((v11 & 1) == 0) {
    return sub_100063A94(a1, a2, v10, a3);
  }
  sub_1000782C0();
  sub_100005174();
  uint64_t v13 = (void *)sub_1000782D0();
  sub_100002214(&qword_1000901A8);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_10007B0C0;
  uint64_t v20 = sub_100077F80();
  LOBYTE(v21) = 0;
  uint64_t v15 = sub_100078130();
  uint64_t v16 = v7;
  uint64_t v18 = v17;
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_1000051B4();
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = v18;
  sub_100077BB0();

  swift_bridgeObjectRelease();
  uint64_t v20 = 0;
  unint64_t v21 = 0xE000000000000000;
  sub_100078300(21);
  swift_bridgeObjectRelease();
  uint64_t v20 = 0xD000000000000013;
  unint64_t v21 = 0x8000000100079CB0;
  uint64_t v22 = sub_100077F80();
  v23._countAndFlagsBits = sub_1000785A0();
  sub_1000781F0(v23);
  swift_bridgeObjectRelease();
  sub_100078180();
  sub_100005208(&qword_1000901B8, (void (*)(uint64_t))&type metadata accessor for Explosion);
  swift_allocError();
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 16))(v19, v9, v6);
  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v9, v6);
}

char *sub_100005D08(const void *a1)
{
  uint64_t v3 = sub_100078680();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = &_swiftEmptyDictionarySingleton;
  v49[1] = &type metadata for SafetyMonitorSchema;
  uint64_t v47 = swift_allocObject();
  memcpy((void *)(v47 + 16), a1, 0x970uLL);
  sub_100007260((uint64_t)a1);
  sub_100078660();
  sub_100078670();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v8 = sub_100078340();
  swift_release();
  swift_retain();
  uint64_t v51 = v8;
  sub_100078380();
  if (v50)
  {
    int v40 = v49;
    v38[1] = (char *)&type metadata for Any + 8;
    uint64_t v39 = (void *)0x80000001000789E0;
    do
    {
      uint64_t v9 = v47;
      unint64_t v10 = v48;
      v45[0] = v47;
      v45[1] = v48;
      sub_10000A3D0(v40, v46);
      if (v10)
      {
        uint64_t v42 = v9;
        unint64_t v43 = v10;
        sub_10000A3E0((uint64_t)v46, (uint64_t)v44);
        swift_bridgeObjectRetain_n();
        v52._countAndFlagsBits = 0x7265766965636572;
        v52._object = (void *)0xEE00656C646E6148;
        char v11 = (char *)sub_100078260(v52);
        swift_bridgeObjectRelease();
        sub_100002E34((uint64_t)v44);
        if (v11)
        {
          uint64_t v42 = v9;
          unint64_t v43 = v10;
          sub_10000A3E0((uint64_t)v46, (uint64_t)v44);
          swift_bridgeObjectRetain();
          uint64_t v12 = sub_100007A38(v9, v10, v7);
          if (v1) {
            goto LABEL_28;
          }
          uint64_t v13 = v12;
          swift_bridgeObjectRelease();
          sub_100002E34((uint64_t)v44);
          swift_beginAccess();
          uint64_t v14 = sub_10000856C(v41, v13);
          uint64_t v16 = v15;
          uint64_t v17 = sub_100078000();
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48))(v16, 1, v17))
          {
            uint64_t v42 = v9;
            unint64_t v43 = v10;
            sub_10000A3E0((uint64_t)v46, (uint64_t)v44);
            swift_dynamicCast();
            sub_100077FC0();
          }
          ((void (*)(void *, void))v14)(v41, 0);
          swift_endAccess();
        }
        uint64_t v42 = v9;
        unint64_t v43 = v10;
        sub_10000A3E0((uint64_t)v46, (uint64_t)v44);
        swift_bridgeObjectRetain();
        v53._countAndFlagsBits = 0xD000000000000015;
        v53._object = v39;
        char v11 = (char *)sub_100078260(v53);
        swift_bridgeObjectRelease();
        sub_100002E34((uint64_t)v44);
        if (v11)
        {
          uint64_t v42 = v9;
          unint64_t v43 = v10;
          sub_10000A3E0((uint64_t)v46, (uint64_t)v44);
          swift_bridgeObjectRetain();
          uint64_t v18 = sub_100007A38(v9, v10, v7);
          if (v1) {
            goto LABEL_28;
          }
          uint64_t v19 = v18;
          swift_bridgeObjectRelease();
          sub_100002E34((uint64_t)v44);
          swift_beginAccess();
          uint64_t v20 = sub_10000856C(v41, v19);
          uint64_t v22 = v21;
          uint64_t v23 = sub_100078000();
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23))
          {
            uint64_t v42 = v9;
            unint64_t v43 = v10;
            sub_10000A3E0((uint64_t)v46, (uint64_t)v44);
            swift_dynamicCast();
            sub_100077FD0();
          }
          ((void (*)(void *, void))v20)(v41, 0);
          swift_endAccess();
        }
        uint64_t v42 = v9;
        unint64_t v43 = v10;
        sub_10000A3E0((uint64_t)v46, (uint64_t)v44);
        swift_bridgeObjectRetain();
        v54._countAndFlagsBits = 0x4C52556572616873;
        v54._object = (void *)0xE800000000000000;
        char v11 = (char *)sub_100078260(v54);
        swift_bridgeObjectRelease();
        sub_100002E34((uint64_t)v44);
        if (v11)
        {
          uint64_t v42 = v9;
          unint64_t v43 = v10;
          sub_10000A3E0((uint64_t)v46, (uint64_t)v44);
          swift_bridgeObjectRetain();
          uint64_t v24 = sub_100007A38(v9, v10, v7);
          if (v1) {
            goto LABEL_28;
          }
          uint64_t v25 = v24;
          swift_bridgeObjectRelease();
          sub_100002E34((uint64_t)v44);
          swift_beginAccess();
          Swift::String v26 = sub_10000856C(v41, v25);
          uint64_t v28 = v27;
          uint64_t v29 = sub_100078000();
          if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 48))(v28, 1, v29))
          {
            uint64_t v42 = v9;
            unint64_t v43 = v10;
            sub_10000A3E0((uint64_t)v46, (uint64_t)v44);
            swift_dynamicCast();
            sub_100077FF0();
          }
          ((void (*)(void *, void))v26)(v41, 0);
          swift_endAccess();
        }
        uint64_t v42 = v9;
        unint64_t v43 = v10;
        sub_10000A3E0((uint64_t)v46, (uint64_t)v44);
        swift_bridgeObjectRetain();
        v55._countAndFlagsBits = 0x7069636974726170;
        v55._object = (void *)0xED00004449746E61;
        char v11 = (char *)sub_100078260(v55);
        swift_bridgeObjectRelease();
        sub_100002E34((uint64_t)v44);
        if ((v11 & 1) == 0)
        {
          sub_10000A43C((uint64_t)v45, &qword_1000901F0);
          swift_bridgeObjectRelease();
          goto LABEL_5;
        }
        uint64_t v42 = v9;
        unint64_t v43 = v10;
        sub_10000A3E0((uint64_t)v46, (uint64_t)v44);
        swift_bridgeObjectRetain();
        uint64_t v30 = sub_100007A38(v9, v10, v7);
        if (v1)
        {
LABEL_28:
          sub_10000A43C((uint64_t)v45, &qword_1000901F0);
          swift_bridgeObjectRelease_n();
          swift_release_n();
          sub_100002E34((uint64_t)v44);
          swift_release();
          return v11;
        }
        uint64_t v31 = v30;
        swift_bridgeObjectRelease();
        sub_100002E34((uint64_t)v44);
        swift_beginAccess();
        uint64_t v32 = sub_10000856C(v41, v31);
        uint64_t v34 = v33;
        uint64_t v35 = sub_100078000();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v34, 1, v35))
        {
          ((void (*)(void *, void))v32)(v41, 0);
          swift_endAccess();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v42 = v9;
          unint64_t v43 = v10;
          sub_10000A3E0((uint64_t)v46, (uint64_t)v44);
          swift_bridgeObjectRelease();
          swift_dynamicCast();
          sub_100077FB0();
          ((void (*)(void *, void))v32)(v41, 0);
          swift_endAccess();
        }
      }
      sub_10000A43C((uint64_t)v45, &qword_1000901F0);
LABEL_5:
      sub_100078380();
    }
    while (v50);
  }
  swift_release_n();
  swift_beginAccess();
  uint64_t v36 = swift_bridgeObjectRetain();
  char v11 = sub_10000A27C(v36);
  swift_release();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1000065F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100006DC8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100006E00()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 2432, 7);
}

uint64_t sub_100007260(uint64_t a1)
{
  return a1;
}

uint64_t sub_100007A38(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v69 = a3;
  sub_100002214(&qword_1000901F8);
  ((void (*)(void))__chkstk_darwin)();
  uint64_t v66 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100002214(&qword_100090208);
  uint64_t v7 = ((uint64_t (*)(void))__chkstk_darwin)();
  v73 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  unint64_t v10 = (uint64_t *)((char *)&v62 - v9);
  uint64_t v71 = 0;
  unint64_t v72 = 0xE000000000000000;
  uint64_t v11 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v11 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v11)
  {
    swift_bridgeObjectRetain();
    while (1)
    {
      unint64_t v12 = sub_1000781E0();
      sub_100078270();
      if ((sub_1000781B0() & 1) == 0) {
        break;
      }
      sub_100078200();
      swift_bridgeObjectRelease();
      if (v12 < 0x4000) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
  }
  uint64_t result = v71;
  unint64_t v14 = HIBYTE(v72) & 0xF;
  uint64_t v15 = v71 & 0xFFFFFFFFFFFFLL;
  if ((v72 & 0x2000000000000000) != 0) {
    unint64_t v16 = HIBYTE(v72) & 0xF;
  }
  else {
    unint64_t v16 = v71 & 0xFFFFFFFFFFFFLL;
  }
  if (!v16)
  {
LABEL_104:
    swift_bridgeObjectRelease();
    return 0;
  }
  if ((v72 & 0x1000000000000000) != 0)
  {
    uint64_t v18 = (uint64_t)sub_100009498(v71, v72, 10);
    char v20 = v61;
    goto LABEL_46;
  }
  if ((v72 & 0x2000000000000000) != 0)
  {
    v70[0] = v71;
    v70[1] = v72 & 0xFFFFFFFFFFFFFFLL;
    if (v71 == 43)
    {
      if (v14)
      {
        if (v14 != 1 && (BYTE1(v71) - 48) <= 9u)
        {
          uint64_t v18 = (BYTE1(v71) - 48);
          if (v14 == 2) {
            goto LABEL_45;
          }
          if ((BYTE2(v71) - 48) <= 9u)
          {
            uint64_t v18 = 10 * (BYTE1(v71) - 48) + (BYTE2(v71) - 48);
            unint64_t v24 = v14 - 3;
            if (v24)
            {
              uint64_t v25 = (unsigned __int8 *)v70 + 3;
              while (1)
              {
                unsigned int v26 = *v25 - 48;
                if (v26 > 9) {
                  goto LABEL_42;
                }
                if (!is_mul_ok(v18, 0xAuLL)) {
                  goto LABEL_42;
                }
                BOOL v22 = __CFADD__(10 * v18, v26);
                uint64_t v18 = 10 * v18 + v26;
                if (v22) {
                  goto LABEL_42;
                }
                char v20 = 0;
                ++v25;
                if (!--v24) {
                  goto LABEL_46;
                }
              }
            }
            goto LABEL_45;
          }
        }
        goto LABEL_42;
      }
    }
    else
    {
      if (v71 != 45)
      {
        if (v14 && (v71 - 48) <= 9u)
        {
          uint64_t v18 = (v71 - 48);
          if (v14 == 1) {
            goto LABEL_45;
          }
          if ((BYTE1(v71) - 48) <= 9u)
          {
            uint64_t v18 = 10 * (v71 - 48) + (BYTE1(v71) - 48);
            unint64_t v53 = v14 - 2;
            if (v53)
            {
              Swift::String v54 = (unsigned __int8 *)v70 + 2;
              while (1)
              {
                unsigned int v55 = *v54 - 48;
                if (v55 > 9) {
                  goto LABEL_42;
                }
                if (!is_mul_ok(v18, 0xAuLL)) {
                  goto LABEL_42;
                }
                BOOL v22 = __CFADD__(10 * v18, v55);
                uint64_t v18 = 10 * v18 + v55;
                if (v22) {
                  goto LABEL_42;
                }
                char v20 = 0;
                ++v54;
                if (!--v53) {
                  goto LABEL_46;
                }
              }
            }
            goto LABEL_45;
          }
        }
LABEL_42:
        uint64_t v18 = 0;
LABEL_43:
        char v20 = 1;
        goto LABEL_46;
      }
      if (v14)
      {
        if (v14 != 1)
        {
          unsigned __int8 v21 = BYTE1(v71) - 48;
          if ((BYTE1(v71) - 48) <= 9u)
          {
            uint64_t v18 = 0;
            BOOL v22 = v21 == 0;
            unint64_t v23 = -(uint64_t)v21;
            if (!v22) {
              goto LABEL_43;
            }
            if (v14 == 2)
            {
              char v20 = 0;
              uint64_t v18 = v23;
              goto LABEL_46;
            }
            unsigned __int8 v56 = BYTE2(v71) - 48;
            if ((BYTE2(v71) - 48) <= 9u && is_mul_ok(v23, 0xAuLL))
            {
              unint64_t v57 = 10 * v23;
              uint64_t v18 = v57 - v56;
              if (v57 >= v56)
              {
                unint64_t v58 = v14 - 3;
                if (v58)
                {
                  uint64_t v59 = (unsigned __int8 *)v70 + 3;
                  while (1)
                  {
                    unsigned int v60 = *v59 - 48;
                    if (v60 > 9) {
                      goto LABEL_42;
                    }
                    if (!is_mul_ok(v18, 0xAuLL)) {
                      goto LABEL_42;
                    }
                    BOOL v22 = 10 * v18 >= (unint64_t)v60;
                    uint64_t v18 = 10 * v18 - v60;
                    if (!v22) {
                      goto LABEL_42;
                    }
                    char v20 = 0;
                    ++v59;
                    if (!--v58) {
                      goto LABEL_46;
                    }
                  }
                }
LABEL_45:
                char v20 = 0;
                goto LABEL_46;
              }
            }
          }
        }
        goto LABEL_42;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_109;
  }
  if ((v71 & 0x1000000000000000) != 0) {
    uint64_t v17 = (unsigned __int8 *)((v72 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else {
    uint64_t v17 = (unsigned __int8 *)sub_100078330();
  }
  uint64_t v18 = (uint64_t)sub_1000096E8(v17, v15, 10);
  char v20 = v19 & 1;
LABEL_46:
  swift_bridgeObjectRelease();
  if (v20) {
    return 0;
  }
  if (!v18) {
    return v18;
  }
  uint64_t v65 = v3;
  uint64_t v27 = v69 + 16;
  swift_beginAccess();
  uint64_t v28 = *(void *)v27;
  uint64_t v29 = *(void *)(*(void *)v27 + 64);
  uint64_t v67 = *(void *)v27 + 64;
  uint64_t v30 = 1 << *(unsigned char *)(v28 + 32);
  uint64_t v31 = -1;
  if (v30 < 64) {
    uint64_t v31 = ~(-1 << v30);
  }
  unint64_t v32 = v31 & v29;
  int64_t v68 = (unint64_t)(v30 + 63) >> 6;
  int64_t v63 = v68 - 1;
  uint64_t v64 = v27;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v33 = 0;
  uint64_t v69 = v18;
  uint64_t v34 = v73;
  if (!v32) {
    goto LABEL_53;
  }
LABEL_51:
  unint64_t v35 = __clz(__rbit64(v32));
  v32 &= v32 - 1;
  unint64_t v36 = v35 | (v33 << 6);
LABEL_52:
  uint64_t v37 = *(void *)(v28 + 56);
  *(void *)uint64_t v34 = *(void *)(*(void *)(v28 + 48) + 8 * v36);
  uint64_t v38 = sub_100078000();
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v40 = v37 + *(void *)(v39 + 72) * v36;
  uint64_t v41 = sub_100002214(&qword_100090210);
  (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(&v73[*(int *)(v41 + 48)], v40, v38);
  uint64_t v34 = v73;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v73, 0, 1, v41);
  uint64_t v18 = v69;
  while (1)
  {
    sub_10000A500((uint64_t)v34, (uint64_t)v10);
    uint64_t v45 = sub_100002214(&qword_100090210);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v10, 1, v45) == 1)
    {
      swift_release();
      uint64_t v50 = v65;
      uint64_t v49 = (uint64_t)v66;
      sub_100077FE0();
      if (!v50)
      {
        uint64_t v52 = sub_100078000();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v49, 0, 1, v52);
        swift_beginAccess();
        sub_100008310(v49, v18);
        swift_endAccess();
      }
      return v18;
    }
    int v46 = (char *)v10 + *(int *)(v45 + 48);
    if (*v10 == v18)
    {
      swift_release();
      uint64_t v51 = sub_100078000();
      (*(void (**)(char *, uint64_t))(*(void *)(v51 - 8) + 8))(v46, v51);
      return v18;
    }
    uint64_t v47 = sub_100078000();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v47 - 8) + 8))(v46, v47);
    if (v32) {
      goto LABEL_51;
    }
LABEL_53:
    int64_t v42 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
      goto LABEL_104;
    }
    if (v42 < v68)
    {
      unint64_t v43 = *(void *)(v67 + 8 * v42);
      if (v43) {
        goto LABEL_56;
      }
      v33 += 2;
      if (v42 + 1 >= v68)
      {
        int64_t v33 = v42;
        goto LABEL_61;
      }
      unint64_t v43 = *(void *)(v67 + 8 * v33);
      if (v43)
      {
        ++v42;
LABEL_56:
        unint64_t v32 = (v43 - 1) & v43;
        unint64_t v36 = __clz(__rbit64(v43)) + (v42 << 6);
        int64_t v33 = v42;
        goto LABEL_52;
      }
      if (v42 + 2 < v68) {
        break;
      }
    }
LABEL_61:
    uint64_t v44 = sub_100002214(&qword_100090210);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v34, 1, 1, v44);
    unint64_t v32 = 0;
  }
  unint64_t v43 = *(void *)(v67 + 8 * (v42 + 2));
  if (v43)
  {
    v42 += 2;
    goto LABEL_56;
  }
  int64_t v48 = v42 + 3;
  if (v42 + 3 >= v68)
  {
    int64_t v33 = v42 + 2;
    goto LABEL_61;
  }
  unint64_t v43 = *(void *)(v67 + 8 * v48);
  if (v43)
  {
    v42 += 3;
    goto LABEL_56;
  }
  while (1)
  {
    int64_t v42 = v48 + 1;
    if (__OFADD__(v48, 1)) {
      break;
    }
    if (v42 >= v68)
    {
      int64_t v33 = v63;
      goto LABEL_61;
    }
    unint64_t v43 = *(void *)(v67 + 8 * v42);
    ++v48;
    if (v43) {
      goto LABEL_56;
    }
  }
LABEL_109:
  __break(1u);
  return result;
}

uint64_t sub_100008310(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_100002214(&qword_1000901F8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100078000();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin();
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) == 1)
  {
    sub_10000A43C(a1, &qword_1000901F8);
    unint64_t v12 = sub_100063400(a2);
    if (v13)
    {
      unint64_t v14 = v12;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v16 = *v3;
      uint64_t v20 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100008F8C();
        uint64_t v16 = v20;
      }
      (*(void (**)(char *, unint64_t, uint64_t))(v9 + 32))(v7, *(void *)(v16 + 56) + *(void *)(v9 + 72) * v14, v8);
      sub_10000921C(v14, v16);
      *uint64_t v3 = v16;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
    }
    return sub_10000A43C((uint64_t)v7, &qword_1000901F8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v11, a1, v8);
    char v17 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    sub_100009580((uint64_t)v11, a2, v17);
    *uint64_t v3 = v20;
    return swift_bridgeObjectRelease();
  }
}

void (*sub_10000856C(void *a1, uint64_t a2))(void *a1)
{
  uint64_t v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = sub_100008618(v4, a2);
  return sub_1000085CC;
}

void sub_1000085CC(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

void (*sub_100008618(void *a1, uint64_t a2))(uint64_t a1)
{
  uint64_t v4 = malloc(0x50uLL);
  *a1 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v4[8] = sub_10000899C(v4);
  v4[9] = sub_100008708(v4 + 4, a2, isUniquelyReferenced_nonNull_native);
  return sub_1000086A8;
}

void sub_1000086A8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  v2(v1, 0);

  free(v1);
}

void (*sub_100008708(void *a1, uint64_t a2, char a3))(uint64_t **a1)
{
  uint64_t v4 = v3;
  uint64_t v8 = malloc(0x28uLL);
  *a1 = v8;
  void *v8 = a2;
  v8[1] = v3;
  uint64_t v9 = sub_100002214(&qword_1000901F8);
  uint64_t v10 = malloc(*(void *)(*(void *)(v9 - 8) + 64));
  v8[2] = v10;
  uint64_t v11 = *v3;
  unint64_t v13 = sub_100063400(a2);
  *((unsigned char *)v8 + 32) = v12 & 1;
  uint64_t v14 = *(void *)(v11 + 16);
  BOOL v15 = (v12 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    char v17 = v12;
    uint64_t v18 = *(void *)(v11 + 24);
    if (v18 >= v16 && (a3 & 1) != 0)
    {
LABEL_7:
      v8[3] = v13;
      if (v17)
      {
LABEL_8:
        uint64_t v19 = *(void *)(*v4 + 56);
        uint64_t v20 = sub_100078000();
        uint64_t v21 = *(void *)(v20 - 8);
        (*(void (**)(void *, unint64_t, uint64_t))(v21 + 32))(v10, v19 + *(void *)(v21 + 72) * v13, v20);
        uint64_t v22 = 0;
LABEL_12:
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v10, v22, 1, v20);
        return sub_10000893C;
      }
LABEL_11:
      uint64_t v20 = sub_100078000();
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v22 = 1;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a3 & 1) == 0)
    {
      sub_100008F8C();
      goto LABEL_7;
    }
    sub_1000089D8(v16, a3 & 1);
    unint64_t v23 = sub_100063400(a2);
    if ((v17 & 1) == (v24 & 1))
    {
      unint64_t v13 = v23;
      v8[3] = v23;
      if (v17) {
        goto LABEL_8;
      }
      goto LABEL_11;
    }
  }
  uint64_t result = (void (*)(uint64_t **))sub_1000785D0();
  __break(1u);
  return result;
}

void sub_10000893C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)(*a1)[2];
  sub_100008D80((uint64_t)v2, *((unsigned char *)*a1 + 32), (uint64_t *)(*a1)[1], (*a1)[3], **a1);
  sub_10000A43C((uint64_t)v2, &qword_1000901F8);
  free(v2);

  free(v1);
}

uint64_t (*sub_10000899C(void *a1))(uint64_t result)
{
  *a1 = *v1;
  a1[1] = v1;
  void *v1 = 0x8000000000000000;
  return sub_1000089CC;
}

uint64_t sub_1000089CC(uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t sub_1000089D8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = sub_100078000();
  uint64_t v5 = *(void *)(v41 - 8);
  __chkstk_darwin();
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *v2;
  sub_100002214(&qword_100090200);
  int v40 = a2;
  uint64_t result = sub_100078360();
  uint64_t v10 = result;
  if (*(void *)(v8 + 16))
  {
    unint64_t v36 = v3;
    int64_t v11 = 0;
    uint64_t v12 = *(void *)(v8 + 64);
    uint64_t v38 = (void *)(v8 + 64);
    uint64_t v13 = 1 << *(unsigned char *)(v8 + 32);
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v12;
    int64_t v37 = (unint64_t)(v13 + 63) >> 6;
    uint64_t v39 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v16 = (void (**)(char *, unint64_t, uint64_t))(v5 + 32);
    uint64_t v17 = result + 64;
    while (1)
    {
      if (v15)
      {
        unint64_t v19 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        unint64_t v20 = v19 | (v11 << 6);
      }
      else
      {
        int64_t v21 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v21 >= v37) {
          goto LABEL_34;
        }
        unint64_t v22 = v38[v21];
        ++v11;
        if (!v22)
        {
          int64_t v11 = v21 + 1;
          if (v21 + 1 >= v37) {
            goto LABEL_34;
          }
          unint64_t v22 = v38[v11];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_34:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                uint64_t v3 = v36;
                goto LABEL_41;
              }
              uint64_t v35 = 1 << *(unsigned char *)(v8 + 32);
              if (v35 >= 64) {
                bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v38 = -1 << v35;
              }
              uint64_t v3 = v36;
              *(void *)(v8 + 16) = 0;
              break;
            }
            unint64_t v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v11 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_43;
                }
                if (v11 >= v37) {
                  goto LABEL_34;
                }
                unint64_t v22 = v38[v11];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v11 = v23;
          }
        }
LABEL_21:
        unint64_t v15 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v11 << 6);
      }
      uint64_t v24 = *(void *)(*(void *)(v8 + 48) + 8 * v20);
      uint64_t v25 = v5;
      uint64_t v26 = *(void *)(v5 + 72);
      unint64_t v27 = *(void *)(v8 + 56) + v26 * v20;
      if (v40) {
        (*v16)(v7, v27, v41);
      }
      else {
        (*v39)(v7, v27, v41);
      }
      uint64_t result = sub_100078620();
      uint64_t v28 = -1 << *(unsigned char *)(v10 + 32);
      unint64_t v29 = result & ~v28;
      unint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v29) & ~*(void *)(v17 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v31 = 0;
        unint64_t v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v33 = v30 == v32;
          if (v30 == v32) {
            unint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v17 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v18 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      *(void *)(*(void *)(v10 + 48) + 8 * v18) = v24;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v16)(*(void *)(v10 + 56) + v26 * v18, v7, v41);
      ++*(void *)(v10 + 16);
      uint64_t v5 = v25;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *uint64_t v3 = v10;
  return result;
}

unint64_t sub_100008D80(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_100002214(&qword_1000901F8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_100078000();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v23 - v18;
  sub_10000A498(a1, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    unint64_t result = sub_10000A43C((uint64_t)v12, &qword_1000901F8);
    if (a2) {
      return sub_10000921C(a4, *a3);
    }
  }
  else
  {
    uint64_t v24 = a5;
    int64_t v21 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v21(v19, v12, v13);
    unint64_t v22 = (void *)*a3;
    if (a2)
    {
      return ((uint64_t (*)(unint64_t, char *, uint64_t))v21)(v22[7] + *(void *)(v14 + 72) * a4, v19, v13);
    }
    else
    {
      v21(v17, v19, v13);
      return sub_1000093EC(a4, v24, (uint64_t)v17, v22);
    }
  }
  return result;
}

void *sub_100008F8C()
{
  uint64_t v1 = sub_100078000();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin();
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100002214(&qword_100090200);
  uint64_t v23 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = sub_100078350();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_23:
    unint64_t result = (void *)swift_release();
    *uint64_t v23 = v7;
    return result;
  }
  unint64_t result = (void *)(v6 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    unint64_t result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v24 = v5 + 64;
  int64_t v10 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & *(void *)(v5 + 64);
  uint64_t v27 = v2 + 16;
  int64_t v25 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v26 = v2 + 32;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v10 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v19 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v25) {
        goto LABEL_23;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v10);
      if (!v20) {
        break;
      }
    }
LABEL_22:
    unint64_t v13 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_9:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
    unint64_t v18 = *(void *)(v2 + 72) * v15;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 56) + v18, v1);
    *(void *)(*(void *)(v7 + 48) + v16) = v17;
    unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 56) + v18, v4, v1);
  }
  int64_t v21 = v19 + 2;
  if (v21 >= v25) {
    goto LABEL_23;
  }
  unint64_t v20 = *(void *)(v24 + 8 * v21);
  if (v20)
  {
    int64_t v10 = v21;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v10 >= v25) {
      goto LABEL_23;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v10);
    ++v21;
    if (v20) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_10000921C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = sub_1000782F0();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        int64_t v10 = (void *)(v9 + 8 * v6);
        unint64_t result = sub_100078620();
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8 || v3 < (uint64_t)v11) {
            goto LABEL_6;
          }
        }
        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }
        unint64_t v14 = (void *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1) {
          void *v14 = *v10;
        }
        uint64_t v15 = *(void *)(a2 + 56);
        uint64_t v16 = *(void *)(*(void *)(sub_100078000() - 8) + 72);
        int64_t v17 = v16 * v3;
        unint64_t result = v15 + v16 * v3;
        int64_t v18 = v16 * v6;
        unint64_t v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          int64_t v3 = v6;
          if (v17 == v18) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    int64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    int64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *int64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1000093EC(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = sub_100078000();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, a3, v8);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

unsigned __int8 *sub_100009498(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_100078280();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_100009964();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)sub_100078330();
  }
LABEL_7:
  BOOL v11 = sub_1000096E8(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_100009580(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100063400(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100008F8C();
      goto LABEL_7;
    }
    sub_1000089D8(v13, a3 & 1);
    unint64_t v24 = sub_100063400(a2);
    if ((v14 & 1) == (v25 & 1))
    {
      unint64_t v10 = v24;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = sub_1000785D0();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7];
    uint64_t v18 = sub_100078000();
    uint64_t v19 = *(void *)(v18 - 8);
    unint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 40);
    uint64_t v21 = v18;
    uint64_t v22 = v17 + *(void *)(v19 + 72) * v10;
    return v20(v22, a1, v21);
  }
LABEL_13:

  return sub_1000093EC(v10, a2, a1, v16);
}

unsigned __int8 *sub_1000096E8(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }
      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }
      if (result)
      {
        unint64_t v28 = 0;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0;
              }
              char v30 = -87;
            }
            else
            {
              char v30 = -55;
            }
          }
          else
          {
            char v30 = -48;
          }
          if (!is_mul_ok(v28, a3)) {
            return 0;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }
  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  unint64_t v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0;
        }
        char v22 = -87;
      }
      else
      {
        char v22 = -55;
      }
    }
    else
    {
      char v22 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0;
    }
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t sub_100009964()
{
  unint64_t v0 = sub_100078290();
  uint64_t v4 = sub_1000099E4(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1000099E4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_100009B3C(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          unsigned int v11 = sub_100009C3C(v9, 0),
          unint64_t v12 = sub_100009CA4((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = sub_1000781C0();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return sub_1000781C0();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  sub_100078330();
LABEL_4:

  return sub_1000781C0();
}

uint64_t sub_100009B3C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_100009EB8(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_100009EB8(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

void *sub_100009C3C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100002214(&qword_100090218);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

unint64_t sub_100009CA4(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    *uint64_t v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_100009EB8(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = sub_100078240();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = sub_100078330();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_100009EB8(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = sub_100078210();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100009EB8(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = sub_100078250();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = sub_100078220();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

uint64_t sub_100009F34(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100078000();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  int64_t v42 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v41 = (char *)&v32 - v13;
  uint64_t v43 = a4;
  uint64_t v16 = *(void *)(a4 + 64);
  uint64_t v15 = a4 + 64;
  uint64_t v14 = v16;
  uint64_t v37 = v15;
  uint64_t v17 = -1 << *(unsigned char *)(v15 - 32);
  if (-v17 < 64) {
    uint64_t v18 = ~(-1 << -(char)v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v14;
  if (!a2)
  {
    int64_t v20 = 0;
    a3 = 0;
LABEL_38:
    uint64_t v31 = v37;
    *a1 = v43;
    a1[1] = v31;
    a1[2] = ~v17;
    a1[3] = v20;
    a1[4] = v19;
    return a3;
  }
  if (!a3)
  {
    int64_t v20 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v34 = -1 << *(unsigned char *)(v15 - 32);
  uint64_t v35 = a1;
  int64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v38 = v9 + 32;
  uint64_t v39 = v9 + 16;
  int64_t v36 = (unint64_t)(63 - v17) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v40 = a3;
  uint64_t v22 = v41;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v23 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v24 = v23 | (v20 << 6);
  while (1)
  {
    ++v21;
    unint64_t v28 = v42;
    uint64_t v29 = *(void *)(v9 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v42, *(void *)(v43 + 56) + v29 * v24, v8);
    char v30 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v30(v22, v28, v8);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v30)(a2, v22, v8);
    a3 = v40;
    if (v21 == v40) {
      goto LABEL_37;
    }
    a2 += v29;
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v25 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v25 >= v36) {
      goto LABEL_32;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    if (!v26) {
      break;
    }
LABEL_18:
    unint64_t v19 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v25 << 6);
    int64_t v20 = v25;
  }
  v20 += 2;
  if (v25 + 1 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26) {
    goto LABEL_14;
  }
  int64_t v27 = v25 + 2;
  if (v25 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v20 = v25 + 3;
  if (v25 + 3 >= v36)
  {
    unint64_t v19 = 0;
    int64_t v20 = v25 + 2;
    goto LABEL_36;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v20);
  if (v26)
  {
LABEL_14:
    int64_t v25 = v20;
    goto LABEL_18;
  }
  int64_t v27 = v25 + 4;
  if (v25 + 4 >= v36)
  {
LABEL_32:
    unint64_t v19 = 0;
LABEL_36:
    a3 = v21;
LABEL_37:
    uint64_t v17 = v34;
    a1 = v35;
    goto LABEL_38;
  }
  unint64_t v26 = *(void *)(v37 + 8 * v27);
  if (v26)
  {
LABEL_17:
    int64_t v25 = v27;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v25 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v25 >= v36)
    {
      unint64_t v19 = 0;
      int64_t v20 = v33;
      goto LABEL_36;
    }
    unint64_t v26 = *(void *)(v37 + 8 * v25);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

char *sub_10000A27C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (char *)&_swiftEmptyArrayStorage;
  }
  sub_100002214(&qword_100090220);
  uint64_t v3 = *(void *)(sub_100078000() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (char *)j__malloc_size(v6);
  if (v4)
  {
    if (&result[-v5] != (char *)0x8000000000000000 || v4 != -1)
    {
      _OWORD v6[2] = v1;
      v6[3] = 2 * ((uint64_t)&result[-v5] / v4);
      uint64_t v9 = sub_100009F34(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_10000A56C();
      if (v9 == v1) {
        return (char *)v6;
      }
      __break(1u);
      return (char *)&_swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

_OWORD *sub_10000A3D0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10000A3E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000A43C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100002214(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000A498(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002214(&qword_1000901F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000A500(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002214(&qword_100090208);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000A56C()
{
  return swift_release();
}

unint64_t sub_10000A574()
{
  unint64_t result = qword_100090228;
  if (!qword_100090228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090228);
  }
  return result;
}

uint64_t sub_10000A5C8(unsigned __int8 *a1, char *a2)
{
  return sub_10006A988(*a1, *a2);
}

Swift::Int sub_10000A5D4()
{
  return sub_100078650();
}

uint64_t sub_10000A6A0()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000A754()
{
  return sub_100078650();
}

uint64_t sub_10000A81C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10000BF24(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_10000A84C(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x646E616D6D6F63;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x746E65696C63;
      goto LABEL_3;
    case 2:
      *a1 = 1702125924;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 0x6E6F6973726576;
      a1[1] = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_10000A8D8()
{
  uint64_t result = 0x646E616D6D6F63;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x746E65696C63;
      break;
    case 2:
      uint64_t result = 1702125924;
      break;
    case 3:
      uint64_t result = 0x6E6F6973726576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10000A958@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10000BF24(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10000A980(uint64_t a1)
{
  unint64_t v2 = sub_10000ABFC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000A9BC(uint64_t a1)
{
  unint64_t v2 = sub_10000ABFC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSSampleMessageSchema.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100002214(&qword_100090230);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000029D8(a1, a1[3]);
  sub_10000ABFC();
  sub_1000786A0();
  v8[15] = 0;
  sub_100078570();
  if (!v1)
  {
    v8[14] = 1;
    sub_100078540();
    type metadata accessor for IDSSampleMessageSchema();
    v8[13] = 2;
    sub_100077B90();
    sub_10000B060(&qword_100090240);
    sub_100078510();
    v8[12] = 3;
    sub_1000784F0();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_10000ABFC()
{
  unint64_t result = qword_100090238;
  if (!qword_100090238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090238);
  }
  return result;
}

uint64_t type metadata accessor for IDSSampleMessageSchema()
{
  uint64_t result = qword_1000902B8;
  if (!qword_1000902B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t IDSSampleMessageSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v4 = sub_100002214(&qword_100090248);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100002214(&qword_100090250);
  uint64_t v22 = *(void *)(v7 - 8);
  uint64_t v23 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for IDSSampleMessageSchema();
  __chkstk_darwin(v10);
  unint64_t v12 = (uint64_t *)((char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000029D8(a1, a1[3]);
  sub_10000ABFC();
  sub_100078690();
  if (v2) {
    return sub_100002E34((uint64_t)a1);
  }
  uint64_t v13 = v22;
  char v27 = 0;
  *unint64_t v12 = sub_100078470();
  char v26 = 1;
  v12[1] = sub_100078440();
  v12[2] = v14;
  sub_100077B90();
  char v25 = 2;
  sub_10000B060(&qword_100090258);
  sub_100078410();
  sub_10000B0A4((uint64_t)v6, (uint64_t)v12 + *(int *)(v10 + 24));
  char v24 = 3;
  uint64_t v15 = sub_1000783F0();
  char v17 = v16;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v23);
  uint64_t v18 = (char *)v12 + *(int *)(v10 + 28);
  *(void *)uint64_t v18 = v15;
  v18[8] = v17 & 1;
  sub_10000B10C((uint64_t)v12, v21);
  sub_100002E34((uint64_t)a1);
  return sub_10000B170((uint64_t)v12);
}

uint64_t sub_10000B000(uint64_t a1)
{
  uint64_t v2 = sub_100002214(&qword_100090248);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000B060(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100077B90();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000B0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002214(&qword_100090248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000B10C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSSampleMessageSchema();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000B170(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSSampleMessageSchema();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000B1CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSSampleMessageSchema.init(from:)(a1, a2);
}

uint64_t sub_10000B1E4(void *a1)
{
  return IDSSampleMessageSchema.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSSampleMessageSchema(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_100077B90();
    uint64_t v11 = *(void *)(v10 - 8);
    unint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = sub_100002214(&qword_100090248);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v15 = *(int *)(a3 + 28);
    char v16 = (char *)v4 + v15;
    char v17 = (char *)a2 + v15;
    *(void *)char v16 = *(void *)v17;
    v16[8] = v17[8];
  }
  return v4;
}

uint64_t destroy for IDSSampleMessageSchema(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_100077B90();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for IDSSampleMessageSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_100077B90();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_100002214(&qword_100090248);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(a3 + 28);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  return a1;
}

void *assignWithCopy for IDSSampleMessageSchema(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100077B90();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100002214(&qword_100090248);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 28);
  char v16 = (char *)a1 + v15;
  char v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)v17;
  v16[8] = v17[8];
  *(void *)char v16 = v18;
  return a1;
}

uint64_t initializeWithTake for IDSSampleMessageSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_100077B90();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100002214(&qword_100090248);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  return a1;
}

uint64_t assignWithTake for IDSSampleMessageSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (void *)(a2 + v6);
  uint64_t v9 = sub_100077B90();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100002214(&qword_100090248);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 28);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSSampleMessageSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10000BAA0);
}

uint64_t sub_10000BAA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100002214(&qword_100090248);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for IDSSampleMessageSchema(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10000BB68);
}

uint64_t sub_10000BB68(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100002214(&qword_100090248);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10000BC14()
{
  sub_10000BCC0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10000BCC0()
{
  if (!qword_1000902C8)
  {
    sub_100077B90();
    unint64_t v0 = sub_1000782E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000902C8);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for IDSSampleMessageSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10000BDE4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSSampleMessageSchema.CodingKeys()
{
  return &type metadata for IDSSampleMessageSchema.CodingKeys;
}

unint64_t sub_10000BE20()
{
  unint64_t result = qword_100090300;
  if (!qword_100090300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090300);
  }
  return result;
}

unint64_t sub_10000BE78()
{
  unint64_t result = qword_100090308;
  if (!qword_100090308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090308);
  }
  return result;
}

unint64_t sub_10000BED0()
{
  unint64_t result = qword_100090310;
  if (!qword_100090310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090310);
  }
  return result;
}

uint64_t sub_10000BF24(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_100088EA0;
  v6._object = a2;
  unint64_t v4 = sub_100078390(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 4) {
    return 4;
  }
  else {
    return v4;
  }
}

unint64_t sub_10000BF70(char a1)
{
  unint64_t result = 0x546567617373656DLL;
  switch(a1)
  {
    case 1:
    case 25:
    case 27:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x65746144646E6573;
      break;
    case 3:
      unint64_t result = 0x496567617373656DLL;
      break;
    case 4:
      unint64_t result = 0x496E6F6973736573;
      break;
    case 5:
      unint64_t result = 0x547972616D6D7573;
      break;
    case 6:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      unint64_t result = 0x7265766965636572;
      break;
    case 7:
      unint64_t result = 0xD000000000000015;
      break;
    case 8:
      unint64_t result = 0x4C52556572616873;
      break;
    case 9:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case -128:
    case -127:
    case -126:
    case -125:
    case -124:
    case -123:
    case -122:
    case -121:
    case -120:
    case -119:
    case -118:
    case -117:
    case -116:
    case -115:
    case -114:
    case -113:
    case -112:
    case -111:
    case -110:
    case -109:
    case -108:
    case -107:
    case -106:
    case -105:
    case -104:
      unint64_t result = 0x7069636974726170;
      break;
    case 10:
      unint64_t result = 0x546E6F6973736573;
      break;
    case 11:
      unint64_t result = 0xD000000000000016;
      break;
    case 12:
      unint64_t result = 0xD000000000000019;
      break;
    case 13:
      unint64_t result = 0xD000000000000018;
      break;
    case 14:
      unint64_t result = 0x5472656767697274;
      break;
    case 15:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 16:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 17:
      unint64_t result = 1668183400;
      break;
    case 18:
      unint64_t result = 0x6564757469746C61;
      break;
    case 19:
      unint64_t result = 1668183414;
      break;
    case 20:
      unint64_t result = 0x6F4C664F656D6974;
      break;
    case 21:
      unint64_t result = 0x636E657265666572;
      break;
    case 22:
      unint64_t result = 0x6465657073;
      break;
    case 23:
      unint64_t result = 0x5472656767697274;
      break;
    case 24:
      unint64_t result = 0x6143797465666173;
      break;
    case 26:
      unint64_t result = 0x697254534F537369;
      break;
    case 28:
      unint64_t result = 0xD000000000000016;
      break;
    case 60:
      unint64_t result = 0xD000000000000016;
      break;
    case 61:
      unint64_t result = 0xD000000000000016;
      break;
    case 62:
      unint64_t result = 0xD000000000000016;
      break;
    case 63:
      unint64_t result = 0xD000000000000016;
      break;
    case 64:
      unint64_t result = 0xD000000000000016;
      break;
    case 65:
      unint64_t result = 0xD000000000000016;
      break;
    case 66:
      unint64_t result = 0xD000000000000016;
      break;
    case 67:
      unint64_t result = 0xD000000000000016;
      break;
    case 68:
      unint64_t result = 0xD000000000000017;
      break;
    case 69:
      unint64_t result = 0xD000000000000017;
      break;
    case 70:
      unint64_t result = 0xD000000000000017;
      break;
    case 71:
      unint64_t result = 0xD000000000000017;
      break;
    case 72:
      unint64_t result = 0xD000000000000017;
      break;
    case 73:
      unint64_t result = 0xD000000000000017;
      break;
    case 74:
      unint64_t result = 0xD000000000000017;
      break;
    case 75:
      unint64_t result = 0xD000000000000017;
      break;
    case 76:
      unint64_t result = 0xD000000000000017;
      break;
    case 77:
      unint64_t result = 0xD000000000000017;
      break;
    case 78:
      unint64_t result = 0xD000000000000017;
      break;
    case 79:
      unint64_t result = 0xD000000000000017;
      break;
    case 80:
      unint64_t result = 0xD000000000000017;
      break;
    case 81:
      unint64_t result = 0xD000000000000017;
      break;
    case 82:
      unint64_t result = 0xD000000000000017;
      break;
    case 83:
      unint64_t result = 0xD000000000000017;
      break;
    case 84:
      unint64_t result = 0xD000000000000017;
      break;
    case 85:
      unint64_t result = 0xD000000000000017;
      break;
    case 86:
      unint64_t result = 0xD000000000000017;
      break;
    case 87:
      unint64_t result = 0xD000000000000017;
      break;
    case 88:
      unint64_t result = 0xD000000000000017;
      break;
    case 89:
      unint64_t result = 0xD000000000000017;
      break;
    case 90:
      unint64_t result = 0xD000000000000017;
      break;
    case 91:
      unint64_t result = 0x4C52556572616873;
      break;
    case 92:
      unint64_t result = 0x4C52556572616873;
      break;
    case 93:
      unint64_t result = 0x4C52556572616873;
      break;
    case 94:
      unint64_t result = 0x4C52556572616873;
      break;
    case 95:
      unint64_t result = 0x4C52556572616873;
      break;
    case 96:
      unint64_t result = 0x4C52556572616873;
      break;
    case 97:
      unint64_t result = 0x4C52556572616873;
      break;
    case 98:
      unint64_t result = 0x4C52556572616873;
      break;
    case 99:
      unint64_t result = 0x4C52556572616873;
      break;
    case 100:
      unint64_t result = 0x4C52556572616873;
      break;
    case 101:
      unint64_t result = 0x4C52556572616873;
      break;
    case 102:
      unint64_t result = 0x4C52556572616873;
      break;
    case 103:
      unint64_t result = 0x4C52556572616873;
      break;
    case 104:
      unint64_t result = 0x4C52556572616873;
      break;
    case 105:
      unint64_t result = 0x4C52556572616873;
      break;
    case 106:
      unint64_t result = 0x4C52556572616873;
      break;
    case 107:
      unint64_t result = 0x4C52556572616873;
      break;
    case 108:
      unint64_t result = 0x4C52556572616873;
      break;
    case 109:
      unint64_t result = 0x4C52556572616873;
      break;
    case 110:
      unint64_t result = 0x4C52556572616873;
      break;
    case 111:
      unint64_t result = 0x4C52556572616873;
      break;
    case 112:
      unint64_t result = 0x4C52556572616873;
      break;
    case 113:
      unint64_t result = 0x4C52556572616873;
      break;
    case 114:
      unint64_t result = 0x4C52556572616873;
      break;
    case 115:
      unint64_t result = 0x4C52556572616873;
      break;
    case 116:
      unint64_t result = 0x4C52556572616873;
      break;
    case 117:
      unint64_t result = 0x4C52556572616873;
      break;
    case 118:
      unint64_t result = 0x4C52556572616873;
      break;
    case 119:
      unint64_t result = 0x4C52556572616873;
      break;
    case 120:
      unint64_t result = 0x4C52556572616873;
      break;
    case 121:
      unint64_t result = 0x4C52556572616873;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10000CFC0(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10000BF70(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10000BF70(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1000785B0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10000D04C()
{
  char v1 = *v0;
  sub_100078630();
  sub_10000BF70(v1);
  sub_1000781D0();
  swift_bridgeObjectRelease();
  return sub_100078650();
}

uint64_t sub_10000D0B0()
{
  sub_10000BF70(*v0);
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000D104()
{
  char v1 = *v0;
  sub_100078630();
  sub_10000BF70(v1);
  sub_1000781D0();
  swift_bridgeObjectRelease();
  return sub_100078650();
}

uint64_t sub_10000D164@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10000EE48();
  *a1 = result;
  return result;
}

unint64_t sub_10000D194@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10000BF70(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10000D1C0()
{
  return sub_10000BF70(*v0);
}

uint64_t sub_10000D1C8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10000EE48();
  *a1 = result;
  return result;
}

void sub_10000D1F0(unsigned char *a1@<X8>)
{
  *a1 = -103;
}

uint64_t sub_10000D1FC(uint64_t a1)
{
  unint64_t v2 = sub_10000ED88();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10000D238(uint64_t a1)
{
  unint64_t v2 = sub_10000ED88();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SafetyMonitorSchema.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100002214(&qword_100090318);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_10000ED88();
  sub_1000786A0();
  char v9 = 0;
  sub_100078580();
  if (!v1)
  {
    char v9 = 1;
    sub_100078580();
    char v9 = 2;
    sub_100078560();
    char v9 = 3;
    sub_100078540();
    char v9 = 4;
    sub_100078540();
    char v9 = 5;
    sub_1000784C0();
    char v9 = 6;
    sub_1000784C0();
    char v9 = 7;
    sub_1000784C0();
    char v9 = 8;
    sub_1000784C0();
    char v9 = 9;
    sub_1000784C0();
    char v9 = 10;
    sub_100078500();
    char v9 = 11;
    sub_100078500();
    char v9 = 12;
    sub_1000784C0();
    char v9 = 13;
    sub_100078500();
    char v9 = 14;
    sub_1000784E0();
    char v9 = 15;
    sub_1000784E0();
    char v9 = 16;
    sub_1000784E0();
    char v9 = 17;
    sub_1000784E0();
    char v9 = 18;
    sub_1000784E0();
    char v9 = 19;
    sub_1000784E0();
    char v9 = 20;
    sub_1000784E0();
    char v9 = 21;
    sub_100078500();
    char v9 = 22;
    sub_1000784E0();
    char v9 = 23;
    sub_100078500();
    char v9 = 24;
    sub_1000784C0();
    char v9 = 25;
    sub_1000784C0();
    char v9 = 26;
    sub_1000784D0();
    char v9 = 27;
    sub_1000784E0();
    char v9 = 28;
    sub_1000784E0();
    char v9 = 29;
    sub_1000784C0();
    char v9 = 30;
    sub_1000784C0();
    char v9 = 31;
    sub_1000784C0();
    char v9 = 32;
    sub_1000784C0();
    char v9 = 33;
    sub_1000784C0();
    char v9 = 34;
    sub_1000784C0();
    char v9 = 35;
    sub_1000784C0();
    char v9 = 36;
    sub_1000784C0();
    char v9 = 37;
    sub_1000784C0();
    char v9 = 38;
    sub_1000784C0();
    char v9 = 39;
    sub_1000784C0();
    char v9 = 40;
    sub_1000784C0();
    char v9 = 41;
    sub_1000784C0();
    char v9 = 42;
    sub_1000784C0();
    char v9 = 43;
    sub_1000784C0();
    char v9 = 44;
    sub_1000784C0();
    char v9 = 45;
    sub_1000784C0();
    char v9 = 46;
    sub_1000784C0();
    char v9 = 47;
    sub_1000784C0();
    char v9 = 48;
    sub_1000784C0();
    char v9 = 49;
    sub_1000784C0();
    char v9 = 50;
    sub_1000784C0();
    char v9 = 51;
    sub_1000784C0();
    char v9 = 52;
    sub_1000784C0();
    char v9 = 53;
    sub_1000784C0();
    char v9 = 54;
    sub_1000784C0();
    char v9 = 55;
    sub_1000784C0();
    char v9 = 56;
    sub_1000784C0();
    char v9 = 57;
    sub_1000784C0();
    char v9 = 58;
    sub_1000784C0();
    char v9 = 59;
    sub_1000784C0();
    char v9 = 60;
    sub_1000784C0();
    char v9 = 61;
    sub_1000784C0();
    char v9 = 62;
    sub_1000784C0();
    char v9 = 63;
    sub_1000784C0();
    char v9 = 64;
    sub_1000784C0();
    char v9 = 65;
    sub_1000784C0();
    char v9 = 66;
    sub_1000784C0();
    char v9 = 67;
    sub_1000784C0();
    char v9 = 68;
    sub_1000784C0();
    char v9 = 69;
    sub_1000784C0();
    char v9 = 70;
    sub_1000784C0();
    char v9 = 71;
    sub_1000784C0();
    char v9 = 72;
    sub_1000784C0();
    char v9 = 73;
    sub_1000784C0();
    char v9 = 74;
    sub_1000784C0();
    char v9 = 75;
    sub_1000784C0();
    char v9 = 76;
    sub_1000784C0();
    char v9 = 77;
    sub_1000784C0();
    char v9 = 78;
    sub_1000784C0();
    char v9 = 79;
    sub_1000784C0();
    char v9 = 80;
    sub_1000784C0();
    char v9 = 81;
    sub_1000784C0();
    char v9 = 82;
    sub_1000784C0();
    char v9 = 83;
    sub_1000784C0();
    char v9 = 84;
    sub_1000784C0();
    char v9 = 85;
    sub_1000784C0();
    char v9 = 86;
    sub_1000784C0();
    char v9 = 87;
    sub_1000784C0();
    char v9 = 88;
    sub_1000784C0();
    char v9 = 89;
    sub_1000784C0();
    char v9 = 90;
    sub_1000784C0();
    char v9 = 91;
    sub_1000784C0();
    char v9 = 92;
    sub_1000784C0();
    char v9 = 93;
    sub_1000784C0();
    char v9 = 94;
    sub_1000784C0();
    char v9 = 95;
    sub_1000784C0();
    char v9 = 96;
    sub_1000784C0();
    char v9 = 97;
    sub_1000784C0();
    char v9 = 98;
    sub_1000784C0();
    char v9 = 99;
    sub_1000784C0();
    char v9 = 100;
    sub_1000784C0();
    char v9 = 101;
    sub_1000784C0();
    char v9 = 102;
    sub_1000784C0();
    char v9 = 103;
    sub_1000784C0();
    char v9 = 104;
    sub_1000784C0();
    char v9 = 105;
    sub_1000784C0();
    char v9 = 106;
    sub_1000784C0();
    char v9 = 107;
    sub_1000784C0();
    char v9 = 108;
    sub_1000784C0();
    char v9 = 109;
    sub_1000784C0();
    char v9 = 110;
    sub_1000784C0();
    char v9 = 111;
    sub_1000784C0();
    char v9 = 112;
    sub_1000784C0();
    char v9 = 113;
    sub_1000784C0();
    char v9 = 114;
    sub_1000784C0();
    char v9 = 115;
    sub_1000784C0();
    char v9 = 116;
    sub_1000784C0();
    char v9 = 117;
    sub_1000784C0();
    char v9 = 118;
    sub_1000784C0();
    char v9 = 119;
    sub_1000784C0();
    char v9 = 120;
    sub_1000784C0();
    char v9 = 121;
    sub_1000784C0();
    char v9 = 122;
    sub_1000784C0();
    char v9 = 123;
    sub_1000784C0();
    char v9 = 124;
    sub_1000784C0();
    char v9 = 125;
    sub_1000784C0();
    char v9 = 126;
    sub_1000784C0();
    char v9 = 127;
    sub_1000784C0();
    char v9 = 0x80;
    sub_1000784C0();
    char v9 = -127;
    sub_1000784C0();
    char v9 = -126;
    sub_1000784C0();
    char v9 = -125;
    sub_1000784C0();
    char v9 = -124;
    sub_1000784C0();
    char v9 = -123;
    sub_1000784C0();
    char v9 = -122;
    sub_1000784C0();
    char v9 = -121;
    sub_1000784C0();
    char v9 = -120;
    sub_1000784C0();
    char v9 = -119;
    sub_1000784C0();
    char v9 = -118;
    sub_1000784C0();
    char v9 = -117;
    sub_1000784C0();
    char v9 = -116;
    sub_1000784C0();
    char v9 = -115;
    sub_1000784C0();
    char v9 = -114;
    sub_1000784C0();
    char v9 = -113;
    sub_1000784C0();
    char v9 = -112;
    sub_1000784C0();
    char v9 = -111;
    sub_1000784C0();
    char v9 = -110;
    sub_1000784C0();
    char v9 = -109;
    sub_1000784C0();
    char v9 = -108;
    sub_1000784C0();
    char v9 = -107;
    sub_1000784C0();
    char v9 = -106;
    sub_1000784C0();
    char v9 = -105;
    sub_1000784C0();
    char v9 = -104;
    sub_1000784C0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_10000ED88()
{
  unint64_t result = qword_100090320;
  if (!qword_100090320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090320);
  }
  return result;
}

void *SafetyMonitorSchema.init(from:)@<X0>(void *a1@<X8>)
{
  unint64_t result = sub_10000F4CC(v4);
  if (!v1) {
    return memcpy(a1, v4, 0x970uLL);
  }
  return result;
}

uint64_t sub_10000EE30(void *a1)
{
  return SafetyMonitorSchema.encode(to:)(a1);
}

uint64_t sub_10000EE48()
{
  uint64_t v0 = sub_1000785C0();
  swift_bridgeObjectRelease();
  uint64_t v1 = 0;
  uint64_t result = 45;
  switch(v0)
  {
    case 0:
      goto LABEL_49;
    case 1:
      uint64_t v1 = 1;
      goto LABEL_49;
    case 2:
      uint64_t v1 = 2;
      goto LABEL_49;
    case 3:
      uint64_t v1 = 3;
      goto LABEL_49;
    case 4:
      uint64_t v1 = 4;
      goto LABEL_49;
    case 5:
      uint64_t v1 = 5;
      goto LABEL_49;
    case 6:
      uint64_t v1 = 6;
      goto LABEL_49;
    case 7:
      uint64_t v1 = 7;
      goto LABEL_49;
    case 8:
      uint64_t v1 = 8;
      goto LABEL_49;
    case 9:
      uint64_t v1 = 9;
      goto LABEL_49;
    case 10:
      uint64_t v1 = 10;
      goto LABEL_49;
    case 11:
      uint64_t v1 = 11;
      goto LABEL_49;
    case 12:
      uint64_t v1 = 12;
      goto LABEL_49;
    case 13:
      uint64_t v1 = 13;
      goto LABEL_49;
    case 14:
      uint64_t v1 = 14;
      goto LABEL_49;
    case 15:
      uint64_t v1 = 15;
      goto LABEL_49;
    case 16:
      uint64_t v1 = 16;
      goto LABEL_49;
    case 17:
      uint64_t v1 = 17;
      goto LABEL_49;
    case 18:
      uint64_t v1 = 18;
      goto LABEL_49;
    case 19:
      uint64_t v1 = 19;
      goto LABEL_49;
    case 20:
      uint64_t v1 = 20;
      goto LABEL_49;
    case 21:
      uint64_t v1 = 21;
      goto LABEL_49;
    case 22:
      uint64_t v1 = 22;
      goto LABEL_49;
    case 23:
      uint64_t v1 = 23;
      goto LABEL_49;
    case 24:
      uint64_t v1 = 24;
      goto LABEL_49;
    case 25:
      uint64_t v1 = 25;
      goto LABEL_49;
    case 26:
      uint64_t v1 = 26;
      goto LABEL_49;
    case 27:
      uint64_t v1 = 27;
      goto LABEL_49;
    case 28:
      uint64_t v1 = 28;
      goto LABEL_49;
    case 29:
      uint64_t v1 = 29;
      goto LABEL_49;
    case 30:
      uint64_t v1 = 30;
      goto LABEL_49;
    case 31:
      uint64_t v1 = 31;
      goto LABEL_49;
    case 32:
      uint64_t v1 = 32;
      goto LABEL_49;
    case 33:
      uint64_t v1 = 33;
      goto LABEL_49;
    case 34:
      uint64_t v1 = 34;
      goto LABEL_49;
    case 35:
      uint64_t v1 = 35;
      goto LABEL_49;
    case 36:
      uint64_t v1 = 36;
      goto LABEL_49;
    case 37:
      uint64_t v1 = 37;
      goto LABEL_49;
    case 38:
      uint64_t v1 = 38;
      goto LABEL_49;
    case 39:
      uint64_t v1 = 39;
      goto LABEL_49;
    case 40:
      uint64_t v1 = 40;
      goto LABEL_49;
    case 41:
      uint64_t v1 = 41;
      goto LABEL_49;
    case 42:
      uint64_t v1 = 42;
      goto LABEL_49;
    case 43:
      uint64_t v1 = 43;
      goto LABEL_49;
    case 44:
      uint64_t v1 = 44;
LABEL_49:
      uint64_t result = v1;
      break;
    case 45:
      return result;
    case 46:
      uint64_t result = 46;
      break;
    case 47:
      uint64_t result = 47;
      break;
    case 48:
      uint64_t result = 48;
      break;
    case 49:
      uint64_t result = 49;
      break;
    case 50:
      uint64_t result = 50;
      break;
    case 51:
      uint64_t result = 51;
      break;
    case 52:
      uint64_t result = 52;
      break;
    case 53:
      uint64_t result = 53;
      break;
    case 54:
      uint64_t result = 54;
      break;
    case 55:
      uint64_t result = 55;
      break;
    case 56:
      uint64_t result = 56;
      break;
    case 57:
      uint64_t result = 57;
      break;
    case 58:
      uint64_t result = 58;
      break;
    case 59:
      uint64_t result = 59;
      break;
    case 60:
      uint64_t result = 60;
      break;
    case 61:
      uint64_t result = 61;
      break;
    case 62:
      uint64_t result = 62;
      break;
    case 63:
      uint64_t result = 63;
      break;
    case 64:
      uint64_t result = 64;
      break;
    case 65:
      uint64_t result = 65;
      break;
    case 66:
      uint64_t result = 66;
      break;
    case 67:
      uint64_t result = 67;
      break;
    case 68:
      uint64_t result = 68;
      break;
    case 69:
      uint64_t result = 69;
      break;
    case 70:
      uint64_t result = 70;
      break;
    case 71:
      uint64_t result = 71;
      break;
    case 72:
      uint64_t result = 72;
      break;
    case 73:
      uint64_t result = 73;
      break;
    case 74:
      uint64_t result = 74;
      break;
    case 75:
      uint64_t result = 75;
      break;
    case 76:
      uint64_t result = 76;
      break;
    case 77:
      uint64_t result = 77;
      break;
    case 78:
      uint64_t result = 78;
      break;
    case 79:
      uint64_t result = 79;
      break;
    case 80:
      uint64_t result = 80;
      break;
    case 81:
      uint64_t result = 81;
      break;
    case 82:
      uint64_t result = 82;
      break;
    case 83:
      uint64_t result = 83;
      break;
    case 84:
      uint64_t result = 84;
      break;
    case 85:
      uint64_t result = 85;
      break;
    case 86:
      uint64_t result = 86;
      break;
    case 87:
      uint64_t result = 87;
      break;
    case 88:
      uint64_t result = 88;
      break;
    case 89:
      uint64_t result = 89;
      break;
    case 90:
      uint64_t result = 90;
      break;
    case 91:
      uint64_t result = 91;
      break;
    case 92:
      uint64_t result = 92;
      break;
    case 93:
      uint64_t result = 93;
      break;
    case 94:
      uint64_t result = 94;
      break;
    case 95:
      uint64_t result = 95;
      break;
    case 96:
      uint64_t result = 96;
      break;
    case 97:
      uint64_t result = 97;
      break;
    case 98:
      uint64_t result = 98;
      break;
    case 99:
      uint64_t result = 99;
      break;
    case 100:
      uint64_t result = 100;
      break;
    case 101:
      uint64_t result = 101;
      break;
    case 102:
      uint64_t result = 102;
      break;
    case 103:
      uint64_t result = 103;
      break;
    case 104:
      uint64_t result = 104;
      break;
    case 105:
      uint64_t result = 105;
      break;
    case 106:
      uint64_t result = 106;
      break;
    case 107:
      uint64_t result = 107;
      break;
    case 108:
      uint64_t result = 108;
      break;
    case 109:
      uint64_t result = 109;
      break;
    case 110:
      uint64_t result = 110;
      break;
    case 111:
      uint64_t result = 111;
      break;
    case 112:
      uint64_t result = 112;
      break;
    case 113:
      uint64_t result = 113;
      break;
    case 114:
      uint64_t result = 114;
      break;
    case 115:
      uint64_t result = 115;
      break;
    case 116:
      uint64_t result = 116;
      break;
    case 117:
      uint64_t result = 117;
      break;
    case 118:
      uint64_t result = 118;
      break;
    case 119:
      uint64_t result = 119;
      break;
    case 120:
      uint64_t result = 120;
      break;
    case 121:
      uint64_t result = 121;
      break;
    case 122:
      uint64_t result = 122;
      break;
    case 123:
      uint64_t result = 123;
      break;
    case 124:
      uint64_t result = 124;
      break;
    case 125:
      uint64_t result = 125;
      break;
    case 126:
      uint64_t result = 126;
      break;
    case 127:
      uint64_t result = 127;
      break;
    default:
      if ((unint64_t)(v0 - 128) >= 0x19) {
        uint64_t result = 153;
      }
      else {
        uint64_t result = v0 | 0xFFFFFF80;
      }
      break;
  }
  return result;
}

#error "10000F4CC: too big function (funcsize=0)"

uint64_t destroy for SafetyMonitorSchema()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SafetyMonitorSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 376);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v10;
  uint64_t v11 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v11;
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  uint64_t v12 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v12;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  uint64_t v13 = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 232) = v13;
  uint64_t v14 = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(void *)(a1 + 248) = v14;
  uint64_t v15 = *(void *)(a2 + 264);
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  *(void *)(a1 + 264) = v15;
  uint64_t v16 = *(void *)(a2 + 280);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(void *)(a1 + 280) = v16;
  uint64_t v17 = *(void *)(a2 + 296);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(void *)(a1 + 296) = v17;
  uint64_t v18 = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 312) = v18;
  uint64_t v19 = *(void *)(a2 + 328);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(void *)(a1 + 328) = v19;
  uint64_t v20 = *(void *)(a2 + 344);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(void *)(a1 + 344) = v20;
  uint64_t v21 = *(void *)(a2 + 360);
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  *(void *)(a1 + 360) = v21;
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  *(void *)(a1 + 376) = v3;
  uint64_t v22 = *(void *)(a2 + 400);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 400) = v22;
  uint64_t v23 = *(void *)(a2 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v23;
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  uint64_t v24 = *(void *)(a2 + 440);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 440) = v24;
  uint64_t v25 = *(void *)(a2 + 456);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(void *)(a1 + 456) = v25;
  uint64_t v26 = *(void *)(a2 + 472);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a1 + 472) = v26;
  uint64_t v27 = *(void *)(a2 + 488);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a1 + 488) = v27;
  uint64_t v28 = *(void *)(a2 + 504);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 504) = v28;
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  *(void *)(a1 + 752) = *(void *)(a2 + 752);
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  *(void *)(a1 + 784) = *(void *)(a2 + 784);
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  *(void *)(a1 + 880) = *(void *)(a2 + 880);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  *(void *)(a1 + 928) = *(void *)(a2 + 928);
  *(void *)(a1 + 944) = *(void *)(a2 + 944);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  *(void *)(a1 + 976) = *(void *)(a2 + 976);
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(void *)(a1 + 1040) = *(void *)(a2 + 1040);
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
  *(void *)(a1 + 1136) = *(void *)(a2 + 1136);
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  *(void *)(a1 + 1200) = *(void *)(a2 + 1200);
  *(void *)(a1 + 1216) = *(void *)(a2 + 1216);
  *(void *)(a1 + 1232) = *(void *)(a2 + 1232);
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  *(void *)(a1 + 1264) = *(void *)(a2 + 1264);
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  *(void *)(a1 + 1296) = *(void *)(a2 + 1296);
  *(void *)(a1 + 1312) = *(void *)(a2 + 1312);
  *(void *)(a1 + 1328) = *(void *)(a2 + 1328);
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  *(void *)(a1 + 1360) = *(void *)(a2 + 1360);
  *(void *)(a1 + 1376) = *(void *)(a2 + 1376);
  *(void *)(a1 + 1392) = *(void *)(a2 + 1392);
  *(void *)(a1 + 1408) = *(void *)(a2 + 1408);
  *(void *)(a1 + 1424) = *(void *)(a2 + 1424);
  *(void *)(a1 + 1440) = *(void *)(a2 + 1440);
  *(void *)(a1 + 1456) = *(void *)(a2 + 1456);
  *(void *)(a1 + 1472) = *(void *)(a2 + 1472);
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
  *(void *)(a1 + 1520) = *(void *)(a2 + 1520);
  *(void *)(a1 + 1536) = *(void *)(a2 + 1536);
  *(void *)(a1 + 1552) = *(void *)(a2 + 1552);
  *(void *)(a1 + 1568) = *(void *)(a2 + 1568);
  *(void *)(a1 + 1584) = *(void *)(a2 + 1584);
  *(void *)(a1 + 1600) = *(void *)(a2 + 1600);
  *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  *(void *)(a1 + 1632) = *(void *)(a2 + 1632);
  *(void *)(a1 + 1648) = *(void *)(a2 + 1648);
  *(void *)(a1 + 1664) = *(void *)(a2 + 1664);
  *(void *)(a1 + 1680) = *(void *)(a2 + 1680);
  *(void *)(a1 + 1696) = *(void *)(a2 + 1696);
  *(void *)(a1 + 1712) = *(void *)(a2 + 1712);
  *(void *)(a1 + 1728) = *(void *)(a2 + 1728);
  *(void *)(a1 + 1744) = *(void *)(a2 + 1744);
  *(void *)(a1 + 1760) = *(void *)(a2 + 1760);
  *(void *)(a1 + 1776) = *(void *)(a2 + 1776);
  *(void *)(a1 + 1792) = *(void *)(a2 + 1792);
  *(void *)(a1 + 1808) = *(void *)(a2 + 1808);
  *(void *)(a1 + 1824) = *(void *)(a2 + 1824);
  *(void *)(a1 + 1840) = *(void *)(a2 + 1840);
  *(void *)(a1 + 1856) = *(void *)(a2 + 1856);
  *(void *)(a1 + 1872) = *(void *)(a2 + 1872);
  *(void *)(a1 + 1888) = *(void *)(a2 + 1888);
  *(void *)(a1 + 1904) = *(void *)(a2 + 1904);
  *(void *)(a1 + 1920) = *(void *)(a2 + 1920);
  *(void *)(a1 + 1936) = *(void *)(a2 + 1936);
  *(void *)(a1 + 1952) = *(void *)(a2 + 1952);
  *(void *)(a1 + 1968) = *(void *)(a2 + 1968);
  *(void *)(a1 + 1984) = *(void *)(a2 + 1984);
  *(void *)(a1 + 2000) = *(void *)(a2 + 2000);
  *(void *)(a1 + 2016) = *(void *)(a2 + 2016);
  *(void *)(a1 + 2032) = *(void *)(a2 + 2032);
  *(void *)(a1 + 2048) = *(void *)(a2 + 2048);
  *(void *)(a1 + 2064) = *(void *)(a2 + 2064);
  *(void *)(a1 + 2080) = *(void *)(a2 + 2080);
  *(void *)(a1 + 2096) = *(void *)(a2 + 2096);
  *(void *)(a1 + 2112) = *(void *)(a2 + 2112);
  *(void *)(a1 + 2128) = *(void *)(a2 + 2128);
  *(void *)(a1 + 2144) = *(void *)(a2 + 2144);
  *(void *)(a1 + 2160) = *(void *)(a2 + 2160);
  *(void *)(a1 + 2176) = *(void *)(a2 + 2176);
  *(void *)(a1 + 2192) = *(void *)(a2 + 2192);
  *(void *)(a1 + 2208) = *(void *)(a2 + 2208);
  *(void *)(a1 + 2224) = *(void *)(a2 + 2224);
  *(void *)(a1 + 2240) = *(void *)(a2 + 2240);
  *(void *)(a1 + 2256) = *(void *)(a2 + 2256);
  *(void *)(a1 + 2272) = *(void *)(a2 + 2272);
  *(void *)(a1 + 2288) = *(void *)(a2 + 2288);
  *(void *)(a1 + 2304) = *(void *)(a2 + 2304);
  *(void *)(a1 + 2320) = *(void *)(a2 + 2320);
  *(void *)(a1 + 2336) = *(void *)(a2 + 2336);
  *(void *)(a1 + 2352) = *(void *)(a2 + 2352);
  *(void *)(a1 + 2368) = *(void *)(a2 + 2368);
  *(void *)(a1 + 2384) = *(void *)(a2 + 2384);
  *(void *)(a1 + 2400) = *(void *)(a2 + 2400);
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  *(void *)(a1 + 776) = *(void *)(a2 + 776);
  *(void *)(a1 + 792) = *(void *)(a2 + 792);
  *(void *)(a1 + 808) = *(void *)(a2 + 808);
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  *(void *)(a1 + 920) = *(void *)(a2 + 920);
  *(void *)(a1 + 936) = *(void *)(a2 + 936);
  *(void *)(a1 + 952) = *(void *)(a2 + 952);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  *(void *)(a1 + 1096) = *(void *)(a2 + 1096);
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  *(void *)(a1 + 1128) = *(void *)(a2 + 1128);
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
  *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
  *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
  *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  *(void *)(a1 + 1240) = *(void *)(a2 + 1240);
  *(void *)(a1 + 1256) = *(void *)(a2 + 1256);
  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  *(void *)(a1 + 1288) = *(void *)(a2 + 1288);
  *(void *)(a1 + 1304) = *(void *)(a2 + 1304);
  *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
  *(void *)(a1 + 1336) = *(void *)(a2 + 1336);
  *(void *)(a1 + 1352) = *(void *)(a2 + 1352);
  *(void *)(a1 + 1368) = *(void *)(a2 + 1368);
  *(void *)(a1 + 1384) = *(void *)(a2 + 1384);
  *(void *)(a1 + 1400) = *(void *)(a2 + 1400);
  *(void *)(a1 + 1416) = *(void *)(a2 + 1416);
  *(void *)(a1 + 1432) = *(void *)(a2 + 1432);
  *(void *)(a1 + 1448) = *(void *)(a2 + 1448);
  *(void *)(a1 + 1464) = *(void *)(a2 + 1464);
  *(void *)(a1 + 1480) = *(void *)(a2 + 1480);
  *(void *)(a1 + 1496) = *(void *)(a2 + 1496);
  *(void *)(a1 + 1512) = *(void *)(a2 + 1512);
  *(void *)(a1 + 1528) = *(void *)(a2 + 1528);
  *(void *)(a1 + 1544) = *(void *)(a2 + 1544);
  *(void *)(a1 + 1560) = *(void *)(a2 + 1560);
  *(void *)(a1 + 1576) = *(void *)(a2 + 1576);
  *(void *)(a1 + 1592) = *(void *)(a2 + 1592);
  *(void *)(a1 + 1608) = *(void *)(a2 + 1608);
  *(void *)(a1 + 1624) = *(void *)(a2 + 1624);
  *(void *)(a1 + 1640) = *(void *)(a2 + 1640);
  *(void *)(a1 + 1656) = *(void *)(a2 + 1656);
  *(void *)(a1 + 1672) = *(void *)(a2 + 1672);
  *(void *)(a1 + 1688) = *(void *)(a2 + 1688);
  *(void *)(a1 + 1704) = *(void *)(a2 + 1704);
  *(void *)(a1 + 1720) = *(void *)(a2 + 1720);
  *(void *)(a1 + 1736) = *(void *)(a2 + 1736);
  *(void *)(a1 + 1752) = *(void *)(a2 + 1752);
  *(void *)(a1 + 1768) = *(void *)(a2 + 1768);
  *(void *)(a1 + 1784) = *(void *)(a2 + 1784);
  *(void *)(a1 + 1800) = *(void *)(a2 + 1800);
  *(void *)(a1 + 1816) = *(void *)(a2 + 1816);
  *(void *)(a1 + 1832) = *(void *)(a2 + 1832);
  *(void *)(a1 + 1848) = *(void *)(a2 + 1848);
  *(void *)(a1 + 1864) = *(void *)(a2 + 1864);
  *(void *)(a1 + 1880) = *(void *)(a2 + 1880);
  *(void *)(a1 + 1896) = *(void *)(a2 + 1896);
  *(void *)(a1 + 1912) = *(void *)(a2 + 1912);
  *(void *)(a1 + 1928) = *(void *)(a2 + 1928);
  *(void *)(a1 + 1944) = *(void *)(a2 + 1944);
  *(void *)(a1 + 1960) = *(void *)(a2 + 1960);
  *(void *)(a1 + 1976) = *(void *)(a2 + 1976);
  *(void *)(a1 + 1992) = *(void *)(a2 + 1992);
  *(void *)(a1 + 2008) = *(void *)(a2 + 2008);
  *(void *)(a1 + 2024) = *(void *)(a2 + 2024);
  *(void *)(a1 + 2040) = *(void *)(a2 + 2040);
  *(void *)(a1 + 2056) = *(void *)(a2 + 2056);
  *(void *)(a1 + 2072) = *(void *)(a2 + 2072);
  *(void *)(a1 + 2088) = *(void *)(a2 + 2088);
  *(void *)(a1 + 2104) = *(void *)(a2 + 2104);
  *(void *)(a1 + 2120) = *(void *)(a2 + 2120);
  *(void *)(a1 + 2136) = *(void *)(a2 + 2136);
  *(void *)(a1 + 2152) = *(void *)(a2 + 2152);
  *(void *)(a1 + 2168) = *(void *)(a2 + 2168);
  *(void *)(a1 + 2184) = *(void *)(a2 + 2184);
  *(void *)(a1 + 2200) = *(void *)(a2 + 2200);
  *(void *)(a1 + 2216) = *(void *)(a2 + 2216);
  *(void *)(a1 + 2232) = *(void *)(a2 + 2232);
  *(void *)(a1 + 2248) = *(void *)(a2 + 2248);
  *(void *)(a1 + 2264) = *(void *)(a2 + 2264);
  *(void *)(a1 + 2280) = *(void *)(a2 + 2280);
  *(void *)(a1 + 2296) = *(void *)(a2 + 2296);
  *(void *)(a1 + 2312) = *(void *)(a2 + 2312);
  *(void *)(a1 + 2328) = *(void *)(a2 + 2328);
  *(void *)(a1 + 2344) = *(void *)(a2 + 2344);
  *(void *)(a1 + 2360) = *(void *)(a2 + 2360);
  *(void *)(a1 + 2376) = *(void *)(a2 + 2376);
  *(void *)(a1 + 2392) = *(void *)(a2 + 2392);
  *(void *)(a1 + 2408) = *(void *)(a2 + 2408);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SafetyMonitorSchema(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v4;
  uint64_t v5 = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = v5;
  uint64_t v6 = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 168) = v6;
  uint64_t v7 = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 184) = v7;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 216) = v8;
  uint64_t v9 = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 232) = v9;
  uint64_t v10 = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(void *)(a1 + 248) = v10;
  uint64_t v11 = *(void *)(a2 + 264);
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  *(void *)(a1 + 264) = v11;
  uint64_t v12 = *(void *)(a2 + 280);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(void *)(a1 + 280) = v12;
  uint64_t v13 = *(void *)(a2 + 296);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(void *)(a1 + 296) = v13;
  uint64_t v14 = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 312) = v14;
  uint64_t v15 = *(void *)(a2 + 328);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(void *)(a1 + 328) = v15;
  uint64_t v16 = *(void *)(a2 + 344);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(void *)(a1 + 344) = v16;
  uint64_t v17 = *(void *)(a2 + 360);
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  *(void *)(a1 + 360) = v17;
  uint64_t v18 = *(void *)(a2 + 376);
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  *(void *)(a1 + 376) = v18;
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 752) = *(void *)(a2 + 752);
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  *(void *)(a1 + 776) = *(void *)(a2 + 776);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 784) = *(void *)(a2 + 784);
  *(void *)(a1 + 792) = *(void *)(a2 + 792);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  *(void *)(a1 + 808) = *(void *)(a2 + 808);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 880) = *(void *)(a2 + 880);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  *(void *)(a1 + 920) = *(void *)(a2 + 920);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 928) = *(void *)(a2 + 928);
  *(void *)(a1 + 936) = *(void *)(a2 + 936);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 944) = *(void *)(a2 + 944);
  *(void *)(a1 + 952) = *(void *)(a2 + 952);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 976) = *(void *)(a2 + 976);
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1040) = *(void *)(a2 + 1040);
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
  *(void *)(a1 + 1096) = *(void *)(a2 + 1096);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
  *(void *)(a1 + 1128) = *(void *)(a2 + 1128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1136) = *(void *)(a2 + 1136);
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
  *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1200) = *(void *)(a2 + 1200);
  *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1216) = *(void *)(a2 + 1216);
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1232) = *(void *)(a2 + 1232);
  *(void *)(a1 + 1240) = *(void *)(a2 + 1240);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  *(void *)(a1 + 1256) = *(void *)(a2 + 1256);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1264) = *(void *)(a2 + 1264);
  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  *(void *)(a1 + 1288) = *(void *)(a2 + 1288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1296) = *(void *)(a2 + 1296);
  *(void *)(a1 + 1304) = *(void *)(a2 + 1304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1312) = *(void *)(a2 + 1312);
  *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1328) = *(void *)(a2 + 1328);
  *(void *)(a1 + 1336) = *(void *)(a2 + 1336);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  *(void *)(a1 + 1352) = *(void *)(a2 + 1352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1360) = *(void *)(a2 + 1360);
  *(void *)(a1 + 1368) = *(void *)(a2 + 1368);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1376) = *(void *)(a2 + 1376);
  *(void *)(a1 + 1384) = *(void *)(a2 + 1384);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1392) = *(void *)(a2 + 1392);
  *(void *)(a1 + 1400) = *(void *)(a2 + 1400);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1408) = *(void *)(a2 + 1408);
  *(void *)(a1 + 1416) = *(void *)(a2 + 1416);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1424) = *(void *)(a2 + 1424);
  *(void *)(a1 + 1432) = *(void *)(a2 + 1432);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1440) = *(void *)(a2 + 1440);
  *(void *)(a1 + 1448) = *(void *)(a2 + 1448);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1456) = *(void *)(a2 + 1456);
  *(void *)(a1 + 1464) = *(void *)(a2 + 1464);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1472) = *(void *)(a2 + 1472);
  *(void *)(a1 + 1480) = *(void *)(a2 + 1480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  *(void *)(a1 + 1496) = *(void *)(a2 + 1496);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
  *(void *)(a1 + 1512) = *(void *)(a2 + 1512);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1520) = *(void *)(a2 + 1520);
  *(void *)(a1 + 1528) = *(void *)(a2 + 1528);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1536) = *(void *)(a2 + 1536);
  *(void *)(a1 + 1544) = *(void *)(a2 + 1544);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1552) = *(void *)(a2 + 1552);
  *(void *)(a1 + 1560) = *(void *)(a2 + 1560);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1568) = *(void *)(a2 + 1568);
  *(void *)(a1 + 1576) = *(void *)(a2 + 1576);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1584) = *(void *)(a2 + 1584);
  *(void *)(a1 + 1592) = *(void *)(a2 + 1592);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1600) = *(void *)(a2 + 1600);
  *(void *)(a1 + 1608) = *(void *)(a2 + 1608);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  *(void *)(a1 + 1624) = *(void *)(a2 + 1624);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1632) = *(void *)(a2 + 1632);
  *(void *)(a1 + 1640) = *(void *)(a2 + 1640);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1648) = *(void *)(a2 + 1648);
  *(void *)(a1 + 1656) = *(void *)(a2 + 1656);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1664) = *(void *)(a2 + 1664);
  *(void *)(a1 + 1672) = *(void *)(a2 + 1672);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1680) = *(void *)(a2 + 1680);
  *(void *)(a1 + 1688) = *(void *)(a2 + 1688);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1696) = *(void *)(a2 + 1696);
  *(void *)(a1 + 1704) = *(void *)(a2 + 1704);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1712) = *(void *)(a2 + 1712);
  *(void *)(a1 + 1720) = *(void *)(a2 + 1720);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1728) = *(void *)(a2 + 1728);
  *(void *)(a1 + 1736) = *(void *)(a2 + 1736);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1744) = *(void *)(a2 + 1744);
  *(void *)(a1 + 1752) = *(void *)(a2 + 1752);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1760) = *(void *)(a2 + 1760);
  *(void *)(a1 + 1768) = *(void *)(a2 + 1768);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1776) = *(void *)(a2 + 1776);
  *(void *)(a1 + 1784) = *(void *)(a2 + 1784);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1792) = *(void *)(a2 + 1792);
  *(void *)(a1 + 1800) = *(void *)(a2 + 1800);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1808) = *(void *)(a2 + 1808);
  *(void *)(a1 + 1816) = *(void *)(a2 + 1816);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1824) = *(void *)(a2 + 1824);
  *(void *)(a1 + 1832) = *(void *)(a2 + 1832);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1840) = *(void *)(a2 + 1840);
  *(void *)(a1 + 1848) = *(void *)(a2 + 1848);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1856) = *(void *)(a2 + 1856);
  *(void *)(a1 + 1864) = *(void *)(a2 + 1864);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1872) = *(void *)(a2 + 1872);
  *(void *)(a1 + 1880) = *(void *)(a2 + 1880);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1888) = *(void *)(a2 + 1888);
  *(void *)(a1 + 1896) = *(void *)(a2 + 1896);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1904) = *(void *)(a2 + 1904);
  *(void *)(a1 + 1912) = *(void *)(a2 + 1912);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1920) = *(void *)(a2 + 1920);
  *(void *)(a1 + 1928) = *(void *)(a2 + 1928);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1936) = *(void *)(a2 + 1936);
  *(void *)(a1 + 1944) = *(void *)(a2 + 1944);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1952) = *(void *)(a2 + 1952);
  *(void *)(a1 + 1960) = *(void *)(a2 + 1960);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1968) = *(void *)(a2 + 1968);
  *(void *)(a1 + 1976) = *(void *)(a2 + 1976);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1984) = *(void *)(a2 + 1984);
  *(void *)(a1 + 1992) = *(void *)(a2 + 1992);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2000) = *(void *)(a2 + 2000);
  *(void *)(a1 + 2008) = *(void *)(a2 + 2008);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2016) = *(void *)(a2 + 2016);
  *(void *)(a1 + 2024) = *(void *)(a2 + 2024);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2032) = *(void *)(a2 + 2032);
  *(void *)(a1 + 2040) = *(void *)(a2 + 2040);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2048) = *(void *)(a2 + 2048);
  *(void *)(a1 + 2056) = *(void *)(a2 + 2056);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2064) = *(void *)(a2 + 2064);
  *(void *)(a1 + 2072) = *(void *)(a2 + 2072);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2080) = *(void *)(a2 + 2080);
  *(void *)(a1 + 2088) = *(void *)(a2 + 2088);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2096) = *(void *)(a2 + 2096);
  *(void *)(a1 + 2104) = *(void *)(a2 + 2104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2112) = *(void *)(a2 + 2112);
  *(void *)(a1 + 2120) = *(void *)(a2 + 2120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2128) = *(void *)(a2 + 2128);
  *(void *)(a1 + 2136) = *(void *)(a2 + 2136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2144) = *(void *)(a2 + 2144);
  *(void *)(a1 + 2152) = *(void *)(a2 + 2152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2160) = *(void *)(a2 + 2160);
  *(void *)(a1 + 2168) = *(void *)(a2 + 2168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2176) = *(void *)(a2 + 2176);
  *(void *)(a1 + 2184) = *(void *)(a2 + 2184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2192) = *(void *)(a2 + 2192);
  *(void *)(a1 + 2200) = *(void *)(a2 + 2200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2208) = *(void *)(a2 + 2208);
  *(void *)(a1 + 2216) = *(void *)(a2 + 2216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2224) = *(void *)(a2 + 2224);
  *(void *)(a1 + 2232) = *(void *)(a2 + 2232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2240) = *(void *)(a2 + 2240);
  *(void *)(a1 + 2248) = *(void *)(a2 + 2248);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2256) = *(void *)(a2 + 2256);
  *(void *)(a1 + 2264) = *(void *)(a2 + 2264);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2272) = *(void *)(a2 + 2272);
  *(void *)(a1 + 2280) = *(void *)(a2 + 2280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2288) = *(void *)(a2 + 2288);
  *(void *)(a1 + 2296) = *(void *)(a2 + 2296);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2304) = *(void *)(a2 + 2304);
  *(void *)(a1 + 2312) = *(void *)(a2 + 2312);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2320) = *(void *)(a2 + 2320);
  *(void *)(a1 + 2328) = *(void *)(a2 + 2328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2336) = *(void *)(a2 + 2336);
  *(void *)(a1 + 2344) = *(void *)(a2 + 2344);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2352) = *(void *)(a2 + 2352);
  *(void *)(a1 + 2360) = *(void *)(a2 + 2360);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2368) = *(void *)(a2 + 2368);
  *(void *)(a1 + 2376) = *(void *)(a2 + 2376);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2384) = *(void *)(a2 + 2384);
  *(void *)(a1 + 2392) = *(void *)(a2 + 2392);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2400) = *(void *)(a2 + 2400);
  *(void *)(a1 + 2408) = *(void *)(a2 + 2408);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for SafetyMonitorSchema(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x970uLL);
}

uint64_t assignWithTake for SafetyMonitorSchema(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  uint64_t v11 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v11;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(unsigned char *)(a1 + 240) = *(unsigned char *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(unsigned char *)(a1 + 272) = *(unsigned char *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  uint64_t v12 = *(void *)(a2 + 280);
  *(unsigned char *)(a1 + 288) = *(unsigned char *)(a2 + 288);
  *(void *)(a1 + 280) = v12;
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(unsigned char *)(a1 + 352) = *(unsigned char *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(unsigned char *)(a1 + 368) = *(unsigned char *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(unsigned char *)(a1 + 384) = *(unsigned char *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  uint64_t v13 = *(void *)(a2 + 400);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 400) = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v14;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 424) = *(unsigned char *)(a2 + 424);
  uint64_t v15 = *(void *)(a2 + 440);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a1 + 440) = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 456);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(void *)(a1 + 456) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 472);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a1 + 472) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 488);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  *(void *)(a1 + 488) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 504);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a1 + 504) = v19;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 512) = *(void *)(a2 + 512);
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 528) = *(void *)(a2 + 528);
  *(void *)(a1 + 536) = *(void *)(a2 + 536);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 640) = *(void *)(a2 + 640);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 656) = *(void *)(a2 + 656);
  *(void *)(a1 + 664) = *(void *)(a2 + 664);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 672) = *(void *)(a2 + 672);
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 704) = *(void *)(a2 + 704);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 720) = *(void *)(a2 + 720);
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 752) = *(void *)(a2 + 752);
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  *(void *)(a1 + 776) = *(void *)(a2 + 776);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 784) = *(void *)(a2 + 784);
  *(void *)(a1 + 792) = *(void *)(a2 + 792);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 800) = *(void *)(a2 + 800);
  *(void *)(a1 + 808) = *(void *)(a2 + 808);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 816) = *(void *)(a2 + 816);
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 848) = *(void *)(a2 + 848);
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 864) = *(void *)(a2 + 864);
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 880) = *(void *)(a2 + 880);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  *(void *)(a1 + 920) = *(void *)(a2 + 920);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 928) = *(void *)(a2 + 928);
  *(void *)(a1 + 936) = *(void *)(a2 + 936);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 944) = *(void *)(a2 + 944);
  *(void *)(a1 + 952) = *(void *)(a2 + 952);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 976) = *(void *)(a2 + 976);
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1024) = *(void *)(a2 + 1024);
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1040) = *(void *)(a2 + 1040);
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1056) = *(void *)(a2 + 1056);
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1088) = *(void *)(a2 + 1088);
  *(void *)(a1 + 1096) = *(void *)(a2 + 1096);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1120) = *(void *)(a2 + 1120);
  *(void *)(a1 + 1128) = *(void *)(a2 + 1128);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1136) = *(void *)(a2 + 1136);
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
  *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1200) = *(void *)(a2 + 1200);
  *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1216) = *(void *)(a2 + 1216);
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1232) = *(void *)(a2 + 1232);
  *(void *)(a1 + 1240) = *(void *)(a2 + 1240);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  *(void *)(a1 + 1256) = *(void *)(a2 + 1256);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1264) = *(void *)(a2 + 1264);
  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  *(void *)(a1 + 1288) = *(void *)(a2 + 1288);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1296) = *(void *)(a2 + 1296);
  *(void *)(a1 + 1304) = *(void *)(a2 + 1304);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1312) = *(void *)(a2 + 1312);
  *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1328) = *(void *)(a2 + 1328);
  *(void *)(a1 + 1336) = *(void *)(a2 + 1336);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  *(void *)(a1 + 1352) = *(void *)(a2 + 1352);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1360) = *(void *)(a2 + 1360);
  *(void *)(a1 + 1368) = *(void *)(a2 + 1368);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1376) = *(void *)(a2 + 1376);
  *(void *)(a1 + 1384) = *(void *)(a2 + 1384);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1392) = *(void *)(a2 + 1392);
  *(void *)(a1 + 1400) = *(void *)(a2 + 1400);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1408) = *(void *)(a2 + 1408);
  *(void *)(a1 + 1416) = *(void *)(a2 + 1416);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1424) = *(void *)(a2 + 1424);
  *(void *)(a1 + 1432) = *(void *)(a2 + 1432);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1440) = *(void *)(a2 + 1440);
  *(void *)(a1 + 1448) = *(void *)(a2 + 1448);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1456) = *(void *)(a2 + 1456);
  *(void *)(a1 + 1464) = *(void *)(a2 + 1464);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1472) = *(void *)(a2 + 1472);
  *(void *)(a1 + 1480) = *(void *)(a2 + 1480);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  *(void *)(a1 + 1496) = *(void *)(a2 + 1496);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
  *(void *)(a1 + 1512) = *(void *)(a2 + 1512);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1520) = *(void *)(a2 + 1520);
  *(void *)(a1 + 1528) = *(void *)(a2 + 1528);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1536) = *(void *)(a2 + 1536);
  *(void *)(a1 + 1544) = *(void *)(a2 + 1544);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1552) = *(void *)(a2 + 1552);
  *(void *)(a1 + 1560) = *(void *)(a2 + 1560);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1568) = *(void *)(a2 + 1568);
  *(void *)(a1 + 1576) = *(void *)(a2 + 1576);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1584) = *(void *)(a2 + 1584);
  *(void *)(a1 + 1592) = *(void *)(a2 + 1592);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1600) = *(void *)(a2 + 1600);
  *(void *)(a1 + 1608) = *(void *)(a2 + 1608);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  *(void *)(a1 + 1624) = *(void *)(a2 + 1624);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1632) = *(void *)(a2 + 1632);
  *(void *)(a1 + 1640) = *(void *)(a2 + 1640);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1648) = *(void *)(a2 + 1648);
  *(void *)(a1 + 1656) = *(void *)(a2 + 1656);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1664) = *(void *)(a2 + 1664);
  *(void *)(a1 + 1672) = *(void *)(a2 + 1672);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1680) = *(void *)(a2 + 1680);
  *(void *)(a1 + 1688) = *(void *)(a2 + 1688);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1696) = *(void *)(a2 + 1696);
  *(void *)(a1 + 1704) = *(void *)(a2 + 1704);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1712) = *(void *)(a2 + 1712);
  *(void *)(a1 + 1720) = *(void *)(a2 + 1720);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1728) = *(void *)(a2 + 1728);
  *(void *)(a1 + 1736) = *(void *)(a2 + 1736);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1744) = *(void *)(a2 + 1744);
  *(void *)(a1 + 1752) = *(void *)(a2 + 1752);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1760) = *(void *)(a2 + 1760);
  *(void *)(a1 + 1768) = *(void *)(a2 + 1768);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1776) = *(void *)(a2 + 1776);
  *(void *)(a1 + 1784) = *(void *)(a2 + 1784);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1792) = *(void *)(a2 + 1792);
  *(void *)(a1 + 1800) = *(void *)(a2 + 1800);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1808) = *(void *)(a2 + 1808);
  *(void *)(a1 + 1816) = *(void *)(a2 + 1816);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1824) = *(void *)(a2 + 1824);
  *(void *)(a1 + 1832) = *(void *)(a2 + 1832);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1840) = *(void *)(a2 + 1840);
  *(void *)(a1 + 1848) = *(void *)(a2 + 1848);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1856) = *(void *)(a2 + 1856);
  *(void *)(a1 + 1864) = *(void *)(a2 + 1864);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1872) = *(void *)(a2 + 1872);
  *(void *)(a1 + 1880) = *(void *)(a2 + 1880);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1888) = *(void *)(a2 + 1888);
  *(void *)(a1 + 1896) = *(void *)(a2 + 1896);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1904) = *(void *)(a2 + 1904);
  *(void *)(a1 + 1912) = *(void *)(a2 + 1912);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1920) = *(void *)(a2 + 1920);
  *(void *)(a1 + 1928) = *(void *)(a2 + 1928);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1936) = *(void *)(a2 + 1936);
  *(void *)(a1 + 1944) = *(void *)(a2 + 1944);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1952) = *(void *)(a2 + 1952);
  *(void *)(a1 + 1960) = *(void *)(a2 + 1960);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1968) = *(void *)(a2 + 1968);
  *(void *)(a1 + 1976) = *(void *)(a2 + 1976);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1984) = *(void *)(a2 + 1984);
  *(void *)(a1 + 1992) = *(void *)(a2 + 1992);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2000) = *(void *)(a2 + 2000);
  *(void *)(a1 + 2008) = *(void *)(a2 + 2008);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2016) = *(void *)(a2 + 2016);
  *(void *)(a1 + 2024) = *(void *)(a2 + 2024);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2032) = *(void *)(a2 + 2032);
  *(void *)(a1 + 2040) = *(void *)(a2 + 2040);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2048) = *(void *)(a2 + 2048);
  *(void *)(a1 + 2056) = *(void *)(a2 + 2056);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2064) = *(void *)(a2 + 2064);
  *(void *)(a1 + 2072) = *(void *)(a2 + 2072);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2080) = *(void *)(a2 + 2080);
  *(void *)(a1 + 2088) = *(void *)(a2 + 2088);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2096) = *(void *)(a2 + 2096);
  *(void *)(a1 + 2104) = *(void *)(a2 + 2104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2112) = *(void *)(a2 + 2112);
  *(void *)(a1 + 2120) = *(void *)(a2 + 2120);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2128) = *(void *)(a2 + 2128);
  *(void *)(a1 + 2136) = *(void *)(a2 + 2136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2144) = *(void *)(a2 + 2144);
  *(void *)(a1 + 2152) = *(void *)(a2 + 2152);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2160) = *(void *)(a2 + 2160);
  *(void *)(a1 + 2168) = *(void *)(a2 + 2168);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2176) = *(void *)(a2 + 2176);
  *(void *)(a1 + 2184) = *(void *)(a2 + 2184);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2192) = *(void *)(a2 + 2192);
  *(void *)(a1 + 2200) = *(void *)(a2 + 2200);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2208) = *(void *)(a2 + 2208);
  *(void *)(a1 + 2216) = *(void *)(a2 + 2216);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2224) = *(void *)(a2 + 2224);
  *(void *)(a1 + 2232) = *(void *)(a2 + 2232);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2240) = *(void *)(a2 + 2240);
  *(void *)(a1 + 2248) = *(void *)(a2 + 2248);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2256) = *(void *)(a2 + 2256);
  *(void *)(a1 + 2264) = *(void *)(a2 + 2264);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2272) = *(void *)(a2 + 2272);
  *(void *)(a1 + 2280) = *(void *)(a2 + 2280);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2288) = *(void *)(a2 + 2288);
  *(void *)(a1 + 2296) = *(void *)(a2 + 2296);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2304) = *(void *)(a2 + 2304);
  *(void *)(a1 + 2312) = *(void *)(a2 + 2312);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2320) = *(void *)(a2 + 2320);
  *(void *)(a1 + 2328) = *(void *)(a2 + 2328);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2336) = *(void *)(a2 + 2336);
  *(void *)(a1 + 2344) = *(void *)(a2 + 2344);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2352) = *(void *)(a2 + 2352);
  *(void *)(a1 + 2360) = *(void *)(a2 + 2360);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2368) = *(void *)(a2 + 2368);
  *(void *)(a1 + 2376) = *(void *)(a2 + 2376);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2384) = *(void *)(a2 + 2384);
  *(void *)(a1 + 2392) = *(void *)(a2 + 2392);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2400) = *(void *)(a2 + 2400);
  *(void *)(a1 + 2408) = *(void *)(a2 + 2408);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SafetyMonitorSchema(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 2416)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SafetyMonitorSchema(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 2408) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 2416) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 2416) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SafetyMonitorSchema()
{
  return &type metadata for SafetyMonitorSchema;
}

uint64_t getEnumTagSinglePayload for SafetyMonitorSchema.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x68) {
    goto LABEL_17;
  }
  if (a2 + 152 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 152) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 152;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 152;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 152;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x99;
  int v8 = v6 - 153;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SafetyMonitorSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 152 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 152) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x68) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x67)
  {
    unsigned int v6 = ((a2 - 104) >> 8) + 1;
    *uint64_t result = a2 - 104;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002AC88);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 - 104;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SafetyMonitorSchema.CodingKeys()
{
  return &type metadata for SafetyMonitorSchema.CodingKeys;
}

unint64_t sub_10002ACC4()
{
  unint64_t result = qword_100090328;
  if (!qword_100090328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090328);
  }
  return result;
}

unint64_t sub_10002AD1C()
{
  unint64_t result = qword_100090330;
  if (!qword_100090330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090330);
  }
  return result;
}

unint64_t sub_10002AD74()
{
  unint64_t result = qword_100090338;
  if (!qword_100090338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090338);
  }
  return result;
}

uint64_t sub_10002ADC8(char *a1, char *a2)
{
  return sub_10006A920(*a1, *a2);
}

Swift::Int sub_10002ADD4()
{
  return sub_100078650();
}

uint64_t sub_10002AE30()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10002AE70()
{
  return sub_100078650();
}

uint64_t sub_10002AEC8@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10002C7AC(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_10002AEF8(void *a1@<X8>)
{
  *a1 = qword_10007B6E8[*v1];
  a1[1] = 0xE100000000000000;
}

uint64_t sub_10002AF14()
{
  return qword_10007B6E8[*v0];
}

uint64_t sub_10002AF2C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10002C7AC(a1, a2);
  *a3 = result;
  return result;
}

void sub_10002AF54(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_10002AF60(uint64_t a1)
{
  unint64_t v2 = sub_10002B214();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002AF9C(uint64_t a1)
{
  unint64_t v2 = sub_10002B214();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSSessionCancelSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002214(&qword_100090348);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000029D8(a1, a1[3]);
  sub_10002B214();
  sub_1000786A0();
  LOBYTE(v12) = 0;
  sub_100078580();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    sub_100078540();
    LOBYTE(v12) = 2;
    sub_100078540();
    uint64_t v9 = type metadata accessor for IDSSessionCancelSchema();
    LOBYTE(v12) = 3;
    sub_100077CC0();
    sub_10002B6E8(&qword_100090358);
    sub_100078510();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v9 + 32));
    v11[15] = 4;
    sub_100003DA8();
    sub_100078510();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10002B214()
{
  unint64_t result = qword_100090350;
  if (!qword_100090350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090350);
  }
  return result;
}

uint64_t type metadata accessor for IDSSessionCancelSchema()
{
  uint64_t result = qword_1000903D0;
  if (!qword_1000903D0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t IDSSessionCancelSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = sub_100002214(&qword_100090360);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_100002214(&qword_100090368);
  uint64_t v7 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for IDSSessionCancelSchema();
  __chkstk_darwin(v10);
  long long v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = a1[3];
  uint64_t v22 = a1;
  sub_1000029D8(a1, v13);
  sub_10002B214();
  sub_100078690();
  if (v2) {
    return sub_100002E34((uint64_t)v22);
  }
  uint64_t v14 = v7;
  LOBYTE(v23) = 0;
  uint64_t v15 = v21;
  *long long v12 = sub_100078480();
  LOBYTE(v23) = 1;
  v12[1] = sub_100078440();
  v12[2] = v16;
  LOBYTE(v23) = 2;
  v12[3] = sub_100078440();
  v12[4] = v17;
  sub_100077CC0();
  LOBYTE(v23) = 3;
  sub_10002B6E8(&qword_100090370);
  sub_100078410();
  sub_10002B72C((uint64_t)v6, (uint64_t)v12 + *(int *)(v10 + 28));
  char v24 = 4;
  sub_100004864();
  sub_100078410();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v15);
  *(_OWORD *)((char *)v12 + *(int *)(v10 + 32)) = v23;
  sub_10002B794((uint64_t)v12, v20);
  sub_100002E34((uint64_t)v22);
  return sub_10002B7F8((uint64_t)v12);
}

uint64_t sub_10002B688(uint64_t a1)
{
  uint64_t v2 = sub_100002214(&qword_100090360);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002B6E8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100077CC0();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002B72C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002214(&qword_100090360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002B794(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSSessionCancelSchema();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002B7F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSSessionCancelSchema();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002B854@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSSessionCancelSchema.init(from:)(a1, a2);
}

uint64_t sub_10002B86C(void *a1)
{
  return IDSSessionCancelSchema.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSSessionCancelSchema(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    a1[4] = a2[4];
    uint64_t v8 = *(int *)(a3 + 28);
    __dst = (char *)a1 + v8;
    uint64_t v9 = (char *)a2 + v8;
    uint64_t v10 = sub_100077CC0();
    uint64_t v11 = *(void *)(v10 - 8);
    long long v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v9, 1, v10))
    {
      uint64_t v13 = sub_100002214(&qword_100090360);
      memcpy(__dst, v9, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
    }
    uint64_t v15 = *(int *)(a3 + 32);
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    unint64_t v18 = *((void *)v17 + 1);
    if (v18 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    }
    else
    {
      uint64_t v19 = *(void *)v17;
      sub_100004214(*(void *)v17, *((void *)v17 + 1));
      *(void *)uint64_t v16 = v19;
      *((void *)v16 + 1) = v18;
    }
  }
  return v4;
}

uint64_t destroy for IDSSessionCancelSchema(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_100077CC0();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(a2 + 32));
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15)
  {
    uint64_t v10 = *v8;
    return sub_1000042CC(v10, v9);
  }
  return result;
}

uint64_t initializeWithCopy for IDSSessionCancelSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_100077CC0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_100002214(&qword_100090360);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (uint64_t *)(a2 + v13);
  unint64_t v16 = v15[1];
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v17 = *v15;
    sub_100004214(*v15, v15[1]);
    *(void *)uint64_t v14 = v17;
    *(void *)(v14 + 8) = v16;
  }
  return a1;
}

void *assignWithCopy for IDSSessionCancelSchema(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100077CC0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100002214(&qword_100090360);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 32);
  unint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  unint64_t v18 = *(void *)((char *)a2 + v15 + 8);
  if (*(void *)((char *)a1 + v15 + 8) >> 60 != 15)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v20 = *v17;
      sub_100004214(v20, v18);
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      *unint64_t v16 = v20;
      v16[1] = v18;
      sub_1000042CC(v21, v22);
      return a1;
    }
    sub_1000044A0((uint64_t)v16);
    goto LABEL_12;
  }
  if (v18 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    return a1;
  }
  uint64_t v19 = *v17;
  sub_100004214(v19, v18);
  *unint64_t v16 = v19;
  v16[1] = v18;
  return a1;
}

uint64_t initializeWithTake for IDSSessionCancelSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_100077CC0();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100002214(&qword_100090360);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)(a1 + *(int *)(a3 + 32)) = *(_OWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for IDSSessionCancelSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = sub_100077CC0();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100002214(&qword_100090360);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 32);
  uint64_t v17 = (uint64_t *)(a1 + v16);
  unint64_t v18 = (uint64_t *)(a2 + v16);
  unint64_t v19 = *(void *)(a1 + v16 + 8);
  if (v19 >> 60 != 15)
  {
    unint64_t v20 = v18[1];
    if (v20 >> 60 != 15)
    {
      uint64_t v21 = *v17;
      *uint64_t v17 = *v18;
      v17[1] = v20;
      sub_1000042CC(v21, v19);
      return a1;
    }
    sub_1000044A0((uint64_t)v17);
  }
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSSessionCancelSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002C294);
}

uint64_t sub_10002C294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100002214(&qword_100090360);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for IDSSessionCancelSchema(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002C35C);
}

uint64_t sub_10002C35C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100002214(&qword_100090360);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 28);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10002C408()
{
  sub_10002C4B8();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_10002C4B8()
{
  if (!qword_1000903E0)
  {
    sub_100077CC0();
    unint64_t v0 = sub_1000782E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1000903E0);
    }
  }
}

uint64_t getEnumTagSinglePayload for IDSSessionCancelSchema.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IDSSessionCancelSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002C66CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSSessionCancelSchema.CodingKeys()
{
  return &type metadata for IDSSessionCancelSchema.CodingKeys;
}

unint64_t sub_10002C6A8()
{
  unint64_t result = qword_100090420;
  if (!qword_100090420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090420);
  }
  return result;
}

unint64_t sub_10002C700()
{
  unint64_t result = qword_100090428;
  if (!qword_100090428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090428);
  }
  return result;
}

unint64_t sub_10002C758()
{
  unint64_t result = qword_100090430;
  if (!qword_100090430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090430);
  }
  return result;
}

uint64_t sub_10002C7AC(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_100089D98;
  v6._object = a2;
  unint64_t v4 = sub_100078390(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 5) {
    return 5;
  }
  else {
    return v4;
  }
}

unint64_t sub_10002C7F8()
{
  unint64_t result = qword_100090438;
  if (!qword_100090438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090438);
  }
  return result;
}

uint64_t sub_10002C84C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10006A7BC(*a1, *a2);
}

Swift::Int sub_10002C858()
{
  return sub_100078650();
}

uint64_t sub_10002C8EC()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10002C96C()
{
  return sub_100078650();
}

uint64_t sub_10002C9FC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10002E044(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_10002CA2C(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  unint64_t v4 = 0xE400000000000000;
  uint64_t v5 = 1702125924;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6E6F73616572;
    unint64_t v4 = 0xE600000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x656C746974;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_10002CA7C()
{
  uint64_t v1 = 1702125924;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6F73616572;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656C746974;
  }
}

uint64_t sub_10002CAC8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10002E044(a1, a2);
  *a3 = result;
  return result;
}

void sub_10002CAF0(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10002CAFC(uint64_t a1)
{
  unint64_t v2 = sub_10002CD60();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002CB38(uint64_t a1)
{
  unint64_t v2 = sub_10002CD60();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSSampleInvitationSchema.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100002214(&qword_100090440);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  BOOL v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000029D8(a1, a1[3]);
  sub_10002CD60();
  sub_1000786A0();
  v8[15] = 0;
  sub_1000784C0();
  if (!v1)
  {
    type metadata accessor for IDSSampleInvitationSchema();
    v8[14] = 1;
    sub_100077B90();
    sub_10002D2A0(&qword_100090240, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_100078510();
    v8[13] = 2;
    sub_1000784C0();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_10002CD60()
{
  unint64_t result = qword_100090448;
  if (!qword_100090448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090448);
  }
  return result;
}

uint64_t type metadata accessor for IDSSampleInvitationSchema()
{
  uint64_t result = qword_1000904C0;
  if (!qword_1000904C0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t IDSSampleInvitationSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v4 = sub_100002214(&qword_100090248);
  __chkstk_darwin(v4 - 8);
  BOOL v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100002214(&qword_100090450);
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v26 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for IDSSampleInvitationSchema();
  __chkstk_darwin(v10);
  int v12 = (uint64_t *)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000029D8(a1, a1[3]);
  sub_10002CD60();
  sub_100078690();
  if (v2) {
    return sub_100002E34((uint64_t)a1);
  }
  uint64_t v23 = v10;
  uint64_t v13 = v25;
  char v29 = 0;
  uint64_t v14 = (uint64_t)v12;
  *int v12 = sub_1000783C0();
  v12[1] = v15;
  sub_100077B90();
  char v28 = 1;
  sub_10002D2A0(&qword_100090258, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v16 = (uint64_t)v6;
  sub_100078410();
  uint64_t v17 = v23;
  sub_10000B0A4(v16, v14 + *(int *)(v23 + 20));
  char v27 = 2;
  uint64_t v18 = sub_1000783C0();
  uint64_t v20 = v19;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v9, v26);
  uint64_t v21 = (uint64_t *)(v14 + *(int *)(v17 + 24));
  *uint64_t v21 = v18;
  v21[1] = v20;
  sub_10002D150(v14, v24);
  sub_100002E34((uint64_t)a1);
  return sub_10002D1B4(v14);
}

uint64_t sub_10002D150(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSSampleInvitationSchema();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002D1B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSSampleInvitationSchema();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10002D210()
{
  return sub_10002D2A0(&qword_100090458, (void (*)(uint64_t))type metadata accessor for IDSSampleInvitationSchema);
}

uint64_t sub_10002D258()
{
  return sub_10002D2A0(&qword_100090460, (void (*)(uint64_t))type metadata accessor for IDSSampleInvitationSchema);
}

uint64_t sub_10002D2A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002D2E8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSSampleInvitationSchema.init(from:)(a1, a2);
}

uint64_t sub_10002D300(void *a1)
{
  return IDSSampleInvitationSchema.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSSampleInvitationSchema(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_100077B90();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_100002214(&qword_100090248);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = *(int *)(a3 + 24);
    uint64_t v17 = (uint64_t *)((char *)v4 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for IDSSampleInvitationSchema(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_100077B90();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for IDSSampleInvitationSchema(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_100077B90();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_100002214(&qword_100090248);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IDSSampleInvitationSchema(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100077B90();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = sub_100002214(&qword_100090248);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for IDSSampleInvitationSchema(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100077B90();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100002214(&qword_100090248);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for IDSSampleInvitationSchema(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_100077B90();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100002214(&qword_100090248);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSSampleInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002DB90);
}

uint64_t sub_10002DB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100002214(&qword_100090248);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for IDSSampleInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002DC64);
}

uint64_t sub_10002DC64(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v7 = sub_100002214(&qword_100090248);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_10002DD10()
{
  sub_10000BCC0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t getEnumTagSinglePayload for IDSSampleInvitationSchema.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IDSSampleInvitationSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002DF04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSSampleInvitationSchema.CodingKeys()
{
  return &type metadata for IDSSampleInvitationSchema.CodingKeys;
}

unint64_t sub_10002DF40()
{
  unint64_t result = qword_100090500;
  if (!qword_100090500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090500);
  }
  return result;
}

unint64_t sub_10002DF98()
{
  unint64_t result = qword_100090508;
  if (!qword_100090508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090508);
  }
  return result;
}

unint64_t sub_10002DFF0()
{
  unint64_t result = qword_100090510;
  if (!qword_100090510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090510);
  }
  return result;
}

uint64_t sub_10002E044(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_100089E30;
  v6._object = a2;
  unint64_t v4 = sub_100078390(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 3) {
    return 3;
  }
  else {
    return v4;
  }
}

uint64_t sub_10002E090@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v4 = sub_100002214(&qword_100090248);
  __chkstk_darwin(v4 - 8);
  Swift::String v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100077F70();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v31 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100077D90();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  int v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t result = sub_100077F50();
  if (!v2)
  {
    uint64_t v24 = v8;
    uint64_t v25 = v7;
    uint64_t v29 = *a1;
    uint64_t v27 = a1[1];
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
    uint64_t v28 = a1[6];
    uint64_t v18 = type metadata accessor for IDSKCSharingInvitationSchema();
    sub_10002E3B0((uint64_t)a1 + *(int *)(v18 + 32), (uint64_t)v6);
    uint64_t v26 = *(uint64_t *)((char *)a1 + *(int *)(v18 + 36));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v19 = v31;
    sub_100077F60();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    uint64_t v20 = v30;
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v30, v19, v25);
    uint64_t v21 = enum case for IDSDictionaryContext.idsKCSharingInvitation(_:);
    uint64_t v22 = sub_100077DB0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 104))(v20, v21, v22);
  }
  return result;
}

uint64_t sub_10002E3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002214(&qword_100090248);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t IDSCommandResponseSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002214(&qword_100090518);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_10002E7B8();
  sub_1000786A0();
  v12[0] = 0;
  sub_100078570();
  if (!v2)
  {
    v12[0] = 1;
    sub_100078520();
    sub_100003D40(v3 + 24, (uint64_t)v15);
    sub_100003D40((uint64_t)v15, (uint64_t)v12);
    char v11 = 2;
    sub_100003DA8();
    sub_100078510();
    v12[0] = 3;
    sub_1000784F0();
    v12[0] = 4;
    sub_1000784F0();
    sub_100003D40(v3 + 72, (uint64_t)v14);
    sub_100003D40((uint64_t)v14, (uint64_t)v12);
    char v11 = 5;
    sub_100078510();
    v12[0] = 6;
    sub_1000784D0();
    v12[0] = 7;
    sub_1000784D0();
    v12[0] = 8;
    sub_1000784C0();
    v12[0] = 9;
    sub_1000784F0();
    sub_100003D40(v3 + 128, (uint64_t)v13);
    sub_100003D40((uint64_t)v13, (uint64_t)v12);
    char v11 = 10;
    sub_100078510();
    v12[0] = 11;
    sub_1000784D0();
    v12[0] = 12;
    sub_1000784F0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10002E7B8()
{
  unint64_t result = qword_100090520;
  if (!qword_100090520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090520);
  }
  return result;
}

__n128 IDSCommandResponseSchema.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10002EDC4(a1, (uint64_t)v9);
  if (!v2)
  {
    long long v5 = v9[9];
    *(_OWORD *)(a2 + 128) = v9[8];
    *(_OWORD *)(a2 + 144) = v5;
    *(unsigned char *)(a2 + 160) = v10;
    long long v6 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v6;
    long long v7 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v7;
    long long v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
    __n128 result = (__n128)v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_10002E884(char a1)
{
  uint64_t result = 99;
  switch(a1)
  {
    case 1:
      uint64_t result = 105;
      break;
    case 2:
      uint64_t result = 85;
      break;
    case 3:
      uint64_t result = 115;
      break;
    case 4:
      uint64_t result = 21094;
      break;
    case 5:
      uint64_t result = 116;
      break;
    case 6:
      uint64_t result = 0x6E7265746E692D78;
      break;
    case 7:
      uint64_t result = 0x6E6967676F6C2D78;
      break;
    case 8:
      uint64_t result = 6906225;
      break;
    case 9:
      uint64_t result = 7627121;
      break;
    case 10:
      uint64_t result = 1935960433;
      break;
    case 11:
      uint64_t result = 1936945777;
      break;
    case 12:
      uint64_t result = 30321;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10002E99C(char a1)
{
  uint64_t result = 99;
  switch(a1)
  {
    case 1:
      uint64_t result = 105;
      break;
    case 2:
      uint64_t result = 85;
      break;
    case 3:
      uint64_t result = 115;
      break;
    case 4:
      uint64_t result = 21094;
      break;
    case 5:
      uint64_t result = 116;
      break;
    case 6:
      uint64_t result = 0x6E7265746E692D78;
      break;
    case 7:
      uint64_t result = 0x6E6967676F6C2D78;
      break;
    case 8:
      uint64_t result = 6906225;
      break;
    case 9:
      uint64_t result = 7627121;
      break;
    case 10:
      uint64_t result = 1935960433;
      break;
    case 11:
      uint64_t result = 1936945777;
      break;
    case 12:
      uint64_t result = 30321;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10002EAB4(void *a1)
{
  return IDSCommandResponseSchema.encode(to:)(a1);
}

uint64_t sub_10002EB10(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = sub_10002E884(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10002E884(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1000785B0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10002EB9C()
{
  char v1 = *v0;
  sub_100078630();
  sub_10002E884(v1);
  sub_1000781D0();
  swift_bridgeObjectRelease();
  return sub_100078650();
}

uint64_t sub_10002EC00()
{
  sub_10002E884(*v0);
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10002EC54()
{
  char v1 = *v0;
  sub_100078630();
  sub_10002E884(v1);
  sub_1000781D0();
  swift_bridgeObjectRelease();
  return sub_100078650();
}

uint64_t sub_10002ECB4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10002FFAC(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_10002ECE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10002E884(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10002ED10()
{
  return sub_10002E99C(*v0);
}

uint64_t sub_10002ED18@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10002FFAC(a1, a2);
  *a3 = result;
  return result;
}

void sub_10002ED40(unsigned char *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_10002ED4C(uint64_t a1)
{
  unint64_t v2 = sub_10002E7B8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002ED88(uint64_t a1)
{
  unint64_t v2 = sub_10002E7B8();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_10002EDC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002214(&qword_100090540);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  v116 = a1;
  sub_1000029D8(a1, v9);
  sub_10002E7B8();
  sub_100078690();
  if (v2) {
    return (void *)sub_100002E34((uint64_t)v116);
  }
  uint64_t v10 = v6;
  uint64_t v60 = a2;
  LOBYTE(v74) = 0;
  uint64_t v11 = sub_100078470();
  LOBYTE(v74) = 1;
  uint64_t v59 = sub_100078420();
  char v115 = v12 & 1;
  LOBYTE(v63) = 2;
  int v58 = v12;
  unint64_t v13 = sub_100004864();
  sub_100078410();
  unint64_t v56 = v13;
  uint64_t v14 = v74;
  LOBYTE(v74) = 3;
  unint64_t v57 = v75;
  sub_1000048B8(v14, v75);
  uint64_t v54 = sub_1000783F0();
  uint64_t v55 = v14;
  char v113 = v15 & 1;
  LOBYTE(v74) = 4;
  LODWORD(v14) = v15;
  uint64_t v53 = sub_1000783F0();
  int v52 = v14;
  char v111 = v16 & 1;
  LOBYTE(v63) = 5;
  LODWORD(v14) = v16;
  sub_100078410();
  int v50 = v14;
  uint64_t v17 = v74;
  unint64_t v18 = v75;
  LOBYTE(v74) = 6;
  uint64_t v51 = v17;
  sub_1000048B8(v17, v75);
  int v19 = sub_1000783D0();
  unint64_t v62 = v18;
  int v49 = v19;
  uint64_t v20 = v51;
  LOBYTE(v74) = 7;
  int v47 = sub_1000783D0();
  LOBYTE(v74) = 8;
  uint64_t v48 = sub_1000783C0();
  uint64_t v45 = v11;
  LOBYTE(v74) = 9;
  uint64_t v61 = v21;
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_1000783F0();
  int v46 = v23;
  uint64_t v24 = v22;
  char v107 = v23 & 1;
  LOBYTE(v63) = 10;
  sub_100078410();
  uint64_t v25 = v74;
  LOBYTE(v74) = 11;
  unint64_t v56 = v75;
  sub_1000048B8(v25, v75);
  int v44 = sub_1000783D0();
  char v103 = 12;
  uint64_t v43 = sub_1000783F0();
  char v27 = v26;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v5);
  char v28 = v27 & 1;
  char v104 = v27 & 1;
  *(void *)&long long v63 = v45;
  *((void *)&v63 + 1) = v59;
  LOBYTE(v64) = v58 & 1;
  uint64_t v29 = v55;
  unint64_t v30 = v57;
  *((void *)&v64 + 1) = v55;
  *(void *)&long long v65 = v57;
  *((void *)&v65 + 1) = v54;
  LOBYTE(v66) = v52 & 1;
  *((void *)&v66 + 1) = v53;
  LOBYTE(v67) = v50 & 1;
  uint64_t v32 = v61;
  unint64_t v31 = v62;
  *((void *)&v67 + 1) = v20;
  *(void *)&long long v68 = v62;
  BYTE8(v68) = v49;
  BYTE9(v68) = v47;
  *(void *)&long long v69 = v48;
  *((void *)&v69 + 1) = v61;
  uint64_t v42 = v24;
  *(void *)&long long v70 = v24;
  BYTE8(v70) = v46 & 1;
  unint64_t v33 = v56;
  *(void *)&long long v71 = v25;
  *((void *)&v71 + 1) = v56;
  LOBYTE(v72) = v44;
  *((void *)&v72 + 1) = v43;
  char v73 = v28;
  sub_10002FFF8(&v63);
  sub_1000048CC(v25, v33);
  swift_bridgeObjectRelease();
  sub_1000048CC(v20, v31);
  sub_1000048CC(v29, v30);
  sub_100002E34((uint64_t)v116);
  uint64_t v74 = v45;
  unint64_t v75 = v59;
  char v76 = v115;
  *(_DWORD *)uint64_t v77 = *(_DWORD *)v114;
  *(_DWORD *)&v77[3] = *(_DWORD *)&v114[3];
  uint64_t v78 = v29;
  unint64_t v79 = v30;
  uint64_t v80 = v54;
  char v81 = v113;
  *(_DWORD *)uint64_t v82 = *(_DWORD *)v112;
  *(_DWORD *)&v82[3] = *(_DWORD *)&v112[3];
  uint64_t v83 = v53;
  char v84 = v111;
  *(_DWORD *)v85 = *(_DWORD *)v110;
  *(_DWORD *)&v85[3] = *(_DWORD *)&v110[3];
  uint64_t v86 = v20;
  unint64_t v87 = v31;
  char v88 = v49;
  char v89 = v47;
  int v90 = v108;
  __int16 v91 = v109;
  uint64_t v92 = v48;
  uint64_t v93 = v32;
  uint64_t v94 = v42;
  char v95 = v107;
  *(_DWORD *)&v96[3] = *(_DWORD *)&v106[3];
  *(_DWORD *)v96 = *(_DWORD *)v106;
  uint64_t v97 = v25;
  unint64_t v98 = v33;
  char v99 = v44;
  *(_DWORD *)&v100[3] = *(_DWORD *)&v105[3];
  *(_DWORD *)v100 = *(_DWORD *)v105;
  uint64_t v101 = v43;
  char v102 = v104;
  uint64_t result = sub_100030064(&v74);
  long long v35 = v72;
  uint64_t v36 = v60;
  *(_OWORD *)(v60 + 128) = v71;
  *(_OWORD *)(v36 + 144) = v35;
  *(unsigned char *)(v36 + 160) = v73;
  long long v37 = v68;
  *(_OWORD *)(v36 + 64) = v67;
  *(_OWORD *)(v36 + 80) = v37;
  long long v38 = v70;
  *(_OWORD *)(v36 + 96) = v69;
  *(_OWORD *)(v36 + 112) = v38;
  long long v39 = v64;
  *(_OWORD *)uint64_t v36 = v63;
  *(_OWORD *)(v36 + 16) = v39;
  long long v40 = v66;
  *(_OWORD *)(v36 + 32) = v65;
  *(_OWORD *)(v36 + 48) = v40;
  return result;
}

uint64_t destroy for IDSCommandResponseSchema(uint64_t *a1)
{
  unint64_t v2 = a1[4];
  if (v2 >> 60 != 15) {
    sub_1000042CC(a1[3], v2);
  }
  unint64_t v3 = a1[10];
  if (v3 >> 60 != 15) {
    sub_1000042CC(a1[9], v3);
  }
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v5 = a1[17];
  if (v5 >> 60 != 15)
  {
    uint64_t v6 = a1[16];
    return sub_1000042CC(v6, v5);
  }
  return result;
}

uint64_t initializeWithCopy for IDSCommandResponseSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v5 = (uint64_t *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
  }
  else
  {
    uint64_t v7 = *v5;
    sub_100004214(*v5, *(void *)(a2 + 32));
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v6;
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  char v8 = (uint64_t *)(a2 + 72);
  unint64_t v9 = *(void *)(a2 + 80);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    sub_100004214(*v8, *(void *)(a2 + 80));
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v9;
  }
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v11;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  int v12 = (_OWORD *)(a2 + 128);
  unint64_t v13 = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 128) = *v12;
  }
  else
  {
    uint64_t v14 = *(void *)v12;
    sub_100004214(v14, v13);
    *(void *)(a1 + 128) = v14;
    *(void *)(a1 + 136) = v13;
  }
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  return a1;
}

uint64_t assignWithCopy for IDSCommandResponseSchema(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  unint64_t v5 = (_OWORD *)(a1 + 24);
  unint64_t v6 = (uint64_t *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 == 15)
  {
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *v6;
      sub_100004214(*v6, *(void *)(a2 + 32));
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = v7;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
    sub_1000044A0(a1 + 24);
LABEL_6:
    *unint64_t v5 = *(_OWORD *)v6;
    goto LABEL_8;
  }
  uint64_t v9 = *v6;
  sub_100004214(*v6, *(void *)(a2 + 32));
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v7;
  sub_1000042CC(v10, v11);
LABEL_8:
  uint64_t v12 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v12;
  uint64_t v13 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v13;
  uint64_t v14 = (uint64_t *)(a2 + 72);
  unint64_t v15 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) >> 60 == 15)
  {
    if (v15 >> 60 != 15)
    {
      uint64_t v16 = *v14;
      sub_100004214(*v14, *(void *)(a2 + 80));
      *(void *)(a1 + 72) = v16;
      *(void *)(a1 + 80) = v15;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v15 >> 60 == 15)
  {
    sub_1000044A0(a1 + 72);
LABEL_13:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v14;
    goto LABEL_15;
  }
  uint64_t v17 = *v14;
  sub_100004214(*v14, *(void *)(a2 + 80));
  uint64_t v18 = *(void *)(a1 + 72);
  unint64_t v19 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = v17;
  *(void *)(a1 + 80) = v15;
  sub_1000042CC(v18, v19);
LABEL_15:
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v20;
  uint64_t v21 = (uint64_t *)(a2 + 128);
  unint64_t v22 = *(void *)(a2 + 136);
  if (*(void *)(a1 + 136) >> 60 != 15)
  {
    if (v22 >> 60 != 15)
    {
      uint64_t v24 = *v21;
      sub_100004214(*v21, *(void *)(a2 + 136));
      uint64_t v25 = *(void *)(a1 + 128);
      unint64_t v26 = *(void *)(a1 + 136);
      *(void *)(a1 + 128) = v24;
      *(void *)(a1 + 136) = v22;
      sub_1000042CC(v25, v26);
      goto LABEL_22;
    }
    sub_1000044A0(a1 + 128);
    goto LABEL_20;
  }
  if (v22 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)(a1 + 128) = *(_OWORD *)v21;
    goto LABEL_22;
  }
  uint64_t v23 = *v21;
  sub_100004214(*v21, *(void *)(a2 + 136));
  *(void *)(a1 + 128) = v23;
  *(void *)(a1 + 136) = v22;
LABEL_22:
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v27 = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = v27;
  return a1;
}

__n128 initializeWithTake for IDSCommandResponseSchema(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for IDSCommandResponseSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  long long v5 = (_OWORD *)(a1 + 24);
  long long v6 = (_OWORD *)(a2 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    sub_1000044A0(a1 + 24);
LABEL_4:
    *long long v5 = *v6;
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)v6;
  *(void *)(a1 + 32) = v8;
  sub_1000042CC(v9, v7);
LABEL_6:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v10 = (_OWORD *)(a2 + 72);
  unint64_t v11 = *(void *)(a1 + 80);
  if (v11 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 72) = *v10;
    goto LABEL_11;
  }
  unint64_t v12 = *(void *)(a2 + 80);
  if (v12 >> 60 == 15)
  {
    sub_1000044A0(a1 + 72);
    goto LABEL_9;
  }
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)v10;
  *(void *)(a1 + 80) = v12;
  sub_1000042CC(v13, v11);
LABEL_11:
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v14;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  unint64_t v15 = (void *)(a2 + 128);
  unint64_t v16 = *(void *)(a1 + 136);
  if (v16 >> 60 != 15)
  {
    unint64_t v17 = *(void *)(a2 + 136);
    if (v17 >> 60 != 15)
    {
      uint64_t v18 = *(void *)(a1 + 128);
      *(void *)(a1 + 128) = *v15;
      *(void *)(a1 + 136) = v17;
      sub_1000042CC(v18, v16);
      goto LABEL_16;
    }
    sub_1000044A0(a1 + 128);
  }
  *(_OWORD *)(a1 + 128) = *(_OWORD *)v15;
LABEL_16:
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSCommandResponseSchema(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 161)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 104);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSCommandResponseSchema(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 160) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 161) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 161) = 0;
    }
    if (a2) {
      *(void *)(result + 104) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSCommandResponseSchema()
{
  return &type metadata for IDSCommandResponseSchema;
}

uint64_t getEnumTagSinglePayload for IDSCommandResponseSchema.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF4) {
    goto LABEL_17;
  }
  if (a2 + 12 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 12) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 12;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 12;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xD;
  int v8 = v6 - 13;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IDSCommandResponseSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *__n128 result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10002FE6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSCommandResponseSchema.CodingKeys()
{
  return &type metadata for IDSCommandResponseSchema.CodingKeys;
}

unint64_t sub_10002FEA8()
{
  unint64_t result = qword_100090528;
  if (!qword_100090528)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090528);
  }
  return result;
}

unint64_t sub_10002FF00()
{
  unint64_t result = qword_100090530;
  if (!qword_100090530)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090530);
  }
  return result;
}

unint64_t sub_10002FF58()
{
  unint64_t result = qword_100090538;
  if (!qword_100090538)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090538);
  }
  return result;
}

uint64_t sub_10002FFAC(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_100089E98;
  v6._object = a2;
  unint64_t v4 = sub_100078390(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 0xD) {
    return 13;
  }
  else {
    return v4;
  }
}

void *sub_10002FFF8(void *a1)
{
  uint64_t v2 = a1[9];
  unint64_t v3 = a1[10];
  uint64_t v4 = a1[16];
  unint64_t v5 = a1[17];
  sub_1000048B8(a1[3], a1[4]);
  sub_1000048B8(v2, v3);
  swift_bridgeObjectRetain();
  sub_1000048B8(v4, v5);
  return a1;
}

void *sub_100030064(void *a1)
{
  uint64_t v2 = a1[9];
  unint64_t v3 = a1[10];
  uint64_t v4 = a1[16];
  unint64_t v5 = a1[17];
  sub_1000048CC(a1[3], a1[4]);
  sub_1000048CC(v2, v3);
  swift_bridgeObjectRelease();
  sub_1000048CC(v4, v5);
  return a1;
}

unint64_t sub_1000300D0(char a1)
{
  unint64_t result = 118;
  switch(a1)
  {
    case 1:
      unint64_t result = 98;
      break;
    case 2:
      unint64_t result = 115;
      break;
    case 3:
      unint64_t result = 112;
      break;
    case 4:
      unint64_t result = 99;
      break;
    case 5:
      unint64_t result = 25443;
      break;
    case 6:
      unint64_t result = 26989;
      break;
    case 7:
      unint64_t result = 7500147;
      break;
    case 8:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 9:
      unint64_t result = 1835819888;
      break;
    case 10:
      unint64_t result = 107;
      break;
    case 11:
      unint64_t result = 29555;
      break;
    case 12:
      unint64_t result = 29043;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1000301C8(char a1)
{
  unint64_t result = 118;
  switch(a1)
  {
    case 1:
      unint64_t result = 98;
      break;
    case 2:
      unint64_t result = 115;
      break;
    case 3:
      unint64_t result = 112;
      break;
    case 4:
      unint64_t result = 99;
      break;
    case 5:
      unint64_t result = 25443;
      break;
    case 6:
      unint64_t result = 26989;
      break;
    case 7:
      unint64_t result = 7500147;
      break;
    case 8:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 9:
      unint64_t result = 1835819888;
      break;
    case 10:
      unint64_t result = 107;
      break;
    case 11:
      unint64_t result = 29555;
      break;
    case 12:
      unint64_t result = 29043;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000302C0(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1000300D0(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1000300D0(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1000785B0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10003034C()
{
  char v1 = *v0;
  sub_100078630();
  sub_1000300D0(v1);
  sub_1000781D0();
  swift_bridgeObjectRelease();
  return sub_100078650();
}

uint64_t sub_1000303B0()
{
  sub_1000300D0(*v0);
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100030404()
{
  char v1 = *v0;
  sub_100078630();
  sub_1000300D0(v1);
  sub_1000781D0();
  swift_bridgeObjectRelease();
  return sub_100078650();
}

uint64_t sub_100030464@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100030A44(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t sub_100030494@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1000300D0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1000304C0()
{
  return sub_1000301C8(*v0);
}

uint64_t sub_1000304C8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100030A44(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000304F0(uint64_t a1)
{
  unint64_t v2 = sub_100030920();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003052C(uint64_t a1)
{
  unint64_t v2 = sub_100030920();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSSessionAcceptSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002214(&qword_100090548);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_100030920();
  sub_1000786A0();
  v12[0] = 0;
  sub_100078580();
  if (!v2)
  {
    sub_100003D40(v3 + 8, (uint64_t)v16);
    sub_100003D40((uint64_t)v16, (uint64_t)v12);
    char v11 = 1;
    sub_100003DA8();
    sub_100078510();
    v12[0] = 2;
    sub_100078540();
    v12[0] = 3;
    sub_100078540();
    sub_100003D40(v3 + 56, (uint64_t)v15);
    sub_100003D40((uint64_t)v15, (uint64_t)v12);
    char v11 = 4;
    sub_100078510();
    v12[0] = 5;
    sub_1000784D0();
    v12[0] = 6;
    sub_1000784D0();
    v12[0] = 7;
    sub_1000784D0();
    sub_100003D40(v3 + 80, (uint64_t)v14);
    sub_100003D40((uint64_t)v14, (uint64_t)v12);
    char v11 = 8;
    sub_100078510();
    v12[0] = 9;
    sub_1000784D0();
    sub_100003D40(v3 + 104, (uint64_t)v13);
    sub_100003D40((uint64_t)v13, (uint64_t)v12);
    char v11 = 10;
    sub_100078510();
    v12[0] = 11;
    sub_1000784F0();
    v12[0] = 12;
    sub_1000784F0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100030920()
{
  unint64_t result = qword_100090550;
  if (!qword_100090550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090550);
  }
  return result;
}

double IDSSessionAcceptSchema.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100030A90(a1, (uint64_t)v9);
  if (!v2)
  {
    long long v5 = v9[7];
    *(_OWORD *)(a2 + 96) = v9[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 128) = v9[8];
    *(unsigned char *)(a2 + 144) = v10;
    long long v6 = v9[3];
    *(_OWORD *)(a2 + 32) = v9[2];
    *(_OWORD *)(a2 + 48) = v6;
    long long v7 = v9[5];
    *(_OWORD *)(a2 + 64) = v9[4];
    *(_OWORD *)(a2 + 80) = v7;
    double result = *(double *)v9;
    long long v8 = v9[1];
    *(_OWORD *)a2 = v9[0];
    *(_OWORD *)(a2 + 16) = v8;
  }
  return result;
}

uint64_t sub_1000309E8(void *a1)
{
  return IDSSessionAcceptSchema.encode(to:)(a1);
}

uint64_t sub_100030A44(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_100089FF0;
  v6._object = a2;
  unint64_t v4 = sub_100078390(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 0xD) {
    return 13;
  }
  else {
    return v4;
  }
}

void *sub_100030A90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002214(&qword_100090570);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  char v104 = a1;
  sub_1000029D8(a1, v9);
  sub_100030920();
  sub_100078690();
  if (v2) {
    return (void *)sub_100002E34((uint64_t)v104);
  }
  uint64_t v58 = v6;
  LOBYTE(v74) = 0;
  uint64_t v10 = sub_100078480();
  LOBYTE(v64) = 1;
  unint64_t v11 = sub_100004864();
  sub_100078410();
  uint64_t v59 = v11;
  uint64_t v13 = v74;
  unint64_t v12 = v75;
  LOBYTE(v74) = 2;
  sub_1000048B8(v13, v75);
  uint64_t v53 = sub_100078440();
  *(void *)&long long v54 = v10;
  *((void *)&v54 + 1) = v13;
  unint64_t v55 = v12;
  LOBYTE(v74) = 3;
  uint64_t v15 = v14;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_100078440();
  uint64_t v57 = v15;
  uint64_t v17 = v16;
  LOBYTE(v64) = 4;
  uint64_t v19 = v18;
  swift_bridgeObjectRetain();
  sub_100078410();
  uint64_t v56 = v19;
  uint64_t v21 = v74;
  unint64_t v20 = v75;
  LOBYTE(v74) = 5;
  sub_1000048B8(v21, v75);
  int v22 = sub_1000783D0();
  unint64_t v62 = v20;
  uint64_t v63 = v21;
  int v52 = v22;
  LOBYTE(v74) = 6;
  LODWORD(v21) = sub_1000783D0();
  LOBYTE(v74) = 7;
  int v51 = sub_1000783D0();
  LOBYTE(v64) = 8;
  sub_100078410();
  int v50 = v21;
  uint64_t v49 = v17;
  uint64_t v23 = v74;
  LOBYTE(v74) = 9;
  unint64_t v60 = v75;
  uint64_t v61 = v23;
  sub_1000048B8(v23, v75);
  LODWORD(v20) = sub_1000783D0();
  LOBYTE(v64) = 10;
  sub_100078410();
  uint64_t v24 = v74;
  LOBYTE(v74) = 11;
  uint64_t v59 = v24;
  unint64_t v25 = v75;
  sub_1000048B8(v24, v75);
  uint64_t v48 = sub_1000783F0();
  int v47 = v26 & 1;
  char v102 = v26 & 1;
  char v99 = 12;
  uint64_t v27 = sub_1000783F0();
  char v29 = v28;
  (*(void (**)(char *, uint64_t))(v58 + 8))(v8, v5);
  char v30 = v29 & 1;
  char v100 = v29 & 1;
  uint64_t v31 = *((void *)&v54 + 1);
  long long v64 = v54;
  *(void *)&long long v65 = v55;
  *((void *)&v65 + 1) = v53;
  *(void *)&long long v66 = v57;
  *((void *)&v66 + 1) = v49;
  unint64_t v32 = v62;
  *(void *)&long long v67 = v56;
  *((void *)&v67 + 1) = v63;
  *(void *)&long long v68 = v62;
  BYTE8(v68) = v52;
  BYTE9(v68) = v50;
  BYTE10(v68) = v51;
  uint64_t v33 = v59;
  *(void *)&long long v69 = v61;
  *((void *)&v69 + 1) = v60;
  int v46 = v20;
  LOBYTE(v70) = v20;
  *((void *)&v70 + 1) = v59;
  *(void *)&long long v71 = v25;
  unint64_t v44 = v25;
  uint64_t v45 = v27;
  *((void *)&v71 + 1) = v48;
  LOBYTE(v72) = v47;
  *((void *)&v72 + 1) = v27;
  char v73 = v30;
  sub_100031D30(&v64);
  sub_1000048CC(v33, v25);
  sub_1000048CC(v61, v60);
  uint64_t v34 = v63;
  sub_1000048CC(v63, v32);
  uint64_t v35 = v57;
  swift_bridgeObjectRelease();
  uint64_t v36 = v56;
  swift_bridgeObjectRelease();
  unint64_t v37 = v55;
  sub_1000048CC(v31, v55);
  sub_100002E34((uint64_t)v104);
  uint64_t v74 = v54;
  unint64_t v75 = v31;
  unint64_t v76 = v37;
  uint64_t v77 = v53;
  uint64_t v78 = v35;
  uint64_t v79 = v49;
  uint64_t v80 = v36;
  uint64_t v81 = v34;
  unint64_t v82 = v32;
  char v83 = v52;
  char v84 = v50;
  char v85 = v51;
  int v86 = *(_DWORD *)&v103[7];
  char v87 = v103[11];
  uint64_t v88 = v61;
  unint64_t v89 = v60;
  char v90 = v46;
  *(_DWORD *)&v91[3] = *(_DWORD *)&v103[3];
  *(_DWORD *)__int16 v91 = *(_DWORD *)v103;
  uint64_t v92 = v59;
  unint64_t v93 = v44;
  uint64_t v94 = v48;
  char v95 = v102;
  *(_DWORD *)&v96[3] = *(_DWORD *)&v101[3];
  *(_DWORD *)v96 = *(_DWORD *)v101;
  uint64_t v97 = v45;
  char v98 = v100;
  double result = sub_100031DC8(&v74);
  long long v39 = v71;
  *(_OWORD *)(a2 + 96) = v70;
  *(_OWORD *)(a2 + 112) = v39;
  *(_OWORD *)(a2 + 128) = v72;
  *(unsigned char *)(a2 + 144) = v73;
  long long v40 = v67;
  *(_OWORD *)(a2 + 32) = v66;
  *(_OWORD *)(a2 + 48) = v40;
  long long v41 = v69;
  *(_OWORD *)(a2 + 64) = v68;
  *(_OWORD *)(a2 + 80) = v41;
  long long v42 = v65;
  *(_OWORD *)a2 = v64;
  *(_OWORD *)(a2 + 16) = v42;
  return result;
}

uint64_t destroy for IDSSessionAcceptSchema(uint64_t *a1)
{
  unint64_t v2 = a1[2];
  if (v2 >> 60 != 15) {
    sub_1000042CC(a1[1], v2);
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v4 = a1[8];
  if (v4 >> 60 != 15) {
    uint64_t result = sub_1000042CC(a1[7], v4);
  }
  unint64_t v5 = a1[11];
  if (v5 >> 60 != 15) {
    uint64_t result = sub_1000042CC(a1[10], v5);
  }
  unint64_t v6 = a1[14];
  if (v6 >> 60 != 15)
  {
    uint64_t v7 = a1[13];
    return sub_1000042CC(v7, v6);
  }
  return result;
}

uint64_t initializeWithCopy for IDSSessionAcceptSchema(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  unint64_t v4 = (uint64_t *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v4;
  }
  else
  {
    uint64_t v6 = *v4;
    sub_100004214(*v4, *(void *)(a2 + 16));
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v5;
  }
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  uint64_t v9 = (uint64_t *)(a2 + 56);
  unint64_t v10 = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_100004214(*v9, v10);
    *(void *)(a1 + 56) = v11;
    *(void *)(a1 + 64) = v10;
  }
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  unint64_t v12 = (uint64_t *)(a2 + 80);
  unint64_t v13 = *(void *)(a2 + 88);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v12;
  }
  else
  {
    uint64_t v14 = *v12;
    sub_100004214(*v12, *(void *)(a2 + 88));
    *(void *)(a1 + 80) = v14;
    *(void *)(a1 + 88) = v13;
  }
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v15 = (uint64_t *)(a2 + 104);
  unint64_t v16 = *(void *)(a2 + 112);
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v17 = *v15;
    sub_100004214(*v15, *(void *)(a2 + 112));
    *(void *)(a1 + 104) = v17;
    *(void *)(a1 + 112) = v16;
  }
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

uint64_t assignWithCopy for IDSSessionAcceptSchema(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  unint64_t v4 = (_OWORD *)(a1 + 8);
  unint64_t v5 = (uint64_t *)(a2 + 8);
  unint64_t v6 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *v5;
      sub_100004214(*v5, *(void *)(a2 + 16));
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1000044A0(a1 + 8);
LABEL_6:
    *unint64_t v4 = *(_OWORD *)v5;
    goto LABEL_8;
  }
  uint64_t v8 = *v5;
  sub_100004214(*v5, *(void *)(a2 + 16));
  uint64_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v6;
  sub_1000042CC(v9, v10);
LABEL_8:
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = (uint64_t *)(a2 + 56);
  unint64_t v12 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64) >> 60 == 15)
  {
    if (v12 >> 60 != 15)
    {
      uint64_t v13 = *v11;
      sub_100004214(*v11, *(void *)(a2 + 64));
      *(void *)(a1 + 56) = v13;
      *(void *)(a1 + 64) = v12;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v12 >> 60 == 15)
  {
    sub_1000044A0(a1 + 56);
LABEL_13:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v11;
    goto LABEL_15;
  }
  uint64_t v14 = *v11;
  sub_100004214(*v11, *(void *)(a2 + 64));
  uint64_t v15 = *(void *)(a1 + 56);
  unint64_t v16 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v14;
  *(void *)(a1 + 64) = v12;
  sub_1000042CC(v15, v16);
LABEL_15:
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  uint64_t v17 = (uint64_t *)(a2 + 80);
  unint64_t v18 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88) >> 60 == 15)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *v17;
      sub_100004214(*v17, *(void *)(a2 + 88));
      *(void *)(a1 + 80) = v19;
      *(void *)(a1 + 88) = v18;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v18 >> 60 == 15)
  {
    sub_1000044A0(a1 + 80);
LABEL_20:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v17;
    goto LABEL_22;
  }
  uint64_t v20 = *v17;
  sub_100004214(*v17, *(void *)(a2 + 88));
  uint64_t v21 = *(void *)(a1 + 80);
  unint64_t v22 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = v20;
  *(void *)(a1 + 88) = v18;
  sub_1000042CC(v21, v22);
LABEL_22:
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v23 = (uint64_t *)(a2 + 104);
  unint64_t v24 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112) >> 60 != 15)
  {
    if (v24 >> 60 != 15)
    {
      uint64_t v26 = *v23;
      sub_100004214(*v23, *(void *)(a2 + 112));
      uint64_t v27 = *(void *)(a1 + 104);
      unint64_t v28 = *(void *)(a1 + 112);
      *(void *)(a1 + 104) = v26;
      *(void *)(a1 + 112) = v24;
      sub_1000042CC(v27, v28);
      goto LABEL_29;
    }
    sub_1000044A0(a1 + 104);
    goto LABEL_27;
  }
  if (v24 >> 60 == 15)
  {
LABEL_27:
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v23;
    goto LABEL_29;
  }
  uint64_t v25 = *v23;
  sub_100004214(*v23, *(void *)(a2 + 112));
  *(void *)(a1 + 104) = v25;
  *(void *)(a1 + 112) = v24;
LABEL_29:
  uint64_t v29 = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 120) = v29;
  uint64_t v30 = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 136) = v30;
  return a1;
}

__n128 initializeWithTake for IDSSessionAcceptSchema(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for IDSSessionAcceptSchema(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = (_OWORD *)(a1 + 8);
  long long v5 = (_OWORD *)(a2 + 8);
  unint64_t v6 = *(void *)(a1 + 16);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 16);
  if (v7 >> 60 == 15)
  {
    sub_1000044A0(a1 + 8);
LABEL_4:
    *long long v4 = *v5;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)v5;
  *(void *)(a1 + 16) = v7;
  sub_1000042CC(v8, v6);
LABEL_6:
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = (_OWORD *)(a2 + 56);
  unint64_t v12 = *(void *)(a1 + 64);
  if (v12 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 56) = *v11;
    goto LABEL_11;
  }
  unint64_t v13 = *(void *)(a2 + 64);
  if (v13 >> 60 == 15)
  {
    sub_1000044A0(a1 + 56);
    goto LABEL_9;
  }
  uint64_t v14 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)v11;
  *(void *)(a1 + 64) = v13;
  sub_1000042CC(v14, v12);
LABEL_11:
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  uint64_t v15 = (_OWORD *)(a2 + 80);
  unint64_t v16 = *(void *)(a1 + 88);
  if (v16 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 80) = *v15;
    goto LABEL_16;
  }
  unint64_t v17 = *(void *)(a2 + 88);
  if (v17 >> 60 == 15)
  {
    sub_1000044A0(a1 + 80);
    goto LABEL_14;
  }
  uint64_t v18 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)v15;
  *(void *)(a1 + 88) = v17;
  sub_1000042CC(v18, v16);
LABEL_16:
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v19 = (void *)(a2 + 104);
  unint64_t v20 = *(void *)(a1 + 112);
  if (v20 >> 60 != 15)
  {
    unint64_t v21 = *(void *)(a2 + 112);
    if (v21 >> 60 != 15)
    {
      uint64_t v22 = *(void *)(a1 + 104);
      *(void *)(a1 + 104) = *v19;
      *(void *)(a1 + 112) = v21;
      sub_1000042CC(v22, v20);
      goto LABEL_21;
    }
    sub_1000044A0(a1 + 104);
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)v19;
LABEL_21:
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSSessionAcceptSchema(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 145)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSSessionAcceptSchema(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 144) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 145) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 145) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSSessionAcceptSchema()
{
  return &type metadata for IDSSessionAcceptSchema;
}

unsigned char *storeEnumTagSinglePayload for IDSSessionAcceptSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *__n128 result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100031BF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSSessionAcceptSchema.CodingKeys()
{
  return &type metadata for IDSSessionAcceptSchema.CodingKeys;
}

unint64_t sub_100031C2C()
{
  unint64_t result = qword_100090558;
  if (!qword_100090558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090558);
  }
  return result;
}

unint64_t sub_100031C84()
{
  unint64_t result = qword_100090560;
  if (!qword_100090560)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090560);
  }
  return result;
}

unint64_t sub_100031CDC()
{
  unint64_t result = qword_100090568;
  if (!qword_100090568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090568);
  }
  return result;
}

void *sub_100031D30(void *a1)
{
  uint64_t v2 = a1[7];
  unint64_t v3 = a1[8];
  uint64_t v4 = a1[10];
  unint64_t v5 = a1[11];
  uint64_t v6 = a1[13];
  unint64_t v7 = a1[14];
  sub_1000048B8(a1[1], a1[2]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000048B8(v2, v3);
  sub_1000048B8(v4, v5);
  sub_1000048B8(v6, v7);
  return a1;
}

void *sub_100031DC8(void *a1)
{
  uint64_t v2 = a1[7];
  unint64_t v3 = a1[8];
  uint64_t v4 = a1[10];
  unint64_t v5 = a1[11];
  uint64_t v6 = a1[13];
  unint64_t v7 = a1[14];
  sub_1000048CC(a1[1], a1[2]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000048CC(v2, v3);
  sub_1000048CC(v4, v5);
  sub_1000048CC(v6, v7);
  return a1;
}

uint64_t sub_100031E60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v46 = a1;
  uint64_t v2 = sub_100077E40();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (int *)type metadata accessor for IDSSessionInvitationSchema();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100077B80();
  swift_allocObject();
  sub_100077B70();
  sub_100032174();
  sub_100077B60();
  if (!v1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    uint64_t v9 = *(void *)&v8[v6[5]];
    uint64_t v10 = &v8[v6[6]];
    uint64_t v44 = *(void *)v10;
    uint64_t v45 = v9;
    int v43 = v10[8];
    uint64_t v11 = v6[7];
    uint64_t v12 = v6[8];
    uint64_t v13 = v6[9];
    uint64_t v14 = v6[10];
    uint64_t v15 = v6[12];
    unint64_t v16 = (uint64_t *)&v8[v6[11]];
    uint64_t v17 = *v16;
    unint64_t v31 = v16[1];
    uint64_t v32 = v17;
    int v42 = v8[v15];
    uint64_t v18 = v6[14];
    uint64_t v19 = (uint64_t *)&v8[v6[13]];
    uint64_t v28 = *v19;
    long long v41 = v5;
    unint64_t v20 = v19[1];
    int v40 = v8[v18];
    unint64_t v21 = (uint64_t *)&v8[v6[15]];
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    int v37 = v8[v6[16]];
    uint64_t v24 = v6[18];
    uint64_t v34 = *(void *)&v8[v6[17]];
    int v33 = v8[v24];
    uint64_t v25 = &v8[v6[19]];
    int v29 = v8[v6[20]];
    uint64_t v30 = *(void *)v25;
    v27[3] = v8[v6[21]];
    LODWORD(v14) = v8[v14];
    int v38 = v8[v13];
    int v39 = v14;
    LODWORD(v12) = v8[v12];
    int v35 = v8[v11];
    int v36 = v12;
    sub_1000048B8(v17, v31);
    sub_1000048B8(v28, v20);
    sub_1000048B8(v22, v23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100077E50();
    sub_1000321CC((uint64_t)v8);
  }
  return swift_release();
}

unint64_t sub_100032174()
{
  unint64_t result = qword_100090578;
  if (!qword_100090578)
  {
    type metadata accessor for IDSSessionInvitationSchema();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090578);
  }
  return result;
}

uint64_t sub_1000321CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSSessionInvitationSchema();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL IDSInvitationContextType.init(rawValue:)(uint64_t a1)
{
  return a1 != 1;
}

uint64_t IDSInvitationContextType.rawValue.getter()
{
  return 1;
}

Swift::Int sub_10003223C()
{
  return sub_100078650();
}

void sub_100032280()
{
}

Swift::Int sub_1000322A8()
{
  return sub_100078650();
}

void *sub_1000322E8@<X0>(void *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 1;
  return result;
}

void sub_1000322FC(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100032308()
{
  return sub_1000782B0();
}

uint64_t sub_100032368()
{
  return sub_1000782A0();
}

unint64_t sub_1000323B8(char a1)
{
  unint64_t result = 0xD000000000000013;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000014;
      break;
    case 2:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 0xD00000000000001CLL;
      break;
    default:
      return result;
  }
  return result;
}

BOOL sub_100032450(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100032464()
{
  Swift::UInt v1 = *v0;
  sub_100078630();
  sub_100078640(v1);
  return sub_100078650();
}

void sub_1000324AC()
{
  sub_100078640(*v0);
}

Swift::Int sub_1000324D8()
{
  Swift::UInt v1 = *v0;
  sub_100078630();
  sub_100078640(v1);
  return sub_100078650();
}

unint64_t sub_10003251C()
{
  return sub_1000323B8(*v0);
}

uint64_t sub_100032524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000421F8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003254C(uint64_t a1)
{
  unint64_t v2 = sub_1000331C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100032588(uint64_t a1)
{
  unint64_t v2 = sub_1000331C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000325CC()
{
  return 12383;
}

void sub_1000325DC(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1000325E8(uint64_t a1)
{
  unint64_t v2 = sub_10003321C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100032624(uint64_t a1)
{
  unint64_t v2 = sub_10003321C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100032660(uint64_t a1)
{
  unint64_t v2 = sub_1000332C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003269C(uint64_t a1)
{
  unint64_t v2 = sub_1000332C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000326D8(uint64_t a1)
{
  unint64_t v2 = sub_100033428();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100032714(uint64_t a1)
{
  unint64_t v2 = sub_100033428();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100032750(uint64_t a1)
{
  unint64_t v2 = sub_10003336C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003278C(uint64_t a1)
{
  unint64_t v2 = sub_10003336C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000327C8(uint64_t a1)
{
  unint64_t v2 = sub_100033524();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100032804(uint64_t a1)
{
  unint64_t v2 = sub_100033524();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSDictionaryContextClientSchema.encode(to:)(void *a1)
{
  uint64_t v2 = sub_100002214(&qword_100090580);
  uint64_t v60 = *(void *)(v2 - 8);
  uint64_t v61 = v2;
  __chkstk_darwin(v2);
  uint64_t v59 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100002214(&qword_100090588);
  uint64_t v57 = *(void *)(v4 - 8);
  uint64_t v58 = v4;
  __chkstk_darwin(v4);
  uint64_t v56 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002214(&qword_100090590);
  uint64_t v54 = *(void *)(v6 - 8);
  uint64_t v55 = v6;
  __chkstk_darwin(v6);
  uint64_t v53 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for IDSKCSharingInvitationSchema();
  __chkstk_darwin(v51);
  uint64_t v52 = (uint64_t)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100002214(&qword_100090598);
  uint64_t v49 = *(void *)(v9 - 8);
  uint64_t v50 = v9;
  __chkstk_darwin(v9);
  uint64_t v48 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for IDSHomeKitInvitationSchema(0);
  __chkstk_darwin(v46);
  uint64_t v47 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = sub_100002214(&qword_1000905A0);
  uint64_t v44 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for IDSSampleInvitationSchema();
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for IDSDictionaryContextClientSchema(0);
  __chkstk_darwin(v17);
  uint64_t v19 = (uint64_t *)((char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v20 = sub_100002214(&qword_1000905A8);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v62 = v20;
  uint64_t v63 = v21;
  __chkstk_darwin(v20);
  unint64_t v23 = (char *)&v43 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_1000331C8();
  sub_1000786A0();
  sub_100034834(v67, (uint64_t)v19, type metadata accessor for IDSDictionaryContextClientSchema);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v27 = v47;
      sub_1000333C0((uint64_t)v19, v47, type metadata accessor for IDSHomeKitInvitationSchema);
      LOBYTE(v64) = 1;
      sub_100033428();
      uint64_t v28 = v48;
      uint64_t v29 = v62;
      sub_1000784B0();
      sub_10003347C(&qword_1000905F0, (void (*)(uint64_t))type metadata accessor for IDSHomeKitInvitationSchema);
      uint64_t v30 = v50;
      sub_100078590();
      (*(void (**)(char *, uint64_t))(v49 + 8))(v28, v30);
      unint64_t v31 = type metadata accessor for IDSHomeKitInvitationSchema;
      goto LABEL_5;
    case 2u:
      uint64_t v27 = v52;
      sub_1000333C0((uint64_t)v19, v52, (uint64_t (*)(void))type metadata accessor for IDSKCSharingInvitationSchema);
      LOBYTE(v64) = 2;
      sub_10003336C();
      uint64_t v32 = v53;
      uint64_t v29 = v62;
      sub_1000784B0();
      sub_10003347C(&qword_1000905E0, (void (*)(uint64_t))type metadata accessor for IDSKCSharingInvitationSchema);
      uint64_t v33 = v55;
      sub_100078590();
      (*(void (**)(char *, uint64_t))(v54 + 8))(v32, v33);
      unint64_t v31 = (uint64_t (*)(void))type metadata accessor for IDSKCSharingInvitationSchema;
LABEL_5:
      sub_1000334C4(v27, v31);
      return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v23, v29);
    case 3u:
      uint64_t v34 = *v19;
      unint64_t v35 = v19[1];
      LOBYTE(v64) = 3;
      sub_1000332C4();
      int v36 = v56;
      uint64_t v37 = v62;
      sub_1000784B0();
      uint64_t v64 = v34;
      unint64_t v65 = v35;
      sub_100033318();
      uint64_t v38 = v58;
      sub_100078590();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v36, v38);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v23, v37);
      goto LABEL_8;
    case 4u:
      uint64_t v39 = *v19;
      uint64_t v34 = v19[1];
      unint64_t v35 = v19[2];
      LOBYTE(v64) = 4;
      sub_10003321C();
      int v40 = v59;
      uint64_t v41 = v62;
      sub_1000784B0();
      uint64_t v64 = v39;
      unint64_t v65 = v34;
      unint64_t v66 = v35;
      sub_100033270();
      uint64_t v42 = v61;
      sub_100078590();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v40, v42);
      (*(void (**)(char *, uint64_t))(v63 + 8))(v23, v41);
LABEL_8:
      uint64_t result = sub_1000042CC(v34, v35);
      break;
    default:
      sub_1000333C0((uint64_t)v19, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IDSSampleInvitationSchema);
      LOBYTE(v64) = 0;
      sub_100033524();
      uint64_t v24 = v62;
      sub_1000784B0();
      sub_10003347C(&qword_100090460, (void (*)(uint64_t))type metadata accessor for IDSSampleInvitationSchema);
      uint64_t v25 = v45;
      sub_100078590();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v13, v25);
      sub_1000334C4((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IDSSampleInvitationSchema);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v23, v24);
      break;
  }
  return result;
}

uint64_t type metadata accessor for IDSDictionaryContextClientSchema(uint64_t a1)
{
  return sub_100036324(a1, qword_100090770);
}

unint64_t sub_1000331C8()
{
  unint64_t result = qword_1000905B0;
  if (!qword_1000905B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000905B0);
  }
  return result;
}

unint64_t sub_10003321C()
{
  unint64_t result = qword_1000905B8;
  if (!qword_1000905B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000905B8);
  }
  return result;
}

unint64_t sub_100033270()
{
  unint64_t result = qword_1000905C0;
  if (!qword_1000905C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000905C0);
  }
  return result;
}

unint64_t sub_1000332C4()
{
  unint64_t result = qword_1000905C8;
  if (!qword_1000905C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000905C8);
  }
  return result;
}

unint64_t sub_100033318()
{
  unint64_t result = qword_1000905D0;
  if (!qword_1000905D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000905D0);
  }
  return result;
}

unint64_t sub_10003336C()
{
  unint64_t result = qword_1000905D8;
  if (!qword_1000905D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000905D8);
  }
  return result;
}

uint64_t sub_1000333C0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100033428()
{
  unint64_t result = qword_1000905E8;
  if (!qword_1000905E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000905E8);
  }
  return result;
}

uint64_t sub_10003347C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000334C4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100033524()
{
  unint64_t result = qword_1000905F8;
  if (!qword_1000905F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000905F8);
  }
  return result;
}

uint64_t IDSDictionaryContextClientSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v81 = a2;
  uint64_t v70 = sub_100002214(&qword_100090600);
  uint64_t v73 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v80 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = sub_100002214(&qword_100090608);
  uint64_t v72 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v77 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = sub_100002214(&qword_100090610);
  uint64_t v71 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  unint64_t v76 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002214(&qword_100090618);
  uint64_t v66 = *(void *)(v6 - 8);
  uint64_t v67 = v6;
  __chkstk_darwin(v6);
  unint64_t v75 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_100002214(&qword_100090620);
  uint64_t v64 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  uint64_t v74 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_100002214(&qword_100090628);
  uint64_t v78 = *(void *)(v9 - 8);
  uint64_t v79 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for IDSDictionaryContextClientSchema(0);
  uint64_t v12 = __chkstk_darwin(v82);
  uint64_t v63 = (_OWORD *)((char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v58 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v58 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v58 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v58 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v58 - v26;
  uint64_t v28 = a1[3];
  char v83 = a1;
  sub_1000029D8(a1, v28);
  sub_1000331C8();
  uint64_t v29 = (uint64_t)v86;
  sub_100078690();
  if (v29) {
    goto LABEL_11;
  }
  uint64_t v61 = v25;
  uint64_t v62 = v22;
  uint64_t v59 = v16;
  uint64_t v60 = v19;
  uint64_t v30 = v80;
  uint64_t v31 = v81;
  int v86 = v27;
  uint64_t v32 = v79;
  uint64_t v33 = sub_1000784A0();
  if (*(void *)(v33 + 16) != 1)
  {
    uint64_t v39 = sub_100078320();
    swift_allocError();
    uint64_t v41 = v40;
    sub_100002214(&qword_100090630);
    *uint64_t v41 = v82;
    sub_1000783B0();
    sub_100078310();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v39 - 8) + 104))(v41, enum case for DecodingError.typeMismatch(_:), v39);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v11, v32);
LABEL_11:
    uint64_t v37 = (uint64_t)v83;
    return sub_100002E34(v37);
  }
  switch(*(unsigned char *)(v33 + 32))
  {
    case 1:
      LOBYTE(v84) = 1;
      sub_100033428();
      uint64_t v42 = v75;
      sub_1000783A0();
      type metadata accessor for IDSHomeKitInvitationSchema(0);
      sub_10003347C(&qword_100090650, (void (*)(uint64_t))type metadata accessor for IDSHomeKitInvitationSchema);
      uint64_t v43 = v42;
      uint64_t v44 = v67;
      sub_100078490();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v43, v44);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v11, v32);
      uint64_t v37 = (uint64_t)v83;
      uint64_t v38 = (uint64_t)v62;
      goto LABEL_7;
    case 2:
      LOBYTE(v84) = 2;
      sub_10003336C();
      uint64_t v47 = v76;
      sub_1000783A0();
      type metadata accessor for IDSKCSharingInvitationSchema();
      sub_10003347C(&qword_100090648, (void (*)(uint64_t))type metadata accessor for IDSKCSharingInvitationSchema);
      uint64_t v48 = (uint64_t)v60;
      uint64_t v49 = v68;
      sub_100078490();
      (*(void (**)(char *, uint64_t))(v71 + 8))(v47, v49);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v11, v32);
      swift_storeEnumTagMultiPayload();
      uint64_t v46 = (uint64_t)v86;
      sub_1000333C0(v48, (uint64_t)v86, type metadata accessor for IDSDictionaryContextClientSchema);
      uint64_t v37 = (uint64_t)v83;
      uint64_t v31 = v81;
      break;
    case 3:
      LOBYTE(v84) = 3;
      sub_1000332C4();
      uint64_t v50 = v77;
      sub_1000783A0();
      sub_1000341C0();
      uint64_t v51 = v69;
      sub_100078490();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v50, v51);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v11, v32);
      uint64_t v56 = (uint64_t)v59;
      *uint64_t v59 = v84;
      goto LABEL_13;
    case 4:
      LOBYTE(v84) = 4;
      sub_10003321C();
      sub_1000783A0();
      sub_10003416C();
      uint64_t v53 = v30;
      uint64_t v54 = v70;
      sub_100078490();
      uint64_t v55 = v78;
      (*(void (**)(char *, uint64_t))(v73 + 8))(v53, v54);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v55 + 8))(v11, v32);
      uint64_t v57 = v85;
      uint64_t v56 = (uint64_t)v63;
      *uint64_t v63 = v84;
      *(void *)(v56 + 16) = v57;
LABEL_13:
      swift_storeEnumTagMultiPayload();
      uint64_t v46 = (uint64_t)v86;
      sub_1000333C0(v56, (uint64_t)v86, type metadata accessor for IDSDictionaryContextClientSchema);
      uint64_t v37 = (uint64_t)v83;
      break;
    default:
      LOBYTE(v84) = 0;
      sub_100033524();
      uint64_t v34 = v74;
      sub_1000783A0();
      type metadata accessor for IDSSampleInvitationSchema();
      sub_10003347C(&qword_100090458, (void (*)(uint64_t))type metadata accessor for IDSSampleInvitationSchema);
      unint64_t v35 = v34;
      uint64_t v36 = v65;
      sub_100078490();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v35, v36);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v11, v32);
      uint64_t v37 = (uint64_t)v83;
      uint64_t v38 = (uint64_t)v61;
LABEL_7:
      swift_storeEnumTagMultiPayload();
      uint64_t v45 = v38;
      uint64_t v46 = (uint64_t)v86;
      sub_1000333C0(v45, (uint64_t)v86, type metadata accessor for IDSDictionaryContextClientSchema);
      break;
  }
  sub_1000333C0(v46, v31, type metadata accessor for IDSDictionaryContextClientSchema);
  return sub_100002E34(v37);
}

unint64_t sub_10003416C()
{
  unint64_t result = qword_100090638;
  if (!qword_100090638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090638);
  }
  return result;
}

unint64_t sub_1000341C0()
{
  unint64_t result = qword_100090640;
  if (!qword_100090640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090640);
  }
  return result;
}

uint64_t sub_100034214@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSDictionaryContextClientSchema.init(from:)(a1, a2);
}

uint64_t sub_10003422C(void *a1)
{
  return IDSDictionaryContextClientSchema.encode(to:)(a1);
}

unint64_t sub_100034244()
{
  return 0xD000000000000011;
}

uint64_t sub_100034260@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000423E8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_10003428C(uint64_t a1)
{
  unint64_t v2 = sub_1000347E0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000342C8(uint64_t a1)
{
  unint64_t v2 = sub_1000347E0();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100034304()
{
  return sub_100078650();
}

void sub_100034348()
{
}

Swift::Int sub_100034370()
{
  return sub_100078650();
}

uint64_t sub_1000343B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1000785B0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100034430(uint64_t a1)
{
  unint64_t v2 = sub_10003489C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003446C(uint64_t a1)
{
  unint64_t v2 = sub_10003489C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSDictionaryContextData.encode(to:)(void *a1)
{
  uint64_t v2 = sub_100002214(&qword_100090658);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v19 = v2;
  uint64_t v20 = v3;
  __chkstk_darwin(v2);
  char v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for IDSDictionaryContextClientSchema(0);
  __chkstk_darwin(v18);
  char v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for IDSDictionaryContextData(0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002214(&qword_100090660);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_1000347E0();
  sub_1000786A0();
  sub_100034834(v17, (uint64_t)v10, type metadata accessor for IDSDictionaryContextData);
  sub_1000333C0((uint64_t)v10, (uint64_t)v7, type metadata accessor for IDSDictionaryContextClientSchema);
  sub_10003489C();
  sub_1000784B0();
  sub_10003347C(&qword_100090678, (void (*)(uint64_t))type metadata accessor for IDSDictionaryContextClientSchema);
  uint64_t v15 = v19;
  sub_100078590();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v15);
  sub_1000334C4((uint64_t)v7, type metadata accessor for IDSDictionaryContextClientSchema);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t type metadata accessor for IDSDictionaryContextData(uint64_t a1)
{
  return sub_100036324(a1, (uint64_t *)&unk_100090818);
}

unint64_t sub_1000347E0()
{
  unint64_t result = qword_100090668;
  if (!qword_100090668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090668);
  }
  return result;
}

uint64_t sub_100034834(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10003489C()
{
  unint64_t result = qword_100090670;
  if (!qword_100090670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090670);
  }
  return result;
}

uint64_t IDSDictionaryContextData.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v3 = type metadata accessor for IDSDictionaryContextData(0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100002214(&qword_100090680);
  uint64_t v25 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100002214(&qword_100090688);
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_1000347E0();
  uint64_t v28 = v10;
  uint64_t v11 = v27;
  sub_100078690();
  if (!v11)
  {
    uint64_t v27 = a1;
    uint64_t v12 = v25;
    uint64_t v13 = v26;
    uint64_t v14 = sub_1000784A0();
    uint64_t v15 = *(void *)(v14 + 16);
    uint64_t v22 = v14;
    if (v15 == 1)
    {
      sub_10003489C();
      sub_1000783A0();
      uint64_t v16 = v24;
      type metadata accessor for IDSDictionaryContextClientSchema(0);
      sub_10003347C(&qword_100090690, (void (*)(uint64_t))type metadata accessor for IDSDictionaryContextClientSchema);
      sub_100078490();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v6);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v28, v13);
      a1 = v27;
      sub_1000333C0((uint64_t)v5, v23, type metadata accessor for IDSDictionaryContextData);
    }
    else
    {
      uint64_t v17 = sub_100078320();
      swift_allocError();
      uint64_t v19 = v18;
      sub_100002214(&qword_100090630);
      uint64_t *v19 = v3;
      sub_1000783B0();
      sub_100078310();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v17 - 8) + 104))(v19, enum case for DecodingError.typeMismatch(_:), v17);
      swift_willThrow();
      uint64_t v20 = v24;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v28, v13);
      a1 = v27;
    }
  }
  return sub_100002E34((uint64_t)a1);
}

uint64_t sub_100034CD4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSDictionaryContextData.init(from:)(a1, a2);
}

uint64_t sub_100034CEC(void *a1)
{
  return IDSDictionaryContextData.encode(to:)(a1);
}

uint64_t sub_100034D04(char *a1, char *a2)
{
  return sub_10006A6A4(*a1, *a2);
}

Swift::Int sub_100034D10()
{
  return sub_100078650();
}

uint64_t sub_100034D6C()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100034DAC()
{
  return sub_100078650();
}

uint64_t sub_100034E04@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100042470(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_100034E34(void *a1@<X8>)
{
  *a1 = qword_10007CBA0[*v1];
  a1[1] = 0xE200000000000000;
}

uint64_t sub_100034E50()
{
  return qword_10007CBA0[*v0];
}

uint64_t sub_100034E68@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100042470(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100034E90(uint64_t a1)
{
  unint64_t v2 = sub_100035A00();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100034ECC(uint64_t a1)
{
  unint64_t v2 = sub_100035A00();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSInvitationContextSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  uint64_t v3 = sub_100078190();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v51 = v3;
  uint64_t v52 = v4;
  __chkstk_darwin(v3);
  uint64_t v50 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for IDSKCSharingInvitationSchema();
  __chkstk_darwin(v54);
  uint64_t v53 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for IDSHomeKitInvitationSchema(0);
  __chkstk_darwin(v58);
  uint64_t v55 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for IDSSampleInvitationSchema();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100002214(&qword_100090698);
  uint64_t v57 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for IDSInvitationContextSchema(0);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = a1[3];
  uint64_t v59 = a1;
  sub_1000029D8(a1, v17);
  sub_100035A00();
  uint64_t v18 = v60;
  sub_100078690();
  if (v18) {
    return sub_100002E34((uint64_t)v59);
  }
  uint64_t v60 = v14;
  uint64_t v19 = v57;
  LOBYTE(v61) = 0;
  uint64_t v20 = sub_100078440();
  uint64_t v22 = v13;
  *uint64_t v16 = v20;
  v16[1] = (uint64_t)v23;
  uint64_t v49 = v16;
  LOBYTE(v61) = 1;
  uint64_t v24 = v23;
  uint64_t v25 = v20;
  sub_100035A54();
  swift_bridgeObjectRetain();
  sub_100078490();
  uint64_t v48 = v22;
  if (v25 == 0xD00000000000001FLL && v24 == (void *)0x8000000100079D00 || (sub_1000785B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = (uint64_t)v49;
    LOBYTE(v61) = 2;
    sub_10003347C(&qword_100090458, (void (*)(uint64_t))type metadata accessor for IDSSampleInvitationSchema);
    uint64_t v27 = v48;
    sub_100078490();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v27, v11);
    uint64_t v28 = (uint64_t)v59;
    sub_1000333C0((uint64_t)v10, v26 + *(int *)(v60 + 24), (uint64_t (*)(void))type metadata accessor for IDSSampleInvitationSchema);
    type metadata accessor for IDSDictionaryContextClientSchema(0);
LABEL_8:
    swift_storeEnumTagMultiPayload();
LABEL_9:
    uint64_t v29 = v56;
LABEL_10:
    sub_100034834(v26, v29, type metadata accessor for IDSInvitationContextSchema);
    sub_100002E34(v28);
    return sub_1000334C4(v26, type metadata accessor for IDSInvitationContextSchema);
  }
  if (v25 == 0x7469766E692D6B68 && v24 == (void *)0xEC00000031762D65 || (sub_1000785B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = (uint64_t)v49;
    LOBYTE(v61) = 2;
    sub_10003347C(&qword_100090650, (void (*)(uint64_t))type metadata accessor for IDSHomeKitInvitationSchema);
    uint64_t v30 = (uint64_t)v55;
    uint64_t v31 = v48;
    sub_100078490();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v31, v11);
    uint64_t v28 = (uint64_t)v59;
    sub_1000333C0(v30, v26 + *(int *)(v60 + 24), type metadata accessor for IDSHomeKitInvitationSchema);
    type metadata accessor for IDSDictionaryContextClientSchema(0);
    goto LABEL_8;
  }
  if (v25 == 0xD000000000000023 && v24 == (void *)0x8000000100079D20 || (sub_1000785B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = (uint64_t)v49;
    LOBYTE(v61) = 2;
    sub_10003347C(&qword_100090648, (void (*)(uint64_t))type metadata accessor for IDSKCSharingInvitationSchema);
    uint64_t v32 = (uint64_t)v53;
    uint64_t v33 = v48;
    sub_100078490();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v33, v11);
    uint64_t v28 = (uint64_t)v59;
    sub_1000333C0(v32, v26 + *(int *)(v60 + 24), (uint64_t (*)(void))type metadata accessor for IDSKCSharingInvitationSchema);
    type metadata accessor for IDSDictionaryContextClientSchema(0);
    goto LABEL_8;
  }
  uint64_t v58 = v11;
  if (v25 == 49 && v24 == (void *)0xE100000000000000)
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = v56;
LABEL_24:
    char v63 = 2;
    sub_1000341C0();
    uint64_t v35 = v58;
    uint64_t v36 = v48;
    sub_100078490();
    uint64_t v37 = v19;
    uint64_t v38 = v60;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v35);
    uint64_t v26 = (uint64_t)v49;
    *(_OWORD *)((char *)v49 + *(int *)(v38 + 24)) = v61;
    type metadata accessor for IDSDictionaryContextClientSchema(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v28 = (uint64_t)v59;
    goto LABEL_10;
  }
  char v34 = sub_1000785B0();
  uint64_t v29 = v56;
  if (v34)
  {
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  if (v25 == 0xD000000000000017 && v24 == (void *)0x8000000100079D50 || (sub_1000785B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v39 = v58;
    char v63 = 2;
    sub_10003416C();
    int v40 = v48;
    sub_100078490();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v40, v39);
    uint64_t v41 = v62;
    uint64_t v26 = (uint64_t)v49;
    uint64_t v42 = (char *)v49 + *(int *)(v60 + 24);
    *(_OWORD *)uint64_t v42 = v61;
    *((void *)v42 + 2) = v41;
    type metadata accessor for IDSDictionaryContextClientSchema(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v28 = (uint64_t)v59;
    goto LABEL_9;
  }
  *(void *)&long long v61 = 0;
  *((void *)&v61 + 1) = 0xE000000000000000;
  sub_100078300(31);
  swift_bridgeObjectRelease();
  *(void *)&long long v61 = 0xD00000000000001CLL;
  *((void *)&v61 + 1) = 0x8000000100079DA0;
  v64._countAndFlagsBits = v25;
  v64._object = v24;
  sub_1000781F0(v64);
  swift_bridgeObjectRelease();
  v65._countAndFlagsBits = 41;
  v65._object = (void *)0xE100000000000000;
  sub_1000781F0(v65);
  uint64_t v43 = v50;
  sub_100078180();
  sub_10003347C(&qword_1000901B8, (void (*)(uint64_t))&type metadata accessor for Explosion);
  uint64_t v44 = v51;
  swift_allocError();
  uint64_t v45 = v52;
  (*(void (**)(uint64_t, char *, uint64_t))(v52 + 16))(v46, v43, v44);
  swift_willThrow();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v44);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v48, v58);
  sub_100002E34((uint64_t)v59);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for IDSInvitationContextSchema(uint64_t a1)
{
  return sub_100036324(a1, qword_100090880);
}

unint64_t sub_100035A00()
{
  unint64_t result = qword_1000906A0;
  if (!qword_1000906A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000906A0);
  }
  return result;
}

unint64_t sub_100035A54()
{
  unint64_t result = qword_1000906A8;
  if (!qword_1000906A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000906A8);
  }
  return result;
}

uint64_t IDSInvitationContextSchema.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100002214(&qword_1000906B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000029D8(a1, a1[3]);
  sub_100035A00();
  sub_1000786A0();
  v8[15] = 0;
  sub_100078540();
  if (!v1)
  {
    v8[14] = 1;
    sub_100035C94();
    sub_100078590();
    type metadata accessor for IDSInvitationContextSchema(0);
    v8[13] = 2;
    type metadata accessor for IDSDictionaryContextData(0);
    sub_10003347C(&qword_1000906C0, (void (*)(uint64_t))type metadata accessor for IDSDictionaryContextData);
    sub_100078590();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_100035C94()
{
  unint64_t result = qword_1000906B8;
  if (!qword_1000906B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000906B8);
  }
  return result;
}

uint64_t sub_100035CE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSInvitationContextSchema.init(from:)(a1, a2);
}

uint64_t sub_100035D00(void *a1)
{
  return IDSInvitationContextSchema.encode(to:)(a1);
}

uint64_t sub_100035D18(char *a1, char *a2)
{
  return sub_10006AAF8(*a1, *a2);
}

Swift::Int sub_100035D24()
{
  return sub_100078650();
}

uint64_t sub_100035DCC()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100035E5C()
{
  return sub_100078650();
}

uint64_t sub_100035F00@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1000424BC(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_100035F30(uint64_t *a1@<X8>)
{
  uint64_t v2 = 99;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 115;
      goto LABEL_3;
    case 2:
      *a1 = 101;
      a1[1] = 0xE100000000000000;
      break;
    case 3:
      *a1 = 4475253;
      a1[1] = 0xE300000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE100000000000000;
      break;
  }
}

uint64_t sub_100035F98()
{
  uint64_t result = 99;
  switch(*v0)
  {
    case 1:
      uint64_t result = 115;
      break;
    case 2:
      uint64_t result = 101;
      break;
    case 3:
      uint64_t result = 4475253;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100035FF4@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1000424BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003601C(uint64_t a1)
{
  unint64_t v2 = sub_1000362B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100036058(uint64_t a1)
{
  unint64_t v2 = sub_1000362B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSInvitationSchema.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100002214(&qword_1000906C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000029D8(a1, a1[3]);
  sub_1000362B0();
  sub_1000786A0();
  v8[15] = 0;
  type metadata accessor for IDSInvitationContextSchema(0);
  sub_10003347C(&qword_1000906D8, (void (*)(uint64_t))type metadata accessor for IDSInvitationContextSchema);
  sub_100078590();
  if (!v1)
  {
    type metadata accessor for IDSInvitationSchema(0);
    v8[14] = 1;
    sub_100078570();
    v8[13] = 2;
    sub_1000784E0();
    v8[12] = 3;
    sub_100078540();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1000362B0()
{
  unint64_t result = qword_1000906D0;
  if (!qword_1000906D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000906D0);
  }
  return result;
}

uint64_t type metadata accessor for IDSInvitationSchema(uint64_t a1)
{
  return sub_100036324(a1, qword_100090918);
}

uint64_t sub_100036324(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t IDSInvitationSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for IDSInvitationContextSchema(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_100002214(&qword_1000906E0);
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for IDSInvitationSchema(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = a1[3];
  uint64_t v27 = a1;
  sub_1000029D8(a1, v12);
  sub_1000362B0();
  sub_100078690();
  if (v2) {
    return sub_100002E34((uint64_t)v27);
  }
  uint64_t v13 = (uint64_t)v11;
  uint64_t v14 = v24;
  uint64_t v15 = v25;
  char v31 = 0;
  sub_10003347C(&qword_1000906E8, (void (*)(uint64_t))type metadata accessor for IDSInvitationContextSchema);
  sub_100078490();
  sub_1000333C0((uint64_t)v6, v13, type metadata accessor for IDSInvitationContextSchema);
  char v30 = 1;
  *(void *)(v13 + v9[5]) = sub_100078470();
  char v29 = 2;
  uint64_t v16 = sub_1000783E0();
  uint64_t v17 = v13 + v9[6];
  *(void *)uint64_t v17 = v16;
  *(unsigned char *)(v17 + 8) = v18 & 1;
  char v28 = 3;
  uint64_t v20 = sub_100078440();
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v26);
  uint64_t v23 = (uint64_t *)(v13 + v9[7]);
  *uint64_t v23 = v20;
  v23[1] = v22;
  sub_100034834(v13, v15, type metadata accessor for IDSInvitationSchema);
  sub_100002E34((uint64_t)v27);
  return sub_1000334C4(v13, type metadata accessor for IDSInvitationSchema);
}

unint64_t sub_1000366EC()
{
  unint64_t result = qword_1000906F0;
  if (!qword_1000906F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000906F0);
  }
  return result;
}

uint64_t sub_100036740@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSInvitationSchema.init(from:)(a1, a2);
}

uint64_t sub_100036758(void *a1)
{
  return IDSInvitationSchema.encode(to:)(a1);
}

uint64_t sub_10003677C()
{
  return 0;
}

ValueMetadata *type metadata accessor for IDSInvitationContextType()
{
  return &type metadata for IDSInvitationContextType;
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSDictionaryContextClientSchema(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v15 = a2[1];
        *a1 = *a2;
        a1[1] = v15;
        uint64_t v16 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
        uint64_t v17 = v16[5];
        __dsta = (char *)a1 + v17;
        char v18 = (char *)a2 + v17;
        uint64_t v19 = sub_100077B90();
        uint64_t v20 = *(void *)(v19 - 8);
        uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
        swift_bridgeObjectRetain();
        if (v21(v18, 1, v19))
        {
          uint64_t v22 = sub_100002214(&qword_100090248);
          memcpy(__dsta, v18, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dsta, v18, v19);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dsta, 0, 1, v19);
        }
        uint64_t v43 = v16[6];
        uint64_t v44 = (uint64_t *)((char *)a1 + v43);
        uint64_t v45 = (uint64_t *)((char *)a2 + v43);
        uint64_t v46 = v45[1];
        *uint64_t v44 = *v45;
        v44[1] = v46;
        *((unsigned char *)a1 + v16[7]) = *((unsigned char *)a2 + v16[7]);
        uint64_t v47 = v16[8];
        uint64_t v48 = (char *)a1 + v47;
        uint64_t v49 = (char *)a2 + v47;
        *(void *)uint64_t v48 = *(void *)v49;
        v48[8] = v49[8];
        *((unsigned char *)a1 + v16[9]) = *((unsigned char *)a2 + v16[9]);
        uint64_t v50 = v16[10];
        uint64_t v51 = (char *)a1 + v50;
        uint64_t v52 = (char *)a2 + v50;
        uint64_t v53 = *(uint64_t *)((char *)a2 + v50);
        swift_bridgeObjectRetain();
        if (v53 == 1)
        {
          *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
        }
        else
        {
          uint64_t v54 = *((void *)v52 + 1);
          *(void *)uint64_t v51 = v53;
          *((void *)v51 + 1) = v54;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v55 = v16[11];
        uint64_t v56 = (char *)a1 + v55;
        uint64_t v57 = (char *)a2 + v55;
        uint64_t v58 = sub_100077BA0();
        uint64_t v59 = *(void *)(v58 - 8);
        __dstc = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
        if (__dstc(v57, 1, v58))
        {
          uint64_t v60 = v59;
          uint64_t v61 = sub_100002214(&qword_1000906F8);
          memcpy(v56, v57, *(void *)(*(void *)(v61 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v56, v57, v58);
          uint64_t v60 = v59;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
        }
        uint64_t v66 = v16[12];
        uint64_t v67 = (char *)a1 + v66;
        uint64_t v68 = (char *)a2 + v66;
        unint64_t v69 = *((void *)v68 + 1);
        if (v69 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v67 = *(_OWORD *)v68;
        }
        else
        {
          uint64_t v70 = *(void *)v68;
          sub_100004214(*(void *)v68, *((void *)v68 + 1));
          *(void *)uint64_t v67 = v70;
          *((void *)v67 + 1) = v69;
        }
        uint64_t v71 = v16[13];
        uint64_t v72 = (uint64_t *)((char *)a1 + v71);
        uint64_t v73 = (uint64_t *)((char *)a2 + v71);
        uint64_t v74 = v73[1];
        *uint64_t v72 = *v73;
        v72[1] = v74;
        uint64_t v75 = v16[14];
        unint64_t v76 = (char *)a1 + v75;
        uint64_t v77 = (char *)a2 + v75;
        swift_bridgeObjectRetain();
        if (__dstc(v77, 1, v58))
        {
          uint64_t v78 = sub_100002214(&qword_1000906F8);
          memcpy(v76, v77, *(void *)(*(void *)(v78 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v76, v77, v58);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v76, 0, 1, v58);
        }
        uint64_t v79 = v16[15];
        uint64_t v80 = (uint64_t *)((char *)a1 + v79);
        uint64_t v81 = (uint64_t *)((char *)a2 + v79);
        uint64_t v82 = v81[1];
        void *v80 = *v81;
        v80[1] = v82;
        uint64_t v83 = v16[16];
        long long v84 = (char *)a1 + v83;
        uint64_t v85 = (_OWORD *)((char *)a2 + v83);
        unint64_t v86 = *(uint64_t *)((char *)a2 + v83 + 8);
        swift_bridgeObjectRetain();
        if (v86 >> 60 == 15)
        {
          *(_OWORD *)long long v84 = *v85;
        }
        else
        {
          uint64_t v87 = *(void *)v85;
          sub_100004214(v87, v86);
          *(void *)long long v84 = v87;
          *((void *)v84 + 1) = v86;
        }
        uint64_t v88 = v16[17];
        unint64_t v89 = (uint64_t *)((char *)a1 + v88);
        char v90 = (uint64_t *)((char *)a2 + v88);
        uint64_t v91 = v90[1];
        *unint64_t v89 = *v90;
        v89[1] = v91;
        uint64_t v92 = v16[18];
        unint64_t v93 = (char *)a1 + v92;
        uint64_t v94 = (char *)a2 + v92;
        v93[8] = v94[8];
        *(void *)unint64_t v93 = *(void *)v94;
        uint64_t v95 = v16[19];
        v96 = (char *)a1 + v95;
        uint64_t v97 = (char *)a2 + v95;
        *(void *)v96 = *(void *)v97;
        v96[8] = v97[8];
        uint64_t v98 = v16[20];
        char v99 = (char *)a1 + v98;
        char v100 = (_OWORD *)((char *)a2 + v98);
        unint64_t v101 = *(uint64_t *)((char *)a2 + v98 + 8);
        swift_bridgeObjectRetain();
        if (v101 >> 60 == 15)
        {
          *(_OWORD *)char v99 = *v100;
        }
        else
        {
          uint64_t v102 = *(void *)v100;
          sub_100004214(v102, v101);
          *(void *)char v99 = v102;
          *((void *)v99 + 1) = v101;
        }
        break;
      case 2u:
        uint64_t v23 = a2[1];
        *a1 = *a2;
        a1[1] = v23;
        uint64_t v24 = a2[3];
        a1[2] = a2[2];
        a1[3] = v24;
        uint64_t v25 = a2[4];
        unint64_t v26 = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100004214(v25, v26);
        a1[4] = v25;
        a1[5] = v26;
        uint64_t v27 = a2[7];
        a1[6] = a2[6];
        a1[7] = v27;
        uint64_t v28 = type metadata accessor for IDSKCSharingInvitationSchema();
        uint64_t v29 = *(int *)(v28 + 32);
        __dstb = (char *)a1 + v29;
        char v30 = (char *)a2 + v29;
        uint64_t v31 = sub_100077B90();
        uint64_t v32 = *(void *)(v31 - 8);
        uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
        swift_bridgeObjectRetain();
        if (v33(v30, 1, v31))
        {
          uint64_t v34 = sub_100002214(&qword_100090248);
          memcpy(__dstb, v30, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v32 + 16))(__dstb, v30, v31);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(__dstb, 0, 1, v31);
        }
        uint64_t v62 = *(int *)(v28 + 36);
        char v63 = (uint64_t *)((char *)a1 + v62);
        Swift::String v64 = (uint64_t *)((char *)a2 + v62);
        uint64_t v65 = v64[1];
        *char v63 = *v64;
        v63[1] = v65;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v36 = *a2;
        unint64_t v35 = a2[1];
        sub_100004214(v36, v35);
        *a1 = v36;
        a1[1] = v35;
        break;
      case 4u:
        uint64_t v37 = a2[1];
        *a1 = *a2;
        unint64_t v38 = a2[2];
        sub_100004214(v37, v38);
        a1[1] = v37;
        a1[2] = v38;
        break;
      default:
        uint64_t v6 = a2[1];
        *a1 = *a2;
        a1[1] = v6;
        uint64_t v7 = type metadata accessor for IDSSampleInvitationSchema();
        uint64_t v8 = *(int *)(v7 + 20);
        __dst = (char *)a1 + v8;
        uint64_t v9 = (char *)a2 + v8;
        uint64_t v10 = sub_100077B90();
        uint64_t v11 = *(void *)(v10 - 8);
        uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
        swift_bridgeObjectRetain();
        if (v12(v9, 1, v10))
        {
          uint64_t v13 = sub_100002214(&qword_100090248);
          memcpy(__dst, v9, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v11 + 16))(__dst, v9, v10);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
        }
        uint64_t v39 = *(int *)(v7 + 24);
        int v40 = (uint64_t *)((char *)a1 + v39);
        uint64_t v41 = (uint64_t *)((char *)a2 + v39);
        uint64_t v42 = v41[1];
        *int v40 = *v41;
        v40[1] = v42;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for IDSDictionaryContextClientSchema(uint64_t *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      uint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for IDSSampleInvitationSchema() + 20);
      uint64_t v4 = sub_100077B90();
      uint64_t v5 = *(void *)(v4 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
      }
      goto LABEL_21;
    case 1:
      swift_bridgeObjectRelease();
      uint64_t v6 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
      uint64_t v7 = (char *)a1 + v6[5];
      uint64_t v8 = sub_100077B90();
      uint64_t v9 = *(void *)(v8 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
        (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
      }
      swift_bridgeObjectRelease();
      if (*(uint64_t *)((char *)a1 + v6[10]) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v10 = (char *)a1 + v6[11];
      uint64_t v11 = sub_100077BA0();
      uint64_t v12 = *(void *)(v11 - 8);
      uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
      if (!v13(v10, 1, v11)) {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
      }
      uint64_t v14 = (uint64_t *)((char *)a1 + v6[12]);
      unint64_t v15 = v14[1];
      if (v15 >> 60 != 15) {
        sub_1000042CC(*v14, v15);
      }
      swift_bridgeObjectRelease();
      uint64_t v16 = (char *)a1 + v6[14];
      if (!v13(v16, 1, v11)) {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
      }
      swift_bridgeObjectRelease();
      uint64_t v17 = (uint64_t *)((char *)a1 + v6[16]);
      unint64_t v18 = v17[1];
      if (v18 >> 60 != 15) {
        sub_1000042CC(*v17, v18);
      }
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v19 = (uint64_t *)((char *)a1 + v6[20]);
      unint64_t v20 = v19[1];
      if (v20 >> 60 == 15) {
        return result;
      }
      uint64_t v24 = *v19;
LABEL_27:
      return sub_1000042CC(v24, v20);
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000042CC(a1[4], a1[5]);
      swift_bridgeObjectRelease();
      uint64_t v21 = (char *)a1 + *(int *)(type metadata accessor for IDSKCSharingInvitationSchema() + 32);
      uint64_t v22 = sub_100077B90();
      uint64_t v23 = *(void *)(v22 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22)) {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
      }
LABEL_21:
      return swift_bridgeObjectRelease();
    case 3:
      uint64_t v24 = *a1;
      unint64_t v20 = a1[1];
      goto LABEL_27;
    case 4:
      uint64_t v24 = a1[1];
      unint64_t v20 = a1[2];
      goto LABEL_27;
    default:
      return result;
  }
}

uint64_t *initializeWithCopy for IDSDictionaryContextClientSchema(uint64_t *a1, uint64_t *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      uint64_t v14 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
      uint64_t v15 = v14[5];
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = sub_100077B90();
      uint64_t v19 = *(void *)(v18 - 8);
      unint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
      swift_bridgeObjectRetain();
      if (v20(v17, 1, v18))
      {
        uint64_t v21 = sub_100002214(&qword_100090248);
        memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      uint64_t v40 = v14[6];
      uint64_t v41 = (uint64_t *)((char *)a1 + v40);
      uint64_t v42 = (uint64_t *)((char *)a2 + v40);
      uint64_t v43 = v42[1];
      *uint64_t v41 = *v42;
      v41[1] = v43;
      *((unsigned char *)a1 + v14[7]) = *((unsigned char *)a2 + v14[7]);
      uint64_t v44 = v14[8];
      uint64_t v45 = (char *)a1 + v44;
      uint64_t v46 = (char *)a2 + v44;
      *(void *)uint64_t v45 = *(void *)v46;
      v45[8] = v46[8];
      *((unsigned char *)a1 + v14[9]) = *((unsigned char *)a2 + v14[9]);
      uint64_t v47 = v14[10];
      uint64_t v48 = (char *)a1 + v47;
      uint64_t v49 = (char *)a2 + v47;
      uint64_t v50 = *(uint64_t *)((char *)a2 + v47);
      swift_bridgeObjectRetain();
      if (v50 == 1)
      {
        *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
      }
      else
      {
        uint64_t v51 = *((void *)v49 + 1);
        *(void *)uint64_t v48 = v50;
        *((void *)v48 + 1) = v51;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v52 = v14[11];
      uint64_t v53 = (char *)a1 + v52;
      uint64_t v54 = (char *)a2 + v52;
      uint64_t v55 = sub_100077BA0();
      uint64_t v56 = *(void *)(v55 - 8);
      uint64_t v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
      if (v57(v54, 1, v55))
      {
        uint64_t v58 = sub_100002214(&qword_1000906F8);
        memcpy(v53, v54, *(void *)(*(void *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v53, v54, v55);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      }
      uint64_t v62 = v14[12];
      char v63 = (char *)a1 + v62;
      Swift::String v64 = (char *)a2 + v62;
      unint64_t v65 = *((void *)v64 + 1);
      if (v65 >> 60 == 15)
      {
        *(_OWORD *)char v63 = *(_OWORD *)v64;
      }
      else
      {
        uint64_t v66 = *(void *)v64;
        sub_100004214(*(void *)v64, *((void *)v64 + 1));
        *(void *)char v63 = v66;
        *((void *)v63 + 1) = v65;
      }
      uint64_t v67 = v14[13];
      uint64_t v68 = (uint64_t *)((char *)a1 + v67);
      unint64_t v69 = (uint64_t *)((char *)a2 + v67);
      uint64_t v70 = v69[1];
      *uint64_t v68 = *v69;
      v68[1] = v70;
      uint64_t v71 = v14[14];
      uint64_t v72 = (char *)a1 + v71;
      uint64_t v73 = (char *)a2 + v71;
      swift_bridgeObjectRetain();
      if (v57(v73, 1, v55))
      {
        uint64_t v74 = sub_100002214(&qword_1000906F8);
        memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v72, v73, v55);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v72, 0, 1, v55);
      }
      uint64_t v75 = v14[15];
      unint64_t v76 = (uint64_t *)((char *)a1 + v75);
      uint64_t v77 = (uint64_t *)((char *)a2 + v75);
      uint64_t v78 = v77[1];
      *unint64_t v76 = *v77;
      v76[1] = v78;
      uint64_t v79 = v14[16];
      uint64_t v80 = (char *)a1 + v79;
      uint64_t v81 = (uint64_t *)((char *)a2 + v79);
      unint64_t v82 = *(uint64_t *)((char *)a2 + v79 + 8);
      swift_bridgeObjectRetain();
      if (v82 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
      }
      else
      {
        uint64_t v83 = *v81;
        sub_100004214(*v81, v82);
        *(void *)uint64_t v80 = v83;
        *((void *)v80 + 1) = v82;
      }
      uint64_t v84 = v14[17];
      uint64_t v85 = (uint64_t *)((char *)a1 + v84);
      unint64_t v86 = (uint64_t *)((char *)a2 + v84);
      uint64_t v87 = v86[1];
      *uint64_t v85 = *v86;
      v85[1] = v87;
      uint64_t v88 = v14[18];
      unint64_t v89 = (char *)a1 + v88;
      char v90 = (char *)a2 + v88;
      v89[8] = v90[8];
      *(void *)unint64_t v89 = *(void *)v90;
      uint64_t v91 = v14[19];
      uint64_t v92 = (char *)a1 + v91;
      unint64_t v93 = (char *)a2 + v91;
      *(void *)uint64_t v92 = *(void *)v93;
      v92[8] = v93[8];
      uint64_t v94 = v14[20];
      uint64_t v95 = (char *)a1 + v94;
      v96 = (uint64_t *)((char *)a2 + v94);
      unint64_t v97 = *(uint64_t *)((char *)a2 + v94 + 8);
      swift_bridgeObjectRetain();
      if (v97 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
      }
      else
      {
        uint64_t v98 = *v96;
        sub_100004214(*v96, v97);
        *(void *)uint64_t v95 = v98;
        *((void *)v95 + 1) = v97;
      }
      break;
    case 2u:
      uint64_t v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      uint64_t v23 = a2[3];
      a1[2] = a2[2];
      a1[3] = v23;
      uint64_t v24 = a2[4];
      unint64_t v25 = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100004214(v24, v25);
      a1[4] = v24;
      a1[5] = v25;
      uint64_t v26 = a2[7];
      a1[6] = a2[6];
      a1[7] = v26;
      uint64_t v27 = type metadata accessor for IDSKCSharingInvitationSchema();
      uint64_t v28 = *(int *)(v27 + 32);
      uint64_t v29 = (char *)a1 + v28;
      char v30 = (char *)a2 + v28;
      uint64_t v31 = sub_100077B90();
      uint64_t v32 = *(void *)(v31 - 8);
      uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
      swift_bridgeObjectRetain();
      if (v33(v30, 1, v31))
      {
        uint64_t v34 = sub_100002214(&qword_100090248);
        memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      uint64_t v39 = *(int *)(v27 + 36);
      goto LABEL_20;
    case 3u:
      uint64_t v36 = *a2;
      unint64_t v35 = a2[1];
      sub_100004214(v36, v35);
      *a1 = v36;
      a1[1] = v35;
      break;
    case 4u:
      uint64_t v37 = a2[1];
      *a1 = *a2;
      unint64_t v38 = a2[2];
      sub_100004214(v37, v38);
      a1[1] = v37;
      a1[2] = v38;
      break;
    default:
      uint64_t v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      uint64_t v5 = type metadata accessor for IDSSampleInvitationSchema();
      uint64_t v6 = *(int *)(v5 + 20);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = sub_100077B90();
      uint64_t v10 = *(void *)(v9 - 8);
      uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
      swift_bridgeObjectRetain();
      if (v11(v8, 1, v9))
      {
        uint64_t v12 = sub_100002214(&qword_100090248);
        memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      uint64_t v39 = *(int *)(v5 + 24);
LABEL_20:
      uint64_t v59 = (uint64_t *)((char *)a1 + v39);
      uint64_t v60 = (uint64_t *)((char *)a2 + v39);
      uint64_t v61 = v60[1];
      *uint64_t v59 = *v60;
      v59[1] = v61;
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for IDSDictionaryContextClientSchema(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    sub_1000334C4((uint64_t)a1, type metadata accessor for IDSDictionaryContextClientSchema);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v12 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
        uint64_t v13 = v12[5];
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = sub_100077B90();
        uint64_t v17 = *(void *)(v16 - 8);
        uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
        swift_bridgeObjectRetain();
        if (v18(v15, 1, v16))
        {
          uint64_t v19 = sub_100002214(&qword_100090248);
          memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
        }
        uint64_t v40 = v12[6];
        uint64_t v41 = (uint64_t *)((char *)a1 + v40);
        uint64_t v42 = (uint64_t *)((char *)a2 + v40);
        *uint64_t v41 = *v42;
        v41[1] = v42[1];
        *((unsigned char *)a1 + v12[7]) = *((unsigned char *)a2 + v12[7]);
        uint64_t v43 = v12[8];
        uint64_t v44 = (char *)a1 + v43;
        uint64_t v45 = (char *)a2 + v43;
        uint64_t v46 = *(void *)v45;
        v44[8] = v45[8];
        *(void *)uint64_t v44 = v46;
        *((unsigned char *)a1 + v12[9]) = *((unsigned char *)a2 + v12[9]);
        uint64_t v47 = v12[10];
        uint64_t v48 = (char *)a1 + v47;
        uint64_t v49 = (char *)a2 + v47;
        uint64_t v50 = *(uint64_t *)((char *)a2 + v47);
        swift_bridgeObjectRetain();
        if (v50 == 1)
        {
          *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
        }
        else
        {
          *(void *)uint64_t v48 = v50;
          *((void *)v48 + 1) = *((void *)v49 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v51 = v12[11];
        uint64_t v52 = (char *)a1 + v51;
        uint64_t v53 = (char *)a2 + v51;
        uint64_t v54 = sub_100077BA0();
        uint64_t v55 = *(void *)(v54 - 8);
        uint64_t v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
        if (v56(v53, 1, v54))
        {
          uint64_t v57 = v55;
          uint64_t v58 = sub_100002214(&qword_1000906F8);
          memcpy(v52, v53, *(void *)(*(void *)(v58 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
          uint64_t v57 = v55;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
        uint64_t v59 = v12[12];
        uint64_t v60 = (char *)a1 + v59;
        uint64_t v61 = (char *)a2 + v59;
        unint64_t v62 = *((void *)v61 + 1);
        if (v62 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
        }
        else
        {
          uint64_t v63 = *(void *)v61;
          sub_100004214(*(void *)v61, *((void *)v61 + 1));
          *(void *)uint64_t v60 = v63;
          *((void *)v60 + 1) = v62;
        }
        uint64_t v64 = v12[13];
        unint64_t v65 = (uint64_t *)((char *)a1 + v64);
        uint64_t v66 = (uint64_t *)((char *)a2 + v64);
        *unint64_t v65 = *v66;
        v65[1] = v66[1];
        uint64_t v67 = v12[14];
        uint64_t v68 = (char *)a1 + v67;
        unint64_t v69 = (char *)a2 + v67;
        swift_bridgeObjectRetain();
        if (v56(v69, 1, v54))
        {
          uint64_t v70 = sub_100002214(&qword_1000906F8);
          memcpy(v68, v69, *(void *)(*(void *)(v70 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v68, v69, v54);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v68, 0, 1, v54);
        }
        uint64_t v71 = v12[15];
        uint64_t v72 = (uint64_t *)((char *)a1 + v71);
        uint64_t v73 = (uint64_t *)((char *)a2 + v71);
        *uint64_t v72 = *v73;
        v72[1] = v73[1];
        uint64_t v74 = v12[16];
        uint64_t v75 = (char *)a1 + v74;
        unint64_t v76 = (_OWORD *)((char *)a2 + v74);
        unint64_t v77 = *(uint64_t *)((char *)a2 + v74 + 8);
        swift_bridgeObjectRetain();
        if (v77 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v75 = *v76;
        }
        else
        {
          uint64_t v78 = *(void *)v76;
          sub_100004214(v78, v77);
          *(void *)uint64_t v75 = v78;
          *((void *)v75 + 1) = v77;
        }
        uint64_t v79 = v12[17];
        uint64_t v80 = (uint64_t *)((char *)a1 + v79);
        uint64_t v81 = (uint64_t *)((char *)a2 + v79);
        void *v80 = *v81;
        v80[1] = v81[1];
        uint64_t v82 = v12[18];
        uint64_t v83 = (char *)a1 + v82;
        uint64_t v84 = (char *)a2 + v82;
        uint64_t v85 = *(void *)v84;
        v83[8] = v84[8];
        *(void *)uint64_t v83 = v85;
        uint64_t v86 = v12[19];
        uint64_t v87 = (char *)a1 + v86;
        uint64_t v88 = (char *)a2 + v86;
        uint64_t v89 = *(void *)v88;
        v87[8] = v88[8];
        *(void *)uint64_t v87 = v89;
        uint64_t v90 = v12[20];
        uint64_t v91 = (char *)a1 + v90;
        uint64_t v92 = (_OWORD *)((char *)a2 + v90);
        unint64_t v93 = *(uint64_t *)((char *)a2 + v90 + 8);
        swift_bridgeObjectRetain();
        if (v93 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v91 = *v92;
        }
        else
        {
          uint64_t v94 = *(void *)v92;
          sub_100004214(v94, v93);
          *(void *)uint64_t v91 = v94;
          *((void *)v91 + 1) = v93;
        }
        break;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        uint64_t v20 = a2[4];
        unint64_t v21 = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100004214(v20, v21);
        a1[4] = v20;
        a1[5] = v21;
        a1[6] = a2[6];
        a1[7] = a2[7];
        uint64_t v22 = type metadata accessor for IDSKCSharingInvitationSchema();
        uint64_t v23 = *(int *)(v22 + 32);
        uint64_t v24 = (char *)a1 + v23;
        unint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = sub_100077B90();
        uint64_t v27 = *(void *)(v26 - 8);
        uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
        swift_bridgeObjectRetain();
        if (v28(v25, 1, v26))
        {
          uint64_t v29 = sub_100002214(&qword_100090248);
          memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
        uint64_t v37 = *(int *)(v22 + 36);
        unint64_t v38 = (uint64_t *)((char *)a1 + v37);
        uint64_t v39 = (uint64_t *)((char *)a2 + v37);
        *unint64_t v38 = *v39;
        v38[1] = v39[1];
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v31 = *a2;
        unint64_t v30 = a2[1];
        sub_100004214(v31, v30);
        *a1 = v31;
        a1[1] = v30;
        break;
      case 4u:
        *a1 = *a2;
        uint64_t v33 = a2[1];
        unint64_t v32 = a2[2];
        sub_100004214(v33, v32);
        a1[1] = v33;
        a1[2] = v32;
        break;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v4 = type metadata accessor for IDSSampleInvitationSchema();
        uint64_t v5 = *(int *)(v4 + 20);
        uint64_t v6 = (char *)a1 + v5;
        uint64_t v7 = (char *)a2 + v5;
        uint64_t v8 = sub_100077B90();
        uint64_t v9 = *(void *)(v8 - 8);
        uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
        swift_bridgeObjectRetain();
        if (v10(v7, 1, v8))
        {
          uint64_t v11 = sub_100002214(&qword_100090248);
          memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
        }
        uint64_t v34 = *(int *)(v4 + 24);
        unint64_t v35 = (uint64_t *)((char *)a1 + v34);
        uint64_t v36 = (uint64_t *)((char *)a2 + v34);
        *unint64_t v35 = *v36;
        v35[1] = v36[1];
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for IDSDictionaryContextClientSchema(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      long long v14 = a2[1];
      *a1 = *a2;
      a1[1] = v14;
      long long v15 = a2[3];
      a1[2] = a2[2];
      a1[3] = v15;
      uint64_t v16 = type metadata accessor for IDSKCSharingInvitationSchema();
      uint64_t v17 = *(int *)(v16 + 32);
      uint64_t v18 = (char *)a1 + v17;
      uint64_t v19 = (char *)a2 + v17;
      uint64_t v20 = sub_100077B90();
      uint64_t v21 = *(void *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        uint64_t v22 = sub_100002214(&qword_100090248);
        memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v16 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(v16 + 36));
      goto LABEL_23;
    case 1:
      *a1 = *a2;
      uint64_t v23 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
      uint64_t v24 = v23[5];
      unint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = sub_100077B90();
      uint64_t v28 = *(void *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        uint64_t v29 = sub_100002214(&qword_100090248);
        memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      *(_OWORD *)((char *)a1 + v23[6]) = *(_OWORD *)((char *)a2 + v23[6]);
      *((unsigned char *)a1 + v23[7]) = *((unsigned char *)a2 + v23[7]);
      uint64_t v30 = v23[8];
      uint64_t v31 = (char *)a1 + v30;
      unint64_t v32 = (char *)a2 + v30;
      v31[8] = v32[8];
      *(void *)uint64_t v31 = *(void *)v32;
      *((unsigned char *)a1 + v23[9]) = *((unsigned char *)a2 + v23[9]);
      *(_OWORD *)((char *)a1 + v23[10]) = *(_OWORD *)((char *)a2 + v23[10]);
      uint64_t v33 = v23[11];
      uint64_t v34 = (char *)a1 + v33;
      unint64_t v35 = (char *)a2 + v33;
      uint64_t v36 = sub_100077BA0();
      uint64_t v37 = *(void *)(v36 - 8);
      unint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
      if (v38(v35, 1, v36))
      {
        uint64_t v39 = sub_100002214(&qword_1000906F8);
        memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      }
      *(_OWORD *)((char *)a1 + v23[12]) = *(_OWORD *)((char *)a2 + v23[12]);
      *(_OWORD *)((char *)a1 + v23[13]) = *(_OWORD *)((char *)a2 + v23[13]);
      uint64_t v40 = v23[14];
      uint64_t v41 = (char *)a1 + v40;
      uint64_t v42 = (char *)a2 + v40;
      if (v38((char *)a2 + v40, 1, v36))
      {
        uint64_t v43 = sub_100002214(&qword_1000906F8);
        memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v41, v42, v36);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v41, 0, 1, v36);
      }
      *(_OWORD *)((char *)a1 + v23[15]) = *(_OWORD *)((char *)a2 + v23[15]);
      *(_OWORD *)((char *)a1 + v23[16]) = *(_OWORD *)((char *)a2 + v23[16]);
      *(_OWORD *)((char *)a1 + v23[17]) = *(_OWORD *)((char *)a2 + v23[17]);
      uint64_t v44 = v23[18];
      uint64_t v45 = (char *)a1 + v44;
      uint64_t v46 = (char *)a2 + v44;
      v45[8] = v46[8];
      *(void *)uint64_t v45 = *(void *)v46;
      uint64_t v47 = v23[19];
      uint64_t v48 = (char *)a1 + v47;
      uint64_t v49 = (char *)a2 + v47;
      v48[8] = v49[8];
      *(void *)uint64_t v48 = *(void *)v49;
      *(_OWORD *)((char *)a1 + v23[20]) = *(_OWORD *)((char *)a2 + v23[20]);
      goto LABEL_23;
    case 0:
      *a1 = *a2;
      uint64_t v7 = type metadata accessor for IDSSampleInvitationSchema();
      uint64_t v8 = *(int *)(v7 + 20);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = sub_100077B90();
      uint64_t v12 = *(void *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        uint64_t v13 = sub_100002214(&qword_100090248);
        memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v7 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 24));
LABEL_23:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for IDSDictionaryContextClientSchema(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1000334C4((uint64_t)a1, type metadata accessor for IDSDictionaryContextClientSchema);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        long long v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        long long v15 = a2[3];
        a1[2] = a2[2];
        a1[3] = v15;
        uint64_t v16 = type metadata accessor for IDSKCSharingInvitationSchema();
        uint64_t v17 = *(int *)(v16 + 32);
        uint64_t v18 = (char *)a1 + v17;
        uint64_t v19 = (char *)a2 + v17;
        uint64_t v20 = sub_100077B90();
        uint64_t v21 = *(void *)(v20 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        {
          uint64_t v22 = sub_100002214(&qword_100090248);
          memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        }
        *(_OWORD *)((char *)a1 + *(int *)(v16 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(v16 + 36));
        goto LABEL_24;
      case 1:
        *a1 = *a2;
        uint64_t v23 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
        uint64_t v24 = v23[5];
        unint64_t v25 = (char *)a1 + v24;
        uint64_t v26 = (char *)a2 + v24;
        uint64_t v27 = sub_100077B90();
        uint64_t v28 = *(void *)(v27 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
        {
          uint64_t v29 = sub_100002214(&qword_100090248);
          memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
        }
        *(_OWORD *)((char *)a1 + v23[6]) = *(_OWORD *)((char *)a2 + v23[6]);
        *((unsigned char *)a1 + v23[7]) = *((unsigned char *)a2 + v23[7]);
        uint64_t v30 = v23[8];
        uint64_t v31 = (char *)a1 + v30;
        unint64_t v32 = (char *)a2 + v30;
        v31[8] = v32[8];
        *(void *)uint64_t v31 = *(void *)v32;
        *((unsigned char *)a1 + v23[9]) = *((unsigned char *)a2 + v23[9]);
        *(_OWORD *)((char *)a1 + v23[10]) = *(_OWORD *)((char *)a2 + v23[10]);
        uint64_t v33 = v23[11];
        uint64_t v34 = (char *)a1 + v33;
        unint64_t v35 = (char *)a2 + v33;
        uint64_t v36 = sub_100077BA0();
        uint64_t v37 = *(void *)(v36 - 8);
        unint64_t v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
        if (v38(v35, 1, v36))
        {
          uint64_t v39 = sub_100002214(&qword_1000906F8);
          memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
        }
        *(_OWORD *)((char *)a1 + v23[12]) = *(_OWORD *)((char *)a2 + v23[12]);
        *(_OWORD *)((char *)a1 + v23[13]) = *(_OWORD *)((char *)a2 + v23[13]);
        uint64_t v40 = v23[14];
        uint64_t v41 = (char *)a1 + v40;
        uint64_t v42 = (char *)a2 + v40;
        if (v38((char *)a2 + v40, 1, v36))
        {
          uint64_t v43 = sub_100002214(&qword_1000906F8);
          memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v41, v42, v36);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v41, 0, 1, v36);
        }
        *(_OWORD *)((char *)a1 + v23[15]) = *(_OWORD *)((char *)a2 + v23[15]);
        *(_OWORD *)((char *)a1 + v23[16]) = *(_OWORD *)((char *)a2 + v23[16]);
        *(_OWORD *)((char *)a1 + v23[17]) = *(_OWORD *)((char *)a2 + v23[17]);
        uint64_t v44 = v23[18];
        uint64_t v45 = (char *)a1 + v44;
        uint64_t v46 = (char *)a2 + v44;
        v45[8] = v46[8];
        *(void *)uint64_t v45 = *(void *)v46;
        uint64_t v47 = v23[19];
        uint64_t v48 = (char *)a1 + v47;
        uint64_t v49 = (char *)a2 + v47;
        v48[8] = v49[8];
        *(void *)uint64_t v48 = *(void *)v49;
        *(_OWORD *)((char *)a1 + v23[20]) = *(_OWORD *)((char *)a2 + v23[20]);
        goto LABEL_24;
      case 0:
        *a1 = *a2;
        uint64_t v7 = type metadata accessor for IDSSampleInvitationSchema();
        uint64_t v8 = *(int *)(v7 + 20);
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = sub_100077B90();
        uint64_t v12 = *(void *)(v11 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
        {
          uint64_t v13 = sub_100002214(&qword_100090248);
          memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
        }
        *(_OWORD *)((char *)a1 + *(int *)(v7 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v7 + 24));
LABEL_24:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSDictionaryContextClientSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for IDSDictionaryContextClientSchema(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_100038FDC()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100038FEC()
{
  uint64_t result = type metadata accessor for IDSSampleInvitationSchema();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for IDSHomeKitInvitationSchema(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for IDSKCSharingInvitationSchema();
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSDictionaryContextData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    type metadata accessor for IDSDictionaryContextClientSchema(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v16 = a2[1];
        *a1 = *a2;
        a1[1] = v16;
        uint64_t v17 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
        uint64_t v18 = v17[5];
        uint64_t v19 = (char *)a1 + v18;
        uint64_t v20 = (char *)a2 + v18;
        uint64_t v21 = sub_100077B90();
        uint64_t v22 = *(void *)(v21 - 8);
        uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
        swift_bridgeObjectRetain();
        if (v23(v20, 1, v21))
        {
          uint64_t v24 = sub_100002214(&qword_100090248);
          memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
        }
        uint64_t v46 = v17[6];
        uint64_t v47 = (uint64_t *)((char *)a1 + v46);
        uint64_t v48 = (uint64_t *)((char *)a2 + v46);
        uint64_t v49 = v48[1];
        *uint64_t v47 = *v48;
        v47[1] = v49;
        *((unsigned char *)a1 + v17[7]) = *((unsigned char *)a2 + v17[7]);
        uint64_t v50 = v17[8];
        uint64_t v51 = (char *)a1 + v50;
        uint64_t v52 = (char *)a2 + v50;
        *(void *)uint64_t v51 = *(void *)v52;
        v51[8] = v52[8];
        *((unsigned char *)a1 + v17[9]) = *((unsigned char *)a2 + v17[9]);
        uint64_t v53 = v17[10];
        uint64_t v54 = (char *)a1 + v53;
        uint64_t v55 = (char *)a2 + v53;
        uint64_t v56 = *(uint64_t *)((char *)a2 + v53);
        swift_bridgeObjectRetain();
        if (v56 == 1)
        {
          *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
        }
        else
        {
          uint64_t v57 = *((void *)v55 + 1);
          *(void *)uint64_t v54 = v56;
          *((void *)v54 + 1) = v57;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v58 = v17[11];
        uint64_t v59 = (char *)a1 + v58;
        uint64_t v60 = (char *)a2 + v58;
        uint64_t v61 = sub_100077BA0();
        uint64_t v62 = *(void *)(v61 - 8);
        uint64_t v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
        if (v63(v60, 1, v61))
        {
          uint64_t v64 = sub_100002214(&qword_1000906F8);
          memcpy(v59, v60, *(void *)(*(void *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v59, v60, v61);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
        }
        uint64_t v69 = v17[12];
        uint64_t v70 = (char *)a1 + v69;
        uint64_t v71 = (char *)a2 + v69;
        unint64_t v72 = *((void *)v71 + 1);
        if (v72 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
        }
        else
        {
          uint64_t v73 = *(void *)v71;
          sub_100004214(*(void *)v71, *((void *)v71 + 1));
          *(void *)uint64_t v70 = v73;
          *((void *)v70 + 1) = v72;
        }
        uint64_t v74 = v17[13];
        uint64_t v75 = (uint64_t *)((char *)a1 + v74);
        unint64_t v76 = (uint64_t *)((char *)a2 + v74);
        uint64_t v77 = v76[1];
        void *v75 = *v76;
        v75[1] = v77;
        uint64_t v78 = v17[14];
        uint64_t v79 = (char *)a1 + v78;
        uint64_t v80 = (char *)a2 + v78;
        swift_bridgeObjectRetain();
        if (v63(v80, 1, v61))
        {
          uint64_t v81 = sub_100002214(&qword_1000906F8);
          memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v79, v80, v61);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v79, 0, 1, v61);
        }
        uint64_t v82 = v17[15];
        uint64_t v83 = (uint64_t *)((char *)a1 + v82);
        uint64_t v84 = (uint64_t *)((char *)a2 + v82);
        uint64_t v85 = v84[1];
        *uint64_t v83 = *v84;
        v83[1] = v85;
        uint64_t v86 = v17[16];
        uint64_t v87 = (char *)a1 + v86;
        uint64_t v88 = (_OWORD *)((char *)a2 + v86);
        unint64_t v89 = *(uint64_t *)((char *)a2 + v86 + 8);
        swift_bridgeObjectRetain();
        if (v89 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v87 = *v88;
        }
        else
        {
          uint64_t v90 = *(void *)v88;
          sub_100004214(v90, v89);
          *(void *)uint64_t v87 = v90;
          *((void *)v87 + 1) = v89;
        }
        uint64_t v91 = v17[17];
        uint64_t v92 = (uint64_t *)((char *)a1 + v91);
        unint64_t v93 = (uint64_t *)((char *)a2 + v91);
        uint64_t v94 = v93[1];
        *uint64_t v92 = *v93;
        v92[1] = v94;
        uint64_t v95 = v17[18];
        v96 = (char *)a1 + v95;
        unint64_t v97 = (char *)a2 + v95;
        v96[8] = v97[8];
        *(void *)v96 = *(void *)v97;
        uint64_t v98 = v17[19];
        char v99 = (char *)a1 + v98;
        char v100 = (char *)a2 + v98;
        *(void *)char v99 = *(void *)v100;
        v99[8] = v100[8];
        uint64_t v101 = v17[20];
        uint64_t v102 = (char *)a1 + v101;
        char v103 = (_OWORD *)((char *)a2 + v101);
        unint64_t v104 = *(uint64_t *)((char *)a2 + v101 + 8);
        swift_bridgeObjectRetain();
        if (v104 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v102 = *v103;
        }
        else
        {
          uint64_t v105 = *(void *)v103;
          sub_100004214(v105, v104);
          *(void *)uint64_t v102 = v105;
          *((void *)v102 + 1) = v104;
        }
        break;
      case 2u:
        uint64_t v25 = a2[1];
        *a1 = *a2;
        a1[1] = v25;
        uint64_t v26 = a2[3];
        a1[2] = a2[2];
        a1[3] = v26;
        uint64_t v27 = a2[4];
        unint64_t v28 = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100004214(v27, v28);
        a1[4] = v27;
        a1[5] = v28;
        uint64_t v29 = a2[7];
        a1[6] = a2[6];
        a1[7] = v29;
        uint64_t v30 = type metadata accessor for IDSKCSharingInvitationSchema();
        uint64_t v31 = *(int *)(v30 + 32);
        unint64_t v32 = (char *)a1 + v31;
        uint64_t v33 = (char *)a2 + v31;
        uint64_t v34 = sub_100077B90();
        uint64_t v35 = *(void *)(v34 - 8);
        uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
        swift_bridgeObjectRetain();
        if (v36(v33, 1, v34))
        {
          uint64_t v37 = sub_100002214(&qword_100090248);
          memcpy(v32, v33, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
        }
        uint64_t v65 = *(int *)(v30 + 36);
        uint64_t v66 = (uint64_t *)((char *)a1 + v65);
        uint64_t v67 = (uint64_t *)((char *)a2 + v65);
        uint64_t v68 = v67[1];
        *uint64_t v66 = *v67;
        v66[1] = v68;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v39 = *a2;
        unint64_t v38 = a2[1];
        sub_100004214(v39, v38);
        *a1 = v39;
        a1[1] = v38;
        break;
      case 4u:
        uint64_t v40 = a2[1];
        *a1 = *a2;
        unint64_t v41 = a2[2];
        sub_100004214(v40, v41);
        a1[1] = v40;
        a1[2] = v41;
        break;
      default:
        uint64_t v6 = a2[1];
        *a1 = *a2;
        a1[1] = v6;
        uint64_t v7 = type metadata accessor for IDSSampleInvitationSchema();
        uint64_t v8 = *(int *)(v7 + 20);
        uint64_t v9 = (char *)a1 + v8;
        uint64_t v10 = (char *)a2 + v8;
        uint64_t v11 = sub_100077B90();
        uint64_t v12 = *(void *)(v11 - 8);
        uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
        swift_bridgeObjectRetain();
        if (v13(v10, 1, v11))
        {
          uint64_t v14 = sub_100002214(&qword_100090248);
          memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
        }
        uint64_t v42 = *(int *)(v7 + 24);
        uint64_t v43 = (uint64_t *)((char *)a1 + v42);
        uint64_t v44 = (uint64_t *)((char *)a2 + v42);
        uint64_t v45 = v44[1];
        *uint64_t v43 = *v44;
        v43[1] = v45;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for IDSDictionaryContextData(uint64_t *a1)
{
  type metadata accessor for IDSDictionaryContextClientSchema(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      unint64_t v3 = (char *)a1 + *(int *)(type metadata accessor for IDSSampleInvitationSchema() + 20);
      uint64_t v4 = sub_100077B90();
      uint64_t v5 = *(void *)(v4 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
      }
      goto LABEL_21;
    case 1:
      swift_bridgeObjectRelease();
      uint64_t v6 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
      uint64_t v7 = (char *)a1 + v6[5];
      uint64_t v8 = sub_100077B90();
      uint64_t v9 = *(void *)(v8 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
        (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
      }
      swift_bridgeObjectRelease();
      if (*(uint64_t *)((char *)a1 + v6[10]) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v10 = (char *)a1 + v6[11];
      uint64_t v11 = sub_100077BA0();
      uint64_t v12 = *(void *)(v11 - 8);
      uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
      if (!v13(v10, 1, v11)) {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
      }
      uint64_t v14 = (uint64_t *)((char *)a1 + v6[12]);
      unint64_t v15 = v14[1];
      if (v15 >> 60 != 15) {
        sub_1000042CC(*v14, v15);
      }
      swift_bridgeObjectRelease();
      uint64_t v16 = (char *)a1 + v6[14];
      if (!v13(v16, 1, v11)) {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
      }
      swift_bridgeObjectRelease();
      uint64_t v17 = (uint64_t *)((char *)a1 + v6[16]);
      unint64_t v18 = v17[1];
      if (v18 >> 60 != 15) {
        sub_1000042CC(*v17, v18);
      }
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v19 = (uint64_t *)((char *)a1 + v6[20]);
      unint64_t v20 = v19[1];
      if (v20 >> 60 == 15) {
        return result;
      }
      uint64_t v24 = *v19;
LABEL_27:
      return sub_1000042CC(v24, v20);
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000042CC(a1[4], a1[5]);
      swift_bridgeObjectRelease();
      uint64_t v21 = (char *)a1 + *(int *)(type metadata accessor for IDSKCSharingInvitationSchema() + 32);
      uint64_t v22 = sub_100077B90();
      uint64_t v23 = *(void *)(v22 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22)) {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v21, v22);
      }
LABEL_21:
      return swift_bridgeObjectRelease();
    case 3:
      uint64_t v24 = *a1;
      unint64_t v20 = a1[1];
      goto LABEL_27;
    case 4:
      uint64_t v24 = a1[1];
      unint64_t v20 = a1[2];
      goto LABEL_27;
    default:
      return result;
  }
}

uint64_t *initializeWithCopy for IDSDictionaryContextData(uint64_t *a1, uint64_t *a2)
{
  type metadata accessor for IDSDictionaryContextClientSchema(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      uint64_t v14 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
      uint64_t v15 = v14[5];
      uint64_t v16 = (char *)a1 + v15;
      uint64_t v17 = (char *)a2 + v15;
      uint64_t v18 = sub_100077B90();
      uint64_t v19 = *(void *)(v18 - 8);
      unint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
      swift_bridgeObjectRetain();
      if (v20(v17, 1, v18))
      {
        uint64_t v21 = sub_100002214(&qword_100090248);
        memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
      }
      uint64_t v40 = v14[6];
      unint64_t v41 = (uint64_t *)((char *)a1 + v40);
      uint64_t v42 = (uint64_t *)((char *)a2 + v40);
      uint64_t v43 = v42[1];
      *unint64_t v41 = *v42;
      v41[1] = v43;
      *((unsigned char *)a1 + v14[7]) = *((unsigned char *)a2 + v14[7]);
      uint64_t v44 = v14[8];
      uint64_t v45 = (char *)a1 + v44;
      uint64_t v46 = (char *)a2 + v44;
      *(void *)uint64_t v45 = *(void *)v46;
      v45[8] = v46[8];
      *((unsigned char *)a1 + v14[9]) = *((unsigned char *)a2 + v14[9]);
      uint64_t v47 = v14[10];
      uint64_t v48 = (char *)a1 + v47;
      uint64_t v49 = (char *)a2 + v47;
      uint64_t v50 = *(uint64_t *)((char *)a2 + v47);
      swift_bridgeObjectRetain();
      if (v50 == 1)
      {
        *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
      }
      else
      {
        uint64_t v51 = *((void *)v49 + 1);
        *(void *)uint64_t v48 = v50;
        *((void *)v48 + 1) = v51;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v52 = v14[11];
      uint64_t v53 = (char *)a1 + v52;
      uint64_t v54 = (char *)a2 + v52;
      uint64_t v55 = sub_100077BA0();
      uint64_t v56 = *(void *)(v55 - 8);
      uint64_t v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48);
      if (v57(v54, 1, v55))
      {
        uint64_t v58 = sub_100002214(&qword_1000906F8);
        memcpy(v53, v54, *(void *)(*(void *)(v58 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v53, v54, v55);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
      }
      uint64_t v62 = v14[12];
      uint64_t v63 = (char *)a1 + v62;
      uint64_t v64 = (char *)a2 + v62;
      unint64_t v65 = *((void *)v64 + 1);
      if (v65 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
      }
      else
      {
        uint64_t v66 = *(void *)v64;
        sub_100004214(*(void *)v64, *((void *)v64 + 1));
        *(void *)uint64_t v63 = v66;
        *((void *)v63 + 1) = v65;
      }
      uint64_t v67 = v14[13];
      uint64_t v68 = (uint64_t *)((char *)a1 + v67);
      uint64_t v69 = (uint64_t *)((char *)a2 + v67);
      uint64_t v70 = v69[1];
      *uint64_t v68 = *v69;
      v68[1] = v70;
      uint64_t v71 = v14[14];
      unint64_t v72 = (char *)a1 + v71;
      uint64_t v73 = (char *)a2 + v71;
      swift_bridgeObjectRetain();
      if (v57(v73, 1, v55))
      {
        uint64_t v74 = sub_100002214(&qword_1000906F8);
        memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v72, v73, v55);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v72, 0, 1, v55);
      }
      uint64_t v75 = v14[15];
      unint64_t v76 = (uint64_t *)((char *)a1 + v75);
      uint64_t v77 = (uint64_t *)((char *)a2 + v75);
      uint64_t v78 = v77[1];
      *unint64_t v76 = *v77;
      v76[1] = v78;
      uint64_t v79 = v14[16];
      uint64_t v80 = (char *)a1 + v79;
      uint64_t v81 = (uint64_t *)((char *)a2 + v79);
      unint64_t v82 = *(uint64_t *)((char *)a2 + v79 + 8);
      swift_bridgeObjectRetain();
      if (v82 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
      }
      else
      {
        uint64_t v83 = *v81;
        sub_100004214(*v81, v82);
        *(void *)uint64_t v80 = v83;
        *((void *)v80 + 1) = v82;
      }
      uint64_t v84 = v14[17];
      uint64_t v85 = (uint64_t *)((char *)a1 + v84);
      uint64_t v86 = (uint64_t *)((char *)a2 + v84);
      uint64_t v87 = v86[1];
      *uint64_t v85 = *v86;
      v85[1] = v87;
      uint64_t v88 = v14[18];
      unint64_t v89 = (char *)a1 + v88;
      uint64_t v90 = (char *)a2 + v88;
      v89[8] = v90[8];
      *(void *)unint64_t v89 = *(void *)v90;
      uint64_t v91 = v14[19];
      uint64_t v92 = (char *)a1 + v91;
      unint64_t v93 = (char *)a2 + v91;
      *(void *)uint64_t v92 = *(void *)v93;
      v92[8] = v93[8];
      uint64_t v94 = v14[20];
      uint64_t v95 = (char *)a1 + v94;
      v96 = (uint64_t *)((char *)a2 + v94);
      unint64_t v97 = *(uint64_t *)((char *)a2 + v94 + 8);
      swift_bridgeObjectRetain();
      if (v97 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
      }
      else
      {
        uint64_t v98 = *v96;
        sub_100004214(*v96, v97);
        *(void *)uint64_t v95 = v98;
        *((void *)v95 + 1) = v97;
      }
      break;
    case 2u:
      uint64_t v22 = a2[1];
      *a1 = *a2;
      a1[1] = v22;
      uint64_t v23 = a2[3];
      a1[2] = a2[2];
      a1[3] = v23;
      uint64_t v24 = a2[4];
      unint64_t v25 = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100004214(v24, v25);
      a1[4] = v24;
      a1[5] = v25;
      uint64_t v26 = a2[7];
      a1[6] = a2[6];
      a1[7] = v26;
      uint64_t v27 = type metadata accessor for IDSKCSharingInvitationSchema();
      uint64_t v28 = *(int *)(v27 + 32);
      uint64_t v29 = (char *)a1 + v28;
      uint64_t v30 = (char *)a2 + v28;
      uint64_t v31 = sub_100077B90();
      uint64_t v32 = *(void *)(v31 - 8);
      uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
      swift_bridgeObjectRetain();
      if (v33(v30, 1, v31))
      {
        uint64_t v34 = sub_100002214(&qword_100090248);
        memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      uint64_t v39 = *(int *)(v27 + 36);
      goto LABEL_20;
    case 3u:
      uint64_t v36 = *a2;
      unint64_t v35 = a2[1];
      sub_100004214(v36, v35);
      *a1 = v36;
      a1[1] = v35;
      break;
    case 4u:
      uint64_t v37 = a2[1];
      *a1 = *a2;
      unint64_t v38 = a2[2];
      sub_100004214(v37, v38);
      a1[1] = v37;
      a1[2] = v38;
      break;
    default:
      uint64_t v4 = a2[1];
      *a1 = *a2;
      a1[1] = v4;
      uint64_t v5 = type metadata accessor for IDSSampleInvitationSchema();
      uint64_t v6 = *(int *)(v5 + 20);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = sub_100077B90();
      uint64_t v10 = *(void *)(v9 - 8);
      uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
      swift_bridgeObjectRetain();
      if (v11(v8, 1, v9))
      {
        uint64_t v12 = sub_100002214(&qword_100090248);
        memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      uint64_t v39 = *(int *)(v5 + 24);
LABEL_20:
      uint64_t v59 = (uint64_t *)((char *)a1 + v39);
      uint64_t v60 = (uint64_t *)((char *)a2 + v39);
      uint64_t v61 = v60[1];
      *uint64_t v59 = *v60;
      v59[1] = v61;
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for IDSDictionaryContextData(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    sub_1000334C4((uint64_t)a1, type metadata accessor for IDSDictionaryContextClientSchema);
    type metadata accessor for IDSDictionaryContextClientSchema(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v12 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
        uint64_t v13 = v12[5];
        uint64_t v14 = (char *)a1 + v13;
        uint64_t v15 = (char *)a2 + v13;
        uint64_t v16 = sub_100077B90();
        uint64_t v17 = *(void *)(v16 - 8);
        uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
        swift_bridgeObjectRetain();
        if (v18(v15, 1, v16))
        {
          uint64_t v19 = sub_100002214(&qword_100090248);
          memcpy(v14, v15, *(void *)(*(void *)(v19 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
        }
        uint64_t v40 = v12[6];
        unint64_t v41 = (uint64_t *)((char *)a1 + v40);
        uint64_t v42 = (uint64_t *)((char *)a2 + v40);
        *unint64_t v41 = *v42;
        v41[1] = v42[1];
        *((unsigned char *)a1 + v12[7]) = *((unsigned char *)a2 + v12[7]);
        uint64_t v43 = v12[8];
        uint64_t v44 = (char *)a1 + v43;
        uint64_t v45 = (char *)a2 + v43;
        uint64_t v46 = *(void *)v45;
        v44[8] = v45[8];
        *(void *)uint64_t v44 = v46;
        *((unsigned char *)a1 + v12[9]) = *((unsigned char *)a2 + v12[9]);
        uint64_t v47 = v12[10];
        uint64_t v48 = (char *)a1 + v47;
        uint64_t v49 = (char *)a2 + v47;
        uint64_t v50 = *(uint64_t *)((char *)a2 + v47);
        swift_bridgeObjectRetain();
        if (v50 == 1)
        {
          *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
        }
        else
        {
          *(void *)uint64_t v48 = v50;
          *((void *)v48 + 1) = *((void *)v49 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v51 = v12[11];
        uint64_t v52 = (char *)a1 + v51;
        uint64_t v53 = (char *)a2 + v51;
        uint64_t v54 = sub_100077BA0();
        uint64_t v55 = *(void *)(v54 - 8);
        uint64_t v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
        if (v56(v53, 1, v54))
        {
          uint64_t v57 = v55;
          uint64_t v58 = sub_100002214(&qword_1000906F8);
          memcpy(v52, v53, *(void *)(*(void *)(v58 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v52, v53, v54);
          uint64_t v57 = v55;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
        uint64_t v59 = v12[12];
        uint64_t v60 = (char *)a1 + v59;
        uint64_t v61 = (char *)a2 + v59;
        unint64_t v62 = *((void *)v61 + 1);
        if (v62 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
        }
        else
        {
          uint64_t v63 = *(void *)v61;
          sub_100004214(*(void *)v61, *((void *)v61 + 1));
          *(void *)uint64_t v60 = v63;
          *((void *)v60 + 1) = v62;
        }
        uint64_t v64 = v12[13];
        unint64_t v65 = (uint64_t *)((char *)a1 + v64);
        uint64_t v66 = (uint64_t *)((char *)a2 + v64);
        *unint64_t v65 = *v66;
        v65[1] = v66[1];
        uint64_t v67 = v12[14];
        uint64_t v68 = (char *)a1 + v67;
        uint64_t v69 = (char *)a2 + v67;
        swift_bridgeObjectRetain();
        if (v56(v69, 1, v54))
        {
          uint64_t v70 = sub_100002214(&qword_1000906F8);
          memcpy(v68, v69, *(void *)(*(void *)(v70 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v68, v69, v54);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v68, 0, 1, v54);
        }
        uint64_t v71 = v12[15];
        unint64_t v72 = (uint64_t *)((char *)a1 + v71);
        uint64_t v73 = (uint64_t *)((char *)a2 + v71);
        *unint64_t v72 = *v73;
        v72[1] = v73[1];
        uint64_t v74 = v12[16];
        uint64_t v75 = (char *)a1 + v74;
        unint64_t v76 = (_OWORD *)((char *)a2 + v74);
        unint64_t v77 = *(uint64_t *)((char *)a2 + v74 + 8);
        swift_bridgeObjectRetain();
        if (v77 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v75 = *v76;
        }
        else
        {
          uint64_t v78 = *(void *)v76;
          sub_100004214(v78, v77);
          *(void *)uint64_t v75 = v78;
          *((void *)v75 + 1) = v77;
        }
        uint64_t v79 = v12[17];
        uint64_t v80 = (uint64_t *)((char *)a1 + v79);
        uint64_t v81 = (uint64_t *)((char *)a2 + v79);
        void *v80 = *v81;
        v80[1] = v81[1];
        uint64_t v82 = v12[18];
        uint64_t v83 = (char *)a1 + v82;
        uint64_t v84 = (char *)a2 + v82;
        uint64_t v85 = *(void *)v84;
        v83[8] = v84[8];
        *(void *)uint64_t v83 = v85;
        uint64_t v86 = v12[19];
        uint64_t v87 = (char *)a1 + v86;
        uint64_t v88 = (char *)a2 + v86;
        uint64_t v89 = *(void *)v88;
        v87[8] = v88[8];
        *(void *)uint64_t v87 = v89;
        uint64_t v90 = v12[20];
        uint64_t v91 = (char *)a1 + v90;
        uint64_t v92 = (_OWORD *)((char *)a2 + v90);
        unint64_t v93 = *(uint64_t *)((char *)a2 + v90 + 8);
        swift_bridgeObjectRetain();
        if (v93 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v91 = *v92;
        }
        else
        {
          uint64_t v94 = *(void *)v92;
          sub_100004214(v94, v93);
          *(void *)uint64_t v91 = v94;
          *((void *)v91 + 1) = v93;
        }
        break;
      case 2u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        uint64_t v20 = a2[4];
        unint64_t v21 = a2[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100004214(v20, v21);
        a1[4] = v20;
        a1[5] = v21;
        a1[6] = a2[6];
        a1[7] = a2[7];
        uint64_t v22 = type metadata accessor for IDSKCSharingInvitationSchema();
        uint64_t v23 = *(int *)(v22 + 32);
        uint64_t v24 = (char *)a1 + v23;
        unint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = sub_100077B90();
        uint64_t v27 = *(void *)(v26 - 8);
        uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
        swift_bridgeObjectRetain();
        if (v28(v25, 1, v26))
        {
          uint64_t v29 = sub_100002214(&qword_100090248);
          memcpy(v24, v25, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
        uint64_t v37 = *(int *)(v22 + 36);
        unint64_t v38 = (uint64_t *)((char *)a1 + v37);
        uint64_t v39 = (uint64_t *)((char *)a2 + v37);
        *unint64_t v38 = *v39;
        v38[1] = v39[1];
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v31 = *a2;
        unint64_t v30 = a2[1];
        sub_100004214(v31, v30);
        *a1 = v31;
        a1[1] = v30;
        break;
      case 4u:
        *a1 = *a2;
        uint64_t v33 = a2[1];
        unint64_t v32 = a2[2];
        sub_100004214(v33, v32);
        a1[1] = v33;
        a1[2] = v32;
        break;
      default:
        *a1 = *a2;
        a1[1] = a2[1];
        uint64_t v4 = type metadata accessor for IDSSampleInvitationSchema();
        uint64_t v5 = *(int *)(v4 + 20);
        uint64_t v6 = (char *)a1 + v5;
        uint64_t v7 = (char *)a2 + v5;
        uint64_t v8 = sub_100077B90();
        uint64_t v9 = *(void *)(v8 - 8);
        uint64_t v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
        swift_bridgeObjectRetain();
        if (v10(v7, 1, v8))
        {
          uint64_t v11 = sub_100002214(&qword_100090248);
          memcpy(v6, v7, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
        }
        uint64_t v34 = *(int *)(v4 + 24);
        unint64_t v35 = (uint64_t *)((char *)a1 + v34);
        uint64_t v36 = (uint64_t *)((char *)a2 + v34);
        *unint64_t v35 = *v36;
        v35[1] = v36[1];
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for IDSDictionaryContextData(_OWORD *a1, _OWORD *a2)
{
  uint64_t v4 = type metadata accessor for IDSDictionaryContextClientSchema(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      long long v13 = a2[1];
      *a1 = *a2;
      a1[1] = v13;
      long long v14 = a2[3];
      a1[2] = a2[2];
      a1[3] = v14;
      uint64_t v15 = type metadata accessor for IDSKCSharingInvitationSchema();
      uint64_t v16 = *(int *)(v15 + 32);
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = sub_100077B90();
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = sub_100002214(&qword_100090248);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v15 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(v15 + 36));
      goto LABEL_23;
    case 1:
      *a1 = *a2;
      uint64_t v22 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
      uint64_t v23 = v22[5];
      uint64_t v24 = (char *)a1 + v23;
      unint64_t v25 = (char *)a2 + v23;
      uint64_t v26 = sub_100077B90();
      uint64_t v27 = *(void *)(v26 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
      {
        uint64_t v28 = sub_100002214(&qword_100090248);
        memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      }
      *(_OWORD *)((char *)a1 + v22[6]) = *(_OWORD *)((char *)a2 + v22[6]);
      *((unsigned char *)a1 + v22[7]) = *((unsigned char *)a2 + v22[7]);
      uint64_t v29 = v22[8];
      unint64_t v30 = (char *)a1 + v29;
      uint64_t v31 = (char *)a2 + v29;
      v30[8] = v31[8];
      *(void *)unint64_t v30 = *(void *)v31;
      *((unsigned char *)a1 + v22[9]) = *((unsigned char *)a2 + v22[9]);
      *(_OWORD *)((char *)a1 + v22[10]) = *(_OWORD *)((char *)a2 + v22[10]);
      uint64_t v32 = v22[11];
      uint64_t v33 = (char *)a1 + v32;
      uint64_t v34 = (char *)a2 + v32;
      uint64_t v35 = sub_100077BA0();
      uint64_t v36 = *(void *)(v35 - 8);
      uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
      if (v37(v34, 1, v35))
      {
        uint64_t v38 = sub_100002214(&qword_1000906F8);
        memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      *(_OWORD *)((char *)a1 + v22[12]) = *(_OWORD *)((char *)a2 + v22[12]);
      *(_OWORD *)((char *)a1 + v22[13]) = *(_OWORD *)((char *)a2 + v22[13]);
      uint64_t v39 = v22[14];
      uint64_t v40 = (char *)a1 + v39;
      unint64_t v41 = (char *)a2 + v39;
      if (v37((char *)a2 + v39, 1, v35))
      {
        uint64_t v42 = sub_100002214(&qword_1000906F8);
        memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v40, v41, v35);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v40, 0, 1, v35);
      }
      *(_OWORD *)((char *)a1 + v22[15]) = *(_OWORD *)((char *)a2 + v22[15]);
      *(_OWORD *)((char *)a1 + v22[16]) = *(_OWORD *)((char *)a2 + v22[16]);
      *(_OWORD *)((char *)a1 + v22[17]) = *(_OWORD *)((char *)a2 + v22[17]);
      uint64_t v43 = v22[18];
      uint64_t v44 = (char *)a1 + v43;
      uint64_t v45 = (char *)a2 + v43;
      v44[8] = v45[8];
      *(void *)uint64_t v44 = *(void *)v45;
      uint64_t v46 = v22[19];
      uint64_t v47 = (char *)a1 + v46;
      uint64_t v48 = (char *)a2 + v46;
      v47[8] = v48[8];
      *(void *)uint64_t v47 = *(void *)v48;
      *(_OWORD *)((char *)a1 + v22[20]) = *(_OWORD *)((char *)a2 + v22[20]);
      goto LABEL_23;
    case 0:
      *a1 = *a2;
      uint64_t v6 = type metadata accessor for IDSSampleInvitationSchema();
      uint64_t v7 = *(int *)(v6 + 20);
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = sub_100077B90();
      uint64_t v11 = *(void *)(v10 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        uint64_t v12 = sub_100002214(&qword_100090248);
        memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      *(_OWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 24));
LABEL_23:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  return a1;
}

_OWORD *assignWithTake for IDSDictionaryContextData(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    sub_1000334C4((uint64_t)a1, type metadata accessor for IDSDictionaryContextClientSchema);
    uint64_t v4 = type metadata accessor for IDSDictionaryContextClientSchema(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        long long v13 = a2[1];
        *a1 = *a2;
        a1[1] = v13;
        long long v14 = a2[3];
        a1[2] = a2[2];
        a1[3] = v14;
        uint64_t v15 = type metadata accessor for IDSKCSharingInvitationSchema();
        uint64_t v16 = *(int *)(v15 + 32);
        uint64_t v17 = (char *)a1 + v16;
        uint64_t v18 = (char *)a2 + v16;
        uint64_t v19 = sub_100077B90();
        uint64_t v20 = *(void *)(v19 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
        {
          uint64_t v21 = sub_100002214(&qword_100090248);
          memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
        }
        *(_OWORD *)((char *)a1 + *(int *)(v15 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(v15 + 36));
        goto LABEL_24;
      case 1:
        *a1 = *a2;
        uint64_t v22 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
        uint64_t v23 = v22[5];
        uint64_t v24 = (char *)a1 + v23;
        unint64_t v25 = (char *)a2 + v23;
        uint64_t v26 = sub_100077B90();
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          uint64_t v28 = sub_100002214(&qword_100090248);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
        *(_OWORD *)((char *)a1 + v22[6]) = *(_OWORD *)((char *)a2 + v22[6]);
        *((unsigned char *)a1 + v22[7]) = *((unsigned char *)a2 + v22[7]);
        uint64_t v29 = v22[8];
        unint64_t v30 = (char *)a1 + v29;
        uint64_t v31 = (char *)a2 + v29;
        v30[8] = v31[8];
        *(void *)unint64_t v30 = *(void *)v31;
        *((unsigned char *)a1 + v22[9]) = *((unsigned char *)a2 + v22[9]);
        *(_OWORD *)((char *)a1 + v22[10]) = *(_OWORD *)((char *)a2 + v22[10]);
        uint64_t v32 = v22[11];
        uint64_t v33 = (char *)a1 + v32;
        uint64_t v34 = (char *)a2 + v32;
        uint64_t v35 = sub_100077BA0();
        uint64_t v36 = *(void *)(v35 - 8);
        uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
        if (v37(v34, 1, v35))
        {
          uint64_t v38 = sub_100002214(&qword_1000906F8);
          memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v33, v34, v35);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
        }
        *(_OWORD *)((char *)a1 + v22[12]) = *(_OWORD *)((char *)a2 + v22[12]);
        *(_OWORD *)((char *)a1 + v22[13]) = *(_OWORD *)((char *)a2 + v22[13]);
        uint64_t v39 = v22[14];
        uint64_t v40 = (char *)a1 + v39;
        unint64_t v41 = (char *)a2 + v39;
        if (v37((char *)a2 + v39, 1, v35))
        {
          uint64_t v42 = sub_100002214(&qword_1000906F8);
          memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v40, v41, v35);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v40, 0, 1, v35);
        }
        *(_OWORD *)((char *)a1 + v22[15]) = *(_OWORD *)((char *)a2 + v22[15]);
        *(_OWORD *)((char *)a1 + v22[16]) = *(_OWORD *)((char *)a2 + v22[16]);
        *(_OWORD *)((char *)a1 + v22[17]) = *(_OWORD *)((char *)a2 + v22[17]);
        uint64_t v43 = v22[18];
        uint64_t v44 = (char *)a1 + v43;
        uint64_t v45 = (char *)a2 + v43;
        v44[8] = v45[8];
        *(void *)uint64_t v44 = *(void *)v45;
        uint64_t v46 = v22[19];
        uint64_t v47 = (char *)a1 + v46;
        uint64_t v48 = (char *)a2 + v46;
        v47[8] = v48[8];
        *(void *)uint64_t v47 = *(void *)v48;
        *(_OWORD *)((char *)a1 + v22[20]) = *(_OWORD *)((char *)a2 + v22[20]);
        goto LABEL_24;
      case 0:
        *a1 = *a2;
        uint64_t v6 = type metadata accessor for IDSSampleInvitationSchema();
        uint64_t v7 = *(int *)(v6 + 20);
        uint64_t v8 = (char *)a1 + v7;
        uint64_t v9 = (char *)a2 + v7;
        uint64_t v10 = sub_100077B90();
        uint64_t v11 = *(void *)(v10 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
        {
          uint64_t v12 = sub_100002214(&qword_100090248);
          memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
        }
        *(_OWORD *)((char *)a1 + *(int *)(v6 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 24));
LABEL_24:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSDictionaryContextData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSDictionaryContextClientSchema(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for IDSDictionaryContextData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IDSDictionaryContextClientSchema(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, a2, a3, v6);
}

uint64_t sub_10003B9F4(uint64_t a1)
{
  uint64_t result = type metadata accessor for IDSDictionaryContextClientSchema(319);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8);
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSInvitationContextSchema(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v17 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (uint64_t *)((char *)a1 + v6);
    uint64_t v8 = (uint64_t *)((char *)a2 + v6);
    type metadata accessor for IDSDictionaryContextClientSchema(0);
    swift_bridgeObjectRetain();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v18 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v18;
        uint64_t v19 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
        uint64_t v20 = v19[5];
        __dsta = (char *)v7 + v20;
        uint64_t v21 = (char *)v8 + v20;
        uint64_t v22 = sub_100077B90();
        uint64_t v23 = *(void *)(v22 - 8);
        uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
        swift_bridgeObjectRetain();
        if (v24(v21, 1, v22))
        {
          uint64_t v25 = sub_100002214(&qword_100090248);
          memcpy(__dsta, v21, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v23 + 16))(__dsta, v21, v22);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(__dsta, 0, 1, v22);
        }
        uint64_t v46 = v19[6];
        uint64_t v47 = (uint64_t *)((char *)v7 + v46);
        uint64_t v48 = (uint64_t *)((char *)v8 + v46);
        uint64_t v49 = v48[1];
        *uint64_t v47 = *v48;
        v47[1] = v49;
        *((unsigned char *)v7 + v19[7]) = *((unsigned char *)v8 + v19[7]);
        uint64_t v50 = v19[8];
        uint64_t v51 = (char *)v7 + v50;
        uint64_t v52 = (char *)v8 + v50;
        *(void *)uint64_t v51 = *(void *)v52;
        v51[8] = v52[8];
        *((unsigned char *)v7 + v19[9]) = *((unsigned char *)v8 + v19[9]);
        uint64_t v53 = v19[10];
        uint64_t v54 = (char *)v7 + v53;
        uint64_t v55 = (char *)v8 + v53;
        uint64_t v56 = *(uint64_t *)((char *)v8 + v53);
        swift_bridgeObjectRetain();
        if (v56 == 1)
        {
          *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
        }
        else
        {
          uint64_t v57 = *((void *)v55 + 1);
          *(void *)uint64_t v54 = v56;
          *((void *)v54 + 1) = v57;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v58 = v19[11];
        uint64_t v59 = (char *)v7 + v58;
        uint64_t v60 = (char *)v8 + v58;
        uint64_t v61 = sub_100077BA0();
        uint64_t v62 = *(void *)(v61 - 8);
        __dstc = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
        if (__dstc(v60, 1, v61))
        {
          uint64_t v63 = v62;
          uint64_t v64 = sub_100002214(&qword_1000906F8);
          memcpy(v59, v60, *(void *)(*(void *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v59, v60, v61);
          uint64_t v63 = v62;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
        }
        uint64_t v69 = v19[12];
        uint64_t v70 = (char *)v7 + v69;
        uint64_t v71 = (char *)v8 + v69;
        unint64_t v72 = *((void *)v71 + 1);
        if (v72 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
        }
        else
        {
          uint64_t v73 = *(void *)v71;
          sub_100004214(*(void *)v71, *((void *)v71 + 1));
          *(void *)uint64_t v70 = v73;
          *((void *)v70 + 1) = v72;
        }
        uint64_t v74 = v19[13];
        uint64_t v75 = (uint64_t *)((char *)v7 + v74);
        unint64_t v76 = (uint64_t *)((char *)v8 + v74);
        uint64_t v77 = v76[1];
        void *v75 = *v76;
        v75[1] = v77;
        uint64_t v78 = v19[14];
        uint64_t v79 = (char *)v7 + v78;
        uint64_t v80 = (char *)v8 + v78;
        swift_bridgeObjectRetain();
        if (__dstc(v80, 1, v61))
        {
          uint64_t v81 = sub_100002214(&qword_1000906F8);
          memcpy(v79, v80, *(void *)(*(void *)(v81 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v79, v80, v61);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v79, 0, 1, v61);
        }
        uint64_t v82 = v19[15];
        uint64_t v83 = (uint64_t *)((char *)v7 + v82);
        uint64_t v84 = (uint64_t *)((char *)v8 + v82);
        uint64_t v85 = v84[1];
        *uint64_t v83 = *v84;
        v83[1] = v85;
        uint64_t v86 = v19[16];
        uint64_t v87 = (char *)v7 + v86;
        uint64_t v88 = (uint64_t *)((char *)v8 + v86);
        unint64_t v89 = *(uint64_t *)((char *)v8 + v86 + 8);
        swift_bridgeObjectRetain();
        if (v89 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v87 = *(_OWORD *)v88;
        }
        else
        {
          uint64_t v90 = *v88;
          sub_100004214(*v88, v89);
          *(void *)uint64_t v87 = v90;
          *((void *)v87 + 1) = v89;
        }
        uint64_t v91 = v19[17];
        uint64_t v92 = (uint64_t *)((char *)v7 + v91);
        unint64_t v93 = (uint64_t *)((char *)v8 + v91);
        uint64_t v94 = v93[1];
        *uint64_t v92 = *v93;
        v92[1] = v94;
        uint64_t v95 = v19[18];
        v96 = (char *)v7 + v95;
        unint64_t v97 = (char *)v8 + v95;
        v96[8] = v97[8];
        *(void *)v96 = *(void *)v97;
        uint64_t v98 = v19[19];
        char v99 = (char *)v7 + v98;
        char v100 = (char *)v8 + v98;
        *(void *)char v99 = *(void *)v100;
        v99[8] = v100[8];
        uint64_t v101 = v19[20];
        uint64_t v102 = (char *)v7 + v101;
        char v103 = (uint64_t *)((char *)v8 + v101);
        unint64_t v104 = *(uint64_t *)((char *)v8 + v101 + 8);
        swift_bridgeObjectRetain();
        if (v104 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
        }
        else
        {
          uint64_t v105 = *v103;
          sub_100004214(*v103, v104);
          *(void *)uint64_t v102 = v105;
          *((void *)v102 + 1) = v104;
        }
        break;
      case 2u:
        uint64_t v26 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v26;
        uint64_t v27 = v8[3];
        v7[2] = v8[2];
        v7[3] = v27;
        uint64_t v28 = v8[4];
        unint64_t v29 = v8[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100004214(v28, v29);
        v7[4] = v28;
        v7[5] = v29;
        uint64_t v30 = v8[7];
        v7[6] = v8[6];
        v7[7] = v30;
        uint64_t v31 = type metadata accessor for IDSKCSharingInvitationSchema();
        uint64_t v32 = *(int *)(v31 + 32);
        __dstb = (char *)v7 + v32;
        uint64_t v33 = (char *)v8 + v32;
        uint64_t v34 = sub_100077B90();
        uint64_t v35 = *(void *)(v34 - 8);
        uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
        swift_bridgeObjectRetain();
        if (v36(v33, 1, v34))
        {
          uint64_t v37 = sub_100002214(&qword_100090248);
          memcpy(__dstb, v33, *(void *)(*(void *)(v37 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v35 + 16))(__dstb, v33, v34);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(__dstb, 0, 1, v34);
        }
        uint64_t v65 = *(int *)(v31 + 36);
        uint64_t v66 = (uint64_t *)((char *)v7 + v65);
        uint64_t v67 = (uint64_t *)((char *)v8 + v65);
        uint64_t v68 = v67[1];
        *uint64_t v66 = *v67;
        v66[1] = v68;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        uint64_t v39 = *v8;
        unint64_t v38 = v8[1];
        sub_100004214(v39, v38);
        *uint64_t v7 = v39;
        v7[1] = v38;
        break;
      case 4u:
        uint64_t v40 = v8[1];
        *uint64_t v7 = *v8;
        unint64_t v41 = v8[2];
        sub_100004214(v40, v41);
        v7[1] = v40;
        v7[2] = v41;
        break;
      default:
        uint64_t v9 = v8[1];
        *uint64_t v7 = *v8;
        v7[1] = v9;
        uint64_t v10 = type metadata accessor for IDSSampleInvitationSchema();
        uint64_t v11 = *(int *)(v10 + 20);
        __dst = (char *)v7 + v11;
        uint64_t v12 = (char *)v8 + v11;
        uint64_t v13 = sub_100077B90();
        uint64_t v14 = *(void *)(v13 - 8);
        uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
        swift_bridgeObjectRetain();
        if (v15(v12, 1, v13))
        {
          uint64_t v16 = sub_100002214(&qword_100090248);
          memcpy(__dst, v12, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
        }
        uint64_t v42 = *(int *)(v10 + 24);
        uint64_t v43 = (uint64_t *)((char *)v7 + v42);
        uint64_t v44 = (uint64_t *)((char *)v8 + v42);
        uint64_t v45 = v44[1];
        *uint64_t v43 = *v44;
        v43[1] = v45;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return v3;
}

uint64_t destroy for IDSInvitationContextSchema(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  int v4 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  type metadata accessor for IDSDictionaryContextClientSchema(0);
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      uint64_t v6 = (char *)v4 + *(int *)(type metadata accessor for IDSSampleInvitationSchema() + 20);
      uint64_t v7 = sub_100077B90();
      uint64_t v8 = *(void *)(v7 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
        (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
      }
      goto LABEL_21;
    case 1:
      swift_bridgeObjectRelease();
      uint64_t v9 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
      uint64_t v10 = (char *)v4 + v9[5];
      uint64_t v11 = sub_100077B90();
      uint64_t v12 = *(void *)(v11 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11)) {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
      }
      swift_bridgeObjectRelease();
      if (*(uint64_t *)((char *)v4 + v9[10]) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v13 = (char *)v4 + v9[11];
      uint64_t v14 = sub_100077BA0();
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      if (!v16(v13, 1, v14)) {
        (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
      }
      uint64_t v17 = (uint64_t *)((char *)v4 + v9[12]);
      unint64_t v18 = v17[1];
      if (v18 >> 60 != 15) {
        sub_1000042CC(*v17, v18);
      }
      swift_bridgeObjectRelease();
      uint64_t v19 = (char *)v4 + v9[14];
      if (!v16(v19, 1, v14)) {
        (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
      }
      swift_bridgeObjectRelease();
      uint64_t v20 = (uint64_t *)((char *)v4 + v9[16]);
      unint64_t v21 = v20[1];
      if (v21 >> 60 != 15) {
        sub_1000042CC(*v20, v21);
      }
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v22 = (uint64_t *)((char *)v4 + v9[20]);
      unint64_t v23 = v22[1];
      if (v23 >> 60 == 15) {
        return result;
      }
      uint64_t v27 = *v22;
LABEL_27:
      return sub_1000042CC(v27, v23);
    case 2:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000042CC(v4[4], v4[5]);
      swift_bridgeObjectRelease();
      uint64_t v24 = (char *)v4 + *(int *)(type metadata accessor for IDSKCSharingInvitationSchema() + 32);
      uint64_t v25 = sub_100077B90();
      uint64_t v26 = *(void *)(v25 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25)) {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v24, v25);
      }
LABEL_21:
      return swift_bridgeObjectRelease();
    case 3:
      uint64_t v27 = *v4;
      unint64_t v23 = v4[1];
      goto LABEL_27;
    case 4:
      uint64_t v27 = v4[1];
      unint64_t v23 = v4[2];
      goto LABEL_27;
    default:
      return result;
  }
}

void *initializeWithCopy for IDSInvitationContextSchema(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (void *)((char *)a2 + v5);
  type metadata accessor for IDSDictionaryContextClientSchema(0);
  swift_bridgeObjectRetain();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v16 = v7[1];
      uint64_t *v6 = *v7;
      v6[1] = v16;
      uint64_t v17 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
      uint64_t v18 = v17[5];
      __dsta = (char *)v6 + v18;
      uint64_t v19 = (char *)v7 + v18;
      uint64_t v20 = sub_100077B90();
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
      swift_bridgeObjectRetain();
      if (v22(v19, 1, v20))
      {
        uint64_t v23 = sub_100002214(&qword_100090248);
        memcpy(__dsta, v19, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(__dsta, v19, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(__dsta, 0, 1, v20);
      }
      uint64_t v41 = v17[6];
      uint64_t v42 = (uint64_t *)((char *)v6 + v41);
      uint64_t v43 = (uint64_t *)((char *)v7 + v41);
      uint64_t v44 = v43[1];
      *uint64_t v42 = *v43;
      v42[1] = v44;
      *((unsigned char *)v6 + v17[7]) = *((unsigned char *)v7 + v17[7]);
      uint64_t v45 = v17[8];
      uint64_t v46 = (char *)v6 + v45;
      uint64_t v47 = (char *)v7 + v45;
      *(void *)uint64_t v46 = *(void *)v47;
      v46[8] = v47[8];
      *((unsigned char *)v6 + v17[9]) = *((unsigned char *)v7 + v17[9]);
      uint64_t v48 = v17[10];
      uint64_t v49 = (char *)v6 + v48;
      uint64_t v50 = (char *)v7 + v48;
      uint64_t v51 = *(uint64_t *)((char *)v7 + v48);
      swift_bridgeObjectRetain();
      if (v51 == 1)
      {
        *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
      }
      else
      {
        uint64_t v52 = *((void *)v50 + 1);
        *(void *)uint64_t v49 = v51;
        *((void *)v49 + 1) = v52;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v53 = v17[11];
      uint64_t v54 = (char *)v6 + v53;
      uint64_t v55 = (char *)v7 + v53;
      uint64_t v56 = sub_100077BA0();
      uint64_t v57 = *(void *)(v56 - 8);
      __dstc = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
      if (__dstc(v55, 1, v56))
      {
        uint64_t v58 = v57;
        uint64_t v59 = sub_100002214(&qword_1000906F8);
        memcpy(v54, v55, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v54, v55, v56);
        uint64_t v58 = v57;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
      }
      uint64_t v63 = v17[12];
      uint64_t v64 = (char *)v6 + v63;
      uint64_t v65 = (char *)v7 + v63;
      unint64_t v66 = *((void *)v65 + 1);
      if (v66 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
      }
      else
      {
        uint64_t v67 = *(void *)v65;
        sub_100004214(*(void *)v65, *((void *)v65 + 1));
        *(void *)uint64_t v64 = v67;
        *((void *)v64 + 1) = v66;
      }
      uint64_t v68 = v17[13];
      uint64_t v69 = (uint64_t *)((char *)v6 + v68);
      uint64_t v70 = (uint64_t *)((char *)v7 + v68);
      uint64_t v71 = v70[1];
      *uint64_t v69 = *v70;
      v69[1] = v71;
      uint64_t v72 = v17[14];
      uint64_t v73 = (char *)v6 + v72;
      uint64_t v74 = (char *)v7 + v72;
      swift_bridgeObjectRetain();
      if (__dstc(v74, 1, v56))
      {
        uint64_t v75 = sub_100002214(&qword_1000906F8);
        memcpy(v73, v74, *(void *)(*(void *)(v75 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v73, v74, v56);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v73, 0, 1, v56);
      }
      uint64_t v76 = v17[15];
      uint64_t v77 = (uint64_t *)((char *)v6 + v76);
      uint64_t v78 = (uint64_t *)((char *)v7 + v76);
      uint64_t v79 = v78[1];
      *uint64_t v77 = *v78;
      v77[1] = v79;
      uint64_t v80 = v17[16];
      uint64_t v81 = (char *)v6 + v80;
      uint64_t v82 = (uint64_t *)((char *)v7 + v80);
      unint64_t v83 = *(uint64_t *)((char *)v7 + v80 + 8);
      swift_bridgeObjectRetain();
      if (v83 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
      }
      else
      {
        uint64_t v84 = *v82;
        sub_100004214(*v82, v83);
        *(void *)uint64_t v81 = v84;
        *((void *)v81 + 1) = v83;
      }
      uint64_t v85 = v17[17];
      uint64_t v86 = (uint64_t *)((char *)v6 + v85);
      uint64_t v87 = (uint64_t *)((char *)v7 + v85);
      uint64_t v88 = v87[1];
      *uint64_t v86 = *v87;
      v86[1] = v88;
      uint64_t v89 = v17[18];
      uint64_t v90 = (char *)v6 + v89;
      uint64_t v91 = (char *)v7 + v89;
      v90[8] = v91[8];
      *(void *)uint64_t v90 = *(void *)v91;
      uint64_t v92 = v17[19];
      unint64_t v93 = (char *)v6 + v92;
      uint64_t v94 = (char *)v7 + v92;
      *(void *)unint64_t v93 = *(void *)v94;
      v93[8] = v94[8];
      uint64_t v95 = v17[20];
      v96 = (char *)v6 + v95;
      unint64_t v97 = (uint64_t *)((char *)v7 + v95);
      unint64_t v98 = *(uint64_t *)((char *)v7 + v95 + 8);
      swift_bridgeObjectRetain();
      if (v98 >> 60 == 15)
      {
        *(_OWORD *)v96 = *(_OWORD *)v97;
      }
      else
      {
        uint64_t v99 = *v97;
        sub_100004214(*v97, v98);
        *(void *)v96 = v99;
        *((void *)v96 + 1) = v98;
      }
      break;
    case 2u:
      uint64_t v24 = v7[1];
      uint64_t *v6 = *v7;
      v6[1] = v24;
      uint64_t v25 = v7[3];
      _OWORD v6[2] = v7[2];
      v6[3] = v25;
      uint64_t v26 = v7[4];
      unint64_t v27 = v7[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100004214(v26, v27);
      v6[4] = v26;
      v6[5] = v27;
      uint64_t v28 = v7[7];
      v6[6] = v7[6];
      v6[7] = v28;
      uint64_t v29 = type metadata accessor for IDSKCSharingInvitationSchema();
      uint64_t v30 = *(int *)(v29 + 32);
      __dstb = (char *)v6 + v30;
      uint64_t v31 = (char *)v7 + v30;
      uint64_t v32 = sub_100077B90();
      uint64_t v33 = *(void *)(v32 - 8);
      uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain();
      if (v34(v31, 1, v32))
      {
        uint64_t v35 = sub_100002214(&qword_100090248);
        memcpy(__dstb, v31, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v33 + 16))(__dstb, v31, v32);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(__dstb, 0, 1, v32);
      }
      uint64_t v40 = *(int *)(v29 + 36);
      goto LABEL_20;
    case 3u:
      uint64_t v37 = *v7;
      unint64_t v36 = v7[1];
      sub_100004214(v37, v36);
      uint64_t *v6 = v37;
      v6[1] = v36;
      break;
    case 4u:
      uint64_t v38 = v7[1];
      uint64_t *v6 = *v7;
      unint64_t v39 = v7[2];
      sub_100004214(v38, v39);
      v6[1] = v38;
      _OWORD v6[2] = v39;
      break;
    default:
      uint64_t v8 = v7[1];
      uint64_t *v6 = *v7;
      v6[1] = v8;
      uint64_t v9 = type metadata accessor for IDSSampleInvitationSchema();
      uint64_t v10 = *(int *)(v9 + 20);
      __dst = (char *)v6 + v10;
      uint64_t v11 = (char *)v7 + v10;
      uint64_t v12 = sub_100077B90();
      uint64_t v13 = *(void *)(v12 - 8);
      uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
      swift_bridgeObjectRetain();
      if (v14(v11, 1, v12))
      {
        uint64_t v15 = sub_100002214(&qword_100090248);
        memcpy(__dst, v11, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
      }
      uint64_t v40 = *(int *)(v9 + 24);
LABEL_20:
      uint64_t v60 = (uint64_t *)((char *)v6 + v40);
      uint64_t v61 = (uint64_t *)((char *)v7 + v40);
      uint64_t v62 = v61[1];
      *uint64_t v60 = *v61;
      v60[1] = v62;
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *assignWithCopy for IDSInvitationContextSchema(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (void *)((char *)a1 + v6);
    uint64_t v8 = (void *)((char *)a2 + v6);
    sub_1000334C4((uint64_t)a1 + v6, type metadata accessor for IDSDictionaryContextClientSchema);
    type metadata accessor for IDSDictionaryContextClientSchema(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        uint64_t v16 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
        uint64_t v17 = v16[5];
        __dsta = (char *)v7 + v17;
        uint64_t v18 = (char *)v8 + v17;
        uint64_t v19 = sub_100077B90();
        uint64_t v20 = *(void *)(v19 - 8);
        uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
        swift_bridgeObjectRetain();
        if (v21(v18, 1, v19))
        {
          uint64_t v22 = sub_100002214(&qword_100090248);
          memcpy(__dsta, v18, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dsta, v18, v19);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(__dsta, 0, 1, v19);
        }
        uint64_t v39 = v16[6];
        uint64_t v40 = (uint64_t *)((char *)v7 + v39);
        uint64_t v41 = (uint64_t *)((char *)v8 + v39);
        *uint64_t v40 = *v41;
        v40[1] = v41[1];
        *((unsigned char *)v7 + v16[7]) = *((unsigned char *)v8 + v16[7]);
        uint64_t v42 = v16[8];
        uint64_t v43 = (char *)v7 + v42;
        uint64_t v44 = (char *)v8 + v42;
        uint64_t v45 = *(void *)v44;
        v43[8] = v44[8];
        *(void *)uint64_t v43 = v45;
        *((unsigned char *)v7 + v16[9]) = *((unsigned char *)v8 + v16[9]);
        uint64_t v46 = v16[10];
        uint64_t v47 = (char *)v7 + v46;
        uint64_t v48 = (char *)v8 + v46;
        uint64_t v49 = *(uint64_t *)((char *)v8 + v46);
        swift_bridgeObjectRetain();
        if (v49 == 1)
        {
          *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
        }
        else
        {
          *(void *)uint64_t v47 = v49;
          *((void *)v47 + 1) = *((void *)v48 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v50 = v16[11];
        uint64_t v51 = (char *)v7 + v50;
        uint64_t v52 = (char *)v8 + v50;
        uint64_t v53 = sub_100077BA0();
        uint64_t v54 = *(void *)(v53 - 8);
        __dstc = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
        if (__dstc(v52, 1, v53))
        {
          uint64_t v55 = v54;
          uint64_t v56 = sub_100002214(&qword_1000906F8);
          memcpy(v51, v52, *(void *)(*(void *)(v56 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v54 + 16))(v51, v52, v53);
          uint64_t v55 = v54;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
        }
        uint64_t v57 = v16[12];
        uint64_t v58 = (char *)v7 + v57;
        uint64_t v59 = (char *)v8 + v57;
        unint64_t v60 = *((void *)v59 + 1);
        if (v60 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
        }
        else
        {
          uint64_t v61 = *(void *)v59;
          sub_100004214(*(void *)v59, *((void *)v59 + 1));
          *(void *)uint64_t v58 = v61;
          *((void *)v58 + 1) = v60;
        }
        uint64_t v62 = v16[13];
        uint64_t v63 = (uint64_t *)((char *)v7 + v62);
        uint64_t v64 = (uint64_t *)((char *)v8 + v62);
        *uint64_t v63 = *v64;
        v63[1] = v64[1];
        uint64_t v65 = v16[14];
        unint64_t v66 = (char *)v7 + v65;
        uint64_t v67 = (char *)v8 + v65;
        swift_bridgeObjectRetain();
        if (__dstc(v67, 1, v53))
        {
          uint64_t v68 = sub_100002214(&qword_1000906F8);
          memcpy(v66, v67, *(void *)(*(void *)(v68 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v66, v67, v53);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v66, 0, 1, v53);
        }
        uint64_t v69 = v16[15];
        uint64_t v70 = (uint64_t *)((char *)v7 + v69);
        uint64_t v71 = (uint64_t *)((char *)v8 + v69);
        void *v70 = *v71;
        v70[1] = v71[1];
        uint64_t v72 = v16[16];
        uint64_t v73 = (char *)v7 + v72;
        uint64_t v74 = (uint64_t *)((char *)v8 + v72);
        unint64_t v75 = *(uint64_t *)((char *)v8 + v72 + 8);
        swift_bridgeObjectRetain();
        if (v75 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
        }
        else
        {
          uint64_t v76 = *v74;
          sub_100004214(*v74, v75);
          *(void *)uint64_t v73 = v76;
          *((void *)v73 + 1) = v75;
        }
        uint64_t v77 = v16[17];
        uint64_t v78 = (uint64_t *)((char *)v7 + v77);
        uint64_t v79 = (uint64_t *)((char *)v8 + v77);
        *uint64_t v78 = *v79;
        v78[1] = v79[1];
        uint64_t v80 = v16[18];
        uint64_t v81 = (char *)v7 + v80;
        uint64_t v82 = (char *)v8 + v80;
        uint64_t v83 = *(void *)v82;
        v81[8] = v82[8];
        *(void *)uint64_t v81 = v83;
        uint64_t v84 = v16[19];
        uint64_t v85 = (char *)v7 + v84;
        uint64_t v86 = (char *)v8 + v84;
        uint64_t v87 = *(void *)v86;
        v85[8] = v86[8];
        *(void *)uint64_t v85 = v87;
        uint64_t v88 = v16[20];
        uint64_t v89 = (char *)v7 + v88;
        uint64_t v90 = (uint64_t *)((char *)v8 + v88);
        unint64_t v91 = *(uint64_t *)((char *)v8 + v88 + 8);
        swift_bridgeObjectRetain();
        if (v91 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
        }
        else
        {
          uint64_t v92 = *v90;
          sub_100004214(*v90, v91);
          *(void *)uint64_t v89 = v92;
          *((void *)v89 + 1) = v91;
        }
        break;
      case 2u:
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        v7[2] = v8[2];
        v7[3] = v8[3];
        uint64_t v23 = v8[4];
        unint64_t v24 = v8[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100004214(v23, v24);
        v7[4] = v23;
        v7[5] = v24;
        v7[6] = v8[6];
        v7[7] = v8[7];
        uint64_t v25 = type metadata accessor for IDSKCSharingInvitationSchema();
        uint64_t v26 = *(int *)(v25 + 32);
        __dstb = (char *)v7 + v26;
        unint64_t v27 = (char *)v8 + v26;
        uint64_t v28 = sub_100077B90();
        uint64_t v29 = *(void *)(v28 - 8);
        uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
        swift_bridgeObjectRetain();
        if (v30(v27, 1, v28))
        {
          uint64_t v31 = sub_100002214(&qword_100090248);
          memcpy(__dstb, v27, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v29 + 16))(__dstb, v27, v28);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(__dstb, 0, 1, v28);
        }
        uint64_t v36 = *(int *)(v25 + 36);
        goto LABEL_15;
      case 3u:
        uint64_t v33 = *v8;
        unint64_t v32 = v8[1];
        sub_100004214(v33, v32);
        *uint64_t v7 = v33;
        v7[1] = v32;
        break;
      case 4u:
        *uint64_t v7 = *v8;
        uint64_t v35 = v8[1];
        unint64_t v34 = v8[2];
        sub_100004214(v35, v34);
        v7[1] = v35;
        v7[2] = v34;
        break;
      default:
        *uint64_t v7 = *v8;
        v7[1] = v8[1];
        uint64_t v9 = type metadata accessor for IDSSampleInvitationSchema();
        uint64_t v10 = *(int *)(v9 + 20);
        __dst = (char *)v7 + v10;
        uint64_t v11 = (char *)v8 + v10;
        uint64_t v12 = sub_100077B90();
        uint64_t v13 = *(void *)(v12 - 8);
        uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
        swift_bridgeObjectRetain();
        if (v14(v11, 1, v12))
        {
          uint64_t v15 = sub_100002214(&qword_100090248);
          memcpy(__dst, v11, *(void *)(*(void *)(v15 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
        }
        uint64_t v36 = *(int *)(v9 + 24);
LABEL_15:
        uint64_t v37 = (uint64_t *)((char *)v7 + v36);
        uint64_t v38 = (uint64_t *)((char *)v8 + v36);
        *uint64_t v37 = *v38;
        v37[1] = v38[1];
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for IDSInvitationContextSchema(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (_OWORD *)((char *)a1 + v4);
  uint64_t v6 = (_OWORD *)((char *)a2 + v4);
  uint64_t v7 = type metadata accessor for IDSDictionaryContextClientSchema(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      long long v16 = v6[1];
      *uint64_t v5 = *v6;
      v5[1] = v16;
      long long v17 = v6[3];
      v5[2] = v6[2];
      v5[3] = v17;
      uint64_t v18 = type metadata accessor for IDSKCSharingInvitationSchema();
      uint64_t v19 = *(int *)(v18 + 32);
      uint64_t v20 = (char *)v5 + v19;
      uint64_t v21 = (char *)v6 + v19;
      uint64_t v22 = sub_100077B90();
      uint64_t v23 = *(void *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        uint64_t v24 = sub_100002214(&qword_100090248);
        memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      *(_OWORD *)((char *)v5 + *(int *)(v18 + 36)) = *(_OWORD *)((char *)v6 + *(int *)(v18 + 36));
      goto LABEL_23;
    case 1:
      *uint64_t v5 = *v6;
      uint64_t v25 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
      uint64_t v26 = v25[5];
      unint64_t v27 = (char *)v5 + v26;
      uint64_t v28 = (char *)v6 + v26;
      uint64_t v29 = sub_100077B90();
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
      {
        uint64_t v31 = sub_100002214(&qword_100090248);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v27, v28, v29);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      }
      *(_OWORD *)((char *)v5 + v25[6]) = *(_OWORD *)((char *)v6 + v25[6]);
      *((unsigned char *)v5 + v25[7]) = *((unsigned char *)v6 + v25[7]);
      uint64_t v32 = v25[8];
      uint64_t v33 = (char *)v5 + v32;
      unint64_t v34 = (char *)v6 + v32;
      v33[8] = v34[8];
      *(void *)uint64_t v33 = *(void *)v34;
      *((unsigned char *)v5 + v25[9]) = *((unsigned char *)v6 + v25[9]);
      *(_OWORD *)((char *)v5 + v25[10]) = *(_OWORD *)((char *)v6 + v25[10]);
      uint64_t v35 = v25[11];
      uint64_t v36 = (char *)v5 + v35;
      uint64_t v37 = (char *)v6 + v35;
      uint64_t v38 = sub_100077BA0();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      if (v40(v37, 1, v38))
      {
        uint64_t v41 = sub_100002214(&qword_1000906F8);
        memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      }
      *(_OWORD *)((char *)v5 + v25[12]) = *(_OWORD *)((char *)v6 + v25[12]);
      *(_OWORD *)((char *)v5 + v25[13]) = *(_OWORD *)((char *)v6 + v25[13]);
      uint64_t v42 = v25[14];
      uint64_t v43 = (char *)v5 + v42;
      uint64_t v44 = (char *)v6 + v42;
      if (v40((char *)v6 + v42, 1, v38))
      {
        uint64_t v45 = sub_100002214(&qword_1000906F8);
        memcpy(v43, v44, *(void *)(*(void *)(v45 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v43, v44, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v43, 0, 1, v38);
      }
      *(_OWORD *)((char *)v5 + v25[15]) = *(_OWORD *)((char *)v6 + v25[15]);
      *(_OWORD *)((char *)v5 + v25[16]) = *(_OWORD *)((char *)v6 + v25[16]);
      *(_OWORD *)((char *)v5 + v25[17]) = *(_OWORD *)((char *)v6 + v25[17]);
      uint64_t v46 = v25[18];
      uint64_t v47 = (char *)v5 + v46;
      uint64_t v48 = (char *)v6 + v46;
      v47[8] = v48[8];
      *(void *)uint64_t v47 = *(void *)v48;
      uint64_t v49 = v25[19];
      uint64_t v50 = (char *)v5 + v49;
      uint64_t v51 = (char *)v6 + v49;
      v50[8] = v51[8];
      *(void *)uint64_t v50 = *(void *)v51;
      *(_OWORD *)((char *)v5 + v25[20]) = *(_OWORD *)((char *)v6 + v25[20]);
      goto LABEL_23;
    case 0:
      *uint64_t v5 = *v6;
      uint64_t v9 = type metadata accessor for IDSSampleInvitationSchema();
      uint64_t v10 = *(int *)(v9 + 20);
      uint64_t v11 = (char *)v5 + v10;
      uint64_t v12 = (char *)v6 + v10;
      uint64_t v13 = sub_100077B90();
      uint64_t v14 = *(void *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        uint64_t v15 = sub_100002214(&qword_100090248);
        memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      *(_OWORD *)((char *)v5 + *(int *)(v9 + 24)) = *(_OWORD *)((char *)v6 + *(int *)(v9 + 24));
LABEL_23:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(v5, v6, *(void *)(*(void *)(v7 - 8) + 64));
  return a1;
}

void *assignWithTake for IDSInvitationContextSchema(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (_OWORD *)((char *)a1 + v7);
    uint64_t v9 = (_OWORD *)((char *)a2 + v7);
    sub_1000334C4((uint64_t)a1 + v7, type metadata accessor for IDSDictionaryContextClientSchema);
    uint64_t v10 = type metadata accessor for IDSDictionaryContextClientSchema(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        long long v19 = v9[1];
        _OWORD *v8 = *v9;
        v8[1] = v19;
        long long v20 = v9[3];
        v8[2] = v9[2];
        v8[3] = v20;
        uint64_t v21 = type metadata accessor for IDSKCSharingInvitationSchema();
        uint64_t v22 = *(int *)(v21 + 32);
        uint64_t v23 = (char *)v8 + v22;
        uint64_t v24 = (char *)v9 + v22;
        uint64_t v25 = sub_100077B90();
        uint64_t v26 = *(void *)(v25 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
        {
          uint64_t v27 = sub_100002214(&qword_100090248);
          memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v26 + 32))(v23, v24, v25);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
        }
        *(_OWORD *)((char *)v8 + *(int *)(v21 + 36)) = *(_OWORD *)((char *)v9 + *(int *)(v21 + 36));
        goto LABEL_24;
      case 1:
        _OWORD *v8 = *v9;
        uint64_t v28 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
        uint64_t v29 = v28[5];
        uint64_t v30 = (char *)v8 + v29;
        uint64_t v31 = (char *)v9 + v29;
        uint64_t v32 = sub_100077B90();
        uint64_t v33 = *(void *)(v32 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
        {
          uint64_t v34 = sub_100002214(&qword_100090248);
          memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v30, v31, v32);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
        }
        *(_OWORD *)((char *)v8 + v28[6]) = *(_OWORD *)((char *)v9 + v28[6]);
        *((unsigned char *)v8 + v28[7]) = *((unsigned char *)v9 + v28[7]);
        uint64_t v35 = v28[8];
        uint64_t v36 = (char *)v8 + v35;
        uint64_t v37 = (char *)v9 + v35;
        v36[8] = v37[8];
        *(void *)uint64_t v36 = *(void *)v37;
        *((unsigned char *)v8 + v28[9]) = *((unsigned char *)v9 + v28[9]);
        *(_OWORD *)((char *)v8 + v28[10]) = *(_OWORD *)((char *)v9 + v28[10]);
        uint64_t v38 = v28[11];
        uint64_t v39 = (char *)v8 + v38;
        uint64_t v40 = (char *)v9 + v38;
        uint64_t v41 = sub_100077BA0();
        uint64_t v42 = *(void *)(v41 - 8);
        uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
        if (v43(v40, 1, v41))
        {
          uint64_t v44 = sub_100002214(&qword_1000906F8);
          memcpy(v39, v40, *(void *)(*(void *)(v44 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v39, v40, v41);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
        }
        *(_OWORD *)((char *)v8 + v28[12]) = *(_OWORD *)((char *)v9 + v28[12]);
        *(_OWORD *)((char *)v8 + v28[13]) = *(_OWORD *)((char *)v9 + v28[13]);
        uint64_t v45 = v28[14];
        uint64_t v46 = (char *)v8 + v45;
        uint64_t v47 = (char *)v9 + v45;
        if (v43((char *)v9 + v45, 1, v41))
        {
          uint64_t v48 = sub_100002214(&qword_1000906F8);
          memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v46, v47, v41);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v46, 0, 1, v41);
        }
        *(_OWORD *)((char *)v8 + v28[15]) = *(_OWORD *)((char *)v9 + v28[15]);
        *(_OWORD *)((char *)v8 + v28[16]) = *(_OWORD *)((char *)v9 + v28[16]);
        *(_OWORD *)((char *)v8 + v28[17]) = *(_OWORD *)((char *)v9 + v28[17]);
        uint64_t v49 = v28[18];
        uint64_t v50 = (char *)v8 + v49;
        uint64_t v51 = (char *)v9 + v49;
        v50[8] = v51[8];
        *(void *)uint64_t v50 = *(void *)v51;
        uint64_t v52 = v28[19];
        uint64_t v53 = (char *)v8 + v52;
        uint64_t v54 = (char *)v9 + v52;
        v53[8] = v54[8];
        *(void *)uint64_t v53 = *(void *)v54;
        *(_OWORD *)((char *)v8 + v28[20]) = *(_OWORD *)((char *)v9 + v28[20]);
        goto LABEL_24;
      case 0:
        _OWORD *v8 = *v9;
        uint64_t v12 = type metadata accessor for IDSSampleInvitationSchema();
        uint64_t v13 = *(int *)(v12 + 20);
        uint64_t v14 = (char *)v8 + v13;
        uint64_t v15 = (char *)v9 + v13;
        uint64_t v16 = sub_100077B90();
        uint64_t v17 = *(void *)(v16 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
        {
          uint64_t v18 = sub_100002214(&qword_100090248);
          memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
        }
        *(_OWORD *)((char *)v8 + *(int *)(v12 + 24)) = *(_OWORD *)((char *)v9 + *(int *)(v12 + 24));
LABEL_24:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSInvitationContextSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003E3CC);
}

uint64_t sub_10003E3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for IDSDictionaryContextData(0);
    uint64_t v8 = a1 + *(int *)(a3 + 24);
    uint64_t v9 = type metadata accessor for IDSDictionaryContextClientSchema(0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    return v10(v8, a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for IDSInvitationContextSchema(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003E498);
}

uint64_t sub_10003E498(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for IDSDictionaryContextData(0);
    uint64_t v7 = v5 + *(int *)(a4 + 24);
    uint64_t v8 = type metadata accessor for IDSDictionaryContextClientSchema(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    return v9(v7, a2, a2, v8);
  }
  return result;
}

uint64_t sub_10003E548()
{
  uint64_t result = type metadata accessor for IDSDictionaryContextClientSchema(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSInvitationSchema(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(type metadata accessor for IDSInvitationContextSchema(0) + 24);
    uint64_t v9 = (uint64_t *)((char *)v4 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    type metadata accessor for IDSDictionaryContextClientSchema(0);
    swift_bridgeObjectRetain();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v19 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v19;
        uint64_t v20 = type metadata accessor for IDSHomeKitInvitationSchema(0);
        uint64_t v21 = *(int *)(v20 + 20);
        __dsta = (char *)v9 + v21;
        v117 = (int *)v20;
        v110 = (char *)v10 + v21;
        uint64_t v22 = sub_100077B90();
        uint64_t v23 = *(void *)(v22 - 8);
        uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
        swift_bridgeObjectRetain();
        if (v24(v110, 1, v22))
        {
          uint64_t v25 = sub_100002214(&qword_100090248);
          memcpy(__dsta, v110, *(void *)(*(void *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v23 + 16))(__dsta, v110, v22);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(__dsta, 0, 1, v22);
        }
        uint64_t v42 = v117[6];
        uint64_t v43 = (uint64_t *)((char *)v9 + v42);
        uint64_t v44 = (uint64_t *)((char *)v10 + v42);
        uint64_t v45 = v44[1];
        *uint64_t v43 = *v44;
        v43[1] = v45;
        *((unsigned char *)v9 + v117[7]) = *((unsigned char *)v10 + v117[7]);
        uint64_t v46 = v117[8];
        uint64_t v47 = (char *)v9 + v46;
        uint64_t v48 = (char *)v10 + v46;
        *(void *)uint64_t v47 = *(void *)v48;
        v47[8] = v48[8];
        *((unsigned char *)v9 + v117[9]) = *((unsigned char *)v10 + v117[9]);
        uint64_t v49 = v117[10];
        uint64_t v50 = (char *)v9 + v49;
        uint64_t v51 = (char *)v10 + v49;
        uint64_t v52 = *(uint64_t *)((char *)v10 + v49);
        swift_bridgeObjectRetain();
        if (v52 == 1)
        {
          *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
        }
        else
        {
          uint64_t v53 = *((void *)v51 + 1);
          *(void *)uint64_t v50 = v52;
          *((void *)v50 + 1) = v53;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v54 = v117[11];
        uint64_t v55 = (char *)v9 + v54;
        uint64_t v56 = (char *)v10 + v54;
        uint64_t v57 = sub_100077BA0();
        uint64_t v58 = *(void *)(v57 - 8);
        __dstc = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
        if (__dstc(v56, 1, v57))
        {
          uint64_t v59 = sub_100002214(&qword_1000906F8);
          memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v55, v56, v57);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
        }
        uint64_t v71 = v117[12];
        uint64_t v72 = (char *)v9 + v71;
        uint64_t v73 = (uint64_t *)((char *)v10 + v71);
        unint64_t v74 = v73[1];
        if (v74 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v72 = *(_OWORD *)v73;
        }
        else
        {
          uint64_t v108 = v58;
          uint64_t v75 = *v73;
          sub_100004214(*v73, v74);
          *(void *)uint64_t v72 = v75;
          *((void *)v72 + 1) = v74;
          uint64_t v58 = v108;
        }
        uint64_t v76 = v117[13];
        uint64_t v77 = (uint64_t *)((char *)v9 + v76);
        uint64_t v78 = (uint64_t *)((char *)v10 + v76);
        uint64_t v79 = v78[1];
        *uint64_t v77 = *v78;
        v77[1] = v79;
        uint64_t v80 = v117[14];
        uint64_t v81 = (char *)v9 + v80;
        uint64_t v82 = (char *)v10 + v80;
        swift_bridgeObjectRetain();
        if (__dstc(v82, 1, v57))
        {
          uint64_t v83 = sub_100002214(&qword_1000906F8);
          memcpy(v81, v82, *(void *)(*(void *)(v83 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v81, v82, v57);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v81, 0, 1, v57);
        }
        uint64_t v84 = v117[15];
        uint64_t v85 = (uint64_t *)((char *)v9 + v84);
        uint64_t v86 = (uint64_t *)((char *)v10 + v84);
        uint64_t v87 = v86[1];
        *uint64_t v85 = *v86;
        v85[1] = v87;
        uint64_t v88 = v117[16];
        uint64_t v89 = (char *)v9 + v88;
        uint64_t v90 = (_OWORD *)((char *)v10 + v88);
        unint64_t v91 = *(uint64_t *)((char *)v10 + v88 + 8);
        swift_bridgeObjectRetain();
        if (v91 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v89 = *v90;
        }
        else
        {
          uint64_t v92 = *(void *)v90;
          sub_100004214(v92, v91);
          *(void *)uint64_t v89 = v92;
          *((void *)v89 + 1) = v91;
        }
        uint64_t v93 = v117[17];
        uint64_t v94 = (uint64_t *)((char *)v9 + v93);
        uint64_t v95 = (uint64_t *)((char *)v10 + v93);
        uint64_t v96 = v95[1];
        *uint64_t v94 = *v95;
        v94[1] = v96;
        uint64_t v97 = v117[18];
        unint64_t v98 = (char *)v9 + v97;
        uint64_t v99 = (char *)v10 + v97;
        v98[8] = v99[8];
        *(void *)unint64_t v98 = *(void *)v99;
        uint64_t v100 = v117[19];
        uint64_t v101 = (char *)v9 + v100;
        uint64_t v102 = (char *)v10 + v100;
        *(void *)uint64_t v101 = *(void *)v102;
        v101[8] = v102[8];
        uint64_t v103 = v117[20];
        unint64_t v104 = (char *)v9 + v103;
        uint64_t v105 = (_OWORD *)((char *)v10 + v103);
        unint64_t v106 = *(uint64_t *)((char *)v10 + v103 + 8);
        swift_bridgeObjectRetain();
        if (v106 >> 60 == 15)
        {
          *(_OWORD *)unint64_t v104 = *v105;
        }
        else
        {
          uint64_t v107 = *(void *)v105;
          sub_100004214(v107, v106);
          *(void *)unint64_t v104 = v107;
          *((void *)v104 + 1) = v106;
        }
        break;
      case 2u:
        uint64_t v26 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v26;
        uint64_t v27 = v10[3];
        v9[2] = v10[2];
        v9[3] = v27;
        uint64_t v28 = v10[4];
        unint64_t v29 = v10[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100004214(v28, v29);
        v9[4] = v28;
        v9[5] = v29;
        uint64_t v30 = v10[7];
        v9[6] = v10[6];
        v9[7] = v30;
        uint64_t v31 = type metadata accessor for IDSKCSharingInvitationSchema();
        uint64_t v32 = *(int *)(v31 + 32);
        __dstb = (char *)v9 + v32;
        uint64_t v118 = v31;
        char v111 = (char *)v10 + v32;
        uint64_t v33 = sub_100077B90();
        uint64_t v34 = *(void *)(v33 - 8);
        uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
        swift_bridgeObjectRetain();
        if (v35(v111, 1, v33))
        {
          uint64_t v36 = sub_100002214(&qword_100090248);
          memcpy(__dstb, v111, *(void *)(*(void *)(v36 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v34 + 16))(__dstb, v111, v33);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(__dstb, 0, 1, v33);
        }
        uint64_t v41 = *(int *)(v118 + 36);
        goto LABEL_22;
      case 3u:
        uint64_t v37 = *v10;
        unint64_t v38 = v10[1];
        sub_100004214(*v10, v38);
        *uint64_t v9 = v37;
        v9[1] = v38;
        break;
      case 4u:
        uint64_t v39 = v10[1];
        *uint64_t v9 = *v10;
        unint64_t v40 = v10[2];
        sub_100004214(v39, v40);
        v9[1] = v39;
        v9[2] = v40;
        break;
      default:
        uint64_t v11 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v11;
        uint64_t v12 = type metadata accessor for IDSSampleInvitationSchema();
        uint64_t v13 = *(int *)(v12 + 20);
        __dst = (char *)v9 + v13;
        uint64_t v116 = v12;
        __int16 v109 = (char *)v10 + v13;
        uint64_t v14 = sub_100077B90();
        uint64_t v15 = *(void *)(v14 - 8);
        uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
        swift_bridgeObjectRetain();
        if (v16(v109, 1, v14))
        {
          uint64_t v17 = sub_100002214(&qword_100090248);
          memcpy(__dst, v109, *(void *)(*(void *)(v17 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v109, v14);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
        }
        uint64_t v41 = *(int *)(v116 + 24);
LABEL_22:
        unint64_t v60 = (uint64_t *)((char *)v9 + v41);
        uint64_t v61 = (uint64_t *)((char *)v10 + v41);
        uint64_t v62 = v61[1];
        *unint64_t v60 = *v61;
        v60[1] = v62;
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v63 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    uint64_t v64 = (char *)v4 + v63;
    uint64_t v65 = (char *)a2 + v63;
    *(void *)uint64_t v64 = *(void *)v65;
    v64[8] = v65[8];
    uint64_t v66 = a3[7];
    uint64_t v67 = (uint64_t *)((char *)v4 + v66);
    uint64_t v68 = (uint64_t *)((char *)a2 + v66);
    uint64_t v69 = v68[1];
    *uint64_t v67 = *v68;
    v67[1] = v69;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for IDSInvitationSchema(uint64_t a1)
{
  swift_bridgeObjectRelease();
  unint64_t v2 = (uint64_t *)(a1 + *(int *)(type metadata accessor for IDSInvitationContextSchema(0) + 24));
  type metadata accessor for IDSDictionaryContextClientSchema(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      swift_bridgeObjectRelease();
      unint64_t v3 = (char *)v2 + *(int *)(type metadata accessor for IDSSampleInvitationSchema() + 20);
      uint64_t v4 = sub_100077B90();
      uint64_t v5 = *(void *)(v4 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4)) {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v3, v4);
      }
      goto LABEL_21;
    case 1u:
      swift_bridgeObjectRelease();
      uint64_t v6 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
      uint64_t v7 = (char *)v2 + v6[5];
      uint64_t v8 = sub_100077B90();
      uint64_t v9 = *(void *)(v8 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8)) {
        (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
      }
      swift_bridgeObjectRelease();
      if (*(uint64_t *)((char *)v2 + v6[10]) != 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      uint64_t v10 = (char *)v2 + v6[11];
      uint64_t v11 = sub_100077BA0();
      uint64_t v12 = *(void *)(v11 - 8);
      uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
      if (!v13(v10, 1, v11)) {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
      }
      uint64_t v14 = (uint64_t *)((char *)v2 + v6[12]);
      unint64_t v15 = v14[1];
      if (v15 >> 60 != 15) {
        sub_1000042CC(*v14, v15);
      }
      swift_bridgeObjectRelease();
      uint64_t v16 = (char *)v2 + v6[14];
      if (!v13(v16, 1, v11)) {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
      }
      swift_bridgeObjectRelease();
      uint64_t v17 = (uint64_t *)((char *)v2 + v6[16]);
      unint64_t v18 = v17[1];
      if (v18 >> 60 != 15) {
        sub_1000042CC(*v17, v18);
      }
      swift_bridgeObjectRelease();
      uint64_t v19 = (uint64_t *)((char *)v2 + v6[20]);
      unint64_t v20 = v19[1];
      if (v20 >> 60 == 15) {
        goto LABEL_25;
      }
      uint64_t v21 = *v19;
LABEL_24:
      sub_1000042CC(v21, v20);
LABEL_25:
      return swift_bridgeObjectRelease();
    case 2u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000042CC(v2[4], v2[5]);
      swift_bridgeObjectRelease();
      uint64_t v22 = (char *)v2 + *(int *)(type metadata accessor for IDSKCSharingInvitationSchema() + 32);
      uint64_t v23 = sub_100077B90();
      uint64_t v24 = *(void *)(v23 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23)) {
        (*(void (**)(char *, uint64_t))(v24 + 8))(v22, v23);
      }
LABEL_21:
      swift_bridgeObjectRelease();
      goto LABEL_25;
    case 3u:
      uint64_t v21 = *v2;
      unint64_t v20 = v2[1];
      goto LABEL_24;
    case 4u:
      uint64_t v21 = v2[1];
      unint64_t v20 = v2[2];
      goto LABEL_24;
    default:
      goto LABEL_25;
  }
}

void *initializeWithCopy for IDSInvitationSchema(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(type metadata accessor for IDSInvitationContextSchema(0) + 24);
  uint64_t v8 = (void *)((char *)a1 + v7);
  uint64_t v9 = (void *)((char *)a2 + v7);
  type metadata accessor for IDSDictionaryContextClientSchema(0);
  swift_bridgeObjectRetain();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      v117 = a3;
      uint64_t v18 = v9[1];
      uint64_t *v8 = *v9;
      v8[1] = v18;
      uint64_t v19 = type metadata accessor for IDSHomeKitInvitationSchema(0);
      uint64_t v20 = *(int *)(v19 + 20);
      __dsta = (int *)v19;
      char v115 = (char *)v8 + v20;
      uint64_t v21 = (char *)v9 + v20;
      uint64_t v22 = sub_100077B90();
      uint64_t v23 = *(void *)(v22 - 8);
      uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
      swift_bridgeObjectRetain();
      if (v24(v21, 1, v22))
      {
        uint64_t v25 = sub_100002214(&qword_100090248);
        memcpy(v115, v21, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v115, v21, v22);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v115, 0, 1, v22);
      }
      uint64_t v43 = __dsta[6];
      uint64_t v44 = (uint64_t *)((char *)v8 + v43);
      uint64_t v45 = (uint64_t *)((char *)v9 + v43);
      uint64_t v46 = v45[1];
      *uint64_t v44 = *v45;
      v44[1] = v46;
      *((unsigned char *)v8 + __dsta[7]) = *((unsigned char *)v9 + __dsta[7]);
      uint64_t v47 = __dsta[8];
      uint64_t v48 = (char *)v8 + v47;
      uint64_t v49 = (char *)v9 + v47;
      *(void *)uint64_t v48 = *(void *)v49;
      v48[8] = v49[8];
      *((unsigned char *)v8 + __dsta[9]) = *((unsigned char *)v9 + __dsta[9]);
      uint64_t v50 = __dsta[10];
      uint64_t v51 = (char *)v8 + v50;
      uint64_t v52 = (char *)v9 + v50;
      uint64_t v53 = *(uint64_t *)((char *)v9 + v50);
      swift_bridgeObjectRetain();
      if (v53 == 1)
      {
        *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
      }
      else
      {
        uint64_t v54 = *((void *)v52 + 1);
        *(void *)uint64_t v51 = v53;
        *((void *)v51 + 1) = v54;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      uint64_t v55 = __dsta[11];
      uint64_t v56 = (char *)v8 + v55;
      uint64_t v57 = (char *)v9 + v55;
      uint64_t v58 = sub_100077BA0();
      uint64_t v59 = *(void *)(v58 - 8);
      v110 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
      if (v110(v57, 1, v58))
      {
        uint64_t v60 = sub_100002214(&qword_1000906F8);
        memcpy(v56, v57, *(void *)(*(void *)(v60 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v56, v57, v58);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
      }
      uint64_t v64 = __dsta[12];
      uint64_t v65 = (char *)v8 + v64;
      uint64_t v66 = (char *)v9 + v64;
      unint64_t v67 = *((void *)v66 + 1);
      if (v67 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v65 = *(_OWORD *)v66;
      }
      else
      {
        uint64_t v68 = v59;
        uint64_t v69 = *(void *)v66;
        sub_100004214(*(void *)v66, *((void *)v66 + 1));
        *(void *)uint64_t v65 = v69;
        *((void *)v65 + 1) = v67;
        uint64_t v59 = v68;
      }
      uint64_t v70 = __dsta[13];
      uint64_t v71 = (uint64_t *)((char *)v8 + v70);
      uint64_t v72 = (uint64_t *)((char *)v9 + v70);
      uint64_t v73 = v72[1];
      *uint64_t v71 = *v72;
      v71[1] = v73;
      uint64_t v74 = __dsta[14];
      uint64_t v75 = (char *)v8 + v74;
      uint64_t v76 = (char *)v9 + v74;
      swift_bridgeObjectRetain();
      if (v110(v76, 1, v58))
      {
        uint64_t v77 = sub_100002214(&qword_1000906F8);
        memcpy(v75, v76, *(void *)(*(void *)(v77 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v75, v76, v58);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v75, 0, 1, v58);
      }
      uint64_t v78 = __dsta[15];
      uint64_t v79 = (uint64_t *)((char *)v8 + v78);
      uint64_t v80 = (uint64_t *)((char *)v9 + v78);
      uint64_t v81 = v80[1];
      void *v79 = *v80;
      v79[1] = v81;
      uint64_t v82 = __dsta[16];
      uint64_t v83 = (char *)v8 + v82;
      uint64_t v84 = (_OWORD *)((char *)v9 + v82);
      unint64_t v85 = *(uint64_t *)((char *)v9 + v82 + 8);
      swift_bridgeObjectRetain();
      if (v85 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v83 = *v84;
      }
      else
      {
        uint64_t v86 = *(void *)v84;
        sub_100004214(v86, v85);
        *(void *)uint64_t v83 = v86;
        *((void *)v83 + 1) = v85;
      }
      uint64_t v87 = __dsta[17];
      uint64_t v88 = (uint64_t *)((char *)v8 + v87);
      uint64_t v89 = (uint64_t *)((char *)v9 + v87);
      uint64_t v90 = v89[1];
      *uint64_t v88 = *v89;
      v88[1] = v90;
      uint64_t v91 = __dsta[18];
      uint64_t v92 = (char *)v8 + v91;
      uint64_t v93 = (char *)v9 + v91;
      v92[8] = v93[8];
      *(void *)uint64_t v92 = *(void *)v93;
      uint64_t v94 = __dsta[19];
      uint64_t v95 = (char *)v8 + v94;
      uint64_t v96 = (char *)v9 + v94;
      *(void *)uint64_t v95 = *(void *)v96;
      v95[8] = v96[8];
      uint64_t v97 = __dsta[20];
      unint64_t v98 = (char *)v8 + v97;
      uint64_t v99 = (_OWORD *)((char *)v9 + v97);
      unint64_t v100 = *(uint64_t *)((char *)v9 + v97 + 8);
      swift_bridgeObjectRetain();
      if (v100 >> 60 == 15)
      {
        *(_OWORD *)unint64_t v98 = *v99;
      }
      else
      {
        uint64_t v101 = *(void *)v99;
        sub_100004214(v101, v100);
        *(void *)unint64_t v98 = v101;
        *((void *)v98 + 1) = v100;
      }
      a3 = v117;
      break;
    case 2u:
      uint64_t v26 = v9[1];
      uint64_t *v8 = *v9;
      v8[1] = v26;
      uint64_t v27 = v9[3];
      v8[2] = v9[2];
      v8[3] = v27;
      uint64_t v28 = v9[4];
      unint64_t v29 = v9[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_100004214(v28, v29);
      v8[4] = v28;
      v8[5] = v29;
      uint64_t v30 = v9[7];
      v8[6] = v9[6];
      v8[7] = v30;
      uint64_t v31 = type metadata accessor for IDSKCSharingInvitationSchema();
      uint64_t v32 = *(int *)(v31 + 32);
      __dstb = (char *)v8 + v32;
      uint64_t v116 = (int *)v31;
      uint64_t v33 = (char *)v9 + v32;
      uint64_t v34 = sub_100077B90();
      uint64_t v35 = *(void *)(v34 - 8);
      uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
      swift_bridgeObjectRetain();
      if (v36(v33, 1, v34))
      {
        uint64_t v37 = sub_100002214(&qword_100090248);
        memcpy(__dstb, v33, *(void *)(*(void *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(__dstb, v33, v34);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(__dstb, 0, 1, v34);
      }
      uint64_t v42 = v116[9];
      goto LABEL_20;
    case 3u:
      uint64_t v38 = *v9;
      unint64_t v39 = v9[1];
      sub_100004214(*v9, v39);
      uint64_t *v8 = v38;
      v8[1] = v39;
      break;
    case 4u:
      uint64_t v40 = v9[1];
      uint64_t *v8 = *v9;
      unint64_t v41 = v9[2];
      sub_100004214(v40, v41);
      v8[1] = v40;
      v8[2] = v41;
      break;
    default:
      uint64_t v10 = v9[1];
      uint64_t *v8 = *v9;
      v8[1] = v10;
      uint64_t v11 = type metadata accessor for IDSSampleInvitationSchema();
      uint64_t v12 = *(int *)(v11 + 20);
      __dst = (char *)v8 + v12;
      v114 = (int *)v11;
      uint64_t v13 = (char *)v9 + v12;
      uint64_t v14 = sub_100077B90();
      uint64_t v15 = *(void *)(v14 - 8);
      uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
      swift_bridgeObjectRetain();
      if (v16(v13, 1, v14))
      {
        uint64_t v17 = sub_100002214(&qword_100090248);
        memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v13, v14);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
      }
      uint64_t v42 = v114[6];
LABEL_20:
      uint64_t v61 = (uint64_t *)((char *)v8 + v42);
      uint64_t v62 = (uint64_t *)((char *)v9 + v42);
      uint64_t v63 = v62[1];
      *uint64_t v61 = *v62;
      v61[1] = v63;
      swift_bridgeObjectRetain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v102 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  uint64_t v103 = (char *)a1 + v102;
  unint64_t v104 = (char *)a2 + v102;
  *(void *)uint64_t v103 = *(void *)v104;
  v103[8] = v104[8];
  uint64_t v105 = a3[7];
  unint64_t v106 = (void *)((char *)a1 + v105);
  uint64_t v107 = (void *)((char *)a2 + v105);
  uint64_t v108 = v107[1];
  *unint64_t v106 = *v107;
  v106[1] = v108;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IDSInvitationSchema(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for IDSInvitationContextSchema(0);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(v6 + 24);
    uint64_t v8 = (void *)((char *)a1 + v7);
    uint64_t v9 = (void *)((char *)a2 + v7);
    sub_1000334C4((uint64_t)a1 + v7, type metadata accessor for IDSDictionaryContextClientSchema);
    type metadata accessor for IDSDictionaryContextClientSchema(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        __dsta = a3;
        uint64_t *v8 = *v9;
        v8[1] = v9[1];
        uint64_t v16 = type metadata accessor for IDSHomeKitInvitationSchema(0);
        uint64_t v17 = *(int *)(v16 + 20);
        uint64_t v102 = (int *)v16;
        unint64_t v106 = (char *)v8 + v17;
        uint64_t v18 = (char *)v9 + v17;
        uint64_t v19 = sub_100077B90();
        uint64_t v20 = *(void *)(v19 - 8);
        uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
        swift_bridgeObjectRetain();
        if (v21(v18, 1, v19))
        {
          uint64_t v22 = sub_100002214(&qword_100090248);
          memcpy(v106, v18, *(void *)(*(void *)(v22 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v106, v18, v19);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v106, 0, 1, v19);
        }
        a3 = __dsta;
        uint64_t v47 = v102;
        uint64_t v48 = v102[6];
        uint64_t v49 = (uint64_t *)((char *)v8 + v48);
        uint64_t v50 = (uint64_t *)((char *)v9 + v48);
        *uint64_t v49 = *v50;
        v49[1] = v50[1];
        *((unsigned char *)v8 + v102[7]) = *((unsigned char *)v9 + v102[7]);
        uint64_t v51 = v102[8];
        uint64_t v52 = (char *)v8 + v51;
        uint64_t v53 = (char *)v9 + v51;
        uint64_t v54 = *(void *)v53;
        v52[8] = v53[8];
        *(void *)uint64_t v52 = v54;
        *((unsigned char *)v8 + v102[9]) = *((unsigned char *)v9 + v102[9]);
        uint64_t v55 = v102[10];
        uint64_t v56 = (char *)v8 + v55;
        uint64_t v57 = (char *)v9 + v55;
        uint64_t v58 = *(uint64_t *)((char *)v9 + v55);
        swift_bridgeObjectRetain();
        if (v58 == 1)
        {
          *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
        }
        else
        {
          *(void *)uint64_t v56 = v58;
          *((void *)v56 + 1) = *((void *)v57 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        uint64_t v59 = v102[11];
        uint64_t v60 = (char *)v8 + v59;
        uint64_t v61 = (char *)v9 + v59;
        uint64_t v62 = sub_100077BA0();
        uint64_t v63 = *(void *)(v62 - 8);
        __dstb = *(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48);
        if (__dstb(v61, 1, v62))
        {
          uint64_t v64 = sub_100002214(&qword_1000906F8);
          memcpy(v60, v61, *(void *)(*(void *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v60, v61, v62);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v60, 0, 1, v62);
        }
        uint64_t v65 = v102[12];
        uint64_t v66 = (char *)v8 + v65;
        unint64_t v67 = (uint64_t *)((char *)v9 + v65);
        unint64_t v68 = v67[1];
        if (v68 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v66 = *(_OWORD *)v67;
        }
        else
        {
          uint64_t v104 = v63;
          uint64_t v69 = *v67;
          sub_100004214(*v67, v68);
          *(void *)uint64_t v66 = v69;
          *((void *)v66 + 1) = v68;
          uint64_t v63 = v104;
        }
        uint64_t v70 = v47[13];
        uint64_t v71 = (uint64_t *)((char *)v8 + v70);
        uint64_t v72 = (uint64_t *)((char *)v9 + v70);
        *uint64_t v71 = *v72;
        v71[1] = v72[1];
        uint64_t v73 = v47[14];
        uint64_t v74 = (char *)v8 + v73;
        uint64_t v75 = (char *)v9 + v73;
        swift_bridgeObjectRetain();
        if (__dstb(v75, 1, v62))
        {
          uint64_t v76 = sub_100002214(&qword_1000906F8);
          memcpy(v74, v75, *(void *)(*(void *)(v76 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v63 + 16))(v74, v75, v62);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v74, 0, 1, v62);
        }
        uint64_t v77 = v47[15];
        uint64_t v78 = (uint64_t *)((char *)v8 + v77);
        uint64_t v79 = (uint64_t *)((char *)v9 + v77);
        *uint64_t v78 = *v79;
        v78[1] = v79[1];
        uint64_t v80 = v47[16];
        uint64_t v81 = (char *)v8 + v80;
        uint64_t v82 = (_OWORD *)((char *)v9 + v80);
        unint64_t v83 = *(uint64_t *)((char *)v9 + v80 + 8);
        swift_bridgeObjectRetain();
        if (v83 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v81 = *v82;
        }
        else
        {
          uint64_t v84 = *(void *)v82;
          sub_100004214(v84, v83);
          *(void *)uint64_t v81 = v84;
          *((void *)v81 + 1) = v83;
        }
        uint64_t v85 = v47[17];
        uint64_t v86 = (uint64_t *)((char *)v8 + v85);
        uint64_t v87 = (uint64_t *)((char *)v9 + v85);
        *uint64_t v86 = *v87;
        v86[1] = v87[1];
        uint64_t v88 = v47[18];
        uint64_t v89 = (char *)v8 + v88;
        uint64_t v90 = (char *)v9 + v88;
        uint64_t v91 = *(void *)v90;
        v89[8] = v90[8];
        *(void *)uint64_t v89 = v91;
        uint64_t v92 = v47[19];
        uint64_t v93 = (char *)v8 + v92;
        uint64_t v94 = (char *)v9 + v92;
        uint64_t v95 = *(void *)v94;
        v93[8] = v94[8];
        *(void *)uint64_t v93 = v95;
        uint64_t v96 = v47[20];
        uint64_t v97 = (char *)v8 + v96;
        unint64_t v98 = (_OWORD *)((char *)v9 + v96);
        unint64_t v99 = *(uint64_t *)((char *)v9 + v96 + 8);
        swift_bridgeObjectRetain();
        if (v99 >> 60 == 15)
        {
          *(_OWORD *)uint64_t v97 = *v98;
        }
        else
        {
          uint64_t v100 = *(void *)v98;
          sub_100004214(v100, v99);
          *(void *)uint64_t v97 = v100;
          *((void *)v97 + 1) = v99;
        }
        break;
      case 2u:
        uint64_t *v8 = *v9;
        v8[1] = v9[1];
        v8[2] = v9[2];
        v8[3] = v9[3];
        uint64_t v23 = v9[4];
        unint64_t v24 = v9[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100004214(v23, v24);
        v8[4] = v23;
        v8[5] = v24;
        v8[6] = v9[6];
        v8[7] = v9[7];
        uint64_t v25 = type metadata accessor for IDSKCSharingInvitationSchema();
        uint64_t v26 = *(int *)(v25 + 32);
        uint64_t v103 = v25;
        uint64_t v107 = (char *)v8 + v26;
        uint64_t v27 = (char *)v9 + v26;
        uint64_t v28 = sub_100077B90();
        uint64_t v29 = *(void *)(v28 - 8);
        uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
        swift_bridgeObjectRetain();
        if (v30(v27, 1, v28))
        {
          uint64_t v31 = sub_100002214(&qword_100090248);
          memcpy(v107, v27, *(void *)(*(void *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v107, v27, v28);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v107, 0, 1, v28);
        }
        uint64_t v36 = *(int *)(v103 + 36);
        goto LABEL_15;
      case 3u:
        uint64_t v32 = *v9;
        unint64_t v33 = v9[1];
        sub_100004214(*v9, v33);
        uint64_t *v8 = v32;
        v8[1] = v33;
        break;
      case 4u:
        uint64_t *v8 = *v9;
        uint64_t v34 = v9[1];
        unint64_t v35 = v9[2];
        sub_100004214(v34, v35);
        v8[1] = v34;
        v8[2] = v35;
        break;
      default:
        uint64_t *v8 = *v9;
        v8[1] = v9[1];
        uint64_t v10 = type metadata accessor for IDSSampleInvitationSchema();
        uint64_t v11 = *(int *)(v10 + 20);
        uint64_t v105 = (int *)v10;
        __dst = (char *)v8 + v11;
        uint64_t v101 = (char *)v9 + v11;
        uint64_t v12 = sub_100077B90();
        uint64_t v13 = *(void *)(v12 - 8);
        uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
        swift_bridgeObjectRetain();
        if (v14(v101, 1, v12))
        {
          uint64_t v15 = sub_100002214(&qword_100090248);
          memcpy(__dst, v101, *(void *)(*(void *)(v15 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v101, v12);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
        }
        uint64_t v36 = v105[6];
LABEL_15:
        uint64_t v37 = (uint64_t *)((char *)v8 + v36);
        uint64_t v38 = (uint64_t *)((char *)v9 + v36);
        *uint64_t v37 = *v38;
        v37[1] = v38[1];
        swift_bridgeObjectRetain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  uint64_t v39 = a3[6];
  uint64_t v40 = (char *)a1 + v39;
  unint64_t v41 = (char *)a2 + v39;
  uint64_t v42 = *(void *)v41;
  v40[8] = v41[8];
  *(void *)uint64_t v40 = v42;
  uint64_t v43 = a3[7];
  uint64_t v44 = (void *)((char *)a1 + v43);
  uint64_t v45 = (void *)((char *)a2 + v43);
  *uint64_t v44 = *v45;
  v44[1] = v45[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for IDSInvitationSchema(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for IDSInvitationContextSchema(0) + 24);
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  uint64_t v8 = (_OWORD *)((char *)a2 + v6);
  uint64_t v9 = type metadata accessor for IDSDictionaryContextClientSchema(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      long long v18 = v8[1];
      *uint64_t v7 = *v8;
      v7[1] = v18;
      long long v19 = v8[3];
      v7[2] = v8[2];
      v7[3] = v19;
      uint64_t v20 = type metadata accessor for IDSKCSharingInvitationSchema();
      uint64_t v21 = *(int *)(v20 + 32);
      uint64_t v22 = (char *)v7 + v21;
      uint64_t v23 = (char *)v8 + v21;
      uint64_t v24 = sub_100077B90();
      uint64_t v25 = *(void *)(v24 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
      {
        uint64_t v26 = sub_100002214(&qword_100090248);
        memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      }
      *(_OWORD *)((char *)v7 + *(int *)(v20 + 36)) = *(_OWORD *)((char *)v8 + *(int *)(v20 + 36));
      goto LABEL_23;
    case 1:
      *uint64_t v7 = *v8;
      uint64_t v27 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
      uint64_t v28 = v27[5];
      uint64_t v29 = (char *)v7 + v28;
      uint64_t v30 = (char *)v8 + v28;
      uint64_t v31 = sub_100077B90();
      uint64_t v32 = *(void *)(v31 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
      {
        uint64_t v33 = sub_100002214(&qword_100090248);
        memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v29, v30, v31);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
      }
      *(_OWORD *)((char *)v7 + v27[6]) = *(_OWORD *)((char *)v8 + v27[6]);
      *((unsigned char *)v7 + v27[7]) = *((unsigned char *)v8 + v27[7]);
      uint64_t v34 = v27[8];
      unint64_t v35 = (char *)v7 + v34;
      uint64_t v36 = (char *)v8 + v34;
      v35[8] = v36[8];
      *(void *)unint64_t v35 = *(void *)v36;
      *((unsigned char *)v7 + v27[9]) = *((unsigned char *)v8 + v27[9]);
      *(_OWORD *)((char *)v7 + v27[10]) = *(_OWORD *)((char *)v8 + v27[10]);
      uint64_t v37 = v27[11];
      uint64_t v38 = (char *)v7 + v37;
      uint64_t v39 = (char *)v8 + v37;
      uint64_t v40 = sub_100077BA0();
      uint64_t v41 = *(void *)(v40 - 8);
      uint64_t v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
      if (v57(v39, 1, v40))
      {
        uint64_t v42 = sub_100002214(&qword_1000906F8);
        memcpy(v38, v39, *(void *)(*(void *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v38, v39, v40);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      }
      *(_OWORD *)((char *)v7 + v27[12]) = *(_OWORD *)((char *)v8 + v27[12]);
      *(_OWORD *)((char *)v7 + v27[13]) = *(_OWORD *)((char *)v8 + v27[13]);
      uint64_t v43 = v27[14];
      uint64_t v44 = (char *)v7 + v43;
      uint64_t v45 = (char *)v8 + v43;
      if (v57((char *)v8 + v43, 1, v40))
      {
        uint64_t v46 = sub_100002214(&qword_1000906F8);
        memcpy(v44, v45, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v44, v45, v40);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v44, 0, 1, v40);
      }
      *(_OWORD *)((char *)v7 + v27[15]) = *(_OWORD *)((char *)v8 + v27[15]);
      *(_OWORD *)((char *)v7 + v27[16]) = *(_OWORD *)((char *)v8 + v27[16]);
      *(_OWORD *)((char *)v7 + v27[17]) = *(_OWORD *)((char *)v8 + v27[17]);
      uint64_t v47 = v27[18];
      uint64_t v48 = (char *)v7 + v47;
      uint64_t v49 = (char *)v8 + v47;
      v48[8] = v49[8];
      *(void *)uint64_t v48 = *(void *)v49;
      uint64_t v50 = v27[19];
      uint64_t v51 = (char *)v7 + v50;
      uint64_t v52 = (char *)v8 + v50;
      v51[8] = v52[8];
      *(void *)uint64_t v51 = *(void *)v52;
      *(_OWORD *)((char *)v7 + v27[20]) = *(_OWORD *)((char *)v8 + v27[20]);
      goto LABEL_23;
    case 0:
      *uint64_t v7 = *v8;
      uint64_t v11 = type metadata accessor for IDSSampleInvitationSchema();
      uint64_t v12 = *(int *)(v11 + 20);
      uint64_t v13 = (char *)v7 + v12;
      uint64_t v14 = (char *)v8 + v12;
      uint64_t v15 = sub_100077B90();
      uint64_t v16 = *(void *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        uint64_t v17 = sub_100002214(&qword_100090248);
        memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      *(_OWORD *)((char *)v7 + *(int *)(v11 + 24)) = *(_OWORD *)((char *)v8 + *(int *)(v11 + 24));
LABEL_23:
      swift_storeEnumTagMultiPayload();
      goto LABEL_24;
  }
  memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
LABEL_24:
  uint64_t v53 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  uint64_t v54 = (char *)a1 + v53;
  uint64_t v55 = (char *)a2 + v53;
  *(void *)uint64_t v54 = *(void *)v55;
  v54[8] = v55[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  return a1;
}

void *assignWithTake for IDSInvitationSchema(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for IDSInvitationContextSchema(0);
  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(v7 + 24);
    uint64_t v9 = (_OWORD *)((char *)a1 + v8);
    uint64_t v10 = (_OWORD *)((char *)a2 + v8);
    sub_1000334C4((uint64_t)a1 + v8, type metadata accessor for IDSDictionaryContextClientSchema);
    uint64_t v11 = type metadata accessor for IDSDictionaryContextClientSchema(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        long long v20 = v10[1];
        *uint64_t v9 = *v10;
        v9[1] = v20;
        long long v21 = v10[3];
        v9[2] = v10[2];
        v9[3] = v21;
        uint64_t v22 = type metadata accessor for IDSKCSharingInvitationSchema();
        uint64_t v23 = *(int *)(v22 + 32);
        uint64_t v24 = (char *)v9 + v23;
        uint64_t v25 = (char *)v10 + v23;
        uint64_t v26 = sub_100077B90();
        uint64_t v27 = *(void *)(v26 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
        {
          uint64_t v28 = sub_100002214(&qword_100090248);
          memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v24, v25, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        }
        *(_OWORD *)((char *)v9 + *(int *)(v22 + 36)) = *(_OWORD *)((char *)v10 + *(int *)(v22 + 36));
        goto LABEL_24;
      case 1:
        *uint64_t v9 = *v10;
        uint64_t v29 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
        uint64_t v30 = v29[5];
        uint64_t v31 = (char *)v9 + v30;
        uint64_t v32 = (char *)v10 + v30;
        uint64_t v33 = sub_100077B90();
        uint64_t v34 = *(void *)(v33 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
        {
          uint64_t v35 = sub_100002214(&qword_100090248);
          memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
        }
        *(_OWORD *)((char *)v9 + v29[6]) = *(_OWORD *)((char *)v10 + v29[6]);
        *((unsigned char *)v9 + v29[7]) = *((unsigned char *)v10 + v29[7]);
        uint64_t v36 = v29[8];
        uint64_t v37 = (char *)v9 + v36;
        uint64_t v38 = (char *)v10 + v36;
        v37[8] = v38[8];
        *(void *)uint64_t v37 = *(void *)v38;
        *((unsigned char *)v9 + v29[9]) = *((unsigned char *)v10 + v29[9]);
        *(_OWORD *)((char *)v9 + v29[10]) = *(_OWORD *)((char *)v10 + v29[10]);
        uint64_t v39 = v29[11];
        __dst = (char *)v9 + v39;
        uint64_t v40 = (char *)v10 + v39;
        uint64_t v41 = sub_100077BA0();
        uint64_t v42 = *(void *)(v41 - 8);
        uint64_t v64 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
        uint64_t v63 = v42;
        if (v64(v40, 1, v41))
        {
          uint64_t v43 = sub_100002214(&qword_1000906F8);
          memcpy(__dst, v40, *(void *)(*(void *)(v43 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v42 + 32))(__dst, v40, v41);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(__dst, 0, 1, v41);
        }
        *(_OWORD *)((char *)v9 + v29[12]) = *(_OWORD *)((char *)v10 + v29[12]);
        *(_OWORD *)((char *)v9 + v29[13]) = *(_OWORD *)((char *)v10 + v29[13]);
        uint64_t v44 = v29[14];
        uint64_t v45 = (char *)v9 + v44;
        uint64_t v46 = (char *)v10 + v44;
        if (v64((char *)v10 + v44, 1, v41))
        {
          uint64_t v47 = sub_100002214(&qword_1000906F8);
          memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v63 + 32))(v45, v46, v41);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(v45, 0, 1, v41);
        }
        *(_OWORD *)((char *)v9 + v29[15]) = *(_OWORD *)((char *)v10 + v29[15]);
        *(_OWORD *)((char *)v9 + v29[16]) = *(_OWORD *)((char *)v10 + v29[16]);
        *(_OWORD *)((char *)v9 + v29[17]) = *(_OWORD *)((char *)v10 + v29[17]);
        uint64_t v48 = v29[18];
        uint64_t v49 = (char *)v9 + v48;
        uint64_t v50 = (char *)v10 + v48;
        v49[8] = v50[8];
        *(void *)uint64_t v49 = *(void *)v50;
        uint64_t v51 = v29[19];
        uint64_t v52 = (char *)v9 + v51;
        uint64_t v53 = (char *)v10 + v51;
        v52[8] = v53[8];
        *(void *)uint64_t v52 = *(void *)v53;
        *(_OWORD *)((char *)v9 + v29[20]) = *(_OWORD *)((char *)v10 + v29[20]);
        goto LABEL_24;
      case 0:
        *uint64_t v9 = *v10;
        uint64_t v13 = type metadata accessor for IDSSampleInvitationSchema();
        uint64_t v14 = *(int *)(v13 + 20);
        uint64_t v15 = (char *)v9 + v14;
        uint64_t v16 = (char *)v10 + v14;
        uint64_t v17 = sub_100077B90();
        uint64_t v18 = *(void *)(v17 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        {
          uint64_t v19 = sub_100002214(&qword_100090248);
          memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
        }
        *(_OWORD *)((char *)v9 + *(int *)(v13 + 24)) = *(_OWORD *)((char *)v10 + *(int *)(v13 + 24));
LABEL_24:
        swift_storeEnumTagMultiPayload();
        goto LABEL_25;
    }
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
LABEL_25:
  uint64_t v54 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  uint64_t v55 = (char *)a1 + v54;
  uint64_t v56 = (char *)a2 + v54;
  *(void *)uint64_t v55 = *(void *)v56;
  v55[8] = v56[8];
  uint64_t v57 = a3[7];
  uint64_t v58 = (void *)((char *)a1 + v57);
  uint64_t v59 = (void *)((char *)a2 + v57);
  uint64_t v61 = *v59;
  uint64_t v60 = v59[1];
  *uint64_t v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000410D4);
}

uint64_t sub_1000410D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IDSInvitationContextSchema(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for IDSInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000411AC);
}

uint64_t sub_1000411AC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for IDSInvitationContextSchema(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_10004126C()
{
  uint64_t result = type metadata accessor for IDSInvitationContextSchema(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for IDSInvitationSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000413E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSInvitationSchema.CodingKeys()
{
  return &type metadata for IDSInvitationSchema.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for IDSInvitationContextSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000414E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSInvitationContextSchema.CodingKeys()
{
  return &type metadata for IDSInvitationContextSchema.CodingKeys;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextData.CodingKeys()
{
  return &type metadata for IDSDictionaryContextData.CodingKeys;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextData.DictionaryContextCodingKeys()
{
  return &type metadata for IDSDictionaryContextData.DictionaryContextCodingKeys;
}

unsigned char *storeEnumTagSinglePayload for IDSDictionaryContextClientSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10004160CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextClientSchema.CodingKeys()
{
  return &type metadata for IDSDictionaryContextClientSchema.CodingKeys;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextClientSchema.IdsSampleInvitationCodingKeys()
{
  return &type metadata for IDSDictionaryContextClientSchema.IdsSampleInvitationCodingKeys;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextClientSchema.IdsHomekitInvitationCodingKeys()
{
  return &type metadata for IDSDictionaryContextClientSchema.IdsHomekitInvitationCodingKeys;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextClientSchema.IdsKCSharingInvitationCodingKeys()
{
  return &type metadata for IDSDictionaryContextClientSchema.IdsKCSharingInvitationCodingKeys;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextClientSchema.IdsHealthInvitationCodingKeys()
{
  return &type metadata for IDSDictionaryContextClientSchema.IdsHealthInvitationCodingKeys;
}

uint64_t getEnumTagSinglePayload for IDSMadridProtocolDeliveryContext.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s19IDSBlastDoorService24IDSInvitationContextTypeOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100041770);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSDictionaryContextClientSchema.IdsActivitySharingInvitationCodingKeys()
{
  return &type metadata for IDSDictionaryContextClientSchema.IdsActivitySharingInvitationCodingKeys;
}

unint64_t sub_1000417AC()
{
  unint64_t result = qword_100090958;
  if (!qword_100090958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090958);
  }
  return result;
}

unint64_t sub_100041804()
{
  unint64_t result = qword_100090960;
  if (!qword_100090960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090960);
  }
  return result;
}

unint64_t sub_10004185C()
{
  unint64_t result = qword_100090968;
  if (!qword_100090968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090968);
  }
  return result;
}

unint64_t sub_1000418B4()
{
  unint64_t result = qword_100090970;
  if (!qword_100090970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090970);
  }
  return result;
}

unint64_t sub_10004190C()
{
  unint64_t result = qword_100090978;
  if (!qword_100090978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090978);
  }
  return result;
}

unint64_t sub_100041964()
{
  unint64_t result = qword_100090980;
  if (!qword_100090980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090980);
  }
  return result;
}

unint64_t sub_1000419BC()
{
  unint64_t result = qword_100090988;
  if (!qword_100090988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090988);
  }
  return result;
}

unint64_t sub_100041A14()
{
  unint64_t result = qword_100090990;
  if (!qword_100090990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090990);
  }
  return result;
}

unint64_t sub_100041A6C()
{
  unint64_t result = qword_100090998;
  if (!qword_100090998)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090998);
  }
  return result;
}

unint64_t sub_100041AC4()
{
  unint64_t result = qword_1000909A0;
  if (!qword_1000909A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000909A0);
  }
  return result;
}

unint64_t sub_100041B1C()
{
  unint64_t result = qword_1000909A8;
  if (!qword_1000909A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000909A8);
  }
  return result;
}

unint64_t sub_100041B74()
{
  unint64_t result = qword_1000909B0;
  if (!qword_1000909B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000909B0);
  }
  return result;
}

unint64_t sub_100041BCC()
{
  unint64_t result = qword_1000909B8;
  if (!qword_1000909B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000909B8);
  }
  return result;
}

unint64_t sub_100041C24()
{
  unint64_t result = qword_1000909C0;
  if (!qword_1000909C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000909C0);
  }
  return result;
}

unint64_t sub_100041C7C()
{
  unint64_t result = qword_1000909C8;
  if (!qword_1000909C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000909C8);
  }
  return result;
}

unint64_t sub_100041CD4()
{
  unint64_t result = qword_1000909D0;
  if (!qword_1000909D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000909D0);
  }
  return result;
}

unint64_t sub_100041D2C()
{
  unint64_t result = qword_1000909D8;
  if (!qword_1000909D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000909D8);
  }
  return result;
}

unint64_t sub_100041D84()
{
  unint64_t result = qword_1000909E0;
  if (!qword_1000909E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000909E0);
  }
  return result;
}

unint64_t sub_100041DDC()
{
  unint64_t result = qword_1000909E8;
  if (!qword_1000909E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000909E8);
  }
  return result;
}

unint64_t sub_100041E34()
{
  unint64_t result = qword_1000909F0;
  if (!qword_1000909F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000909F0);
  }
  return result;
}

unint64_t sub_100041E8C()
{
  unint64_t result = qword_1000909F8;
  if (!qword_1000909F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000909F8);
  }
  return result;
}

unint64_t sub_100041EE4()
{
  unint64_t result = qword_100090A00;
  if (!qword_100090A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090A00);
  }
  return result;
}

unint64_t sub_100041F3C()
{
  unint64_t result = qword_100090A08;
  if (!qword_100090A08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090A08);
  }
  return result;
}

unint64_t sub_100041F94()
{
  unint64_t result = qword_100090A10;
  if (!qword_100090A10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090A10);
  }
  return result;
}

unint64_t sub_100041FEC()
{
  unint64_t result = qword_100090A18;
  if (!qword_100090A18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090A18);
  }
  return result;
}

unint64_t sub_100042044()
{
  unint64_t result = qword_100090A20;
  if (!qword_100090A20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090A20);
  }
  return result;
}

unint64_t sub_10004209C()
{
  unint64_t result = qword_100090A28;
  if (!qword_100090A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090A28);
  }
  return result;
}

unint64_t sub_1000420F4()
{
  unint64_t result = qword_100090A30;
  if (!qword_100090A30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090A30);
  }
  return result;
}

unint64_t sub_10004214C()
{
  unint64_t result = qword_100090A38;
  if (!qword_100090A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090A38);
  }
  return result;
}

unint64_t sub_1000421A4()
{
  unint64_t result = qword_100090A40;
  if (!qword_100090A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090A40);
  }
  return result;
}

uint64_t sub_1000421F8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100079DC0 || (sub_1000785B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x8000000100079DE0 || (sub_1000785B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000100079E00 || (sub_1000785B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x8000000100079E20 || (sub_1000785B0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD00000000000001CLL && a2 == 0x8000000100079E40)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = sub_1000785B0();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1000423E8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100079E60)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = sub_1000785B0();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_100042470(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_10008A148;
  v6._object = a2;
  unint64_t v4 = sub_100078390(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 3) {
    return 3;
  }
  else {
    return v4;
  }
}

uint64_t sub_1000424BC(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_10008A1B0;
  v6._object = a2;
  unint64_t v4 = sub_100078390(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 4) {
    return 4;
  }
  else {
    return v4;
  }
}

unint64_t sub_100042508()
{
  unint64_t result = qword_100090A48;
  if (!qword_100090A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090A48);
  }
  return result;
}

uint64_t IDSMadridProtocolPayload.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002214(&qword_100090A50);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_100044B30();
  sub_1000786A0();
  v15[0] = 0;
  sub_100078570();
  if (!v2)
  {
    v15[0] = 1;
    sub_1000784F0();
    v15[0] = 2;
    sub_1000784F0();
    sub_100044DC4(v3 + 40, (uint64_t)v57, &qword_100090158);
    sub_100044DC4((uint64_t)v57, (uint64_t)v15, &qword_100090158);
    char v16 = 3;
    sub_100003DA8();
    sub_100078510();
    sub_100044DC4(v3 + 56, (uint64_t)v56, &qword_100090158);
    sub_100044DC4((uint64_t)v56, (uint64_t)v15, &qword_100090158);
    char v16 = 4;
    sub_100078510();
    sub_100044DC4(v3 + 72, (uint64_t)v55, &qword_100090158);
    sub_100044DC4((uint64_t)v55, (uint64_t)v15, &qword_100090158);
    char v16 = 5;
    sub_100078510();
    sub_100044DC4(v3 + 88, (uint64_t)v54, &qword_100090158);
    sub_100044DC4((uint64_t)v54, (uint64_t)v15, &qword_100090158);
    char v16 = 6;
    sub_100078510();
    sub_100044DC4(v3 + 104, (uint64_t)v53, &qword_100090158);
    sub_100044DC4((uint64_t)v53, (uint64_t)v15, &qword_100090158);
    char v16 = 7;
    sub_100078510();
    v15[0] = 8;
    sub_1000784C0();
    sub_100044DC4(v3 + 136, (uint64_t)v52, &qword_100090158);
    sub_100044DC4((uint64_t)v52, (uint64_t)v15, &qword_100090158);
    char v16 = 9;
    sub_100078510();
    v15[0] = 10;
    sub_1000784C0();
    v15[0] = 11;
    sub_1000784D0();
    sub_100044DC4(v3 + 176, (uint64_t)v51, &qword_100090A60);
    sub_100044DC4((uint64_t)v51, (uint64_t)v15, &qword_100090A60);
    char v16 = 12;
    sub_100044B84();
    sub_100078510();
    v15[0] = 13;
    sub_1000784F0();
    sub_100044DC4(v3 + 208, (uint64_t)v50, &qword_100090158);
    sub_100044DC4((uint64_t)v50, (uint64_t)v15, &qword_100090158);
    char v16 = 14;
    sub_100078510();
    v15[0] = 15;
    sub_1000784D0();
    v15[0] = 16;
    sub_1000784D0();
    sub_100044DC4(v3 + 232, (uint64_t)v49, &qword_100090158);
    sub_100044DC4((uint64_t)v49, (uint64_t)v15, &qword_100090158);
    char v16 = 17;
    sub_100078510();
    sub_100044DC4(v3 + 248, (uint64_t)v48, &qword_100090158);
    sub_100044DC4((uint64_t)v48, (uint64_t)v15, &qword_100090158);
    char v16 = 18;
    sub_100078510();
    v15[0] = 19;
    sub_1000784C0();
    v15[0] = 20;
    sub_1000784C0();
    v15[0] = 21;
    sub_1000784C0();
    sub_100044DC4(v3 + 312, (uint64_t)v47, &qword_100090158);
    sub_100044DC4((uint64_t)v47, (uint64_t)v15, &qword_100090158);
    char v16 = 22;
    sub_100078510();
    uint64_t v14 = v3 + 336;
    v15[0] = 23;
    sub_100078520();
    v15[0] = 24;
    sub_1000784C0();
    v15[0] = 25;
    sub_1000784C0();
    v15[0] = 26;
    sub_1000784C0();
    sub_100044DC4(v3 + 392, (uint64_t)v58, &qword_100090A70);
    sub_100044DC4((uint64_t)v58, (uint64_t)v15, &qword_100090A70);
    char v16 = 27;
    uint64_t v9 = sub_100002214(&qword_100090A78);
    sub_10005ED74(&qword_100090A80);
    uint64_t v13 = v9;
    sub_100078510();
    sub_100044DC4(v3 + 400, (uint64_t)&v46, &qword_100090A70);
    sub_100044DC4((uint64_t)&v46, (uint64_t)v15, &qword_100090A70);
    char v16 = 28;
    sub_100078510();
    v15[0] = 29;
    sub_1000784C0();
    v15[0] = 30;
    sub_1000784C0();
    v15[0] = 31;
    sub_100078520();
    v15[0] = 32;
    sub_1000784F0();
    v15[0] = 33;
    sub_1000784C0();
    sub_100044DC4(v3 + 488, (uint64_t)v45, &qword_100090158);
    sub_100044DC4((uint64_t)v45, (uint64_t)v15, &qword_100090158);
    char v16 = 34;
    sub_100078510();
    sub_100044DC4(v3 + 504, (uint64_t)v44, &qword_100090158);
    sub_100044DC4((uint64_t)v44, (uint64_t)v15, &qword_100090158);
    char v16 = 35;
    sub_100078510();
    v15[0] = 36;
    sub_1000784F0();
    sub_100044DC4(v3 + 536, (uint64_t)v43, &qword_100090158);
    sub_100044DC4((uint64_t)v43, (uint64_t)v15, &qword_100090158);
    char v16 = 37;
    sub_100078510();
    v15[0] = 38;
    sub_1000784C0();
    v15[0] = 39;
    sub_1000784C0();
    v15[0] = 40;
    sub_1000784C0();
    v15[0] = 41;
    sub_1000784F0();
    v15[0] = 42;
    sub_100078520();
    v15[0] = 43;
    sub_100078520();
    v15[0] = 44;
    sub_1000784F0();
    sub_100044DC4(v3 + 664, (uint64_t)v42, &qword_100090158);
    sub_100044DC4((uint64_t)v42, (uint64_t)v15, &qword_100090158);
    char v16 = 45;
    sub_100078510();
    v15[0] = 46;
    sub_1000784C0();
    v15[0] = 47;
    sub_1000784F0();
    v15[0] = 48;
    sub_1000784F0();
    v15[0] = 49;
    sub_1000784C0();
    v15[0] = 50;
    sub_100078520();
    v15[0] = 51;
    sub_1000784C0();
    v15[0] = 52;
    sub_1000784F0();
    v15[0] = 53;
    sub_1000784F0();
    v15[0] = 54;
    sub_1000784F0();
    sub_100044DC4(v3 + 824, (uint64_t)&v41, &qword_100090A88);
    sub_100044DC4((uint64_t)&v41, (uint64_t)v15, &qword_100090A88);
    char v16 = 55;
    uint64_t v10 = sub_100002214(&qword_100090A90);
    sub_10005F004(&qword_100090A98, &qword_100090A90, (void (*)(void))sub_100044C20);
    uint64_t v13 = v10;
    sub_100078510();
    sub_100044DC4(v3 + 832, (uint64_t)&v40, &qword_100090A88);
    sub_100044DC4((uint64_t)&v40, (uint64_t)v15, &qword_100090A88);
    char v16 = 56;
    sub_100078510();
    v15[0] = 57;
    sub_1000784F0();
    v15[0] = 58;
    sub_100078520();
    v15[0] = 59;
    sub_1000784F0();
    v15[0] = 60;
    sub_1000784D0();
    v15[0] = 61;
    sub_1000784D0();
    v15[0] = 62;
    sub_1000784D0();
    v15[0] = 63;
    sub_1000784D0();
    v15[0] = 64;
    sub_1000784C0();
    v15[0] = 65;
    sub_1000784C0();
    sub_100044DC4(v3 + 920, (uint64_t)v39, &qword_100090158);
    sub_100044DC4((uint64_t)v39, (uint64_t)v15, &qword_100090158);
    char v16 = 66;
    sub_100078510();
    v15[0] = 67;
    sub_1000784C0();
    v15[0] = 68;
    sub_1000784C0();
    v15[0] = 69;
    sub_1000784C0();
    v15[0] = 70;
    sub_1000784C0();
    v15[0] = 71;
    sub_1000784C0();
    v15[0] = 72;
    sub_1000784F0();
    v15[0] = 73;
    sub_1000784C0();
    v15[0] = 74;
    sub_1000784F0();
    v15[0] = 75;
    sub_1000784C0();
    v15[0] = 76;
    sub_1000784F0();
    v15[0] = 77;
    sub_1000784D0();
    v15[0] = 78;
    sub_1000784C0();
    v15[0] = 79;
    sub_1000784F0();
    v15[0] = 80;
    sub_1000784F0();
    v15[0] = 81;
    sub_1000784C0();
    sub_100044DC4(v3 + 1160, (uint64_t)v38, &qword_100090AA8);
    sub_100044DC4((uint64_t)v38, (uint64_t)v15, &qword_100090AA8);
    char v16 = 82;
    sub_100044C74();
    sub_100078510();
    sub_100044DC4(v3 + 1256, (uint64_t)v37, &qword_100090158);
    sub_100044DC4((uint64_t)v37, (uint64_t)v15, &qword_100090158);
    char v16 = 83;
    sub_100078510();
    v15[0] = 84;
    sub_1000784C0();
    sub_100044DC4(v3 + 1288, (uint64_t)v36, &qword_100090158);
    sub_100044DC4((uint64_t)v36, (uint64_t)v15, &qword_100090158);
    char v16 = 85;
    sub_100078510();
    v15[0] = 86;
    sub_1000784F0();
    v15[0] = 87;
    sub_1000784C0();
    v15[0] = 88;
    sub_1000784D0();
    v15[0] = 89;
    sub_1000784D0();
    v15[0] = 90;
    sub_1000784D0();
    v15[0] = 91;
    sub_1000784F0();
    v15[0] = 92;
    sub_1000784C0();
    sub_100044DC4(v3 + 1376, (uint64_t)v35, &qword_100090158);
    sub_100044DC4((uint64_t)v35, (uint64_t)v15, &qword_100090158);
    char v16 = 93;
    sub_100078510();
    sub_100044DC4(v3 + 1392, (uint64_t)v34, &qword_100090158);
    sub_100044DC4((uint64_t)v34, (uint64_t)v15, &qword_100090158);
    char v16 = 94;
    sub_100078510();
    v15[0] = 95;
    sub_1000784F0();
    v15[0] = 96;
    sub_1000784D0();
    v15[0] = 97;
    sub_1000784D0();
    v15[0] = 98;
    sub_1000784F0();
    v15[0] = 99;
    sub_1000784F0();
    v15[0] = 100;
    sub_1000784D0();
    v15[0] = 101;
    sub_1000784F0();
    v15[0] = 102;
    sub_1000784F0();
    v15[0] = 103;
    sub_1000784C0();
    v15[0] = 104;
    sub_1000784F0();
    v15[0] = 105;
    sub_1000784F0();
    sub_100044DC4(v3 + 1536, (uint64_t)v33, &qword_100090158);
    sub_100044DC4((uint64_t)v33, (uint64_t)v15, &qword_100090158);
    char v16 = 106;
    sub_100078510();
    sub_100044DC4(v3 + 1552, (uint64_t)v32, &qword_100090158);
    sub_100044DC4((uint64_t)v32, (uint64_t)v15, &qword_100090158);
    char v16 = 107;
    sub_100078510();
    v15[0] = 108;
    sub_1000784F0();
    sub_100044DC4(v3 + 1584, (uint64_t)v31, &qword_100090158);
    sub_100044DC4((uint64_t)v31, (uint64_t)v15, &qword_100090158);
    char v16 = 109;
    sub_100078510();
    sub_100044DC4(v3 + 1600, (uint64_t)v30, &qword_100090158);
    sub_100044DC4((uint64_t)v30, (uint64_t)v15, &qword_100090158);
    char v16 = 110;
    sub_100078510();
    v15[0] = 111;
    sub_1000784F0();
    v15[0] = 112;
    sub_1000784F0();
    sub_100044DC4(v3 + 1648, (uint64_t)&v29, &qword_100090AB8);
    sub_100044DC4((uint64_t)&v29, (uint64_t)v15, &qword_100090AB8);
    char v16 = 113;
    sub_100002214(&qword_100090AC0);
    sub_10005F004(&qword_100090AC8, &qword_100090AC0, (void (*)(void))sub_100044CC8);
    sub_100078510();
    v15[0] = 114;
    sub_1000784C0();
    v15[0] = 115;
    sub_1000784C0();
    v15[0] = 116;
    sub_1000784F0();
    v15[0] = 117;
    sub_1000784D0();
    v15[0] = 118;
    sub_1000784D0();
    v15[0] = 119;
    sub_1000784F0();
    sub_100044DC4(v3 + 1720, (uint64_t)v28, &qword_100090158);
    sub_100044DC4((uint64_t)v28, (uint64_t)v15, &qword_100090158);
    char v16 = 120;
    sub_100078510();
    v15[0] = 121;
    sub_1000784F0();
    v15[0] = 122;
    sub_1000784D0();
    v15[0] = 123;
    sub_1000784C0();
    v15[0] = 124;
    sub_1000784F0();
    v15[0] = 125;
    sub_1000784F0();
    sub_100044DC4(v3 + 1800, (uint64_t)v27, &qword_100090158);
    sub_100044DC4((uint64_t)v27, (uint64_t)v15, &qword_100090158);
    char v16 = 126;
    sub_100078510();
    sub_100044DC4(v3 + 1816, (uint64_t)v26, &qword_100090158);
    sub_100044DC4((uint64_t)v26, (uint64_t)v15, &qword_100090158);
    char v16 = 127;
    sub_100078510();
    v15[0] = 0x80;
    sub_1000784F0();
    sub_100044DC4(v3 + 1848, (uint64_t)v25, &qword_100090158);
    sub_100044DC4((uint64_t)v25, (uint64_t)v15, &qword_100090158);
    char v16 = -127;
    sub_100078510();
    sub_100044DC4(v3 + 1864, (uint64_t)v24, &qword_100090158);
    sub_100044DC4((uint64_t)v24, (uint64_t)v15, &qword_100090158);
    char v16 = -126;
    sub_100078510();
    sub_100044DC4(v3 + 1880, (uint64_t)v23, &qword_100090158);
    sub_100044DC4((uint64_t)v23, (uint64_t)v15, &qword_100090158);
    char v16 = -125;
    sub_100078510();
    v15[0] = -124;
    sub_100078520();
    sub_100044DC4(v3 + 1912, (uint64_t)v22, &qword_100090158);
    sub_100044DC4((uint64_t)v22, (uint64_t)v15, &qword_100090158);
    char v16 = -123;
    sub_100078510();
    v15[0] = -122;
    sub_100078530();
    sub_100044DC4(v3 + 1944, (uint64_t)v21, &qword_100090158);
    sub_100044DC4((uint64_t)v21, (uint64_t)v15, &qword_100090158);
    char v16 = -121;
    sub_100078510();
    v15[0] = -120;
    sub_1000784C0();
    v15[0] = -119;
    sub_1000784F0();
    v15[0] = -118;
    sub_1000784F0();
    v15[0] = -117;
    sub_100078520();
    v15[0] = -116;
    sub_1000784F0();
    sub_100044DC4(v3 + 2040, (uint64_t)&v20, &qword_100090AD8);
    sub_100044DC4((uint64_t)&v20, (uint64_t)v15, &qword_100090AD8);
    char v16 = -115;
    sub_100002214(&qword_100090AE0);
    sub_10005F004(&qword_100090AE8, &qword_100090AE0, (void (*)(void))sub_100044D1C);
    sub_100078510();
    sub_100044DC4(v3 + 2048, (uint64_t)&v19, &qword_100090AF8);
    sub_100044DC4((uint64_t)&v19, (uint64_t)v15, &qword_100090AF8);
    char v16 = -114;
    sub_100002214(&qword_100090B00);
    sub_10005F004(&qword_100090B08, &qword_100090B00, (void (*)(void))sub_100044D70);
    sub_100078510();
    sub_100044DC4(v3 + 2056, (uint64_t)v18, &qword_100090158);
    sub_100044DC4((uint64_t)v18, (uint64_t)v15, &qword_100090158);
    char v16 = -113;
    sub_100078510();
    v15[0] = -112;
    sub_1000784F0();
    sub_100044DC4(v3 + 2088, (uint64_t)&v17, &qword_100090B18);
    sub_100044DC4((uint64_t)&v17, (uint64_t)v15, &qword_100090B18);
    char v16 = -111;
    sub_100002214(&qword_100090B20);
    sub_10005F004(&qword_100090B28, &qword_100090B20, (void (*)(void))sub_100044E28);
    sub_100078510();
    v15[0] = -110;
    sub_1000784F0();
    v15[0] = -109;
    sub_1000784F0();
    v15[0] = -108;
    sub_1000784D0();
    v15[0] = -107;
    sub_1000784D0();
    v15[0] = -106;
    sub_1000784C0();
    v15[0] = -105;
    sub_1000784D0();
    v15[0] = -104;
    sub_1000784F0();
    v15[0] = -103;
    sub_1000784F0();
    v15[0] = -102;
    sub_1000784D0();
    v15[0] = -101;
    sub_1000784D0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100044B30()
{
  unint64_t result = qword_100090A58;
  if (!qword_100090A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090A58);
  }
  return result;
}

unint64_t sub_100044B84()
{
  unint64_t result = qword_100090A68;
  if (!qword_100090A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090A68);
  }
  return result;
}

uint64_t sub_100044BD8(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_100044C20()
{
  unint64_t result = qword_100090AA0;
  if (!qword_100090AA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090AA0);
  }
  return result;
}

unint64_t sub_100044C74()
{
  unint64_t result = qword_100090AB0;
  if (!qword_100090AB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090AB0);
  }
  return result;
}

unint64_t sub_100044CC8()
{
  unint64_t result = qword_100090AD0;
  if (!qword_100090AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090AD0);
  }
  return result;
}

unint64_t sub_100044D1C()
{
  unint64_t result = qword_100090AF0;
  if (!qword_100090AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090AF0);
  }
  return result;
}

unint64_t sub_100044D70()
{
  unint64_t result = qword_100090B10;
  if (!qword_100090B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090B10);
  }
  return result;
}

uint64_t sub_100044DC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100002214(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_100044E28()
{
  unint64_t result = qword_100090B30;
  if (!qword_100090B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090B30);
  }
  return result;
}

void *IDSMadridProtocolPayload.init(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_10004819C(a1);
  if (!v2) {
    return memcpy(a2, __src, 0x883uLL);
  }
  return result;
}

uint64_t sub_100044ED0(char a1)
{
  uint64_t result = 99;
  switch(a1)
  {
    case 1:
      return 25443;
    case 2:
      return 118;
    case 3:
      return 80;
    case 4:
      return 78;
    case 5:
      return 20582;
    case 6:
      return 20577;
    case 7:
      return 27984;
    case 8:
      return 105;
    case 9:
      return 85;
    case 10:
      return 18801;
    case 11:
      return 68;
    case 12:
      return 25412;
    case 13:
      return 7758947;
    case 14:
      return 7496803;
    case 15:
      return 29294;
    case 16:
      return 25703;
    case 17:
      return 21619;
    case 18:
      return 21608;
    case 19:
      return 20596;
    case 20:
      return 24949;
    case 21:
      return 20333;
    case 22:
      return 21357;
    case 23:
      return 19565;
    case 24:
      return 16749;
    case 25:
      return 21101;
    case 26:
      return 21869;
    case 27:
      return 7102820;
    case 28:
      return 7107940;
    case 29:
      return 21092;
    case 30:
      return 21109;
    case 31:
      return 22637;
    case 32:
      return 22115;
    case 33:
      return 18531;
    case 34:
      return 16995;
    case 35:
      return 21091;
    case 36:
      return 21613;
    case 37:
      return 116;
    case 38:
      return 20595;
    case 39:
      return 18803;
    case 40:
      return 20589;
    case 41:
      return 115;
    case 42:
      return 101;
    case 43:
      return 25967;
    case 44:
      return 21094;
    case 45:
      return 21862;
    case 46:
      return 19814;
    case 47:
      return 5457510;
    case 48:
      return 21350;
    case 49:
      return 5067366;
    case 50:
      return 4543590;
    case 51:
      return 69;
    case 52:
      return 72;
    case 53:
      return 6910576;
    case 54:
      return 7037793;
    case 55:
      return 7107684;
    case 56:
      uint64_t v3 = 3081;
      uint64_t v4 = 7102820;
      goto LABEL_136;
    case 57:
      return 7758707;
    case 58:
      return 22629;
    case 59:
      return 28792;
    case 60:
      return 0x6E7265746E692D78;
    case 61:
      return 0x6E6967676F6C2D78;
    case 62:
      return 0x65636172742D78;
    case 63:
      return 28007;
    case 64:
      return 21603;
    case 65:
      return 21345;
    case 66:
      return 18802;
    case 67:
      return 26994;
    case 68:
      return 0xD000000000000019;
    case 69:
      return 0x6172742D33622D78;
    case 70:
      return 26739;
    case 71:
      return 29537;
    case 72:
      return 17512;
    case 73:
      return 18792;
    case 74:
      return 25458;
    case 75:
      return 0x6F2D747365742D78;
    case 76:
      return 7234406;
    case 77:
      return 6515814;
    case 78:
      return 7107189;
    case 79:
      return 6517350;
    case 80:
      return 22135;
    case 81:
      return 117;
    case 82:
      return 104;
    case 83:
      return 98;
    case 84:
      return 30050;
    case 85:
      return 27490;
    case 86:
      return 29544;
    case 87:
      return 29288;
    case 88:
      return 27491;
    case 89:
      return 0x6D69737365702D78;
    case 90:
      return 18542;
    case 91:
      return 79;
    case 92:
      return 1769108835;
    case 93:
      return 7631731;
    case 94:
      return 18545;
    case 95:
      return 1885613432;
    case 96:
      return 3240053;
    case 97:
      return 0xD000000000000010;
    case 98:
      return 7697521;
    case 99:
      return 17253;
    case 100:
      return 25453;
    case 101:
      return 26979;
    case 102:
      return 30321;
    case 103:
      return 6906225;
    case 104:
      return 29297;
    case 105:
      return 1667592305;
    case 106:
      uint64_t v5 = 1952538993;
      goto LABEL_109;
    case 107:
      uint64_t v5 = 1885954417;
LABEL_109:
      uint64_t result = v5 + 3840;
      break;
    case 108:
      uint64_t result = 7630961;
      break;
    case 109:
      uint64_t result = 1952538993;
      break;
    case 110:
      uint64_t result = 1885954417;
      break;
    case 111:
      uint64_t result = 0x6374617371;
      break;
    case 112:
      uint64_t result = 0x7374617371;
      break;
    case 113:
      uint64_t result = 1919709297;
      break;
    case 114:
      uint64_t result = 1852600433;
      break;
    case 115:
      uint64_t result = 1668051057;
      break;
    case 116:
      uint64_t result = 1936486513;
      break;
    case 117:
      uint64_t result = 1684828273;
      break;
    case 118:
      uint64_t result = 7564913;
      break;
    case 119:
      uint64_t result = 7627121;
      break;
    case 120:
      uint64_t result = 1935960433;
      break;
    case 121:
      uint64_t result = 1919971953;
      break;
    case 122:
      uint64_t result = 1936945777;
      break;
    case 123:
      uint64_t result = 1684629361;
      break;
    case 124:
      uint64_t result = 1668114289;
      break;
    case 125:
      uint64_t result = 6383985;
      break;
    case 126:
      uint64_t result = 1885958769;
      break;
    case 127:
      uint64_t result = 0x3670697271;
      break;
    case -128:
      uint64_t result = 7369329;
      break;
    case -127:
      uint64_t result = 1953722993;
      break;
    case -126:
      uint64_t result = 1802728049;
      break;
    case -125:
      uint64_t result = 1769173617;
      break;
    case -124:
      uint64_t result = 25969;
      break;
    case -123:
      uint64_t v3 = 257;
      uint64_t v4 = 6910576;
LABEL_136:
      uint64_t result = v4 | v3;
      break;
    case -122:
      uint64_t result = 6910577;
      break;
    case -121:
      uint64_t result = 1987539825;
      break;
    case -120:
      uint64_t result = 1986163313;
      break;
    case -119:
      uint64_t result = 0x7070687271;
      break;
    case -118:
      uint64_t result = 1886415217;
      break;
    case -117:
      uint64_t result = 1952543601;
      break;
    case -116:
      uint64_t result = 7565937;
      break;
    case -115:
      uint64_t result = 7102833;
      break;
    case -114:
      uint64_t result = 0x7674617371;
      break;
    case -113:
      uint64_t result = 1885696625;
      break;
    case -112:
      uint64_t result = 0x7473617271;
      break;
    case -111:
      uint64_t result = 1634496625;
      break;
    case -110:
      uint64_t result = 6514033;
      break;
    case -109:
      uint64_t result = 17263;
      break;
    case -108:
      uint64_t result = 17001;
      break;
    case -107:
      uint64_t result = 16759;
      break;
    case -106:
      uint64_t result = 17509;
      break;
    case -105:
      uint64_t result = 21093;
      break;
    case -104:
      uint64_t result = 7496807;
      break;
    case -103:
      uint64_t result = 28019;
      break;
    case -102:
      uint64_t result = 7697512;
      break;
    case -101:
      uint64_t result = 0xD000000000000011;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100045A70(void *a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  return IDSMadridProtocolPayload.encode(to:)(a1);
}

uint64_t sub_100045AC4(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = sub_100044ED0(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100044ED0(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1000785B0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100045B50()
{
  char v1 = *v0;
  sub_100078630();
  sub_100044ED0(v1);
  sub_1000781D0();
  swift_bridgeObjectRelease();
  return sub_100078650();
}

uint64_t sub_100045BB4()
{
  sub_100044ED0(*v0);
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100045C08()
{
  char v1 = *v0;
  sub_100078630();
  sub_100044ED0(v1);
  sub_1000781D0();
  swift_bridgeObjectRelease();
  return sub_100078650();
}

uint64_t sub_100045C68@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100056508();
  *a1 = result;
  return result;
}

uint64_t sub_100045C98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100044ED0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100045CC4()
{
  return sub_100044ED0(*v0);
}

uint64_t sub_100045CCC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100056508();
  *a1 = result;
  return result;
}

void sub_100045CF4(unsigned char *a1@<X8>)
{
  *a1 = -100;
}

uint64_t sub_100045D00(uint64_t a1)
{
  unint64_t v2 = sub_100044B30();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100045D3C(uint64_t a1)
{
  unint64_t v2 = sub_100044B30();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100045D78(char *a1, char *a2)
{
  return sub_100069F60(*a1, *a2);
}

Swift::Int sub_100045D84()
{
  return sub_10006AC24();
}

uint64_t sub_100045D8C()
{
  return sub_10006B07C();
}

Swift::Int sub_100045D94()
{
  return sub_10006B3E8();
}

uint64_t sub_100045D9C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100056B8C(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_100045DCC(uint64_t a1@<X8>)
{
  uint64_t v2 = 21345;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 26994;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0xD000000000000019;
      *(void *)(a1 + 8) = 0x8000000100079700;
      break;
    case 3:
      strcpy((char *)a1, "x-b3-traceid");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 4:
      *(void *)a1 = 26739;
      *(void *)(a1 + 8) = 0xE200000000000000;
      break;
    case 5:
      *(void *)a1 = 29537;
      *(void *)(a1 + 8) = 0xE200000000000000;
      break;
    default:
LABEL_3:
      *(void *)a1 = v2;
      *(void *)(a1 + 8) = 0xE200000000000000;
      break;
  }
}

unint64_t sub_100045E78()
{
  unint64_t result = 21345;
  switch(*v0)
  {
    case 1:
      unint64_t result = 26994;
      break;
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0x6172742D33622D78;
      break;
    case 4:
      unint64_t result = 26739;
      break;
    case 5:
      unint64_t result = 29537;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100045F10@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100056B8C(a1, a2);
  *a3 = result;
  return result;
}

void sub_100045F38(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_100045F44(uint64_t a1)
{
  unint64_t v2 = sub_1000564B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100045F80(uint64_t a1)
{
  unint64_t v2 = sub_1000564B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSMadridProtocolHttpHeaders.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100002214(&qword_100090B38);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000029D8(a1, a1[3]);
  sub_1000564B4();
  sub_1000786A0();
  v8[15] = 0;
  sub_1000784C0();
  if (!v1)
  {
    v8[14] = 1;
    sub_1000784C0();
    v8[13] = 2;
    sub_1000784C0();
    v8[12] = 3;
    sub_1000784C0();
    v8[11] = 4;
    sub_1000784C0();
    v8[10] = 5;
    sub_1000784C0();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

double IDSMadridProtocolHttpHeaders.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100056BD8(a1, (uint64_t *)v8);
  if (!v2)
  {
    long long v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    long long v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    double result = *(double *)v8;
    long long v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_100046208(void *a1)
{
  return IDSMadridProtocolHttpHeaders.encode(to:)(a1);
}

Swift::Int sub_100046220()
{
  return sub_100078650();
}

uint64_t sub_100046268()
{
  return sub_1000781D0();
}

Swift::Int sub_100046274()
{
  return sub_100078650();
}

uint64_t sub_1000462B8@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v7._countAndFlagsBits = *a1;
  uint64_t v3 = (void *)a1[1];
  v4._rawValue = &off_10008B1A0;
  v7._object = v3;
  Swift::Int v5 = sub_100078390(v4, v7);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

void sub_10004630C(void *a1@<X8>)
{
  *a1 = 99;
  a1[1] = 0xE100000000000000;
}

uint64_t sub_10004631C()
{
  return 99;
}

uint64_t sub_100046328@<X0>(uint64_t a1@<X0>, void *a2@<X1>, BOOL *a3@<X8>)
{
  v8._countAndFlagsBits = a1;
  v5._rawValue = &off_10008B1D8;
  v8._object = a2;
  Swift::Int v6 = sub_100078390(v5, v8);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v6 != 0;
  return result;
}

uint64_t sub_100046380(uint64_t a1)
{
  unint64_t v2 = sub_100057064();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000463BC(uint64_t a1)
{
  unint64_t v2 = sub_100057064();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSMadridProtocolDeliveryContext.encode(to:)(void *a1)
{
  uint64_t v2 = sub_100002214(&qword_100090B48);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  Swift::OpaquePointer v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_100057064();
  sub_1000786A0();
  sub_1000784F0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t IDSMadridProtocolDeliveryContext.init(from:)(void *a1)
{
  uint64_t v3 = sub_100002214(&qword_100090B58);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::Int v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t)sub_1000029D8(a1, a1[3]);
  sub_100057064();
  sub_100078690();
  if (!v1)
  {
    uint64_t v7 = sub_1000783F0();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100002E34((uint64_t)a1);
  return v7;
}

uint64_t sub_1000466A4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002214(&qword_100090B58);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_100057064();
  sub_100078690();
  if (v2) {
    return sub_100002E34((uint64_t)a1);
  }
  uint64_t v9 = sub_1000783F0();
  char v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = sub_100002E34((uint64_t)a1);
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v11 & 1;
  return result;
}

uint64_t sub_100046824(void *a1)
{
  uint64_t v2 = sub_100002214(&qword_100090B48);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_100057064();
  sub_1000786A0();
  sub_1000784F0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100046960(char *a1, char *a2)
{
  return sub_10006A63C(*a1, *a2);
}

Swift::Int sub_10004696C()
{
  return sub_100078650();
}

uint64_t sub_1000469C8()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100046A08()
{
  return sub_100078650();
}

uint64_t sub_100046A60@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_10008B210;
  uint64_t result = sub_100057428(*(void *)a1, *(void **)(a1 + 8), v3);
  *a2 = result;
  return result;
}

void sub_100046A98(void *a1@<X8>)
{
  *a1 = *(void *)&aQpln_0[8 * *v1];
  a1[1] = 0xE400000000000000;
}

uint64_t sub_100046AB4()
{
  return *(void *)&aQpln_0[8 * *v0];
}

uint64_t sub_100046ACC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  v4._rawValue = &off_10008B210;
  uint64_t result = sub_100057428(a1, a2, v4);
  *a3 = result;
  return result;
}

uint64_t sub_100046AFC(uint64_t a1)
{
  unint64_t v2 = sub_1000570B8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100046B38(uint64_t a1)
{
  unint64_t v2 = sub_1000570B8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSQuickRelayPluginRequest.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100002214(&qword_100090B60);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000029D8(a1, a1[3]);
  sub_1000570B8();
  sub_1000786A0();
  v8[15] = 0;
  sub_1000784C0();
  if (!v1)
  {
    v8[14] = 1;
    sub_1000784C0();
    v8[13] = 2;
    sub_1000784F0();
    v8[12] = 3;
    sub_1000784D0();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

double IDSQuickRelayPluginRequest.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10005710C(a1, (uint64_t)&v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 10);
    *(_OWORD *)((char *)a2 + 26) = *(_OWORD *)((char *)v7 + 10);
  }
  return result;
}

uint64_t sub_100046D6C(void *a1)
{
  return IDSQuickRelayPluginRequest.encode(to:)(a1);
}

uint64_t sub_100046D84(unsigned __int8 *a1, char *a2)
{
  return sub_100069E30(*a1, *a2);
}

Swift::Int sub_100046D90()
{
  return sub_100078650();
}

uint64_t sub_100046E48()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100046EDC()
{
  return sub_100078650();
}

uint64_t sub_100046F90@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  v3._rawValue = &off_10008B290;
  uint64_t result = sub_100057428(*(void *)a1, *(void **)(a1 + 8), v3);
  *a2 = result;
  return result;
}

void sub_100046FC8(uint64_t *a1@<X8>)
{
  uint64_t v2 = 6910577;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 7565937;
      goto LABEL_3;
    case 2:
      *a1 = 116;
      a1[1] = 0xE100000000000000;
      break;
    case 3:
      *a1 = 20596;
      a1[1] = 0xE200000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE300000000000000;
      break;
  }
}

uint64_t sub_100047034()
{
  uint64_t result = 6910577;
  switch(*v0)
  {
    case 1:
      uint64_t result = 7565937;
      break;
    case 2:
      uint64_t result = 116;
      break;
    case 3:
      uint64_t result = 20596;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100047094@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  v4._rawValue = &off_10008B290;
  uint64_t result = sub_100057428(a1, a2, v4);
  *a3 = result;
  return result;
}

uint64_t sub_1000470C4(uint64_t a1)
{
  unint64_t v2 = sub_1000573D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100047100(uint64_t a1)
{
  unint64_t v2 = sub_1000573D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSQuickRelayAllocationStatus.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002214(&qword_100090B70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000029D8(a1, a1[3]);
  sub_1000573D4();
  sub_1000786A0();
  v11[0] = 0;
  sub_100078530();
  if (!v2)
  {
    v11[0] = 1;
    sub_1000784F0();
    sub_100044DC4(v3 + 32, (uint64_t)v12, &qword_100090158);
    sub_100044DC4((uint64_t)v12, (uint64_t)v11, &qword_100090158);
    v10[15] = 2;
    sub_100003DA8();
    sub_100078510();
    v11[0] = 3;
    sub_1000784C0();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

double IDSQuickRelayAllocationStatus.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100057470(a1, (uint64_t)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_100047370(void *a1)
{
  return IDSQuickRelayAllocationStatus.encode(to:)(a1);
}

uint64_t sub_1000473AC(unsigned __int8 *a1, char *a2)
{
  return sub_10006A354(*a1, *a2);
}

Swift::Int sub_1000473B8()
{
  return sub_10006B1D4();
}

uint64_t sub_1000473C4()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100047498()
{
  return sub_10006B1D4();
}

uint64_t sub_1000474A0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100057788(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_1000474D0(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE400000000000000;
  uint64_t v3 = 1885958769;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x3670697271;
      goto LABEL_3;
    case 2:
      *a1 = 7369329;
      a1[1] = 0xE300000000000000;
      break;
    case 3:
      *a1 = 1802728049;
      a1[1] = 0xE400000000000000;
      break;
    case 4:
      *a1 = 1769173617;
      a1[1] = 0xE400000000000000;
      break;
    case 5:
      *a1 = 1953722993;
      a1[1] = 0xE400000000000000;
      break;
    case 6:
      *a1 = 1919971953;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_100047588()
{
  uint64_t result = 1885958769;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x3670697271;
      break;
    case 2:
      uint64_t result = 7369329;
      break;
    case 3:
      uint64_t result = 1802728049;
      break;
    case 4:
      uint64_t result = 1769173617;
      break;
    case 5:
      uint64_t result = 1953722993;
      break;
    case 6:
      uint64_t result = 1919971953;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100047628@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100057788(a1, a2);
  *a3 = result;
  return result;
}

void sub_100047650(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_10004765C(uint64_t a1)
{
  unint64_t v2 = sub_100057734();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100047698(uint64_t a1)
{
  unint64_t v2 = sub_100057734();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSQuickRelaySelfAllocToken.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002214(&qword_100090B80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_100057734();
  sub_1000786A0();
  sub_100044DC4(v3, (uint64_t)v17, &qword_100090158);
  sub_100044DC4((uint64_t)v17, (uint64_t)v12, &qword_100090158);
  char v11 = 0;
  sub_100003DA8();
  sub_100078510();
  if (!v2)
  {
    sub_100044DC4(v3 + 16, (uint64_t)v16, &qword_100090158);
    sub_100044DC4((uint64_t)v16, (uint64_t)v12, &qword_100090158);
    char v11 = 1;
    sub_100078510();
    v12[0] = 2;
    sub_1000784F0();
    sub_100044DC4(v3 + 48, (uint64_t)v15, &qword_100090158);
    sub_100044DC4((uint64_t)v15, (uint64_t)v12, &qword_100090158);
    char v11 = 3;
    sub_100078510();
    sub_100044DC4(v3 + 64, (uint64_t)v14, &qword_100090158);
    sub_100044DC4((uint64_t)v14, (uint64_t)v12, &qword_100090158);
    char v11 = 4;
    sub_100078510();
    sub_100044DC4(v3 + 80, (uint64_t)v13, &qword_100090158);
    sub_100044DC4((uint64_t)v13, (uint64_t)v12, &qword_100090158);
    char v11 = 5;
    sub_100078510();
    v12[0] = 6;
    sub_1000784F0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 IDSQuickRelaySelfAllocToken.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1000577D4(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v8[0];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 89) = *(_OWORD *)((char *)v8 + 9);
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_100047A64(void *a1)
{
  return IDSQuickRelaySelfAllocToken.encode(to:)(a1);
}

uint64_t sub_100047AB0(unsigned __int8 *a1, char *a2)
{
  return sub_100069CCC(*a1, *a2);
}

Swift::Int sub_100047ABC()
{
  return sub_100078650();
}

uint64_t sub_100047B80()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100047C2C()
{
  return sub_100078650();
}

uint64_t sub_100047CEC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100057ED4(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_100047D1C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1852600433;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 1936486513;
      goto LABEL_3;
    case 2:
      *a1 = 6910577;
      a1[1] = 0xE300000000000000;
      break;
    case 3:
      *a1 = 1802728049;
      a1[1] = 0xE400000000000000;
      break;
    case 4:
      *a1 = 1953722993;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v2;
      a1[1] = 0xE400000000000000;
      break;
  }
}

uint64_t sub_100047DA4()
{
  uint64_t result = 1852600433;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1936486513;
      break;
    case 2:
      uint64_t result = 6910577;
      break;
    case 3:
      uint64_t result = 1802728049;
      break;
    case 4:
      uint64_t result = 1953722993;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100047E1C@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100057ED4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100047E44(uint64_t a1)
{
  unint64_t v2 = sub_100057E80();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100047E80(uint64_t a1)
{
  unint64_t v2 = sub_100057E80();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSQuickRelayPluginAllocation.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002214(&qword_100090B90);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_100057E80();
  sub_1000786A0();
  v12[0] = 0;
  sub_1000784C0();
  if (!v2)
  {
    v12[0] = 1;
    sub_1000784F0();
    v12[0] = 2;
    sub_100078530();
    sub_100044DC4(v3 + 48, (uint64_t)v14, &qword_100090158);
    sub_100044DC4((uint64_t)v14, (uint64_t)v12, &qword_100090158);
    char v11 = 3;
    sub_100003DA8();
    sub_100078510();
    sub_100044DC4(v3 + 64, (uint64_t)v13, &qword_100090158);
    sub_100044DC4((uint64_t)v13, (uint64_t)v12, &qword_100090158);
    char v11 = 4;
    sub_100078510();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 IDSQuickRelayPluginAllocation.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100057F20(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_100048158(void *a1)
{
  return IDSQuickRelayPluginAllocation.encode(to:)(a1);
}

void *sub_10004819C(uint64_t a1)
{
  uint64_t v2 = (void *)__chkstk_darwin(a1);
  Swift::OpaquePointer v4 = v3;
  uint64_t v5 = sub_100002214(&qword_100090C70);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v246 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v2[3];
  v540 = v2;
  sub_1000029D8(v2, v9);
  sub_100044B30();
  sub_100078690();
  uint64_t v1022 = v1;
  if (v1)
  {
    LODWORD(v539) = 0;
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    goto LABEL_4;
  }
  LOBYTE(v542) = 0;
  uint64_t v10 = sub_100078470();
  LOBYTE(v542) = 1;
  uint64_t v11 = sub_1000783F0();
  v538 = v4;
  uint64_t v539 = v11;
  char v1021 = v23 & 1;
  LOBYTE(v542) = 2;
  int v24 = v23;
  uint64_t v25 = sub_1000783F0();
  LODWORD(v536) = v24;
  uint64_t v537 = v25;
  char v1019 = v26 & 1;
  LOBYTE(v541[0]) = 3;
  int v27 = v26;
  unint64_t v28 = sub_100004864();
  sub_100078410();
  LODWORD(v534) = v27;
  uint64_t v535 = v10;
  uint64_t v29 = v542;
  unint64_t v30 = v28;
  uint64_t v31 = v543;
  LOBYTE(v541[0]) = 4;
  sub_1000048B8(v542, v543);
  sub_100078410();
  unint64_t v470 = v31;
  uint64_t v469 = v29;
  uint64_t v32 = v30;
  unint64_t v33 = v543;
  LOBYTE(v541[0]) = 5;
  uint64_t v468 = v542;
  sub_1000048B8(v542, v543);
  uint64_t v533 = v32;
  sub_100078410();
  unint64_t v467 = v33;
  uint64_t v34 = v542;
  uint64_t v35 = v543;
  LOBYTE(v541[0]) = 6;
  sub_1000048B8(v542, v543);
  sub_100078410();
  unint64_t v466 = v35;
  uint64_t v465 = v34;
  uint64_t v36 = v542;
  unint64_t v37 = v543;
  LOBYTE(v541[0]) = 7;
  sub_1000048B8(v542, v543);
  sub_100078410();
  uint64_t v1022 = 0;
  unint64_t v464 = v37;
  uint64_t v463 = v36;
  uint64_t v38 = v542;
  unint64_t v39 = v543;
  LOBYTE(v542) = 8;
  uint64_t v462 = v38;
  sub_1000048B8(v38, v543);
  uint64_t v40 = v1022;
  uint64_t v532 = sub_1000783C0();
  uint64_t v1022 = v40;
  unint64_t v461 = v39;
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v462, v39);
    sub_1000048CC(v36, v37);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v33);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 248;
    goto LABEL_4;
  }
  LOBYTE(v541[0]) = 9;
  uint64_t v460 = v41;
  swift_bridgeObjectRetain();
  uint64_t v42 = v1022;
  sub_100078410();
  uint64_t v1022 = v42;
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 504;
    goto LABEL_4;
  }
  uint64_t v43 = v542;
  LOBYTE(v542) = 10;
  uint64_t v458 = v43;
  unint64_t v459 = v543;
  sub_1000048B8(v43, v543);
  uint64_t v44 = v1022;
  uint64_t v45 = sub_1000783C0();
  uint64_t v457 = v46;
  uint64_t v1022 = v44;
  if (v44)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 1016;
    goto LABEL_4;
  }
  uint64_t v47 = v45;
  LOBYTE(v542) = 11;
  swift_bridgeObjectRetain();
  uint64_t v48 = v1022;
  LODWORD(v531) = sub_1000783D0();
  uint64_t v1022 = v48;
  if (v48 || (LOBYTE(v541[0]) = 12, sub_10005ED20(), uint64_t v49 = v1022, sub_100078410(), (v1022 = v49) != 0))
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 2040;
    goto LABEL_4;
  }
  uint64_t v529 = v542;
  LODWORD(v528) = v543;
  LODWORD(v526) = BYTE1(v543);
  char v1016 = BYTE1(v543);
  LOBYTE(v542) = 13;
  uint64_t v527 = sub_1000783F0();
  LODWORD(v530) = v50;
  uint64_t v1022 = 0;
  char v1013 = v50 & 1;
  LOBYTE(v541[0]) = 14;
  sub_100078410();
  uint64_t v1022 = 0;
  uint64_t v51 = v542;
  LOBYTE(v542) = 15;
  uint64_t v455 = v51;
  unint64_t v456 = v543;
  sub_1000048B8(v51, v543);
  uint64_t v52 = v1022;
  int v53 = sub_1000783D0();
  LODWORD(v525) = v53;
  uint64_t v1022 = v52;
  if (v52)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 18424;
    goto LABEL_4;
  }
  LOBYTE(v542) = 16;
  LODWORD(v524) = sub_1000783D0();
  uint64_t v1022 = 0;
  LOBYTE(v541[0]) = 17;
  sub_100078410();
  uint64_t v1022 = 0;
  LOBYTE(v541[0]) = 18;
  uint64_t v453 = v542;
  unint64_t v454 = v543;
  sub_1000048B8(v542, v543);
  uint64_t v54 = v1022;
  sub_100078410();
  uint64_t v1022 = v54;
  if (v54)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 149496;
    goto LABEL_4;
  }
  uint64_t v55 = v542;
  LOBYTE(v542) = 19;
  uint64_t v451 = v55;
  unint64_t v452 = v543;
  sub_1000048B8(v55, v543);
  uint64_t v56 = v1022;
  uint64_t v523 = sub_1000783C0();
  uint64_t v450 = v57;
  uint64_t v1022 = v56;
  if (v56)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 411640;
    goto LABEL_4;
  }
  LOBYTE(v542) = 20;
  swift_bridgeObjectRetain();
  uint64_t v58 = v1022;
  uint64_t v522 = sub_1000783C0();
  uint64_t v449 = v59;
  uint64_t v1022 = v58;
  if (v58)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 935928;
    goto LABEL_4;
  }
  LOBYTE(v542) = 21;
  swift_bridgeObjectRetain();
  uint64_t v60 = v1022;
  uint64_t v521 = sub_1000783C0();
  uint64_t v448 = v61;
  uint64_t v1022 = v60;
  if (v60)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 1984504;
    goto LABEL_4;
  }
  LOBYTE(v541[0]) = 22;
  swift_bridgeObjectRetain();
  uint64_t v62 = v1022;
  sub_100078410();
  uint64_t v1022 = v62;
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 4081656;
    goto LABEL_4;
  }
  uint64_t v63 = v542;
  LOBYTE(v542) = 23;
  uint64_t v446 = v63;
  unint64_t v447 = v543;
  sub_1000048B8(v63, v543);
  uint64_t v64 = v1022;
  uint64_t v519 = sub_100078420();
  LODWORD(v520) = v65;
  uint64_t v1022 = v64;
  if (v64)
  {
    unint64_t v12 = 8275960;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    goto LABEL_4;
  }
  char v1009 = v520 & 1;
  LOBYTE(v542) = 24;
  uint64_t v518 = sub_1000783C0();
  uint64_t v445 = v66;
  uint64_t v1022 = 0;
  LOBYTE(v542) = 25;
  swift_bridgeObjectRetain();
  uint64_t v67 = v1022;
  uint64_t v517 = sub_1000783C0();
  uint64_t v444 = v68;
  uint64_t v1022 = v67;
  if (v67)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 25053176;
    goto LABEL_4;
  }
  LOBYTE(v542) = 26;
  swift_bridgeObjectRetain();
  uint64_t v69 = v1022;
  uint64_t v516 = sub_1000783C0();
  uint64_t v443 = v70;
  uint64_t v1022 = v69;
  if (v69)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 58607608;
    goto LABEL_4;
  }
  sub_100002214(&qword_100090A78);
  LOBYTE(v541[0]) = 27;
  sub_10005ED74(&qword_100090C80);
  swift_bridgeObjectRetain();
  uint64_t v71 = v1022;
  sub_100078410();
  uint64_t v1022 = v71;
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 125716472;
    goto LABEL_4;
  }
  LOBYTE(v541[0]) = 28;
  uint64_t v442 = v542;
  swift_bridgeObjectRetain();
  uint64_t v72 = v1022;
  sub_100078410();
  uint64_t v1022 = v72;
  if (v72)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 259934200;
    goto LABEL_4;
  }
  uint64_t v73 = v542;
  LOBYTE(v542) = 29;
  uint64_t v441 = v73;
  swift_bridgeObjectRetain();
  uint64_t v74 = v1022;
  uint64_t v515 = sub_1000783C0();
  uint64_t v440 = v75;
  uint64_t v1022 = v74;
  if (v74)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 528369656;
    goto LABEL_4;
  }
  LOBYTE(v542) = 30;
  swift_bridgeObjectRetain();
  uint64_t v76 = v1022;
  uint64_t v514 = sub_1000783C0();
  uint64_t v439 = v77;
  uint64_t v1022 = v76;
  if (v76)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 1065240568;
    goto LABEL_4;
  }
  LOBYTE(v542) = 31;
  swift_bridgeObjectRetain();
  uint64_t v78 = v1022;
  uint64_t v512 = sub_100078420();
  LODWORD(v513) = v79;
  uint64_t v1022 = v78;
  if (v78)
  {
    unint64_t v12 = 2138982392;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    goto LABEL_4;
  }
  char v1007 = v513 & 1;
  LOBYTE(v542) = 32;
  uint64_t v510 = sub_1000783F0();
  LODWORD(v511) = v80;
  uint64_t v1022 = 0;
  char v1005 = v80 & 1;
  LOBYTE(v542) = 33;
  uint64_t v509 = sub_1000783C0();
  uint64_t v438 = v81;
  uint64_t v1022 = 0;
  LOBYTE(v541[0]) = 34;
  swift_bridgeObjectRetain();
  uint64_t v82 = v1022;
  sub_100078410();
  uint64_t v1022 = v82;
  if (v82)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x27F7E47F8;
    goto LABEL_4;
  }
  LOBYTE(v541[0]) = 35;
  uint64_t v436 = v542;
  unint64_t v437 = v543;
  sub_1000048B8(v542, v543);
  uint64_t v83 = v1022;
  sub_100078410();
  uint64_t v1022 = v83;
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x67F7E47F8;
    goto LABEL_4;
  }
  uint64_t v84 = v542;
  LOBYTE(v542) = 36;
  uint64_t v434 = v84;
  unint64_t v435 = v543;
  sub_1000048B8(v84, v543);
  uint64_t v85 = v1022;
  uint64_t v507 = sub_1000783F0();
  LODWORD(v508) = v86;
  uint64_t v1022 = v85;
  if (v85)
  {
    unint64_t v12 = 0xE7F7E47F8;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    goto LABEL_4;
  }
  char v1003 = v508 & 1;
  LOBYTE(v541[0]) = 37;
  sub_100078410();
  uint64_t v1022 = 0;
  uint64_t v87 = v542;
  LOBYTE(v542) = 38;
  uint64_t v432 = v87;
  unint64_t v433 = v543;
  sub_1000048B8(v87, v543);
  uint64_t v88 = v1022;
  uint64_t v506 = sub_1000783C0();
  uint64_t v431 = v89;
  uint64_t v1022 = v88;
  if (v88)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x2E7F7E47F8;
    goto LABEL_4;
  }
  LOBYTE(v542) = 39;
  swift_bridgeObjectRetain();
  uint64_t v90 = v1022;
  uint64_t v505 = sub_1000783C0();
  uint64_t v430 = v91;
  uint64_t v1022 = v90;
  if (v90)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x6E7F7E47F8;
    goto LABEL_4;
  }
  LOBYTE(v542) = 40;
  swift_bridgeObjectRetain();
  uint64_t v92 = v1022;
  uint64_t v504 = sub_1000783C0();
  uint64_t v429 = v93;
  uint64_t v1022 = v92;
  if (v92)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0xEE7F7E47F8;
    goto LABEL_4;
  }
  unint64_t v13 = 0;
  LOBYTE(v542) = 41;
  swift_bridgeObjectRetain();
  uint64_t v94 = v1022;
  uint64_t v502 = sub_1000783F0();
  LODWORD(v503) = v95;
  uint64_t v1022 = v94;
  if (v94)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x1EE7F7E47F8;
    goto LABEL_4;
  }
  char v1001 = v503 & 1;
  LOBYTE(v542) = 42;
  uint64_t v500 = sub_100078420();
  LODWORD(v501) = v96;
  uint64_t v1022 = 0;
  char v999 = v96 & 1;
  LOBYTE(v542) = 43;
  uint64_t v498 = sub_100078420();
  LODWORD(v499) = v97;
  uint64_t v1022 = 0;
  char v997 = v97 & 1;
  LOBYTE(v542) = 44;
  uint64_t v497 = sub_1000783F0();
  LODWORD(v496) = v98;
  uint64_t v1022 = 0;
  char v995 = v98 & 1;
  LOBYTE(v541[0]) = 45;
  sub_100078410();
  uint64_t v1022 = 0;
  uint64_t v99 = v542;
  LOBYTE(v542) = 46;
  uint64_t v427 = v99;
  unint64_t v428 = v543;
  sub_1000048B8(v99, v543);
  uint64_t v100 = v1022;
  uint64_t v495 = sub_1000783C0();
  uint64_t v426 = v101;
  uint64_t v1022 = v100;
  if (v100)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x21EE7F7E47F8;
    goto LABEL_4;
  }
  unint64_t v13 = 0;
  LOBYTE(v542) = 47;
  swift_bridgeObjectRetain();
  uint64_t v102 = v1022;
  uint64_t v494 = sub_1000783F0();
  int v347 = v103;
  uint64_t v1022 = v102;
  if (v102)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x61EE7F7E47F8;
    goto LABEL_4;
  }
  char v993 = v347 & 1;
  LOBYTE(v542) = 48;
  uint64_t v493 = sub_1000783F0();
  int v346 = v104;
  uint64_t v1022 = 0;
  char v991 = v104 & 1;
  LOBYTE(v542) = 49;
  uint64_t v492 = sub_1000783C0();
  uint64_t v425 = v105;
  uint64_t v1022 = 0;
  unint64_t v13 = 0;
  LOBYTE(v542) = 50;
  swift_bridgeObjectRetain();
  uint64_t v106 = v1022;
  uint64_t v491 = sub_100078420();
  int v342 = v107;
  uint64_t v1022 = v106;
  if (v106)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x261EE7F7E47F8;
    goto LABEL_4;
  }
  char v989 = v342 & 1;
  LOBYTE(v542) = 51;
  uint64_t v490 = sub_1000783C0();
  uint64_t v424 = v108;
  uint64_t v1022 = 0;
  unint64_t v13 = 0;
  LOBYTE(v542) = 52;
  swift_bridgeObjectRetain();
  uint64_t v109 = v1022;
  uint64_t v489 = sub_1000783F0();
  int v340 = v110;
  uint64_t v1022 = v109;
  if (v109) {
    goto LABEL_150;
  }
  char v987 = v340 & 1;
  LOBYTE(v542) = 53;
  uint64_t v488 = sub_1000783F0();
  int v338 = v111;
  uint64_t v1022 = 0;
  char v985 = v111 & 1;
  LOBYTE(v542) = 54;
  uint64_t v487 = sub_1000783F0();
  int v336 = v112;
  uint64_t v1022 = 0;
  char v983 = v112 & 1;
  sub_100002214(&qword_100090A90);
  LOBYTE(v541[0]) = 55;
  sub_10005F004(&qword_100090C88, &qword_100090A90, (void (*)(void))sub_10005EDD8);
  uint64_t v113 = v1022;
  sub_100078410();
  uint64_t v1022 = v113;
  if (v113)
  {
LABEL_150:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0xA61EE7F7E47F8;
    goto LABEL_4;
  }
  LOBYTE(v541[0]) = 56;
  uint64_t v423 = v542;
  swift_bridgeObjectRetain();
  uint64_t v114 = v1022;
  sub_100078410();
  uint64_t v1022 = v114;
  if (v114)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x8A61EE7F7E47F8;
    goto LABEL_4;
  }
  unint64_t v13 = 0;
  uint64_t v115 = v542;
  LOBYTE(v542) = 57;
  uint64_t v422 = v115;
  swift_bridgeObjectRetain();
  uint64_t v116 = v1022;
  uint64_t v486 = sub_1000783F0();
  int v335 = v117;
  uint64_t v1022 = v116;
  if (v116)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    goto LABEL_4;
  }
  char v981 = v335 & 1;
  LOBYTE(v542) = 58;
  uint64_t v485 = sub_100078420();
  int v333 = v118;
  uint64_t v1022 = 0;
  char v979 = v118 & 1;
  LOBYTE(v542) = 59;
  uint64_t v484 = sub_1000783F0();
  int v332 = v119;
  uint64_t v1022 = 0;
  char v977 = v119 & 1;
  LOBYTE(v542) = 60;
  LODWORD(v483) = sub_1000783D0();
  uint64_t v1022 = 0;
  LOBYTE(v542) = 61;
  LODWORD(v482) = sub_1000783D0();
  uint64_t v1022 = 0;
  LOBYTE(v542) = 62;
  LODWORD(v481) = sub_1000783D0();
  uint64_t v1022 = 0;
  LOBYTE(v542) = 63;
  LODWORD(v480) = sub_1000783D0();
  uint64_t v1022 = 0;
  LOBYTE(v542) = 64;
  uint64_t v479 = sub_1000783C0();
  uint64_t v421 = v120;
  uint64_t v1022 = 0;
  LOBYTE(v542) = 65;
  swift_bridgeObjectRetain();
  uint64_t v121 = v1022;
  uint64_t v478 = sub_1000783C0();
  uint64_t v420 = v122;
  uint64_t v1022 = v121;
  if (v121)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v13 = 1;
    goto LABEL_4;
  }
  LOBYTE(v541[0]) = 66;
  swift_bridgeObjectRetain();
  uint64_t v123 = v1022;
  sub_100078410();
  uint64_t v1022 = v123;
  if (v123)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v13 = 3;
    goto LABEL_4;
  }
  uint64_t v124 = v542;
  LOBYTE(v542) = 67;
  uint64_t v418 = v124;
  unint64_t v419 = v543;
  sub_1000048B8(v124, v543);
  uint64_t v125 = v1022;
  uint64_t v477 = sub_1000783C0();
  uint64_t v417 = v126;
  uint64_t v1022 = v125;
  if (v125)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v13 = 7;
    goto LABEL_4;
  }
  LOBYTE(v542) = 68;
  swift_bridgeObjectRetain();
  uint64_t v127 = v1022;
  uint64_t v476 = sub_1000783C0();
  uint64_t v416 = v128;
  uint64_t v1022 = v127;
  if (v127)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v13 = 15;
    goto LABEL_4;
  }
  LOBYTE(v542) = 69;
  swift_bridgeObjectRetain();
  uint64_t v129 = v1022;
  uint64_t v475 = sub_1000783C0();
  uint64_t v415 = v130;
  uint64_t v1022 = v129;
  if (v129)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v13 = 31;
    goto LABEL_4;
  }
  LOBYTE(v542) = 70;
  swift_bridgeObjectRetain();
  uint64_t v131 = v1022;
  uint64_t v474 = sub_1000783C0();
  uint64_t v414 = v132;
  uint64_t v1022 = v131;
  if (v131)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v13 = 63;
    goto LABEL_4;
  }
  LOBYTE(v542) = 71;
  swift_bridgeObjectRetain();
  uint64_t v133 = v1022;
  uint64_t v473 = sub_1000783C0();
  uint64_t v413 = v134;
  uint64_t v1022 = v133;
  if (v133)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v13 = 127;
    goto LABEL_4;
  }
  unint64_t v13 = 255;
  LOBYTE(v542) = 72;
  swift_bridgeObjectRetain();
  uint64_t v135 = v1022;
  uint64_t v472 = sub_1000783F0();
  int v322 = v136;
  uint64_t v1022 = v135;
  if (v135)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
LABEL_234:
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v14 = 0;
    goto LABEL_4;
  }
  char v974 = v322 & 1;
  LOBYTE(v542) = 73;
  uint64_t v471 = sub_1000783C0();
  uint64_t v412 = v137;
  uint64_t v1022 = 0;
  unint64_t v13 = 767;
  LOBYTE(v542) = 74;
  swift_bridgeObjectRetain();
  uint64_t v138 = v1022;
  uint64_t v349 = sub_1000783F0();
  int v319 = v139;
  uint64_t v1022 = v138;
  if (v138)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    goto LABEL_234;
  }
  char v972 = v319 & 1;
  LOBYTE(v542) = 75;
  uint64_t v348 = sub_1000783C0();
  uint64_t v411 = v140;
  uint64_t v1022 = 0;
  unint64_t v13 = 2815;
  LOBYTE(v542) = 76;
  swift_bridgeObjectRetain();
  uint64_t v141 = v1022;
  uint64_t v345 = sub_1000783F0();
  int v315 = v142;
  uint64_t v1022 = v141;
  if (v141)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    goto LABEL_234;
  }
  char v970 = v315 & 1;
  LOBYTE(v542) = 77;
  int v344 = sub_1000783D0();
  uint64_t v1022 = 0;
  LOBYTE(v542) = 78;
  uint64_t v343 = sub_1000783C0();
  uint64_t v406 = v143;
  uint64_t v1022 = 0;
  unint64_t v13 = 19199;
  LOBYTE(v542) = 79;
  swift_bridgeObjectRetain();
  uint64_t v144 = v1022;
  uint64_t v341 = sub_1000783F0();
  int v311 = v145;
  uint64_t v1022 = v144;
  if (v144)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    goto LABEL_234;
  }
  char v967 = v311 & 1;
  LOBYTE(v542) = 80;
  uint64_t v339 = sub_1000783F0();
  int v314 = v146;
  uint64_t v1022 = 0;
  char v965 = v146 & 1;
  LOBYTE(v542) = 81;
  uint64_t v337 = sub_1000783C0();
  uint64_t v395 = v147;
  uint64_t v1022 = 0;
  LOBYTE(v541[0]) = 82;
  sub_10005EE2C();
  swift_bridgeObjectRetain();
  uint64_t v148 = v1022;
  sub_100078410();
  uint64_t v1022 = v148;
  if (v148)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v13 = 150271;
    goto LABEL_4;
  }
  LOBYTE(v541[0]) = 83;
  uint64_t v410 = v553;
  unint64_t v409 = v552;
  uint64_t v407 = v551;
  unint64_t v404 = v550;
  uint64_t v391 = v542;
  uint64_t v392 = v543;
  uint64_t v394 = v544;
  uint64_t v396 = v545;
  uint64_t v397 = v546;
  uint64_t v399 = v547;
  unint64_t v401 = v548;
  uint64_t v402 = v549;
  sub_10005EE80(v542, v543);
  uint64_t v149 = v1022;
  sub_100078410();
  uint64_t v1022 = v149;
  if (v149)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v13 = 412415;
    goto LABEL_4;
  }
  uint64_t v150 = v542;
  LOBYTE(v542) = 84;
  uint64_t v405 = v150;
  unint64_t v408 = v543;
  sub_1000048B8(v150, v543);
  uint64_t v151 = v1022;
  uint64_t v334 = sub_1000783C0();
  uint64_t v403 = v152;
  uint64_t v1022 = v151;
  if (v151)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v13 = 936703;
    goto LABEL_4;
  }
  LOBYTE(v541[0]) = 85;
  swift_bridgeObjectRetain();
  uint64_t v153 = v1022;
  sub_100078410();
  uint64_t v1022 = v153;
  if (v153)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v13 = 1985279;
    goto LABEL_4;
  }
  unint64_t v13 = 4082431;
  uint64_t v154 = v542;
  LOBYTE(v542) = 86;
  uint64_t v398 = v154;
  unint64_t v400 = v543;
  sub_1000048B8(v154, v543);
  uint64_t v155 = v1022;
  uint64_t v331 = sub_1000783F0();
  int v307 = v156;
  uint64_t v1022 = v155;
  if (v155)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    goto LABEL_234;
  }
  char v963 = v307 & 1;
  LOBYTE(v542) = 87;
  uint64_t v330 = sub_1000783C0();
  uint64_t v393 = v157;
  uint64_t v1022 = 0;
  unint64_t v13 = 12471039;
  LOBYTE(v542) = 88;
  swift_bridgeObjectRetain();
  uint64_t v158 = v1022;
  int v329 = sub_1000783D0();
  uint64_t v1022 = v158;
  if (v158)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    goto LABEL_234;
  }
  LOBYTE(v542) = 89;
  int v328 = sub_1000783D0();
  uint64_t v1022 = 0;
  LOBYTE(v542) = 90;
  int v327 = sub_1000783D0();
  uint64_t v1022 = 0;
  LOBYTE(v542) = 91;
  uint64_t v326 = sub_1000783F0();
  int v303 = v159;
  uint64_t v1022 = 0;
  char v959 = v159 & 1;
  LOBYTE(v542) = 92;
  uint64_t v325 = sub_1000783C0();
  uint64_t v390 = v160;
  uint64_t v1022 = 0;
  LOBYTE(v541[0]) = 93;
  swift_bridgeObjectRetain();
  uint64_t v161 = v1022;
  sub_100078410();
  uint64_t v1022 = v161;
  if (v161)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v13 = 280906495;
    goto LABEL_4;
  }
  LOBYTE(v541[0]) = 94;
  uint64_t v388 = v542;
  unint64_t v389 = v543;
  sub_1000048B8(v542, v543);
  uint64_t v162 = v1022;
  sub_100078410();
  uint64_t v1022 = v162;
  if (v162)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v388, v389);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v13 = 817777407;
    goto LABEL_4;
  }
  unint64_t v13 = 1891519231;
  uint64_t v163 = v542;
  LOBYTE(v542) = 95;
  uint64_t v386 = v163;
  unint64_t v387 = v543;
  sub_1000048B8(v163, v543);
  uint64_t v164 = v1022;
  uint64_t v324 = sub_1000783F0();
  int v294 = v165;
  uint64_t v1022 = v164;
  if (v164)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v386, v387);
    sub_1000048CC(v388, v389);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    goto LABEL_234;
  }
  char v957 = v294 & 1;
  LOBYTE(v542) = 96;
  int v323 = sub_1000783D0();
  uint64_t v1022 = 0;
  LOBYTE(v542) = 97;
  int v321 = sub_1000783D0();
  uint64_t v1022 = 0;
  LOBYTE(v542) = 98;
  uint64_t v320 = sub_1000783F0();
  int v290 = v166;
  uint64_t v1022 = 0;
  char v954 = v166 & 1;
  LOBYTE(v542) = 99;
  uint64_t v318 = sub_1000783F0();
  int v289 = v167;
  uint64_t v1022 = 0;
  char v952 = v167 & 1;
  LOBYTE(v542) = 100;
  int v317 = sub_1000783D0();
  uint64_t v1022 = 0;
  LOBYTE(v542) = 101;
  uint64_t v316 = sub_1000783F0();
  int v287 = v168;
  uint64_t v1022 = 0;
  char v949 = v168 & 1;
  LOBYTE(v542) = 102;
  uint64_t v313 = sub_1000783F0();
  int v285 = v169;
  uint64_t v1022 = 0;
  char v947 = v169 & 1;
  LOBYTE(v542) = 103;
  uint64_t v312 = sub_1000783C0();
  uint64_t v385 = v170;
  uint64_t v1022 = 0;
  unint64_t v13 = 0x8070BE4AFFLL;
  LOBYTE(v542) = 104;
  swift_bridgeObjectRetain();
  uint64_t v171 = v1022;
  uint64_t v310 = sub_1000783F0();
  int v282 = v172;
  uint64_t v1022 = v171;
  if (v171)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    sub_1000048CC(v386, v387);
    sub_1000048CC(v388, v389);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    goto LABEL_234;
  }
  char v945 = v282 & 1;
  LOBYTE(v542) = 105;
  uint64_t v309 = sub_1000783F0();
  int v280 = v173;
  uint64_t v1022 = 0;
  char v943 = v173 & 1;
  LOBYTE(v541[0]) = 106;
  sub_100078410();
  uint64_t v1022 = 0;
  LOBYTE(v541[0]) = 107;
  uint64_t v384 = v542;
  unint64_t v383 = v543;
  sub_1000048B8(v542, v543);
  uint64_t v174 = v1022;
  sub_100078410();
  uint64_t v1022 = v174;
  if (v174)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v384, v383);
    swift_bridgeObjectRelease();
    sub_1000048CC(v386, v387);
    sub_1000048CC(v388, v389);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v13 = 0x48070BE4AFFLL;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    goto LABEL_4;
  }
  unint64_t v13 = 0xC8070BE4AFFLL;
  uint64_t v175 = v542;
  LOBYTE(v542) = 108;
  uint64_t v382 = v175;
  unint64_t v381 = v543;
  sub_1000048B8(v175, v543);
  uint64_t v176 = v1022;
  uint64_t v308 = sub_1000783F0();
  int v273 = v177;
  uint64_t v1022 = v176;
  if (v176)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v382, v381);
    sub_1000048CC(v384, v383);
    swift_bridgeObjectRelease();
    sub_1000048CC(v386, v387);
    sub_1000048CC(v388, v389);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    goto LABEL_234;
  }
  char v941 = v273 & 1;
  LOBYTE(v541[0]) = 109;
  sub_100078410();
  uint64_t v1022 = 0;
  LOBYTE(v541[0]) = 110;
  uint64_t v380 = v542;
  unint64_t v379 = v543;
  sub_1000048B8(v542, v543);
  uint64_t v178 = v1022;
  sub_100078410();
  uint64_t v1022 = v178;
  if (v178)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v380, v379);
    sub_1000048CC(v382, v381);
    sub_1000048CC(v384, v383);
    swift_bridgeObjectRelease();
    sub_1000048CC(v386, v387);
    sub_1000048CC(v388, v389);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v13 = 0x2C8070BE4AFFLL;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    goto LABEL_4;
  }
  uint64_t v304 = 0;
  unint64_t v13 = 0x6C8070BE4AFFLL;
  uint64_t v179 = v542;
  LOBYTE(v542) = 111;
  uint64_t v378 = v179;
  unint64_t v377 = v543;
  sub_1000048B8(v179, v543);
  uint64_t v180 = v1022;
  uint64_t v306 = sub_1000783F0();
  int v268 = v181;
  uint64_t v1022 = v180;
  if (v180) {
    goto LABEL_215;
  }
  char v939 = v268 & 1;
  LOBYTE(v542) = 112;
  uint64_t v305 = sub_1000783F0();
  int v266 = v182;
  uint64_t v1022 = 0;
  char v937 = v182 & 1;
  sub_100002214(&qword_100090AC0);
  LOBYTE(v541[0]) = 113;
  sub_10005F004(&qword_100090CA0, &qword_100090AC0, (void (*)(void))sub_10005EF08);
  uint64_t v183 = v1022;
  sub_100078410();
  uint64_t v1022 = v183;
  if (v183)
  {
LABEL_215:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v378, v377);
    sub_1000048CC(v380, v379);
    sub_1000048CC(v382, v381);
    sub_1000048CC(v384, v383);
    swift_bridgeObjectRelease();
    sub_1000048CC(v386, v387);
    sub_1000048CC(v388, v389);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v14 = v304;
    goto LABEL_4;
  }
  uint64_t v184 = v542;
  LOBYTE(v542) = 114;
  uint64_t v376 = v184;
  swift_bridgeObjectRetain();
  uint64_t v185 = v1022;
  uint64_t v301 = sub_1000783C0();
  uint64_t v375 = v186;
  uint64_t v1022 = v185;
  if (v185)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    sub_1000048CC(v378, v377);
    sub_1000048CC(v380, v379);
    sub_1000048CC(v382, v381);
    sub_1000048CC(v384, v383);
    swift_bridgeObjectRelease();
    sub_1000048CC(v386, v387);
    sub_1000048CC(v388, v389);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v13 = 0x26C8070BE4AFFLL;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    goto LABEL_4;
  }
  LOBYTE(v542) = 115;
  swift_bridgeObjectRetain();
  uint64_t v187 = v1022;
  uint64_t v299 = sub_1000783C0();
  uint64_t v374 = v188;
  uint64_t v1022 = v187;
  if (v187)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v378, v377);
    sub_1000048CC(v380, v379);
    sub_1000048CC(v382, v381);
    sub_1000048CC(v384, v383);
    swift_bridgeObjectRelease();
    sub_1000048CC(v386, v387);
    sub_1000048CC(v388, v389);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v13 = 0x66C8070BE4AFFLL;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    goto LABEL_4;
  }
  unint64_t v13 = 0xE6C8070BE4AFFLL;
  LOBYTE(v542) = 116;
  swift_bridgeObjectRetain();
  uint64_t v189 = v1022;
  uint64_t v296 = sub_1000783F0();
  int v264 = v190;
  uint64_t v1022 = v189;
  if (v189)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v378, v377);
    sub_1000048CC(v380, v379);
    sub_1000048CC(v382, v381);
    sub_1000048CC(v384, v383);
    swift_bridgeObjectRelease();
    sub_1000048CC(v386, v387);
    sub_1000048CC(v388, v389);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    goto LABEL_234;
  }
  char v935 = v264 & 1;
  LOBYTE(v542) = 117;
  int v293 = sub_1000783D0();
  uint64_t v1022 = 0;
  LOBYTE(v542) = 118;
  int v292 = sub_1000783D0();
  uint64_t v1022 = 0;
  LOBYTE(v542) = 119;
  uint64_t v291 = sub_1000783F0();
  int v263 = v191;
  uint64_t v1022 = 0;
  char v932 = v191 & 1;
  LOBYTE(v541[0]) = 120;
  sub_100078410();
  uint64_t v1022 = 0;
  unint64_t v13 = 0x10E6C8070BE4AFFLL;
  uint64_t v192 = v542;
  LOBYTE(v542) = 121;
  uint64_t v373 = v192;
  unint64_t v372 = v543;
  sub_1000048B8(v192, v543);
  uint64_t v193 = v1022;
  uint64_t v288 = sub_1000783F0();
  int v262 = v194;
  uint64_t v1022 = v193;
  if (v193)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v373, v372);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v378, v377);
    sub_1000048CC(v380, v379);
    sub_1000048CC(v382, v381);
    sub_1000048CC(v384, v383);
    swift_bridgeObjectRelease();
    sub_1000048CC(v386, v387);
    sub_1000048CC(v388, v389);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    goto LABEL_234;
  }
  char v930 = v262 & 1;
  LOBYTE(v542) = 122;
  int v286 = sub_1000783D0();
  uint64_t v1022 = 0;
  LOBYTE(v542) = 123;
  uint64_t v284 = sub_1000783C0();
  uint64_t v371 = v195;
  uint64_t v1022 = 0;
  unint64_t v13 = 0x90E6C8070BE4AFFLL;
  LOBYTE(v542) = 124;
  swift_bridgeObjectRetain();
  uint64_t v196 = v1022;
  uint64_t v283 = sub_1000783F0();
  int v261 = v197;
  uint64_t v1022 = v196;
  if (v196)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease();
    sub_1000048CC(v373, v372);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v378, v377);
    sub_1000048CC(v380, v379);
    sub_1000048CC(v382, v381);
    sub_1000048CC(v384, v383);
    swift_bridgeObjectRelease();
    sub_1000048CC(v386, v387);
    sub_1000048CC(v388, v389);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    goto LABEL_234;
  }
  char v927 = v261 & 1;
  LOBYTE(v542) = 125;
  uint64_t v281 = sub_1000783F0();
  int v260 = v198;
  uint64_t v1022 = 0;
  char v925 = v198 & 1;
  LOBYTE(v541[0]) = 126;
  sub_100078410();
  uint64_t v1022 = 0;
  LOBYTE(v541[0]) = 127;
  uint64_t v370 = v542;
  unint64_t v369 = v543;
  sub_1000048B8(v542, v543);
  uint64_t v199 = v1022;
  sub_100078410();
  uint64_t v1022 = v199;
  if (v199)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v370, v369);
    swift_bridgeObjectRelease();
    sub_1000048CC(v373, v372);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v378, v377);
    sub_1000048CC(v380, v379);
    sub_1000048CC(v382, v381);
    sub_1000048CC(v384, v383);
    swift_bridgeObjectRelease();
    sub_1000048CC(v386, v387);
    sub_1000048CC(v388, v389);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v14 = 0;
    unint64_t v13 = 0x490E6C8070BE4AFFLL;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    goto LABEL_4;
  }
  unint64_t v13 = 0xC90E6C8070BE4AFFLL;
  uint64_t v200 = v542;
  LOBYTE(v542) = 0x80;
  uint64_t v368 = v200;
  unint64_t v367 = v543;
  sub_1000048B8(v200, v543);
  uint64_t v201 = v1022;
  uint64_t v275 = sub_1000783F0();
  int v259 = v202;
  uint64_t v1022 = v201;
  if (v201)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v368, v367);
    sub_1000048CC(v370, v369);
    swift_bridgeObjectRelease();
    sub_1000048CC(v373, v372);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v378, v377);
    sub_1000048CC(v380, v379);
    sub_1000048CC(v382, v381);
    sub_1000048CC(v384, v383);
    swift_bridgeObjectRelease();
    sub_1000048CC(v386, v387);
    sub_1000048CC(v388, v389);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    goto LABEL_234;
  }
  char v923 = v259 & 1;
  LOBYTE(v541[0]) = -127;
  sub_100078410();
  uint64_t v1022 = 0;
  LOBYTE(v541[0]) = -126;
  uint64_t v366 = v542;
  unint64_t v365 = v543;
  sub_1000048B8(v542, v543);
  uint64_t v203 = v1022;
  sub_100078410();
  uint64_t v1022 = v203;
  if (v203)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_1000048CC(v366, v365);
    sub_1000048CC(v368, v367);
    sub_1000048CC(v370, v369);
    swift_bridgeObjectRelease();
    sub_1000048CC(v373, v372);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v378, v377);
    sub_1000048CC(v380, v379);
    sub_1000048CC(v382, v381);
    sub_1000048CC(v384, v383);
    swift_bridgeObjectRelease();
    sub_1000048CC(v386, v387);
    sub_1000048CC(v388, v389);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v398, v400);
    swift_bridgeObjectRelease();
    sub_1000048CC(v405, v408);
    sub_10005EC98(v391, v392);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v418, v419);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v427, v428);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v432, v433);
    sub_1000048CC(v434, v435);
    sub_1000048CC(v436, v437);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v446, v447);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000048CC(v451, v452);
    sub_1000048CC(v453, v454);
    sub_1000048CC(v455, v456);
    swift_bridgeObjectRelease();
    sub_1000048CC(v458, v459);
    swift_bridgeObjectRelease();
    sub_1000048CC(v462, v461);
    sub_1000048CC(v463, v464);
    sub_1000048CC(v465, v466);
    sub_1000048CC(v468, v467);
    sub_1000048CC(v469, v470);
    LODWORD(v539) = 0;
    unint64_t v12 = 0x18A61EE7F7E47F8;
    unint64_t v14 = 2;
  }
  else
  {
    LOBYTE(v541[0]) = -125;
    uint64_t v364 = v542;
    unint64_t v363 = v543;
    sub_1000048B8(v542, v543);
    uint64_t v204 = v1022;
    sub_100078410();
    uint64_t v1022 = v204;
    if (v204)
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      sub_1000048CC(v364, v363);
      sub_1000048CC(v366, v365);
      sub_1000048CC(v368, v367);
      sub_1000048CC(v370, v369);
      swift_bridgeObjectRelease();
      sub_1000048CC(v373, v372);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000048CC(v378, v377);
      sub_1000048CC(v380, v379);
      sub_1000048CC(v382, v381);
      sub_1000048CC(v384, v383);
      swift_bridgeObjectRelease();
      sub_1000048CC(v386, v387);
      sub_1000048CC(v388, v389);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000048CC(v398, v400);
      swift_bridgeObjectRelease();
      sub_1000048CC(v405, v408);
      sub_10005EC98(v391, v392);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000048CC(v418, v419);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000048CC(v427, v428);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000048CC(v432, v433);
      sub_1000048CC(v434, v435);
      sub_1000048CC(v436, v437);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000048CC(v446, v447);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000048CC(v451, v452);
      sub_1000048CC(v453, v454);
      sub_1000048CC(v455, v456);
      swift_bridgeObjectRelease();
      sub_1000048CC(v458, v459);
      swift_bridgeObjectRelease();
      sub_1000048CC(v462, v461);
      sub_1000048CC(v463, v464);
      sub_1000048CC(v465, v466);
      sub_1000048CC(v468, v467);
      sub_1000048CC(v469, v470);
      LODWORD(v539) = 0;
      unint64_t v12 = 0x18A61EE7F7E47F8;
      unint64_t v14 = 6;
    }
    else
    {
      uint64_t v205 = v542;
      LOBYTE(v542) = -124;
      uint64_t v362 = v205;
      unint64_t v361 = v543;
      sub_1000048B8(v205, v543);
      uint64_t v206 = v1022;
      uint64_t v265 = sub_100078420();
      int v258 = v207;
      uint64_t v1022 = v206;
      if (v206)
      {
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        sub_1000048CC(v362, v361);
        sub_1000048CC(v364, v363);
        sub_1000048CC(v366, v365);
        sub_1000048CC(v368, v367);
        sub_1000048CC(v370, v369);
        swift_bridgeObjectRelease();
        sub_1000048CC(v373, v372);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000048CC(v378, v377);
        sub_1000048CC(v380, v379);
        sub_1000048CC(v382, v381);
        sub_1000048CC(v384, v383);
        swift_bridgeObjectRelease();
        sub_1000048CC(v386, v387);
        sub_1000048CC(v388, v389);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000048CC(v398, v400);
        swift_bridgeObjectRelease();
        sub_1000048CC(v405, v408);
        sub_10005EC98(v391, v392);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000048CC(v418, v419);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000048CC(v427, v428);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000048CC(v432, v433);
        sub_1000048CC(v434, v435);
        sub_1000048CC(v436, v437);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000048CC(v446, v447);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000048CC(v451, v452);
        sub_1000048CC(v453, v454);
        sub_1000048CC(v455, v456);
        swift_bridgeObjectRelease();
        sub_1000048CC(v458, v459);
        swift_bridgeObjectRelease();
        sub_1000048CC(v462, v461);
        sub_1000048CC(v463, v464);
        sub_1000048CC(v465, v466);
        sub_1000048CC(v468, v467);
        sub_1000048CC(v469, v470);
        LODWORD(v539) = 0;
        unint64_t v12 = 0x18A61EE7F7E47F8;
        unint64_t v14 = 14;
      }
      else
      {
        char v921 = v258 & 1;
        LOBYTE(v541[0]) = -123;
        sub_100078410();
        uint64_t v1022 = 0;
        uint64_t v208 = v542;
        LOBYTE(v542) = -122;
        uint64_t v360 = v208;
        unint64_t v359 = v543;
        sub_1000048B8(v208, v543);
        uint64_t v209 = v1022;
        uint64_t v304 = sub_100078430();
        int v257 = v210;
        uint64_t v1022 = v209;
        if (v209)
        {
          (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
          sub_1000048CC(v360, v359);
          sub_1000048CC(v362, v361);
          sub_1000048CC(v364, v363);
          sub_1000048CC(v366, v365);
          sub_1000048CC(v368, v367);
          sub_1000048CC(v370, v369);
          swift_bridgeObjectRelease();
          sub_1000048CC(v373, v372);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000048CC(v378, v377);
          sub_1000048CC(v380, v379);
          sub_1000048CC(v382, v381);
          sub_1000048CC(v384, v383);
          swift_bridgeObjectRelease();
          sub_1000048CC(v386, v387);
          sub_1000048CC(v388, v389);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000048CC(v398, v400);
          swift_bridgeObjectRelease();
          sub_1000048CC(v405, v408);
          sub_10005EC98(v391, v392);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000048CC(v418, v419);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000048CC(v427, v428);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000048CC(v432, v433);
          sub_1000048CC(v434, v435);
          sub_1000048CC(v436, v437);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000048CC(v446, v447);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1000048CC(v451, v452);
          sub_1000048CC(v453, v454);
          sub_1000048CC(v455, v456);
          swift_bridgeObjectRelease();
          sub_1000048CC(v458, v459);
          swift_bridgeObjectRelease();
          sub_1000048CC(v462, v461);
          sub_1000048CC(v463, v464);
          sub_1000048CC(v465, v466);
          sub_1000048CC(v468, v467);
          sub_1000048CC(v469, v470);
          LODWORD(v539) = 0;
          unint64_t v12 = 0x18A61EE7F7E47F8;
          unint64_t v14 = 46;
        }
        else
        {
          char v919 = v257 & 1;
          LOBYTE(v541[0]) = -121;
          sub_100078410();
          uint64_t v1022 = 0;
          uint64_t v211 = v542;
          LOBYTE(v542) = -120;
          uint64_t v358 = v211;
          unint64_t v357 = v543;
          sub_1000048B8(v211, v543);
          uint64_t v212 = v1022;
          uint64_t v302 = sub_1000783C0();
          uint64_t v356 = v213;
          uint64_t v1022 = v212;
          if (v212)
          {
            (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
            sub_1000048CC(v358, v357);
            sub_1000048CC(v360, v359);
            sub_1000048CC(v362, v361);
            sub_1000048CC(v364, v363);
            sub_1000048CC(v366, v365);
            sub_1000048CC(v368, v367);
            sub_1000048CC(v370, v369);
            swift_bridgeObjectRelease();
            sub_1000048CC(v373, v372);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1000048CC(v378, v377);
            sub_1000048CC(v380, v379);
            sub_1000048CC(v382, v381);
            sub_1000048CC(v384, v383);
            swift_bridgeObjectRelease();
            sub_1000048CC(v386, v387);
            sub_1000048CC(v388, v389);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1000048CC(v398, v400);
            swift_bridgeObjectRelease();
            sub_1000048CC(v405, v408);
            sub_10005EC98(v391, v392);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1000048CC(v418, v419);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1000048CC(v427, v428);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1000048CC(v432, v433);
            sub_1000048CC(v434, v435);
            sub_1000048CC(v436, v437);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1000048CC(v446, v447);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1000048CC(v451, v452);
            sub_1000048CC(v453, v454);
            sub_1000048CC(v455, v456);
            swift_bridgeObjectRelease();
            sub_1000048CC(v458, v459);
            swift_bridgeObjectRelease();
            sub_1000048CC(v462, v461);
            sub_1000048CC(v463, v464);
            sub_1000048CC(v465, v466);
            sub_1000048CC(v468, v467);
            sub_1000048CC(v469, v470);
            LODWORD(v539) = 0;
            unint64_t v12 = 0x18A61EE7F7E47F8;
            unint64_t v14 = 174;
          }
          else
          {
            LOBYTE(v542) = -119;
            swift_bridgeObjectRetain();
            uint64_t v214 = v1022;
            uint64_t v300 = sub_1000783F0();
            int v256 = v215;
            uint64_t v1022 = v214;
            if (v214) {
              goto LABEL_249;
            }
            char v917 = v256 & 1;
            LOBYTE(v542) = -118;
            uint64_t v298 = sub_1000783F0();
            int v255 = v216;
            uint64_t v1022 = 0;
            char v915 = v216 & 1;
            LOBYTE(v542) = -117;
            uint64_t v297 = sub_100078420();
            int v254 = v217;
            uint64_t v1022 = 0;
            char v913 = v217 & 1;
            LOBYTE(v542) = -116;
            uint64_t v295 = sub_1000783F0();
            int v253 = v218;
            uint64_t v1022 = 0;
            char v911 = v218 & 1;
            sub_100002214(&qword_100090AE0);
            LOBYTE(v541[0]) = -115;
            sub_10005F004(&qword_100090CB0, &qword_100090AE0, (void (*)(void))sub_10005EF5C);
            uint64_t v219 = v1022;
            sub_100078410();
            uint64_t v1022 = v219;
            if (v219)
            {
LABEL_249:
              (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
              swift_bridgeObjectRelease();
              sub_1000048CC(v358, v357);
              sub_1000048CC(v360, v359);
              sub_1000048CC(v362, v361);
              sub_1000048CC(v364, v363);
              sub_1000048CC(v366, v365);
              sub_1000048CC(v368, v367);
              sub_1000048CC(v370, v369);
              swift_bridgeObjectRelease();
              sub_1000048CC(v373, v372);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000048CC(v378, v377);
              sub_1000048CC(v380, v379);
              sub_1000048CC(v382, v381);
              sub_1000048CC(v384, v383);
              swift_bridgeObjectRelease();
              sub_1000048CC(v386, v387);
              sub_1000048CC(v388, v389);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000048CC(v398, v400);
              swift_bridgeObjectRelease();
              sub_1000048CC(v405, v408);
              sub_10005EC98(v391, v392);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000048CC(v418, v419);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000048CC(v427, v428);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000048CC(v432, v433);
              sub_1000048CC(v434, v435);
              sub_1000048CC(v436, v437);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000048CC(v446, v447);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1000048CC(v451, v452);
              sub_1000048CC(v453, v454);
              sub_1000048CC(v455, v456);
              swift_bridgeObjectRelease();
              sub_1000048CC(v458, v459);
              swift_bridgeObjectRelease();
              sub_1000048CC(v462, v461);
              sub_1000048CC(v463, v464);
              sub_1000048CC(v465, v466);
              sub_1000048CC(v468, v467);
              sub_1000048CC(v469, v470);
              LODWORD(v539) = 0;
              unint64_t v12 = 0x18A61EE7F7E47F8;
              unint64_t v14 = 430;
            }
            else
            {
              uint64_t v220 = v542;
              sub_100002214(&qword_100090B00);
              LOBYTE(v541[0]) = -114;
              sub_10005F004(&qword_100090CC0, &qword_100090B00, (void (*)(void))sub_10005EFB0);
              uint64_t v355 = v220;
              swift_bridgeObjectRetain();
              uint64_t v221 = v1022;
              sub_100078410();
              uint64_t v1022 = v221;
              if (v221)
              {
                (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1000048CC(v358, v357);
                sub_1000048CC(v360, v359);
                sub_1000048CC(v362, v361);
                sub_1000048CC(v364, v363);
                sub_1000048CC(v366, v365);
                sub_1000048CC(v368, v367);
                sub_1000048CC(v370, v369);
                swift_bridgeObjectRelease();
                sub_1000048CC(v373, v372);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1000048CC(v378, v377);
                sub_1000048CC(v380, v379);
                sub_1000048CC(v382, v381);
                sub_1000048CC(v384, v383);
                swift_bridgeObjectRelease();
                sub_1000048CC(v386, v387);
                sub_1000048CC(v388, v389);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1000048CC(v398, v400);
                swift_bridgeObjectRelease();
                sub_1000048CC(v405, v408);
                sub_10005EC98(v391, v392);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1000048CC(v418, v419);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1000048CC(v427, v428);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1000048CC(v432, v433);
                sub_1000048CC(v434, v435);
                sub_1000048CC(v436, v437);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1000048CC(v446, v447);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                sub_1000048CC(v451, v452);
                sub_1000048CC(v453, v454);
                sub_1000048CC(v455, v456);
                swift_bridgeObjectRelease();
                sub_1000048CC(v458, v459);
                swift_bridgeObjectRelease();
                sub_1000048CC(v462, v461);
                sub_1000048CC(v463, v464);
                sub_1000048CC(v465, v466);
                sub_1000048CC(v468, v467);
                sub_1000048CC(v469, v470);
                LODWORD(v539) = 0;
                unint64_t v13 = 0xC90E6C8070BE4AFFLL;
                unint64_t v12 = 0x18A61EE7F7E47F8;
                unint64_t v14 = 8622;
              }
              else
              {
                LOBYTE(v541[0]) = -113;
                uint64_t v354 = v542;
                swift_bridgeObjectRetain();
                uint64_t v222 = v1022;
                sub_100078410();
                uint64_t v1022 = v222;
                if (v222)
                {
                  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_1000048CC(v358, v357);
                  sub_1000048CC(v360, v359);
                  sub_1000048CC(v362, v361);
                  sub_1000048CC(v364, v363);
                  sub_1000048CC(v366, v365);
                  sub_1000048CC(v368, v367);
                  sub_1000048CC(v370, v369);
                  swift_bridgeObjectRelease();
                  sub_1000048CC(v373, v372);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_1000048CC(v378, v377);
                  sub_1000048CC(v380, v379);
                  sub_1000048CC(v382, v381);
                  sub_1000048CC(v384, v383);
                  swift_bridgeObjectRelease();
                  sub_1000048CC(v386, v387);
                  sub_1000048CC(v388, v389);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_1000048CC(v398, v400);
                  swift_bridgeObjectRelease();
                  sub_1000048CC(v405, v408);
                  sub_10005EC98(v391, v392);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_1000048CC(v418, v419);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_1000048CC(v427, v428);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_1000048CC(v432, v433);
                  sub_1000048CC(v434, v435);
                  sub_1000048CC(v436, v437);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_1000048CC(v446, v447);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  sub_1000048CC(v451, v452);
                  sub_1000048CC(v453, v454);
                  sub_1000048CC(v455, v456);
                  swift_bridgeObjectRelease();
                  sub_1000048CC(v458, v459);
                  swift_bridgeObjectRelease();
                  sub_1000048CC(v462, v461);
                  sub_1000048CC(v463, v464);
                  sub_1000048CC(v465, v466);
                  sub_1000048CC(v468, v467);
                  sub_1000048CC(v469, v470);
                  LODWORD(v539) = 0;
                  unint64_t v13 = 0xC90E6C8070BE4AFFLL;
                  unint64_t v12 = 0x18A61EE7F7E47F8;
                  unint64_t v14 = 25006;
                }
                else
                {
                  unint64_t v13 = 0xC90E6C8070BE4AFFLL;
                  uint64_t v223 = v542;
                  LOBYTE(v542) = -112;
                  uint64_t v353 = v223;
                  unint64_t v352 = v543;
                  sub_1000048B8(v223, v543);
                  uint64_t v224 = v1022;
                  uint64_t v533 = sub_1000783F0();
                  int v252 = v225;
                  uint64_t v1022 = v224;
                  if (v224
                    || (char v909 = v252 & 1,
                        sub_100002214(&qword_100090B20),
                        LOBYTE(v541[0]) = -111,
                        sub_10005F004(&qword_100090CD0, &qword_100090B20, (void (*)(void))sub_10005F070),
                        uint64_t v226 = v1022,
                        sub_100078410(),
                        (uint64_t v1022 = v226) != 0))
                  {
                    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                    sub_1000048CC(v353, v352);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_1000048CC(v358, v357);
                    sub_1000048CC(v360, v359);
                    sub_1000048CC(v362, v361);
                    sub_1000048CC(v364, v363);
                    sub_1000048CC(v366, v365);
                    sub_1000048CC(v368, v367);
                    sub_1000048CC(v370, v369);
                    swift_bridgeObjectRelease();
                    sub_1000048CC(v373, v372);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_1000048CC(v378, v377);
                    sub_1000048CC(v380, v379);
                    sub_1000048CC(v382, v381);
                    sub_1000048CC(v384, v383);
                    swift_bridgeObjectRelease();
                    sub_1000048CC(v386, v387);
                    sub_1000048CC(v388, v389);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_1000048CC(v398, v400);
                    swift_bridgeObjectRelease();
                    sub_1000048CC(v405, v408);
                    sub_10005EC98(v391, v392);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_1000048CC(v418, v419);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_1000048CC(v427, v428);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_1000048CC(v432, v433);
                    sub_1000048CC(v434, v435);
                    sub_1000048CC(v436, v437);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_1000048CC(v446, v447);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_1000048CC(v451, v452);
                    sub_1000048CC(v453, v454);
                    sub_1000048CC(v455, v456);
                    swift_bridgeObjectRelease();
                    sub_1000048CC(v458, v459);
                    swift_bridgeObjectRelease();
                    sub_1000048CC(v462, v461);
                    sub_1000048CC(v463, v464);
                    sub_1000048CC(v465, v466);
                    sub_1000048CC(v468, v467);
                    sub_1000048CC(v469, v470);
                    LODWORD(v539) = 0;
                    unint64_t v12 = 0x18A61EE7F7E47F8;
                    unint64_t v14 = 57774;
                  }
                  else
                  {
                    uint64_t v227 = v542;
                    LOBYTE(v542) = -110;
                    uint64_t v351 = v227;
                    swift_bridgeObjectRetain();
                    uint64_t v228 = v1022;
                    uint64_t v279 = sub_1000783F0();
                    int v251 = v229;
                    uint64_t v1022 = v228;
                    if (v228)
                    {
                      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v353, v352);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v358, v357);
                      sub_1000048CC(v360, v359);
                      sub_1000048CC(v362, v361);
                      sub_1000048CC(v364, v363);
                      sub_1000048CC(v366, v365);
                      sub_1000048CC(v368, v367);
                      sub_1000048CC(v370, v369);
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v373, v372);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v378, v377);
                      sub_1000048CC(v380, v379);
                      sub_1000048CC(v382, v381);
                      sub_1000048CC(v384, v383);
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v386, v387);
                      sub_1000048CC(v388, v389);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v398, v400);
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v405, v408);
                      sub_10005EC98(v391, v392);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v418, v419);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v427, v428);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v432, v433);
                      sub_1000048CC(v434, v435);
                      sub_1000048CC(v436, v437);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v446, v447);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v451, v452);
                      sub_1000048CC(v453, v454);
                      sub_1000048CC(v455, v456);
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v458, v459);
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v462, v461);
                      sub_1000048CC(v463, v464);
                      sub_1000048CC(v465, v466);
                      sub_1000048CC(v468, v467);
                      sub_1000048CC(v469, v470);
                      LODWORD(v539) = 0;
                      unint64_t v12 = 0x18A61EE7F7E47F8;
                      unint64_t v14 = 188846;
                    }
                    else
                    {
                      char v907 = v251 & 1;
                      LOBYTE(v542) = -109;
                      uint64_t v278 = sub_1000783F0();
                      int v250 = v230;
                      uint64_t v1022 = 0;
                      char v905 = v230 & 1;
                      LOBYTE(v542) = -108;
                      int v277 = sub_1000783D0();
                      uint64_t v1022 = 0;
                      LOBYTE(v542) = -107;
                      int v276 = sub_1000783D0();
                      uint64_t v1022 = 0;
                      LOBYTE(v542) = -106;
                      uint64_t v274 = sub_1000783C0();
                      uint64_t v350 = v231;
                      uint64_t v1022 = 0;
                      LOBYTE(v542) = -105;
                      swift_bridgeObjectRetain();
                      uint64_t v232 = v1022;
                      int v233 = sub_1000783D0();
                      int v272 = v233;
                      uint64_t v1022 = v232;
                      if (!v232)
                      {
                        LOBYTE(v542) = -104;
                        uint64_t v271 = sub_1000783F0();
                        int v249 = v234;
                        uint64_t v1022 = 0;
                        char v903 = v234 & 1;
                        LOBYTE(v542) = -103;
                        uint64_t v270 = sub_1000783F0();
                        int v248 = v235;
                        uint64_t v1022 = 0;
                        char v901 = v235 & 1;
                        LOBYTE(v542) = -102;
                        int v269 = sub_1000783D0();
                        uint64_t v1022 = 0;
                        char v900 = -101;
                        int v267 = sub_1000783D0();
                        uint64_t v1022 = 0;
                        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                        BYTE1(v541[23]) = v526;
                        LOBYTE(v541[2]) = v536 & 1;
                        LOBYTE(v541[4]) = v534 & 1;
                        LOBYTE(v541[25]) = v530 & 1;
                        LOBYTE(v541[42]) = v520 & 1;
                        LOBYTE(v541[56]) = v513 & 1;
                        LOBYTE(v541[58]) = v511 & 1;
                        LOBYTE(v541[66]) = v508 & 1;
                        LOBYTE(v541[76]) = v503 & 1;
                        LOBYTE(v541[78]) = v501 & 1;
                        LOBYTE(v541[80]) = v499 & 1;
                        LOBYTE(v541[82]) = v496 & 1;
                        LOBYTE(v541[88]) = v347 & 1;
                        LOBYTE(v541[90]) = v346 & 1;
                        LOBYTE(v541[94]) = v342 & 1;
                        LOBYTE(v541[98]) = v340 & 1;
                        LOBYTE(v541[100]) = v338 & 1;
                        LOBYTE(v541[102]) = v336 & 1;
                        LOBYTE(v541[106]) = v335 & 1;
                        LOBYTE(v541[108]) = v333 & 1;
                        LOBYTE(v541[110]) = v332 & 1;
                        LOBYTE(v541[128]) = v322 & 1;
                        LOBYTE(v541[132]) = v319 & 1;
                        LOBYTE(v541[136]) = v315 & 1;
                        LOBYTE(v541[140]) = v311 & 1;
                        v541[0] = v535;
                        v541[1] = v539;
                        v541[3] = v537;
                        v541[5] = v469;
                        v541[6] = v470;
                        v541[7] = v468;
                        v541[8] = v467;
                        v541[9] = v465;
                        v541[10] = v466;
                        v541[11] = v463;
                        v541[12] = v464;
                        v541[13] = v462;
                        v541[14] = v461;
                        v541[15] = v532;
                        v541[16] = v460;
                        v541[17] = v458;
                        v541[18] = v459;
                        uint64_t v247 = v47;
                        v541[19] = v47;
                        v541[20] = v457;
                        LOBYTE(v541[21]) = v531;
                        v541[22] = v529;
                        LOBYTE(v541[23]) = v528;
                        v541[24] = v527;
                        v541[26] = v455;
                        v541[27] = v456;
                        LOBYTE(v541[28]) = v525;
                        BYTE1(v541[28]) = v524;
                        v541[29] = v453;
                        v541[30] = v454;
                        v541[31] = v451;
                        v541[32] = v452;
                        v541[33] = v523;
                        v541[34] = v450;
                        v541[35] = v522;
                        v541[36] = v449;
                        v541[37] = v521;
                        v541[38] = v448;
                        v541[39] = v446;
                        v541[40] = v447;
                        v541[41] = v519;
                        v541[43] = v518;
                        v541[44] = v445;
                        v541[45] = v517;
                        v541[46] = v444;
                        v541[47] = v516;
                        v541[48] = v443;
                        v541[49] = v442;
                        v541[50] = v441;
                        v541[51] = v515;
                        v541[52] = v440;
                        v541[53] = v514;
                        v541[54] = v439;
                        v541[55] = v512;
                        v541[57] = v510;
                        v541[59] = v509;
                        v541[60] = v438;
                        v541[61] = v436;
                        v541[62] = v437;
                        v541[63] = v434;
                        v541[64] = v435;
                        v541[65] = v507;
                        v541[67] = v432;
                        v541[68] = v433;
                        v541[69] = v506;
                        v541[70] = v431;
                        v541[71] = v505;
                        v541[72] = v430;
                        v541[73] = v504;
                        v541[74] = v429;
                        v541[75] = v502;
                        v541[77] = v500;
                        v541[79] = v498;
                        v541[81] = v497;
                        v541[83] = v427;
                        v541[84] = v428;
                        v541[85] = v495;
                        v541[86] = v426;
                        v541[87] = v494;
                        v541[89] = v493;
                        v541[91] = v492;
                        v541[92] = v425;
                        v541[93] = v491;
                        v541[95] = v490;
                        v541[96] = v424;
                        v541[97] = v489;
                        v541[99] = v488;
                        v541[101] = v487;
                        v541[103] = v423;
                        v541[104] = v422;
                        v541[105] = v486;
                        v541[107] = v485;
                        v541[109] = v484;
                        BYTE1(v541[110]) = v483;
                        BYTE2(v541[110]) = v482;
                        BYTE3(v541[110]) = v481;
                        BYTE4(v541[110]) = v480;
                        v541[111] = v479;
                        v541[112] = v421;
                        v541[113] = v478;
                        v541[114] = v420;
                        v541[115] = v418;
                        v541[116] = v419;
                        v541[117] = v477;
                        v541[118] = v417;
                        v541[119] = v476;
                        v541[120] = v416;
                        v541[121] = v475;
                        v541[122] = v415;
                        v541[123] = v474;
                        v541[124] = v414;
                        v541[125] = v473;
                        v541[126] = v413;
                        v541[127] = v472;
                        v541[129] = v471;
                        v541[130] = v412;
                        v541[131] = v349;
                        v541[133] = v348;
                        v541[134] = v411;
                        v541[135] = v345;
                        BYTE1(v541[136]) = v344;
                        v541[137] = v343;
                        v541[138] = v406;
                        v541[139] = v341;
                        v541[141] = v339;
                        LOBYTE(v541[142]) = v314 & 1;
                        v541[143] = v337;
                        v541[144] = v395;
                        v541[145] = v391;
                        v541[146] = v392;
                        v541[147] = v394;
                        v541[148] = v396;
                        v541[149] = v397;
                        v541[150] = v399;
                        v541[151] = v401;
                        v541[152] = v402;
                        v541[153] = v404;
                        v541[154] = v407;
                        v541[155] = v409;
                        v541[156] = v410;
                        v541[157] = v405;
                        v541[158] = v408;
                        v541[159] = v334;
                        v541[160] = v403;
                        v541[161] = v398;
                        v541[162] = v400;
                        v541[163] = v331;
                        LOBYTE(v541[164]) = v307 & 1;
                        v541[165] = v330;
                        v541[166] = v393;
                        LOBYTE(v541[167]) = v329;
                        BYTE1(v541[167]) = v328;
                        BYTE2(v541[167]) = v327;
                        v541[168] = v326;
                        LOBYTE(v541[169]) = v303 & 1;
                        v541[170] = v325;
                        v541[171] = v390;
                        v541[172] = v388;
                        v541[173] = v389;
                        v541[174] = v386;
                        v541[175] = v387;
                        v541[176] = v324;
                        LOBYTE(v541[177]) = v294 & 1;
                        BYTE1(v541[177]) = v323;
                        BYTE2(v541[177]) = v321;
                        v541[178] = v320;
                        LOBYTE(v541[179]) = v290 & 1;
                        v541[180] = v318;
                        LOBYTE(v541[181]) = v289 & 1;
                        BYTE1(v541[181]) = v317;
                        v541[182] = v316;
                        LOBYTE(v541[183]) = v287 & 1;
                        v541[184] = v313;
                        LOBYTE(v541[185]) = v285 & 1;
                        v541[186] = v312;
                        v541[187] = v385;
                        v541[188] = v310;
                        LOBYTE(v541[189]) = v282 & 1;
                        v541[190] = v309;
                        LOBYTE(v541[191]) = v280 & 1;
                        v541[192] = v384;
                        v541[193] = v383;
                        v541[194] = v382;
                        v541[195] = v381;
                        v541[196] = v308;
                        LOBYTE(v541[197]) = v273 & 1;
                        v541[198] = v380;
                        v541[199] = v379;
                        v541[200] = v378;
                        v541[201] = v377;
                        v541[202] = v306;
                        LOBYTE(v541[203]) = v268 & 1;
                        v541[204] = v305;
                        LOBYTE(v541[205]) = v266 & 1;
                        v541[206] = v376;
                        v541[207] = v301;
                        v541[208] = v375;
                        v541[209] = v299;
                        v541[210] = v374;
                        v541[211] = v296;
                        LOBYTE(v541[212]) = v264 & 1;
                        BYTE1(v541[212]) = v293;
                        BYTE2(v541[212]) = v292;
                        v541[213] = v291;
                        LOBYTE(v541[214]) = v263 & 1;
                        v541[215] = v373;
                        v541[216] = v372;
                        v541[217] = v288;
                        LOBYTE(v541[218]) = v262 & 1;
                        BYTE1(v541[218]) = v286;
                        v541[219] = v284;
                        v541[220] = v371;
                        v541[221] = v283;
                        LOBYTE(v541[222]) = v261 & 1;
                        v541[223] = v281;
                        LOBYTE(v541[224]) = v260 & 1;
                        v541[225] = v370;
                        v541[226] = v369;
                        v541[227] = v368;
                        v541[228] = v367;
                        v541[229] = v275;
                        LOBYTE(v541[230]) = v259 & 1;
                        v541[231] = v366;
                        v541[232] = v365;
                        v541[233] = v364;
                        v541[234] = v363;
                        v541[235] = v362;
                        v541[236] = v361;
                        v541[237] = v265;
                        LOBYTE(v541[238]) = v258 & 1;
                        v541[239] = v360;
                        v541[240] = v359;
                        v541[241] = v304;
                        LOBYTE(v541[242]) = v257 & 1;
                        v541[243] = v358;
                        v541[244] = v357;
                        v541[245] = v302;
                        v541[246] = v356;
                        v541[247] = v300;
                        LOBYTE(v541[248]) = v256 & 1;
                        v541[249] = v298;
                        LOBYTE(v541[250]) = v255 & 1;
                        v541[251] = v297;
                        LOBYTE(v541[252]) = v254 & 1;
                        v541[253] = v295;
                        LOBYTE(v541[254]) = v253 & 1;
                        v541[255] = v355;
                        v541[256] = v354;
                        uint64_t v236 = v353;
                        v541[257] = v353;
                        unint64_t v237 = v352;
                        v541[258] = v352;
                        v541[259] = v533;
                        LOBYTE(v541[260]) = v252 & 1;
                        v541[261] = v351;
                        v541[262] = v279;
                        LOBYTE(v541[263]) = v251 & 1;
                        v541[264] = v278;
                        LOBYTE(v541[265]) = v250 & 1;
                        BYTE1(v541[265]) = v277;
                        BYTE2(v541[265]) = v276;
                        v541[266] = v274;
                        v541[267] = v350;
                        LOBYTE(v541[268]) = v272;
                        v541[269] = v271;
                        LOBYTE(v541[270]) = v249 & 1;
                        v541[271] = v270;
                        LOBYTE(v541[272]) = v248 & 1;
                        BYTE1(v541[272]) = v269;
                        BYTE2(v541[272]) = v267;
                        sub_10005F0C4(v541);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        sub_1000048CC(v236, v237);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        sub_1000048CC(v358, v357);
                        sub_1000048CC(v360, v359);
                        sub_1000048CC(v362, v361);
                        sub_1000048CC(v364, v363);
                        sub_1000048CC(v366, v365);
                        sub_1000048CC(v368, v367);
                        sub_1000048CC(v370, v369);
                        swift_bridgeObjectRelease();
                        sub_1000048CC(v373, v372);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        sub_1000048CC(v378, v377);
                        sub_1000048CC(v380, v379);
                        sub_1000048CC(v382, v381);
                        sub_1000048CC(v384, v383);
                        swift_bridgeObjectRelease();
                        sub_1000048CC(v386, v387);
                        sub_1000048CC(v388, v389);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        sub_1000048CC(v398, v400);
                        swift_bridgeObjectRelease();
                        sub_1000048CC(v405, v408);
                        sub_10005EC98(v391, v392);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        sub_1000048CC(v418, v419);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        sub_1000048CC(v427, v428);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        sub_1000048CC(v432, v433);
                        sub_1000048CC(v434, v435);
                        sub_1000048CC(v436, v437);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        sub_1000048CC(v446, v447);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        sub_1000048CC(v451, v452);
                        sub_1000048CC(v453, v454);
                        sub_1000048CC(v455, v456);
                        swift_bridgeObjectRelease();
                        sub_1000048CC(v458, v459);
                        swift_bridgeObjectRelease();
                        sub_1000048CC(v462, v461);
                        uint64_t v238 = v463;
                        unint64_t v239 = v464;
                        sub_1000048CC(v463, v464);
                        uint64_t v240 = v465;
                        unint64_t v241 = v466;
                        sub_1000048CC(v465, v466);
                        uint64_t v242 = v468;
                        unint64_t v243 = v467;
                        sub_1000048CC(v468, v467);
                        uint64_t v244 = v469;
                        unint64_t v245 = v470;
                        sub_1000048CC(v469, v470);
                        sub_100002E34((uint64_t)v540);
                        uint64_t v542 = v535;
                        uint64_t v543 = v539;
                        uint64_t v545 = v537;
                        uint64_t v547 = v244;
                        unint64_t v548 = v245;
                        uint64_t v549 = v242;
                        unint64_t v550 = v243;
                        uint64_t v551 = v240;
                        unint64_t v552 = v241;
                        uint64_t v553 = v238;
                        unint64_t v554 = v239;
                        uint64_t v555 = v462;
                        unint64_t v556 = v461;
                        uint64_t v557 = v532;
                        uint64_t v558 = v460;
                        uint64_t v559 = v458;
                        unint64_t v560 = v459;
                        uint64_t v561 = v247;
                        uint64_t v562 = v457;
                        char v563 = v531;
                        uint64_t v565 = v529;
                        char v566 = v528;
                        uint64_t v570 = v527;
                        uint64_t v573 = v455;
                        unint64_t v574 = v456;
                        char v575 = v525;
                        char v576 = v524;
                        uint64_t v579 = v453;
                        unint64_t v580 = v454;
                        uint64_t v581 = v451;
                        unint64_t v582 = v452;
                        uint64_t v583 = v523;
                        uint64_t v584 = v450;
                        uint64_t v585 = v522;
                        uint64_t v586 = v449;
                        uint64_t v587 = v521;
                        uint64_t v588 = v448;
                        uint64_t v589 = v446;
                        unint64_t v590 = v447;
                        uint64_t v591 = v519;
                        uint64_t v594 = v518;
                        uint64_t v595 = v445;
                        uint64_t v596 = v517;
                        uint64_t v597 = v444;
                        uint64_t v598 = v516;
                        uint64_t v599 = v443;
                        uint64_t v600 = v442;
                        uint64_t v601 = v441;
                        uint64_t v602 = v515;
                        uint64_t v603 = v440;
                        uint64_t v604 = v514;
                        uint64_t v605 = v439;
                        uint64_t v606 = v512;
                        uint64_t v609 = v510;
                        uint64_t v612 = v509;
                        uint64_t v613 = v438;
                        uint64_t v614 = v436;
                        unint64_t v615 = v437;
                        uint64_t v616 = v434;
                        unint64_t v617 = v435;
                        uint64_t v618 = v507;
                        uint64_t v621 = v432;
                        unint64_t v622 = v433;
                        uint64_t v623 = v506;
                        uint64_t v624 = v431;
                        uint64_t v625 = v505;
                        uint64_t v626 = v430;
                        uint64_t v627 = v504;
                        uint64_t v628 = v429;
                        uint64_t v629 = v502;
                        uint64_t v632 = v500;
                        uint64_t v635 = v498;
                        uint64_t v638 = v497;
                        uint64_t v641 = v427;
                        unint64_t v642 = v428;
                        uint64_t v643 = v495;
                        uint64_t v644 = v426;
                        uint64_t v645 = v494;
                        uint64_t v648 = v493;
                        uint64_t v651 = v492;
                        uint64_t v652 = v425;
                        uint64_t v653 = v491;
                        uint64_t v656 = v490;
                        uint64_t v657 = v424;
                        uint64_t v658 = v489;
                        uint64_t v661 = v488;
                        uint64_t v664 = v487;
                        uint64_t v667 = v423;
                        uint64_t v668 = v422;
                        uint64_t v669 = v486;
                        uint64_t v672 = v485;
                        uint64_t v675 = v484;
                        char v677 = v483;
                        char v678 = v482;
                        char v679 = v481;
                        char v680 = v480;
                        uint64_t v683 = v479;
                        uint64_t v684 = v421;
                        uint64_t v685 = v478;
                        uint64_t v686 = v420;
                        uint64_t v687 = v418;
                        unint64_t v688 = v419;
                        uint64_t v689 = v477;
                        uint64_t v690 = v417;
                        uint64_t v691 = v476;
                        uint64_t v692 = v416;
                        uint64_t v693 = v475;
                        uint64_t v694 = v415;
                        uint64_t v695 = v474;
                        uint64_t v696 = v414;
                        uint64_t v697 = v473;
                        uint64_t v698 = v413;
                        uint64_t v699 = v472;
                        uint64_t v702 = v471;
                        uint64_t v703 = v412;
                        uint64_t v704 = v349;
                        uint64_t v707 = v348;
                        uint64_t v708 = v411;
                        uint64_t v709 = v345;
                        char v711 = v344;
                        uint64_t v714 = v343;
                        uint64_t v715 = v406;
                        uint64_t v716 = v341;
                        uint64_t v719 = v339;
                        uint64_t v722 = v337;
                        uint64_t v723 = v395;
                        uint64_t v724 = v391;
                        uint64_t v725 = v392;
                        uint64_t v726 = v394;
                        uint64_t v727 = v396;
                        uint64_t v728 = v397;
                        uint64_t v729 = v399;
                        unint64_t v730 = v401;
                        uint64_t v731 = v402;
                        unint64_t v732 = v404;
                        uint64_t v733 = v407;
                        unint64_t v734 = v409;
                        uint64_t v735 = v410;
                        uint64_t v736 = v405;
                        unint64_t v737 = v408;
                        uint64_t v738 = v334;
                        uint64_t v739 = v403;
                        uint64_t v740 = v398;
                        unint64_t v741 = v400;
                        uint64_t v742 = v331;
                        uint64_t v745 = v330;
                        uint64_t v746 = v393;
                        char v747 = v329;
                        char v748 = v328;
                        char v749 = v327;
                        uint64_t v752 = v326;
                        uint64_t v755 = v325;
                        uint64_t v756 = v390;
                        uint64_t v757 = v388;
                        unint64_t v758 = v389;
                        uint64_t v759 = v386;
                        unint64_t v760 = v387;
                        uint64_t v761 = v324;
                        char v763 = v323;
                        char v764 = v321;
                        uint64_t v767 = v320;
                        uint64_t v770 = v318;
                        char v772 = v317;
                        uint64_t v775 = v316;
                        uint64_t v778 = v313;
                        uint64_t v781 = v312;
                        uint64_t v782 = v385;
                        uint64_t v783 = v310;
                        uint64_t v786 = v309;
                        uint64_t v789 = v384;
                        unint64_t v790 = v383;
                        uint64_t v791 = v382;
                        unint64_t v792 = v381;
                        uint64_t v793 = v308;
                        uint64_t v796 = v380;
                        unint64_t v797 = v379;
                        uint64_t v798 = v378;
                        unint64_t v799 = v377;
                        uint64_t v800 = v306;
                        uint64_t v803 = v305;
                        uint64_t v806 = v376;
                        uint64_t v807 = v301;
                        uint64_t v808 = v375;
                        uint64_t v809 = v299;
                        uint64_t v810 = v374;
                        uint64_t v811 = v296;
                        char v813 = v293;
                        char v814 = v292;
                        uint64_t v817 = v291;
                        uint64_t v820 = v373;
                        unint64_t v821 = v372;
                        uint64_t v822 = v288;
                        char v824 = v286;
                        uint64_t v827 = v284;
                        uint64_t v828 = v371;
                        uint64_t v829 = v283;
                        uint64_t v832 = v281;
                        uint64_t v835 = v370;
                        unint64_t v836 = v369;
                        uint64_t v837 = v368;
                        unint64_t v838 = v367;
                        uint64_t v839 = v275;
                        uint64_t v842 = v366;
                        unint64_t v843 = v365;
                        uint64_t v844 = v364;
                        unint64_t v845 = v363;
                        uint64_t v846 = v362;
                        unint64_t v847 = v361;
                        uint64_t v848 = v265;
                        *(_DWORD *)v593 = *(_DWORD *)v1008;
                        *(_DWORD *)v608 = *(_DWORD *)v1006;
                        *(_DWORD *)v611 = *(_DWORD *)v1004;
                        *(_DWORD *)v620 = *(_DWORD *)v1002;
                        *(_DWORD *)v631 = *(_DWORD *)v1000;
                        *(_DWORD *)v634 = *(_DWORD *)v998;
                        *(_DWORD *)v637 = *(_DWORD *)v996;
                        *(_DWORD *)v640 = *(_DWORD *)v994;
                        *(_DWORD *)v647 = *(_DWORD *)v992;
                        *(_DWORD *)v650 = *(_DWORD *)v990;
                        *(_DWORD *)v655 = *(_DWORD *)v988;
                        *(_DWORD *)v660 = *(_DWORD *)v986;
                        *(_DWORD *)v663 = *(_DWORD *)v984;
                        *(_DWORD *)v666 = *(_DWORD *)v982;
                        *(_DWORD *)v671 = *(_DWORD *)v980;
                        *(_DWORD *)v674 = *(_DWORD *)v978;
                        __int16 v681 = v975;
                        *(_DWORD *)v701 = *(_DWORD *)v973;
                        *(_DWORD *)v706 = *(_DWORD *)v971;
                        int v712 = v968;
                        *(_DWORD *)v718 = *(_DWORD *)v966;
                        *(_DWORD *)v721 = *(_DWORD *)v964;
                        *(_DWORD *)v744 = *(_DWORD *)v962;
                        int v750 = v960;
                        *(_DWORD *)v754 = *(_DWORD *)v958;
                        int v765 = v955;
                        *(_DWORD *)v769 = *(_DWORD *)v953;
                        int v773 = v950;
                        *(_DWORD *)v777 = *(_DWORD *)v948;
                        *(_DWORD *)v780 = *(_DWORD *)v946;
                        *(_DWORD *)v785 = *(_DWORD *)v944;
                        *(_DWORD *)v788 = *(_DWORD *)v942;
                        *(_DWORD *)v795 = *(_DWORD *)v940;
                        *(_DWORD *)v802 = *(_DWORD *)v938;
                        *(_DWORD *)v805 = *(_DWORD *)v936;
                        int v815 = v933;
                        *(_DWORD *)v819 = *(_DWORD *)v931;
                        int v825 = v928;
                        *(_DWORD *)v831 = *(_DWORD *)v926;
                        *(_DWORD *)v834 = *(_DWORD *)v924;
                        *(_DWORD *)v841 = *(_DWORD *)v922;
                        *(_DWORD *)v850 = *(_DWORD *)v920;
                        *(_DWORD *)v855 = *(_DWORD *)v918;
                        LOBYTE(v544) = v1021;
                        *(_DWORD *)((char *)&v544 + 1) = *(_DWORD *)v1020;
                        HIDWORD(v544) = *(_DWORD *)&v1020[3];
                        LOBYTE(v546) = v1019;
                        *(_DWORD *)((char *)&v546 + 1) = *(_DWORD *)v1018;
                        HIDWORD(v546) = *(_DWORD *)&v1018[3];
                        *(_DWORD *)v564 = *(_DWORD *)v1017;
                        *(_DWORD *)&v564[3] = *(_DWORD *)&v1017[3];
                        char v567 = v1016;
                        int v568 = v1014;
                        __int16 v569 = v1015;
                        char v571 = v1013;
                        *(_DWORD *)v572 = *(_DWORD *)v1012;
                        *(_DWORD *)&v572[3] = *(_DWORD *)&v1012[3];
                        __int16 v578 = v1011;
                        int v577 = v1010;
                        char v592 = v1009;
                        *(_DWORD *)&v593[3] = *(_DWORD *)&v1008[3];
                        char v607 = v1007;
                        *(_DWORD *)&v608[3] = *(_DWORD *)&v1006[3];
                        char v610 = v1005;
                        *(_DWORD *)&v611[3] = *(_DWORD *)&v1004[3];
                        char v619 = v1003;
                        *(_DWORD *)&v620[3] = *(_DWORD *)&v1002[3];
                        char v630 = v1001;
                        *(_DWORD *)&v631[3] = *(_DWORD *)&v1000[3];
                        char v633 = v999;
                        *(_DWORD *)&v634[3] = *(_DWORD *)&v998[3];
                        char v636 = v997;
                        *(_DWORD *)&v637[3] = *(_DWORD *)&v996[3];
                        char v639 = v995;
                        *(_DWORD *)&v640[3] = *(_DWORD *)&v994[3];
                        char v646 = v993;
                        *(_DWORD *)&v647[3] = *(_DWORD *)&v992[3];
                        char v649 = v991;
                        *(_DWORD *)&v650[3] = *(_DWORD *)&v990[3];
                        char v654 = v989;
                        *(_DWORD *)&v655[3] = *(_DWORD *)&v988[3];
                        char v659 = v987;
                        *(_DWORD *)&v660[3] = *(_DWORD *)&v986[3];
                        char v662 = v985;
                        *(_DWORD *)&v663[3] = *(_DWORD *)&v984[3];
                        char v665 = v983;
                        *(_DWORD *)&v666[3] = *(_DWORD *)&v982[3];
                        char v670 = v981;
                        *(_DWORD *)&v671[3] = *(_DWORD *)&v980[3];
                        char v673 = v979;
                        *(_DWORD *)&v674[3] = *(_DWORD *)&v978[3];
                        char v676 = v977;
                        char v682 = v976;
                        char v700 = v974;
                        *(_DWORD *)&v701[3] = *(_DWORD *)&v973[3];
                        char v705 = v972;
                        *(_DWORD *)&v706[3] = *(_DWORD *)&v971[3];
                        char v710 = v970;
                        __int16 v713 = v969;
                        char v717 = v967;
                        *(_DWORD *)&v718[3] = *(_DWORD *)&v966[3];
                        char v720 = v965;
                        *(_DWORD *)&v721[3] = *(_DWORD *)&v964[3];
                        char v743 = v963;
                        *(_DWORD *)&v744[3] = *(_DWORD *)&v962[3];
                        char v751 = v961;
                        char v753 = v959;
                        *(_DWORD *)&v754[3] = *(_DWORD *)&v958[3];
                        char v762 = v957;
                        char v766 = v956;
                        char v768 = v954;
                        *(_DWORD *)&v769[3] = *(_DWORD *)&v953[3];
                        char v771 = v952;
                        __int16 v774 = v951;
                        char v776 = v949;
                        *(_DWORD *)&v777[3] = *(_DWORD *)&v948[3];
                        char v779 = v947;
                        *(_DWORD *)&v780[3] = *(_DWORD *)&v946[3];
                        char v784 = v945;
                        *(_DWORD *)&v785[3] = *(_DWORD *)&v944[3];
                        char v787 = v943;
                        *(_DWORD *)&v788[3] = *(_DWORD *)&v942[3];
                        char v794 = v941;
                        *(_DWORD *)&v795[3] = *(_DWORD *)&v940[3];
                        char v801 = v939;
                        *(_DWORD *)&v802[3] = *(_DWORD *)&v938[3];
                        char v804 = v937;
                        *(_DWORD *)&v805[3] = *(_DWORD *)&v936[3];
                        char v812 = v935;
                        char v816 = v934;
                        char v818 = v932;
                        *(_DWORD *)&v819[3] = *(_DWORD *)&v931[3];
                        char v823 = v930;
                        __int16 v826 = v929;
                        char v830 = v927;
                        *(_DWORD *)&v831[3] = *(_DWORD *)&v926[3];
                        char v833 = v925;
                        *(_DWORD *)&v834[3] = *(_DWORD *)&v924[3];
                        char v840 = v923;
                        *(_DWORD *)&v841[3] = *(_DWORD *)&v922[3];
                        char v849 = v921;
                        *(_DWORD *)&v850[3] = *(_DWORD *)&v920[3];
                        uint64_t v851 = v360;
                        unint64_t v852 = v359;
                        uint64_t v853 = v304;
                        char v854 = v919;
                        *(_DWORD *)&v855[3] = *(_DWORD *)&v918[3];
                        uint64_t v856 = v358;
                        unint64_t v857 = v357;
                        uint64_t v858 = v302;
                        uint64_t v859 = v356;
                        uint64_t v860 = v300;
                        char v861 = v917;
                        *(_DWORD *)v862 = *(_DWORD *)v916;
                        *(_DWORD *)&v862[3] = *(_DWORD *)&v916[3];
                        uint64_t v863 = v298;
                        char v864 = v915;
                        *(_DWORD *)v865 = *(_DWORD *)v914;
                        *(_DWORD *)&v865[3] = *(_DWORD *)&v914[3];
                        uint64_t v866 = v297;
                        char v867 = v913;
                        *(_DWORD *)v868 = *(_DWORD *)v912;
                        *(_DWORD *)&v868[3] = *(_DWORD *)&v912[3];
                        uint64_t v869 = v295;
                        char v870 = v911;
                        *(_DWORD *)v871 = *(_DWORD *)v910;
                        *(_DWORD *)&v871[3] = *(_DWORD *)&v910[3];
                        uint64_t v872 = v355;
                        uint64_t v873 = v354;
                        uint64_t v874 = v353;
                        unint64_t v875 = v352;
                        uint64_t v876 = v533;
                        char v877 = v909;
                        *(_DWORD *)v878 = *(_DWORD *)v908;
                        *(_DWORD *)&v878[3] = *(_DWORD *)&v908[3];
                        uint64_t v879 = v351;
                        uint64_t v880 = v279;
                        char v881 = v907;
                        *(_DWORD *)v882 = *(_DWORD *)v906;
                        *(_DWORD *)&v882[3] = *(_DWORD *)&v906[3];
                        uint64_t v883 = v278;
                        char v884 = v905;
                        char v885 = v277;
                        char v886 = v276;
                        int v887 = *(_DWORD *)&v904[7];
                        char v888 = v904[11];
                        uint64_t v889 = v274;
                        uint64_t v890 = v350;
                        char v891 = v272;
                        *(_DWORD *)v892 = *(_DWORD *)v904;
                        *(_DWORD *)&v892[3] = *(_DWORD *)&v904[3];
                        uint64_t v893 = v271;
                        char v894 = v903;
                        *(_DWORD *)v895 = *(_DWORD *)v902;
                        *(_DWORD *)&v895[3] = *(_DWORD *)&v902[3];
                        uint64_t v896 = v270;
                        char v897 = v901;
                        char v898 = v269;
                        char v899 = v267;
                        sub_10005F6D0(&v542);
                        return memcpy(v538, v541, 0x883uLL);
                      }
                      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v353, v352);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v358, v357);
                      sub_1000048CC(v360, v359);
                      sub_1000048CC(v362, v361);
                      sub_1000048CC(v364, v363);
                      sub_1000048CC(v366, v365);
                      sub_1000048CC(v368, v367);
                      sub_1000048CC(v370, v369);
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v373, v372);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v378, v377);
                      sub_1000048CC(v380, v379);
                      sub_1000048CC(v382, v381);
                      sub_1000048CC(v384, v383);
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v386, v387);
                      sub_1000048CC(v388, v389);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v398, v400);
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v405, v408);
                      sub_10005EC98(v391, v392);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v418, v419);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v427, v428);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v432, v433);
                      sub_1000048CC(v434, v435);
                      sub_1000048CC(v436, v437);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v446, v447);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v451, v452);
                      sub_1000048CC(v453, v454);
                      sub_1000048CC(v455, v456);
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v458, v459);
                      swift_bridgeObjectRelease();
                      sub_1000048CC(v462, v461);
                      sub_1000048CC(v463, v464);
                      sub_1000048CC(v465, v466);
                      sub_1000048CC(v468, v467);
                      sub_1000048CC(v469, v470);
                      LODWORD(v539) = 1;
                      unint64_t v12 = 0x18A61EE7F7E47F8;
                      unint64_t v14 = 4383150;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_4:
  __n128 result = (void *)sub_100002E34((uint64_t)v540);
  uint64_t v499 = (v13 >> 1) & 1;
  LODWORD(v498) = v13 & 1;
  uint64_t v500 = (v13 >> 2) & 1;
  uint64_t v501 = (v13 >> 3) & 1;
  uint64_t v502 = (v13 >> 4) & 1;
  uint64_t v503 = (v13 >> 5) & 1;
  uint64_t v504 = (v13 >> 6) & 1;
  uint64_t v505 = (v13 >> 7) & 1;
  uint64_t v506 = (v13 >> 9) & 1;
  uint64_t v507 = (v13 >> 11) & 1;
  uint64_t v508 = (v13 >> 14) & 1;
  uint64_t v509 = (v13 >> 17) & 1;
  uint64_t v510 = (v13 >> 18) & 1;
  uint64_t v511 = (v13 >> 19) & 1;
  uint64_t v512 = (v13 >> 20) & 1;
  uint64_t v513 = (v13 >> 21) & 1;
  uint64_t v514 = (v13 >> 23) & 1;
  uint64_t v515 = (v13 >> 28) & 1;
  uint64_t v516 = (v13 >> 29) & 1;
  uint64_t v517 = (v13 >> 30) & 1;
  uint64_t v518 = (v13 >> 39) & 1;
  uint64_t v519 = (v13 >> 42) & 1;
  uint64_t v520 = (v13 >> 43) & 1;
  uint64_t v521 = (v13 >> 45) & 1;
  uint64_t v522 = (v13 >> 46) & 1;
  uint64_t v523 = (v13 >> 49) & 1;
  uint64_t v524 = (v13 >> 50) & 1;
  uint64_t v525 = (v13 >> 51) & 1;
  uint64_t v526 = HIBYTE(v13) & 1;
  uint64_t v527 = (v13 >> 59) & 1;
  uint64_t v528 = (v13 >> 62) & 1;
  uint64_t v529 = v13 >> 63;
  uint64_t v530 = (v14 >> 1) & 1;
  uint64_t v531 = (v14 >> 2) & 1;
  uint64_t v532 = (v14 >> 3) & 1;
  uint64_t v533 = (v14 >> 5) & 1;
  uint64_t v534 = (v14 >> 7) & 1;
  uint64_t v535 = (v14 >> 8) & 1;
  uint64_t v536 = (v14 >> 13) & 1;
  uint64_t v537 = (v14 >> 14) & 1;
  v538 = (void *)((v14 >> 15) & 1);
  v540 = (void *)((v14 >> 17) & 1);
  uint64_t v16 = (v12 >> 4) & 1;
  uint64_t v17 = (v12 >> 5) & 1;
  uint64_t v18 = (v12 >> 6) & 1;
  uint64_t v19 = (v12 >> 7) & 1;
  uint64_t v20 = (v12 >> 8) & 1;
  uint64_t v21 = (v12 >> 9) & 1;
  uint64_t v22 = (v12 >> 10) & 1;
  uint64_t v471 = (v12 >> 14) & 1;
  uint64_t v472 = (v12 >> 17) & 1;
  uint64_t v473 = (v12 >> 18) & 1;
  uint64_t v474 = (v12 >> 19) & 1;
  uint64_t v475 = (v12 >> 20) & 1;
  uint64_t v476 = (v12 >> 21) & 1;
  uint64_t v477 = (v12 >> 22) & 1;
  uint64_t v478 = (v12 >> 24) & 1;
  uint64_t v479 = (v12 >> 25) & 1;
  uint64_t v480 = (v12 >> 26) & 1;
  uint64_t v481 = (v12 >> 27) & 1;
  uint64_t v482 = (v12 >> 28) & 1;
  uint64_t v483 = (v12 >> 29) & 1;
  uint64_t v484 = (v12 >> 30) & 1;
  uint64_t v485 = (v12 >> 33) & 1;
  uint64_t v486 = (v12 >> 34) & 1;
  uint64_t v487 = (v12 >> 35) & 1;
  uint64_t v488 = (v12 >> 37) & 1;
  uint64_t v489 = (v12 >> 38) & 1;
  uint64_t v490 = (v12 >> 39) & 1;
  uint64_t v491 = (v12 >> 40) & 1;
  uint64_t v492 = (v12 >> 45) & 1;
  uint64_t v493 = (v12 >> 46) & 1;
  uint64_t v494 = (v12 >> 49) & 1;
  uint64_t v495 = (v12 >> 51) & 1;
  uint64_t v496 = (v12 >> 55) & 1;
  uint64_t v497 = HIBYTE(v12) & 1;
  if ((v12 & 8) != 0)
  {
    __n128 result = (void *)sub_1000048CC(v469, v470);
    if (v16)
    {
LABEL_6:
      __n128 result = (void *)sub_1000048CC(v468, v467);
      if (!v17) {
        goto LABEL_7;
      }
      goto LABEL_265;
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  if (!v17)
  {
LABEL_7:
    if (v18) {
      goto LABEL_8;
    }
    goto LABEL_266;
  }
LABEL_265:
  __n128 result = (void *)sub_1000048CC(v465, v466);
  if (v18)
  {
LABEL_8:
    __n128 result = (void *)sub_1000048CC(v463, v464);
    if (!v19) {
      goto LABEL_9;
    }
    goto LABEL_267;
  }
LABEL_266:
  if (!v19)
  {
LABEL_9:
    if (v20) {
      goto LABEL_10;
    }
    goto LABEL_268;
  }
LABEL_267:
  __n128 result = (void *)sub_1000048CC(v462, v461);
  if (v20)
  {
LABEL_10:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v21) {
      goto LABEL_11;
    }
    goto LABEL_269;
  }
LABEL_268:
  if (!v21)
  {
LABEL_11:
    if (v22) {
      goto LABEL_12;
    }
    goto LABEL_270;
  }
LABEL_269:
  __n128 result = (void *)sub_1000048CC(v458, v459);
  if (v22)
  {
LABEL_12:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v471) {
      goto LABEL_13;
    }
    goto LABEL_271;
  }
LABEL_270:
  if (!v471)
  {
LABEL_13:
    if (v472) {
      goto LABEL_14;
    }
    goto LABEL_272;
  }
LABEL_271:
  __n128 result = (void *)sub_1000048CC(v455, v456);
  if (v472)
  {
LABEL_14:
    __n128 result = (void *)sub_1000048CC(v453, v454);
    if (!v473) {
      goto LABEL_15;
    }
    goto LABEL_273;
  }
LABEL_272:
  if (!v473)
  {
LABEL_15:
    if (v474) {
      goto LABEL_16;
    }
    goto LABEL_274;
  }
LABEL_273:
  __n128 result = (void *)sub_1000048CC(v451, v452);
  if (v474)
  {
LABEL_16:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v475) {
      goto LABEL_17;
    }
    goto LABEL_275;
  }
LABEL_274:
  if (!v475)
  {
LABEL_17:
    if (v476) {
      goto LABEL_18;
    }
    goto LABEL_276;
  }
LABEL_275:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v476)
  {
LABEL_18:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v477) {
      goto LABEL_19;
    }
    goto LABEL_277;
  }
LABEL_276:
  if (!v477)
  {
LABEL_19:
    if (v478) {
      goto LABEL_20;
    }
    goto LABEL_278;
  }
LABEL_277:
  __n128 result = (void *)sub_1000048CC(v446, v447);
  if (v478)
  {
LABEL_20:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v479) {
      goto LABEL_21;
    }
    goto LABEL_279;
  }
LABEL_278:
  if (!v479)
  {
LABEL_21:
    if (v480) {
      goto LABEL_22;
    }
    goto LABEL_280;
  }
LABEL_279:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v480)
  {
LABEL_22:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v481) {
      goto LABEL_23;
    }
    goto LABEL_281;
  }
LABEL_280:
  if (!v481)
  {
LABEL_23:
    if (v482) {
      goto LABEL_24;
    }
    goto LABEL_282;
  }
LABEL_281:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v482)
  {
LABEL_24:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v483) {
      goto LABEL_25;
    }
    goto LABEL_283;
  }
LABEL_282:
  if (!v483)
  {
LABEL_25:
    if (v484) {
      goto LABEL_26;
    }
    goto LABEL_284;
  }
LABEL_283:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v484)
  {
LABEL_26:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v485) {
      goto LABEL_27;
    }
    goto LABEL_285;
  }
LABEL_284:
  if (!v485)
  {
LABEL_27:
    if (v486) {
      goto LABEL_28;
    }
    goto LABEL_286;
  }
LABEL_285:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v486)
  {
LABEL_28:
    __n128 result = (void *)sub_1000048CC(v436, v437);
    if (!v487) {
      goto LABEL_29;
    }
    goto LABEL_287;
  }
LABEL_286:
  if (!v487)
  {
LABEL_29:
    if (v488) {
      goto LABEL_30;
    }
    goto LABEL_288;
  }
LABEL_287:
  __n128 result = (void *)sub_1000048CC(v434, v435);
  if (v488)
  {
LABEL_30:
    __n128 result = (void *)sub_1000048CC(v432, v433);
    if (!v489) {
      goto LABEL_31;
    }
    goto LABEL_289;
  }
LABEL_288:
  if (!v489)
  {
LABEL_31:
    if (v490) {
      goto LABEL_32;
    }
    goto LABEL_290;
  }
LABEL_289:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v490)
  {
LABEL_32:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v491) {
      goto LABEL_33;
    }
    goto LABEL_291;
  }
LABEL_290:
  if (!v491)
  {
LABEL_33:
    if (v492) {
      goto LABEL_34;
    }
    goto LABEL_292;
  }
LABEL_291:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v492)
  {
LABEL_34:
    __n128 result = (void *)sub_1000048CC(v427, v428);
    if (!v493) {
      goto LABEL_35;
    }
    goto LABEL_293;
  }
LABEL_292:
  if (!v493)
  {
LABEL_35:
    if (v494) {
      goto LABEL_36;
    }
    goto LABEL_294;
  }
LABEL_293:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v494)
  {
LABEL_36:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v495) {
      goto LABEL_37;
    }
    goto LABEL_295;
  }
LABEL_294:
  if (!v495)
  {
LABEL_37:
    if (v496) {
      goto LABEL_38;
    }
    goto LABEL_296;
  }
LABEL_295:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v496)
  {
LABEL_38:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v497) {
      goto LABEL_39;
    }
    goto LABEL_297;
  }
LABEL_296:
  if (!v497)
  {
LABEL_39:
    if (v498) {
      goto LABEL_40;
    }
    goto LABEL_298;
  }
LABEL_297:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v498)
  {
LABEL_40:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v499) {
      goto LABEL_41;
    }
    goto LABEL_299;
  }
LABEL_298:
  if (!v499)
  {
LABEL_41:
    if (v500) {
      goto LABEL_42;
    }
    goto LABEL_300;
  }
LABEL_299:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v500)
  {
LABEL_42:
    __n128 result = (void *)sub_1000048CC(v418, v419);
    if (!v501) {
      goto LABEL_43;
    }
    goto LABEL_301;
  }
LABEL_300:
  if (!v501)
  {
LABEL_43:
    if (v502) {
      goto LABEL_44;
    }
    goto LABEL_302;
  }
LABEL_301:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v502)
  {
LABEL_44:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v503) {
      goto LABEL_45;
    }
    goto LABEL_303;
  }
LABEL_302:
  if (!v503)
  {
LABEL_45:
    if (v504) {
      goto LABEL_46;
    }
    goto LABEL_304;
  }
LABEL_303:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v504)
  {
LABEL_46:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v505) {
      goto LABEL_47;
    }
    goto LABEL_305;
  }
LABEL_304:
  if (!v505)
  {
LABEL_47:
    if (v506) {
      goto LABEL_48;
    }
    goto LABEL_306;
  }
LABEL_305:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v506)
  {
LABEL_48:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v507) {
      goto LABEL_49;
    }
    goto LABEL_307;
  }
LABEL_306:
  if (!v507)
  {
LABEL_49:
    if (v508) {
      goto LABEL_50;
    }
    goto LABEL_308;
  }
LABEL_307:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v508)
  {
LABEL_50:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v509) {
      goto LABEL_51;
    }
    goto LABEL_309;
  }
LABEL_308:
  if (!v509)
  {
LABEL_51:
    if (v510) {
      goto LABEL_52;
    }
    goto LABEL_310;
  }
LABEL_309:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v510)
  {
LABEL_52:
    __n128 result = (void *)sub_10005EC98(v391, v392);
    if (!v511) {
      goto LABEL_53;
    }
    goto LABEL_311;
  }
LABEL_310:
  if (!v511)
  {
LABEL_53:
    if (v512) {
      goto LABEL_54;
    }
    goto LABEL_312;
  }
LABEL_311:
  __n128 result = (void *)sub_1000048CC(v405, v408);
  if (v512)
  {
LABEL_54:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v513) {
      goto LABEL_55;
    }
    goto LABEL_313;
  }
LABEL_312:
  if (!v513)
  {
LABEL_55:
    if (v514) {
      goto LABEL_56;
    }
    goto LABEL_314;
  }
LABEL_313:
  __n128 result = (void *)sub_1000048CC(v398, v400);
  if (v514)
  {
LABEL_56:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v515) {
      goto LABEL_57;
    }
    goto LABEL_315;
  }
LABEL_314:
  if (!v515)
  {
LABEL_57:
    if (v516) {
      goto LABEL_58;
    }
    goto LABEL_316;
  }
LABEL_315:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v516)
  {
LABEL_58:
    __n128 result = (void *)sub_1000048CC(v388, v389);
    if (!v517) {
      goto LABEL_59;
    }
    goto LABEL_317;
  }
LABEL_316:
  if (!v517)
  {
LABEL_59:
    if (v518) {
      goto LABEL_60;
    }
    goto LABEL_318;
  }
LABEL_317:
  __n128 result = (void *)sub_1000048CC(v386, v387);
  if (v518)
  {
LABEL_60:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v519) {
      goto LABEL_61;
    }
    goto LABEL_319;
  }
LABEL_318:
  if (!v519)
  {
LABEL_61:
    if (v520) {
      goto LABEL_62;
    }
    goto LABEL_320;
  }
LABEL_319:
  __n128 result = (void *)sub_1000048CC(v384, v383);
  if (v520)
  {
LABEL_62:
    __n128 result = (void *)sub_1000048CC(v382, v381);
    if (!v521) {
      goto LABEL_63;
    }
    goto LABEL_321;
  }
LABEL_320:
  if (!v521)
  {
LABEL_63:
    if (v522) {
      goto LABEL_64;
    }
    goto LABEL_322;
  }
LABEL_321:
  __n128 result = (void *)sub_1000048CC(v380, v379);
  if (v522)
  {
LABEL_64:
    __n128 result = (void *)sub_1000048CC(v378, v377);
    if (!v523) {
      goto LABEL_65;
    }
    goto LABEL_323;
  }
LABEL_322:
  if (!v523)
  {
LABEL_65:
    if (v524) {
      goto LABEL_66;
    }
    goto LABEL_324;
  }
LABEL_323:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v524)
  {
LABEL_66:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v525) {
      goto LABEL_67;
    }
    goto LABEL_325;
  }
LABEL_324:
  if (!v525)
  {
LABEL_67:
    if (v526) {
      goto LABEL_68;
    }
    goto LABEL_326;
  }
LABEL_325:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v526)
  {
LABEL_68:
    __n128 result = (void *)sub_1000048CC(v373, v372);
    if (!v527) {
      goto LABEL_69;
    }
    goto LABEL_327;
  }
LABEL_326:
  if (!v527)
  {
LABEL_69:
    if (v528) {
      goto LABEL_70;
    }
    goto LABEL_328;
  }
LABEL_327:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v528)
  {
LABEL_70:
    __n128 result = (void *)sub_1000048CC(v370, v369);
    if (!v529) {
      goto LABEL_71;
    }
    goto LABEL_329;
  }
LABEL_328:
  if (!v529)
  {
LABEL_71:
    if (v530) {
      goto LABEL_72;
    }
    goto LABEL_330;
  }
LABEL_329:
  __n128 result = (void *)sub_1000048CC(v368, v367);
  if (v530)
  {
LABEL_72:
    __n128 result = (void *)sub_1000048CC(v366, v365);
    if (!v531) {
      goto LABEL_73;
    }
    goto LABEL_331;
  }
LABEL_330:
  if (!v531)
  {
LABEL_73:
    if (v532) {
      goto LABEL_74;
    }
    goto LABEL_332;
  }
LABEL_331:
  __n128 result = (void *)sub_1000048CC(v364, v363);
  if (v532)
  {
LABEL_74:
    __n128 result = (void *)sub_1000048CC(v362, v361);
    if (!v533) {
      goto LABEL_75;
    }
    goto LABEL_333;
  }
LABEL_332:
  if (!v533)
  {
LABEL_75:
    if (v534) {
      goto LABEL_76;
    }
    goto LABEL_334;
  }
LABEL_333:
  __n128 result = (void *)sub_1000048CC(v360, v359);
  if (v534)
  {
LABEL_76:
    __n128 result = (void *)sub_1000048CC(v358, v357);
    if (!v535) {
      goto LABEL_77;
    }
    goto LABEL_335;
  }
LABEL_334:
  if (!v535)
  {
LABEL_77:
    if (v536) {
      goto LABEL_78;
    }
    goto LABEL_336;
  }
LABEL_335:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v536)
  {
LABEL_78:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v537) {
      goto LABEL_79;
    }
    goto LABEL_337;
  }
LABEL_336:
  if (!v537)
  {
LABEL_79:
    if (v538) {
      goto LABEL_80;
    }
    goto LABEL_338;
  }
LABEL_337:
  __n128 result = (void *)swift_bridgeObjectRelease();
  if (v538)
  {
LABEL_80:
    __n128 result = (void *)sub_1000048CC(v353, v352);
    if (!v540) {
      goto LABEL_81;
    }
LABEL_339:
    __n128 result = (void *)swift_bridgeObjectRelease();
    if (!v539) {
      return result;
    }
    return (void *)swift_bridgeObjectRelease();
  }
LABEL_338:
  if (v540) {
    goto LABEL_339;
  }
LABEL_81:
  if (v539) {
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1000564B4()
{
  unint64_t result = qword_100090B40;
  if (!qword_100090B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090B40);
  }
  return result;
}

uint64_t sub_100056508()
{
  uint64_t v0 = sub_1000785C0();
  swift_bridgeObjectRelease();
  uint64_t v1 = 0;
  uint64_t result = 48;
  switch(v0)
  {
    case 0:
      goto LABEL_52;
    case 1:
      uint64_t v1 = 1;
      goto LABEL_52;
    case 2:
      uint64_t v1 = 2;
      goto LABEL_52;
    case 3:
      uint64_t v1 = 3;
      goto LABEL_52;
    case 4:
      uint64_t v1 = 4;
      goto LABEL_52;
    case 5:
      uint64_t v1 = 5;
      goto LABEL_52;
    case 6:
      uint64_t v1 = 6;
      goto LABEL_52;
    case 7:
      uint64_t v1 = 7;
      goto LABEL_52;
    case 8:
      uint64_t v1 = 8;
      goto LABEL_52;
    case 9:
      uint64_t v1 = 9;
      goto LABEL_52;
    case 10:
      uint64_t v1 = 10;
      goto LABEL_52;
    case 11:
      uint64_t v1 = 11;
      goto LABEL_52;
    case 12:
      uint64_t v1 = 12;
      goto LABEL_52;
    case 13:
      uint64_t v1 = 13;
      goto LABEL_52;
    case 14:
      uint64_t v1 = 14;
      goto LABEL_52;
    case 15:
      uint64_t v1 = 15;
      goto LABEL_52;
    case 16:
      uint64_t v1 = 16;
      goto LABEL_52;
    case 17:
      uint64_t v1 = 17;
      goto LABEL_52;
    case 18:
      uint64_t v1 = 18;
      goto LABEL_52;
    case 19:
      uint64_t v1 = 19;
      goto LABEL_52;
    case 20:
      uint64_t v1 = 20;
      goto LABEL_52;
    case 21:
      uint64_t v1 = 21;
      goto LABEL_52;
    case 22:
      uint64_t v1 = 22;
      goto LABEL_52;
    case 23:
      uint64_t v1 = 23;
      goto LABEL_52;
    case 24:
      uint64_t v1 = 24;
      goto LABEL_52;
    case 25:
      uint64_t v1 = 25;
      goto LABEL_52;
    case 26:
      uint64_t v1 = 26;
      goto LABEL_52;
    case 27:
      uint64_t v1 = 27;
      goto LABEL_52;
    case 28:
      uint64_t v1 = 28;
      goto LABEL_52;
    case 29:
      uint64_t v1 = 29;
      goto LABEL_52;
    case 30:
      uint64_t v1 = 30;
      goto LABEL_52;
    case 31:
      uint64_t v1 = 31;
      goto LABEL_52;
    case 32:
      uint64_t v1 = 32;
      goto LABEL_52;
    case 33:
      uint64_t v1 = 33;
      goto LABEL_52;
    case 34:
      uint64_t v1 = 34;
      goto LABEL_52;
    case 35:
      uint64_t v1 = 35;
      goto LABEL_52;
    case 36:
      uint64_t v1 = 36;
      goto LABEL_52;
    case 37:
      uint64_t v1 = 37;
      goto LABEL_52;
    case 38:
      uint64_t v1 = 38;
      goto LABEL_52;
    case 39:
      uint64_t v1 = 39;
      goto LABEL_52;
    case 40:
      uint64_t v1 = 40;
      goto LABEL_52;
    case 41:
      uint64_t v1 = 41;
      goto LABEL_52;
    case 42:
      uint64_t v1 = 42;
      goto LABEL_52;
    case 43:
      uint64_t v1 = 43;
      goto LABEL_52;
    case 44:
      uint64_t v1 = 44;
      goto LABEL_52;
    case 45:
      uint64_t v1 = 45;
      goto LABEL_52;
    case 46:
      uint64_t v1 = 46;
      goto LABEL_52;
    case 47:
      uint64_t v1 = 47;
LABEL_52:
      uint64_t result = v1;
      break;
    case 48:
      return result;
    case 49:
      uint64_t result = 49;
      break;
    case 50:
      uint64_t result = 50;
      break;
    case 51:
      uint64_t result = 51;
      break;
    case 52:
      uint64_t result = 52;
      break;
    case 53:
      uint64_t result = 53;
      break;
    case 54:
      uint64_t result = 54;
      break;
    case 55:
      uint64_t result = 55;
      break;
    case 56:
      uint64_t result = 56;
      break;
    case 57:
      uint64_t result = 57;
      break;
    case 58:
      uint64_t result = 58;
      break;
    case 59:
      uint64_t result = 59;
      break;
    case 60:
      uint64_t result = 60;
      break;
    case 61:
      uint64_t result = 61;
      break;
    case 62:
      uint64_t result = 62;
      break;
    case 63:
      uint64_t result = 63;
      break;
    case 64:
      uint64_t result = 64;
      break;
    case 65:
      uint64_t result = 65;
      break;
    case 66:
      uint64_t result = 66;
      break;
    case 67:
      uint64_t result = 67;
      break;
    case 68:
      uint64_t result = 68;
      break;
    case 69:
      uint64_t result = 69;
      break;
    case 70:
      uint64_t result = 70;
      break;
    case 71:
      uint64_t result = 71;
      break;
    case 72:
      uint64_t result = 72;
      break;
    case 73:
      uint64_t result = 73;
      break;
    case 74:
      uint64_t result = 74;
      break;
    case 75:
      uint64_t result = 75;
      break;
    case 76:
      uint64_t result = 76;
      break;
    case 77:
      uint64_t result = 77;
      break;
    case 78:
      uint64_t result = 78;
      break;
    case 79:
      uint64_t result = 79;
      break;
    case 80:
      uint64_t result = 80;
      break;
    case 81:
      uint64_t result = 81;
      break;
    case 82:
      uint64_t result = 82;
      break;
    case 83:
      uint64_t result = 83;
      break;
    case 84:
      uint64_t result = 84;
      break;
    case 85:
      uint64_t result = 85;
      break;
    case 86:
      uint64_t result = 86;
      break;
    case 87:
      uint64_t result = 87;
      break;
    case 88:
      uint64_t result = 88;
      break;
    case 89:
      uint64_t result = 89;
      break;
    case 90:
      uint64_t result = 90;
      break;
    case 91:
      uint64_t result = 91;
      break;
    case 92:
      uint64_t result = 92;
      break;
    case 93:
      uint64_t result = 93;
      break;
    case 94:
      uint64_t result = 94;
      break;
    case 95:
      uint64_t result = 95;
      break;
    case 96:
      uint64_t result = 96;
      break;
    case 97:
      uint64_t result = 97;
      break;
    case 98:
      uint64_t result = 98;
      break;
    case 99:
      uint64_t result = 99;
      break;
    case 100:
      uint64_t result = 100;
      break;
    case 101:
      uint64_t result = 101;
      break;
    case 102:
      uint64_t result = 102;
      break;
    case 103:
      uint64_t result = 103;
      break;
    case 104:
      uint64_t result = 104;
      break;
    case 105:
      uint64_t result = 105;
      break;
    case 106:
      uint64_t result = 106;
      break;
    case 107:
      uint64_t result = 107;
      break;
    case 108:
      uint64_t result = 108;
      break;
    case 109:
      uint64_t result = 109;
      break;
    case 110:
      uint64_t result = 110;
      break;
    case 111:
      uint64_t result = 111;
      break;
    case 112:
      uint64_t result = 112;
      break;
    case 113:
      uint64_t result = 113;
      break;
    case 114:
      uint64_t result = 114;
      break;
    case 115:
      uint64_t result = 115;
      break;
    case 116:
      uint64_t result = 116;
      break;
    case 117:
      uint64_t result = 117;
      break;
    case 118:
      uint64_t result = 118;
      break;
    case 119:
      uint64_t result = 119;
      break;
    case 120:
      uint64_t result = 120;
      break;
    case 121:
      uint64_t result = 121;
      break;
    case 122:
      uint64_t result = 122;
      break;
    case 123:
      uint64_t result = 123;
      break;
    case 124:
      uint64_t result = 124;
      break;
    case 125:
      uint64_t result = 125;
      break;
    case 126:
      uint64_t result = 126;
      break;
    case 127:
      uint64_t result = 127;
      break;
    default:
      if ((unint64_t)(v0 - 128) >= 0x1C) {
        uint64_t result = 156;
      }
      else {
        uint64_t result = v0 | 0xFFFFFF80;
      }
      break;
  }
  return result;
}

uint64_t sub_100056B8C(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_10008B0F0;
  v6._object = a2;
  unint64_t v4 = sub_100078390(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 6) {
    return 6;
  }
  else {
    return v4;
  }
}

uint64_t sub_100056BD8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100002214(&qword_100090C68);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_1000564B4();
  sub_100078690();
  if (v2) {
    return sub_100002E34((uint64_t)a1);
  }
  char v41 = 0;
  uint64_t v9 = sub_1000783C0();
  uint64_t v11 = v10;
  char v40 = 1;
  swift_bridgeObjectRetain();
  uint64_t v33 = sub_1000783C0();
  char v39 = 2;
  uint64_t v35 = v12;
  swift_bridgeObjectRetain();
  uint64_t v13 = sub_1000783C0();
  uint64_t v34 = v14;
  uint64_t v30 = v13;
  char v38 = 3;
  swift_bridgeObjectRetain();
  uint64_t v31 = 0;
  uint64_t v29 = sub_1000783C0();
  char v37 = 4;
  uint64_t v32 = v15;
  swift_bridgeObjectRetain();
  uint64_t v27 = sub_1000783C0();
  uint64_t v28 = v16;
  char v36 = 5;
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_1000783C0();
  uint64_t v19 = v18;
  uint64_t v20 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v31 = v17;
  v20(v8, v5);
  swift_bridgeObjectRetain();
  sub_100002E34((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v21 = v28;
  swift_bridgeObjectRelease();
  uint64_t v22 = v32;
  swift_bridgeObjectRelease();
  uint64_t v23 = v34;
  swift_bridgeObjectRelease();
  uint64_t v24 = v35;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v33;
  a2[3] = v24;
  a2[4] = v30;
  a2[5] = v23;
  a2[6] = v29;
  a2[7] = v22;
  a2[8] = v27;
  a2[9] = v21;
  a2[10] = v31;
  a2[11] = v19;
  return result;
}

unint64_t sub_100057064()
{
  unint64_t result = qword_100090B50;
  if (!qword_100090B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090B50);
  }
  return result;
}

unint64_t sub_1000570B8()
{
  unint64_t result = qword_100090B68;
  if (!qword_100090B68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090B68);
  }
  return result;
}

uint64_t sub_10005710C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002214(&qword_100090C60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_1000570B8();
  sub_100078690();
  if (v2) {
    return sub_100002E34((uint64_t)a1);
  }
  char v27 = 0;
  uint64_t v9 = sub_1000783C0();
  uint64_t v11 = v10;
  uint64_t v22 = v9;
  char v26 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1000783C0();
  uint64_t v14 = v13;
  uint64_t v20 = v12;
  char v25 = 2;
  swift_bridgeObjectRetain();
  uint64_t v21 = v14;
  uint64_t v15 = sub_1000783F0();
  int v23 = v16;
  uint64_t v19 = v15;
  char v24 = 3;
  LOBYTE(v14) = sub_1000783D0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_100002E34((uint64_t)a1);
  uint64_t v17 = v21;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v22;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v20;
  *(void *)(a2 + 24) = v17;
  *(void *)(a2 + 32) = v19;
  *(unsigned char *)(a2 + 40) = v23 & 1;
  *(unsigned char *)(a2 + 41) = v14;
  return result;
}

unint64_t sub_1000573D4()
{
  unint64_t result = qword_100090B78;
  if (!qword_100090B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090B78);
  }
  return result;
}

uint64_t sub_100057428(uint64_t a1, void *a2, Swift::OpaquePointer a3)
{
  v7._countAndFlagsBits = a1;
  v7._object = a2;
  unint64_t v5 = sub_100078390(a3, v7);
  swift_bridgeObjectRelease();
  if (v5 >= 4) {
    return 4;
  }
  else {
    return v5;
  }
}

uint64_t sub_100057470@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002214(&qword_100090C58);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_1000573D4();
  sub_100078690();
  if (v2) {
    return sub_100002E34((uint64_t)a1);
  }
  LOBYTE(v26) = 0;
  uint64_t v9 = sub_100078430();
  char v11 = v10;
  LOBYTE(v26) = 1;
  uint64_t v12 = sub_1000783F0();
  int v28 = v13;
  uint64_t v25 = v12;
  char v29 = 2;
  sub_100004864();
  sub_100078410();
  uint64_t v14 = v26;
  LOBYTE(v26) = 3;
  unint64_t v23 = v27;
  uint64_t v24 = v14;
  sub_1000048B8(v14, v27);
  uint64_t v15 = sub_1000783C0();
  uint64_t v17 = v16;
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v22 = v15;
  v18(v8, v5);
  unint64_t v20 = v23;
  uint64_t v19 = v24;
  sub_1000048B8(v24, v23);
  swift_bridgeObjectRetain();
  sub_1000048CC(v19, v20);
  sub_100002E34((uint64_t)a1);
  sub_1000048CC(v19, v20);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v11 & 1;
  *(void *)(a2 + 16) = v25;
  *(unsigned char *)(a2 + 24) = v28 & 1;
  *(void *)(a2 + 32) = v19;
  *(void *)(a2 + 40) = v20;
  *(void *)(a2 + 48) = v22;
  *(void *)(a2 + 56) = v17;
  return result;
}

unint64_t sub_100057734()
{
  unint64_t result = qword_100090B88;
  if (!qword_100090B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090B88);
  }
  return result;
}

uint64_t sub_100057788(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_10008B310;
  v6._object = a2;
  unint64_t v4 = sub_100078390(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 7) {
    return 7;
  }
  else {
    return v4;
  }
}

uint64_t sub_1000577D4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100002214(&qword_100090C50);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_100057734();
  sub_100078690();
  if (v2) {
    return sub_100002E34((uint64_t)a1);
  }
  uint64_t v55 = a2;
  char v59 = 0;
  sub_100004864();
  sub_100078410();
  uint64_t v9 = v56;
  unint64_t v10 = v57;
  char v59 = 1;
  sub_1000048B8(v56, v57);
  sub_100078410();
  uint64_t v53 = v9;
  unint64_t v54 = v10;
  uint64_t v11 = v56;
  LOBYTE(v56) = 2;
  uint64_t v12 = v11;
  unint64_t v13 = v57;
  sub_1000048B8(v11, v57);
  unint64_t v52 = 0;
  uint64_t v14 = sub_1000783F0();
  int v58 = v15;
  uint64_t v48 = v14;
  uint64_t v51 = v12;
  unint64_t v52 = v13;
  char v59 = 3;
  sub_100078410();
  uint64_t v16 = v56;
  unint64_t v17 = v57;
  char v59 = 4;
  sub_1000048B8(v56, v57);
  uint64_t v44 = 0;
  sub_100078410();
  unint64_t v46 = v17;
  uint64_t v47 = v16;
  uint64_t v18 = v56;
  char v59 = 5;
  unint64_t v45 = v57;
  sub_1000048B8(v56, v57);
  sub_100078410();
  uint64_t v43 = v18;
  uint64_t v19 = v56;
  unint64_t v20 = v57;
  LOBYTE(v56) = 6;
  sub_1000048B8(v19, v57);
  uint64_t v42 = sub_1000783F0();
  int v41 = v21;
  uint64_t v22 = v47;
  unint64_t v49 = v20;
  uint64_t v50 = v19;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_1000048B8(v53, v54);
  uint64_t v23 = v51;
  uint64_t v24 = v22;
  uint64_t v25 = v19;
  unint64_t v26 = v45;
  unint64_t v27 = v52;
  sub_1000048B8(v51, v52);
  uint64_t v28 = v24;
  unint64_t v29 = v46;
  sub_1000048B8(v28, v46);
  sub_1000048B8(v18, v26);
  sub_1000048B8(v25, v20);
  sub_1000048CC(v25, v20);
  sub_1000048CC(v18, v26);
  uint64_t v30 = v47;
  sub_1000048CC(v47, v29);
  sub_1000048CC(v23, v27);
  uint64_t v32 = v53;
  unint64_t v31 = v54;
  sub_1000048CC(v53, v54);
  sub_100002E34((uint64_t)a1);
  sub_1000048CC(v32, v31);
  unint64_t v33 = v27;
  sub_1000048CC(v23, v27);
  sub_1000048CC(v30, v29);
  uint64_t v34 = v43;
  sub_1000048CC(v43, v26);
  unint64_t v35 = v49;
  uint64_t v36 = v50;
  uint64_t result = sub_1000048CC(v50, v49);
  unint64_t v38 = v54;
  char v39 = v55;
  *uint64_t v55 = v32;
  v39[1] = v38;
  v39[2] = v23;
  v39[3] = v33;
  v39[4] = v48;
  *((unsigned char *)v39 + 40) = v58 & 1;
  v39[6] = v47;
  v39[7] = v29;
  v39[8] = v34;
  v39[9] = v26;
  v39[10] = v36;
  v39[11] = v35;
  v39[12] = v42;
  *((unsigned char *)v39 + 104) = v41 & 1;
  return result;
}

unint64_t sub_100057E80()
{
  unint64_t result = qword_100090B98;
  if (!qword_100090B98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090B98);
  }
  return result;
}

uint64_t sub_100057ED4(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_10008B3D8;
  v6._object = a2;
  unint64_t v4 = sub_100078390(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 5) {
    return 5;
  }
  else {
    return v4;
  }
}

uint64_t sub_100057F20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002214(&qword_100090C48);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_100057E80();
  sub_100078690();
  if (v2) {
    return sub_100002E34((uint64_t)a1);
  }
  LOBYTE(v27) = 0;
  uint64_t v9 = sub_1000783C0();
  uint64_t v11 = v10;
  LOBYTE(v27) = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1000783F0();
  int v29 = v13;
  uint64_t v26 = v12;
  LOBYTE(v27) = 2;
  uint64_t v14 = sub_100078430();
  int v23 = v15;
  uint64_t v24 = v14;
  char v30 = 3;
  unint64_t v25 = sub_100004864();
  sub_100078410();
  char v30 = 4;
  unint64_t v21 = v28;
  uint64_t v22 = v27;
  sub_1000048B8(v27, v28);
  sub_100078410();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v16 = v27;
  unint64_t v17 = v28;
  swift_bridgeObjectRetain();
  unint64_t v19 = v21;
  uint64_t v18 = v22;
  sub_1000048B8(v22, v21);
  sub_1000048B8(v16, v17);
  sub_1000048CC(v18, v19);
  swift_bridgeObjectRelease();
  sub_100002E34((uint64_t)a1);
  swift_bridgeObjectRelease();
  sub_1000048CC(v18, v19);
  uint64_t result = sub_1000048CC(v16, v17);
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v26;
  *(unsigned char *)(a2 + 24) = v29 & 1;
  *(void *)(a2 + 32) = v24;
  *(unsigned char *)(a2 + 40) = v23 & 1;
  *(void *)(a2 + 48) = v18;
  *(void *)(a2 + 56) = v19;
  *(void *)(a2 + 64) = v16;
  *(void *)(a2 + 72) = v17;
  return result;
}

uint64_t destroy for IDSMadridProtocolPayload(uint64_t *a1)
{
  unint64_t v2 = a1[6];
  if (v2 >> 60 != 15) {
    sub_1000042CC(a1[5], v2);
  }
  unint64_t v3 = a1[8];
  if (v3 >> 60 != 15) {
    sub_1000042CC(a1[7], v3);
  }
  unint64_t v4 = a1[10];
  if (v4 >> 60 != 15) {
    sub_1000042CC(a1[9], v4);
  }
  unint64_t v5 = a1[12];
  if (v5 >> 60 != 15) {
    sub_1000042CC(a1[11], v5);
  }
  unint64_t v6 = a1[14];
  if (v6 >> 60 != 15) {
    sub_1000042CC(a1[13], v6);
  }
  swift_bridgeObjectRelease();
  unint64_t v7 = a1[18];
  if (v7 >> 60 != 15) {
    sub_1000042CC(a1[17], v7);
  }
  swift_bridgeObjectRelease();
  unint64_t v8 = a1[27];
  if (v8 >> 60 != 15) {
    sub_1000042CC(a1[26], v8);
  }
  unint64_t v9 = a1[30];
  if (v9 >> 60 != 15) {
    sub_1000042CC(a1[29], v9);
  }
  unint64_t v10 = a1[32];
  if (v10 >> 60 != 15) {
    sub_1000042CC(a1[31], v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v11 = a1[40];
  if (v11 >> 60 != 15) {
    sub_1000042CC(a1[39], v11);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v12 = a1[62];
  if (v12 >> 60 != 15) {
    sub_1000042CC(a1[61], v12);
  }
  unint64_t v13 = a1[64];
  if (v13 >> 60 != 15) {
    sub_1000042CC(a1[63], v13);
  }
  unint64_t v14 = a1[68];
  if (v14 >> 60 != 15) {
    sub_1000042CC(a1[67], v14);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v15 = a1[84];
  if (v15 >> 60 != 15) {
    sub_1000042CC(a1[83], v15);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v16 = a1[116];
  if (v16 >> 60 != 15) {
    sub_1000042CC(a1[115], v16);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[146] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v17 = a1[158];
  if (v17 >> 60 != 15) {
    sub_1000042CC(a1[157], v17);
  }
  swift_bridgeObjectRelease();
  unint64_t v18 = a1[162];
  if (v18 >> 60 != 15) {
    sub_1000042CC(a1[161], v18);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v19 = a1[173];
  if (v19 >> 60 != 15) {
    sub_1000042CC(a1[172], v19);
  }
  unint64_t v20 = a1[175];
  if (v20 >> 60 != 15) {
    sub_1000042CC(a1[174], v20);
  }
  swift_bridgeObjectRelease();
  unint64_t v21 = a1[193];
  if (v21 >> 60 != 15) {
    sub_1000042CC(a1[192], v21);
  }
  unint64_t v22 = a1[195];
  if (v22 >> 60 != 15) {
    sub_1000042CC(a1[194], v22);
  }
  unint64_t v23 = a1[199];
  if (v23 >> 60 != 15) {
    sub_1000042CC(a1[198], v23);
  }
  unint64_t v24 = a1[201];
  if (v24 >> 60 != 15) {
    sub_1000042CC(a1[200], v24);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v25 = a1[216];
  if (v25 >> 60 != 15) {
    sub_1000042CC(a1[215], v25);
  }
  swift_bridgeObjectRelease();
  unint64_t v26 = a1[226];
  if (v26 >> 60 != 15) {
    sub_1000042CC(a1[225], v26);
  }
  unint64_t v27 = a1[228];
  if (v27 >> 60 != 15) {
    sub_1000042CC(a1[227], v27);
  }
  unint64_t v28 = a1[232];
  if (v28 >> 60 != 15) {
    sub_1000042CC(a1[231], v28);
  }
  unint64_t v29 = a1[234];
  if (v29 >> 60 != 15) {
    sub_1000042CC(a1[233], v29);
  }
  unint64_t v30 = a1[236];
  if (v30 >> 60 != 15) {
    sub_1000042CC(a1[235], v30);
  }
  unint64_t v31 = a1[240];
  if (v31 >> 60 != 15) {
    sub_1000042CC(a1[239], v31);
  }
  unint64_t v32 = a1[244];
  if (v32 >> 60 != 15) {
    sub_1000042CC(a1[243], v32);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v33 = a1[258];
  if (v33 >> 60 != 15) {
    sub_1000042CC(a1[257], v33);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IDSMadridProtocolPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  unint64_t v5 = (uint64_t *)(a2 + 40);
  unint64_t v6 = *(void *)(a2 + 48);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
  }
  else
  {
    uint64_t v7 = *v5;
    sub_100004214(*v5, *(void *)(a2 + 48));
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v6;
  }
  unint64_t v8 = (uint64_t *)(a2 + 56);
  unint64_t v9 = *(void *)(a2 + 64);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    sub_100004214(*v8, *(void *)(a2 + 64));
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v9;
  }
  unint64_t v11 = (uint64_t *)(a2 + 72);
  unint64_t v12 = *(void *)(a2 + 80);
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v11;
  }
  else
  {
    uint64_t v13 = *v11;
    sub_100004214(*v11, *(void *)(a2 + 80));
    *(void *)(a1 + 72) = v13;
    *(void *)(a1 + 80) = v12;
  }
  unint64_t v14 = (uint64_t *)(a2 + 88);
  unint64_t v15 = *(void *)(a2 + 96);
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v16 = *v14;
    sub_100004214(*v14, *(void *)(a2 + 96));
    *(void *)(a1 + 88) = v16;
    *(void *)(a1 + 96) = v15;
  }
  unint64_t v17 = (uint64_t *)(a2 + 104);
  unint64_t v18 = *(void *)(a2 + 112);
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v17;
  }
  else
  {
    uint64_t v19 = *v17;
    sub_100004214(*v17, *(void *)(a2 + 112));
    *(void *)(a1 + 104) = v19;
    *(void *)(a1 + 112) = v18;
  }
  uint64_t v20 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v20;
  unint64_t v21 = (_OWORD *)(a2 + 136);
  unint64_t v22 = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 136) = *v21;
  }
  else
  {
    uint64_t v23 = *(void *)v21;
    sub_100004214(v23, v22);
    *(void *)(a1 + 136) = v23;
    *(void *)(a1 + 144) = v22;
  }
  uint64_t v24 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v24;
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  unint64_t v25 = (_OWORD *)(a2 + 208);
  unint64_t v26 = *(void *)(a2 + 216);
  swift_bridgeObjectRetain();
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 208) = *v25;
  }
  else
  {
    uint64_t v27 = *(void *)v25;
    sub_100004214(v27, v26);
    *(void *)(a1 + 208) = v27;
    *(void *)(a1 + 216) = v26;
  }
  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
  unint64_t v28 = (uint64_t *)(a2 + 232);
  unint64_t v29 = *(void *)(a2 + 240);
  if (v29 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 232) = *(_OWORD *)v28;
  }
  else
  {
    uint64_t v30 = *v28;
    sub_100004214(*v28, *(void *)(a2 + 240));
    *(void *)(a1 + 232) = v30;
    *(void *)(a1 + 240) = v29;
  }
  unint64_t v31 = (uint64_t *)(a2 + 248);
  unint64_t v32 = *(void *)(a2 + 256);
  if (v32 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 248) = *(_OWORD *)v31;
  }
  else
  {
    uint64_t v33 = *v31;
    sub_100004214(*v31, *(void *)(a2 + 256));
    *(void *)(a1 + 248) = v33;
    *(void *)(a1 + 256) = v32;
  }
  uint64_t v34 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v34;
  uint64_t v35 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v35;
  uint64_t v36 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v36;
  char v37 = (uint64_t *)(a2 + 312);
  unint64_t v38 = *(void *)(a2 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v38 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 312) = *(_OWORD *)v37;
  }
  else
  {
    uint64_t v39 = *v37;
    sub_100004214(*v37, v38);
    *(void *)(a1 + 312) = v39;
    *(void *)(a1 + 320) = v38;
  }
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  uint64_t v40 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v40;
  uint64_t v41 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v41;
  uint64_t v42 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v42;
  uint64_t v43 = *(void *)(a2 + 400);
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  *(void *)(a1 + 400) = v43;
  uint64_t v44 = *(void *)(a2 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v44;
  uint64_t v45 = *(void *)(a2 + 432);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = v45;
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
  uint64_t v46 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v46;
  uint64_t v120 = (uint64_t *)(a2 + 488);
  unint64_t v47 = *(void *)(a2 + 496);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v47 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 488) = *(_OWORD *)v120;
  }
  else
  {
    uint64_t v48 = *v120;
    sub_100004214(*v120, v47);
    *(void *)(a1 + 488) = v48;
    *(void *)(a1 + 496) = v47;
  }
  unint64_t v49 = (uint64_t *)(a2 + 504);
  unint64_t v50 = *(void *)(a2 + 512);
  if (v50 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)v49;
  }
  else
  {
    uint64_t v51 = *v49;
    sub_100004214(*v49, *(void *)(a2 + 512));
    *(void *)(a1 + 504) = v51;
    *(void *)(a1 + 512) = v50;
  }
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  unint64_t v52 = (uint64_t *)(a2 + 536);
  unint64_t v53 = *(void *)(a2 + 544);
  if (v53 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 536) = *(_OWORD *)v52;
  }
  else
  {
    uint64_t v54 = *v52;
    sub_100004214(*v52, *(void *)(a2 + 544));
    *(void *)(a1 + 536) = v54;
    *(void *)(a1 + 544) = v53;
  }
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(unsigned char *)(a1 + 608) = *(unsigned char *)(a2 + 608);
  uint64_t v55 = *(void *)(a2 + 616);
  *(unsigned char *)(a1 + 624) = *(unsigned char *)(a2 + 624);
  *(void *)(a1 + 616) = v55;
  *(unsigned char *)(a1 + 640) = *(unsigned char *)(a2 + 640);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(unsigned char *)(a1 + 656) = *(unsigned char *)(a2 + 656);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  uint64_t v56 = (uint64_t *)(a2 + 664);
  unint64_t v57 = *(void *)(a2 + 672);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v57 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 664) = *(_OWORD *)v56;
  }
  else
  {
    uint64_t v58 = *v56;
    sub_100004214(*v56, v57);
    *(void *)(a1 + 664) = v58;
    *(void *)(a1 + 672) = v57;
  }
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(unsigned char *)(a1 + 704) = *(unsigned char *)(a2 + 704);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  *(unsigned char *)(a1 + 720) = *(unsigned char *)(a2 + 720);
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  uint64_t v59 = *(void *)(a2 + 744);
  *(unsigned char *)(a1 + 752) = *(unsigned char *)(a2 + 752);
  *(void *)(a1 + 744) = v59;
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  *(void *)(a1 + 776) = *(void *)(a2 + 776);
  *(unsigned char *)(a1 + 784) = *(unsigned char *)(a2 + 784);
  *(void *)(a1 + 792) = *(void *)(a2 + 792);
  *(unsigned char *)(a1 + 800) = *(unsigned char *)(a2 + 800);
  *(unsigned char *)(a1 + 816) = *(unsigned char *)(a2 + 816);
  *(void *)(a1 + 808) = *(void *)(a2 + 808);
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  *(unsigned char *)(a1 + 848) = *(unsigned char *)(a2 + 848);
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  *(unsigned char *)(a1 + 864) = *(unsigned char *)(a2 + 864);
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  *(unsigned char *)(a1 + 880) = *(unsigned char *)(a2 + 880);
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  *(_DWORD *)(a1 + 881) = *(_DWORD *)(a2 + 881);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  uint64_t v60 = (uint64_t *)(a2 + 920);
  unint64_t v61 = *(void *)(a2 + 928);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v61 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 920) = *(_OWORD *)v60;
  }
  else
  {
    uint64_t v62 = *v60;
    sub_100004214(*v60, v61);
    *(void *)(a1 + 920) = v62;
    *(void *)(a1 + 928) = v61;
  }
  *(void *)(a1 + 936) = *(void *)(a2 + 936);
  *(void *)(a1 + 944) = *(void *)(a2 + 944);
  *(void *)(a1 + 952) = *(void *)(a2 + 952);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(void *)(a1 + 976) = *(void *)(a2 + 976);
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  *(unsigned char *)(a1 + 1024) = *(unsigned char *)(a2 + 1024);
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  *(void *)(a1 + 1040) = *(void *)(a2 + 1040);
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  *(unsigned char *)(a1 + 1056) = *(unsigned char *)(a2 + 1056);
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  uint64_t v63 = *(void *)(a2 + 1080);
  *(unsigned char *)(a1 + 1088) = *(unsigned char *)(a2 + 1088);
  *(void *)(a1 + 1080) = v63;
  *(unsigned char *)(a1 + 1089) = *(unsigned char *)(a2 + 1089);
  *(void *)(a1 + 1096) = *(void *)(a2 + 1096);
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  *(unsigned char *)(a1 + 1120) = *(unsigned char *)(a2 + 1120);
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  *(unsigned char *)(a1 + 1136) = *(unsigned char *)(a2 + 1136);
  *(void *)(a1 + 1128) = *(void *)(a2 + 1128);
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  uint64_t v121 = *(void *)(a2 + 1168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v121 == 1)
  {
    long long v64 = *(_OWORD *)(a2 + 1208);
    *(_OWORD *)(a1 + 1192) = *(_OWORD *)(a2 + 1192);
    *(_OWORD *)(a1 + 1208) = v64;
    long long v65 = *(_OWORD *)(a2 + 1240);
    *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 1224);
    *(_OWORD *)(a1 + 1240) = v65;
    long long v66 = *(_OWORD *)(a2 + 1176);
    *(_OWORD *)(a1 + 1160) = *(_OWORD *)(a2 + 1160);
    *(_OWORD *)(a1 + 1176) = v66;
  }
  else
  {
    *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
    *(void *)(a1 + 1168) = v121;
    *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
    *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
    *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
    *(void *)(a1 + 1200) = *(void *)(a2 + 1200);
    *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
    *(void *)(a1 + 1216) = *(void *)(a2 + 1216);
    *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
    *(void *)(a1 + 1232) = *(void *)(a2 + 1232);
    *(void *)(a1 + 1240) = *(void *)(a2 + 1240);
    *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v67 = (uint64_t *)(a2 + 1256);
  unint64_t v68 = *(void *)(a2 + 1264);
  if (v68 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1256) = *(_OWORD *)v67;
  }
  else
  {
    uint64_t v69 = *v67;
    sub_100004214(*v67, *(void *)(a2 + 1264));
    *(void *)(a1 + 1256) = v69;
    *(void *)(a1 + 1264) = v68;
  }
  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  uint64_t v70 = (_OWORD *)(a2 + 1288);
  unint64_t v71 = *(void *)(a2 + 1296);
  swift_bridgeObjectRetain();
  if (v71 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1288) = *v70;
  }
  else
  {
    uint64_t v72 = *(void *)v70;
    sub_100004214(v72, v71);
    *(void *)(a1 + 1288) = v72;
    *(void *)(a1 + 1296) = v71;
  }
  *(void *)(a1 + 1304) = *(void *)(a2 + 1304);
  *(unsigned char *)(a1 + 1312) = *(unsigned char *)(a2 + 1312);
  *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
  *(void *)(a1 + 1328) = *(void *)(a2 + 1328);
  *(unsigned char *)(a1 + 1336) = *(unsigned char *)(a2 + 1336);
  *(_WORD *)(a1 + 1337) = *(_WORD *)(a2 + 1337);
  *(unsigned char *)(a1 + 1352) = *(unsigned char *)(a2 + 1352);
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  *(void *)(a1 + 1360) = *(void *)(a2 + 1360);
  *(void *)(a1 + 1368) = *(void *)(a2 + 1368);
  uint64_t v73 = (uint64_t *)(a2 + 1376);
  unint64_t v74 = *(void *)(a2 + 1384);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v74 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1376) = *(_OWORD *)v73;
  }
  else
  {
    uint64_t v75 = *v73;
    sub_100004214(*v73, v74);
    *(void *)(a1 + 1376) = v75;
    *(void *)(a1 + 1384) = v74;
  }
  uint64_t v76 = (uint64_t *)(a2 + 1392);
  unint64_t v77 = *(void *)(a2 + 1400);
  if (v77 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1392) = *(_OWORD *)v76;
  }
  else
  {
    uint64_t v78 = *v76;
    sub_100004214(*v76, *(void *)(a2 + 1400));
    *(void *)(a1 + 1392) = v78;
    *(void *)(a1 + 1400) = v77;
  }
  *(void *)(a1 + 1408) = *(void *)(a2 + 1408);
  *(unsigned char *)(a1 + 1416) = *(unsigned char *)(a2 + 1416);
  *(_WORD *)(a1 + 1417) = *(_WORD *)(a2 + 1417);
  *(void *)(a1 + 1424) = *(void *)(a2 + 1424);
  *(unsigned char *)(a1 + 1432) = *(unsigned char *)(a2 + 1432);
  *(void *)(a1 + 1440) = *(void *)(a2 + 1440);
  *(_WORD *)(a1 + 1448) = *(_WORD *)(a2 + 1448);
  *(unsigned char *)(a1 + 1464) = *(unsigned char *)(a2 + 1464);
  *(void *)(a1 + 1456) = *(void *)(a2 + 1456);
  *(unsigned char *)(a1 + 1480) = *(unsigned char *)(a2 + 1480);
  *(void *)(a1 + 1472) = *(void *)(a2 + 1472);
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  *(void *)(a1 + 1496) = *(void *)(a2 + 1496);
  *(unsigned char *)(a1 + 1512) = *(unsigned char *)(a2 + 1512);
  *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
  *(unsigned char *)(a1 + 1528) = *(unsigned char *)(a2 + 1528);
  *(void *)(a1 + 1520) = *(void *)(a2 + 1520);
  int v79 = (_OWORD *)(a2 + 1536);
  unint64_t v80 = *(void *)(a2 + 1544);
  swift_bridgeObjectRetain();
  if (v80 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1536) = *v79;
  }
  else
  {
    uint64_t v81 = *(void *)v79;
    sub_100004214(v81, v80);
    *(void *)(a1 + 1536) = v81;
    *(void *)(a1 + 1544) = v80;
  }
  uint64_t v82 = (uint64_t *)(a2 + 1552);
  unint64_t v83 = *(void *)(a2 + 1560);
  if (v83 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1552) = *(_OWORD *)v82;
  }
  else
  {
    uint64_t v84 = *v82;
    sub_100004214(*v82, *(void *)(a2 + 1560));
    *(void *)(a1 + 1552) = v84;
    *(void *)(a1 + 1560) = v83;
  }
  *(void *)(a1 + 1568) = *(void *)(a2 + 1568);
  *(unsigned char *)(a1 + 1576) = *(unsigned char *)(a2 + 1576);
  uint64_t v85 = (uint64_t *)(a2 + 1584);
  unint64_t v86 = *(void *)(a2 + 1592);
  if (v86 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1584) = *(_OWORD *)v85;
  }
  else
  {
    uint64_t v87 = *v85;
    sub_100004214(*v85, *(void *)(a2 + 1592));
    *(void *)(a1 + 1584) = v87;
    *(void *)(a1 + 1592) = v86;
  }
  uint64_t v88 = (uint64_t *)(a2 + 1600);
  unint64_t v89 = *(void *)(a2 + 1608);
  if (v89 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1600) = *(_OWORD *)v88;
  }
  else
  {
    uint64_t v90 = *v88;
    sub_100004214(*v88, *(void *)(a2 + 1608));
    *(void *)(a1 + 1600) = v90;
    *(void *)(a1 + 1608) = v89;
  }
  *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  *(unsigned char *)(a1 + 1624) = *(unsigned char *)(a2 + 1624);
  *(void *)(a1 + 1632) = *(void *)(a2 + 1632);
  *(unsigned char *)(a1 + 1640) = *(unsigned char *)(a2 + 1640);
  *(void *)(a1 + 1648) = *(void *)(a2 + 1648);
  *(void *)(a1 + 1656) = *(void *)(a2 + 1656);
  *(void *)(a1 + 1664) = *(void *)(a2 + 1664);
  *(void *)(a1 + 1672) = *(void *)(a2 + 1672);
  *(void *)(a1 + 1680) = *(void *)(a2 + 1680);
  *(void *)(a1 + 1688) = *(void *)(a2 + 1688);
  *(unsigned char *)(a1 + 1696) = *(unsigned char *)(a2 + 1696);
  *(_WORD *)(a1 + 1697) = *(_WORD *)(a2 + 1697);
  *(void *)(a1 + 1704) = *(void *)(a2 + 1704);
  *(unsigned char *)(a1 + 1712) = *(unsigned char *)(a2 + 1712);
  uint64_t v91 = (uint64_t *)(a2 + 1720);
  unint64_t v92 = *(void *)(a2 + 1728);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v92 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1720) = *(_OWORD *)v91;
  }
  else
  {
    uint64_t v93 = *v91;
    sub_100004214(*v91, v92);
    *(void *)(a1 + 1720) = v93;
    *(void *)(a1 + 1728) = v92;
  }
  *(void *)(a1 + 1736) = *(void *)(a2 + 1736);
  *(_WORD *)(a1 + 1744) = *(_WORD *)(a2 + 1744);
  *(void *)(a1 + 1752) = *(void *)(a2 + 1752);
  *(void *)(a1 + 1760) = *(void *)(a2 + 1760);
  *(void *)(a1 + 1768) = *(void *)(a2 + 1768);
  *(unsigned char *)(a1 + 1776) = *(unsigned char *)(a2 + 1776);
  *(unsigned char *)(a1 + 1792) = *(unsigned char *)(a2 + 1792);
  *(void *)(a1 + 1784) = *(void *)(a2 + 1784);
  uint64_t v94 = (_OWORD *)(a2 + 1800);
  unint64_t v95 = *(void *)(a2 + 1808);
  swift_bridgeObjectRetain();
  if (v95 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1800) = *v94;
  }
  else
  {
    uint64_t v96 = *(void *)v94;
    sub_100004214(v96, v95);
    *(void *)(a1 + 1800) = v96;
    *(void *)(a1 + 1808) = v95;
  }
  int v97 = (uint64_t *)(a2 + 1816);
  unint64_t v98 = *(void *)(a2 + 1824);
  if (v98 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1816) = *(_OWORD *)v97;
  }
  else
  {
    uint64_t v99 = *v97;
    sub_100004214(*v97, *(void *)(a2 + 1824));
    *(void *)(a1 + 1816) = v99;
    *(void *)(a1 + 1824) = v98;
  }
  *(void *)(a1 + 1832) = *(void *)(a2 + 1832);
  *(unsigned char *)(a1 + 1840) = *(unsigned char *)(a2 + 1840);
  uint64_t v100 = (uint64_t *)(a2 + 1848);
  unint64_t v101 = *(void *)(a2 + 1856);
  if (v101 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1848) = *(_OWORD *)v100;
  }
  else
  {
    uint64_t v102 = *v100;
    sub_100004214(*v100, *(void *)(a2 + 1856));
    *(void *)(a1 + 1848) = v102;
    *(void *)(a1 + 1856) = v101;
  }
  int v103 = (uint64_t *)(a2 + 1864);
  unint64_t v104 = *(void *)(a2 + 1872);
  if (v104 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1864) = *(_OWORD *)v103;
  }
  else
  {
    uint64_t v105 = *v103;
    sub_100004214(*v103, *(void *)(a2 + 1872));
    *(void *)(a1 + 1864) = v105;
    *(void *)(a1 + 1872) = v104;
  }
  uint64_t v106 = (uint64_t *)(a2 + 1880);
  unint64_t v107 = *(void *)(a2 + 1888);
  if (v107 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1880) = *(_OWORD *)v106;
  }
  else
  {
    uint64_t v108 = *v106;
    sub_100004214(*v106, *(void *)(a2 + 1888));
    *(void *)(a1 + 1880) = v108;
    *(void *)(a1 + 1888) = v107;
  }
  *(void *)(a1 + 1896) = *(void *)(a2 + 1896);
  *(unsigned char *)(a1 + 1904) = *(unsigned char *)(a2 + 1904);
  uint64_t v109 = (uint64_t *)(a2 + 1912);
  unint64_t v110 = *(void *)(a2 + 1920);
  if (v110 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1912) = *(_OWORD *)v109;
  }
  else
  {
    uint64_t v111 = *v109;
    sub_100004214(*v109, *(void *)(a2 + 1920));
    *(void *)(a1 + 1912) = v111;
    *(void *)(a1 + 1920) = v110;
  }
  *(void *)(a1 + 1928) = *(void *)(a2 + 1928);
  *(unsigned char *)(a1 + 1936) = *(unsigned char *)(a2 + 1936);
  int v112 = (uint64_t *)(a2 + 1944);
  unint64_t v113 = *(void *)(a2 + 1952);
  if (v113 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 1944) = *(_OWORD *)v112;
  }
  else
  {
    uint64_t v114 = *v112;
    sub_100004214(*v112, *(void *)(a2 + 1952));
    *(void *)(a1 + 1944) = v114;
    *(void *)(a1 + 1952) = v113;
  }
  *(void *)(a1 + 1960) = *(void *)(a2 + 1960);
  *(void *)(a1 + 1968) = *(void *)(a2 + 1968);
  *(void *)(a1 + 1976) = *(void *)(a2 + 1976);
  *(unsigned char *)(a1 + 1984) = *(unsigned char *)(a2 + 1984);
  *(void *)(a1 + 1992) = *(void *)(a2 + 1992);
  *(unsigned char *)(a1 + 2000) = *(unsigned char *)(a2 + 2000);
  *(void *)(a1 + 2008) = *(void *)(a2 + 2008);
  *(unsigned char *)(a1 + 2016) = *(unsigned char *)(a2 + 2016);
  uint64_t v115 = *(void *)(a2 + 2024);
  *(unsigned char *)(a1 + 2032) = *(unsigned char *)(a2 + 2032);
  *(void *)(a1 + 2024) = v115;
  *(void *)(a1 + 2040) = *(void *)(a2 + 2040);
  *(void *)(a1 + 2048) = *(void *)(a2 + 2048);
  uint64_t v116 = (uint64_t *)(a2 + 2056);
  unint64_t v117 = *(void *)(a2 + 2064);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v117 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 2056) = *(_OWORD *)v116;
  }
  else
  {
    uint64_t v118 = *v116;
    sub_100004214(*v116, v117);
    *(void *)(a1 + 2056) = v118;
    *(void *)(a1 + 2064) = v117;
  }
  *(void *)(a1 + 2072) = *(void *)(a2 + 2072);
  *(unsigned char *)(a1 + 2080) = *(unsigned char *)(a2 + 2080);
  *(void *)(a1 + 2088) = *(void *)(a2 + 2088);
  *(void *)(a1 + 2096) = *(void *)(a2 + 2096);
  *(unsigned char *)(a1 + 2104) = *(unsigned char *)(a2 + 2104);
  *(void *)(a1 + 2112) = *(void *)(a2 + 2112);
  *(_WORD *)(a1 + 2120) = *(_WORD *)(a2 + 2120);
  *(unsigned char *)(a1 + 2122) = *(unsigned char *)(a2 + 2122);
  *(void *)(a1 + 2128) = *(void *)(a2 + 2128);
  *(void *)(a1 + 2136) = *(void *)(a2 + 2136);
  *(unsigned char *)(a1 + 2144) = *(unsigned char *)(a2 + 2144);
  *(void *)(a1 + 2152) = *(void *)(a2 + 2152);
  *(unsigned char *)(a1 + 2160) = *(unsigned char *)(a2 + 2160);
  *(void *)(a1 + 2168) = *(void *)(a2 + 2168);
  *(_WORD *)(a1 + 2176) = *(_WORD *)(a2 + 2176);
  *(unsigned char *)(a1 + 2178) = *(unsigned char *)(a2 + 2178);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IDSMadridProtocolPayload(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  unint64_t v6 = (_OWORD *)(a1 + 40);
  uint64_t v7 = (uint64_t *)(a2 + 40);
  unint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) >> 60 == 15)
  {
    if (v8 >> 60 != 15)
    {
      uint64_t v9 = *v7;
      sub_100004214(*v7, *(void *)(a2 + 48));
      *(void *)(a1 + 40) = v9;
      *(void *)(a1 + 48) = v8;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v8 >> 60 == 15)
  {
    sub_1000044A0(a1 + 40);
LABEL_6:
    _OWORD *v6 = *(_OWORD *)v7;
    goto LABEL_8;
  }
  uint64_t v10 = *v7;
  sub_100004214(*v7, *(void *)(a2 + 48));
  uint64_t v11 = *(void *)(a1 + 40);
  unint64_t v12 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v8;
  sub_1000042CC(v11, v12);
LABEL_8:
  uint64_t v13 = (uint64_t *)(a2 + 56);
  unint64_t v14 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64) >> 60 == 15)
  {
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *v13;
      sub_100004214(*v13, *(void *)(a2 + 64));
      *(void *)(a1 + 56) = v15;
      *(void *)(a1 + 64) = v14;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v14 >> 60 == 15)
  {
    sub_1000044A0(a1 + 56);
LABEL_13:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v13;
    goto LABEL_15;
  }
  uint64_t v16 = *v13;
  sub_100004214(*v13, *(void *)(a2 + 64));
  uint64_t v17 = *(void *)(a1 + 56);
  unint64_t v18 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v16;
  *(void *)(a1 + 64) = v14;
  sub_1000042CC(v17, v18);
LABEL_15:
  uint64_t v19 = (uint64_t *)(a2 + 72);
  unint64_t v20 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) >> 60 == 15)
  {
    if (v20 >> 60 != 15)
    {
      uint64_t v21 = *v19;
      sub_100004214(*v19, *(void *)(a2 + 80));
      *(void *)(a1 + 72) = v21;
      *(void *)(a1 + 80) = v20;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v20 >> 60 == 15)
  {
    sub_1000044A0(a1 + 72);
LABEL_20:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)v19;
    goto LABEL_22;
  }
  uint64_t v22 = *v19;
  sub_100004214(*v19, *(void *)(a2 + 80));
  uint64_t v23 = *(void *)(a1 + 72);
  unint64_t v24 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = v22;
  *(void *)(a1 + 80) = v20;
  sub_1000042CC(v23, v24);
LABEL_22:
  unint64_t v25 = (uint64_t *)(a2 + 88);
  unint64_t v26 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) >> 60 == 15)
  {
    if (v26 >> 60 != 15)
    {
      uint64_t v27 = *v25;
      sub_100004214(*v25, *(void *)(a2 + 96));
      *(void *)(a1 + 88) = v27;
      *(void *)(a1 + 96) = v26;
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (v26 >> 60 == 15)
  {
    sub_1000044A0(a1 + 88);
LABEL_27:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v25;
    goto LABEL_29;
  }
  uint64_t v28 = *v25;
  sub_100004214(*v25, *(void *)(a2 + 96));
  uint64_t v29 = *(void *)(a1 + 88);
  unint64_t v30 = *(void *)(a1 + 96);
  *(void *)(a1 + 88) = v28;
  *(void *)(a1 + 96) = v26;
  sub_1000042CC(v29, v30);
LABEL_29:
  unint64_t v31 = (uint64_t *)(a2 + 104);
  unint64_t v32 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112) >> 60 == 15)
  {
    if (v32 >> 60 != 15)
    {
      uint64_t v33 = *v31;
      sub_100004214(*v31, *(void *)(a2 + 112));
      *(void *)(a1 + 104) = v33;
      *(void *)(a1 + 112) = v32;
      goto LABEL_36;
    }
    goto LABEL_34;
  }
  if (v32 >> 60 == 15)
  {
    sub_1000044A0(a1 + 104);
LABEL_34:
    *(_OWORD *)(a1 + 104) = *(_OWORD *)v31;
    goto LABEL_36;
  }
  uint64_t v34 = *v31;
  sub_100004214(*v31, *(void *)(a2 + 112));
  uint64_t v35 = *(void *)(a1 + 104);
  unint64_t v36 = *(void *)(a1 + 112);
  *(void *)(a1 + 104) = v34;
  *(void *)(a1 + 112) = v32;
  sub_1000042CC(v35, v36);
LABEL_36:
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v37 = (uint64_t *)(a2 + 136);
  unint64_t v38 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 144) >> 60 == 15)
  {
    if (v38 >> 60 != 15)
    {
      uint64_t v39 = *v37;
      sub_100004214(*v37, *(void *)(a2 + 144));
      *(void *)(a1 + 136) = v39;
      *(void *)(a1 + 144) = v38;
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  if (v38 >> 60 == 15)
  {
    sub_1000044A0(a1 + 136);
LABEL_41:
    *(_OWORD *)(a1 + 136) = *(_OWORD *)v37;
    goto LABEL_43;
  }
  uint64_t v40 = *v37;
  sub_100004214(*v37, *(void *)(a2 + 144));
  uint64_t v41 = *(void *)(a1 + 136);
  unint64_t v42 = *(void *)(a1 + 144);
  *(void *)(a1 + 136) = v40;
  *(void *)(a1 + 144) = v38;
  sub_1000042CC(v41, v42);
LABEL_43:
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  uint64_t v43 = *(void *)(a2 + 176);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(void *)(a1 + 176) = v43;
  uint64_t v44 = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(void *)(a1 + 192) = v44;
  uint64_t v45 = (uint64_t *)(a2 + 208);
  unint64_t v46 = *(void *)(a2 + 216);
  if (*(void *)(a1 + 216) >> 60 == 15)
  {
    if (v46 >> 60 != 15)
    {
      uint64_t v47 = *v45;
      sub_100004214(*v45, *(void *)(a2 + 216));
      *(void *)(a1 + 208) = v47;
      *(void *)(a1 + 216) = v46;
      goto LABEL_50;
    }
    goto LABEL_48;
  }
  if (v46 >> 60 == 15)
  {
    sub_1000044A0(a1 + 208);
LABEL_48:
    *(_OWORD *)(a1 + 208) = *(_OWORD *)v45;
    goto LABEL_50;
  }
  uint64_t v48 = *v45;
  sub_100004214(*v45, *(void *)(a2 + 216));
  uint64_t v49 = *(void *)(a1 + 208);
  unint64_t v50 = *(void *)(a1 + 216);
  *(void *)(a1 + 208) = v48;
  *(void *)(a1 + 216) = v46;
  sub_1000042CC(v49, v50);
LABEL_50:
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(unsigned char *)(a1 + 225) = *(unsigned char *)(a2 + 225);
  uint64_t v51 = (uint64_t *)(a2 + 232);
  unint64_t v52 = *(void *)(a2 + 240);
  if (*(void *)(a1 + 240) >> 60 == 15)
  {
    if (v52 >> 60 != 15)
    {
      uint64_t v53 = *v51;
      sub_100004214(*v51, *(void *)(a2 + 240));
      *(void *)(a1 + 232) = v53;
      *(void *)(a1 + 240) = v52;
      goto LABEL_57;
    }
    goto LABEL_55;
  }
  if (v52 >> 60 == 15)
  {
    sub_1000044A0(a1 + 232);
LABEL_55:
    *(_OWORD *)(a1 + 232) = *(_OWORD *)v51;
    goto LABEL_57;
  }
  uint64_t v54 = *v51;
  sub_100004214(*v51, *(void *)(a2 + 240));
  uint64_t v55 = *(void *)(a1 + 232);
  unint64_t v56 = *(void *)(a1 + 240);
  *(void *)(a1 + 232) = v54;
  *(void *)(a1 + 240) = v52;
  sub_1000042CC(v55, v56);
LABEL_57:
  unint64_t v57 = (uint64_t *)(a2 + 248);
  unint64_t v58 = *(void *)(a2 + 256);
  if (*(void *)(a1 + 256) >> 60 == 15)
  {
    if (v58 >> 60 != 15)
    {
      uint64_t v59 = *v57;
      sub_100004214(*v57, *(void *)(a2 + 256));
      *(void *)(a1 + 248) = v59;
      *(void *)(a1 + 256) = v58;
      goto LABEL_64;
    }
    goto LABEL_62;
  }
  if (v58 >> 60 == 15)
  {
    sub_1000044A0(a1 + 248);
LABEL_62:
    *(_OWORD *)(a1 + 248) = *(_OWORD *)v57;
    goto LABEL_64;
  }
  uint64_t v60 = *v57;
  sub_100004214(*v57, *(void *)(a2 + 256));
  uint64_t v61 = *(void *)(a1 + 248);
  unint64_t v62 = *(void *)(a1 + 256);
  *(void *)(a1 + 248) = v60;
  *(void *)(a1 + 256) = v58;
  sub_1000042CC(v61, v62);
LABEL_64:
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v63 = (uint64_t *)(a2 + 312);
  unint64_t v64 = *(void *)(a2 + 320);
  if (*(void *)(a1 + 320) >> 60 == 15)
  {
    if (v64 >> 60 != 15)
    {
      uint64_t v65 = *v63;
      sub_100004214(*v63, *(void *)(a2 + 320));
      *(void *)(a1 + 312) = v65;
      *(void *)(a1 + 320) = v64;
      goto LABEL_71;
    }
    goto LABEL_69;
  }
  if (v64 >> 60 == 15)
  {
    sub_1000044A0(a1 + 312);
LABEL_69:
    *(_OWORD *)(a1 + 312) = *(_OWORD *)v63;
    goto LABEL_71;
  }
  uint64_t v66 = *v63;
  sub_100004214(*v63, *(void *)(a2 + 320));
  uint64_t v67 = *(void *)(a1 + 312);
  unint64_t v68 = *(void *)(a1 + 320);
  *(void *)(a1 + 312) = v66;
  *(void *)(a1 + 320) = v64;
  sub_1000042CC(v67, v68);
LABEL_71:
  uint64_t v69 = *(void *)(a2 + 328);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  *(void *)(a1 + 328) = v69;
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = *(void *)(a2 + 352);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = *(void *)(a2 + 368);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = *(void *)(a2 + 384);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = *(void *)(a2 + 416);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v70 = *(void *)(a2 + 440);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(void *)(a1 + 440) = v70;
  uint64_t v71 = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
  *(void *)(a1 + 456) = v71;
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = *(void *)(a2 + 480);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v72 = (uint64_t *)(a2 + 488);
  unint64_t v73 = *(void *)(a2 + 496);
  if (*(void *)(a1 + 496) >> 60 == 15)
  {
    if (v73 >> 60 != 15)
    {
      uint64_t v74 = *v72;
      sub_100004214(*v72, *(void *)(a2 + 496));
      *(void *)(a1 + 488) = v74;
      *(void *)(a1 + 496) = v73;
      goto LABEL_78;
    }
    goto LABEL_76;
  }
  if (v73 >> 60 == 15)
  {
    sub_1000044A0(a1 + 488);
LABEL_76:
    *(_OWORD *)(a1 + 488) = *(_OWORD *)v72;
    goto LABEL_78;
  }
  uint64_t v75 = *v72;
  sub_100004214(*v72, *(void *)(a2 + 496));
  uint64_t v76 = *(void *)(a1 + 488);
  unint64_t v77 = *(void *)(a1 + 496);
  *(void *)(a1 + 488) = v75;
  *(void *)(a1 + 496) = v73;
  sub_1000042CC(v76, v77);
LABEL_78:
  uint64_t v78 = (uint64_t *)(a2 + 504);
  unint64_t v79 = *(void *)(a2 + 512);
  if (*(void *)(a1 + 512) >> 60 == 15)
  {
    if (v79 >> 60 != 15)
    {
      uint64_t v80 = *v78;
      sub_100004214(*v78, *(void *)(a2 + 512));
      *(void *)(a1 + 504) = v80;
      *(void *)(a1 + 512) = v79;
      goto LABEL_85;
    }
    goto LABEL_83;
  }
  if (v79 >> 60 == 15)
  {
    sub_1000044A0(a1 + 504);
LABEL_83:
    *(_OWORD *)(a1 + 504) = *(_OWORD *)v78;
    goto LABEL_85;
  }
  uint64_t v81 = *v78;
  sub_100004214(*v78, *(void *)(a2 + 512));
  uint64_t v82 = *(void *)(a1 + 504);
  unint64_t v83 = *(void *)(a1 + 512);
  *(void *)(a1 + 504) = v81;
  *(void *)(a1 + 512) = v79;
  sub_1000042CC(v82, v83);
LABEL_85:
  uint64_t v84 = *(void *)(a2 + 520);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  *(void *)(a1 + 520) = v84;
  uint64_t v85 = (uint64_t *)(a2 + 536);
  unint64_t v86 = *(void *)(a2 + 544);
  if (*(void *)(a1 + 544) >> 60 == 15)
  {
    if (v86 >> 60 != 15)
    {
      uint64_t v87 = *v85;
      sub_100004214(*v85, *(void *)(a2 + 544));
      *(void *)(a1 + 536) = v87;
      *(void *)(a1 + 544) = v86;
      goto LABEL_92;
    }
    goto LABEL_90;
  }
  if (v86 >> 60 == 15)
  {
    sub_1000044A0(a1 + 536);
LABEL_90:
    *(_OWORD *)(a1 + 536) = *(_OWORD *)v85;
    goto LABEL_92;
  }
  uint64_t v88 = *v85;
  sub_100004214(*v85, *(void *)(a2 + 544));
  uint64_t v89 = *(void *)(a1 + 536);
  unint64_t v90 = *(void *)(a1 + 544);
  *(void *)(a1 + 536) = v88;
  *(void *)(a1 + 544) = v86;
  sub_1000042CC(v89, v90);
LABEL_92:
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v91 = *(void *)(a2 + 600);
  *(unsigned char *)(a1 + 608) = *(unsigned char *)(a2 + 608);
  *(void *)(a1 + 600) = v91;
  uint64_t v92 = *(void *)(a2 + 616);
  *(unsigned char *)(a1 + 624) = *(unsigned char *)(a2 + 624);
  *(void *)(a1 + 616) = v92;
  uint64_t v93 = *(void *)(a2 + 632);
  *(unsigned char *)(a1 + 640) = *(unsigned char *)(a2 + 640);
  *(void *)(a1 + 632) = v93;
  uint64_t v94 = *(void *)(a2 + 648);
  *(unsigned char *)(a1 + 656) = *(unsigned char *)(a2 + 656);
  *(void *)(a1 + 648) = v94;
  unint64_t v95 = (uint64_t *)(a2 + 664);
  unint64_t v96 = *(void *)(a2 + 672);
  if (*(void *)(a1 + 672) >> 60 == 15)
  {
    if (v96 >> 60 != 15)
    {
      uint64_t v97 = *v95;
      sub_100004214(*v95, *(void *)(a2 + 672));
      *(void *)(a1 + 664) = v97;
      *(void *)(a1 + 672) = v96;
      goto LABEL_99;
    }
    goto LABEL_97;
  }
  if (v96 >> 60 == 15)
  {
    sub_1000044A0(a1 + 664);
LABEL_97:
    *(_OWORD *)(a1 + 664) = *(_OWORD *)v95;
    goto LABEL_99;
  }
  uint64_t v98 = *v95;
  sub_100004214(*v95, *(void *)(a2 + 672));
  uint64_t v99 = *(void *)(a1 + 664);
  unint64_t v100 = *(void *)(a1 + 672);
  *(void *)(a1 + 664) = v98;
  *(void *)(a1 + 672) = v96;
  sub_1000042CC(v99, v100);
LABEL_99:
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v101 = *(void *)(a2 + 696);
  *(unsigned char *)(a1 + 704) = *(unsigned char *)(a2 + 704);
  *(void *)(a1 + 696) = v101;
  uint64_t v102 = *(void *)(a2 + 712);
  *(unsigned char *)(a1 + 720) = *(unsigned char *)(a2 + 720);
  *(void *)(a1 + 712) = v102;
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v103 = *(void *)(a2 + 744);
  *(unsigned char *)(a1 + 752) = *(unsigned char *)(a2 + 752);
  *(void *)(a1 + 744) = v103;
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v104 = *(void *)(a2 + 776);
  *(unsigned char *)(a1 + 784) = *(unsigned char *)(a2 + 784);
  *(void *)(a1 + 776) = v104;
  uint64_t v105 = *(void *)(a2 + 792);
  *(unsigned char *)(a1 + 800) = *(unsigned char *)(a2 + 800);
  *(void *)(a1 + 792) = v105;
  uint64_t v106 = *(void *)(a2 + 808);
  *(unsigned char *)(a1 + 816) = *(unsigned char *)(a2 + 816);
  *(void *)(a1 + 808) = v106;
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v107 = *(void *)(a2 + 840);
  *(unsigned char *)(a1 + 848) = *(unsigned char *)(a2 + 848);
  *(void *)(a1 + 840) = v107;
  uint64_t v108 = *(void *)(a2 + 856);
  *(unsigned char *)(a1 + 864) = *(unsigned char *)(a2 + 864);
  *(void *)(a1 + 856) = v108;
  uint64_t v109 = *(void *)(a2 + 872);
  *(unsigned char *)(a1 + 880) = *(unsigned char *)(a2 + 880);
  *(void *)(a1 + 872) = v109;
  *(unsigned char *)(a1 + 881) = *(unsigned char *)(a2 + 881);
  *(unsigned char *)(a1 + 882) = *(unsigned char *)(a2 + 882);
  *(unsigned char *)(a1 + 883) = *(unsigned char *)(a2 + 883);
  *(unsigned char *)(a1 + 884) = *(unsigned char *)(a2 + 884);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v110 = (uint64_t *)(a2 + 920);
  unint64_t v111 = *(void *)(a2 + 928);
  if (*(void *)(a1 + 928) >> 60 == 15)
  {
    if (v111 >> 60 != 15)
    {
      uint64_t v112 = *v110;
      sub_100004214(*v110, *(void *)(a2 + 928));
      *(void *)(a1 + 920) = v112;
      *(void *)(a1 + 928) = v111;
      goto LABEL_106;
    }
    goto LABEL_104;
  }
  if (v111 >> 60 == 15)
  {
    sub_1000044A0(a1 + 920);
LABEL_104:
    *(_OWORD *)(a1 + 920) = *(_OWORD *)v110;
    goto LABEL_106;
  }
  uint64_t v113 = *v110;
  sub_100004214(*v110, *(void *)(a2 + 928));
  uint64_t v114 = *(void *)(a1 + 920);
  unint64_t v115 = *(void *)(a1 + 928);
  *(void *)(a1 + 920) = v113;
  *(void *)(a1 + 928) = v111;
  sub_1000042CC(v114, v115);
LABEL_106:
  *(void *)(a1 + 936) = *(void *)(a2 + 936);
  *(void *)(a1 + 944) = *(void *)(a2 + 944);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 952) = *(void *)(a2 + 952);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(void *)(a1 + 976) = *(void *)(a2 + 976);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v116 = *(void *)(a2 + 1016);
  *(unsigned char *)(a1 + 1024) = *(unsigned char *)(a2 + 1024);
  *(void *)(a1 + 1016) = v116;
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  *(void *)(a1 + 1040) = *(void *)(a2 + 1040);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v117 = *(void *)(a2 + 1048);
  *(unsigned char *)(a1 + 1056) = *(unsigned char *)(a2 + 1056);
  *(void *)(a1 + 1048) = v117;
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v118 = *(void *)(a2 + 1080);
  *(unsigned char *)(a1 + 1088) = *(unsigned char *)(a2 + 1088);
  *(void *)(a1 + 1080) = v118;
  *(unsigned char *)(a1 + 1089) = *(unsigned char *)(a2 + 1089);
  *(void *)(a1 + 1096) = *(void *)(a2 + 1096);
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v119 = *(void *)(a2 + 1112);
  *(unsigned char *)(a1 + 1120) = *(unsigned char *)(a2 + 1120);
  *(void *)(a1 + 1112) = v119;
  uint64_t v120 = *(void *)(a2 + 1128);
  *(unsigned char *)(a1 + 1136) = *(unsigned char *)(a2 + 1136);
  *(void *)(a1 + 1128) = v120;
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v121 = (_OWORD *)(a1 + 1160);
  uint64_t v122 = (_OWORD *)(a2 + 1160);
  uint64_t v123 = *(void *)(a2 + 1168);
  if (*(void *)(a1 + 1168) == 1)
  {
    if (v123 == 1)
    {
      long long v124 = *(_OWORD *)(a2 + 1176);
      *uint64_t v121 = *v122;
      *(_OWORD *)(a1 + 1176) = v124;
      long long v125 = *(_OWORD *)(a2 + 1192);
      long long v126 = *(_OWORD *)(a2 + 1208);
      long long v127 = *(_OWORD *)(a2 + 1240);
      *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 1224);
      *(_OWORD *)(a1 + 1240) = v127;
      *(_OWORD *)(a1 + 1192) = v125;
      *(_OWORD *)(a1 + 1208) = v126;
    }
    else
    {
      *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
      *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
      *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
      *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
      *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
      *(void *)(a1 + 1200) = *(void *)(a2 + 1200);
      *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
      *(void *)(a1 + 1216) = *(void *)(a2 + 1216);
      *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
      *(void *)(a1 + 1232) = *(void *)(a2 + 1232);
      *(void *)(a1 + 1240) = *(void *)(a2 + 1240);
      *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v123 == 1)
  {
    sub_10005B278(a1 + 1160);
    long long v128 = *(_OWORD *)(a2 + 1176);
    *uint64_t v121 = *v122;
    *(_OWORD *)(a1 + 1176) = v128;
    long long v129 = *(_OWORD *)(a2 + 1240);
    long long v131 = *(_OWORD *)(a2 + 1192);
    long long v130 = *(_OWORD *)(a2 + 1208);
    *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 1224);
    *(_OWORD *)(a1 + 1240) = v129;
    *(_OWORD *)(a1 + 1192) = v131;
    *(_OWORD *)(a1 + 1208) = v130;
  }
  else
  {
    *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
    *(void *)(a1 + 1168) = *(void *)(a2 + 1168);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
    *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
    *(void *)(a1 + 1200) = *(void *)(a2 + 1200);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
    *(void *)(a1 + 1216) = *(void *)(a2 + 1216);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
    *(void *)(a1 + 1232) = *(void *)(a2 + 1232);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 1240) = *(void *)(a2 + 1240);
    *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v132 = (uint64_t *)(a2 + 1256);
  unint64_t v133 = *(void *)(a2 + 1264);
  if (*(void *)(a1 + 1264) >> 60 == 15)
  {
    if (v133 >> 60 != 15)
    {
      uint64_t v134 = *v132;
      sub_100004214(*v132, *(void *)(a2 + 1264));
      *(void *)(a1 + 1256) = v134;
      *(void *)(a1 + 1264) = v133;
      goto LABEL_120;
    }
    goto LABEL_118;
  }
  if (v133 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1256);
LABEL_118:
    *(_OWORD *)(a1 + 1256) = *(_OWORD *)v132;
    goto LABEL_120;
  }
  uint64_t v135 = *v132;
  sub_100004214(*v132, *(void *)(a2 + 1264));
  uint64_t v136 = *(void *)(a1 + 1256);
  unint64_t v137 = *(void *)(a1 + 1264);
  *(void *)(a1 + 1256) = v135;
  *(void *)(a1 + 1264) = v133;
  sub_1000042CC(v136, v137);
LABEL_120:
  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v138 = (uint64_t *)(a2 + 1288);
  unint64_t v139 = *(void *)(a2 + 1296);
  if (*(void *)(a1 + 1296) >> 60 == 15)
  {
    if (v139 >> 60 != 15)
    {
      uint64_t v140 = *v138;
      sub_100004214(*v138, *(void *)(a2 + 1296));
      *(void *)(a1 + 1288) = v140;
      *(void *)(a1 + 1296) = v139;
      goto LABEL_127;
    }
    goto LABEL_125;
  }
  if (v139 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1288);
LABEL_125:
    *(_OWORD *)(a1 + 1288) = *(_OWORD *)v138;
    goto LABEL_127;
  }
  uint64_t v141 = *v138;
  sub_100004214(*v138, *(void *)(a2 + 1296));
  uint64_t v142 = *(void *)(a1 + 1288);
  unint64_t v143 = *(void *)(a1 + 1296);
  *(void *)(a1 + 1288) = v141;
  *(void *)(a1 + 1296) = v139;
  sub_1000042CC(v142, v143);
LABEL_127:
  uint64_t v144 = *(void *)(a2 + 1304);
  *(unsigned char *)(a1 + 1312) = *(unsigned char *)(a2 + 1312);
  *(void *)(a1 + 1304) = v144;
  *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
  *(void *)(a1 + 1328) = *(void *)(a2 + 1328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 1336) = *(unsigned char *)(a2 + 1336);
  *(unsigned char *)(a1 + 1337) = *(unsigned char *)(a2 + 1337);
  *(unsigned char *)(a1 + 1338) = *(unsigned char *)(a2 + 1338);
  uint64_t v145 = *(void *)(a2 + 1344);
  *(unsigned char *)(a1 + 1352) = *(unsigned char *)(a2 + 1352);
  *(void *)(a1 + 1344) = v145;
  *(void *)(a1 + 1360) = *(void *)(a2 + 1360);
  *(void *)(a1 + 1368) = *(void *)(a2 + 1368);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v146 = (uint64_t *)(a2 + 1376);
  unint64_t v147 = *(void *)(a2 + 1384);
  if (*(void *)(a1 + 1384) >> 60 == 15)
  {
    if (v147 >> 60 != 15)
    {
      uint64_t v148 = *v146;
      sub_100004214(*v146, *(void *)(a2 + 1384));
      *(void *)(a1 + 1376) = v148;
      *(void *)(a1 + 1384) = v147;
      goto LABEL_134;
    }
    goto LABEL_132;
  }
  if (v147 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1376);
LABEL_132:
    *(_OWORD *)(a1 + 1376) = *(_OWORD *)v146;
    goto LABEL_134;
  }
  uint64_t v149 = *v146;
  sub_100004214(*v146, *(void *)(a2 + 1384));
  uint64_t v150 = *(void *)(a1 + 1376);
  unint64_t v151 = *(void *)(a1 + 1384);
  *(void *)(a1 + 1376) = v149;
  *(void *)(a1 + 1384) = v147;
  sub_1000042CC(v150, v151);
LABEL_134:
  uint64_t v152 = (uint64_t *)(a2 + 1392);
  unint64_t v153 = *(void *)(a2 + 1400);
  if (*(void *)(a1 + 1400) >> 60 == 15)
  {
    if (v153 >> 60 != 15)
    {
      uint64_t v154 = *v152;
      sub_100004214(*v152, *(void *)(a2 + 1400));
      *(void *)(a1 + 1392) = v154;
      *(void *)(a1 + 1400) = v153;
      goto LABEL_141;
    }
    goto LABEL_139;
  }
  if (v153 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1392);
LABEL_139:
    *(_OWORD *)(a1 + 1392) = *(_OWORD *)v152;
    goto LABEL_141;
  }
  uint64_t v155 = *v152;
  sub_100004214(*v152, *(void *)(a2 + 1400));
  uint64_t v156 = *(void *)(a1 + 1392);
  unint64_t v157 = *(void *)(a1 + 1400);
  *(void *)(a1 + 1392) = v155;
  *(void *)(a1 + 1400) = v153;
  sub_1000042CC(v156, v157);
LABEL_141:
  uint64_t v158 = *(void *)(a2 + 1408);
  *(unsigned char *)(a1 + 1416) = *(unsigned char *)(a2 + 1416);
  *(void *)(a1 + 1408) = v158;
  *(unsigned char *)(a1 + 1417) = *(unsigned char *)(a2 + 1417);
  *(unsigned char *)(a1 + 1418) = *(unsigned char *)(a2 + 1418);
  uint64_t v159 = *(void *)(a2 + 1424);
  *(unsigned char *)(a1 + 1432) = *(unsigned char *)(a2 + 1432);
  *(void *)(a1 + 1424) = v159;
  uint64_t v160 = *(void *)(a2 + 1440);
  *(unsigned char *)(a1 + 1448) = *(unsigned char *)(a2 + 1448);
  *(void *)(a1 + 1440) = v160;
  *(unsigned char *)(a1 + 1449) = *(unsigned char *)(a2 + 1449);
  uint64_t v161 = *(void *)(a2 + 1456);
  *(unsigned char *)(a1 + 1464) = *(unsigned char *)(a2 + 1464);
  *(void *)(a1 + 1456) = v161;
  uint64_t v162 = *(void *)(a2 + 1472);
  *(unsigned char *)(a1 + 1480) = *(unsigned char *)(a2 + 1480);
  *(void *)(a1 + 1472) = v162;
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  *(void *)(a1 + 1496) = *(void *)(a2 + 1496);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v163 = *(void *)(a2 + 1504);
  *(unsigned char *)(a1 + 1512) = *(unsigned char *)(a2 + 1512);
  *(void *)(a1 + 1504) = v163;
  uint64_t v164 = *(void *)(a2 + 1520);
  *(unsigned char *)(a1 + 1528) = *(unsigned char *)(a2 + 1528);
  *(void *)(a1 + 1520) = v164;
  int v165 = (uint64_t *)(a2 + 1536);
  unint64_t v166 = *(void *)(a2 + 1544);
  if (*(void *)(a1 + 1544) >> 60 == 15)
  {
    if (v166 >> 60 != 15)
    {
      uint64_t v167 = *v165;
      sub_100004214(*v165, *(void *)(a2 + 1544));
      *(void *)(a1 + 1536) = v167;
      *(void *)(a1 + 1544) = v166;
      goto LABEL_148;
    }
    goto LABEL_146;
  }
  if (v166 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1536);
LABEL_146:
    *(_OWORD *)(a1 + 1536) = *(_OWORD *)v165;
    goto LABEL_148;
  }
  uint64_t v168 = *v165;
  sub_100004214(*v165, *(void *)(a2 + 1544));
  uint64_t v169 = *(void *)(a1 + 1536);
  unint64_t v170 = *(void *)(a1 + 1544);
  *(void *)(a1 + 1536) = v168;
  *(void *)(a1 + 1544) = v166;
  sub_1000042CC(v169, v170);
LABEL_148:
  uint64_t v171 = (uint64_t *)(a2 + 1552);
  unint64_t v172 = *(void *)(a2 + 1560);
  if (*(void *)(a1 + 1560) >> 60 == 15)
  {
    if (v172 >> 60 != 15)
    {
      uint64_t v173 = *v171;
      sub_100004214(*v171, *(void *)(a2 + 1560));
      *(void *)(a1 + 1552) = v173;
      *(void *)(a1 + 1560) = v172;
      goto LABEL_155;
    }
    goto LABEL_153;
  }
  if (v172 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1552);
LABEL_153:
    *(_OWORD *)(a1 + 1552) = *(_OWORD *)v171;
    goto LABEL_155;
  }
  uint64_t v174 = *v171;
  sub_100004214(*v171, *(void *)(a2 + 1560));
  uint64_t v175 = *(void *)(a1 + 1552);
  unint64_t v176 = *(void *)(a1 + 1560);
  *(void *)(a1 + 1552) = v174;
  *(void *)(a1 + 1560) = v172;
  sub_1000042CC(v175, v176);
LABEL_155:
  uint64_t v177 = *(void *)(a2 + 1568);
  *(unsigned char *)(a1 + 1576) = *(unsigned char *)(a2 + 1576);
  *(void *)(a1 + 1568) = v177;
  uint64_t v178 = (uint64_t *)(a2 + 1584);
  unint64_t v179 = *(void *)(a2 + 1592);
  if (*(void *)(a1 + 1592) >> 60 == 15)
  {
    if (v179 >> 60 != 15)
    {
      uint64_t v180 = *v178;
      sub_100004214(*v178, *(void *)(a2 + 1592));
      *(void *)(a1 + 1584) = v180;
      *(void *)(a1 + 1592) = v179;
      goto LABEL_162;
    }
    goto LABEL_160;
  }
  if (v179 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1584);
LABEL_160:
    *(_OWORD *)(a1 + 1584) = *(_OWORD *)v178;
    goto LABEL_162;
  }
  uint64_t v181 = *v178;
  sub_100004214(*v178, *(void *)(a2 + 1592));
  uint64_t v182 = *(void *)(a1 + 1584);
  unint64_t v183 = *(void *)(a1 + 1592);
  *(void *)(a1 + 1584) = v181;
  *(void *)(a1 + 1592) = v179;
  sub_1000042CC(v182, v183);
LABEL_162:
  uint64_t v184 = (uint64_t *)(a2 + 1600);
  unint64_t v185 = *(void *)(a2 + 1608);
  if (*(void *)(a1 + 1608) >> 60 == 15)
  {
    if (v185 >> 60 != 15)
    {
      uint64_t v186 = *v184;
      sub_100004214(*v184, *(void *)(a2 + 1608));
      *(void *)(a1 + 1600) = v186;
      *(void *)(a1 + 1608) = v185;
      goto LABEL_169;
    }
    goto LABEL_167;
  }
  if (v185 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1600);
LABEL_167:
    *(_OWORD *)(a1 + 1600) = *(_OWORD *)v184;
    goto LABEL_169;
  }
  uint64_t v187 = *v184;
  sub_100004214(*v184, *(void *)(a2 + 1608));
  uint64_t v188 = *(void *)(a1 + 1600);
  unint64_t v189 = *(void *)(a1 + 1608);
  *(void *)(a1 + 1600) = v187;
  *(void *)(a1 + 1608) = v185;
  sub_1000042CC(v188, v189);
LABEL_169:
  uint64_t v190 = *(void *)(a2 + 1616);
  *(unsigned char *)(a1 + 1624) = *(unsigned char *)(a2 + 1624);
  *(void *)(a1 + 1616) = v190;
  uint64_t v191 = *(void *)(a2 + 1632);
  *(unsigned char *)(a1 + 1640) = *(unsigned char *)(a2 + 1640);
  *(void *)(a1 + 1632) = v191;
  *(void *)(a1 + 1648) = *(void *)(a2 + 1648);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1656) = *(void *)(a2 + 1656);
  *(void *)(a1 + 1664) = *(void *)(a2 + 1664);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1672) = *(void *)(a2 + 1672);
  *(void *)(a1 + 1680) = *(void *)(a2 + 1680);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v192 = *(void *)(a2 + 1688);
  *(unsigned char *)(a1 + 1696) = *(unsigned char *)(a2 + 1696);
  *(void *)(a1 + 1688) = v192;
  *(unsigned char *)(a1 + 1697) = *(unsigned char *)(a2 + 1697);
  *(unsigned char *)(a1 + 1698) = *(unsigned char *)(a2 + 1698);
  uint64_t v193 = *(void *)(a2 + 1704);
  *(unsigned char *)(a1 + 1712) = *(unsigned char *)(a2 + 1712);
  *(void *)(a1 + 1704) = v193;
  int v194 = (uint64_t *)(a2 + 1720);
  unint64_t v195 = *(void *)(a2 + 1728);
  if (*(void *)(a1 + 1728) >> 60 == 15)
  {
    if (v195 >> 60 != 15)
    {
      uint64_t v196 = *v194;
      sub_100004214(*v194, *(void *)(a2 + 1728));
      *(void *)(a1 + 1720) = v196;
      *(void *)(a1 + 1728) = v195;
      goto LABEL_176;
    }
    goto LABEL_174;
  }
  if (v195 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1720);
LABEL_174:
    *(_OWORD *)(a1 + 1720) = *(_OWORD *)v194;
    goto LABEL_176;
  }
  uint64_t v197 = *v194;
  sub_100004214(*v194, *(void *)(a2 + 1728));
  uint64_t v198 = *(void *)(a1 + 1720);
  unint64_t v199 = *(void *)(a1 + 1728);
  *(void *)(a1 + 1720) = v197;
  *(void *)(a1 + 1728) = v195;
  sub_1000042CC(v198, v199);
LABEL_176:
  uint64_t v200 = *(void *)(a2 + 1736);
  *(unsigned char *)(a1 + 1744) = *(unsigned char *)(a2 + 1744);
  *(void *)(a1 + 1736) = v200;
  *(unsigned char *)(a1 + 1745) = *(unsigned char *)(a2 + 1745);
  *(void *)(a1 + 1752) = *(void *)(a2 + 1752);
  *(void *)(a1 + 1760) = *(void *)(a2 + 1760);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v201 = *(void *)(a2 + 1768);
  *(unsigned char *)(a1 + 1776) = *(unsigned char *)(a2 + 1776);
  *(void *)(a1 + 1768) = v201;
  uint64_t v202 = *(void *)(a2 + 1784);
  *(unsigned char *)(a1 + 1792) = *(unsigned char *)(a2 + 1792);
  *(void *)(a1 + 1784) = v202;
  uint64_t v203 = (uint64_t *)(a2 + 1800);
  unint64_t v204 = *(void *)(a2 + 1808);
  if (*(void *)(a1 + 1808) >> 60 == 15)
  {
    if (v204 >> 60 != 15)
    {
      uint64_t v205 = *v203;
      sub_100004214(*v203, *(void *)(a2 + 1808));
      *(void *)(a1 + 1800) = v205;
      *(void *)(a1 + 1808) = v204;
      goto LABEL_183;
    }
    goto LABEL_181;
  }
  if (v204 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1800);
LABEL_181:
    *(_OWORD *)(a1 + 1800) = *(_OWORD *)v203;
    goto LABEL_183;
  }
  uint64_t v206 = *v203;
  sub_100004214(*v203, *(void *)(a2 + 1808));
  uint64_t v207 = *(void *)(a1 + 1800);
  unint64_t v208 = *(void *)(a1 + 1808);
  *(void *)(a1 + 1800) = v206;
  *(void *)(a1 + 1808) = v204;
  sub_1000042CC(v207, v208);
LABEL_183:
  uint64_t v209 = (uint64_t *)(a2 + 1816);
  unint64_t v210 = *(void *)(a2 + 1824);
  if (*(void *)(a1 + 1824) >> 60 == 15)
  {
    if (v210 >> 60 != 15)
    {
      uint64_t v211 = *v209;
      sub_100004214(*v209, *(void *)(a2 + 1824));
      *(void *)(a1 + 1816) = v211;
      *(void *)(a1 + 1824) = v210;
      goto LABEL_190;
    }
    goto LABEL_188;
  }
  if (v210 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1816);
LABEL_188:
    *(_OWORD *)(a1 + 1816) = *(_OWORD *)v209;
    goto LABEL_190;
  }
  uint64_t v212 = *v209;
  sub_100004214(*v209, *(void *)(a2 + 1824));
  uint64_t v213 = *(void *)(a1 + 1816);
  unint64_t v214 = *(void *)(a1 + 1824);
  *(void *)(a1 + 1816) = v212;
  *(void *)(a1 + 1824) = v210;
  sub_1000042CC(v213, v214);
LABEL_190:
  uint64_t v215 = *(void *)(a2 + 1832);
  *(unsigned char *)(a1 + 1840) = *(unsigned char *)(a2 + 1840);
  *(void *)(a1 + 1832) = v215;
  int v216 = (uint64_t *)(a2 + 1848);
  unint64_t v217 = *(void *)(a2 + 1856);
  if (*(void *)(a1 + 1856) >> 60 == 15)
  {
    if (v217 >> 60 != 15)
    {
      uint64_t v218 = *v216;
      sub_100004214(*v216, *(void *)(a2 + 1856));
      *(void *)(a1 + 1848) = v218;
      *(void *)(a1 + 1856) = v217;
      goto LABEL_197;
    }
    goto LABEL_195;
  }
  if (v217 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1848);
LABEL_195:
    *(_OWORD *)(a1 + 1848) = *(_OWORD *)v216;
    goto LABEL_197;
  }
  uint64_t v219 = *v216;
  sub_100004214(*v216, *(void *)(a2 + 1856));
  uint64_t v220 = *(void *)(a1 + 1848);
  unint64_t v221 = *(void *)(a1 + 1856);
  *(void *)(a1 + 1848) = v219;
  *(void *)(a1 + 1856) = v217;
  sub_1000042CC(v220, v221);
LABEL_197:
  uint64_t v222 = (uint64_t *)(a2 + 1864);
  unint64_t v223 = *(void *)(a2 + 1872);
  if (*(void *)(a1 + 1872) >> 60 == 15)
  {
    if (v223 >> 60 != 15)
    {
      uint64_t v224 = *v222;
      sub_100004214(*v222, *(void *)(a2 + 1872));
      *(void *)(a1 + 1864) = v224;
      *(void *)(a1 + 1872) = v223;
      goto LABEL_204;
    }
    goto LABEL_202;
  }
  if (v223 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1864);
LABEL_202:
    *(_OWORD *)(a1 + 1864) = *(_OWORD *)v222;
    goto LABEL_204;
  }
  uint64_t v225 = *v222;
  sub_100004214(*v222, *(void *)(a2 + 1872));
  uint64_t v226 = *(void *)(a1 + 1864);
  unint64_t v227 = *(void *)(a1 + 1872);
  *(void *)(a1 + 1864) = v225;
  *(void *)(a1 + 1872) = v223;
  sub_1000042CC(v226, v227);
LABEL_204:
  uint64_t v228 = (uint64_t *)(a2 + 1880);
  unint64_t v229 = *(void *)(a2 + 1888);
  if (*(void *)(a1 + 1888) >> 60 == 15)
  {
    if (v229 >> 60 != 15)
    {
      uint64_t v230 = *v228;
      sub_100004214(*v228, *(void *)(a2 + 1888));
      *(void *)(a1 + 1880) = v230;
      *(void *)(a1 + 1888) = v229;
      goto LABEL_211;
    }
    goto LABEL_209;
  }
  if (v229 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1880);
LABEL_209:
    *(_OWORD *)(a1 + 1880) = *(_OWORD *)v228;
    goto LABEL_211;
  }
  uint64_t v231 = *v228;
  sub_100004214(*v228, *(void *)(a2 + 1888));
  uint64_t v232 = *(void *)(a1 + 1880);
  unint64_t v233 = *(void *)(a1 + 1888);
  *(void *)(a1 + 1880) = v231;
  *(void *)(a1 + 1888) = v229;
  sub_1000042CC(v232, v233);
LABEL_211:
  uint64_t v234 = *(void *)(a2 + 1896);
  *(unsigned char *)(a1 + 1904) = *(unsigned char *)(a2 + 1904);
  *(void *)(a1 + 1896) = v234;
  int v235 = (uint64_t *)(a2 + 1912);
  unint64_t v236 = *(void *)(a2 + 1920);
  if (*(void *)(a1 + 1920) >> 60 == 15)
  {
    if (v236 >> 60 != 15)
    {
      uint64_t v237 = *v235;
      sub_100004214(*v235, *(void *)(a2 + 1920));
      *(void *)(a1 + 1912) = v237;
      *(void *)(a1 + 1920) = v236;
      goto LABEL_218;
    }
    goto LABEL_216;
  }
  if (v236 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1912);
LABEL_216:
    *(_OWORD *)(a1 + 1912) = *(_OWORD *)v235;
    goto LABEL_218;
  }
  uint64_t v238 = *v235;
  sub_100004214(*v235, *(void *)(a2 + 1920));
  uint64_t v239 = *(void *)(a1 + 1912);
  unint64_t v240 = *(void *)(a1 + 1920);
  *(void *)(a1 + 1912) = v238;
  *(void *)(a1 + 1920) = v236;
  sub_1000042CC(v239, v240);
LABEL_218:
  uint64_t v241 = *(void *)(a2 + 1928);
  *(unsigned char *)(a1 + 1936) = *(unsigned char *)(a2 + 1936);
  *(void *)(a1 + 1928) = v241;
  uint64_t v242 = (uint64_t *)(a2 + 1944);
  unint64_t v243 = *(void *)(a2 + 1952);
  if (*(void *)(a1 + 1952) >> 60 == 15)
  {
    if (v243 >> 60 != 15)
    {
      uint64_t v244 = *v242;
      sub_100004214(*v242, *(void *)(a2 + 1952));
      *(void *)(a1 + 1944) = v244;
      *(void *)(a1 + 1952) = v243;
      goto LABEL_225;
    }
    goto LABEL_223;
  }
  if (v243 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1944);
LABEL_223:
    *(_OWORD *)(a1 + 1944) = *(_OWORD *)v242;
    goto LABEL_225;
  }
  uint64_t v245 = *v242;
  sub_100004214(*v242, *(void *)(a2 + 1952));
  uint64_t v246 = *(void *)(a1 + 1944);
  unint64_t v247 = *(void *)(a1 + 1952);
  *(void *)(a1 + 1944) = v245;
  *(void *)(a1 + 1952) = v243;
  sub_1000042CC(v246, v247);
LABEL_225:
  *(void *)(a1 + 1960) = *(void *)(a2 + 1960);
  *(void *)(a1 + 1968) = *(void *)(a2 + 1968);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v248 = *(void *)(a2 + 1976);
  *(unsigned char *)(a1 + 1984) = *(unsigned char *)(a2 + 1984);
  *(void *)(a1 + 1976) = v248;
  uint64_t v249 = *(void *)(a2 + 1992);
  *(unsigned char *)(a1 + 2000) = *(unsigned char *)(a2 + 2000);
  *(void *)(a1 + 1992) = v249;
  uint64_t v250 = *(void *)(a2 + 2008);
  *(unsigned char *)(a1 + 2016) = *(unsigned char *)(a2 + 2016);
  *(void *)(a1 + 2008) = v250;
  uint64_t v251 = *(void *)(a2 + 2024);
  *(unsigned char *)(a1 + 2032) = *(unsigned char *)(a2 + 2032);
  *(void *)(a1 + 2024) = v251;
  *(void *)(a1 + 2040) = *(void *)(a2 + 2040);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2048) = *(void *)(a2 + 2048);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v252 = (uint64_t *)(a2 + 2056);
  unint64_t v253 = *(void *)(a2 + 2064);
  if (*(void *)(a1 + 2064) >> 60 != 15)
  {
    if (v253 >> 60 != 15)
    {
      uint64_t v255 = *v252;
      sub_100004214(*v252, *(void *)(a2 + 2064));
      uint64_t v256 = *(void *)(a1 + 2056);
      unint64_t v257 = *(void *)(a1 + 2064);
      *(void *)(a1 + 2056) = v255;
      *(void *)(a1 + 2064) = v253;
      sub_1000042CC(v256, v257);
      goto LABEL_232;
    }
    sub_1000044A0(a1 + 2056);
    goto LABEL_230;
  }
  if (v253 >> 60 == 15)
  {
LABEL_230:
    *(_OWORD *)(a1 + 2056) = *(_OWORD *)v252;
    goto LABEL_232;
  }
  uint64_t v254 = *v252;
  sub_100004214(*v252, *(void *)(a2 + 2064));
  *(void *)(a1 + 2056) = v254;
  *(void *)(a1 + 2064) = v253;
LABEL_232:
  uint64_t v258 = *(void *)(a2 + 2072);
  *(unsigned char *)(a1 + 2080) = *(unsigned char *)(a2 + 2080);
  *(void *)(a1 + 2072) = v258;
  *(void *)(a1 + 2088) = *(void *)(a2 + 2088);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v259 = *(void *)(a2 + 2096);
  *(unsigned char *)(a1 + 2104) = *(unsigned char *)(a2 + 2104);
  *(void *)(a1 + 2096) = v259;
  uint64_t v260 = *(void *)(a2 + 2112);
  *(unsigned char *)(a1 + 2120) = *(unsigned char *)(a2 + 2120);
  *(void *)(a1 + 2112) = v260;
  *(unsigned char *)(a1 + 2121) = *(unsigned char *)(a2 + 2121);
  *(unsigned char *)(a1 + 2122) = *(unsigned char *)(a2 + 2122);
  *(void *)(a1 + 2128) = *(void *)(a2 + 2128);
  *(void *)(a1 + 2136) = *(void *)(a2 + 2136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 2144) = *(unsigned char *)(a2 + 2144);
  uint64_t v261 = *(void *)(a2 + 2152);
  *(unsigned char *)(a1 + 2160) = *(unsigned char *)(a2 + 2160);
  *(void *)(a1 + 2152) = v261;
  uint64_t v262 = *(void *)(a2 + 2168);
  *(unsigned char *)(a1 + 2176) = *(unsigned char *)(a2 + 2176);
  *(void *)(a1 + 2168) = v262;
  *(unsigned char *)(a1 + 2177) = *(unsigned char *)(a2 + 2177);
  *(unsigned char *)(a1 + 2178) = *(unsigned char *)(a2 + 2178);
  return a1;
}

uint64_t sub_10005B278(uint64_t a1)
{
  return a1;
}

void *initializeWithTake for IDSMadridProtocolPayload(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x883uLL);
}

uint64_t assignWithTake for IDSMadridProtocolPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = (_OWORD *)(a1 + 40);
  unint64_t v6 = (_OWORD *)(a2 + 40);
  unint64_t v7 = *(void *)(a1 + 48);
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 48);
  if (v8 >> 60 == 15)
  {
    sub_1000044A0(a1 + 40);
LABEL_4:
    *uint64_t v5 = *v6;
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)v6;
  *(void *)(a1 + 48) = v8;
  sub_1000042CC(v9, v7);
LABEL_6:
  uint64_t v10 = (_OWORD *)(a2 + 56);
  unint64_t v11 = *(void *)(a1 + 64);
  if (v11 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 56) = *v10;
    goto LABEL_11;
  }
  unint64_t v12 = *(void *)(a2 + 64);
  if (v12 >> 60 == 15)
  {
    sub_1000044A0(a1 + 56);
    goto LABEL_9;
  }
  uint64_t v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)v10;
  *(void *)(a1 + 64) = v12;
  sub_1000042CC(v13, v11);
LABEL_11:
  unint64_t v14 = (_OWORD *)(a2 + 72);
  unint64_t v15 = *(void *)(a1 + 80);
  if (v15 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 72) = *v14;
    goto LABEL_16;
  }
  unint64_t v16 = *(void *)(a2 + 80);
  if (v16 >> 60 == 15)
  {
    sub_1000044A0(a1 + 72);
    goto LABEL_14;
  }
  uint64_t v17 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)v14;
  *(void *)(a1 + 80) = v16;
  sub_1000042CC(v17, v15);
LABEL_16:
  unint64_t v18 = (_OWORD *)(a2 + 88);
  unint64_t v19 = *(void *)(a1 + 96);
  if (v19 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)(a1 + 88) = *v18;
    goto LABEL_21;
  }
  unint64_t v20 = *(void *)(a2 + 96);
  if (v20 >> 60 == 15)
  {
    sub_1000044A0(a1 + 88);
    goto LABEL_19;
  }
  uint64_t v21 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)v18;
  *(void *)(a1 + 96) = v20;
  sub_1000042CC(v21, v19);
LABEL_21:
  uint64_t v22 = (_OWORD *)(a2 + 104);
  unint64_t v23 = *(void *)(a1 + 112);
  if (v23 >> 60 == 15)
  {
LABEL_24:
    *(_OWORD *)(a1 + 104) = *v22;
    goto LABEL_26;
  }
  unint64_t v24 = *(void *)(a2 + 112);
  if (v24 >> 60 == 15)
  {
    sub_1000044A0(a1 + 104);
    goto LABEL_24;
  }
  uint64_t v25 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)v22;
  *(void *)(a1 + 112) = v24;
  sub_1000042CC(v25, v23);
LABEL_26:
  uint64_t v26 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v26;
  swift_bridgeObjectRelease();
  uint64_t v27 = (_OWORD *)(a2 + 136);
  unint64_t v28 = *(void *)(a1 + 144);
  if (v28 >> 60 == 15)
  {
LABEL_29:
    *(_OWORD *)(a1 + 136) = *v27;
    goto LABEL_31;
  }
  unint64_t v29 = *(void *)(a2 + 144);
  if (v29 >> 60 == 15)
  {
    sub_1000044A0(a1 + 136);
    goto LABEL_29;
  }
  uint64_t v30 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)v27;
  *(void *)(a1 + 144) = v29;
  sub_1000042CC(v30, v28);
LABEL_31:
  uint64_t v31 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v31;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_WORD *)(a1 + 184) = *(_WORD *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  unint64_t v32 = (_OWORD *)(a2 + 208);
  unint64_t v33 = *(void *)(a1 + 216);
  if (v33 >> 60 == 15)
  {
LABEL_34:
    *(_OWORD *)(a1 + 208) = *v32;
    goto LABEL_36;
  }
  unint64_t v34 = *(void *)(a2 + 216);
  if (v34 >> 60 == 15)
  {
    sub_1000044A0(a1 + 208);
    goto LABEL_34;
  }
  uint64_t v35 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = *(void *)v32;
  *(void *)(a1 + 216) = v34;
  sub_1000042CC(v35, v33);
LABEL_36:
  *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
  unint64_t v36 = (_OWORD *)(a2 + 232);
  unint64_t v37 = *(void *)(a1 + 240);
  if (v37 >> 60 == 15)
  {
LABEL_39:
    *(_OWORD *)(a1 + 232) = *v36;
    goto LABEL_41;
  }
  unint64_t v38 = *(void *)(a2 + 240);
  if (v38 >> 60 == 15)
  {
    sub_1000044A0(a1 + 232);
    goto LABEL_39;
  }
  uint64_t v39 = *(void *)(a1 + 232);
  *(void *)(a1 + 232) = *(void *)v36;
  *(void *)(a1 + 240) = v38;
  sub_1000042CC(v39, v37);
LABEL_41:
  uint64_t v40 = (_OWORD *)(a2 + 248);
  unint64_t v41 = *(void *)(a1 + 256);
  if (v41 >> 60 == 15)
  {
LABEL_44:
    *(_OWORD *)(a1 + 248) = *v40;
    goto LABEL_46;
  }
  unint64_t v42 = *(void *)(a2 + 256);
  if (v42 >> 60 == 15)
  {
    sub_1000044A0(a1 + 248);
    goto LABEL_44;
  }
  uint64_t v43 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = *(void *)v40;
  *(void *)(a1 + 256) = v42;
  sub_1000042CC(v43, v41);
LABEL_46:
  uint64_t v44 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v44;
  swift_bridgeObjectRelease();
  uint64_t v45 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v45;
  swift_bridgeObjectRelease();
  uint64_t v46 = *(void *)(a2 + 304);
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a1 + 304) = v46;
  swift_bridgeObjectRelease();
  uint64_t v47 = (_OWORD *)(a2 + 312);
  unint64_t v48 = *(void *)(a1 + 320);
  if (v48 >> 60 == 15)
  {
LABEL_49:
    *(_OWORD *)(a1 + 312) = *v47;
    goto LABEL_51;
  }
  unint64_t v49 = *(void *)(a2 + 320);
  if (v49 >> 60 == 15)
  {
    sub_1000044A0(a1 + 312);
    goto LABEL_49;
  }
  uint64_t v50 = *(void *)(a1 + 312);
  *(void *)(a1 + 312) = *(void *)v47;
  *(void *)(a1 + 320) = v49;
  sub_1000042CC(v50, v48);
LABEL_51:
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(unsigned char *)(a1 + 336) = *(unsigned char *)(a2 + 336);
  uint64_t v51 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v51;
  swift_bridgeObjectRelease();
  uint64_t v52 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v52;
  swift_bridgeObjectRelease();
  uint64_t v53 = *(void *)(a2 + 384);
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a1 + 384) = v53;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  swift_bridgeObjectRelease();
  uint64_t v54 = *(void *)(a2 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v54;
  swift_bridgeObjectRelease();
  uint64_t v55 = *(void *)(a2 + 432);
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a1 + 432) = v55;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(unsigned char *)(a1 + 448) = *(unsigned char *)(a2 + 448);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
  uint64_t v56 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v56;
  swift_bridgeObjectRelease();
  unint64_t v57 = (_OWORD *)(a2 + 488);
  unint64_t v58 = *(void *)(a1 + 496);
  if (v58 >> 60 == 15)
  {
LABEL_54:
    *(_OWORD *)(a1 + 488) = *v57;
    goto LABEL_56;
  }
  unint64_t v59 = *(void *)(a2 + 496);
  if (v59 >> 60 == 15)
  {
    sub_1000044A0(a1 + 488);
    goto LABEL_54;
  }
  uint64_t v60 = *(void *)(a1 + 488);
  *(void *)(a1 + 488) = *(void *)v57;
  *(void *)(a1 + 496) = v59;
  sub_1000042CC(v60, v58);
LABEL_56:
  uint64_t v61 = (_OWORD *)(a2 + 504);
  unint64_t v62 = *(void *)(a1 + 512);
  if (v62 >> 60 == 15)
  {
LABEL_59:
    *(_OWORD *)(a1 + 504) = *v61;
    goto LABEL_61;
  }
  unint64_t v63 = *(void *)(a2 + 512);
  if (v63 >> 60 == 15)
  {
    sub_1000044A0(a1 + 504);
    goto LABEL_59;
  }
  uint64_t v64 = *(void *)(a1 + 504);
  *(void *)(a1 + 504) = *(void *)v61;
  *(void *)(a1 + 512) = v63;
  sub_1000042CC(v64, v62);
LABEL_61:
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(unsigned char *)(a1 + 528) = *(unsigned char *)(a2 + 528);
  uint64_t v65 = (_OWORD *)(a2 + 536);
  unint64_t v66 = *(void *)(a1 + 544);
  if (v66 >> 60 == 15)
  {
LABEL_64:
    *(_OWORD *)(a1 + 536) = *v65;
    goto LABEL_66;
  }
  unint64_t v67 = *(void *)(a2 + 544);
  if (v67 >> 60 == 15)
  {
    sub_1000044A0(a1 + 536);
    goto LABEL_64;
  }
  uint64_t v68 = *(void *)(a1 + 536);
  *(void *)(a1 + 536) = *(void *)v65;
  *(void *)(a1 + 544) = v67;
  sub_1000042CC(v68, v66);
LABEL_66:
  *(void *)(a1 + 552) = *(void *)(a2 + 552);
  *(void *)(a1 + 560) = *(void *)(a2 + 560);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 568) = *(void *)(a2 + 568);
  *(void *)(a1 + 576) = *(void *)(a2 + 576);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(unsigned char *)(a1 + 608) = *(unsigned char *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(unsigned char *)(a1 + 624) = *(unsigned char *)(a2 + 624);
  *(void *)(a1 + 632) = *(void *)(a2 + 632);
  *(unsigned char *)(a1 + 640) = *(unsigned char *)(a2 + 640);
  *(unsigned char *)(a1 + 656) = *(unsigned char *)(a2 + 656);
  uint64_t v69 = (_OWORD *)(a2 + 664);
  *(void *)(a1 + 648) = *(void *)(a2 + 648);
  unint64_t v70 = *(void *)(a1 + 672);
  if (v70 >> 60 == 15)
  {
LABEL_69:
    *(_OWORD *)(a1 + 664) = *v69;
    goto LABEL_71;
  }
  unint64_t v71 = *(void *)(a2 + 672);
  if (v71 >> 60 == 15)
  {
    sub_1000044A0(a1 + 664);
    goto LABEL_69;
  }
  uint64_t v72 = *(void *)(a1 + 664);
  *(void *)(a1 + 664) = *(void *)v69;
  *(void *)(a1 + 672) = v71;
  sub_1000042CC(v72, v70);
LABEL_71:
  *(void *)(a1 + 680) = *(void *)(a2 + 680);
  *(void *)(a1 + 688) = *(void *)(a2 + 688);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 696) = *(void *)(a2 + 696);
  *(unsigned char *)(a1 + 704) = *(unsigned char *)(a2 + 704);
  *(void *)(a1 + 712) = *(void *)(a2 + 712);
  *(unsigned char *)(a1 + 720) = *(unsigned char *)(a2 + 720);
  *(void *)(a1 + 728) = *(void *)(a2 + 728);
  *(void *)(a1 + 736) = *(void *)(a2 + 736);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 744) = *(void *)(a2 + 744);
  *(unsigned char *)(a1 + 752) = *(unsigned char *)(a2 + 752);
  *(void *)(a1 + 760) = *(void *)(a2 + 760);
  *(void *)(a1 + 768) = *(void *)(a2 + 768);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 776) = *(void *)(a2 + 776);
  *(unsigned char *)(a1 + 784) = *(unsigned char *)(a2 + 784);
  *(void *)(a1 + 792) = *(void *)(a2 + 792);
  *(unsigned char *)(a1 + 800) = *(unsigned char *)(a2 + 800);
  *(void *)(a1 + 808) = *(void *)(a2 + 808);
  *(unsigned char *)(a1 + 816) = *(unsigned char *)(a2 + 816);
  *(void *)(a1 + 824) = *(void *)(a2 + 824);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 832) = *(void *)(a2 + 832);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 840) = *(void *)(a2 + 840);
  *(unsigned char *)(a1 + 848) = *(unsigned char *)(a2 + 848);
  *(void *)(a1 + 856) = *(void *)(a2 + 856);
  *(unsigned char *)(a1 + 864) = *(unsigned char *)(a2 + 864);
  *(void *)(a1 + 872) = *(void *)(a2 + 872);
  *(unsigned char *)(a1 + 880) = *(unsigned char *)(a2 + 880);
  *(_DWORD *)(a1 + 881) = *(_DWORD *)(a2 + 881);
  *(void *)(a1 + 888) = *(void *)(a2 + 888);
  *(void *)(a1 + 896) = *(void *)(a2 + 896);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 904) = *(void *)(a2 + 904);
  *(void *)(a1 + 912) = *(void *)(a2 + 912);
  swift_bridgeObjectRelease();
  unint64_t v73 = (_OWORD *)(a2 + 920);
  unint64_t v74 = *(void *)(a1 + 928);
  if (v74 >> 60 == 15)
  {
LABEL_74:
    *(_OWORD *)(a1 + 920) = *v73;
    goto LABEL_76;
  }
  unint64_t v75 = *(void *)(a2 + 928);
  if (v75 >> 60 == 15)
  {
    sub_1000044A0(a1 + 920);
    goto LABEL_74;
  }
  uint64_t v76 = *(void *)(a1 + 920);
  *(void *)(a1 + 920) = *(void *)v73;
  *(void *)(a1 + 928) = v75;
  sub_1000042CC(v76, v74);
LABEL_76:
  *(void *)(a1 + 936) = *(void *)(a2 + 936);
  *(void *)(a1 + 944) = *(void *)(a2 + 944);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 952) = *(void *)(a2 + 952);
  *(void *)(a1 + 960) = *(void *)(a2 + 960);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 968) = *(void *)(a2 + 968);
  *(void *)(a1 + 976) = *(void *)(a2 + 976);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 984) = *(void *)(a2 + 984);
  *(void *)(a1 + 992) = *(void *)(a2 + 992);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1000) = *(void *)(a2 + 1000);
  *(void *)(a1 + 1008) = *(void *)(a2 + 1008);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1016) = *(void *)(a2 + 1016);
  *(unsigned char *)(a1 + 1024) = *(unsigned char *)(a2 + 1024);
  *(void *)(a1 + 1032) = *(void *)(a2 + 1032);
  *(void *)(a1 + 1040) = *(void *)(a2 + 1040);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1048) = *(void *)(a2 + 1048);
  *(unsigned char *)(a1 + 1056) = *(unsigned char *)(a2 + 1056);
  *(void *)(a1 + 1064) = *(void *)(a2 + 1064);
  *(void *)(a1 + 1072) = *(void *)(a2 + 1072);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1080) = *(void *)(a2 + 1080);
  *(_WORD *)(a1 + 1088) = *(_WORD *)(a2 + 1088);
  *(void *)(a1 + 1096) = *(void *)(a2 + 1096);
  *(void *)(a1 + 1104) = *(void *)(a2 + 1104);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1112) = *(void *)(a2 + 1112);
  *(unsigned char *)(a1 + 1120) = *(unsigned char *)(a2 + 1120);
  *(void *)(a1 + 1128) = *(void *)(a2 + 1128);
  *(unsigned char *)(a1 + 1136) = *(unsigned char *)(a2 + 1136);
  *(void *)(a1 + 1144) = *(void *)(a2 + 1144);
  *(void *)(a1 + 1152) = *(void *)(a2 + 1152);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 1168) == 1)
  {
LABEL_79:
    long long v78 = *(_OWORD *)(a2 + 1208);
    *(_OWORD *)(a1 + 1192) = *(_OWORD *)(a2 + 1192);
    *(_OWORD *)(a1 + 1208) = v78;
    long long v79 = *(_OWORD *)(a2 + 1240);
    *(_OWORD *)(a1 + 1224) = *(_OWORD *)(a2 + 1224);
    *(_OWORD *)(a1 + 1240) = v79;
    long long v80 = *(_OWORD *)(a2 + 1176);
    *(_OWORD *)(a1 + 1160) = *(_OWORD *)(a2 + 1160);
    *(_OWORD *)(a1 + 1176) = v80;
    goto LABEL_81;
  }
  uint64_t v77 = *(void *)(a2 + 1168);
  if (v77 == 1)
  {
    sub_10005B278(a1 + 1160);
    goto LABEL_79;
  }
  *(void *)(a1 + 1160) = *(void *)(a2 + 1160);
  *(void *)(a1 + 1168) = v77;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1176) = *(void *)(a2 + 1176);
  *(void *)(a1 + 1184) = *(void *)(a2 + 1184);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1192) = *(void *)(a2 + 1192);
  *(void *)(a1 + 1200) = *(void *)(a2 + 1200);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1208) = *(void *)(a2 + 1208);
  *(void *)(a1 + 1216) = *(void *)(a2 + 1216);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1224) = *(void *)(a2 + 1224);
  *(void *)(a1 + 1232) = *(void *)(a2 + 1232);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1240) = *(void *)(a2 + 1240);
  *(void *)(a1 + 1248) = *(void *)(a2 + 1248);
  swift_bridgeObjectRelease();
LABEL_81:
  uint64_t v81 = (_OWORD *)(a2 + 1256);
  unint64_t v82 = *(void *)(a1 + 1264);
  if (v82 >> 60 == 15)
  {
LABEL_84:
    *(_OWORD *)(a1 + 1256) = *v81;
    goto LABEL_86;
  }
  unint64_t v83 = *(void *)(a2 + 1264);
  if (v83 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1256);
    goto LABEL_84;
  }
  uint64_t v84 = *(void *)(a1 + 1256);
  *(void *)(a1 + 1256) = *(void *)v81;
  *(void *)(a1 + 1264) = v83;
  sub_1000042CC(v84, v82);
LABEL_86:
  *(void *)(a1 + 1272) = *(void *)(a2 + 1272);
  *(void *)(a1 + 1280) = *(void *)(a2 + 1280);
  swift_bridgeObjectRelease();
  uint64_t v85 = (_OWORD *)(a2 + 1288);
  unint64_t v86 = *(void *)(a1 + 1296);
  if (v86 >> 60 == 15)
  {
LABEL_89:
    *(_OWORD *)(a1 + 1288) = *v85;
    goto LABEL_91;
  }
  unint64_t v87 = *(void *)(a2 + 1296);
  if (v87 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1288);
    goto LABEL_89;
  }
  uint64_t v88 = *(void *)(a1 + 1288);
  *(void *)(a1 + 1288) = *(void *)v85;
  *(void *)(a1 + 1296) = v87;
  sub_1000042CC(v88, v86);
LABEL_91:
  *(void *)(a1 + 1304) = *(void *)(a2 + 1304);
  *(unsigned char *)(a1 + 1312) = *(unsigned char *)(a2 + 1312);
  *(void *)(a1 + 1320) = *(void *)(a2 + 1320);
  *(void *)(a1 + 1328) = *(void *)(a2 + 1328);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 1336) = *(unsigned char *)(a2 + 1336);
  *(_WORD *)(a1 + 1337) = *(_WORD *)(a2 + 1337);
  *(void *)(a1 + 1344) = *(void *)(a2 + 1344);
  *(unsigned char *)(a1 + 1352) = *(unsigned char *)(a2 + 1352);
  *(void *)(a1 + 1360) = *(void *)(a2 + 1360);
  *(void *)(a1 + 1368) = *(void *)(a2 + 1368);
  swift_bridgeObjectRelease();
  uint64_t v89 = (_OWORD *)(a2 + 1376);
  unint64_t v90 = *(void *)(a1 + 1384);
  if (v90 >> 60 == 15)
  {
LABEL_94:
    *(_OWORD *)(a1 + 1376) = *v89;
    goto LABEL_96;
  }
  unint64_t v91 = *(void *)(a2 + 1384);
  if (v91 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1376);
    goto LABEL_94;
  }
  uint64_t v92 = *(void *)(a1 + 1376);
  *(void *)(a1 + 1376) = *(void *)v89;
  *(void *)(a1 + 1384) = v91;
  sub_1000042CC(v92, v90);
LABEL_96:
  uint64_t v93 = (_OWORD *)(a2 + 1392);
  unint64_t v94 = *(void *)(a1 + 1400);
  if (v94 >> 60 == 15)
  {
LABEL_99:
    *(_OWORD *)(a1 + 1392) = *v93;
    goto LABEL_101;
  }
  unint64_t v95 = *(void *)(a2 + 1400);
  if (v95 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1392);
    goto LABEL_99;
  }
  uint64_t v96 = *(void *)(a1 + 1392);
  *(void *)(a1 + 1392) = *(void *)v93;
  *(void *)(a1 + 1400) = v95;
  sub_1000042CC(v96, v94);
LABEL_101:
  *(void *)(a1 + 1408) = *(void *)(a2 + 1408);
  *(unsigned char *)(a1 + 1416) = *(unsigned char *)(a2 + 1416);
  *(_WORD *)(a1 + 1417) = *(_WORD *)(a2 + 1417);
  *(void *)(a1 + 1424) = *(void *)(a2 + 1424);
  *(unsigned char *)(a1 + 1432) = *(unsigned char *)(a2 + 1432);
  *(void *)(a1 + 1440) = *(void *)(a2 + 1440);
  *(_WORD *)(a1 + 1448) = *(_WORD *)(a2 + 1448);
  *(unsigned char *)(a1 + 1464) = *(unsigned char *)(a2 + 1464);
  *(void *)(a1 + 1456) = *(void *)(a2 + 1456);
  *(unsigned char *)(a1 + 1480) = *(unsigned char *)(a2 + 1480);
  *(void *)(a1 + 1472) = *(void *)(a2 + 1472);
  *(void *)(a1 + 1488) = *(void *)(a2 + 1488);
  *(void *)(a1 + 1496) = *(void *)(a2 + 1496);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1504) = *(void *)(a2 + 1504);
  *(unsigned char *)(a1 + 1512) = *(unsigned char *)(a2 + 1512);
  *(void *)(a1 + 1520) = *(void *)(a2 + 1520);
  *(unsigned char *)(a1 + 1528) = *(unsigned char *)(a2 + 1528);
  uint64_t v97 = (_OWORD *)(a2 + 1536);
  unint64_t v98 = *(void *)(a1 + 1544);
  if (v98 >> 60 == 15)
  {
LABEL_104:
    *(_OWORD *)(a1 + 1536) = *v97;
    goto LABEL_106;
  }
  unint64_t v99 = *(void *)(a2 + 1544);
  if (v99 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1536);
    goto LABEL_104;
  }
  uint64_t v100 = *(void *)(a1 + 1536);
  *(void *)(a1 + 1536) = *(void *)v97;
  *(void *)(a1 + 1544) = v99;
  sub_1000042CC(v100, v98);
LABEL_106:
  uint64_t v101 = (_OWORD *)(a2 + 1552);
  unint64_t v102 = *(void *)(a1 + 1560);
  if (v102 >> 60 == 15)
  {
LABEL_109:
    *(_OWORD *)(a1 + 1552) = *v101;
    goto LABEL_111;
  }
  unint64_t v103 = *(void *)(a2 + 1560);
  if (v103 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1552);
    goto LABEL_109;
  }
  uint64_t v104 = *(void *)(a1 + 1552);
  *(void *)(a1 + 1552) = *(void *)v101;
  *(void *)(a1 + 1560) = v103;
  sub_1000042CC(v104, v102);
LABEL_111:
  *(void *)(a1 + 1568) = *(void *)(a2 + 1568);
  *(unsigned char *)(a1 + 1576) = *(unsigned char *)(a2 + 1576);
  uint64_t v105 = (_OWORD *)(a2 + 1584);
  unint64_t v106 = *(void *)(a1 + 1592);
  if (v106 >> 60 == 15)
  {
LABEL_114:
    *(_OWORD *)(a1 + 1584) = *v105;
    goto LABEL_116;
  }
  unint64_t v107 = *(void *)(a2 + 1592);
  if (v107 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1584);
    goto LABEL_114;
  }
  uint64_t v108 = *(void *)(a1 + 1584);
  *(void *)(a1 + 1584) = *(void *)v105;
  *(void *)(a1 + 1592) = v107;
  sub_1000042CC(v108, v106);
LABEL_116:
  uint64_t v109 = (_OWORD *)(a2 + 1600);
  unint64_t v110 = *(void *)(a1 + 1608);
  if (v110 >> 60 == 15)
  {
LABEL_119:
    *(_OWORD *)(a1 + 1600) = *v109;
    goto LABEL_121;
  }
  unint64_t v111 = *(void *)(a2 + 1608);
  if (v111 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1600);
    goto LABEL_119;
  }
  uint64_t v112 = *(void *)(a1 + 1600);
  *(void *)(a1 + 1600) = *(void *)v109;
  *(void *)(a1 + 1608) = v111;
  sub_1000042CC(v112, v110);
LABEL_121:
  *(void *)(a1 + 1616) = *(void *)(a2 + 1616);
  *(unsigned char *)(a1 + 1624) = *(unsigned char *)(a2 + 1624);
  *(void *)(a1 + 1632) = *(void *)(a2 + 1632);
  *(unsigned char *)(a1 + 1640) = *(unsigned char *)(a2 + 1640);
  *(void *)(a1 + 1648) = *(void *)(a2 + 1648);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1656) = *(void *)(a2 + 1656);
  *(void *)(a1 + 1664) = *(void *)(a2 + 1664);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1672) = *(void *)(a2 + 1672);
  *(void *)(a1 + 1680) = *(void *)(a2 + 1680);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1688) = *(void *)(a2 + 1688);
  *(unsigned char *)(a1 + 1696) = *(unsigned char *)(a2 + 1696);
  *(_WORD *)(a1 + 1697) = *(_WORD *)(a2 + 1697);
  *(void *)(a1 + 1704) = *(void *)(a2 + 1704);
  *(unsigned char *)(a1 + 1712) = *(unsigned char *)(a2 + 1712);
  uint64_t v113 = (_OWORD *)(a2 + 1720);
  unint64_t v114 = *(void *)(a1 + 1728);
  if (v114 >> 60 == 15)
  {
LABEL_124:
    *(_OWORD *)(a1 + 1720) = *v113;
    goto LABEL_126;
  }
  unint64_t v115 = *(void *)(a2 + 1728);
  if (v115 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1720);
    goto LABEL_124;
  }
  uint64_t v116 = *(void *)(a1 + 1720);
  *(void *)(a1 + 1720) = *(void *)v113;
  *(void *)(a1 + 1728) = v115;
  sub_1000042CC(v116, v114);
LABEL_126:
  *(void *)(a1 + 1736) = *(void *)(a2 + 1736);
  *(_WORD *)(a1 + 1744) = *(_WORD *)(a2 + 1744);
  *(void *)(a1 + 1752) = *(void *)(a2 + 1752);
  *(void *)(a1 + 1760) = *(void *)(a2 + 1760);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1768) = *(void *)(a2 + 1768);
  *(unsigned char *)(a1 + 1776) = *(unsigned char *)(a2 + 1776);
  *(void *)(a1 + 1784) = *(void *)(a2 + 1784);
  *(unsigned char *)(a1 + 1792) = *(unsigned char *)(a2 + 1792);
  uint64_t v117 = (_OWORD *)(a2 + 1800);
  unint64_t v118 = *(void *)(a1 + 1808);
  if (v118 >> 60 == 15)
  {
LABEL_129:
    *(_OWORD *)(a1 + 1800) = *v117;
    goto LABEL_131;
  }
  unint64_t v119 = *(void *)(a2 + 1808);
  if (v119 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1800);
    goto LABEL_129;
  }
  uint64_t v120 = *(void *)(a1 + 1800);
  *(void *)(a1 + 1800) = *(void *)v117;
  *(void *)(a1 + 1808) = v119;
  sub_1000042CC(v120, v118);
LABEL_131:
  uint64_t v121 = (_OWORD *)(a2 + 1816);
  unint64_t v122 = *(void *)(a1 + 1824);
  if (v122 >> 60 == 15)
  {
LABEL_134:
    *(_OWORD *)(a1 + 1816) = *v121;
    goto LABEL_136;
  }
  unint64_t v123 = *(void *)(a2 + 1824);
  if (v123 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1816);
    goto LABEL_134;
  }
  uint64_t v124 = *(void *)(a1 + 1816);
  *(void *)(a1 + 1816) = *(void *)v121;
  *(void *)(a1 + 1824) = v123;
  sub_1000042CC(v124, v122);
LABEL_136:
  *(void *)(a1 + 1832) = *(void *)(a2 + 1832);
  *(unsigned char *)(a1 + 1840) = *(unsigned char *)(a2 + 1840);
  long long v125 = (_OWORD *)(a2 + 1848);
  unint64_t v126 = *(void *)(a1 + 1856);
  if (v126 >> 60 == 15)
  {
LABEL_139:
    *(_OWORD *)(a1 + 1848) = *v125;
    goto LABEL_141;
  }
  unint64_t v127 = *(void *)(a2 + 1856);
  if (v127 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1848);
    goto LABEL_139;
  }
  uint64_t v128 = *(void *)(a1 + 1848);
  *(void *)(a1 + 1848) = *(void *)v125;
  *(void *)(a1 + 1856) = v127;
  sub_1000042CC(v128, v126);
LABEL_141:
  long long v129 = (_OWORD *)(a2 + 1864);
  unint64_t v130 = *(void *)(a1 + 1872);
  if (v130 >> 60 == 15)
  {
LABEL_144:
    *(_OWORD *)(a1 + 1864) = *v129;
    goto LABEL_146;
  }
  unint64_t v131 = *(void *)(a2 + 1872);
  if (v131 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1864);
    goto LABEL_144;
  }
  uint64_t v132 = *(void *)(a1 + 1864);
  *(void *)(a1 + 1864) = *(void *)v129;
  *(void *)(a1 + 1872) = v131;
  sub_1000042CC(v132, v130);
LABEL_146:
  unint64_t v133 = (_OWORD *)(a2 + 1880);
  unint64_t v134 = *(void *)(a1 + 1888);
  if (v134 >> 60 == 15)
  {
LABEL_149:
    *(_OWORD *)(a1 + 1880) = *v133;
    goto LABEL_151;
  }
  unint64_t v135 = *(void *)(a2 + 1888);
  if (v135 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1880);
    goto LABEL_149;
  }
  uint64_t v136 = *(void *)(a1 + 1880);
  *(void *)(a1 + 1880) = *(void *)v133;
  *(void *)(a1 + 1888) = v135;
  sub_1000042CC(v136, v134);
LABEL_151:
  *(void *)(a1 + 1896) = *(void *)(a2 + 1896);
  *(unsigned char *)(a1 + 1904) = *(unsigned char *)(a2 + 1904);
  unint64_t v137 = (_OWORD *)(a2 + 1912);
  unint64_t v138 = *(void *)(a1 + 1920);
  if (v138 >> 60 == 15)
  {
LABEL_154:
    *(_OWORD *)(a1 + 1912) = *v137;
    goto LABEL_156;
  }
  unint64_t v139 = *(void *)(a2 + 1920);
  if (v139 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1912);
    goto LABEL_154;
  }
  uint64_t v140 = *(void *)(a1 + 1912);
  *(void *)(a1 + 1912) = *(void *)v137;
  *(void *)(a1 + 1920) = v139;
  sub_1000042CC(v140, v138);
LABEL_156:
  *(void *)(a1 + 1928) = *(void *)(a2 + 1928);
  *(unsigned char *)(a1 + 1936) = *(unsigned char *)(a2 + 1936);
  uint64_t v141 = (_OWORD *)(a2 + 1944);
  unint64_t v142 = *(void *)(a1 + 1952);
  if (v142 >> 60 == 15)
  {
LABEL_159:
    *(_OWORD *)(a1 + 1944) = *v141;
    goto LABEL_161;
  }
  unint64_t v143 = *(void *)(a2 + 1952);
  if (v143 >> 60 == 15)
  {
    sub_1000044A0(a1 + 1944);
    goto LABEL_159;
  }
  uint64_t v144 = *(void *)(a1 + 1944);
  *(void *)(a1 + 1944) = *(void *)v141;
  *(void *)(a1 + 1952) = v143;
  sub_1000042CC(v144, v142);
LABEL_161:
  *(void *)(a1 + 1960) = *(void *)(a2 + 1960);
  *(void *)(a1 + 1968) = *(void *)(a2 + 1968);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 1976) = *(void *)(a2 + 1976);
  *(unsigned char *)(a1 + 1984) = *(unsigned char *)(a2 + 1984);
  *(void *)(a1 + 1992) = *(void *)(a2 + 1992);
  *(unsigned char *)(a1 + 2000) = *(unsigned char *)(a2 + 2000);
  *(void *)(a1 + 2008) = *(void *)(a2 + 2008);
  *(unsigned char *)(a1 + 2016) = *(unsigned char *)(a2 + 2016);
  *(unsigned char *)(a1 + 2032) = *(unsigned char *)(a2 + 2032);
  *(void *)(a1 + 2024) = *(void *)(a2 + 2024);
  *(void *)(a1 + 2040) = *(void *)(a2 + 2040);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2048) = *(void *)(a2 + 2048);
  swift_bridgeObjectRelease();
  uint64_t v145 = (void *)(a2 + 2056);
  unint64_t v146 = *(void *)(a1 + 2064);
  if (v146 >> 60 != 15)
  {
    unint64_t v147 = *(void *)(a2 + 2064);
    if (v147 >> 60 != 15)
    {
      uint64_t v148 = *(void *)(a1 + 2056);
      *(void *)(a1 + 2056) = *v145;
      *(void *)(a1 + 2064) = v147;
      sub_1000042CC(v148, v146);
      goto LABEL_166;
    }
    sub_1000044A0(a1 + 2056);
  }
  *(_OWORD *)(a1 + 2056) = *(_OWORD *)v145;
LABEL_166:
  *(void *)(a1 + 2072) = *(void *)(a2 + 2072);
  *(unsigned char *)(a1 + 2080) = *(unsigned char *)(a2 + 2080);
  *(void *)(a1 + 2088) = *(void *)(a2 + 2088);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 2096) = *(void *)(a2 + 2096);
  *(unsigned char *)(a1 + 2104) = *(unsigned char *)(a2 + 2104);
  *(void *)(a1 + 2112) = *(void *)(a2 + 2112);
  *(unsigned char *)(a1 + 2120) = *(unsigned char *)(a2 + 2120);
  *(_WORD *)(a1 + 2121) = *(_WORD *)(a2 + 2121);
  *(void *)(a1 + 2128) = *(void *)(a2 + 2128);
  *(void *)(a1 + 2136) = *(void *)(a2 + 2136);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 2144) = *(unsigned char *)(a2 + 2144);
  *(void *)(a1 + 2152) = *(void *)(a2 + 2152);
  *(unsigned char *)(a1 + 2160) = *(unsigned char *)(a2 + 2160);
  *(void *)(a1 + 2168) = *(void *)(a2 + 2168);
  *(unsigned char *)(a1 + 2176) = *(unsigned char *)(a2 + 2176);
  *(_WORD *)(a1 + 2177) = *(_WORD *)(a2 + 2177);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSMadridProtocolPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 2179)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 128);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSMadridProtocolPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 2168) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 2178) = 0;
    *(_WORD *)(result + 2176) = 0;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 2179) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 2179) = 0;
    }
    if (a2) {
      *(void *)(result + 128) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSMadridProtocolPayload()
{
  return &type metadata for IDSMadridProtocolPayload;
}

uint64_t destroy for IDSMadridProtocolHttpHeaders()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for IDSMadridProtocolHttpHeaders(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IDSMadridProtocolHttpHeaders(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for IDSMadridProtocolHttpHeaders(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

void *assignWithTake for IDSMadridProtocolHttpHeaders(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSMadridProtocolHttpHeaders(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSMadridProtocolHttpHeaders(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSMadridProtocolHttpHeaders()
{
  return &type metadata for IDSMadridProtocolHttpHeaders;
}

uint64_t initializeBufferWithCopyOfBuffer for IDSMadridProtocolDeliveryContext(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for IDSMadridProtocolDeliveryContext(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for IDSMadridProtocolDeliveryContext(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for IDSMadridProtocolDeliveryContext()
{
  return &type metadata for IDSMadridProtocolDeliveryContext;
}

uint64_t destroy for IDSQuickRelayPluginRequest()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IDSQuickRelayPluginRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IDSQuickRelayPluginRequest(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return a1;
}

__n128 initializeWithTake for IDSQuickRelayPluginRequest(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for IDSQuickRelayPluginRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSQuickRelayPluginRequest(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSQuickRelayPluginRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSQuickRelayPluginRequest()
{
  return &type metadata for IDSQuickRelayPluginRequest;
}

uint64_t destroy for IDSQuickRelayAllocationStatus(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1 >> 60 != 15) {
    sub_1000042CC(*(void *)(a1 + 32), v1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IDSQuickRelayAllocationStatus(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  int v4 = (uint64_t *)(a2 + 32);
  unint64_t v5 = *(void *)(a2 + 40);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v4;
  }
  else
  {
    uint64_t v6 = *v4;
    sub_100004214(*v4, *(void *)(a2 + 40));
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v5;
  }
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IDSQuickRelayAllocationStatus(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = (_OWORD *)(a1 + 32);
  uint64_t v7 = a2 + 4;
  unint64_t v8 = a2[5];
  if (*(void *)(a1 + 40) >> 60 != 15)
  {
    if (v8 >> 60 != 15)
    {
      uint64_t v10 = *v7;
      sub_100004214(*v7, a2[5]);
      uint64_t v11 = *(void *)(a1 + 32);
      unint64_t v12 = *(void *)(a1 + 40);
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = v8;
      sub_1000042CC(v11, v12);
      goto LABEL_8;
    }
    sub_1000044A0(a1 + 32);
    goto LABEL_6;
  }
  if (v8 >> 60 == 15)
  {
LABEL_6:
    _OWORD *v6 = *(_OWORD *)v7;
    goto LABEL_8;
  }
  uint64_t v9 = *v7;
  sub_100004214(*v7, a2[5]);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v8;
LABEL_8:
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for IDSQuickRelayAllocationStatus(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for IDSQuickRelayAllocationStatus(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  long long v4 = (_OWORD *)(a1 + 32);
  uint64_t v5 = (void *)(a2 + 32);
  unint64_t v6 = *(void *)(a1 + 40);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 40);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(void *)(a1 + 32) = *v5;
      *(void *)(a1 + 40) = v7;
      sub_1000042CC(v8, v6);
      goto LABEL_6;
    }
    sub_1000044A0(a1 + 32);
  }
  *long long v4 = *(_OWORD *)v5;
LABEL_6:
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSQuickRelayAllocationStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSQuickRelayAllocationStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSQuickRelayAllocationStatus()
{
  return &type metadata for IDSQuickRelayAllocationStatus;
}

uint64_t *destroy for IDSQuickRelaySelfAllocToken(uint64_t *result)
{
  unint64_t v1 = result;
  unint64_t v2 = result[1];
  if (v2 >> 60 != 15) {
    __n128 result = (uint64_t *)sub_1000042CC(*result, v2);
  }
  unint64_t v3 = v1[3];
  if (v3 >> 60 != 15) {
    __n128 result = (uint64_t *)sub_1000042CC(v1[2], v3);
  }
  unint64_t v4 = v1[7];
  if (v4 >> 60 != 15) {
    __n128 result = (uint64_t *)sub_1000042CC(v1[6], v4);
  }
  unint64_t v5 = v1[9];
  if (v5 >> 60 != 15) {
    __n128 result = (uint64_t *)sub_1000042CC(v1[8], v5);
  }
  unint64_t v6 = v1[11];
  if (v6 >> 60 != 15)
  {
    uint64_t v7 = v1[10];
    return (uint64_t *)sub_1000042CC(v7, v6);
  }
  return result;
}

uint64_t initializeWithCopy for IDSQuickRelaySelfAllocToken(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *a2;
    sub_100004214(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  unint64_t v6 = a2 + 2;
  unint64_t v7 = a2[3];
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
  }
  else
  {
    uint64_t v8 = *v6;
    sub_100004214(*v6, a2[3]);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v7;
  }
  *(void *)(a1 + 32) = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  uint64_t v9 = a2 + 6;
  unint64_t v10 = a2[7];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_100004214(*v9, a2[7]);
    *(void *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = v10;
  }
  unint64_t v12 = a2 + 8;
  unint64_t v13 = a2[9];
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
  }
  else
  {
    uint64_t v14 = *v12;
    sub_100004214(*v12, a2[9]);
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = v13;
  }
  unint64_t v15 = a2 + 10;
  unint64_t v16 = a2[11];
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v17 = *v15;
    sub_100004214(*v15, a2[11]);
    *(void *)(a1 + 80) = v17;
    *(void *)(a1 + 88) = v16;
  }
  *(void *)(a1 + 96) = a2[12];
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  return a1;
}

uint64_t assignWithCopy for IDSQuickRelaySelfAllocToken(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) >> 60 == 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v5 = *(void *)a2;
      sub_100004214(*(void *)a2, *(void *)(a2 + 8));
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v4;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
    sub_1000044A0(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)a2;
  sub_100004214(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v4;
  sub_1000042CC(v7, v8);
LABEL_8:
  uint64_t v9 = (uint64_t *)(a2 + 16);
  unint64_t v10 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 == 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      sub_100004214(*v9, *(void *)(a2 + 24));
      *(void *)(a1 + 16) = v11;
      *(void *)(a1 + 24) = v10;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v10 >> 60 == 15)
  {
    sub_1000044A0(a1 + 16);
LABEL_13:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v9;
    goto LABEL_15;
  }
  uint64_t v12 = *v9;
  sub_100004214(*v9, *(void *)(a2 + 24));
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v10;
  sub_1000042CC(v13, v14);
LABEL_15:
  uint64_t v15 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v15;
  unint64_t v16 = (uint64_t *)(a2 + 48);
  unint64_t v17 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) >> 60 == 15)
  {
    if (v17 >> 60 != 15)
    {
      uint64_t v18 = *v16;
      sub_100004214(*v16, *(void *)(a2 + 56));
      *(void *)(a1 + 48) = v18;
      *(void *)(a1 + 56) = v17;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v17 >> 60 == 15)
  {
    sub_1000044A0(a1 + 48);
LABEL_20:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v16;
    goto LABEL_22;
  }
  uint64_t v19 = *v16;
  sub_100004214(*v16, *(void *)(a2 + 56));
  uint64_t v20 = *(void *)(a1 + 48);
  unint64_t v21 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v17;
  sub_1000042CC(v20, v21);
LABEL_22:
  uint64_t v22 = (uint64_t *)(a2 + 64);
  unint64_t v23 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72) >> 60 == 15)
  {
    if (v23 >> 60 != 15)
    {
      uint64_t v24 = *v22;
      sub_100004214(*v22, *(void *)(a2 + 72));
      *(void *)(a1 + 64) = v24;
      *(void *)(a1 + 72) = v23;
      goto LABEL_29;
    }
    goto LABEL_27;
  }
  if (v23 >> 60 == 15)
  {
    sub_1000044A0(a1 + 64);
LABEL_27:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v22;
    goto LABEL_29;
  }
  uint64_t v25 = *v22;
  sub_100004214(*v22, *(void *)(a2 + 72));
  uint64_t v26 = *(void *)(a1 + 64);
  unint64_t v27 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v25;
  *(void *)(a1 + 72) = v23;
  sub_1000042CC(v26, v27);
LABEL_29:
  unint64_t v28 = (uint64_t *)(a2 + 80);
  unint64_t v29 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 88) >> 60 != 15)
  {
    if (v29 >> 60 != 15)
    {
      uint64_t v31 = *v28;
      sub_100004214(*v28, *(void *)(a2 + 88));
      uint64_t v32 = *(void *)(a1 + 80);
      unint64_t v33 = *(void *)(a1 + 88);
      *(void *)(a1 + 80) = v31;
      *(void *)(a1 + 88) = v29;
      sub_1000042CC(v32, v33);
      goto LABEL_36;
    }
    sub_1000044A0(a1 + 80);
    goto LABEL_34;
  }
  if (v29 >> 60 == 15)
  {
LABEL_34:
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v28;
    goto LABEL_36;
  }
  uint64_t v30 = *v28;
  sub_100004214(*v28, *(void *)(a2 + 88));
  *(void *)(a1 + 80) = v30;
  *(void *)(a1 + 88) = v29;
LABEL_36:
  uint64_t v34 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v34;
  return a1;
}

__n128 initializeWithTake for IDSQuickRelaySelfAllocToken(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for IDSQuickRelaySelfAllocToken(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    sub_1000044A0(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  sub_1000042CC(v6, v4);
LABEL_6:
  uint64_t v7 = (_OWORD *)(a2 + 16);
  unint64_t v8 = *(void *)(a1 + 24);
  if (v8 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = *v7;
    goto LABEL_11;
  }
  unint64_t v9 = *(void *)(a2 + 24);
  if (v9 >> 60 == 15)
  {
    sub_1000044A0(a1 + 16);
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)v7;
  *(void *)(a1 + 24) = v9;
  sub_1000042CC(v10, v8);
LABEL_11:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v11 = (_OWORD *)(a2 + 48);
  unint64_t v12 = *(void *)(a1 + 56);
  if (v12 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 48) = *v11;
    goto LABEL_16;
  }
  unint64_t v13 = *(void *)(a2 + 56);
  if (v13 >> 60 == 15)
  {
    sub_1000044A0(a1 + 48);
    goto LABEL_14;
  }
  uint64_t v14 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)v11;
  *(void *)(a1 + 56) = v13;
  sub_1000042CC(v14, v12);
LABEL_16:
  uint64_t v15 = (_OWORD *)(a2 + 64);
  unint64_t v16 = *(void *)(a1 + 72);
  if (v16 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)(a1 + 64) = *v15;
    goto LABEL_21;
  }
  unint64_t v17 = *(void *)(a2 + 72);
  if (v17 >> 60 == 15)
  {
    sub_1000044A0(a1 + 64);
    goto LABEL_19;
  }
  uint64_t v18 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)v15;
  *(void *)(a1 + 72) = v17;
  sub_1000042CC(v18, v16);
LABEL_21:
  uint64_t v19 = (void *)(a2 + 80);
  unint64_t v20 = *(void *)(a1 + 88);
  if (v20 >> 60 != 15)
  {
    unint64_t v21 = *(void *)(a2 + 88);
    if (v21 >> 60 != 15)
    {
      uint64_t v22 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = *v19;
      *(void *)(a1 + 88) = v21;
      sub_1000042CC(v22, v20);
      goto LABEL_26;
    }
    sub_1000044A0(a1 + 80);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v19;
LABEL_26:
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSQuickRelaySelfAllocToken(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xC && *(unsigned char *)(a1 + 105)) {
    return (*(_DWORD *)a1 + 12);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * v3) & 0xC) != 0) {
    int v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSQuickRelaySelfAllocToken(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)__n128 result = a2 - 12;
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if (a3 >= 0xC) {
      *(unsigned char *)(result + 105) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSQuickRelaySelfAllocToken()
{
  return &type metadata for IDSQuickRelaySelfAllocToken;
}

uint64_t destroy for IDSQuickRelayPluginAllocation(uint64_t *a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = a1[7];
  if (v3 >> 60 != 15) {
    uint64_t result = sub_1000042CC(a1[6], v3);
  }
  unint64_t v4 = a1[9];
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = a1[8];
    return sub_1000042CC(v5, v4);
  }
  return result;
}

uint64_t initializeWithCopy for IDSQuickRelayPluginAllocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = (_OWORD *)(a2 + 48);
  unint64_t v6 = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 48) = *v5;
  }
  else
  {
    uint64_t v7 = *(void *)v5;
    sub_100004214(v7, v6);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v6;
  }
  unint64_t v8 = (uint64_t *)(a2 + 64);
  unint64_t v9 = *(void *)(a2 + 72);
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v10 = *v8;
    sub_100004214(*v8, v9);
    *(void *)(a1 + 64) = v10;
    *(void *)(a1 + 72) = v9;
  }
  return a1;
}

uint64_t assignWithCopy for IDSQuickRelayPluginAllocation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  unint64_t v6 = (uint64_t *)(a2 + 48);
  unint64_t v7 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56) >> 60 == 15)
  {
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *v6;
      sub_100004214(*v6, *(void *)(a2 + 56));
      *(void *)(a1 + 48) = v8;
      *(void *)(a1 + 56) = v7;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
    sub_1000044A0(a1 + 48);
LABEL_6:
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v6;
    goto LABEL_8;
  }
  uint64_t v9 = *v6;
  sub_100004214(*v6, *(void *)(a2 + 56));
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v7;
  sub_1000042CC(v10, v11);
LABEL_8:
  unint64_t v12 = (uint64_t *)(a2 + 64);
  unint64_t v13 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72) >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v15 = *v12;
      sub_100004214(*v12, v13);
      uint64_t v16 = *(void *)(a1 + 64);
      unint64_t v17 = *(void *)(a1 + 72);
      *(void *)(a1 + 64) = v15;
      *(void *)(a1 + 72) = v13;
      sub_1000042CC(v16, v17);
      return a1;
    }
    sub_1000044A0(a1 + 64);
    goto LABEL_13;
  }
  if (v13 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
    return a1;
  }
  uint64_t v14 = *v12;
  sub_100004214(*v12, v13);
  *(void *)(a1 + 64) = v14;
  *(void *)(a1 + 72) = v13;
  return a1;
}

__n128 initializeWithTake for IDSQuickRelayPluginAllocation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for IDSQuickRelayPluginAllocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = (_OWORD *)(a2 + 48);
  unint64_t v6 = *(void *)(a1 + 56);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 56);
  if (v7 >> 60 == 15)
  {
    sub_1000044A0(a1 + 48);
LABEL_4:
    *(_OWORD *)(a1 + 48) = *v5;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)v5;
  *(void *)(a1 + 56) = v7;
  sub_1000042CC(v8, v6);
LABEL_6:
  uint64_t v9 = (void *)(a2 + 64);
  unint64_t v10 = *(void *)(a1 + 72);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 72);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 64);
      *(void *)(a1 + 64) = *v9;
      *(void *)(a1 + 72) = v11;
      sub_1000042CC(v12, v10);
      return a1;
    }
    sub_1000044A0(a1 + 64);
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSQuickRelayPluginAllocation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSQuickRelayPluginAllocation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSQuickRelayPluginAllocation()
{
  return &type metadata for IDSQuickRelayPluginAllocation;
}

unsigned char *storeEnumTagSinglePayload for IDSQuickRelayPluginAllocation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *__n128 result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005DE7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSQuickRelayPluginAllocation.CodingKeys()
{
  return &type metadata for IDSQuickRelayPluginAllocation.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IDSQuickRelaySelfAllocToken.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IDSQuickRelaySelfAllocToken.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *__n128 result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005E010);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSQuickRelaySelfAllocToken.CodingKeys()
{
  return &type metadata for IDSQuickRelaySelfAllocToken.CodingKeys;
}

ValueMetadata *type metadata accessor for IDSQuickRelayAllocationStatus.CodingKeys()
{
  return &type metadata for IDSQuickRelayAllocationStatus.CodingKeys;
}

unsigned char *_s19IDSBlastDoorService29IDSQuickRelayAllocationStatusV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *__n128 result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005E12CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSQuickRelayPluginRequest.CodingKeys()
{
  return &type metadata for IDSQuickRelayPluginRequest.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for IDSMadridProtocolDeliveryContext.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10005E200);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSMadridProtocolDeliveryContext.CodingKeys()
{
  return &type metadata for IDSMadridProtocolDeliveryContext.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IDSMadridProtocolHttpHeaders.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IDSMadridProtocolHttpHeaders.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005E394);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSMadridProtocolHttpHeaders.CodingKeys()
{
  return &type metadata for IDSMadridProtocolHttpHeaders.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IDSMadridProtocolPayload.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0x65) {
    goto LABEL_17;
  }
  if (a2 + 155 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 155) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 155;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 155;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 155;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x9C;
  int v8 = v6 - 156;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IDSMadridProtocolPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 155 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 155) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0x65) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0x64)
  {
    unsigned int v6 = ((a2 - 101) >> 8) + 1;
    *__n128 result = a2 - 101;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10005E528);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 - 101;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSMadridProtocolPayload.CodingKeys()
{
  return &type metadata for IDSMadridProtocolPayload.CodingKeys;
}

unint64_t sub_10005E564()
{
  unint64_t result = qword_100090BA0;
  if (!qword_100090BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090BA0);
  }
  return result;
}

unint64_t sub_10005E5BC()
{
  unint64_t result = qword_100090BA8;
  if (!qword_100090BA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090BA8);
  }
  return result;
}

unint64_t sub_10005E614()
{
  unint64_t result = qword_100090BB0;
  if (!qword_100090BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090BB0);
  }
  return result;
}

unint64_t sub_10005E66C()
{
  unint64_t result = qword_100090BB8;
  if (!qword_100090BB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090BB8);
  }
  return result;
}

unint64_t sub_10005E6C4()
{
  unint64_t result = qword_100090BC0;
  if (!qword_100090BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090BC0);
  }
  return result;
}

unint64_t sub_10005E71C()
{
  unint64_t result = qword_100090BC8;
  if (!qword_100090BC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090BC8);
  }
  return result;
}

unint64_t sub_10005E774()
{
  unint64_t result = qword_100090BD0;
  if (!qword_100090BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090BD0);
  }
  return result;
}

unint64_t sub_10005E7CC()
{
  unint64_t result = qword_100090BD8;
  if (!qword_100090BD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090BD8);
  }
  return result;
}

unint64_t sub_10005E824()
{
  unint64_t result = qword_100090BE0;
  if (!qword_100090BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090BE0);
  }
  return result;
}

unint64_t sub_10005E87C()
{
  unint64_t result = qword_100090BE8;
  if (!qword_100090BE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090BE8);
  }
  return result;
}

unint64_t sub_10005E8D4()
{
  unint64_t result = qword_100090BF0;
  if (!qword_100090BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090BF0);
  }
  return result;
}

unint64_t sub_10005E92C()
{
  unint64_t result = qword_100090BF8;
  if (!qword_100090BF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090BF8);
  }
  return result;
}

unint64_t sub_10005E984()
{
  unint64_t result = qword_100090C00;
  if (!qword_100090C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090C00);
  }
  return result;
}

unint64_t sub_10005E9DC()
{
  unint64_t result = qword_100090C08;
  if (!qword_100090C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090C08);
  }
  return result;
}

unint64_t sub_10005EA34()
{
  unint64_t result = qword_100090C10;
  if (!qword_100090C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090C10);
  }
  return result;
}

unint64_t sub_10005EA8C()
{
  unint64_t result = qword_100090C18;
  if (!qword_100090C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090C18);
  }
  return result;
}

unint64_t sub_10005EAE4()
{
  unint64_t result = qword_100090C20;
  if (!qword_100090C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090C20);
  }
  return result;
}

unint64_t sub_10005EB3C()
{
  unint64_t result = qword_100090C28;
  if (!qword_100090C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090C28);
  }
  return result;
}

unint64_t sub_10005EB94()
{
  unint64_t result = qword_100090C30;
  if (!qword_100090C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090C30);
  }
  return result;
}

unint64_t sub_10005EBEC()
{
  unint64_t result = qword_100090C38;
  if (!qword_100090C38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090C38);
  }
  return result;
}

unint64_t sub_10005EC44()
{
  unint64_t result = qword_100090C40;
  if (!qword_100090C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090C40);
  }
  return result;
}

uint64_t sub_10005EC98(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_10005ED20()
{
  unint64_t result = qword_100090C78;
  if (!qword_100090C78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090C78);
  }
  return result;
}

uint64_t sub_10005ED74(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100044BD8(&qword_100090A78);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10005EDD8()
{
  unint64_t result = qword_100090C90;
  if (!qword_100090C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090C90);
  }
  return result;
}

unint64_t sub_10005EE2C()
{
  unint64_t result = qword_100090C98;
  if (!qword_100090C98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090C98);
  }
  return result;
}

uint64_t sub_10005EE80(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t sub_10005EF08()
{
  unint64_t result = qword_100090CA8;
  if (!qword_100090CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090CA8);
  }
  return result;
}

unint64_t sub_10005EF5C()
{
  unint64_t result = qword_100090CB8;
  if (!qword_100090CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090CB8);
  }
  return result;
}

unint64_t sub_10005EFB0()
{
  unint64_t result = qword_100090CC8;
  if (!qword_100090CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090CC8);
  }
  return result;
}

uint64_t sub_10005F004(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100044BD8(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10005F070()
{
  unint64_t result = qword_100090CD8;
  if (!qword_100090CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090CD8);
  }
  return result;
}

void *sub_10005F0C4(void *a1)
{
  uint64_t v2 = a1[7];
  unint64_t v4 = a1[8];
  uint64_t v3 = a1[9];
  unint64_t v5 = a1[10];
  uint64_t v6 = a1[11];
  unint64_t v7 = a1[12];
  uint64_t v8 = a1[13];
  unint64_t v9 = a1[14];
  uint64_t v12 = a1[17];
  unint64_t v11 = a1[18];
  unint64_t v13 = a1[27];
  uint64_t v14 = a1[26];
  unint64_t v15 = a1[30];
  uint64_t v16 = a1[29];
  unint64_t v19 = a1[32];
  uint64_t v20 = a1[31];
  uint64_t v26 = a1[39];
  unint64_t v25 = a1[40];
  uint64_t v17 = a1[61];
  unint64_t v18 = a1[62];
  uint64_t v21 = a1[63];
  unint64_t v22 = a1[64];
  uint64_t v23 = a1[67];
  unint64_t v24 = a1[68];
  uint64_t v27 = a1[83];
  unint64_t v28 = a1[84];
  uint64_t v29 = a1[115];
  unint64_t v30 = a1[116];
  uint64_t v31 = a1[145];
  uint64_t v32 = a1[146];
  uint64_t v33 = a1[157];
  unint64_t v34 = a1[158];
  uint64_t v35 = a1[161];
  unint64_t v36 = a1[162];
  uint64_t v37 = a1[172];
  unint64_t v38 = a1[173];
  uint64_t v39 = a1[174];
  unint64_t v40 = a1[175];
  uint64_t v41 = a1[192];
  unint64_t v42 = a1[193];
  uint64_t v43 = a1[194];
  unint64_t v44 = a1[195];
  uint64_t v45 = a1[198];
  unint64_t v46 = a1[199];
  uint64_t v47 = a1[200];
  unint64_t v48 = a1[201];
  uint64_t v49 = a1[215];
  unint64_t v50 = a1[216];
  uint64_t v51 = a1[225];
  unint64_t v52 = a1[226];
  uint64_t v53 = a1[227];
  unint64_t v54 = a1[228];
  uint64_t v55 = a1[231];
  unint64_t v56 = a1[232];
  uint64_t v57 = a1[233];
  unint64_t v58 = a1[234];
  uint64_t v59 = a1[235];
  unint64_t v60 = a1[236];
  uint64_t v61 = a1[239];
  unint64_t v62 = a1[240];
  unint64_t v63 = a1[244];
  uint64_t v64 = a1[243];
  unint64_t v65 = a1[258];
  uint64_t v66 = a1[257];
  sub_1000048B8(a1[5], a1[6]);
  sub_1000048B8(v2, v4);
  sub_1000048B8(v3, v5);
  sub_1000048B8(v6, v7);
  sub_1000048B8(v8, v9);
  swift_bridgeObjectRetain();
  sub_1000048B8(v12, v11);
  swift_bridgeObjectRetain();
  sub_1000048B8(v14, v13);
  sub_1000048B8(v16, v15);
  sub_1000048B8(v20, v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000048B8(v26, v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000048B8(v17, v18);
  sub_1000048B8(v21, v22);
  sub_1000048B8(v23, v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000048B8(v27, v28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000048B8(v29, v30);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10005EE80(v31, v32);
  sub_1000048B8(v33, v34);
  swift_bridgeObjectRetain();
  sub_1000048B8(v35, v36);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000048B8(v37, v38);
  sub_1000048B8(v39, v40);
  swift_bridgeObjectRetain();
  sub_1000048B8(v41, v42);
  sub_1000048B8(v43, v44);
  sub_1000048B8(v45, v46);
  sub_1000048B8(v47, v48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000048B8(v49, v50);
  swift_bridgeObjectRetain();
  sub_1000048B8(v51, v52);
  sub_1000048B8(v53, v54);
  sub_1000048B8(v55, v56);
  sub_1000048B8(v57, v58);
  sub_1000048B8(v59, v60);
  sub_1000048B8(v61, v62);
  sub_1000048B8(v64, v63);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000048B8(v66, v65);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_10005F6D0(void *a1)
{
  uint64_t v2 = a1[7];
  unint64_t v4 = a1[8];
  uint64_t v3 = a1[9];
  unint64_t v6 = a1[10];
  uint64_t v5 = a1[11];
  unint64_t v8 = a1[12];
  uint64_t v7 = a1[13];
  unint64_t v9 = a1[14];
  unint64_t v11 = a1[18];
  uint64_t v12 = a1[17];
  unint64_t v13 = a1[27];
  uint64_t v14 = a1[26];
  unint64_t v15 = a1[30];
  uint64_t v16 = a1[29];
  unint64_t v19 = a1[32];
  uint64_t v20 = a1[31];
  unint64_t v25 = a1[40];
  uint64_t v26 = a1[39];
  uint64_t v17 = a1[61];
  unint64_t v18 = a1[62];
  uint64_t v21 = a1[63];
  unint64_t v22 = a1[64];
  uint64_t v23 = a1[67];
  unint64_t v24 = a1[68];
  uint64_t v27 = a1[83];
  unint64_t v28 = a1[84];
  uint64_t v29 = a1[115];
  unint64_t v30 = a1[116];
  uint64_t v31 = a1[145];
  uint64_t v32 = a1[146];
  uint64_t v33 = a1[157];
  unint64_t v34 = a1[158];
  uint64_t v35 = a1[161];
  unint64_t v36 = a1[162];
  uint64_t v37 = a1[172];
  unint64_t v38 = a1[173];
  uint64_t v39 = a1[174];
  unint64_t v40 = a1[175];
  uint64_t v41 = a1[192];
  unint64_t v42 = a1[193];
  uint64_t v43 = a1[194];
  unint64_t v44 = a1[195];
  uint64_t v45 = a1[198];
  unint64_t v46 = a1[199];
  uint64_t v47 = a1[200];
  unint64_t v48 = a1[201];
  uint64_t v49 = a1[215];
  unint64_t v50 = a1[216];
  uint64_t v51 = a1[225];
  unint64_t v52 = a1[226];
  uint64_t v53 = a1[227];
  unint64_t v54 = a1[228];
  uint64_t v55 = a1[231];
  unint64_t v56 = a1[232];
  uint64_t v57 = a1[233];
  unint64_t v58 = a1[234];
  uint64_t v59 = a1[235];
  unint64_t v60 = a1[236];
  uint64_t v61 = a1[239];
  unint64_t v62 = a1[240];
  unint64_t v63 = a1[244];
  uint64_t v64 = a1[243];
  unint64_t v65 = a1[258];
  uint64_t v66 = a1[257];
  sub_1000048CC(a1[5], a1[6]);
  sub_1000048CC(v2, v4);
  sub_1000048CC(v3, v6);
  sub_1000048CC(v5, v8);
  sub_1000048CC(v7, v9);
  swift_bridgeObjectRelease();
  sub_1000048CC(v12, v11);
  swift_bridgeObjectRelease();
  sub_1000048CC(v14, v13);
  sub_1000048CC(v16, v15);
  sub_1000048CC(v20, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000048CC(v26, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000048CC(v17, v18);
  sub_1000048CC(v21, v22);
  sub_1000048CC(v23, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000048CC(v27, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000048CC(v29, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10005EC98(v31, v32);
  sub_1000048CC(v33, v34);
  swift_bridgeObjectRelease();
  sub_1000048CC(v35, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000048CC(v37, v38);
  sub_1000048CC(v39, v40);
  swift_bridgeObjectRelease();
  sub_1000048CC(v41, v42);
  sub_1000048CC(v43, v44);
  sub_1000048CC(v45, v46);
  sub_1000048CC(v47, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000048CC(v49, v50);
  swift_bridgeObjectRelease();
  sub_1000048CC(v51, v52);
  sub_1000048CC(v53, v54);
  sub_1000048CC(v55, v56);
  sub_1000048CC(v57, v58);
  sub_1000048CC(v59, v60);
  sub_1000048CC(v61, v62);
  sub_1000048CC(v64, v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000048CC(v66, v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_10005FCE8()
{
  sub_100077B80();
  swift_allocObject();
  sub_100077B70();
  sub_10005FEEC();
  sub_100077B60();
  if (v0) {
    return (void *)swift_release();
  }
  v2[6] = v10;
  v2[7] = v11;
  v2[8] = v12;
  char v3 = v13;
  v2[2] = v6;
  v2[3] = v7;
  v2[4] = v8;
  v2[5] = v9;
  v2[0] = v4;
  v2[1] = v5;
  uint64_t v14 = v4;
  sub_1000048B8(*((uint64_t *)&v4 + 1), v5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000048B8(*((uint64_t *)&v7 + 1), v8);
  sub_1000048B8(v9, *((unint64_t *)&v9 + 1));
  sub_1000048B8(*((uint64_t *)&v10 + 1), v11);
  sub_100077CA0();
  swift_release();
  return sub_100031DC8(v2);
}

unint64_t sub_10005FEEC()
{
  unint64_t result = qword_100090CE0;
  if (!qword_100090CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090CE0);
  }
  return result;
}

uint64_t sub_10005FF40(char *a1, char *a2)
{
  return sub_100069B8C(*a1, *a2);
}

Swift::Int sub_10005FF4C()
{
  return sub_100078650();
}

uint64_t sub_10005FFC8()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100060030()
{
  return sub_100078650();
}

uint64_t sub_1000600A8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v8._countAndFlagsBits = *a1;
  char v3 = (void *)a1[1];
  v4._rawValue = &off_10008B470;
  v8._object = v3;
  Swift::Int v5 = sub_100078390(v4, v8);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_100060108(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1835365481;
  if (*v1) {
    uint64_t v2 = 0x64616F6C796170;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100060140()
{
  if (*v0) {
    return 0x64616F6C796170;
  }
  else {
    return 1835365481;
  }
}

uint64_t sub_100060174@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  v9._countAndFlagsBits = a1;
  v5._rawValue = &off_10008B470;
  v9._object = a2;
  Swift::Int v6 = sub_100078390(v5, v9);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

void sub_1000601D8(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000601E4(uint64_t a1)
{
  unint64_t v2 = sub_1000603E4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100060220(uint64_t a1)
{
  unint64_t v2 = sub_1000603E4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSActivitySharingInvitationSchema.encode(to:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = a4;
  uint64_t v7 = sub_100002214(&qword_100090CE8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  long long v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_1000603E4();
  sub_1000786A0();
  LOBYTE(v14) = 0;
  sub_100078570();
  if (!v4)
  {
    uint64_t v14 = a3;
    uint64_t v15 = v13;
    char v16 = 1;
    sub_100003DA8();
    sub_100078590();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_1000603E4()
{
  unint64_t result = qword_100090CF0;
  if (!qword_100090CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090CF0);
  }
  return result;
}

uint64_t IDSActivitySharingInvitationSchema.init(from:)(void *a1)
{
  uint64_t result = sub_1000604B0(a1);
  if (v1) {
    return v3;
  }
  return result;
}

uint64_t sub_100060460@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000604B0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100060490(void *a1)
{
  return IDSActivitySharingInvitationSchema.encode(to:)(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1000604B0(void *a1)
{
  uint64_t v3 = sub_100002214(&qword_100090D10);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v9[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = a1[3];
  sub_1000029D8(a1, v7);
  sub_1000603E4();
  sub_100078690();
  if (!v1)
  {
    v9[16] = 0;
    uint64_t v7 = sub_100078470();
    v9[15] = 1;
    sub_100004864();
    sub_100078490();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100002E34((uint64_t)a1);
  return v7;
}

uint64_t destroy for IDSActivitySharingInvitationSchema(uint64_t a1)
{
  return sub_1000042CC(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

void *_s19IDSBlastDoorService34IDSActivitySharingInvitationSchemaVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  unint64_t v4 = a2[2];
  sub_100004214(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

void *assignWithCopy for IDSActivitySharingInvitationSchema(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  unint64_t v4 = a2[2];
  sub_100004214(v3, v4);
  uint64_t v5 = a1[1];
  unint64_t v6 = a1[2];
  a1[1] = v3;
  a1[2] = v4;
  sub_1000042CC(v5, v6);
  return a1;
}

__n128 initializeWithTake for IDSActivitySharingInvitationSchema(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for IDSActivitySharingInvitationSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  sub_1000042CC(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSActivitySharingInvitationSchema(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for IDSActivitySharingInvitationSchema(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSActivitySharingInvitationSchema()
{
  return &type metadata for IDSActivitySharingInvitationSchema;
}

uint64_t getEnumTagSinglePayload for IDSActivitySharingInvitationSchema.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IDSActivitySharingInvitationSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100060988);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *sub_1000609B0(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for IDSActivitySharingInvitationSchema.CodingKeys()
{
  return &type metadata for IDSActivitySharingInvitationSchema.CodingKeys;
}

unint64_t sub_1000609D0()
{
  unint64_t result = qword_100090CF8;
  if (!qword_100090CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090CF8);
  }
  return result;
}

unint64_t sub_100060A28()
{
  unint64_t result = qword_100090D00;
  if (!qword_100090D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090D00);
  }
  return result;
}

unint64_t sub_100060A80()
{
  unint64_t result = qword_100090D08;
  if (!qword_100090D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090D08);
  }
  return result;
}

uint64_t sub_100060AD4(unsigned __int8 *a1, char *a2)
{
  return sub_10006A110(*a1, *a2);
}

Swift::Int sub_100060AE0()
{
  return sub_10006AD08();
}

uint64_t sub_100060AE8()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100060C00()
{
  return sub_10006B2BC();
}

uint64_t sub_100060C08@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100062610(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

void sub_100060C38(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x444970756F7267;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x4C52556572616873;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x6974617469766E69;
      *(void *)(a1 + 8) = 0xEF6E656B6F546E6FLL;
      break;
    case 3:
      strcpy((char *)a1, "inviteeHandle");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    case 4:
      *(void *)a1 = 0x656D6954746E6573;
      *(void *)(a1 + 8) = 0xE800000000000000;
      break;
    case 5:
      *(void *)a1 = 0x6D614E70756F7267;
      *(void *)(a1 + 8) = 0xE900000000000065;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_100060D30()
{
  uint64_t result = 0x444970756F7267;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x4C52556572616873;
      break;
    case 2:
      uint64_t result = 0x6974617469766E69;
      break;
    case 3:
      uint64_t result = 0x4865657469766E69;
      break;
    case 4:
      uint64_t result = 0x656D6954746E6573;
      break;
    case 5:
      uint64_t result = 0x6D614E70756F7267;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100060E14@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100062610(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100060E3C(uint64_t a1)
{
  unint64_t v2 = sub_100061130();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100060E78(uint64_t a1)
{
  unint64_t v2 = sub_100061130();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSKCSharingInvitationSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002214(&qword_100090D18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000029D8(a1, a1[3]);
  sub_100061130();
  sub_1000786A0();
  LOBYTE(v11) = 0;
  sub_100078540();
  if (!v2)
  {
    LOBYTE(v11) = 1;
    sub_100078540();
    long long v11 = *(_OWORD *)(v3 + 32);
    v10[15] = 2;
    sub_100003DA8();
    sub_100078590();
    LOBYTE(v11) = 3;
    sub_100078540();
    type metadata accessor for IDSKCSharingInvitationSchema();
    LOBYTE(v11) = 4;
    sub_100077B90();
    sub_1000617E8(&qword_100090240, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_100078510();
    LOBYTE(v11) = 5;
    sub_1000784C0();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100061130()
{
  unint64_t result = qword_100090D20;
  if (!qword_100090D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090D20);
  }
  return result;
}

uint64_t type metadata accessor for IDSKCSharingInvitationSchema()
{
  uint64_t result = qword_100090D88;
  if (!qword_100090D88) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t IDSKCSharingInvitationSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v4 = sub_100002214(&qword_100090248);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100002214(&qword_100090D28);
  uint64_t v7 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for IDSKCSharingInvitationSchema();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v29 = a1;
  sub_1000029D8(a1, v13);
  sub_100061130();
  sub_100078690();
  if (v2) {
    return sub_100002E34((uint64_t)v29);
  }
  unint64_t v25 = v6;
  uint64_t v26 = v7;
  LOBYTE(v30) = 0;
  uint64_t v14 = v28;
  *(void *)uint64_t v12 = sub_100078440();
  *((void *)v12 + 1) = v15;
  LOBYTE(v30) = 1;
  *((void *)v12 + 2) = sub_100078440();
  *((void *)v12 + 3) = v16;
  char v31 = 2;
  sub_100004864();
  sub_100078490();
  *((_OWORD *)v12 + 2) = v30;
  LOBYTE(v30) = 3;
  *((void *)v12 + 6) = sub_100078440();
  *((void *)v12 + 7) = v17;
  sub_100077B90();
  LOBYTE(v30) = 4;
  sub_1000617E8(&qword_100090258, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v18 = (uint64_t)v25;
  sub_100078410();
  uint64_t v24 = 0;
  sub_10000B0A4(v18, *(int *)(v10 + 32));
  LOBYTE(v30) = 5;
  uint64_t v19 = sub_1000783C0();
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v14);
  unint64_t v22 = (uint64_t *)*(int *)(v10 + 36);
  *unint64_t v22 = v19;
  v22[1] = v21;
  sub_100061698(0, v27);
  sub_100002E34((uint64_t)v29);
  return sub_1000616FC(0);
}

uint64_t sub_100061698(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSKCSharingInvitationSchema();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000616FC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSKCSharingInvitationSchema();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100061758()
{
  return sub_1000617E8(&qword_100090648, (void (*)(uint64_t))type metadata accessor for IDSKCSharingInvitationSchema);
}

uint64_t sub_1000617A0()
{
  return sub_1000617E8(&qword_1000905E0, (void (*)(uint64_t))type metadata accessor for IDSKCSharingInvitationSchema);
}

uint64_t sub_1000617E8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100061830@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSKCSharingInvitationSchema.init(from:)(a1, a2);
}

uint64_t sub_100061848(void *a1)
{
  return IDSKCSharingInvitationSchema.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSKCSharingInvitationSchema(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[4];
    unint64_t v10 = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100004214(v9, v10);
    a1[4] = v9;
    a1[5] = v10;
    uint64_t v11 = a2[7];
    a1[6] = a2[6];
    a1[7] = v11;
    uint64_t v12 = *(int *)(a3 + 32);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = sub_100077B90();
    uint64_t v16 = *(void *)(v15 - 8);
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
    swift_bridgeObjectRetain();
    if (v17(v14, 1, v15))
    {
      uint64_t v18 = sub_100002214(&qword_100090248);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    uint64_t v20 = *(int *)(a3 + 36);
    uint64_t v21 = (uint64_t *)((char *)a1 + v20);
    unint64_t v22 = (uint64_t *)((char *)a2 + v20);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for IDSKCSharingInvitationSchema(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000042CC(*(void *)(a1 + 32), *(void *)(a1 + 40));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = sub_100077B90();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for IDSKCSharingInvitationSchema(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100004214(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v10 = a2[7];
  a1[6] = a2[6];
  a1[7] = v10;
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = sub_100077B90();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  swift_bridgeObjectRetain();
  if (v16(v13, 1, v14))
  {
    uint64_t v17 = sub_100002214(&qword_100090248);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  uint64_t v18 = *(int *)(a3 + 36);
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (void *)((char *)a2 + v18);
  uint64_t v21 = v20[1];
  void *v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IDSKCSharingInvitationSchema(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[4];
  unint64_t v7 = a2[5];
  sub_100004214(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  a1[4] = v6;
  a1[5] = v7;
  sub_1000042CC(v8, v9);
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_100077B90();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_100002214(&qword_100090248);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  uint64_t v19 = *(int *)(a3 + 36);
  uint64_t v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (void *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for IDSKCSharingInvitationSchema(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 32);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_100077B90();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_100002214(&qword_100090248);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 36));
  return a1;
}

void *assignWithTake for IDSKCSharingInvitationSchema(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_1000042CC(v8, v9);
  uint64_t v10 = *(void *)(a2 + 56);
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(a3 + 32);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t v14 = sub_100077B90();
  uint64_t v15 = *(void *)(v14 - 8);
  int v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v12, v13, v14);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = sub_100002214(&qword_100090248);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
  uint64_t v20 = *(int *)(a3 + 36);
  uint64_t v21 = (void *)((char *)a1 + v20);
  unint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSKCSharingInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000621E4);
}

uint64_t sub_1000621E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_100002214(&qword_100090248);
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for IDSKCSharingInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000622AC);
}

uint64_t sub_1000622AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_100002214(&qword_100090248);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100062358()
{
  sub_10000BCC0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for IDSKCSharingInvitationSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000624D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSKCSharingInvitationSchema.CodingKeys()
{
  return &type metadata for IDSKCSharingInvitationSchema.CodingKeys;
}

unint64_t sub_10006250C()
{
  unint64_t result = qword_100090DD0;
  if (!qword_100090DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090DD0);
  }
  return result;
}

unint64_t sub_100062564()
{
  unint64_t result = qword_100090DD8;
  if (!qword_100090DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090DD8);
  }
  return result;
}

unint64_t sub_1000625BC()
{
  unint64_t result = qword_100090DE0;
  if (!qword_100090DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090DE0);
  }
  return result;
}

uint64_t sub_100062610(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_10008B4C0;
  v6._object = a2;
  unint64_t v4 = sub_100078390(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 6) {
    return 6;
  }
  else {
    return v4;
  }
}

Swift::Int sub_10006265C()
{
  return sub_100078650();
}

uint64_t sub_1000626BC()
{
  return sub_1000781D0();
}

Swift::Int sub_1000626E0()
{
  return sub_100078650();
}

uint64_t sub_10006273C@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v7._countAndFlagsBits = *a1;
  Swift::OpaquePointer v3 = (void *)a1[1];
  v4._rawValue = &off_10008B570;
  v7._object = v3;
  Swift::Int v5 = sub_100078390(v4, v7);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v5 != 0;
  return result;
}

void sub_100062790(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_1000627B8()
{
  return 0x61447463656A624FLL;
}

uint64_t sub_1000627DC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, BOOL *a3@<X8>)
{
  v8._countAndFlagsBits = a1;
  v5._rawValue = &off_10008B5A8;
  v8._object = a2;
  Swift::Int v6 = sub_100078390(v5, v8);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v6 != 0;
  return result;
}

uint64_t sub_100062834(uint64_t a1)
{
  unint64_t v2 = sub_1000629FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100062870(uint64_t a1)
{
  unint64_t v2 = sub_1000629FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSHealthInvitationSchema.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100002214(&qword_100090DE8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_1000629FC();
  sub_1000786A0();
  v11[0] = a2;
  v11[1] = a3;
  sub_100003DA8();
  sub_100078590();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_1000629FC()
{
  unint64_t result = qword_100090DF0;
  if (!qword_100090DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090DF0);
  }
  return result;
}

void *IDSHealthInvitationSchema.init(from:)(void *a1)
{
  return sub_100062AB0(a1);
}

void *sub_100062A68@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_100062AB0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100062A94(void *a1)
{
  return IDSHealthInvitationSchema.encode(to:)(a1, *v1, v1[1]);
}

void *sub_100062AB0(void *a1)
{
  uint64_t v3 = sub_100002214(&qword_100090E10);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1000029D8(a1, a1[3]);
  sub_1000629FC();
  sub_100078690();
  if (v1)
  {
    sub_100002E34((uint64_t)a1);
  }
  else
  {
    sub_100004864();
    sub_100078490();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = v9;
    sub_100002E34((uint64_t)a1);
  }
  return v7;
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSHealthInvitationSchema(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100004214(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for IDSHealthInvitationSchema(uint64_t a1)
{
  return sub_1000042CC(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for IDSHealthInvitationSchema(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_100004214(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1000042CC(v5, v6);
  return a1;
}

__n128 initializeWithTake for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for IDSHealthInvitationSchema(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000042CC(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSHealthInvitationSchema(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for IDSHealthInvitationSchema(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)__n128 result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSHealthInvitationSchema()
{
  return &type metadata for IDSHealthInvitationSchema;
}

unsigned char *storeEnumTagSinglePayload for IDSHealthInvitationSchema.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *__n128 result = a2;
        return result;
      case 2:
        *(_WORD *)__n128 result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)__n128 result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *__n128 result = 0;
      break;
    case 2:
      *(_WORD *)__n128 result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100062E50);
    case 4:
      *(_DWORD *)__n128 result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSHealthInvitationSchema.CodingKeys()
{
  return &type metadata for IDSHealthInvitationSchema.CodingKeys;
}

unint64_t sub_100062E8C()
{
  unint64_t result = qword_100090DF8;
  if (!qword_100090DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090DF8);
  }
  return result;
}

unint64_t sub_100062EE4()
{
  unint64_t result = qword_100090E00;
  if (!qword_100090E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090E00);
  }
  return result;
}

unint64_t sub_100062F3C()
{
  unint64_t result = qword_100090E08;
  if (!qword_100090E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090E08);
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSClientMessageUnpacker()
{
  return &type metadata for IDSClientMessageUnpacker;
}

unint64_t sub_100062FA8()
{
  unint64_t result = qword_100090190;
  if (!qword_100090190)
  {
    sub_100077F40();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090190);
  }
  return result;
}

uint64_t sub_100063000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_100077F90();
  if (*(void *)(a4 + 16) && (unint64_t v7 = sub_1000632AC(v5, v6), (v8 & 1) != 0))
  {
    sub_10006339C(*(void *)(a4 + 56) + 40 * v7, (uint64_t)&v14);
    swift_bridgeObjectRelease();
    if (*((void *)&v15 + 1))
    {
      sub_100063384(&v14, (uint64_t)v17);
      sub_1000029D8(v17, v17[3]);
      sub_100077D20();
      return sub_100002E34((uint64_t)v17);
    }
  }
  else
  {
    uint64_t v16 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    swift_bridgeObjectRelease();
  }
  sub_100063324((uint64_t)&v14);
  uint64_t v10 = sub_100077F90();
  uint64_t v12 = v11;
  sub_10000A574();
  swift_allocError();
  *(void *)uint64_t v13 = v10;
  *(void *)(v13 + 8) = v12;
  *(unsigned char *)(v13 + 16) = 1;
  return swift_willThrow();
}

unint64_t sub_100063150(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    int v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100002214(&qword_100090E48);
  uint64_t v2 = sub_100078370();
  int v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100063838(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1000632AC(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    uint64_t *v11 = v7;
    v11[1] = v8;
    unint64_t result = sub_100063384(&v17, v3[7] + 40 * result);
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 56;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100063280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100063000(a1, a2, a3, *v3);
}

unint64_t sub_1000632AC(uint64_t a1, uint64_t a2)
{
  sub_100078630();
  sub_1000781D0();
  Swift::Int v4 = sub_100078650();

  return sub_100063444(a1, a2, v4);
}

uint64_t sub_100063324(uint64_t a1)
{
  uint64_t v2 = sub_100002214(&qword_100090E18);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100063384(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10006339C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_100063400(uint64_t a1)
{
  uint64_t v2 = sub_100078620();

  return sub_100063528(a1, v2);
}

unint64_t sub_100063444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1000785B0() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        BOOL v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1000785B0() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100063528(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1000635C4()
{
  sub_100002214(&qword_100090E20);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10007DDF0;
  *(void *)(inited + 32) = 0xD00000000000002ELL;
  *(void *)(inited + 40) = 0x8000000100079E80;
  *(void *)(inited + 72) = &type metadata for IDSSampleMessageUnpacker;
  *(void *)(inited + 80) = sub_1000636E8();
  *(void *)(inited + 88) = 0xD000000000000026;
  *(void *)(inited + 96) = 0x8000000100079EB0;
  *(void *)(inited + 128) = &type metadata for FTAudioVideoMessageUnpacker;
  unint64_t v1 = sub_10006373C();
  *(void *)(inited + 136) = v1;
  *(void *)(inited + 144) = 0xD000000000000026;
  *(void *)(inited + 152) = 0x8000000100079EE0;
  *(void *)(inited + 184) = &type metadata for FTAudioVideoMessageUnpacker;
  *(void *)(inited + 192) = v1;
  *(void *)(inited + 200) = 0xD000000000000023;
  *(void *)(inited + 208) = 0x8000000100079F10;
  *(void *)(inited + 240) = &type metadata for FTLivePhotoMessageUnpacker;
  *(void *)(inited + 248) = sub_100063790();
  *(void *)(inited + 256) = 0xD000000000000025;
  *(void *)(inited + 264) = 0x8000000100079F40;
  *(void *)(inited + 296) = &type metadata for SafetyMonitorMessageUnpacker;
  *(void *)(inited + 304) = sub_1000637E4();
  return sub_100063150(inited);
}

unint64_t sub_1000636E8()
{
  unint64_t result = qword_100090E28;
  if (!qword_100090E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090E28);
  }
  return result;
}

unint64_t sub_10006373C()
{
  unint64_t result = qword_100090E30;
  if (!qword_100090E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090E30);
  }
  return result;
}

unint64_t sub_100063790()
{
  unint64_t result = qword_100090E38;
  if (!qword_100090E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090E38);
  }
  return result;
}

unint64_t sub_1000637E4()
{
  unint64_t result = qword_100090E40;
  if (!qword_100090E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090E40);
  }
  return result;
}

uint64_t sub_100063838(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002214(&qword_100090E50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000638A4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for IDSClientMessageUnpackingError(uint64_t a1)
{
  return sub_1000638C4(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1000638C4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s19IDSBlastDoorService30IDSClientMessageUnpackingErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000638A4(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for IDSClientMessageUnpackingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1000638A4(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  sub_1000638C4(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for IDSClientMessageUnpackingError(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for IDSClientMessageUnpackingError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  sub_1000638C4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSClientMessageUnpackingError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSClientMessageUnpackingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100063A60(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100063A68(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for IDSClientMessageUnpackingError()
{
  return &type metadata for IDSClientMessageUnpackingError;
}

ValueMetadata *type metadata accessor for FTAudioVideoMessageUnpacker()
{
  return &type metadata for FTAudioVideoMessageUnpacker;
}

uint64_t sub_100063A94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v54 = a1;
  uint64_t v55 = a2;
  uint64_t v53 = a4;
  uint64_t v5 = sub_100077E90();
  uint64_t v47 = *(void *)(v5 - 8);
  uint64_t v48 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100077CB0();
  uint64_t v46 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  char v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100077CE0();
  uint64_t v45 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  BOOL v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_100077D10();
  uint64_t v43 = *(void *)(v14 - 8);
  uint64_t v44 = v14;
  __chkstk_darwin(v14);
  uint64_t v49 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100077DA0();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v50 = v16;
  uint64_t v51 = v17;
  __chkstk_darwin(v16);
  unint64_t v52 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_100077E60();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v23 = (char *)&v42 - v22;
  switch(a3)
  {
    case 232:
      uint64_t v26 = v58;
      uint64_t result = sub_100031E60((uint64_t)&v42 - v22);
      if (!v26)
      {
        uint64_t v27 = v52;
        (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v52, v23, v19);
        (*(void (**)(char *, void, uint64_t))(v51 + 104))(v27, enum case for IDSClientMessageType.sessionInvitation(_:), v50);
        sub_100077F30();
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
      }
      break;
    case 233:
      uint64_t v28 = v58;
      uint64_t result = (uint64_t)sub_10005FCE8();
      if (!v28)
      {
        uint64_t v29 = v46;
        long long v30 = v52;
        (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v52, v10, v8);
        (*(void (**)(char *, void, uint64_t))(v51 + 104))(v30, enum case for IDSClientMessageType.sessionAccept(_:), v50);
        sub_100077F30();
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v10, v8);
      }
      break;
    case 234:
    case 237:
      sub_100077B80();
      swift_allocObject();
      sub_100077B70();
      sub_10002C7F8();
      uint64_t v24 = v58;
      sub_100077B60();
      if (!v24)
      {
        uint64_t v40 = v56;
        unint64_t v41 = v57;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1000048B8(v40, v41);
        sub_100077D00();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        sub_1000048CC(v40, v41);
        uint64_t v37 = v43;
        uint64_t v36 = v44;
        unint64_t v38 = v52;
        uint64_t v7 = v49;
        (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v52, v49, v44);
        uint64_t v39 = (unsigned int *)&enum case for IDSClientMessageType.sessionDecline(_:);
        goto LABEL_14;
      }
      uint64_t result = swift_release();
      break;
    case 235:
      uint64_t v31 = v58;
      uint64_t result = sub_1000692B8();
      if (!v31)
      {
        uint64_t v32 = v45;
        uint64_t v33 = v52;
        (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v52, v13, v11);
        (*(void (**)(char *, void, uint64_t))(v51 + 104))(v33, enum case for IDSClientMessageType.sessionCancel(_:), v50);
        sub_100077F30();
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v13, v11);
      }
      break;
    case 238:
      uint64_t v35 = v58;
      uint64_t result = sub_10006494C();
      if (!v35)
      {
        uint64_t v37 = v47;
        uint64_t v36 = v48;
        unint64_t v38 = v52;
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v52, v7, v48);
        uint64_t v39 = (unsigned int *)&enum case for IDSClientMessageType.sessionReinitiate(_:);
LABEL_14:
        (*(void (**)(char *, void, uint64_t))(v51 + 104))(v38, *v39, v50);
        sub_100077F30();
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v7, v36);
      }
      break;
    default:
      sub_10000A574();
      swift_allocError();
      *(void *)uint64_t v34 = a3;
      *(void *)(v34 + 8) = 0;
      *(unsigned char *)(v34 + 16) = 0;
      uint64_t result = swift_willThrow();
      break;
  }
  return result;
}

uint64_t sub_100064178@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100005A24(a1, a2, a3);
}

unint64_t sub_100064190(uint64_t a1)
{
  unint64_t result = sub_1000641B8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000641B8()
{
  unint64_t result = qword_100090E58;
  if (!qword_100090E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090E58);
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSCommandWebTunnelResponseUnpacker()
{
  return &type metadata for IDSCommandWebTunnelResponseUnpacker;
}

unint64_t sub_100064220()
{
  unint64_t result = qword_100090E60;
  if (!qword_100090E60)
  {
    sub_1000780A0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090E60);
  }
  return result;
}

uint64_t sub_100064278@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v51 = a2;
  uint64_t v5 = sub_100002214(&qword_100090E70);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v36 - v10;
  __chkstk_darwin(v9);
  BOOL v13 = (char *)v36 - v12;
  uint64_t v14 = sub_100078020();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  uint64_t v17 = v15 + 56;
  v16(v13, 1, 1, v14);
  uint64_t v18 = a1[14];
  uint64_t v53 = v3;
  unint64_t v52 = v8;
  if (v18 != 1)
  {
    uint64_t v42 = v17;
    uint64_t v43 = v16;
    uint64_t v19 = a1[23];
    uint64_t v47 = a1[21];
    uint64_t v48 = v19;
    uint64_t v20 = a1[19];
    uint64_t v49 = a1[17];
    uint64_t v50 = v20;
    uint64_t v21 = a1[15];
    uint64_t v45 = a1[13];
    uint64_t v46 = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v22 = v53;
    sub_100078010();
    uint64_t result = sub_100064884((uint64_t)v13);
    if (v22) {
      return result;
    }
    uint64_t v53 = 0;
    v43(v11, 0, 1, v14);
    sub_1000648E4((uint64_t)v11, (uint64_t)v13);
    uint64_t v8 = v52;
  }
  uint64_t v24 = *a1;
  uint64_t v49 = a1[1];
  uint64_t v50 = v24;
  LODWORD(v48) = *((unsigned __int8 *)a1 + 16);
  uint64_t v26 = a1[3];
  unint64_t v25 = a1[4];
  uint64_t v47 = a1[5];
  LODWORD(v46) = *((unsigned __int8 *)a1 + 48);
  uint64_t v27 = a1[7];
  uint64_t v44 = v13;
  uint64_t v45 = v27;
  v36[0] = a1[8];
  uint64_t v43 = (void (*)(char *, uint64_t, uint64_t, uint64_t))a1[9];
  LODWORD(v42) = *((unsigned __int8 *)a1 + 80);
  uint64_t v28 = a1[11];
  unint64_t v40 = v25;
  uint64_t v41 = v28;
  sub_10006481C((uint64_t)v13, (uint64_t)v8);
  uint64_t v30 = a1[31];
  uint64_t v29 = a1 + 31;
  uint64_t v31 = *(v29 - 6);
  unint64_t v32 = *(v29 - 5);
  uint64_t v33 = *(v29 - 4);
  uint64_t v38 = v30;
  uint64_t v39 = v33;
  uint64_t v34 = *(v29 - 2);
  unint64_t v35 = *(v29 - 1);
  int v37 = *((unsigned __int8 *)v29 + 8);
  v36[1] = v29[2];
  sub_1000048B8(v26, v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000048B8(v31, v32);
  swift_bridgeObjectRetain();
  sub_1000048B8(v34, v35);
  swift_bridgeObjectRetain();
  sub_100078090();
  return sub_100064884((uint64_t)v44);
}

void *sub_1000645E0@<X0>(uint64_t a1@<X8>)
{
  sub_100077B80();
  swift_allocObject();
  sub_100077B70();
  sub_1000646B8();
  sub_100077B60();
  uint64_t result = (void *)swift_release();
  if (!v1)
  {
    memcpy(__dst, v4, sizeof(__dst));
    sub_100064278(__dst, a1);
    return sub_10006470C(__dst);
  }
  return result;
}

unint64_t sub_1000646B8()
{
  unint64_t result = qword_100090E68;
  if (!qword_100090E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090E68);
  }
  return result;
}

void *sub_10006470C(void *a1)
{
  uint64_t v5 = a1[14];
  uint64_t v6 = a1[13];
  uint64_t v4 = a1[25];
  unint64_t v3 = a1[26];
  uint64_t v8 = a1[29];
  unint64_t v7 = a1[30];
  sub_1000048CC(a1[3], a1[4]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10005EC98(v6, v5);
  sub_1000048CC(v4, v3);
  swift_bridgeObjectRelease();
  sub_1000048CC(v8, v7);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_10006481C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002214(&qword_100090E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100064884(uint64_t a1)
{
  uint64_t v2 = sub_100002214(&qword_100090E70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000648E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002214(&qword_100090E70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006494C()
{
  uint64_t v1 = sub_100077E70();
  uint64_t v10 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v3 = (char *)v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for IDSSessionReinitiateSchema();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100077B80();
  swift_allocObject();
  sub_100077B70();
  sub_100064B38();
  sub_100077B60();
  if (!v0)
  {
    uint64_t v7 = *(void *)v6;
    v9[2] = *((void *)v6 + 1);
    v9[3] = v7;
    v9[1] = *((void *)v6 + 3);
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v3, &v6[*(int *)(v4 + 28)], v1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100077E80();
    sub_100002F2C((uint64_t)v6);
  }
  return swift_release();
}

unint64_t sub_100064B38()
{
  unint64_t result = qword_100090E78;
  if (!qword_100090E78)
  {
    type metadata accessor for IDSSessionReinitiateSchema();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090E78);
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSInvitationUnpacker()
{
  return &type metadata for IDSInvitationUnpacker;
}

uint64_t sub_100064BA0()
{
  return sub_100065884(&qword_100090E80, (void (*)(uint64_t))&type metadata accessor for IDSInvitation);
}

uint64_t sub_100064BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v51 = a1;
  uint64_t v2 = sub_1000780C0();
  uint64_t v45 = *(void *)(v2 - 8);
  uint64_t v46 = v2;
  __chkstk_darwin(v2);
  uint64_t v48 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_100077D60();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  __chkstk_darwin(v4);
  uint64_t v47 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for IDSKCSharingInvitationSchema();
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for IDSHomeKitInvitationSchema(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_100002214(&qword_100090248);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100077D80();
  uint64_t v42 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for IDSSampleInvitationSchema();
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for IDSDictionaryContextClientSchema(0);
  __chkstk_darwin(v21);
  uint64_t v23 = (uint64_t *)((char *)&v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100065994(v51, (uint64_t)v23, type metadata accessor for IDSDictionaryContextClientSchema);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_1000659FC((uint64_t)v23, (uint64_t)v11, type metadata accessor for IDSHomeKitInvitationSchema);
      sub_100065BCC(v11, v49);
      uint64_t v28 = type metadata accessor for IDSHomeKitInvitationSchema;
      uint64_t v29 = (uint64_t)v11;
      goto LABEL_7;
    case 2u:
      sub_1000659FC((uint64_t)v23, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for IDSKCSharingInvitationSchema);
      sub_10002E090(v8, v49);
      uint64_t v28 = (uint64_t (*)(void))type metadata accessor for IDSKCSharingInvitationSchema;
      uint64_t v29 = (uint64_t)v8;
      goto LABEL_7;
    case 3u:
      uint64_t v31 = *v23;
      unint64_t v32 = v23[1];
      sub_100004214(*v23, v32);
      uint64_t v33 = v47;
      uint64_t v34 = v50;
      sub_100077D50();
      if (v34) {
        goto LABEL_13;
      }
      uint64_t v35 = v49;
      (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v49, v33, v44);
      uint64_t v36 = (unsigned int *)&enum case for IDSDictionaryContext.idsHealthInvitation(_:);
      goto LABEL_12;
    case 4u:
      uint64_t v31 = v23[1];
      unint64_t v32 = v23[2];
      sub_100004214(v31, v32);
      int v37 = v48;
      uint64_t v38 = v50;
      sub_1000780B0();
      if (v38) {
        goto LABEL_13;
      }
      uint64_t v35 = v49;
      (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v49, v37, v46);
      uint64_t v36 = (unsigned int *)&enum case for IDSDictionaryContext.idsActivitySharingInvitation(_:);
LABEL_12:
      uint64_t v39 = *v36;
      uint64_t v40 = sub_100077DB0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 104))(v35, v39, v40);
LABEL_13:
      uint64_t result = sub_1000042CC(v31, v32);
      break;
    default:
      sub_1000659FC((uint64_t)v23, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for IDSSampleInvitationSchema);
      sub_100065A64((uint64_t)&v20[*(int *)(v18 + 20)], (uint64_t)v14, &qword_100090248);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v24 = v50;
      sub_100077D70();
      if (!v24)
      {
        uint64_t v25 = v49;
        (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v49, v17, v15);
        uint64_t v26 = enum case for IDSDictionaryContext.idsSampleInvitation(_:);
        uint64_t v27 = sub_100077DB0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 104))(v25, v26, v27);
      }
      uint64_t v28 = (uint64_t (*)(void))type metadata accessor for IDSSampleInvitationSchema;
      uint64_t v29 = (uint64_t)v20;
LABEL_7:
      uint64_t result = sub_100065AC8(v29, v28);
      break;
  }
  return result;
}

uint64_t sub_100065218@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v54 = a1;
  uint64_t v47 = a3;
  uint64_t v4 = sub_100077FA0();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  __chkstk_darwin(v4);
  uint64_t v48 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100077DB0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v51 = v6;
  uint64_t v52 = v7;
  __chkstk_darwin(v6);
  uint64_t v53 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for IDSDictionaryContextClientSchema(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for IDSDictionaryContextData(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_100002214(&qword_100090E88);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v39 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v39 - v22;
  uint64_t v24 = type metadata accessor for IDSInvitationSchema(0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v39 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100077B80();
  swift_allocObject();
  uint64_t v27 = sub_100077B70();
  sub_100065884(&qword_100090E90, (void (*)(uint64_t))type metadata accessor for IDSInvitationSchema);
  sub_100077B60();
  if (v3) {
    return swift_release();
  }
  uint64_t v54 = v21;
  uint64_t v55 = v27;
  uint64_t v46 = v18;
  uint64_t v29 = sub_100077E20();
  uint64_t v45 = *(void *)(v29 - 8);
  uint64_t v30 = v45 + 56;
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56);
  v44(v23, 1, 1, v29);
  uint64_t v31 = type metadata accessor for IDSInvitationContextSchema(0);
  sub_100065994((uint64_t)&v26[*(int *)(v31 + 24)], (uint64_t)v14, type metadata accessor for IDSDictionaryContextData);
  sub_1000659FC((uint64_t)v14, (uint64_t)v11, type metadata accessor for IDSDictionaryContextClientSchema);
  swift_bridgeObjectRetain();
  sub_100064BE8((uint64_t)v11, v53);
  uint64_t v40 = v29;
  uint64_t v41 = v30;
  uint64_t v42 = v11;
  uint64_t v43 = v23;
  swift_bridgeObjectRelease();
  uint64_t v32 = v52;
  uint64_t v33 = v48;
  uint64_t v34 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v48, v53, v51);
  (*(void (**)(char *, void, uint64_t))(v49 + 104))(v33, enum case for IDSInvitationContextType.dictionary(_:), v50);
  swift_bridgeObjectRetain();
  uint64_t v35 = (uint64_t)v54;
  sub_100077E10();
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v53, v34);
  sub_100065AC8((uint64_t)v42, type metadata accessor for IDSDictionaryContextClientSchema);
  uint64_t v36 = (uint64_t)v43;
  sub_1000658CC((uint64_t)v43);
  uint64_t v37 = v40;
  v44((char *)v35, 0, 1, v40);
  sub_10006592C(v35, v36);
  uint64_t v38 = (uint64_t)v46;
  sub_100065A64(v36, (uint64_t)v46, &qword_100090E88);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v38, 1, v37);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_100077C40();
    swift_release();
    sub_1000658CC(v36);
    return sub_100065AC8((uint64_t)v26, type metadata accessor for IDSInvitationSchema);
  }
  return result;
}

uint64_t sub_10006586C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100065218(a1, a2, a3);
}

uint64_t sub_100065884(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000658CC(uint64_t a1)
{
  uint64_t v2 = sub_100002214(&qword_100090E88);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10006592C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002214(&qword_100090E88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100065994(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000659FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100065A64(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100002214(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100065AC8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for FTLivePhotoMessageUnpacker()
{
  return &type metadata for FTLivePhotoMessageUnpacker;
}

uint64_t sub_100065B38@<X0>(uint64_t a1@<X8>)
{
  return sub_1000055C0(a1);
}

unint64_t sub_100065B50(uint64_t a1)
{
  unint64_t result = sub_100065B78();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100065B78()
{
  unint64_t result = qword_100090E98;
  if (!qword_100090E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090E98);
  }
  return result;
}

uint64_t sub_100065BCC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v115 = a2;
  uint64_t v5 = sub_100002214(&qword_1000906F8);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v123 = (uint64_t)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v122 = (uint64_t)&v108 - v8;
  uint64_t v114 = sub_100077E00();
  uint64_t v113 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  unint64_t v118 = (char *)&v108 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100002214(&qword_100090248);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v121 = (uint64_t)&v108 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v138 = (uint64_t)&v108 - v14;
  __chkstk_darwin(v13);
  uint64_t v137 = (uint64_t)&v108 - v15;
  uint64_t v16 = sub_100002214(&qword_100090EA0);
  __chkstk_darwin(v16 - 8);
  uint64_t v128 = (char *)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = sub_100078170();
  uint64_t v126 = *(void *)(v141 - 8);
  uint64_t v18 = __chkstk_darwin(v141);
  unint64_t v134 = (char *)&v108 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  long long v125 = (char *)&v108 - v20;
  uint64_t v136 = type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema(0);
  uint64_t v124 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  long long v129 = (char *)&v108 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_100078150();
  uint64_t v135 = *(void *)(v22 - 8);
  uint64_t v23 = __chkstk_darwin(v22);
  unint64_t v142 = (char *)&v108 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v140 = (char *)&v108 - v26;
  __chkstk_darwin(v25);
  uint64_t v132 = (char *)&v108 - v27;
  uint64_t v28 = sub_100002214(&qword_100090EA8);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  uint64_t v120 = (uint64_t)&v108 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v116 = (char *)&v108 - v32;
  __chkstk_darwin(v31);
  uint64_t v127 = (uint64_t)&v108 - v33;
  uint64_t v34 = sub_100002214(&qword_100090EB0);
  uint64_t v35 = __chkstk_darwin(v34 - 8);
  uint64_t v117 = (uint64_t)&v108 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v108 - v38;
  __chkstk_darwin(v37);
  uint64_t v139 = (uint64_t)&v108 - v40;
  uint64_t v41 = sub_100002214(&qword_100090EB8);
  uint64_t v42 = __chkstk_darwin(v41 - 8);
  uint64_t v119 = (uint64_t)&v108 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v46 = (char *)&v108 - v45;
  __chkstk_darwin(v44);
  uint64_t v48 = (char *)&v108 - v47;
  uint64_t v49 = sub_100077DE0();
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56);
  unint64_t v133 = v48;
  v50(v48, 1, 1, v49);
  unint64_t v130 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
  unint64_t v131 = a1;
  if (*(void *)((char *)a1 + v130[6] + 8))
  {
    swift_bridgeObjectRetain();
    sub_100077DD0();
    if (v2) {
      return sub_10000A43C((uint64_t)v133, &qword_100090EB8);
    }
    uint64_t v51 = (uint64_t)v133;
    sub_10000A43C((uint64_t)v133, &qword_100090EB8);
    v50(v46, 0, 1, v49);
    sub_100044DC4((uint64_t)v46, v51, &qword_100090EB8);
  }
  uint64_t v52 = sub_100077D90();
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56);
  v53(v139, 1, 1, v52);
  uint64_t v54 = (char *)v131 + v130[16];
  unint64_t v55 = *((void *)v54 + 1);
  if (v55 >> 60 == 15)
  {
    uint64_t v56 = v139;
  }
  else
  {
    uint64_t v57 = *(void *)v54;
    sub_100004214(*(void *)v54, *((void *)v54 + 1));
    sub_100077DC0();
    if (v2)
    {
      sub_1000048CC(v57, v55);
LABEL_44:
      uint64_t v89 = v139;
      goto LABEL_45;
    }
    uint64_t v58 = v139;
    sub_10000A43C(v139, &qword_100090EB0);
    sub_1000048CC(v57, v55);
    uint64_t v59 = v52;
    uint64_t v56 = v58;
    v53((uint64_t)v39, 0, 1, v59);
    sub_100044DC4((uint64_t)v39, v58, &qword_100090EB0);
  }
  unint64_t v60 = v140;
  uint64_t v61 = sub_100078040();
  uint64_t v62 = *(void *)(v61 - 8);
  unint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56);
  uint64_t v64 = v62 + 56;
  uint64_t v65 = v127;
  v63(v127, 1, 1, v61);
  uint64_t v66 = (void *)((char *)v131 + v130[10]);
  uint64_t v67 = *v66;
  uint64_t v68 = v66[1];
  uint64_t v69 = (uint64_t)v129;
  if (*v66)
  {
    if (v67 == 1) {
      goto LABEL_42;
    }
    uint64_t v110 = v64;
    unint64_t v111 = v63;
    uint64_t v112 = v61;
    uint64_t v70 = *(void *)(v67 + 16);
    if (v70)
    {
      uint64_t v109 = v68;
      unint64_t v71 = (void (**)(char *, char *, uint64_t))(v135 + 32);
      uint64_t v108 = swift_bridgeObjectRetain();
      uint64_t v72 = v108 + 72;
      unint64_t v73 = (char *)&_swiftEmptyArrayStorage;
      do
      {
        sub_100078140();
        if (v2)
        {
LABEL_37:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_43;
        }
        unint64_t v74 = *v71;
        unint64_t v75 = v132;
        (*v71)(v132, v60, v22);
        v74(v142, v75, v22);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v73 = (char *)sub_100077964(0, *((void *)v73 + 2) + 1, 1, v73);
        }
        unint64_t v77 = *((void *)v73 + 2);
        unint64_t v76 = *((void *)v73 + 3);
        if (v77 >= v76 >> 1) {
          unint64_t v73 = (char *)sub_100077964(v76 > 1, v77 + 1, 1, v73);
        }
        v72 += 48;
        *((void *)v73 + 2) = v77 + 1;
        v74(&v73[((*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80))+ *(void *)(v135 + 72) * v77], v142, v22);
        --v70;
        unint64_t v60 = v140;
      }
      while (v70);
      swift_bridgeObjectRelease();
      uint64_t v56 = v139;
      uint64_t v65 = v127;
      uint64_t v69 = (uint64_t)v129;
      uint64_t v68 = v109;
      uint64_t v78 = (uint64_t)v128;
      if (!v109) {
        goto LABEL_39;
      }
      goto LABEL_23;
    }
    uint64_t v65 = v127;
    uint64_t v78 = (uint64_t)v128;
    if (v68)
    {
LABEL_23:
      long long v79 = *(char **)(v68 + 16);
      if (v79)
      {
        uint64_t v80 = v68 + ((*(unsigned __int8 *)(v124 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v124 + 80));
        uint64_t v140 = (char *)(v126 + 56);
        uint64_t v135 = v126 + 48;
        uint64_t v132 = (char *)(v126 + 32);
        uint64_t v124 = *(void *)(v124 + 72);
        uint64_t v109 = v68;
        swift_bridgeObjectRetain();
        uint64_t v81 = &_swiftEmptyArrayStorage;
        do
        {
          unint64_t v142 = v79;
          sub_100066B7C(v80, v69);
          sub_100065A64(v69, v137, &qword_100090248);
          sub_100065A64(v69 + *(int *)(v136 + 20), v138, &qword_100090248);
          sub_100078160();
          if (v3)
          {
            sub_100066BE0(v69);
            swift_bridgeObjectRelease();
            goto LABEL_37;
          }
          uint64_t v82 = v141;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))v140)(v78, 0, 1, v141);
          sub_100066BE0(v69);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v135)(v78, 1, v82) == 1)
          {
            sub_10000A43C(v78, &qword_100090EA0);
          }
          else
          {
            uint64_t v83 = v78;
            uint64_t v84 = *(void (**)(unint64_t, char *, uint64_t))v132;
            uint64_t v85 = v125;
            (*(void (**)(char *, uint64_t, uint64_t))v132)(v125, v83, v82);
            v84((unint64_t)v134, v85, v82);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v81 = (void *)sub_100077944(0, v81[2] + 1, 1, v81);
            }
            unint64_t v87 = v81[2];
            unint64_t v86 = v81[3];
            if (v87 >= v86 >> 1) {
              uint64_t v81 = (void *)sub_100077944(v86 > 1, v87 + 1, 1, v81);
            }
            v81[2] = v87 + 1;
            v84((unint64_t)v81+ ((*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80))+ *(void *)(v126 + 72) * v87, v134, v141);
            uint64_t v78 = (uint64_t)v128;
            uint64_t v69 = (uint64_t)v129;
          }
          v80 += v124;
          long long v79 = v142 - 1;
        }
        while (v142 != (char *)1);
        swift_bridgeObjectRelease();
        uint64_t v56 = v139;
        uint64_t v65 = v127;
      }
      else
      {
        uint64_t v56 = v139;
      }
    }
  }
  else
  {
    uint64_t v110 = v64;
    unint64_t v111 = v63;
    uint64_t v112 = v61;
    uint64_t v78 = (uint64_t)v128;
    if (v68) {
      goto LABEL_23;
    }
  }
LABEL_39:
  uint64_t v88 = (uint64_t)v116;
  sub_100078030();
  sub_10000A43C(v65, &qword_100090EA8);
  if (v3)
  {
    uint64_t v89 = v56;
LABEL_45:
    sub_10000A43C(v89, &qword_100090EB0);
    return sub_10000A43C((uint64_t)v133, &qword_100090EB8);
  }
  v111(v88, 0, 1, v112);
  sub_100044DC4(v88, v65, &qword_100090EA8);
LABEL_42:
  unint64_t v91 = v130;
  unint64_t v90 = v131;
  unint64_t v142 = (char *)*v131;
  sub_100065A64((uint64_t)v131 + v130[5], v121, &qword_100090248);
  sub_100065A64((uint64_t)v133, v119, &qword_100090EB8);
  uint64_t v92 = v91[7];
  uint64_t v93 = (char *)v90 + v91[8];
  uint64_t v141 = *(void *)v93;
  LODWORD(v140) = v93[8];
  LODWORD(v138) = *((unsigned __int8 *)v90 + v91[9]);
  LODWORD(v137) = *((unsigned __int8 *)v90 + v92);
  sub_100065A64(v65, v120, &qword_100090EA8);
  sub_100065A64((uint64_t)v90 + v91[11], v122, &qword_1000906F8);
  uint64_t v94 = v91[13];
  unint64_t v95 = (void *)((char *)v90 + v91[12]);
  uint64_t v96 = *v95;
  unint64_t v134 = (char *)v95[1];
  uint64_t v136 = *(void *)((char *)v90 + v94);
  sub_100065A64((uint64_t)v90 + v91[14], v123, &qword_1000906F8);
  sub_100065A64(v56, v117, &qword_100090EB0);
  uint64_t v97 = v91[18];
  uint64_t v135 = *(void *)((char *)v90 + v91[17]);
  uint64_t v132 = *(char **)((char *)v90 + v97);
  LODWORD(v129) = *((unsigned __int8 *)v90 + v97 + 8);
  uint64_t v98 = v91[20];
  unint64_t v99 = (char *)v90 + v91[19];
  unint64_t v130 = *(int **)v99;
  LODWORD(v128) = v99[8];
  uint64_t v100 = (char *)v90 + v98;
  uint64_t v101 = *(void *)((char *)v90 + v98);
  unint64_t v102 = *((void *)v100 + 1);
  swift_bridgeObjectRetain();
  sub_1000048B8(v96, (unint64_t)v134);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000048B8(v101, v102);
  unint64_t v103 = v118;
  sub_100077DF0();
  if (v3)
  {
LABEL_43:
    sub_10000A43C(v127, &qword_100090EA8);
    goto LABEL_44;
  }
  sub_10000A43C(v127, &qword_100090EA8);
  sub_10000A43C(v139, &qword_100090EB0);
  sub_10000A43C((uint64_t)v133, &qword_100090EB8);
  uint64_t v105 = v115;
  (*(void (**)(uint64_t, char *, uint64_t))(v113 + 32))(v115, v103, v114);
  uint64_t v106 = enum case for IDSDictionaryContext.idsHomekitInvitation(_:);
  uint64_t v107 = sub_100077DB0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v107 - 8) + 104))(v105, v106, v107);
}

uint64_t sub_100066B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100066BE0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t IDSCommandWebTunnelResponseSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002214(&qword_100090EC0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000029D8(a1, a1[3]);
  sub_100067070();
  sub_1000786A0();
  v10[0] = 0;
  sub_100078570();
  if (!v2)
  {
    v10[0] = 1;
    sub_1000784F0();
    sub_100044DC4(v3 + 24, (uint64_t)v14, &qword_100090158);
    sub_100044DC4((uint64_t)v14, (uint64_t)v10, &qword_100090158);
    char v15 = 2;
    sub_100003DA8();
    sub_100078510();
    v10[0] = 3;
    sub_1000784F0();
    v10[0] = 4;
    sub_1000784C0();
    v10[0] = 5;
    sub_100078520();
    v10[0] = 6;
    sub_1000784C0();
    sub_100044DC4(v3 + 104, (uint64_t)v13, &qword_100090AA8);
    sub_100044DC4((uint64_t)v13, (uint64_t)v10, &qword_100090AA8);
    char v15 = 7;
    sub_100044C74();
    sub_100078510();
    sub_100044DC4(v3 + 200, (uint64_t)v12, &qword_100090158);
    sub_100044DC4((uint64_t)v12, (uint64_t)v10, &qword_100090158);
    char v15 = 8;
    sub_100078510();
    v10[0] = 9;
    sub_1000784C0();
    sub_100044DC4(v3 + 232, (uint64_t)v11, &qword_100090158);
    sub_100044DC4((uint64_t)v11, (uint64_t)v10, &qword_100090158);
    char v15 = 10;
    sub_100078510();
    v10[0] = 11;
    sub_1000784F0();
    v10[0] = 12;
    sub_1000784C0();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100067070()
{
  unint64_t result = qword_100090EC8;
  if (!qword_100090EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090EC8);
  }
  return result;
}

void *IDSCommandWebTunnelResponseSchema.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_1000675C4(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x118uLL);
  }
  return result;
}

uint64_t sub_100067118(char a1)
{
  uint64_t result = 99;
  switch(a1)
  {
    case 1:
      uint64_t result = 105;
      break;
    case 2:
      uint64_t result = 85;
      break;
    case 3:
      uint64_t result = 115;
      break;
    case 4:
      uint64_t result = 21603;
      break;
    case 5:
      uint64_t result = 101;
      break;
    case 6:
      uint64_t result = 117;
      break;
    case 7:
      uint64_t result = 104;
      break;
    case 8:
      uint64_t result = 98;
      break;
    case 9:
      uint64_t result = 30050;
      break;
    case 10:
      uint64_t result = 27490;
      break;
    case 11:
      uint64_t result = 29544;
      break;
    case 12:
      uint64_t result = 29288;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000671F0(char a1)
{
  uint64_t result = 99;
  switch(a1)
  {
    case 1:
      uint64_t result = 105;
      break;
    case 2:
      uint64_t result = 85;
      break;
    case 3:
      uint64_t result = 115;
      break;
    case 4:
      uint64_t result = 21603;
      break;
    case 5:
      uint64_t result = 101;
      break;
    case 6:
      uint64_t result = 117;
      break;
    case 7:
      uint64_t result = 104;
      break;
    case 8:
      uint64_t result = 98;
      break;
    case 9:
      uint64_t result = 30050;
      break;
    case 10:
      uint64_t result = 27490;
      break;
    case 11:
      uint64_t result = 29544;
      break;
    case 12:
      uint64_t result = 29288;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000672C8(void *a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  return IDSCommandWebTunnelResponseSchema.encode(to:)(a1);
}

uint64_t sub_10006731C(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = sub_100067118(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100067118(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1000785B0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_1000673A8()
{
  char v1 = *v0;
  sub_100078630();
  sub_100067118(v1);
  sub_1000781D0();
  swift_bridgeObjectRelease();
  return sub_100078650();
}

uint64_t sub_10006740C()
{
  sub_100067118(*v0);
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100067460()
{
  char v1 = *v0;
  sub_100078630();
  sub_100067118(v1);
  sub_1000781D0();
  swift_bridgeObjectRelease();
  return sub_100078650();
}

uint64_t sub_1000674C0@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100068E94(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_1000674F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100067118(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10006751C()
{
  return sub_1000671F0(*v0);
}

uint64_t sub_100067524@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100068E94(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006754C(uint64_t a1)
{
  unint64_t v2 = sub_100067070();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100067588(uint64_t a1)
{
  unint64_t v2 = sub_100067070();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1000675C4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100002214(&qword_100090EE8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  unint64_t v131 = a1;
  sub_1000029D8(a1, v9);
  sub_100067070();
  sub_100078690();
  if (v2) {
    return (void *)sub_100002E34((uint64_t)v131);
  }
  uint64_t v67 = a2;
  LOBYTE(v86) = 0;
  uint64_t v10 = sub_100078470();
  LOBYTE(v86) = 1;
  uint64_t v11 = sub_1000783F0();
  int v13 = v12;
  uint64_t v66 = v11;
  char v130 = v12 & 1;
  LOBYTE(v85[0]) = 2;
  unint64_t v14 = sub_100004864();
  sub_100078410();
  uint64_t v81 = v14;
  int v65 = v13;
  uint64_t v15 = v86;
  LOBYTE(v86) = 3;
  uint64_t v16 = v87;
  sub_1000048B8(v15, v87);
  uint64_t v62 = sub_1000783F0();
  uint64_t v63 = v15;
  unint64_t v64 = v16;
  char v128 = v17 & 1;
  LOBYTE(v86) = 4;
  LODWORD(v16) = v17;
  uint64_t v18 = sub_1000783C0();
  int v60 = v16;
  uint64_t v61 = v18;
  LOBYTE(v86) = 5;
  uint64_t v20 = v19;
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_100078420();
  uint64_t v80 = v20;
  uint64_t v59 = v21;
  char v126 = v22 & 1;
  LOBYTE(v86) = 6;
  LODWORD(v20) = v22;
  uint64_t v23 = sub_1000783C0();
  int v57 = v20;
  uint64_t v58 = v23;
  LOBYTE(v85[0]) = 7;
  uint64_t v25 = v24;
  sub_10005EE2C();
  swift_bridgeObjectRetain();
  sub_100078410();
  uint64_t v79 = v25;
  uint64_t v26 = v95;
  uint64_t v27 = v96;
  LOBYTE(v85[0]) = 8;
  uint64_t v73 = v97;
  uint64_t v84 = v94;
  uint64_t v76 = v89;
  uint64_t v77 = v86;
  uint64_t v74 = v87;
  uint64_t v75 = v88;
  unint64_t v78 = v90;
  uint64_t v82 = v91;
  uint64_t v83 = v92;
  uint64_t v56 = v93;
  sub_10005EE80(v86, v87);
  sub_100078410();
  uint64_t v72 = v26;
  uint64_t v55 = v10;
  uint64_t v28 = v56;
  uint64_t v29 = v86;
  LOBYTE(v86) = 9;
  uint64_t v70 = v29;
  uint64_t v71 = v87;
  sub_1000048B8(v29, v87);
  uint64_t v30 = sub_1000783C0();
  uint64_t v69 = v31;
  uint64_t v32 = v30;
  LOBYTE(v85[0]) = 10;
  swift_bridgeObjectRetain();
  sub_100078410();
  uint64_t v33 = v86;
  LOBYTE(v86) = 11;
  uint64_t v81 = v33;
  uint64_t v68 = v87;
  sub_1000048B8(v33, v87);
  uint64_t v54 = sub_1000783F0();
  int v51 = v34 & 1;
  char v124 = v34 & 1;
  char v122 = 12;
  uint64_t v35 = sub_1000783C0();
  uint64_t v52 = v36;
  uint64_t v53 = v35;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOBYTE(v85[2]) = v65 & 1;
  LOBYTE(v85[6]) = v60 & 1;
  LOBYTE(v85[10]) = v57 & 1;
  LOBYTE(v85[32]) = v51;
  v85[0] = v55;
  v85[1] = v66;
  v85[3] = v63;
  v85[4] = v64;
  v85[5] = v62;
  unsigned char v85[7] = v61;
  v85[8] = v80;
  v85[9] = v59;
  v85[11] = v58;
  v85[12] = v79;
  v85[13] = v77;
  v85[14] = v74;
  v85[15] = v75;
  v85[16] = v76;
  v85[17] = v78;
  v85[18] = v82;
  v85[19] = v83;
  v85[20] = v28;
  unint64_t v37 = v71;
  v85[21] = v84;
  v85[22] = v72;
  v85[23] = v27;
  v85[24] = v73;
  uint64_t v49 = v27;
  uint64_t v50 = v32;
  uint64_t v38 = v70;
  v85[25] = v70;
  v85[26] = v71;
  v85[27] = v32;
  v85[28] = v69;
  uint64_t v39 = v81;
  v85[29] = v81;
  unint64_t v40 = v68;
  v85[30] = v68;
  v85[31] = v54;
  v85[33] = v53;
  v85[34] = v52;
  sub_100068EE0(v85);
  sub_1000048CC(v39, v40);
  swift_bridgeObjectRelease();
  sub_1000048CC(v38, v37);
  uint64_t v41 = v76;
  uint64_t v42 = v74;
  uint64_t v43 = v75;
  sub_10005EC98(v77, v74);
  uint64_t v44 = v80;
  swift_bridgeObjectRelease();
  uint64_t v45 = v79;
  swift_bridgeObjectRelease();
  uint64_t v46 = v63;
  unint64_t v47 = v64;
  sub_1000048CC(v63, v64);
  sub_100002E34((uint64_t)v131);
  uint64_t v86 = v55;
  uint64_t v87 = v66;
  LOBYTE(v88) = v130;
  *(_DWORD *)((char *)&v88 + 1) = *(_DWORD *)v129;
  HIDWORD(v88) = *(_DWORD *)&v129[3];
  uint64_t v89 = v46;
  unint64_t v90 = v47;
  uint64_t v91 = v62;
  LOBYTE(v92) = v128;
  *(_DWORD *)((char *)&v92 + 1) = *(_DWORD *)v127;
  HIDWORD(v92) = *(_DWORD *)&v127[3];
  uint64_t v93 = v61;
  uint64_t v94 = v44;
  uint64_t v95 = v59;
  LOBYTE(v96) = v126;
  *(_DWORD *)((char *)&v96 + 1) = *(_DWORD *)v125;
  HIDWORD(v96) = *(_DWORD *)&v125[3];
  uint64_t v97 = v58;
  uint64_t v98 = v45;
  uint64_t v99 = v77;
  uint64_t v100 = v42;
  uint64_t v101 = v43;
  uint64_t v102 = v41;
  unint64_t v103 = v78;
  uint64_t v104 = v82;
  uint64_t v105 = v83;
  uint64_t v106 = v56;
  uint64_t v107 = v84;
  uint64_t v108 = v72;
  uint64_t v109 = v49;
  uint64_t v110 = v73;
  uint64_t v111 = v70;
  uint64_t v112 = v71;
  uint64_t v113 = v50;
  uint64_t v114 = v69;
  uint64_t v115 = v81;
  uint64_t v116 = v68;
  uint64_t v117 = v54;
  char v118 = v124;
  *(_DWORD *)uint64_t v119 = *(_DWORD *)v123;
  *(_DWORD *)&v119[3] = *(_DWORD *)&v123[3];
  uint64_t v120 = v53;
  uint64_t v121 = v52;
  sub_10006470C(&v86);
  return memcpy(v67, v85, 0x118uLL);
}

uint64_t destroy for IDSCommandWebTunnelResponseSchema(uint64_t *a1)
{
  unint64_t v2 = a1[4];
  if (v2 >> 60 != 15) {
    sub_1000042CC(a1[3], v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[14] != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unint64_t v3 = a1[26];
  if (v3 >> 60 != 15) {
    sub_1000042CC(a1[25], v3);
  }
  swift_bridgeObjectRelease();
  unint64_t v4 = a1[30];
  if (v4 >> 60 != 15) {
    sub_1000042CC(a1[29], v4);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IDSCommandWebTunnelResponseSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = (uint64_t *)(a2 + 24);
  unint64_t v6 = *(void *)(a2 + 32);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
  }
  else
  {
    uint64_t v7 = *v5;
    sub_100004214(*v5, *(void *)(a2 + 32));
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = v6;
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  uint64_t v10 = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 == 1)
  {
    long long v11 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v11;
    long long v12 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v12;
    long long v13 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v13;
  }
  else
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v10;
    uint64_t v14 = *(void *)(a2 + 128);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = v14;
    uint64_t v15 = *(void *)(a2 + 144);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v15;
    uint64_t v16 = *(void *)(a2 + 160);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = v16;
    uint64_t v17 = *(void *)(a2 + 176);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = v17;
    uint64_t v18 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v19 = (uint64_t *)(a2 + 200);
  unint64_t v20 = *(void *)(a2 + 208);
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 200) = *(_OWORD *)v19;
  }
  else
  {
    uint64_t v21 = *v19;
    sub_100004214(*v19, *(void *)(a2 + 208));
    *(void *)(a1 + 200) = v21;
    *(void *)(a1 + 208) = v20;
  }
  uint64_t v22 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v22;
  uint64_t v23 = (_OWORD *)(a2 + 232);
  unint64_t v24 = *(void *)(a2 + 240);
  swift_bridgeObjectRetain();
  if (v24 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 232) = *v23;
  }
  else
  {
    uint64_t v25 = *(void *)v23;
    sub_100004214(v25, v24);
    *(void *)(a1 + 232) = v25;
    *(void *)(a1 + 240) = v24;
  }
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  uint64_t v26 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v26;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IDSCommandWebTunnelResponseSchema(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = (_OWORD *)(a1 + 24);
  unint64_t v6 = (uint64_t *)(a2 + 24);
  unint64_t v7 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) >> 60 == 15)
  {
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *v6;
      sub_100004214(*v6, *(void *)(a2 + 32));
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = v7;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
    sub_1000044A0(a1 + 24);
LABEL_6:
    *uint64_t v5 = *(_OWORD *)v6;
    goto LABEL_8;
  }
  uint64_t v9 = *v6;
  sub_100004214(*v6, *(void *)(a2 + 32));
  uint64_t v10 = *(void *)(a1 + 24);
  unint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v7;
  sub_1000042CC(v10, v11);
LABEL_8:
  uint64_t v12 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v13;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = (_OWORD *)(a1 + 104);
  uint64_t v15 = (_OWORD *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 112);
  if (*(void *)(a1 + 112) == 1)
  {
    if (v16 == 1)
    {
      long long v17 = *(_OWORD *)(a2 + 120);
      _OWORD *v14 = *v15;
      *(_OWORD *)(a1 + 120) = v17;
      long long v18 = *(_OWORD *)(a2 + 136);
      long long v19 = *(_OWORD *)(a2 + 152);
      long long v20 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v20;
      *(_OWORD *)(a1 + 136) = v18;
      *(_OWORD *)(a1 + 152) = v19;
    }
    else
    {
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(void *)(a1 + 176) = *(void *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  else if (v16 == 1)
  {
    sub_10005B278(a1 + 104);
    long long v21 = *(_OWORD *)(a2 + 120);
    _OWORD *v14 = *v15;
    *(_OWORD *)(a1 + 120) = v21;
    long long v22 = *(_OWORD *)(a2 + 184);
    long long v24 = *(_OWORD *)(a2 + 136);
    long long v23 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v22;
    *(_OWORD *)(a1 + 136) = v24;
    *(_OWORD *)(a1 + 152) = v23;
  }
  else
  {
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v25 = (uint64_t *)(a2 + 200);
  unint64_t v26 = *(void *)(a2 + 208);
  if (*(void *)(a1 + 208) >> 60 == 15)
  {
    if (v26 >> 60 != 15)
    {
      uint64_t v27 = *v25;
      sub_100004214(*v25, *(void *)(a2 + 208));
      *(void *)(a1 + 200) = v27;
      *(void *)(a1 + 208) = v26;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v26 >> 60 == 15)
  {
    sub_1000044A0(a1 + 200);
LABEL_20:
    *(_OWORD *)(a1 + 200) = *(_OWORD *)v25;
    goto LABEL_22;
  }
  uint64_t v28 = *v25;
  sub_100004214(*v25, *(void *)(a2 + 208));
  uint64_t v29 = *(void *)(a1 + 200);
  unint64_t v30 = *(void *)(a1 + 208);
  *(void *)(a1 + 200) = v28;
  *(void *)(a1 + 208) = v26;
  sub_1000042CC(v29, v30);
LABEL_22:
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v31 = (uint64_t *)(a2 + 232);
  unint64_t v32 = *(void *)(a2 + 240);
  if (*(void *)(a1 + 240) >> 60 != 15)
  {
    if (v32 >> 60 != 15)
    {
      uint64_t v34 = *v31;
      sub_100004214(*v31, *(void *)(a2 + 240));
      uint64_t v35 = *(void *)(a1 + 232);
      unint64_t v36 = *(void *)(a1 + 240);
      *(void *)(a1 + 232) = v34;
      *(void *)(a1 + 240) = v32;
      sub_1000042CC(v35, v36);
      goto LABEL_29;
    }
    sub_1000044A0(a1 + 232);
    goto LABEL_27;
  }
  if (v32 >> 60 == 15)
  {
LABEL_27:
    *(_OWORD *)(a1 + 232) = *(_OWORD *)v31;
    goto LABEL_29;
  }
  uint64_t v33 = *v31;
  sub_100004214(*v31, *(void *)(a2 + 240));
  *(void *)(a1 + 232) = v33;
  *(void *)(a1 + 240) = v32;
LABEL_29:
  uint64_t v37 = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  *(void *)(a1 + 248) = v37;
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for IDSCommandWebTunnelResponseSchema(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x118uLL);
}

uint64_t assignWithTake for IDSCommandWebTunnelResponseSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = (_OWORD *)(a1 + 24);
  unint64_t v6 = (_OWORD *)(a2 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  if (v7 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v8 = *(void *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    sub_1000044A0(a1 + 24);
LABEL_4:
    *uint64_t v5 = *v6;
    goto LABEL_6;
  }
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)v6;
  *(void *)(a1 + 32) = v8;
  sub_1000042CC(v9, v7);
LABEL_6:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v11;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 112) == 1)
  {
LABEL_9:
    long long v13 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v13;
    long long v14 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v14;
    long long v15 = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = v15;
    goto LABEL_11;
  }
  uint64_t v12 = *(void *)(a2 + 112);
  if (v12 == 1)
  {
    sub_10005B278(a1 + 104);
    goto LABEL_9;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v12;
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v16;
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v17;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v18;
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 176);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = v19;
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v20;
  swift_bridgeObjectRelease();
LABEL_11:
  long long v21 = (_OWORD *)(a2 + 200);
  unint64_t v22 = *(void *)(a1 + 208);
  if (v22 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 200) = *v21;
    goto LABEL_16;
  }
  unint64_t v23 = *(void *)(a2 + 208);
  if (v23 >> 60 == 15)
  {
    sub_1000044A0(a1 + 200);
    goto LABEL_14;
  }
  uint64_t v24 = *(void *)(a1 + 200);
  *(void *)(a1 + 200) = *(void *)v21;
  *(void *)(a1 + 208) = v23;
  sub_1000042CC(v24, v22);
LABEL_16:
  uint64_t v25 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v25;
  swift_bridgeObjectRelease();
  unint64_t v26 = (void *)(a2 + 232);
  unint64_t v27 = *(void *)(a1 + 240);
  if (v27 >> 60 != 15)
  {
    unint64_t v28 = *(void *)(a2 + 240);
    if (v28 >> 60 != 15)
    {
      uint64_t v29 = *(void *)(a1 + 232);
      *(void *)(a1 + 232) = *v26;
      *(void *)(a1 + 240) = v28;
      sub_1000042CC(v29, v27);
      goto LABEL_21;
    }
    sub_1000044A0(a1 + 232);
  }
  *(_OWORD *)(a1 + 232) = *(_OWORD *)v26;
LABEL_21:
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(unsigned char *)(a1 + 256) = *(unsigned char *)(a2 + 256);
  uint64_t v30 = *(void *)(a2 + 272);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(void *)(a1 + 272) = v30;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSCommandWebTunnelResponseSchema(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 280)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSCommandWebTunnelResponseSchema(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 280) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 280) = 0;
    }
    if (a2) {
      *(void *)(result + 64) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSCommandWebTunnelResponseSchema()
{
  return &type metadata for IDSCommandWebTunnelResponseSchema;
}

unsigned char *storeEnumTagSinglePayload for IDSCommandWebTunnelResponseSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *uint64_t result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100068D54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSCommandWebTunnelResponseSchema.CodingKeys()
{
  return &type metadata for IDSCommandWebTunnelResponseSchema.CodingKeys;
}

unint64_t sub_100068D90()
{
  unint64_t result = qword_100090ED0;
  if (!qword_100090ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090ED0);
  }
  return result;
}

unint64_t sub_100068DE8()
{
  unint64_t result = qword_100090ED8;
  if (!qword_100090ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090ED8);
  }
  return result;
}

unint64_t sub_100068E40()
{
  unint64_t result = qword_100090EE0;
  if (!qword_100090EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090EE0);
  }
  return result;
}

uint64_t sub_100068E94(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_10008B5E0;
  v6._object = a2;
  unint64_t v4 = sub_100078390(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 0xD) {
    return 13;
  }
  else {
    return v4;
  }
}

void *sub_100068EE0(void *a1)
{
  uint64_t v5 = a1[14];
  uint64_t v6 = a1[13];
  uint64_t v4 = a1[25];
  unint64_t v3 = a1[26];
  uint64_t v8 = a1[29];
  unint64_t v7 = a1[30];
  sub_1000048B8(a1[3], a1[4]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10005EE80(v6, v5);
  sub_1000048B8(v4, v3);
  swift_bridgeObjectRetain();
  sub_1000048B8(v8, v7);
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for IDSCommandResponseUnpacker()
{
  return &type metadata for IDSCommandResponseUnpacker;
}

unint64_t sub_100069004()
{
  unint64_t result = qword_100090EF0;
  if (!qword_100090EF0)
  {
    sub_100077D40();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090EF0);
  }
  return result;
}

void *sub_10006905C@<X0>(uint64_t a1@<X8>)
{
  sub_100077B80();
  swift_allocObject();
  sub_100077B70();
  sub_100069264();
  sub_100077B60();
  if (v1) {
    return (void *)swift_release();
  }
  uint64_t v17 = a1;
  swift_release();
  v4[8] = v14;
  v4[9] = v15;
  char v5 = v16;
  v4[4] = v10;
  v4[5] = v11;
  v4[6] = v12;
  v4[7] = v13;
  v4[0] = v6;
  v4[1] = v7;
  v4[2] = v8;
  v4[3] = v9;
  sub_1000048B8(*((uint64_t *)&v7 + 1), v8);
  sub_1000048B8(*((uint64_t *)&v10 + 1), v11);
  swift_bridgeObjectRetain();
  sub_1000048B8(v14, *((unint64_t *)&v14 + 1));
  sub_100077D30();
  return sub_100030064(v4);
}

void *sub_10006924C@<X0>(uint64_t a1@<X8>)
{
  return sub_10006905C(a1);
}

unint64_t sub_100069264()
{
  unint64_t result = qword_100090EF8;
  if (!qword_100090EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090EF8);
  }
  return result;
}

uint64_t sub_1000692B8()
{
  uint64_t v1 = sub_100002214(&qword_100090360);
  __chkstk_darwin(v1 - 8);
  unint64_t v3 = (char *)v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for IDSSessionCancelSchema();
  __chkstk_darwin(v4);
  long long v6 = (void *)((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100077B80();
  swift_allocObject();
  sub_100077B70();
  sub_100069480();
  sub_100077B60();
  if (!v0)
  {
    v12[3] = *v6;
    uint64_t v7 = v6[1];
    v12[0] = v6[3];
    v12[1] = v7;
    sub_1000694D8((uint64_t)v6 + *(int *)(v4 + 28), (uint64_t)v3);
    long long v8 = (void *)((char *)v6 + *(int *)(v4 + 32));
    uint64_t v9 = *v8;
    unint64_t v10 = v8[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000048B8(v9, v10);
    sub_100077CD0();
    sub_10002B7F8((uint64_t)v6);
  }
  return swift_release();
}

unint64_t sub_100069480()
{
  unint64_t result = qword_100090F00;
  if (!qword_100090F00)
  {
    type metadata accessor for IDSSessionCancelSchema();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090F00);
  }
  return result;
}

uint64_t sub_1000694D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002214(&qword_100090360);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for IDSSampleMessageUnpacker()
{
  return &type metadata for IDSSampleMessageUnpacker;
}

uint64_t sub_100069550()
{
  return sub_100069984((unint64_t *)&qword_100090190, (void (*)(uint64_t))&type metadata accessor for IDSClientMessageResult);
}

uint64_t sub_100069598@<X0>(char *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v24 = a1;
  uint64_t v2 = sub_100077DA0();
  uint64_t v22 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_100002214(&qword_100090248);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100077C90();
  uint64_t v21 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for IDSSampleMessageSchema();
  __chkstk_darwin(v11);
  long long v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100077B80();
  swift_allocObject();
  sub_100077B70();
  sub_100069984(&qword_100090F10, (void (*)(uint64_t))type metadata accessor for IDSSampleMessageSchema);
  uint64_t v14 = v25;
  sub_100077B60();
  if (v14) {
    return swift_release();
  }
  uint64_t v20 = v8;
  uint64_t v24 = v4;
  uint64_t v25 = v2;
  sub_10002E3B0((uint64_t)&v13[*(int *)(v11 + 24)], (uint64_t)v7);
  swift_bridgeObjectRetain();
  sub_100077C80();
  uint64_t v15 = v20;
  uint64_t v16 = v21;
  uint64_t v17 = v24;
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v24, v10, v20);
  (*(void (**)(char *, void, uint64_t))(v22 + 104))(v17, enum case for IDSClientMessageType.idsSampleMessage(_:), v25);
  sub_100077F30();
  swift_release();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v10, v15);
  return sub_10000B170((uint64_t)v13);
}

uint64_t sub_1000698F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000052A4(a1, a2, a3, a4);
}

unint64_t sub_100069908(uint64_t a1)
{
  unint64_t result = sub_100069930();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100069930()
{
  unint64_t result = qword_100090F08;
  if (!qword_100090F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090F08);
  }
  return result;
}

uint64_t sub_100069984(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000699CC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6144646E45444D48;
  }
  else {
    uint64_t v3 = 0x7472617453444D48;
  }
  if (v2) {
    unint64_t v4 = 0xEF79654B65746144;
  }
  else {
    unint64_t v4 = 0xED000079654B6574;
  }
  if (a2) {
    uint64_t v5 = 0x6144646E45444D48;
  }
  else {
    uint64_t v5 = 0x7472617453444D48;
  }
  if (a2) {
    unint64_t v6 = 0xED000079654B6574;
  }
  else {
    unint64_t v6 = 0xEF79654B65746144;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_1000785B0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100069A8C(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0x8000000100079BA0;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v4 = 0xD000000000000025;
    }
    else {
      unint64_t v4 = 0xD00000000000002BLL;
    }
    if (v3 == 1) {
      unint64_t v5 = 0x8000000100079BD0;
    }
    else {
      unint64_t v5 = 0x8000000100079C00;
    }
    int v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1) {
        unint64_t v7 = 0xD000000000000025;
      }
      else {
        unint64_t v7 = 0xD00000000000002BLL;
      }
      if (v6 == 1) {
        unint64_t v2 = 0x8000000100079BD0;
      }
      else {
        unint64_t v2 = 0x8000000100079C00;
      }
      if (v4 != v7) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xD000000000000027;
    unint64_t v5 = 0x8000000100079BA0;
    int v6 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  if (v4 != 0xD000000000000027)
  {
LABEL_21:
    char v8 = sub_1000785B0();
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v2) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100069B8C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x64616F6C796170;
  }
  else {
    uint64_t v3 = 1835365481;
  }
  if (v2) {
    unint64_t v4 = 0xE400000000000000;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x64616F6C796170;
  }
  else {
    uint64_t v5 = 1835365481;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE400000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_1000785B0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_100069C2C(char a1, char a2)
{
  if (a1) {
    unint64_t v2 = 0x8000000100079B80;
  }
  else {
    unint64_t v2 = 0x8000000100079B60;
  }
  if (a2) {
    unint64_t v3 = 0x8000000100079B80;
  }
  else {
    unint64_t v3 = 0x8000000100079B60;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = sub_1000785B0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_100069CCC(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1852600433;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1852600433;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 1936486513;
      break;
    case 2:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 6910577;
      break;
    case 3:
      uint64_t v5 = 1802728049;
      break;
    case 4:
      uint64_t v5 = 1953722993;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 1936486513) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE300000000000000;
      if (v5 != 6910577) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v2 = 1802728049;
      goto LABEL_12;
    case 4:
      if (v5 != 1953722993) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = sub_1000785B0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100069E30(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 6910577;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 6910577;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 7565937;
      break;
    case 2:
      unint64_t v3 = 0xE100000000000000;
      uint64_t v5 = 116;
      break;
    case 3:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v5 = 20596;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 7565937) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE100000000000000;
      uint64_t v2 = 116;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE200000000000000;
      if (v5 == 20596) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_1000785B0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_100069F60(char a1, char a2)
{
  unint64_t v3 = 0xE200000000000000;
  unint64_t v4 = 21345;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 26994;
      break;
    case 2:
      unint64_t v3 = 0x8000000100079700;
      unint64_t v4 = 0xD000000000000019;
      break;
    case 3:
      unint64_t v4 = 0x6172742D33622D78;
      unint64_t v3 = 0xEC00000064696563;
      break;
    case 4:
      unint64_t v4 = 26739;
      break;
    case 5:
      unint64_t v4 = 29537;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE200000000000000;
  uint64_t v6 = 21345;
  switch(a2)
  {
    case 1:
      if (v4 == 26994) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v5 = 0x8000000100079700;
      if (v4 != 0xD000000000000019) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v5 = 0xEC00000064696563;
      if (v4 != 0x6172742D33622D78) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      uint64_t v6 = 26739;
      goto LABEL_15;
    case 5:
      if (v4 != 29537) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v4 != v6) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = sub_1000785B0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10006A110(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x444970756F7267;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x444970756F7267;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x4C52556572616873;
      break;
    case 2:
      uint64_t v5 = 0x6974617469766E69;
      unint64_t v3 = 0xEF6E656B6F546E6FLL;
      break;
    case 3:
      uint64_t v5 = 0x4865657469766E69;
      unint64_t v3 = 0xED0000656C646E61;
      break;
    case 4:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x656D6954746E6573;
      break;
    case 5:
      uint64_t v5 = 0x6D614E70756F7267;
      unint64_t v3 = 0xE900000000000065;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE800000000000000;
      if (v5 == 0x4C52556572616873) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v6 = 0xEF6E656B6F546E6FLL;
      if (v5 != 0x6974617469766E69) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v6 = 0xED0000656C646E61;
      if (v5 != 0x4865657469766E69) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0xE800000000000000;
      uint64_t v2 = 0x656D6954746E6573;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xE900000000000065;
      if (v5 != 0x6D614E70756F7267) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = sub_1000785B0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10006A354(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1885958769;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1885958769;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x3670697271;
      break;
    case 2:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 7369329;
      break;
    case 3:
      uint64_t v5 = 1802728049;
      break;
    case 4:
      uint64_t v5 = 1769173617;
      break;
    case 5:
      uint64_t v5 = 1953722993;
      break;
    case 6:
      uint64_t v5 = 1919971953;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      if (v5 == 0x3670697271) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xE300000000000000;
      if (v5 != 7369329) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      if (v5 != 1802728049) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      if (v5 != 1769173617) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      uint64_t v2 = 1953722993;
      goto LABEL_18;
    case 6:
      if (v5 != 1919971953) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = sub_1000785B0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10006A518(char a1, char a2)
{
  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 118;
  switch(a1)
  {
    case 1:
      uint64_t v4 = 115;
      break;
    case 2:
      uint64_t v4 = 112;
      break;
    case 3:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 26994;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 118;
  switch(a2)
  {
    case 1:
      if (v4 == 115) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v6 = 112;
      goto LABEL_9;
    case 3:
      unint64_t v5 = 0xE200000000000000;
      if (v4 == 26994) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v4 != v6) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_1000785B0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10006A63C(char a1, char a2)
{
  if (*(void *)&aQpln_1[8 * a1] == *(void *)&aQpln_1[8 * a2]) {
    char v2 = 1;
  }
  else {
    char v2 = sub_1000785B0();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_10006A6A4(char a1, char a2)
{
  if (*(void *)&aCs_0[8 * a1] == *(void *)&aCs_0[8 * a2]) {
    char v2 = 1;
  }
  else {
    char v2 = sub_1000785B0();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_10006A70C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v3 = 0xD000000000000010;
  }
  if (v2) {
    unint64_t v4 = 0x8000000100079900;
  }
  else {
    unint64_t v4 = 0x8000000100079920;
  }
  if (a2) {
    unint64_t v5 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v5 = 0xD000000000000010;
  }
  if (a2) {
    unint64_t v6 = 0x8000000100079920;
  }
  else {
    unint64_t v6 = 0x8000000100079900;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_1000785B0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10006A7BC(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 1702125924;
    }
    else {
      uint64_t v3 = 0x6E6F73616572;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE400000000000000;
    }
    else {
      unint64_t v4 = 0xE600000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 1702125924;
      }
      else {
        uint64_t v6 = 0x6E6F73616572;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE400000000000000;
      }
      else {
        unint64_t v7 = 0xE600000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE500000000000000;
    uint64_t v3 = 0x656C746974;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE500000000000000;
  if (v3 != 0x656C746974)
  {
LABEL_21:
    char v8 = sub_1000785B0();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10006A8B8(char a1, char a2)
{
  if (*(void *)&aV_0[8 * a1] == *(void *)&aV_0[8 * a2]) {
    char v2 = 1;
  }
  else {
    char v2 = sub_1000785B0();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_10006A920(char a1, char a2)
{
  if (*(void *)&aV_1[8 * a1] == *(void *)&aV_1[8 * a2]) {
    char v2 = 1;
  }
  else {
    char v2 = sub_1000785B0();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_10006A988(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x646E616D6D6F63;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x646E616D6D6F63;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x746E65696C63;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1702125924;
      break;
    case 3:
      uint64_t v5 = 0x6E6F6973726576;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x746E65696C63) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1702125924;
      goto LABEL_9;
    case 3:
      if (v5 == 0x6E6F6973726576) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_1000785B0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10006AAF8(char a1, char a2)
{
  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 99;
  switch(a1)
  {
    case 1:
      uint64_t v4 = 115;
      break;
    case 2:
      uint64_t v4 = 101;
      break;
    case 3:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v4 = 4475253;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 99;
  switch(a2)
  {
    case 1:
      if (v4 == 115) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v6 = 101;
      goto LABEL_9;
    case 3:
      unint64_t v5 = 0xE300000000000000;
      if (v4 == 4475253) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v4 != v6) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = sub_1000785B0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int sub_10006AC24()
{
  return sub_100078650();
}

Swift::Int sub_10006AD08()
{
  return sub_100078650();
}

Swift::Int sub_10006AE38()
{
  return sub_100078650();
}

Swift::Int sub_10006AEC4()
{
  return sub_100078650();
}

Swift::Int sub_10006AF44()
{
  return sub_100078650();
}

uint64_t sub_10006AFEC()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10006B07C()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10006B14C()
{
  return sub_100078650();
}

Swift::Int sub_10006B1D4()
{
  return sub_100078650();
}

Swift::Int sub_10006B2BC()
{
  return sub_100078650();
}

Swift::Int sub_10006B3E8()
{
  return sub_100078650();
}

Swift::Int sub_10006B4C8()
{
  return sub_100078650();
}

Swift::Int sub_10006B544()
{
  return sub_100078650();
}

uint64_t sub_10006B5E8(char *a1, char *a2)
{
  return sub_10006A70C(*a1, *a2);
}

Swift::Int sub_10006B5F4()
{
  return sub_10006AE38();
}

uint64_t sub_10006B5FC()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10006B674()
{
  return sub_10006B14C();
}

uint64_t sub_10006B67C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_10006D9B4(a1, (Swift::OpaquePointer)&off_10008B738, a2);
}

void sub_10006B688(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD00000000000001ALL;
  }
  else {
    unint64_t v2 = 0xD000000000000010;
  }
  unint64_t v3 = 0x8000000100079900;
  if (*v1) {
    unint64_t v3 = 0x8000000100079920;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_10006B6D0()
{
  if (*v0) {
    return 0xD00000000000001ALL;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_10006B714@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  return sub_10006DAC8(a1, a2, (Swift::OpaquePointer)&off_10008B738, a3);
}

uint64_t sub_10006B720(uint64_t a1)
{
  unint64_t v2 = sub_10006B948();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006B75C(uint64_t a1)
{
  unint64_t v2 = sub_10006B948();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.encode(to:)(void *a1, uint64_t a2)
{
  uint64_t v5 = sub_100002214(&qword_100090F18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_10006B948();
  sub_1000786A0();
  char v12 = 0;
  sub_100078560();
  if (!v2)
  {
    v10[1] = a2;
    char v11 = 1;
    sub_100002214(&qword_100090F28);
    sub_10007289C(&qword_100090F30);
    sub_100078590();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10006B948()
{
  unint64_t result = qword_100090F20;
  if (!qword_100090F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090F20);
  }
  return result;
}

void *IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.init(from:)(void *a1)
{
  return sub_10006E0E0(a1);
}

unint64_t sub_10006B9B4(char a1)
{
  unint64_t result = 0x6D614E656D6F486BLL;
  switch(a1)
  {
    case 1:
    case 10:
      unint64_t result = 0xD000000000000018;
      break;
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0xD000000000000024;
      break;
    case 4:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 5:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 6:
      unint64_t result = 0x63532E47522E4D48;
      break;
    case 7:
      unint64_t result = 0x495555656D6F486BLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000014;
      break;
    case 9:
      unint64_t result = 0xD000000000000019;
      break;
    case 11:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 12:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 13:
      unint64_t result = 0x4B4449726573556BLL;
      break;
    case 14:
      unint64_t result = 0xD000000000000013;
      break;
    case 15:
      unint64_t result = 0xD000000000000023;
      break;
    case 16:
      unint64_t result = 0xD00000000000002BLL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10006BBD4(char a1)
{
  unint64_t result = 0x6D614E656D6F486BLL;
  switch(a1)
  {
    case 1:
    case 10:
      unint64_t result = 0xD000000000000018;
      break;
    case 2:
      unint64_t result = 0xD000000000000019;
      break;
    case 3:
      unint64_t result = 0xD000000000000024;
      break;
    case 4:
      unint64_t result = 0xD00000000000001FLL;
      break;
    case 5:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 6:
      unint64_t result = 0x63532E47522E4D48;
      break;
    case 7:
      unint64_t result = 0x495555656D6F486BLL;
      break;
    case 8:
      unint64_t result = 0xD000000000000014;
      break;
    case 9:
      unint64_t result = 0xD000000000000019;
      break;
    case 11:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 12:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 13:
      unint64_t result = 0x4B4449726573556BLL;
      break;
    case 14:
      unint64_t result = 0xD000000000000013;
      break;
    case 15:
      unint64_t result = 0xD000000000000023;
      break;
    case 16:
      unint64_t result = 0xD00000000000002BLL;
      break;
    default:
      return result;
  }
  return result;
}

void *sub_10006BDF4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_10006E0E0(a1);
  if (!v2)
  {
    *a2 = v5;
    a2[1] = result;
  }
  return result;
}

uint64_t sub_10006BE24(void *a1)
{
  return IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.encode(to:)(a1, *(void *)(v1 + 8));
}

uint64_t sub_10006BE44(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_10006B9B4(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_10006B9B4(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1000785B0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10006BED0()
{
  char v1 = *v0;
  sub_100078630();
  sub_10006B9B4(v1);
  sub_1000781D0();
  swift_bridgeObjectRelease();
  return sub_100078650();
}

uint64_t sub_10006BF34()
{
  sub_10006B9B4(*v0);
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10006BF88()
{
  char v1 = *v0;
  sub_100078630();
  sub_10006B9B4(v1);
  sub_1000781D0();
  swift_bridgeObjectRelease();
  return sub_100078650();
}

uint64_t sub_10006BFE8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10006E5EC();
  *a1 = result;
  return result;
}

unint64_t sub_10006C018@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10006B9B4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10006C044()
{
  return sub_10006BBD4(*v0);
}

uint64_t sub_10006C04C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_10006E5EC();
  *a1 = result;
  return result;
}

void sub_10006C074(unsigned char *a1@<X8>)
{
  *a1 = 17;
}

uint64_t sub_10006C080(uint64_t a1)
{
  unint64_t v2 = sub_10006E2D4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006C0BC(uint64_t a1)
{
  unint64_t v2 = sub_10006E2D4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSHomeKitInvitationSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002214(&qword_100090F38);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_10006E2D4();
  sub_1000786A0();
  LOBYTE(v12) = 0;
  sub_1000784C0();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
    LOBYTE(v12) = 1;
    sub_100077B90();
    sub_10006E3F0(&qword_100090240, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_100078510();
    long long v12 = *(_OWORD *)(v3 + v9[6]);
    char v13 = 2;
    sub_10006E348();
    sub_100078510();
    LOBYTE(v12) = 3;
    sub_1000784D0();
    LOBYTE(v12) = 4;
    sub_1000784F0();
    LOBYTE(v12) = 5;
    sub_1000784D0();
    long long v12 = *(_OWORD *)(v3 + v9[10]);
    char v13 = 6;
    sub_10006E39C();
    sub_100078510();
    LOBYTE(v12) = 7;
    sub_100077BA0();
    sub_10006E3F0(&qword_100090F58, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_100078510();
    long long v12 = *(_OWORD *)(v3 + v9[12]);
    char v13 = 8;
    v11[1] = sub_100003DA8();
    sub_100078510();
    LOBYTE(v12) = 9;
    sub_1000784C0();
    LOBYTE(v12) = 10;
    sub_100078510();
    LOBYTE(v12) = 11;
    sub_1000784C0();
    long long v12 = *(_OWORD *)(v3 + v9[16]);
    char v13 = 12;
    sub_100078510();
    LOBYTE(v12) = 13;
    sub_1000784C0();
    LOBYTE(v12) = 14;
    sub_1000784F0();
    LOBYTE(v12) = 15;
    sub_1000784F0();
    long long v12 = *(_OWORD *)(v3 + v9[20]);
    char v13 = 16;
    sub_100078510();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t IDSHomeKitInvitationSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v62 = a2;
  uint64_t v4 = sub_100002214(&qword_1000906F8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v61 - v8;
  uint64_t v10 = sub_100002214(&qword_100090248);
  __chkstk_darwin(v10 - 8);
  long long v12 = (char *)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = sub_100002214(&qword_100090F60);
  uint64_t v13 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v15 = (char *)v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = (int *)type metadata accessor for IDSHomeKitInvitationSchema(0);
  __chkstk_darwin(v69);
  uint64_t v68 = (void *)((char *)v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = a1[3];
  int v65 = a1;
  sub_1000029D8(a1, v17);
  sub_10006E2D4();
  uint64_t v63 = v15;
  sub_100078690();
  if (v2)
  {
    uint64_t v67 = v2;
    int v19 = 0;
    unsigned int v20 = 0;
  }
  else
  {
    uint64_t v66 = (uint64_t)v7;
    uint64_t v67 = v9;
    LOBYTE(v70) = 0;
    uint64_t v18 = sub_1000783C0();
    uint64_t v29 = v68;
    *uint64_t v68 = v18;
    v29[1] = v30;
    sub_100077B90();
    LOBYTE(v70) = 1;
    sub_10006E3F0(&qword_100090258, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_100078410();
    uint64_t v31 = v69;
    sub_100044DC4((uint64_t)v12, (uint64_t)v29 + v69[5], &qword_100090248);
    char v71 = 2;
    sub_10006E47C();
    sub_100078410();
    unint64_t v32 = v29;
    *(_OWORD *)((char *)v29 + v31[6]) = v70;
    LOBYTE(v70) = 3;
    *((unsigned char *)v29 + v31[7]) = sub_1000783D0();
    LOBYTE(v70) = 4;
    uint64_t v33 = sub_1000783F0();
    uint64_t v34 = (char *)v29 + v31[8];
    *(void *)uint64_t v34 = v33;
    v34[8] = v35 & 1;
    LOBYTE(v70) = 5;
    *((unsigned char *)v29 + v31[9]) = sub_1000783D0();
    char v71 = 6;
    sub_10006E4D0();
    sub_100078410();
    *(_OWORD *)((char *)v29 + v31[10]) = v70;
    sub_100077BA0();
    LOBYTE(v70) = 7;
    uint64_t v36 = sub_10006E3F0(&qword_100090F78, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v37 = (uint64_t)v67;
    v61[1] = v36;
    sub_100078410();
    sub_100044DC4(v37, (uint64_t)v32 + v31[11], &qword_1000906F8);
    char v71 = 8;
    sub_100004864();
    sub_100078410();
    *(_OWORD *)((char *)v32 + v31[12]) = v70;
    LOBYTE(v70) = 9;
    uint64_t v38 = sub_1000783C0();
    uint64_t v67 = 0;
    unint64_t v40 = (uint64_t *)((char *)v68 + v69[13]);
    *unint64_t v40 = v38;
    v40[1] = v39;
    LOBYTE(v70) = 10;
    uint64_t v41 = v67;
    sub_100078410();
    uint64_t v67 = v41;
    if (v41)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v63, v64);
      int v19 = 0;
      unsigned int v20 = 967;
    }
    else
    {
      sub_100044DC4(v66, (uint64_t)v68 + v69[14], &qword_1000906F8);
      LOBYTE(v70) = 11;
      uint64_t v42 = v67;
      uint64_t v43 = sub_1000783C0();
      uint64_t v67 = v42;
      if (v42)
      {
        (*(void (**)(char *, uint64_t))(v13 + 8))(v63, v64);
        int v19 = 0;
        unsigned int v20 = 1991;
      }
      else
      {
        uint64_t v45 = (uint64_t *)((char *)v68 + v69[15]);
        *uint64_t v45 = v43;
        v45[1] = v44;
        char v71 = 12;
        uint64_t v46 = v67;
        sub_100078410();
        uint64_t v67 = v46;
        if (!v46)
        {
          *(_OWORD *)((char *)v68 + v69[16]) = v70;
          LOBYTE(v70) = 13;
          unint64_t v47 = v67;
          uint64_t v48 = sub_1000783C0();
          LODWORD(v66) = v47 == 0;
          uint64_t v67 = v47;
          if (!v47)
          {
            uint64_t v50 = (uint64_t *)((char *)v68 + v69[17]);
            *uint64_t v50 = v48;
            v50[1] = v49;
            LOBYTE(v70) = 14;
            int v51 = v67;
            uint64_t v52 = sub_1000783F0();
            uint64_t v67 = v51;
            if (!v51)
            {
              uint64_t v54 = (char *)v68 + v69[18];
              *(void *)uint64_t v54 = v52;
              v54[8] = v53 & 1;
              LOBYTE(v70) = 15;
              uint64_t v55 = v67;
              uint64_t v56 = sub_1000783F0();
              uint64_t v67 = v55;
              if (!v55)
              {
                uint64_t v58 = (char *)v68 + v69[19];
                *(void *)uint64_t v58 = v56;
                unsigned char v58[8] = v57 & 1;
                char v71 = 16;
                uint64_t v59 = v67;
                sub_100078410();
                uint64_t v67 = v59;
                if (!v59)
                {
                  (*(void (**)(char *, uint64_t))(v13 + 8))(v63, v64);
                  uint64_t v60 = (uint64_t)v68;
                  *(_OWORD *)((char *)v68 + v69[20]) = v70;
                  sub_10006EBC8(v60, v62, type metadata accessor for IDSHomeKitInvitationSchema);
                  sub_100002E34((uint64_t)v65);
                  return sub_10006EC30(v60, type metadata accessor for IDSHomeKitInvitationSchema);
                }
              }
            }
          }
          (*(void (**)(char *, uint64_t))(v13 + 8))(v63, v64);
          sub_100002E34((uint64_t)v65);
          uint64_t v21 = v68;
          swift_bridgeObjectRelease();
          uint64_t v22 = v69;
          sub_10000A43C((uint64_t)v21 + v69[5], &qword_100090248);
          swift_bridgeObjectRelease();
          int v28 = 1;
          int v19 = 1;
          int v27 = 1;
          int v26 = 1;
          int v25 = 1;
          LOBYTE(v24) = 1;
LABEL_9:
          uint64_t result = sub_10006E438(*(uint64_t *)((char *)v21 + v22[10]));
          if (v24) {
            goto LABEL_10;
          }
          goto LABEL_21;
        }
        (*(void (**)(char *, uint64_t))(v13 + 8))(v63, v64);
        unsigned int v20 = 4039;
        int v19 = 1;
      }
    }
  }
  uint64_t v21 = v68;
  uint64_t v22 = v69;
  uint64_t result = sub_100002E34((uint64_t)v65);
  int v24 = (v20 >> 7) & 1;
  int v25 = (v20 >> 8) & 1;
  int v26 = (v20 >> 9) & 1;
  int v27 = (v20 >> 10) & 1;
  if (v20)
  {
    uint64_t result = swift_bridgeObjectRelease();
    if ((v20 & 2) == 0)
    {
LABEL_6:
      if ((v20 & 4) == 0) {
        goto LABEL_7;
      }
LABEL_19:
      uint64_t result = swift_bridgeObjectRelease();
      if ((v20 & 0x40) != 0) {
        goto LABEL_8;
      }
      goto LABEL_20;
    }
  }
  else if ((v20 & 2) == 0)
  {
    goto LABEL_6;
  }
  uint64_t result = sub_10000A43C((uint64_t)v21 + v22[5], &qword_100090248);
  if ((v20 & 4) != 0) {
    goto LABEL_19;
  }
LABEL_7:
  if ((v20 & 0x40) != 0)
  {
LABEL_8:
    LODWORD(v66) = 0;
    int v28 = 0;
    goto LABEL_9;
  }
LABEL_20:
  int v28 = 0;
  LODWORD(v66) = 0;
  if ((v20 & 0x80) != 0)
  {
LABEL_10:
    uint64_t result = sub_10000A43C((uint64_t)v21 + v22[11], &qword_1000906F8);
    if ((v25 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  if (!v25)
  {
LABEL_11:
    if (v26) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  uint64_t result = sub_1000048CC(*(uint64_t *)((char *)v21 + v22[12]), *(uint64_t *)((char *)v21 + v22[12] + 8));
  if (v26)
  {
LABEL_12:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v27 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_24;
  }
LABEL_23:
  if (!v27)
  {
LABEL_13:
    if (v19) {
      goto LABEL_14;
    }
    goto LABEL_25;
  }
LABEL_24:
  uint64_t result = sub_10000A43C((uint64_t)v21 + v22[14], &qword_1000906F8);
  if (v19)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v28 & 1) == 0) {
      goto LABEL_15;
    }
LABEL_26:
    uint64_t result = sub_1000048CC(*(uint64_t *)((char *)v21 + v22[16]), *(uint64_t *)((char *)v21 + v22[16] + 8));
    if ((v66 & 1) == 0) {
      return result;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_25:
  if (v28) {
    goto LABEL_26;
  }
LABEL_15:
  if (!v66) {
    return result;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10006D044@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSHomeKitInvitationSchema.init(from:)(a1, a2);
}

uint64_t sub_10006D05C(void *a1)
{
  return IDSHomeKitInvitationSchema.encode(to:)(a1);
}

uint64_t sub_10006D074(char *a1, char *a2)
{
  return sub_100069C2C(*a1, *a2);
}

Swift::Int sub_10006D080()
{
  return sub_10006AEC4();
}

uint64_t sub_10006D088()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10006D0F4()
{
  return sub_10006B4C8();
}

uint64_t sub_10006D0FC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_10006D9B4(a1, (Swift::OpaquePointer)&off_10008B940, a2);
}

void sub_10006D108(void *a1@<X8>)
{
  unint64_t v2 = 0x8000000100079B60;
  if (*v1) {
    unint64_t v2 = 0x8000000100079B80;
  }
  *a1 = 0xD000000000000016;
  a1[1] = v2;
}

unint64_t sub_10006D144()
{
  return 0xD000000000000016;
}

uint64_t sub_10006D174@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  return sub_10006DAC8(a1, a2, (Swift::OpaquePointer)&off_10008B940, a3);
}

uint64_t sub_10006D180(uint64_t a1)
{
  unint64_t v2 = sub_10006E524();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006D1BC(uint64_t a1)
{
  unint64_t v2 = sub_10006E524();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSHomeKitInviteeScheduleSchema.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_100002214(&qword_100090F80);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_10006E524();
  sub_1000786A0();
  uint64_t v14 = a2;
  char v13 = 0;
  sub_100002214(&qword_100090F90);
  sub_100072744(&qword_100090F98, (void (*)(void))sub_10006E578);
  sub_100078510();
  if (!v3)
  {
    uint64_t v14 = a3;
    char v13 = 1;
    sub_100002214(&qword_100090FA8);
    sub_100072808(&qword_100090FB0, &qword_100090FB8);
    sub_100078510();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t IDSHomeKitInviteeScheduleSchema.init(from:)(void *a1)
{
  return sub_10006E640(a1);
}

unint64_t sub_10006D424(char a1)
{
  if (!a1) {
    return 0xD000000000000027;
  }
  if (a1 == 1) {
    return 0xD000000000000025;
  }
  return 0xD00000000000002BLL;
}

uint64_t sub_10006D480@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10006E640(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10006D4AC(void *a1)
{
  return IDSHomeKitInviteeScheduleSchema.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_10006D4C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100069A8C(*a1, *a2);
}

Swift::Int sub_10006D4D4()
{
  return sub_10006AF44();
}

uint64_t sub_10006D4DC()
{
  return sub_10006AFEC();
}

Swift::Int sub_10006D4E4()
{
  return sub_10006B544();
}

uint64_t sub_10006D4EC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_10006E924(*(void *)a1, *(void **)(a1 + 8));
  *a2 = result;
  return result;
}

unint64_t sub_10006D51C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10006D424(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10006D548()
{
  return sub_10006D424(*v0);
}

uint64_t sub_10006D550@<X0>(uint64_t a1@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_10006E924(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10006D578(uint64_t a1)
{
  unint64_t v2 = sub_10006E8D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006D5B4(uint64_t a1)
{
  unint64_t v2 = sub_10006E8D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSHomeKitInviteeScheduleWeekDayRuleSchema.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100002214(&qword_100090FC0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000029D8(a1, a1[3]);
  sub_10006E8D0();
  sub_1000786A0();
  v8[15] = 0;
  sub_1000784F0();
  if (!v1)
  {
    v8[14] = 1;
    sub_1000784F0();
    v8[13] = 2;
    sub_1000784F0();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

double IDSHomeKitInviteeScheduleWeekDayRuleSchema.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10006E970(a1, (uint64_t)&v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_10006D7C8(void *a1)
{
  return IDSHomeKitInviteeScheduleWeekDayRuleSchema.encode(to:)(a1);
}

uint64_t sub_10006D7E0(char *a1, char *a2)
{
  return sub_1000699CC(*a1, *a2);
}

Swift::Int sub_10006D7EC()
{
  return sub_100078650();
}

uint64_t sub_10006D888()
{
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10006D910()
{
  return sub_100078650();
}

uint64_t sub_10006D9A8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  return sub_10006D9B4(a1, (Swift::OpaquePointer)&off_10008B9F8, a2);
}

uint64_t sub_10006D9B4@<X0>(uint64_t *a1@<X0>, Swift::OpaquePointer a2@<X3>, char *a3@<X8>)
{
  v9._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v9._object = v4;
  Swift::Int v6 = sub_100078390(a2, v9);
  uint64_t result = swift_bridgeObjectRelease();
  if (v6 == 1) {
    char v8 = 1;
  }
  else {
    char v8 = 2;
  }
  if (!v6) {
    char v8 = 0;
  }
  *a3 = v8;
  return result;
}

void sub_10006DA10(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x7472617453444D48;
  if (*v1) {
    uint64_t v2 = 0x6144646E45444D48;
  }
  unint64_t v3 = 0xEF79654B65746144;
  if (*v1) {
    unint64_t v3 = 0xED000079654B6574;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10006DA68()
{
  if (*v0) {
    return 0x6144646E45444D48;
  }
  else {
    return 0x7472617453444D48;
  }
}

uint64_t sub_10006DABC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char *a3@<X8>)
{
  return sub_10006DAC8(a1, a2, (Swift::OpaquePointer)&off_10008B9F8, a3);
}

uint64_t sub_10006DAC8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, Swift::OpaquePointer a3@<X4>, char *a4@<X8>)
{
  v10._countAndFlagsBits = a1;
  v10._object = a2;
  Swift::Int v7 = sub_100078390(a3, v10);
  uint64_t result = swift_bridgeObjectRelease();
  if (v7 == 1) {
    char v9 = 1;
  }
  else {
    char v9 = 2;
  }
  if (!v7) {
    char v9 = 0;
  }
  *a4 = v9;
  return result;
}

uint64_t sub_10006DB28(uint64_t a1)
{
  unint64_t v2 = sub_10006EB74();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006DB64(uint64_t a1)
{
  unint64_t v2 = sub_10006EB74();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSHomeKitInviteeScheduleYearDayRuleSchema.encode(to:)(void *a1)
{
  uint64_t v3 = sub_100002214(&qword_100090FD0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::Int v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000029D8(a1, a1[3]);
  sub_10006EB74();
  sub_1000786A0();
  v8[15] = 0;
  sub_100077B90();
  sub_10006E3F0(&qword_100090240, (void (*)(uint64_t))&type metadata accessor for Date);
  sub_100078510();
  if (!v1)
  {
    type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema(0);
    v8[14] = 1;
    sub_100078510();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t IDSHomeKitInviteeScheduleYearDayRuleSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v4 = sub_100002214(&qword_100090248);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  Swift::Int v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  int v25 = (char *)&v20 - v8;
  uint64_t v9 = sub_100002214(&qword_100090FE0);
  uint64_t v26 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema(0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_10006EB74();
  sub_100078690();
  if (v2) {
    return sub_100002E34((uint64_t)a1);
  }
  uint64_t v21 = v12;
  uint64_t v22 = v14;
  uint64_t v23 = v7;
  sub_100077B90();
  char v29 = 0;
  sub_10006E3F0(&qword_100090258, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v15 = (uint64_t)v25;
  uint64_t v16 = v27;
  sub_100078410();
  uint64_t v17 = (uint64_t)v22;
  sub_100044DC4(v15, (uint64_t)v22, &qword_100090248);
  char v28 = 1;
  uint64_t v18 = (uint64_t)v23;
  sub_100078410();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v16);
  sub_100044DC4(v18, v17 + *(int *)(v21 + 20), &qword_100090248);
  sub_10006EBC8(v17, v24, type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema);
  sub_100002E34((uint64_t)a1);
  return sub_10006EC30(v17, type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema);
}

uint64_t sub_10006E0B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSHomeKitInviteeScheduleYearDayRuleSchema.init(from:)(a1, a2);
}

uint64_t sub_10006E0C8(void *a1)
{
  return IDSHomeKitInviteeScheduleYearDayRuleSchema.encode(to:)(a1);
}

void *sub_10006E0E0(void *a1)
{
  uint64_t v3 = sub_100002214(&qword_1000911F8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::Int v7 = sub_1000029D8(a1, a1[3]);
  sub_10006B948();
  sub_100078690();
  if (v1)
  {
    sub_100002E34((uint64_t)a1);
  }
  else
  {
    char v11 = 0;
    sub_100078460();
    sub_100002214(&qword_100090F28);
    char v10 = 1;
    sub_10007289C(&qword_100091200);
    sub_100078490();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    Swift::Int v7 = (void *)v9[1];
    sub_100002E34((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_10006E2D4()
{
  unint64_t result = qword_100090F40;
  if (!qword_100090F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090F40);
  }
  return result;
}

uint64_t type metadata accessor for IDSHomeKitInvitationSchema(uint64_t a1)
{
  return sub_100036324(a1, (uint64_t *)&unk_100091040);
}

unint64_t sub_10006E348()
{
  unint64_t result = qword_100090F48;
  if (!qword_100090F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090F48);
  }
  return result;
}

unint64_t sub_10006E39C()
{
  unint64_t result = qword_100090F50;
  if (!qword_100090F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090F50);
  }
  return result;
}

uint64_t sub_10006E3F0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10006E438(uint64_t result)
{
  if (result != 1)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_10006E47C()
{
  unint64_t result = qword_100090F68;
  if (!qword_100090F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090F68);
  }
  return result;
}

unint64_t sub_10006E4D0()
{
  unint64_t result = qword_100090F70;
  if (!qword_100090F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090F70);
  }
  return result;
}

unint64_t sub_10006E524()
{
  unint64_t result = qword_100090F88;
  if (!qword_100090F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090F88);
  }
  return result;
}

unint64_t sub_10006E578()
{
  unint64_t result = qword_100090FA0;
  if (!qword_100090FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090FA0);
  }
  return result;
}

uint64_t type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema(uint64_t a1)
{
  return sub_100036324(a1, qword_100091118);
}

uint64_t sub_10006E5EC()
{
  unint64_t v0 = sub_1000785C0();
  swift_bridgeObjectRelease();
  if (v0 >= 0x11) {
    return 17;
  }
  else {
    return v0;
  }
}

uint64_t sub_10006E640(void *a1)
{
  uint64_t v3 = sub_100002214(&qword_1000911D0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_1000029D8(a1, v7);
  sub_10006E524();
  sub_100078690();
  if (v1)
  {
    sub_100002E34((uint64_t)a1);
  }
  else
  {
    sub_100002214(&qword_100090F90);
    HIBYTE(v9) = 0;
    sub_100072744(&qword_1000911D8, (void (*)(void))sub_1000727B4);
    sub_100078410();
    uint64_t v7 = v10;
    sub_100002214(&qword_100090FA8);
    HIBYTE(v9) = 1;
    sub_100072808(&qword_1000911E8, &qword_1000911F0);
    swift_bridgeObjectRetain();
    sub_100078410();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain();
    sub_100002E34((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_10006E8D0()
{
  unint64_t result = qword_100090FC8;
  if (!qword_100090FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090FC8);
  }
  return result;
}

uint64_t sub_10006E924(uint64_t a1, void *a2)
{
  v6._countAndFlagsBits = a1;
  v3._rawValue = &off_10008B990;
  v6._object = a2;
  unint64_t v4 = sub_100078390(v3, v6);
  swift_bridgeObjectRelease();
  if (v4 >= 3) {
    return 3;
  }
  else {
    return v4;
  }
}

uint64_t sub_10006E970@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100002214(&qword_1000911C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_10006E8D0();
  sub_100078690();
  if (v2) {
    return sub_100002E34((uint64_t)a1);
  }
  char v24 = 0;
  uint64_t v9 = sub_1000783F0();
  char v11 = v10;
  char v23 = 1;
  uint64_t v12 = sub_1000783F0();
  int v21 = v13;
  uint64_t v20 = v12;
  char v22 = 2;
  uint64_t v14 = sub_1000783F0();
  uint64_t v15 = v8;
  char v17 = v16;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  uint64_t result = sub_100002E34((uint64_t)a1);
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v11 & 1;
  *(void *)(a2 + 16) = v20;
  *(unsigned char *)(a2 + 24) = v21 & 1;
  *(void *)(a2 + 32) = v14;
  *(unsigned char *)(a2 + 40) = v17 & 1;
  return result;
}

unint64_t sub_10006EB74()
{
  unint64_t result = qword_100090FD8;
  if (!qword_100090FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100090FD8);
  }
  return result;
}

uint64_t sub_10006EBC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10006EC30(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10006EC90()
{
  return sub_10006E3F0(&qword_100090650, (void (*)(uint64_t))type metadata accessor for IDSHomeKitInvitationSchema);
}

uint64_t sub_10006ECD8()
{
  return sub_10006E3F0(&qword_1000905F0, (void (*)(uint64_t))type metadata accessor for IDSHomeKitInvitationSchema);
}

void *initializeBufferWithCopyOfBuffer for IDSHomeKitInvitationSchema(void *a1, void *a2, int *a3)
{
  unint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    char v10 = (char *)a2 + v8;
    uint64_t v11 = sub_100077B90();
    uint64_t v12 = *(void *)(v11 - 8);
    int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_100002214(&qword_100090248);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    uint64_t v18 = (void *)((char *)v4 + v16);
    uint64_t v19 = (void *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    *((unsigned char *)v4 + v17) = *((unsigned char *)a2 + v17);
    uint64_t v21 = a3[8];
    uint64_t v22 = a3[9];
    char v23 = (char *)v4 + v21;
    char v24 = (char *)a2 + v21;
    *(void *)char v23 = *(void *)v24;
    v23[8] = v24[8];
    *((unsigned char *)v4 + v22) = *((unsigned char *)a2 + v22);
    uint64_t v25 = a3[10];
    uint64_t v26 = (char *)v4 + v25;
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = *(void *)((char *)a2 + v25);
    swift_bridgeObjectRetain();
    if (v28 == 1)
    {
      *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    }
    else
    {
      uint64_t v29 = *((void *)v27 + 1);
      *(void *)uint64_t v26 = v28;
      *((void *)v26 + 1) = v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    uint64_t v30 = a3[11];
    uint64_t v31 = (char *)v4 + v30;
    unint64_t v32 = (char *)a2 + v30;
    uint64_t v33 = sub_100077BA0();
    uint64_t v34 = *(void *)(v33 - 8);
    char v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
    if (v35(v32, 1, v33))
    {
      uint64_t v36 = sub_100002214(&qword_1000906F8);
      memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    uint64_t v37 = a3[12];
    uint64_t v38 = (char *)v4 + v37;
    uint64_t v39 = (char *)a2 + v37;
    unint64_t v40 = *((void *)v39 + 1);
    if (v40 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
    }
    else
    {
      uint64_t v41 = *(void *)v39;
      sub_100004214(*(void *)v39, *((void *)v39 + 1));
      *(void *)uint64_t v38 = v41;
      *((void *)v38 + 1) = v40;
    }
    uint64_t v42 = a3[13];
    uint64_t v43 = a3[14];
    uint64_t v44 = (void *)((char *)v4 + v42);
    uint64_t v45 = (void *)((char *)a2 + v42);
    uint64_t v46 = v45[1];
    *uint64_t v44 = *v45;
    v44[1] = v46;
    unint64_t v47 = (char *)v4 + v43;
    uint64_t v48 = (char *)a2 + v43;
    swift_bridgeObjectRetain();
    if (v35(v48, 1, v33))
    {
      uint64_t v49 = sub_100002214(&qword_1000906F8);
      memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v47, v48, v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v47, 0, 1, v33);
    }
    uint64_t v50 = a3[15];
    uint64_t v51 = a3[16];
    uint64_t v52 = (void *)((char *)v4 + v50);
    char v53 = (void *)((char *)a2 + v50);
    uint64_t v54 = v53[1];
    *uint64_t v52 = *v53;
    v52[1] = v54;
    uint64_t v55 = (char *)v4 + v51;
    uint64_t v56 = (_OWORD *)((char *)a2 + v51);
    unint64_t v57 = *(void *)((char *)a2 + v51 + 8);
    swift_bridgeObjectRetain();
    if (v57 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v55 = *v56;
    }
    else
    {
      uint64_t v58 = *(void *)v56;
      sub_100004214(v58, v57);
      *(void *)uint64_t v55 = v58;
      *((void *)v55 + 1) = v57;
    }
    uint64_t v59 = a3[17];
    uint64_t v60 = a3[18];
    uint64_t v61 = (void *)((char *)v4 + v59);
    uint64_t v62 = (void *)((char *)a2 + v59);
    uint64_t v63 = v62[1];
    *uint64_t v61 = *v62;
    v61[1] = v63;
    uint64_t v64 = (char *)v4 + v60;
    int v65 = (char *)a2 + v60;
    v64[8] = v65[8];
    *(void *)uint64_t v64 = *(void *)v65;
    uint64_t v66 = a3[19];
    uint64_t v67 = a3[20];
    uint64_t v68 = (char *)v4 + v66;
    uint64_t v69 = (char *)a2 + v66;
    *(void *)uint64_t v68 = *(void *)v69;
    v68[8] = v69[8];
    long long v70 = (char *)v4 + v67;
    char v71 = (_OWORD *)((char *)a2 + v67);
    unint64_t v72 = *(void *)((char *)a2 + v67 + 8);
    swift_bridgeObjectRetain();
    if (v72 >> 60 == 15)
    {
      *(_OWORD *)long long v70 = *v71;
    }
    else
    {
      uint64_t v73 = *(void *)v71;
      sub_100004214(v73, v72);
      *(void *)long long v70 = v73;
      *((void *)v70 + 1) = v72;
    }
  }
  return v4;
}

uint64_t destroy for IDSHomeKitInvitationSchema(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = sub_100077B90();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + a2[10]) != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = a1 + a2[11];
  uint64_t v8 = sub_100077BA0();
  uint64_t v9 = *(void *)(v8 - 8);
  char v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  }
  uint64_t v11 = (uint64_t *)(a1 + a2[12]);
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15) {
    sub_1000042CC(*v11, v12);
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = a1 + a2[14];
  if (!v10(v13, 1, v8)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v13, v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = (uint64_t *)(a1 + a2[16]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_1000042CC(*v14, v15);
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v17 = (uint64_t *)(a1 + a2[20]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15)
  {
    uint64_t v19 = *v17;
    return sub_1000042CC(v19, v18);
  }
  return result;
}

void *initializeWithCopy for IDSHomeKitInvitationSchema(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_100077B90();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = sub_100002214(&qword_100090248);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = a3[7];
  uint64_t v16 = (void *)((char *)a1 + v14);
  uint64_t v17 = (void *)((char *)a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  uint64_t v19 = a3[8];
  uint64_t v20 = a3[9];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = (char *)a2 + v19;
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  *((unsigned char *)a1 + v20) = *((unsigned char *)a2 + v20);
  uint64_t v23 = a3[10];
  char v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = *(void *)((char *)a2 + v23);
  swift_bridgeObjectRetain();
  if (v26 == 1)
  {
    *(_OWORD *)char v24 = *(_OWORD *)v25;
  }
  else
  {
    uint64_t v27 = *((void *)v25 + 1);
    *(void *)char v24 = v26;
    *((void *)v24 + 1) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v28 = a3[11];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = sub_100077BA0();
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  if (v33(v30, 1, v31))
  {
    uint64_t v34 = sub_100002214(&qword_1000906F8);
    memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  uint64_t v35 = a3[12];
  uint64_t v36 = (char *)a1 + v35;
  uint64_t v37 = (char *)a2 + v35;
  unint64_t v38 = *((void *)v37 + 1);
  if (v38 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
  }
  else
  {
    uint64_t v39 = *(void *)v37;
    sub_100004214(*(void *)v37, *((void *)v37 + 1));
    *(void *)uint64_t v36 = v39;
    *((void *)v36 + 1) = v38;
  }
  uint64_t v40 = a3[13];
  uint64_t v41 = a3[14];
  uint64_t v42 = (void *)((char *)a1 + v40);
  uint64_t v43 = (void *)((char *)a2 + v40);
  uint64_t v44 = v43[1];
  *uint64_t v42 = *v43;
  v42[1] = v44;
  uint64_t v45 = (char *)a1 + v41;
  uint64_t v46 = (char *)a2 + v41;
  swift_bridgeObjectRetain();
  if (v33(v46, 1, v31))
  {
    uint64_t v47 = sub_100002214(&qword_1000906F8);
    memcpy(v45, v46, *(void *)(*(void *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v45, v46, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v45, 0, 1, v31);
  }
  uint64_t v48 = a3[15];
  uint64_t v49 = a3[16];
  uint64_t v50 = (void *)((char *)a1 + v48);
  uint64_t v51 = (void *)((char *)a2 + v48);
  uint64_t v52 = v51[1];
  *uint64_t v50 = *v51;
  v50[1] = v52;
  char v53 = (char *)a1 + v49;
  uint64_t v54 = (_OWORD *)((char *)a2 + v49);
  unint64_t v55 = *(void *)((char *)a2 + v49 + 8);
  swift_bridgeObjectRetain();
  if (v55 >> 60 == 15)
  {
    *(_OWORD *)char v53 = *v54;
  }
  else
  {
    uint64_t v56 = *(void *)v54;
    sub_100004214(v56, v55);
    *(void *)char v53 = v56;
    *((void *)v53 + 1) = v55;
  }
  uint64_t v57 = a3[17];
  uint64_t v58 = a3[18];
  uint64_t v59 = (void *)((char *)a1 + v57);
  uint64_t v60 = (void *)((char *)a2 + v57);
  uint64_t v61 = v60[1];
  *uint64_t v59 = *v60;
  v59[1] = v61;
  uint64_t v62 = (char *)a1 + v58;
  uint64_t v63 = (char *)a2 + v58;
  v62[8] = v63[8];
  *(void *)uint64_t v62 = *(void *)v63;
  uint64_t v64 = a3[19];
  uint64_t v65 = a3[20];
  uint64_t v66 = (char *)a1 + v64;
  uint64_t v67 = (char *)a2 + v64;
  *(void *)uint64_t v66 = *(void *)v67;
  v66[8] = v67[8];
  uint64_t v68 = (char *)a1 + v65;
  uint64_t v69 = (_OWORD *)((char *)a2 + v65);
  unint64_t v70 = *(void *)((char *)a2 + v65 + 8);
  swift_bridgeObjectRetain();
  if (v70 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v68 = *v69;
  }
  else
  {
    uint64_t v71 = *(void *)v69;
    sub_100004214(v71, v70);
    *(void *)uint64_t v68 = v71;
    *((void *)v68 + 1) = v70;
  }
  return a1;
}

void *assignWithCopy for IDSHomeKitInvitationSchema(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100077B90();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100002214(&qword_100090248);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v18 = a3[8];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  char v21 = v20[8];
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v21;
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  uint64_t v22 = a3[10];
  uint64_t v23 = (void *)((char *)a1 + v22);
  char v24 = (char *)a2 + v22;
  uint64_t v25 = *(void *)((char *)a2 + v22);
  if (*(void *)((char *)a1 + v22) == 1)
  {
    if (v25 != 1)
    {
      *uint64_t v23 = v25;
      v23[1] = *((void *)v24 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v25 == 1)
  {
    sub_10006FFA8((uint64_t)a1 + v22);
LABEL_12:
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    goto LABEL_14;
  }
  *uint64_t v23 = v25;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23[1] = *((void *)v24 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_14:
  uint64_t v26 = a3[11];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = sub_100077BA0();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  int v32 = v31(v27, 1, v29);
  int v33 = v31(v28, 1, v29);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v27, v28, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v33)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v27, v29);
LABEL_19:
    uint64_t v34 = sub_100002214(&qword_1000906F8);
    memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v27, v28, v29);
LABEL_20:
  uint64_t v35 = a3[12];
  uint64_t v36 = (void *)((char *)a1 + v35);
  uint64_t v37 = (void *)((char *)a2 + v35);
  unint64_t v38 = *(void *)((char *)a2 + v35 + 8);
  if (*(void *)((char *)a1 + v35 + 8) >> 60 == 15)
  {
    if (v38 >> 60 != 15)
    {
      uint64_t v39 = *v37;
      sub_100004214(v39, v38);
      *uint64_t v36 = v39;
      v36[1] = v38;
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  if (v38 >> 60 == 15)
  {
    sub_1000044A0((uint64_t)v36);
LABEL_25:
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    goto LABEL_27;
  }
  uint64_t v40 = *v37;
  sub_100004214(v40, v38);
  uint64_t v41 = *v36;
  unint64_t v42 = v36[1];
  *uint64_t v36 = v40;
  v36[1] = v38;
  sub_1000042CC(v41, v42);
LABEL_27:
  uint64_t v43 = a3[13];
  uint64_t v44 = (void *)((char *)a1 + v43);
  uint64_t v45 = (void *)((char *)a2 + v43);
  *uint64_t v44 = *v45;
  v44[1] = v45[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[14];
  uint64_t v47 = (char *)a1 + v46;
  uint64_t v48 = (char *)a2 + v46;
  int v49 = v31((char *)a1 + v46, 1, v29);
  int v50 = v31(v48, 1, v29);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v47, v48, v29);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v47, 0, 1, v29);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v47, v29);
LABEL_32:
    uint64_t v51 = sub_100002214(&qword_1000906F8);
    memcpy(v47, v48, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_33;
  }
  (*(void (**)(char *, char *, uint64_t))(v30 + 24))(v47, v48, v29);
LABEL_33:
  uint64_t v52 = a3[15];
  char v53 = (void *)((char *)a1 + v52);
  uint64_t v54 = (void *)((char *)a2 + v52);
  *char v53 = *v54;
  v53[1] = v54[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v55 = a3[16];
  uint64_t v56 = (void *)((char *)a1 + v55);
  uint64_t v57 = (void *)((char *)a2 + v55);
  unint64_t v58 = *(void *)((char *)a2 + v55 + 8);
  if (*(void *)((char *)a1 + v55 + 8) >> 60 == 15)
  {
    if (v58 >> 60 != 15)
    {
      uint64_t v59 = *v57;
      sub_100004214(v59, v58);
      *uint64_t v56 = v59;
      v56[1] = v58;
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  if (v58 >> 60 == 15)
  {
    sub_1000044A0((uint64_t)v56);
LABEL_38:
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    goto LABEL_40;
  }
  uint64_t v60 = *v57;
  sub_100004214(v60, v58);
  uint64_t v61 = *v56;
  unint64_t v62 = v56[1];
  *uint64_t v56 = v60;
  v56[1] = v58;
  sub_1000042CC(v61, v62);
LABEL_40:
  uint64_t v63 = a3[17];
  uint64_t v64 = (void *)((char *)a1 + v63);
  uint64_t v65 = (void *)((char *)a2 + v63);
  *uint64_t v64 = *v65;
  v64[1] = v65[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v66 = a3[18];
  uint64_t v67 = (char *)a1 + v66;
  uint64_t v68 = (char *)a2 + v66;
  uint64_t v69 = *(void *)v68;
  v67[8] = v68[8];
  *(void *)uint64_t v67 = v69;
  uint64_t v70 = a3[19];
  uint64_t v71 = (char *)a1 + v70;
  unint64_t v72 = (char *)a2 + v70;
  uint64_t v73 = *(void *)v72;
  v71[8] = v72[8];
  *(void *)uint64_t v71 = v73;
  uint64_t v74 = a3[20];
  uint64_t v75 = (void *)((char *)a1 + v74);
  uint64_t v76 = (void *)((char *)a2 + v74);
  unint64_t v77 = *(void *)((char *)a2 + v74 + 8);
  if (*(void *)((char *)a1 + v74 + 8) >> 60 != 15)
  {
    if (v77 >> 60 != 15)
    {
      uint64_t v79 = *v76;
      sub_100004214(v79, v77);
      uint64_t v80 = *v75;
      unint64_t v81 = v75[1];
      uint64_t *v75 = v79;
      v75[1] = v77;
      sub_1000042CC(v80, v81);
      return a1;
    }
    sub_1000044A0((uint64_t)v75);
    goto LABEL_45;
  }
  if (v77 >> 60 == 15)
  {
LABEL_45:
    *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
    return a1;
  }
  uint64_t v78 = *v76;
  sub_100004214(v78, v77);
  uint64_t *v75 = v78;
  v75[1] = v77;
  return a1;
}

uint64_t sub_10006FFA8(uint64_t a1)
{
  return a1;
}

_OWORD *initializeWithTake for IDSHomeKitInvitationSchema(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_100077B90();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_100002214(&qword_100090248);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  uint64_t v13 = a3[8];
  uint64_t v14 = a3[9];
  uint64_t v15 = (char *)a1 + v13;
  uint64_t v16 = (char *)a2 + v13;
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
  uint64_t v17 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = sub_100077BA0();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
  if (v22(v19, 1, v20))
  {
    uint64_t v23 = sub_100002214(&qword_1000906F8);
    memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v18, v19, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  uint64_t v24 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(_OWORD *)((char *)a1 + v24) = *(_OWORD *)((char *)a2 + v24);
  uint64_t v25 = a3[14];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  if (v22((char *)a2 + v25, 1, v20))
  {
    uint64_t v28 = sub_100002214(&qword_1000906F8);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v26, v27, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v26, 0, 1, v20);
  }
  uint64_t v29 = a3[16];
  *(_OWORD *)((char *)a1 + a3[15]) = *(_OWORD *)((char *)a2 + a3[15]);
  *(_OWORD *)((char *)a1 + v29) = *(_OWORD *)((char *)a2 + v29);
  uint64_t v30 = a3[18];
  *(_OWORD *)((char *)a1 + a3[17]) = *(_OWORD *)((char *)a2 + a3[17]);
  uint64_t v31 = (char *)a1 + v30;
  int v32 = (char *)a2 + v30;
  *(void *)uint64_t v31 = *(void *)v32;
  v31[8] = v32[8];
  uint64_t v33 = a3[19];
  uint64_t v34 = a3[20];
  uint64_t v35 = (char *)a1 + v33;
  uint64_t v36 = (char *)a2 + v33;
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  *(_OWORD *)((char *)a1 + v34) = *(_OWORD *)((char *)a2 + v34);
  return a1;
}

void *assignWithTake for IDSHomeKitInvitationSchema(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_100077B90();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    uint64_t v15 = sub_100002214(&qword_100090248);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  uint64_t v16 = a3[6];
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[8];
  *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = a3[10];
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  if (*(void *)((char *)a1 + v22) == 1)
  {
LABEL_10:
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    goto LABEL_12;
  }
  if (*(void *)v24 == 1)
  {
    sub_10006FFA8((uint64_t)a1 + v22);
    goto LABEL_10;
  }
  *(void *)uint64_t v23 = *(void *)v24;
  swift_bridgeObjectRelease();
  *((void *)v23 + 1) = *((void *)v24 + 1);
  swift_bridgeObjectRelease();
LABEL_12:
  uint64_t v25 = a3[11];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = sub_100077BA0();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48);
  int v31 = v30(v26, 1, v28);
  int v32 = v30(v27, 1, v28);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v32)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v28);
LABEL_17:
    uint64_t v33 = sub_100002214(&qword_1000906F8);
    memcpy(v26, v27, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v26, v27, v28);
LABEL_18:
  uint64_t v34 = a3[12];
  uint64_t v35 = (uint64_t)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  unint64_t v37 = *(void *)((char *)a1 + v34 + 8);
  if (v37 >> 60 == 15)
  {
LABEL_21:
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    goto LABEL_23;
  }
  unint64_t v38 = *((void *)v36 + 1);
  if (v38 >> 60 == 15)
  {
    sub_1000044A0(v35);
    goto LABEL_21;
  }
  uint64_t v39 = *(void *)v35;
  *(void *)uint64_t v35 = *(void *)v36;
  *(void *)(v35 + 8) = v38;
  sub_1000042CC(v39, v37);
LABEL_23:
  uint64_t v40 = a3[13];
  uint64_t v41 = (void *)((char *)a1 + v40);
  unint64_t v42 = (void *)((char *)a2 + v40);
  uint64_t v44 = *v42;
  uint64_t v43 = v42[1];
  *uint64_t v41 = v44;
  v41[1] = v43;
  swift_bridgeObjectRelease();
  uint64_t v45 = a3[14];
  uint64_t v46 = (char *)a1 + v45;
  uint64_t v47 = (char *)a2 + v45;
  int v48 = v30((char *)a1 + v45, 1, v28);
  int v49 = v30(v47, 1, v28);
  if (v48)
  {
    if (!v49)
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v46, v47, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v46, 0, 1, v28);
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v49)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v46, v28);
LABEL_28:
    uint64_t v50 = sub_100002214(&qword_1000906F8);
    memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
    goto LABEL_29;
  }
  (*(void (**)(char *, char *, uint64_t))(v29 + 40))(v46, v47, v28);
LABEL_29:
  uint64_t v51 = a3[15];
  uint64_t v52 = (void *)((char *)a1 + v51);
  char v53 = (void *)((char *)a2 + v51);
  uint64_t v55 = *v53;
  uint64_t v54 = v53[1];
  *uint64_t v52 = v55;
  v52[1] = v54;
  swift_bridgeObjectRelease();
  uint64_t v56 = a3[16];
  uint64_t v57 = (uint64_t)a1 + v56;
  unint64_t v58 = (char *)a2 + v56;
  unint64_t v59 = *(void *)((char *)a1 + v56 + 8);
  if (v59 >> 60 == 15)
  {
LABEL_32:
    *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
    goto LABEL_34;
  }
  unint64_t v60 = *((void *)v58 + 1);
  if (v60 >> 60 == 15)
  {
    sub_1000044A0(v57);
    goto LABEL_32;
  }
  uint64_t v61 = *(void *)v57;
  *(void *)uint64_t v57 = *(void *)v58;
  *(void *)(v57 + 8) = v60;
  sub_1000042CC(v61, v59);
LABEL_34:
  uint64_t v62 = a3[17];
  uint64_t v63 = (void *)((char *)a1 + v62);
  uint64_t v64 = (void *)((char *)a2 + v62);
  uint64_t v66 = *v64;
  uint64_t v65 = v64[1];
  *uint64_t v63 = v66;
  v63[1] = v65;
  swift_bridgeObjectRelease();
  uint64_t v67 = a3[18];
  uint64_t v68 = a3[19];
  uint64_t v69 = (char *)a1 + v67;
  uint64_t v70 = (char *)a2 + v67;
  v69[8] = v70[8];
  *(void *)uint64_t v69 = *(void *)v70;
  uint64_t v71 = (char *)a1 + v68;
  unint64_t v72 = (char *)a2 + v68;
  v71[8] = v72[8];
  *(void *)uint64_t v71 = *(void *)v72;
  uint64_t v73 = a3[20];
  uint64_t v74 = (void *)((char *)a1 + v73);
  uint64_t v75 = (void *)((char *)a2 + v73);
  unint64_t v76 = *(void *)((char *)a1 + v73 + 8);
  if (v76 >> 60 != 15)
  {
    unint64_t v77 = v75[1];
    if (v77 >> 60 != 15)
    {
      uint64_t v78 = *v74;
      uint64_t *v74 = *v75;
      v74[1] = v77;
      sub_1000042CC(v78, v76);
      return a1;
    }
    sub_1000044A0((uint64_t)v74);
  }
  *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSHomeKitInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10007092C);
}

uint64_t sub_10007092C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = sub_100002214(&qword_100090248);
    uint64_t v10 = *(void *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == a2)
    {
      uint64_t v11 = v9;
      uint64_t v12 = a1 + *(int *)(a3 + 20);
      int v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
      return v13(v12, a2, v11);
    }
    else
    {
      uint64_t v14 = sub_100002214(&qword_1000906F8);
      uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
      uint64_t v16 = v14;
      uint64_t v17 = a1 + *(int *)(a3 + 44);
      return v15(v17, a2, v16);
    }
  }
}

uint64_t storeEnumTagSinglePayload for IDSHomeKitInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100070A80);
}

uint64_t sub_100070A80(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }
  else
  {
    uint64_t v8 = sub_100002214(&qword_100090248);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 20);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = sub_100002214(&qword_1000906F8);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 44);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_100070BB4()
{
  sub_100070D00(319, (unint64_t *)&qword_1000902C8, (void (*)(uint64_t))&type metadata accessor for Date);
  if (v0 <= 0x3F)
  {
    sub_100070D00(319, (unint64_t *)&unk_100091050, (void (*)(uint64_t))&type metadata accessor for UUID);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_100070D00(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1000782E0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *initializeBufferWithCopyOfBuffer for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema()
{
  return &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema;
}

uint64_t destroy for IDSHomeKitInviteeScheduleSchema()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *_s19IDSBlastDoorService31IDSHomeKitInviteeScheduleSchemaVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for IDSHomeKitInviteeScheduleSchema(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for IDSHomeKitInviteeScheduleSchema(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSHomeKitInviteeScheduleSchema(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSHomeKitInviteeScheduleSchema(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSHomeKitInviteeScheduleSchema()
{
  return &type metadata for IDSHomeKitInviteeScheduleSchema;
}

__n128 initializeWithCopy for IDSHomeKitInviteeScheduleWeekDayRuleSchema(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for IDSHomeKitInviteeScheduleWeekDayRuleSchema(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for IDSHomeKitInviteeScheduleWeekDayRuleSchema(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for IDSHomeKitInviteeScheduleWeekDayRuleSchema()
{
  return &type metadata for IDSHomeKitInviteeScheduleWeekDayRuleSchema;
}

uint64_t *initializeBufferWithCopyOfBuffer for IDSHomeKitInviteeScheduleYearDayRuleSchema(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_100077B90();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      uint64_t v10 = sub_100002214(&qword_100090248);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v12 = *(int *)(a3 + 20);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    if (v9((uint64_t *)v14, 1, v7))
    {
      uint64_t v15 = sub_100002214(&qword_100090248);
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for IDSHomeKitInviteeScheduleYearDayRuleSchema(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100077B90();
  uint64_t v9 = *(void *)(v4 - 8);
  int v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v5(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v4);
  }
  uint64_t v6 = a1 + *(int *)(a2 + 20);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v6, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 8);
    return v8(v6, v4);
  }
  return result;
}

char *initializeWithCopy for IDSHomeKitInviteeScheduleYearDayRuleSchema(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100077B90();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = sub_100002214(&qword_100090248);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    uint64_t v13 = sub_100002214(&qword_100090248);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for IDSHomeKitInviteeScheduleYearDayRuleSchema(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100077B90();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100002214(&qword_100090248);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v17 = sub_100002214(&qword_100090248);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

char *initializeWithTake for IDSHomeKitInviteeScheduleYearDayRuleSchema(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100077B90();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    uint64_t v9 = sub_100002214(&qword_100090248);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    uint64_t v13 = sub_100002214(&qword_100090248);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for IDSHomeKitInviteeScheduleYearDayRuleSchema(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_100077B90();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_100002214(&qword_100090248);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int v15 = v8(&a1[v12], 1, v6);
  int v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    uint64_t v17 = sub_100002214(&qword_100090248);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSHomeKitInviteeScheduleYearDayRuleSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100071CB8);
}

uint64_t sub_100071CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002214(&qword_100090248);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for IDSHomeKitInviteeScheduleYearDayRuleSchema(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100071D3C);
}

uint64_t sub_100071D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100002214(&qword_100090248);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void sub_100071DB0()
{
  sub_100070D00(319, (unint64_t *)&qword_1000902C8, (void (*)(uint64_t))&type metadata accessor for Date);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema.CodingKeys()
{
  return &type metadata for IDSHomeKitInviteeScheduleYearDayRuleSchema.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for IDSHomeKitInviteeScheduleWeekDayRuleSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100071F3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSHomeKitInviteeScheduleWeekDayRuleSchema.CodingKeys()
{
  return &type metadata for IDSHomeKitInviteeScheduleWeekDayRuleSchema.CodingKeys;
}

ValueMetadata *type metadata accessor for IDSHomeKitInviteeScheduleSchema.CodingKeys()
{
  return &type metadata for IDSHomeKitInviteeScheduleSchema.CodingKeys;
}

uint64_t getEnumTagSinglePayload for IDSHomeKitInvitationSchema.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IDSHomeKitInvitationSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *uint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000720E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSHomeKitInvitationSchema.CodingKeys()
{
  return &type metadata for IDSHomeKitInvitationSchema.CodingKeys;
}

unsigned char *_s19IDSBlastDoorService42IDSHomeKitInviteeScheduleYearDayRuleSchemaV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1000721E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.CodingKeys()
{
  return &type metadata for IDSHomeKitInvitationSchema.IDSHomeKitInvitationRequestedCapabilitiesSchema.CodingKeys;
}

unint64_t sub_100072220()
{
  unint64_t result = qword_100091150;
  if (!qword_100091150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100091150);
  }
  return result;
}

unint64_t sub_100072278()
{
  unint64_t result = qword_100091158;
  if (!qword_100091158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100091158);
  }
  return result;
}

unint64_t sub_1000722D0()
{
  unint64_t result = qword_100091160;
  if (!qword_100091160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100091160);
  }
  return result;
}

unint64_t sub_100072328()
{
  unint64_t result = qword_100091168;
  if (!qword_100091168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100091168);
  }
  return result;
}

unint64_t sub_100072380()
{
  unint64_t result = qword_100091170;
  if (!qword_100091170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100091170);
  }
  return result;
}

unint64_t sub_1000723D8()
{
  unint64_t result = qword_100091178;
  if (!qword_100091178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100091178);
  }
  return result;
}

unint64_t sub_100072430()
{
  unint64_t result = qword_100091180;
  if (!qword_100091180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100091180);
  }
  return result;
}

unint64_t sub_100072488()
{
  unint64_t result = qword_100091188;
  if (!qword_100091188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100091188);
  }
  return result;
}

unint64_t sub_1000724E0()
{
  unint64_t result = qword_100091190;
  if (!qword_100091190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100091190);
  }
  return result;
}

unint64_t sub_100072538()
{
  unint64_t result = qword_100091198;
  if (!qword_100091198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100091198);
  }
  return result;
}

unint64_t sub_100072590()
{
  unint64_t result = qword_1000911A0;
  if (!qword_1000911A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000911A0);
  }
  return result;
}

unint64_t sub_1000725E8()
{
  unint64_t result = qword_1000911A8;
  if (!qword_1000911A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000911A8);
  }
  return result;
}

unint64_t sub_100072640()
{
  unint64_t result = qword_1000911B0;
  if (!qword_1000911B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000911B0);
  }
  return result;
}

unint64_t sub_100072698()
{
  unint64_t result = qword_1000911B8;
  if (!qword_1000911B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000911B8);
  }
  return result;
}

unint64_t sub_1000726F0()
{
  unint64_t result = qword_1000911C0;
  if (!qword_1000911C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000911C0);
  }
  return result;
}

uint64_t sub_100072744(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100044BD8(&qword_100090F90);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000727B4()
{
  unint64_t result = qword_1000911E0;
  if (!qword_1000911E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000911E0);
  }
  return result;
}

uint64_t sub_100072808(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100044BD8(&qword_100090FA8);
    sub_10006E3F0(a2, (void (*)(uint64_t))type metadata accessor for IDSHomeKitInviteeScheduleYearDayRuleSchema);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10007289C(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100044BD8(&qword_100090F28);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100072908(char a1)
{
  unint64_t result = 116;
  switch(a1)
  {
    case 1:
      unint64_t result = 118;
      break;
    case 2:
      unint64_t result = 26723;
      break;
    case 3:
      unint64_t result = 25956;
      break;
    case 4:
      unint64_t result = 25715;
      break;
    case 5:
      unint64_t result = 26989;
      break;
    case 6:
      unint64_t result = 7500147;
      break;
    case 7:
      unint64_t result = 98;
      break;
    case 8:
      unint64_t result = 29810;
      break;
    case 9:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 10:
      unint64_t result = 25970;
      break;
    case 11:
      unint64_t result = 99;
      break;
    case 12:
      unint64_t result = 1835819888;
      break;
    case 13:
      unint64_t result = 112;
      break;
    case 14:
      unint64_t result = 100;
      break;
    case 15:
      unint64_t result = 115;
      break;
    case 16:
      unint64_t result = 6579056;
      break;
    case 17:
      unint64_t result = 25443;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100072A50(char a1)
{
  unint64_t result = 116;
  switch(a1)
  {
    case 1:
      unint64_t result = 118;
      break;
    case 2:
      unint64_t result = 26723;
      break;
    case 3:
      unint64_t result = 25956;
      break;
    case 4:
      unint64_t result = 25715;
      break;
    case 5:
      unint64_t result = 26989;
      break;
    case 6:
      unint64_t result = 7500147;
      break;
    case 7:
      unint64_t result = 98;
      break;
    case 8:
      unint64_t result = 29810;
      break;
    case 9:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 10:
      unint64_t result = 25970;
      break;
    case 11:
      unint64_t result = 99;
      break;
    case 12:
      unint64_t result = 1835819888;
      break;
    case 13:
      unint64_t result = 112;
      break;
    case 14:
      unint64_t result = 100;
      break;
    case 15:
      unint64_t result = 115;
      break;
    case 16:
      unint64_t result = 6579056;
      break;
    case 17:
      unint64_t result = 25443;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100072B98(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_100072908(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100072908(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1000785B0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100072C24()
{
  char v1 = *v0;
  sub_100078630();
  sub_100072908(v1);
  sub_1000781D0();
  swift_bridgeObjectRelease();
  return sub_100078650();
}

uint64_t sub_100072C88()
{
  sub_100072908(*v0);
  sub_1000781D0();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100072CDC()
{
  char v1 = *v0;
  sub_100078630();
  sub_100072908(v1);
  sub_1000781D0();
  swift_bridgeObjectRelease();
  return sub_100078650();
}

uint64_t sub_100072D3C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100074D14();
  *a1 = result;
  return result;
}

unint64_t sub_100072D6C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100072908(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100072D98()
{
  return sub_100072A50(*v0);
}

uint64_t sub_100072DA0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_100074D14();
  *a1 = result;
  return result;
}

void sub_100072DC8(unsigned char *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_100072DD4(uint64_t a1)
{
  unint64_t v2 = sub_100073304();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100072E10(uint64_t a1)
{
  unint64_t v2 = sub_100073304();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IDSSessionInvitationSchema.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100002214(&qword_100091208);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_100073304();
  sub_1000786A0();
  LOBYTE(v13) = 0;
  sub_100077E40();
  sub_100073BE0(&qword_100091218);
  sub_100078590();
  if (!v2)
  {
    int v9 = (int *)type metadata accessor for IDSSessionInvitationSchema();
    LOBYTE(v13) = 1;
    sub_100078580();
    LOBYTE(v13) = 2;
    sub_100078500();
    LOBYTE(v13) = 3;
    sub_1000784D0();
    LOBYTE(v13) = 4;
    sub_1000784D0();
    LOBYTE(v13) = 5;
    sub_1000784D0();
    LOBYTE(v13) = 6;
    sub_1000784D0();
    long long v13 = *(_OWORD *)(v3 + v9[11]);
    char v12 = 7;
    sub_100003DA8();
    sub_100078510();
    LOBYTE(v13) = 8;
    sub_1000784D0();
    long long v13 = *(_OWORD *)(v3 + v9[13]);
    char v12 = 9;
    sub_100078510();
    LOBYTE(v13) = 10;
    sub_1000784D0();
    long long v13 = *(_OWORD *)(v3 + v9[15]);
    char v12 = 11;
    sub_100078510();
    LOBYTE(v13) = 12;
    sub_1000784D0();
    LOBYTE(v13) = 13;
    sub_100078540();
    LOBYTE(v13) = 14;
    sub_100078550();
    LOBYTE(v13) = 15;
    sub_100078540();
    LOBYTE(v13) = 16;
    sub_1000784D0();
    LOBYTE(v13) = 17;
    sub_1000784D0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100073304()
{
  unint64_t result = qword_100091210;
  if (!qword_100091210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100091210);
  }
  return result;
}

uint64_t type metadata accessor for IDSSessionInvitationSchema()
{
  uint64_t result = qword_100091288;
  if (!qword_100091288) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t IDSSessionInvitationSchema.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100077E40();
  uint64_t v31 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_100002214(&qword_100091220);
  uint64_t v8 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  int v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = (int *)type metadata accessor for IDSSessionInvitationSchema();
  __chkstk_darwin(v35);
  uint64_t v33 = a1;
  uint64_t v34 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000029D8(a1, a1[3]);
  sub_100073304();
  sub_100078690();
  uint64_t v30 = v5;
  if (v2) {
    return sub_100002E34((uint64_t)v33);
  }
  uint64_t v29 = a2;
  uint64_t v12 = v8;
  LOBYTE(v36) = 0;
  sub_100073BE0(&qword_100091228);
  sub_100078490();
  long long v13 = v34;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v34, v7, v5);
  LOBYTE(v36) = 1;
  uint64_t v14 = sub_100078480();
  int v15 = v35;
  *(void *)&v13[v35[5]] = v14;
  LOBYTE(v36) = 2;
  uint64_t v16 = sub_100078400();
  uint64_t v17 = &v13[v15[6]];
  *(void *)uint64_t v17 = v16;
  v17[8] = v18 & 1;
  LOBYTE(v36) = 3;
  v13[v15[7]] = sub_1000783D0();
  LOBYTE(v36) = 4;
  v13[v15[8]] = sub_1000783D0();
  LOBYTE(v36) = 5;
  v13[v15[9]] = sub_1000783D0();
  LOBYTE(v36) = 6;
  v13[v15[10]] = sub_1000783D0();
  char v37 = 7;
  sub_100004864();
  sub_100078410();
  *(_OWORD *)&v13[v35[11]] = v36;
  LOBYTE(v36) = 8;
  v13[v35[12]] = sub_1000783D0();
  char v37 = 9;
  sub_100078410();
  *(_OWORD *)&v34[v35[13]] = v36;
  LOBYTE(v36) = 10;
  v34[v35[14]] = sub_1000783D0();
  char v37 = 11;
  sub_100078410();
  *(_OWORD *)&v34[v35[15]] = v36;
  LOBYTE(v36) = 12;
  v34[v35[16]] = sub_1000783D0();
  LOBYTE(v36) = 13;
  uint64_t v19 = sub_100078440();
  uint64_t v20 = (uint64_t *)&v34[v35[17]];
  *uint64_t v20 = v19;
  v20[1] = v21;
  LOBYTE(v36) = 14;
  v34[v35[18]] = sub_100078450() & 1;
  LOBYTE(v36) = 15;
  uint64_t v22 = sub_100078440();
  uint64_t v23 = (uint64_t *)&v34[v35[19]];
  *uint64_t v23 = v22;
  v23[1] = v24;
  LOBYTE(v36) = 16;
  v34[v35[20]] = sub_1000783D0();
  LOBYTE(v36) = 17;
  char v25 = sub_1000783D0();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v32);
  uint64_t v26 = (uint64_t)v34;
  v34[v35[21]] = v25;
  sub_100073C24(v26, v29);
  sub_100002E34((uint64_t)v33);
  return sub_1000321CC(v26);
}

uint64_t sub_100073BE0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_100077E40();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100073C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSSessionInvitationSchema();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100073C88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return IDSSessionInvitationSchema.init(from:)(a1, a2);
}

uint64_t sub_100073CA0(void *a1)
{
  return IDSSessionInvitationSchema.encode(to:)(a1);
}

void *initializeBufferWithCopyOfBuffer for IDSSessionInvitationSchema(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (void *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_100077E40();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
    uint64_t v9 = (char *)a1 + v8;
    int v10 = (char *)a2 + v8;
    *(void *)uint64_t v9 = *(void *)v10;
    v9[8] = v10[8];
    uint64_t v11 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
    uint64_t v12 = a3[10];
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
    uint64_t v13 = a3[11];
    uint64_t v14 = (char *)a1 + v13;
    int v15 = (char *)a2 + v13;
    unint64_t v16 = *((void *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    }
    else
    {
      uint64_t v18 = *(void *)v15;
      sub_100004214(*(void *)v15, *((void *)v15 + 1));
      *(void *)uint64_t v14 = v18;
      *((void *)v14 + 1) = v16;
    }
    uint64_t v19 = a3[13];
    *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (void *)((char *)a2 + v19);
    unint64_t v22 = *(void *)((char *)a2 + v19 + 8);
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    }
    else
    {
      uint64_t v23 = *v21;
      sub_100004214(*v21, v22);
      *(void *)uint64_t v20 = v23;
      *((void *)v20 + 1) = v22;
    }
    uint64_t v24 = a3[15];
    *((unsigned char *)a1 + a3[14]) = *((unsigned char *)a2 + a3[14]);
    char v25 = (char *)a1 + v24;
    uint64_t v26 = (void *)((char *)a2 + v24);
    unint64_t v27 = *(void *)((char *)a2 + v24 + 8);
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)char v25 = *(_OWORD *)v26;
    }
    else
    {
      uint64_t v28 = *v26;
      sub_100004214(*v26, v27);
      *(void *)char v25 = v28;
      *((void *)v25 + 1) = v27;
    }
    uint64_t v29 = a3[17];
    *((unsigned char *)a1 + a3[16]) = *((unsigned char *)a2 + a3[16]);
    uint64_t v30 = (void *)((char *)a1 + v29);
    uint64_t v31 = (void *)((char *)a2 + v29);
    uint64_t v32 = v31[1];
    *uint64_t v30 = *v31;
    v30[1] = v32;
    uint64_t v33 = a3[19];
    *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
    uint64_t v34 = (void *)((char *)a1 + v33);
    uint64_t v35 = (void *)((char *)a2 + v33);
    uint64_t v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    uint64_t v37 = a3[21];
    *((unsigned char *)a1 + a3[20]) = *((unsigned char *)a2 + a3[20]);
    *((unsigned char *)a1 + v37) = *((unsigned char *)a2 + v37);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for IDSSessionInvitationSchema(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_100077E40();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (uint64_t *)(a1 + a2[11]);
  unint64_t v6 = v5[1];
  if (v6 >> 60 != 15) {
    sub_1000042CC(*v5, v6);
  }
  uint64_t v7 = (uint64_t *)(a1 + a2[13]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_1000042CC(*v7, v8);
  }
  uint64_t v9 = (uint64_t *)(a1 + a2[15]);
  unint64_t v10 = v9[1];
  if (v10 >> 60 != 15) {
    sub_1000042CC(*v9, v10);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IDSSessionInvitationSchema(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100077E40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  uint64_t v10 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[11];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v16 = *v14;
    sub_100004214(*v14, v14[1]);
    *(void *)uint64_t v13 = v16;
    *(void *)(v13 + 8) = v15;
  }
  uint64_t v17 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = (uint64_t *)(a2 + v17);
  unint64_t v20 = *(void *)(a2 + v17 + 8);
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }
  else
  {
    uint64_t v21 = *v19;
    sub_100004214(*v19, v20);
    *(void *)uint64_t v18 = v21;
    *(void *)(v18 + 8) = v20;
  }
  uint64_t v22 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = (uint64_t *)(a2 + v22);
  unint64_t v25 = *(void *)(a2 + v22 + 8);
  if (v25 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
  }
  else
  {
    uint64_t v26 = *v24;
    sub_100004214(*v24, v25);
    *(void *)uint64_t v23 = v26;
    *(void *)(v23 + 8) = v25;
  }
  uint64_t v27 = a3[17];
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = a3[19];
  *(unsigned char *)(a1 + a3[18]) = *(unsigned char *)(a2 + a3[18]);
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  uint64_t v34 = v33[1];
  *uint64_t v32 = *v33;
  v32[1] = v34;
  uint64_t v35 = a3[21];
  *(unsigned char *)(a1 + a3[20]) = *(unsigned char *)(a2 + a3[20]);
  *(unsigned char *)(a1 + v35) = *(unsigned char *)(a2 + v35);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IDSSessionInvitationSchema(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100077E40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = v10;
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v11 = a3[11];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  unint64_t v14 = *(void *)(a2 + v11 + 8);
  if (*(void *)(a1 + v11 + 8) >> 60 == 15)
  {
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *v13;
      sub_100004214(v15, v14);
      *uint64_t v12 = v15;
      v12[1] = v14;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v14 >> 60 == 15)
  {
    sub_1000044A0((uint64_t)v12);
LABEL_6:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }
  uint64_t v16 = *v13;
  sub_100004214(v16, v14);
  uint64_t v17 = *v12;
  unint64_t v18 = v12[1];
  *uint64_t v12 = v16;
  v12[1] = v14;
  sub_1000042CC(v17, v18);
LABEL_8:
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v19 = a3[13];
  unint64_t v20 = (uint64_t *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  unint64_t v22 = *(void *)(a2 + v19 + 8);
  if (*(void *)(a1 + v19 + 8) >> 60 == 15)
  {
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = *v21;
      sub_100004214(v23, v22);
      *unint64_t v20 = v23;
      v20[1] = v22;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v22 >> 60 == 15)
  {
    sub_1000044A0((uint64_t)v20);
LABEL_13:
    *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
    goto LABEL_15;
  }
  uint64_t v24 = *v21;
  sub_100004214(v24, v22);
  uint64_t v25 = *v20;
  unint64_t v26 = v20[1];
  *unint64_t v20 = v24;
  v20[1] = v22;
  sub_1000042CC(v25, v26);
LABEL_15:
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  uint64_t v27 = a3[15];
  uint64_t v28 = (uint64_t *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  unint64_t v30 = *(void *)(a2 + v27 + 8);
  if (*(void *)(a1 + v27 + 8) >> 60 != 15)
  {
    if (v30 >> 60 != 15)
    {
      uint64_t v32 = *v29;
      sub_100004214(v32, v30);
      uint64_t v33 = *v28;
      unint64_t v34 = v28[1];
      *uint64_t v28 = v32;
      v28[1] = v30;
      sub_1000042CC(v33, v34);
      goto LABEL_22;
    }
    sub_1000044A0((uint64_t)v28);
    goto LABEL_20;
  }
  if (v30 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
    goto LABEL_22;
  }
  uint64_t v31 = *v29;
  sub_100004214(v31, v30);
  *uint64_t v28 = v31;
  v28[1] = v30;
LABEL_22:
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  uint64_t v35 = a3[17];
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (void *)(a2 + v35);
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[18]) = *(unsigned char *)(a2 + a3[18]);
  uint64_t v38 = a3[19];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (void *)(a2 + v38);
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[20]) = *(unsigned char *)(a2 + a3[20]);
  *(unsigned char *)(a1 + a3[21]) = *(unsigned char *)(a2 + a3[21]);
  return a1;
}

uint64_t initializeWithTake for IDSSessionInvitationSchema(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100077E40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  uint64_t v10 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(unsigned char *)(a1 + v12) = *(unsigned char *)(a2 + v12);
  uint64_t v13 = a3[14];
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  uint64_t v14 = a3[16];
  *(_OWORD *)(a1 + a3[15]) = *(_OWORD *)(a2 + a3[15]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  uint64_t v15 = a3[18];
  *(_OWORD *)(a1 + a3[17]) = *(_OWORD *)(a2 + a3[17]);
  *(unsigned char *)(a1 + v15) = *(unsigned char *)(a2 + v15);
  uint64_t v16 = a3[20];
  *(_OWORD *)(a1 + a3[19]) = *(_OWORD *)(a2 + a3[19]);
  *(unsigned char *)(a1 + v16) = *(unsigned char *)(a2 + v16);
  *(unsigned char *)(a1 + a3[21]) = *(unsigned char *)(a2 + a3[21]);
  return a1;
}

uint64_t assignWithTake for IDSSessionInvitationSchema(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_100077E40();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(unsigned char *)(v8 + 8) = *(unsigned char *)(v9 + 8);
  uint64_t v10 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v11 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v11) = *(unsigned char *)(a2 + v11);
  uint64_t v12 = a3[11];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  unint64_t v15 = *(void *)(a1 + v12 + 8);
  if (v15 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v16 = *(void *)(v14 + 8);
  if (v16 >> 60 == 15)
  {
    sub_1000044A0(v13);
LABEL_4:
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    goto LABEL_6;
  }
  uint64_t v17 = *(void *)v13;
  *(void *)uint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = v16;
  sub_1000042CC(v17, v15);
LABEL_6:
  uint64_t v18 = a3[13];
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  unint64_t v21 = *(void *)(a1 + v18 + 8);
  if (v21 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    goto LABEL_11;
  }
  unint64_t v22 = *(void *)(v20 + 8);
  if (v22 >> 60 == 15)
  {
    sub_1000044A0(v19);
    goto LABEL_9;
  }
  uint64_t v23 = *(void *)v19;
  *(void *)uint64_t v19 = *(void *)v20;
  *(void *)(v19 + 8) = v22;
  sub_1000042CC(v23, v21);
LABEL_11:
  uint64_t v24 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  uint64_t v25 = (uint64_t *)(a1 + v24);
  unint64_t v26 = (uint64_t *)(a2 + v24);
  unint64_t v27 = *(void *)(a1 + v24 + 8);
  if (v27 >> 60 != 15)
  {
    unint64_t v28 = v26[1];
    if (v28 >> 60 != 15)
    {
      uint64_t v29 = *v25;
      uint64_t *v25 = *v26;
      v25[1] = v28;
      sub_1000042CC(v29, v27);
      goto LABEL_16;
    }
    sub_1000044A0((uint64_t)v25);
  }
  *(_OWORD *)uint64_t v25 = *(_OWORD *)v26;
LABEL_16:
  uint64_t v30 = a3[17];
  *(unsigned char *)(a1 + a3[16]) = *(unsigned char *)(a2 + a3[16]);
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (uint64_t *)(a2 + v30);
  uint64_t v34 = *v32;
  uint64_t v33 = v32[1];
  *uint64_t v31 = v34;
  v31[1] = v33;
  swift_bridgeObjectRelease();
  uint64_t v35 = a3[19];
  *(unsigned char *)(a1 + a3[18]) = *(unsigned char *)(a2 + a3[18]);
  uint64_t v36 = (void *)(a1 + v35);
  uint64_t v37 = (uint64_t *)(a2 + v35);
  uint64_t v39 = *v37;
  uint64_t v38 = v37[1];
  *uint64_t v36 = v39;
  v36[1] = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[21];
  *(unsigned char *)(a1 + a3[20]) = *(unsigned char *)(a2 + a3[20]);
  *(unsigned char *)(a1 + v40) = *(unsigned char *)(a2 + v40);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSSessionInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100074800);
}

uint64_t sub_100074800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100077E40();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 68) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for IDSSessionInvitationSchema(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000748D8);
}

uint64_t sub_1000748D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_100077E40();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 68) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100074998()
{
  uint64_t result = sub_100077E40();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for IDSSessionInvitationSchema.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IDSSessionInvitationSchema.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *uint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100074BD4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IDSSessionInvitationSchema.CodingKeys()
{
  return &type metadata for IDSSessionInvitationSchema.CodingKeys;
}

unint64_t sub_100074C10()
{
  unint64_t result = qword_100091300;
  if (!qword_100091300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100091300);
  }
  return result;
}

unint64_t sub_100074C68()
{
  unint64_t result = qword_100091308;
  if (!qword_100091308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100091308);
  }
  return result;
}

unint64_t sub_100074CC0()
{
  unint64_t result = qword_100091310;
  if (!qword_100091310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100091310);
  }
  return result;
}

uint64_t sub_100074D14()
{
  unint64_t v0 = sub_1000785C0();
  swift_bridgeObjectRelease();
  if (v0 >= 0x12) {
    return 18;
  }
  else {
    return v0;
  }
}

ValueMetadata *type metadata accessor for IDSMadridPayloadUnpacker()
{
  return &type metadata for IDSMadridPayloadUnpacker;
}

unint64_t sub_100074D7C()
{
  unint64_t result = qword_100091318;
  if (!qword_100091318)
  {
    sub_100077C70();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100091318);
  }
  return result;
}

uint64_t sub_100074DD4(uint64_t a1)
{
  unint64_t v447 = v1;
  uint64_t v2 = __chkstk_darwin(a1);
  uint64_t v416 = v3;
  uint64_t v432 = sub_100078100();
  uint64_t v424 = *(void *)(v432 - 8);
  uint64_t v4 = __chkstk_darwin(v432);
  unint64_t v431 = (unint64_t)v167 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  BOOL v7 = (char *)v167 - v6;
  unint64_t v435 = sub_100078080();
  uint64_t v427 = *(char **)(v435 - 8);
  uint64_t v8 = __chkstk_darwin(v435);
  uint64_t v434 = (uint64_t)v167 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v436 = (uint64_t)v167 - v10;
  uint64_t v438 = (void (**)(void, void, void))sub_1000780E0();
  uint64_t v430 = (uint64_t)*(v438 - 1);
  uint64_t v11 = __chkstk_darwin(v438);
  uint64_t v437 = (uint64_t)v167 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v167 - v13;
  uint64_t v440 = sub_100078060();
  unint64_t v433 = *(void *)(v440 - 8);
  uint64_t v15 = __chkstk_darwin(v440);
  uint64_t v439 = (char *)v167 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v167 - v17;
  uint64_t v19 = sub_100002214(&qword_100091320);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v418 = (uint64_t)v167 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)v167 - v23;
  __chkstk_darwin(v22);
  uint64_t v425 = (uint64_t)v167 - v25;
  uint64_t v26 = sub_100002214(&qword_100090E70);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v417 = (uint64_t)v167 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v420 = (char *)v167 - v30;
  __chkstk_darwin(v29);
  uint64_t v428 = (uint64_t)v167 - v31;
  uint64_t v450 = (void *)sub_100077C70();
  uint64_t v32 = *(v450 - 1);
  uint64_t v33 = __chkstk_darwin(v450);
  unint64_t v444 = (unint64_t)v167 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v445 = (char *)v167 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v446 = (void *)((char *)v167 - v38);
  __chkstk_darwin(v37);
  uint64_t v40 = (char *)v167 - v39;
  uint64_t v41 = *(void *)(v2 + 824);
  uint64_t v426 = v2;
  uint64_t v423 = v7;
  uint64_t v429 = v14;
  unint64_t v419 = v18;
  uint64_t v421 = v24;
  if (v41)
  {
    uint64_t v42 = *(void *)(v41 + 16);
    if (v42)
    {
      uint64_t v443 = (char *)(v32 + 16);
      uint64_t v442 = (void (**)(uint64_t, uint64_t, void))(v32 + 32);
      unint64_t v441 = v32 + 8;
      uint64_t v43 = swift_bridgeObjectRetain();
      uint64_t v44 = &_swiftEmptyArrayStorage;
      uint64_t v45 = 32;
      uint64_t v46 = v447;
      while (1)
      {
        uint64_t v47 = v43;
        memcpy(v449, (const void *)(v43 + v45), 0x883uLL);
        sub_10005F0C4(v449);
        sub_100074DD4(v449);
        if (v46) {
          break;
        }
        (*(void (**)(void *, char *, void *))v443)(v446, v40, v450);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v44 = (void *)sub_100077984(0, v44[2] + 1, 1, v44, &qword_100091328, (uint64_t (*)(void))&type metadata accessor for APSUserPayload);
        }
        unint64_t v49 = v44[2];
        unint64_t v48 = v44[3];
        uint64_t v50 = (uint64_t)v44;
        if (v49 >= v48 >> 1) {
          uint64_t v50 = sub_100077984(v48 > 1, v49 + 1, 1, v44, &qword_100091328, (uint64_t (*)(void))&type metadata accessor for APSUserPayload);
        }
        *(void *)(v50 + 16) = v49 + 1;
        uint64_t v44 = (void *)v50;
        unint64_t v51 = v50
            + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))
            + *(void *)(v32 + 72) * v49;
        uint64_t v52 = v450;
        (*(void (**)(unint64_t, void *, void *))(v32 + 32))(v51, v446, v450);
        sub_10005F6D0(v449);
        (*(void (**)(char *, void *))(v32 + 8))(v40, v52);
        v45 += 2184;
        --v42;
        uint64_t v46 = 0;
        char v53 = v445;
        uint64_t v43 = v47;
        if (!v42)
        {
          swift_bridgeObjectRelease();
          uint64_t v2 = v426;
          goto LABEL_15;
        }
      }
      sub_10005F6D0(v449);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v44 = &_swiftEmptyArrayStorage;
    uint64_t v2 = v426;
  }
  else
  {
    uint64_t v44 = &_swiftEmptyArrayStorage;
  }
  uint64_t v46 = v447;
  char v53 = v445;
LABEL_15:
  uint64_t v422 = v44;
  uint64_t v55 = *(void *)(v2 + 832);
  if (v55)
  {
    uint64_t v56 = *(void *)(v55 + 16);
    if (v56)
    {
      unint64_t v447 = (void (**)(unint64_t, void *, void *))(v32 + 16);
      uint64_t v443 = (char *)(v32 + 32);
      uint64_t v442 = (void (**)(uint64_t, uint64_t, void))(v32 + 8);
      uint64_t v57 = swift_bridgeObjectRetain();
      unint64_t v58 = &_swiftEmptyArrayStorage;
      uint64_t v59 = 32;
      unint64_t v60 = v450;
      while (1)
      {
        uint64_t v61 = v57;
        memcpy(v448, (const void *)(v57 + v59), 0x883uLL);
        sub_10005F0C4(v448);
        sub_100074DD4(v448);
        if (v46) {
          break;
        }
        (*v447)(v444, v53, v450);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v58 = (void *)sub_100077984(0, v58[2] + 1, 1, v58, &qword_100091328, (uint64_t (*)(void))&type metadata accessor for APSUserPayload);
        }
        unint64_t v63 = v58[2];
        unint64_t v62 = v58[3];
        uint64_t v446 = v58;
        if (v63 >= v62 >> 1) {
          uint64_t v446 = (void *)sub_100077984(v62 > 1, v63 + 1, 1, v446, &qword_100091328, (uint64_t (*)(void))&type metadata accessor for APSUserPayload);
        }
        uint64_t v64 = v446;
        v446[2] = v63 + 1;
        unint64_t v58 = v64;
        (*(void (**)(unint64_t, unint64_t, void *))(v32 + 32))((unint64_t)v64+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(void *)(v32 + 72) * v63, v444, v60);
        sub_10005F6D0(v448);
        char v53 = v445;
        (*(void (**)(char *, void *))(v32 + 8))(v445, v60);
        v59 += 2184;
        --v56;
        uint64_t v57 = v61;
        if (!v56)
        {
          swift_bridgeObjectRelease();
          goto LABEL_28;
        }
      }
      sub_10005F6D0(v448);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v446 = &_swiftEmptyArrayStorage;
LABEL_28:
    uint64_t v2 = v426;
  }
  else
  {
    uint64_t v446 = &_swiftEmptyArrayStorage;
  }
  uint64_t v65 = sub_100078020();
  uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56);
  v66(v428, 1, 1, v65);
  if (*(void *)(v2 + 1168) != 1)
  {
    uint64_t v415 = v66;
    uint64_t v67 = *(void *)(v2 + 1248);
    unint64_t v444 = *(void *)(v2 + 1240);
    uint64_t v443 = *(char **)(v2 + 1224);
    uint64_t v450 = *(void **)(v2 + 1208);
    unint64_t v447 = v46;
    uint64_t v445 = *(char **)(v2 + 1192);
    uint64_t v442 = *(void (***)(uint64_t, uint64_t, void))(v2 + 1176);
    unint64_t v441 = *(void *)(v2 + 1160);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    HIBYTE(v166) = HIBYTE(v67);
    uint64_t v68 = (uint64_t)v420;
    uint64_t v69 = v447;
    sub_100078010();
    uint64_t v46 = v69;
    if (v69)
    {
      sub_10000A43C(v428, &qword_100090E70);
LABEL_36:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v70 = v428;
    sub_10000A43C(v428, &qword_100090E70);
    v415(v68, 0, 1, v65);
    sub_100044DC4(v68, v70, &qword_100090E70);
  }
  uint64_t v71 = sub_100078120();
  unint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56);
  v72(v425, 1, 1, v71);
  uint64_t v73 = (void (**)(void, void, void))v421;
  if ((*(unsigned char *)(v2 + 185) & 1) == 0)
  {
    sub_100078110();
    if (v46)
    {
      sub_10000A43C(v425, &qword_100091320);
      sub_10000A43C(v428, &qword_100090E70);
      goto LABEL_36;
    }
    uint64_t v74 = v425;
    sub_10000A43C(v425, &qword_100091320);
    v72((uint64_t)v73, 0, 1, v71);
    sub_100044DC4((uint64_t)v73, v74, &qword_100091320);
  }
  uint64_t v75 = v426;
  uint64_t v76 = *(void *)(v426 + 1648);
  if (!v76 || (unint64_t v77 = *(void *)(v76 + 16)) == 0)
  {
    uint64_t v80 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))&_swiftEmptyArrayStorage;
LABEL_50:
    uint64_t v89 = *(void *)(v75 + 2040);
    uint64_t v415 = v80;
    if (v89 && (unint64_t v90 = *(char **)(v89 + 16)) != 0)
    {
      unint64_t v447 = v46;
      uint64_t v442 = (void (**)(uint64_t, uint64_t, void))(v430 + 16);
      unint64_t v441 = v430 + 32;
      uint64_t v440 = v430 + 8;
      uint64_t v439 = (char *)swift_bridgeObjectRetain();
      uint64_t v91 = v439 + 48;
      uint64_t v92 = &_swiftEmptyArrayStorage;
      uint64_t v93 = (uint64_t)v429;
      while (1)
      {
        uint64_t v443 = v90;
        uint64_t v94 = *((void *)v91 + 2);
        unint64_t v95 = *((void *)v91 + 3);
        uint64_t v450 = (void *)*((void *)v91 + 4);
        LODWORD(v445) = v91[8];
        unint64_t v444 = *(void *)v91;
        sub_1000048B8(v94, v95);
        swift_bridgeObjectRetain();
        sub_1000048B8(v94, v95);
        swift_bridgeObjectRetain();
        uint64_t v96 = v447;
        sub_1000780D0();
        unint64_t v447 = v96;
        if (v96) {
          break;
        }
        (*v442)(v437, v93, v438);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v92 = (void *)sub_100077984(0, v92[2] + 1, 1, v92, &qword_100091338, (uint64_t (*)(void))&type metadata accessor for APSQuickRelayAllocationStatus);
        }
        unint64_t v98 = v92[2];
        unint64_t v97 = v92[3];
        if (v98 >= v97 >> 1) {
          uint64_t v92 = (void *)sub_100077984(v97 > 1, v98 + 1, 1, v92, &qword_100091338, (uint64_t (*)(void))&type metadata accessor for APSQuickRelayAllocationStatus);
        }
        v92[2] = v98 + 1;
        uint64_t v99 = v430;
        uint64_t v100 = v438;
        (*(void (**)(unint64_t, uint64_t, void))(v430 + 32))((unint64_t)v92+ ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80))+ *(void *)(v99 + 72) * v98, v437, v438);
        sub_1000048CC(v94, v95);
        swift_bridgeObjectRelease();
        uint64_t v101 = *(void (**)(void, void))(v99 + 8);
        uint64_t v93 = (uint64_t)v429;
        v101(v429, v100);
        v91 += 64;
        unint64_t v90 = v443 - 1;
        if (v443 == (char *)1)
        {
          swift_bridgeObjectRelease();
          uint64_t v46 = v447;
          uint64_t v75 = v426;
          goto LABEL_62;
        }
      }
      sub_1000048CC(v94, v95);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v92 = &_swiftEmptyArrayStorage;
LABEL_62:
      uint64_t v102 = *(void *)(v75 + 2048);
      uint64_t v414 = v92;
      if (v102 && (unint64_t v103 = *(void *)(v102 + 16)) != 0)
      {
        unint64_t v447 = v46;
        uint64_t v421 = v427 + 16;
        uint64_t v420 = v427 + 32;
        unint64_t v419 = v427 + 8;
        uint64_t v104 = swift_bridgeObjectRetain();
        uint64_t v105 = 0;
        uint64_t v450 = &_swiftEmptyArrayStorage;
        uint64_t v429 = (char *)v104;
        while (1)
        {
          unint64_t v433 = v103;
          uint64_t v430 = v105;
          uint64_t v106 = *(void *)(v104 + v105 + 32);
          uint64_t v443 = *(char **)(v104 + v105 + 40);
          uint64_t v107 = *(void (***)(void, void, void))(v104 + v105 + 48);
          unint64_t v108 = *(void *)(v104 + v105 + 56);
          unint64_t v109 = *(void *)(v104 + v105 + 88);
          uint64_t v437 = *(void *)(v104 + v105 + 80);
          uint64_t v110 = v437;
          unint64_t v111 = *(void *)(v104 + v105 + 104);
          uint64_t v445 = *(char **)(v104 + v105 + 96);
          uint64_t v112 = *(void (***)(uint64_t, uint64_t, void))(v104 + v105 + 112);
          unint64_t v113 = *(void *)(v104 + v105 + 120);
          LODWORD(v442) = *(unsigned __int8 *)(v104 + v105 + 136);
          unint64_t v441 = *(void *)(v104 + v105 + 128);
          LODWORD(v440) = *(unsigned __int8 *)(v104 + v105 + 72);
          uint64_t v439 = *(char **)(v104 + v105 + 64);
          unint64_t v444 = v106;
          sub_1000048B8(v106, (unint64_t)v443);
          uint64_t v438 = v107;
          sub_1000048B8((uint64_t)v107, v108);
          sub_1000048B8(v110, v109);
          uint64_t v114 = (uint64_t)v445;
          sub_1000048B8((uint64_t)v445, v111);
          sub_1000048B8((uint64_t)v112, v113);
          sub_1000048B8(v106, (unint64_t)v443);
          sub_1000048B8((uint64_t)v107, v108);
          uint64_t v115 = v437;
          sub_1000048B8(v437, v109);
          sub_1000048B8(v114, v111);
          sub_1000048B8((uint64_t)v112, v113);
          unint64_t v441 = v113;
          uint64_t v442 = v112;
          unint64_t v116 = v111;
          uint64_t v117 = v115;
          char v118 = v438;
          unint64_t v119 = v108;
          unint64_t v120 = v109;
          uint64_t v121 = v436;
          uint64_t v122 = v117;
          uint64_t v123 = v447;
          sub_100078070();
          unint64_t v447 = v123;
          if (v123) {
            break;
          }
          (*(void (**)(uint64_t, uint64_t, unint64_t))v421)(v434, v121, v435);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v450 = (void *)sub_100077984(0, v450[2] + 1, 1, v450, &qword_100091340, (uint64_t (*)(void))&type metadata accessor for APSQuickRelaySelfAllocToken);
          }
          unint64_t v124 = v116;
          unint64_t v126 = v450[2];
          unint64_t v125 = v450[3];
          if (v126 >= v125 >> 1) {
            uint64_t v450 = (void *)sub_100077984(v125 > 1, v126 + 1, 1, v450, &qword_100091340, (uint64_t (*)(void))&type metadata accessor for APSQuickRelaySelfAllocToken);
          }
          uint64_t v127 = v450;
          v450[2] = v126 + 1;
          unint64_t v128 = (unint64_t)v427;
          unint64_t v129 = v435;
          (*((void (**)(unint64_t, uint64_t, unint64_t))v427 + 4))((unint64_t)v127+ ((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80))+ *(void *)(v128 + 72) * v126, v434, v435);
          sub_1000048CC(v444, (unint64_t)v443);
          sub_1000048CC((uint64_t)v118, v119);
          sub_1000048CC(v122, v120);
          sub_1000048CC((uint64_t)v445, v124);
          sub_1000048CC((uint64_t)v442, v441);
          (*(void (**)(uint64_t, unint64_t))(v128 + 8))(v436, v129);
          uint64_t v105 = v430 + 112;
          unint64_t v103 = v433 - 1;
          uint64_t v104 = (uint64_t)v429;
          if (v433 == 1)
          {
            swift_bridgeObjectRelease();
            uint64_t v46 = v447;
            uint64_t v75 = v426;
            goto LABEL_74;
          }
        }
        sub_1000048CC(v444, (unint64_t)v443);
        sub_1000048CC((uint64_t)v118, v119);
        sub_1000048CC(v122, v120);
        sub_1000048CC((uint64_t)v445, v116);
        sub_1000048CC((uint64_t)v442, v441);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v450 = &_swiftEmptyArrayStorage;
LABEL_74:
        uint64_t v130 = *(void *)(v75 + 2088);
        unint64_t v447 = v46;
        if (!v130 || (unint64_t v131 = *(char **)(v130 + 16)) == 0)
        {
          uint64_t v445 = (char *)&_swiftEmptyArrayStorage;
LABEL_87:
          uint64_t v348 = *(void *)v75;
          uint64_t v347 = *(void *)(v75 + 8);
          int v346 = *(unsigned __int8 *)(v75 + 16);
          uint64_t v345 = *(void *)(v75 + 24);
          int v344 = *(unsigned __int8 *)(v75 + 32);
          uint64_t v387 = *(void *)(v75 + 40);
          unint64_t v444 = *(void *)(v75 + 48);
          uint64_t v429 = *(char **)(v75 + 56);
          unint64_t v397 = *(void *)(v75 + 64);
          uint64_t v412 = *(void *)(v75 + 72);
          uint64_t v443 = *(char **)(v75 + 80);
          uint64_t v442 = *(void (***)(uint64_t, uint64_t, void))(v75 + 88);
          unint64_t v441 = *(void *)(v75 + 96);
          uint64_t v440 = *(void *)(v75 + 104);
          uint64_t v438 = *(void (***)(void, void, void))(v75 + 112);
          uint64_t v343 = *(void *)(v75 + 120);
          uint64_t v437 = *(void *)(v75 + 128);
          uint64_t v436 = *(void *)(v75 + 136);
          unint64_t v435 = *(void *)(v75 + 144);
          uint64_t v342 = *(void *)(v75 + 152);
          uint64_t v439 = *(char **)(v75 + 160);
          int v341 = *(unsigned __int8 *)(v75 + 168);
          sub_100065A64(v425, v418, &qword_100091320);
          uint64_t v340 = *(void *)(v75 + 192);
          int v339 = *(unsigned __int8 *)(v75 + 200);
          uint64_t v432 = *(void *)(v75 + 208);
          unint64_t v431 = *(void *)(v75 + 216);
          int v338 = *(unsigned __int8 *)(v75 + 224);
          int v337 = *(unsigned __int8 *)(v75 + 225);
          uint64_t v430 = *(void *)(v75 + 232);
          uint64_t v427 = *(char **)(v75 + 240);
          uint64_t v434 = *(void *)(v75 + 248);
          unint64_t v433 = *(void *)(v75 + 256);
          uint64_t v336 = *(void *)(v75 + 264);
          uint64_t v426 = *(void *)(v75 + 272);
          uint64_t v335 = *(void *)(v75 + 280);
          uint64_t v424 = *(void *)(v75 + 288);
          uint64_t v147 = *(void *)(v75 + 304);
          uint64_t v334 = *(void *)(v75 + 296);
          uint64_t v252 = v147;
          uint64_t v423 = *(char **)(v75 + 312);
          uint64_t v421 = *(char **)(v75 + 320);
          uint64_t v333 = *(void *)(v75 + 328);
          int v332 = *(unsigned __int8 *)(v75 + 336);
          uint64_t v331 = *(void *)(v75 + 344);
          unint64_t v419 = *(char **)(v75 + 352);
          uint64_t v330 = *(void *)(v75 + 360);
          uint64_t v413 = *(void *)(v75 + 368);
          uint64_t v329 = *(void *)(v75 + 376);
          uint64_t v411 = *(void *)(v75 + 384);
          uint64_t v410 = *(void *)(v75 + 392);
          uint64_t v420 = *(char **)(v75 + 400);
          uint64_t v328 = *(void *)(v75 + 408);
          uint64_t v409 = *(void *)(v75 + 416);
          uint64_t v327 = *(void *)(v75 + 424);
          uint64_t v408 = *(void *)(v75 + 432);
          uint64_t v326 = *(void *)(v75 + 440);
          int v325 = *(unsigned __int8 *)(v75 + 448);
          uint64_t v324 = *(void *)(v75 + 456);
          int v323 = *(unsigned __int8 *)(v75 + 464);
          uint64_t v148 = *(void *)(v75 + 480);
          uint64_t v322 = *(void *)(v75 + 472);
          uint64_t v248 = v148;
          uint64_t v407 = *(void *)(v75 + 488);
          unint64_t v406 = *(void *)(v75 + 496);
          uint64_t v405 = *(void *)(v75 + 504);
          unint64_t v404 = *(void *)(v75 + 512);
          uint64_t v321 = *(void *)(v75 + 520);
          int v320 = *(unsigned __int8 *)(v75 + 528);
          uint64_t v403 = *(void *)(v75 + 536);
          unint64_t v402 = *(void *)(v75 + 544);
          uint64_t v319 = *(void *)(v75 + 552);
          uint64_t v401 = *(void *)(v75 + 560);
          uint64_t v318 = *(void *)(v75 + 568);
          uint64_t v399 = *(void *)(v75 + 576);
          uint64_t v317 = *(void *)(v75 + 584);
          uint64_t v400 = *(void *)(v75 + 592);
          uint64_t v316 = *(void *)(v75 + 600);
          int v315 = *(unsigned __int8 *)(v75 + 608);
          uint64_t v314 = *(void *)(v75 + 616);
          int v313 = *(unsigned __int8 *)(v75 + 624);
          uint64_t v312 = *(void *)(v75 + 632);
          int v311 = *(unsigned __int8 *)(v75 + 640);
          uint64_t v310 = *(void *)(v75 + 648);
          int v309 = *(unsigned __int8 *)(v75 + 656);
          uint64_t v398 = *(void *)(v75 + 664);
          unint64_t v396 = *(void *)(v75 + 672);
          uint64_t v308 = *(void *)(v75 + 680);
          uint64_t v395 = *(void *)(v75 + 688);
          uint64_t v307 = *(void *)(v75 + 696);
          int v306 = *(unsigned __int8 *)(v75 + 704);
          uint64_t v305 = *(void *)(v75 + 712);
          int v304 = *(unsigned __int8 *)(v75 + 720);
          uint64_t v303 = *(void *)(v75 + 728);
          uint64_t v394 = *(void *)(v75 + 736);
          uint64_t v302 = *(void *)(v75 + 744);
          int v301 = *(unsigned __int8 *)(v75 + 752);
          uint64_t v300 = *(void *)(v75 + 760);
          uint64_t v393 = *(void *)(v75 + 768);
          uint64_t v299 = *(void *)(v75 + 776);
          int v298 = *(unsigned __int8 *)(v75 + 784);
          uint64_t v297 = *(void *)(v75 + 792);
          int v296 = *(unsigned __int8 *)(v75 + 800);
          uint64_t v295 = *(void *)(v75 + 808);
          int v294 = *(unsigned __int8 *)(v75 + 816);
          uint64_t v293 = *(void *)(v75 + 840);
          int v292 = *(unsigned __int8 *)(v75 + 848);
          uint64_t v291 = *(void *)(v75 + 856);
          int v290 = *(unsigned __int8 *)(v75 + 864);
          uint64_t v289 = *(void *)(v75 + 872);
          int v288 = *(unsigned __int8 *)(v75 + 880);
          int v287 = *(unsigned __int8 *)(v75 + 881);
          int v286 = *(unsigned __int8 *)(v75 + 882);
          int v285 = *(unsigned __int8 *)(v75 + 883);
          int v284 = *(unsigned __int8 *)(v75 + 884);
          uint64_t v283 = *(void *)(v75 + 888);
          uint64_t v392 = *(void *)(v75 + 896);
          uint64_t v282 = *(void *)(v75 + 904);
          uint64_t v200 = *(void *)(v75 + 912);
          uint64_t v391 = *(void *)(v75 + 920);
          unint64_t v390 = *(void *)(v75 + 928);
          uint64_t v281 = *(void *)(v75 + 936);
          uint64_t v389 = *(void *)(v75 + 944);
          uint64_t v280 = *(void *)(v75 + 952);
          uint64_t v388 = *(void *)(v75 + 960);
          uint64_t v279 = *(void *)(v75 + 968);
          uint64_t v386 = *(void *)(v75 + 976);
          uint64_t v278 = *(void *)(v75 + 984);
          uint64_t v385 = *(void *)(v75 + 992);
          uint64_t v277 = *(void *)(v75 + 1000);
          uint64_t v384 = *(void *)(v75 + 1008);
          uint64_t v276 = *(void *)(v75 + 1016);
          int v275 = *(unsigned __int8 *)(v75 + 1024);
          uint64_t v274 = *(void *)(v75 + 1032);
          uint64_t v383 = *(void *)(v75 + 1040);
          uint64_t v273 = *(void *)(v75 + 1048);
          int v272 = *(unsigned __int8 *)(v75 + 1056);
          uint64_t v271 = *(void *)(v75 + 1064);
          uint64_t v382 = *(void *)(v75 + 1072);
          uint64_t v270 = *(void *)(v75 + 1080);
          int v269 = *(unsigned __int8 *)(v75 + 1088);
          int v268 = *(unsigned __int8 *)(v75 + 1089);
          uint64_t v267 = *(void *)(v75 + 1096);
          uint64_t v381 = *(void *)(v75 + 1104);
          uint64_t v266 = *(void *)(v75 + 1112);
          int v265 = *(unsigned __int8 *)(v75 + 1120);
          uint64_t v264 = *(void *)(v75 + 1128);
          int v263 = *(unsigned __int8 *)(v75 + 1136);
          uint64_t v262 = *(void *)(v75 + 1144);
          uint64_t v183 = *(void *)(v75 + 1152);
          sub_100065A64(v428, v417, &qword_100090E70);
          uint64_t v380 = *(void *)(v75 + 1256);
          int v261 = *(unsigned __int8 *)(v75 + 1312);
          int v260 = *(unsigned __int8 *)(v75 + 1352);
          int v259 = *(unsigned __int8 *)(v75 + 1416);
          int v258 = *(unsigned __int8 *)(v75 + 1432);
          int v257 = *(unsigned __int8 *)(v75 + 1448);
          int v256 = *(unsigned __int8 *)(v75 + 1464);
          int v255 = *(unsigned __int8 *)(v75 + 1480);
          int v254 = *(unsigned __int8 *)(v75 + 1512);
          int v253 = *(unsigned __int8 *)(v75 + 1528);
          int v251 = *(unsigned __int8 *)(v75 + 1576);
          int v250 = *(unsigned __int8 *)(v75 + 1624);
          int v249 = *(unsigned __int8 *)(v75 + 1640);
          int v247 = *(unsigned __int8 *)(v75 + 1696);
          int v245 = *(unsigned __int8 *)(v75 + 1712);
          int v241 = *(unsigned __int8 *)(v75 + 1744);
          int v236 = *(unsigned __int8 *)(v75 + 1776);
          int v235 = *(unsigned __int8 *)(v75 + 1792);
          int v229 = *(unsigned __int8 *)(v75 + 1840);
          int v222 = *(unsigned __int8 *)(v75 + 1904);
          int v220 = *(unsigned __int8 *)(v75 + 1936);
          int v216 = *(unsigned __int8 *)(v75 + 1984);
          int v214 = *(unsigned __int8 *)(v75 + 2000);
          int v211 = *(unsigned __int8 *)(v75 + 2016);
          int v208 = *(unsigned __int8 *)(v75 + 2032);
          int v204 = *(unsigned __int8 *)(v75 + 2080);
          int v201 = *(unsigned __int8 *)(v75 + 2104);
          int v199 = *(unsigned __int8 *)(v75 + 2120);
          int v197 = *(unsigned __int8 *)(v75 + 2160);
          int v195 = *(unsigned __int8 *)(v75 + 2176);
          unint64_t v175 = *(void *)(v75 + 1264);
          unint64_t v149 = v175;
          uint64_t v246 = *(void *)(v75 + 1272);
          uint64_t v379 = *(void *)(v75 + 1280);
          uint64_t v378 = *(void *)(v75 + 1288);
          unint64_t v377 = *(void *)(v75 + 1296);
          uint64_t v244 = *(void *)(v75 + 1304);
          uint64_t v243 = *(void *)(v75 + 1320);
          uint64_t v376 = *(void *)(v75 + 1328);
          int v242 = *(unsigned __int8 *)(v75 + 1336);
          int v240 = *(unsigned __int8 *)(v75 + 1337);
          int v239 = *(unsigned __int8 *)(v75 + 1338);
          uint64_t v238 = *(void *)(v75 + 1344);
          uint64_t v237 = *(void *)(v75 + 1360);
          uint64_t v375 = *(void *)(v75 + 1368);
          uint64_t v374 = *(void *)(v75 + 1376);
          unint64_t v373 = *(void *)(v75 + 1384);
          uint64_t v372 = *(void *)(v75 + 1392);
          unint64_t v371 = *(void *)(v75 + 1400);
          uint64_t v234 = *(void *)(v75 + 1408);
          int v233 = *(unsigned __int8 *)(v75 + 1417);
          int v232 = *(unsigned __int8 *)(v75 + 1418);
          uint64_t v150 = *(void *)(v75 + 1424);
          uint64_t v230 = *(void *)(v75 + 1440);
          uint64_t v231 = v150;
          int v228 = *(unsigned __int8 *)(v75 + 1449);
          uint64_t v151 = *(void *)(v75 + 1456);
          uint64_t v226 = *(void *)(v75 + 1472);
          uint64_t v227 = v151;
          uint64_t v152 = *(void *)(v75 + 1488);
          uint64_t v370 = *(void *)(v75 + 1496);
          uint64_t v224 = *(void *)(v75 + 1504);
          uint64_t v225 = v152;
          uint64_t v223 = *(void *)(v75 + 1520);
          uint64_t v369 = *(void *)(v75 + 1536);
          unint64_t v368 = *(void *)(v75 + 1544);
          uint64_t v367 = *(void *)(v75 + 1552);
          unint64_t v366 = *(void *)(v75 + 1560);
          uint64_t v221 = *(void *)(v75 + 1568);
          uint64_t v365 = *(void *)(v75 + 1584);
          unint64_t v364 = *(void *)(v75 + 1592);
          uint64_t v363 = *(void *)(v75 + 1600);
          unint64_t v362 = *(void *)(v75 + 1608);
          uint64_t v153 = *(void *)(v75 + 1616);
          uint64_t v218 = *(void *)(v75 + 1632);
          uint64_t v219 = v153;
          uint64_t v217 = *(void *)(v75 + 1656);
          uint64_t v361 = *(void *)(v75 + 1664);
          uint64_t v215 = *(void *)(v75 + 1672);
          v167[1] = *(void *)(v75 + 1680);
          uint64_t v213 = *(void *)(v75 + 1688);
          int v212 = *(unsigned __int8 *)(v75 + 1697);
          int v210 = *(unsigned __int8 *)(v75 + 1698);
          uint64_t v209 = *(void *)(v75 + 1704);
          uint64_t v360 = *(void *)(v75 + 1720);
          unint64_t v359 = *(void *)(v75 + 1728);
          uint64_t v207 = *(void *)(v75 + 1736);
          int v206 = *(unsigned __int8 *)(v75 + 1745);
          uint64_t v205 = *(void *)(v75 + 1752);
          uint64_t v358 = *(void *)(v75 + 1760);
          uint64_t v154 = *(void *)(v75 + 1768);
          uint64_t v202 = *(void *)(v75 + 1784);
          uint64_t v203 = v154;
          uint64_t v357 = *(void *)(v75 + 1800);
          unint64_t v356 = *(void *)(v75 + 1808);
          uint64_t v355 = *(void *)(v75 + 1816);
          unint64_t v354 = *(void *)(v75 + 1824);
          uint64_t v198 = *(void *)(v75 + 1832);
          uint64_t v353 = *(void *)(v75 + 1848);
          unint64_t v352 = *(void *)(v75 + 1856);
          uint64_t v351 = *(void *)(v75 + 1864);
          unint64_t v350 = *(void *)(v75 + 1872);
          uint64_t v349 = *(void *)(v75 + 1880);
          unint64_t v155 = *(void *)(v75 + 1888);
          uint64_t v196 = *(void *)(v75 + 1896);
          uint64_t v176 = *(void *)(v75 + 1912);
          uint64_t v156 = *(void *)(v75 + 1928);
          uint64_t v157 = *(void *)(v75 + 1944);
          unint64_t v168 = *(void *)(v75 + 1920);
          uint64_t v169 = v157;
          unint64_t v158 = *(void *)(v75 + 1952);
          uint64_t v193 = *(void *)(v75 + 1960);
          uint64_t v194 = v156;
          uint64_t v159 = *(void *)(v75 + 1968);
          unint64_t v170 = v158;
          uint64_t v171 = v159;
          uint64_t v160 = *(void *)(v75 + 1976);
          uint64_t v191 = *(void *)(v75 + 1992);
          uint64_t v192 = v160;
          uint64_t v161 = *(void *)(v75 + 2008);
          uint64_t v189 = *(void *)(v75 + 2024);
          uint64_t v190 = v161;
          uint64_t v162 = *(void *)(v75 + 2056);
          unint64_t v174 = *(void *)(v75 + 2064);
          uint64_t v163 = *(void *)(v75 + 2072);
          uint64_t v187 = *(void *)(v75 + 2096);
          uint64_t v188 = v163;
          uint64_t v186 = *(void *)(v75 + 2112);
          LODWORD(v163) = *(unsigned __int8 *)(v75 + 2121);
          int v184 = *(unsigned __int8 *)(v75 + 2122);
          int v185 = v163;
          uint64_t v182 = *(void *)(v75 + 2128);
          uint64_t v164 = *(void *)(v75 + 2136);
          uint64_t v172 = v162;
          uint64_t v173 = v164;
          int v181 = *(unsigned __int8 *)(v75 + 2144);
          uint64_t v165 = *(void *)(v75 + 2152);
          uint64_t v179 = *(void *)(v75 + 2168);
          uint64_t v180 = v165;
          LODWORD(v164) = *(unsigned __int8 *)(v75 + 2177);
          int v177 = *(unsigned __int8 *)(v75 + 2178);
          int v178 = v164;
          sub_1000048B8(v387, v444);
          sub_1000048B8((uint64_t)v429, v397);
          sub_1000048B8(v412, (unint64_t)v443);
          sub_1000048B8((uint64_t)v442, v441);
          sub_1000048B8(v440, (unint64_t)v438);
          swift_bridgeObjectRetain();
          sub_1000048B8(v436, v435);
          swift_bridgeObjectRetain();
          sub_1000048B8(v432, v431);
          sub_1000048B8(v430, (unint64_t)v427);
          sub_1000048B8(v434, v433);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1000048B8((uint64_t)v423, (unint64_t)v421);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1000048B8(v407, v406);
          sub_1000048B8(v405, v404);
          sub_1000048B8(v403, v402);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1000048B8(v398, v396);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1000048B8(v391, v390);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1000048B8(v380, v149);
          swift_bridgeObjectRetain();
          sub_1000048B8(v378, v377);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1000048B8(v374, v373);
          sub_1000048B8(v372, v371);
          swift_bridgeObjectRetain();
          sub_1000048B8(v369, v368);
          sub_1000048B8(v367, v366);
          sub_1000048B8(v365, v364);
          sub_1000048B8(v363, v362);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1000048B8(v360, v359);
          swift_bridgeObjectRetain();
          sub_1000048B8(v357, v356);
          sub_1000048B8(v355, v354);
          sub_1000048B8(v353, v352);
          sub_1000048B8(v351, v350);
          sub_1000048B8(v349, v155);
          sub_1000048B8(v176, v168);
          sub_1000048B8(v169, v170);
          swift_bridgeObjectRetain();
          sub_1000048B8(v172, v174);
          swift_bridgeObjectRetain();
          sub_100077C60();
          sub_10000A43C(v425, &qword_100091320);
          return sub_10000A43C(v428, &qword_100090E70);
        }
        uint64_t v438 = (void (**)(void, void, void))(v424 + 16);
        uint64_t v437 = v424 + 32;
        uint64_t v436 = v424 + 8;
        unint64_t v435 = swift_bridgeObjectRetain();
        uint64_t v132 = (unsigned __int8 *)(v435 + 56);
        uint64_t v445 = (char *)&_swiftEmptyArrayStorage;
        uint64_t v133 = (uint64_t)v423;
        while (1)
        {
          uint64_t v439 = v131;
          uint64_t v134 = *((void *)v132 + 3);
          unint64_t v135 = *((void *)v132 + 4);
          uint64_t v136 = *((void *)v132 + 5);
          unint64_t v137 = *((void *)v132 + 6);
          LODWORD(v443) = v132[16];
          uint64_t v442 = (void (**)(uint64_t, uint64_t, void))*((void *)v132 + 1);
          LODWORD(v441) = *v132;
          uint64_t v440 = *((void *)v132 - 1);
          swift_bridgeObjectRetain();
          sub_1000048B8(v134, v135);
          sub_1000048B8(v136, v137);
          swift_bridgeObjectRetain();
          sub_1000048B8(v134, v135);
          sub_1000048B8(v136, v137);
          HIBYTE(v166) = HIBYTE(v137);
          unint64_t v444 = v136;
          uint64_t v138 = v447;
          sub_1000780F0();
          unint64_t v447 = v138;
          if (v138) {
            break;
          }
          (*v438)(v431, v133, v432);
          uint64_t v139 = v445;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v139 = (char *)sub_100077984(0, *((void *)v139 + 2) + 1, 1, v139, &qword_100091348, (uint64_t (*)(void))&type metadata accessor for APSQuickRelayPluginAllocation);
          }
          unint64_t v141 = *((void *)v139 + 2);
          unint64_t v140 = *((void *)v139 + 3);
          if (v141 >= v140 >> 1) {
            uint64_t v139 = (char *)sub_100077984(v140 > 1, v141 + 1, 1, v139, &qword_100091348, (uint64_t (*)(void))&type metadata accessor for APSQuickRelayPluginAllocation);
          }
          v132 += 80;
          *((void *)v139 + 2) = v141 + 1;
          unint64_t v142 = v139;
          uint64_t v143 = v424;
          unint64_t v144 = (*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80);
          uint64_t v445 = v142;
          uint64_t v145 = v432;
          (*(void (**)(char *, unint64_t, uint64_t))(v424 + 32))(&v142[v144 + *(void *)(v424 + 72) * v141], v431, v432);
          swift_bridgeObjectRelease();
          sub_1000048CC(v134, v135);
          sub_1000048CC(v444, v137);
          unint64_t v146 = *(void (**)(char *, uint64_t))(v143 + 8);
          uint64_t v133 = (uint64_t)v423;
          v146(v423, v145);
          unint64_t v131 = v439 - 1;
          if (v439 == (char *)1)
          {
            swift_bridgeObjectRelease();
            uint64_t v75 = v426;
            goto LABEL_87;
          }
        }
        swift_bridgeObjectRelease();
        sub_1000048CC(v134, v135);
        sub_1000048CC(v444, v137);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    swift_bridgeObjectRelease();
    sub_10000A43C(v425, &qword_100091320);
    sub_10000A43C(v428, &qword_100090E70);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v78 = v46;
  uint64_t v443 = (char *)(v433 + 16);
  uint64_t v442 = (void (**)(uint64_t, uint64_t, void))(v433 + 32);
  unint64_t v441 = v433 + 8;
  uint64_t v421 = (char *)swift_bridgeObjectRetain();
  uint64_t v79 = v421 + 73;
  uint64_t v80 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))&_swiftEmptyArrayStorage;
  unint64_t v81 = v419;
  while (1)
  {
    unint64_t v447 = v78;
    unint64_t v444 = v77;
    LODWORD(v450) = *(v79 - 1);
    uint64_t v445 = *(char **)(v79 - 9);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v82 = v447;
    sub_100078050();
    uint64_t v78 = v82;
    if (v82) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))v443)(v439, v81, v440);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v80 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100077984(0, *((void *)v80 + 2) + 1, 1, v80, &qword_100091330, (uint64_t (*)(void))&type metadata accessor for APSQuickRelayPluginRequest);
    }
    unint64_t v83 = v444;
    unint64_t v85 = *((void *)v80 + 2);
    unint64_t v84 = *((void *)v80 + 3);
    if (v85 >= v84 >> 1) {
      uint64_t v80 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100077984(v84 > 1, v85 + 1, 1, v80, &qword_100091330, (uint64_t (*)(void))&type metadata accessor for APSQuickRelayPluginRequest);
    }
    *((void *)v80 + 2) = v85 + 1;
    unint64_t v86 = v433;
    unint64_t v87 = (unint64_t)v80
        + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80))
        + *(void *)(v86 + 72) * v85;
    uint64_t v88 = v440;
    (*(void (**)(unint64_t, char *, uint64_t))(v433 + 32))(v87, v439, v440);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v81, v88);
    v79 += 48;
    unint64_t v77 = v83 - 1;
    if (!v77)
    {
      swift_bridgeObjectRelease();
      uint64_t v75 = v426;
      uint64_t v46 = 0;
      goto LABEL_50;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10000A43C(v425, &qword_100091320);
  sub_10000A43C(v428, &qword_100090E70);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *sub_100077850(uint64_t a1)
{
  __chkstk_darwin(a1);
  sub_100077B80();
  swift_allocObject();
  sub_100077B70();
  sub_10005EDD8();
  sub_100077B60();
  unint64_t result = (void *)swift_release();
  if (!v1)
  {
    memcpy(__dst, v3, 0x883uLL);
    sub_100074DD4((uint64_t)__dst);
    return sub_10005F6D0(__dst);
  }
  return result;
}

uint64_t sub_100077944(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100077984(a1, a2, a3, a4, &qword_100091358, (uint64_t (*)(void))&type metadata accessor for IDSHomeKitInviteeScheduleYearDayRule);
}

uint64_t sub_100077964(char a1, int64_t a2, char a3, void *a4)
{
  return sub_100077984(a1, a2, a3, a4, &qword_100091350, (uint64_t (*)(void))&type metadata accessor for IDSHomeKitInviteeScheduleWeekDayRule);
}

uint64_t sub_100077984(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return sub_100077B60();
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100002214(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_29;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  if (a1)
  {
    if (v16 < a4
      || (unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80),
          (char *)v16 + v20 >= (char *)a4 + v20 + *(void *)(v19 + 72) * v11))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_100077B60()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t sub_100077B70()
{
  return PropertyListDecoder.init()();
}

uint64_t sub_100077B80()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t sub_100077B90()
{
  return type metadata accessor for Date();
}

uint64_t sub_100077BA0()
{
  return type metadata accessor for UUID();
}

uint64_t sub_100077BB0()
{
  return os_log(_:dso:log:_:_:)();
}

void sub_100077BC0(Swift::OpaquePointer allowedImageFormats, Swift::Bool increasedRestrictions)
{
}

void sub_100077BD0(Swift::OpaquePointer codecs)
{
}

uint64_t sub_100077BE0()
{
  return dispatch thunk of BlastDoorServer.resume(sandboxID:)();
}

uint64_t sub_100077BF0()
{
  return static BlastDoorServer.service.getter();
}

uint64_t sub_100077C00()
{
  return BlastDoorServer.register<A, B>(unpacker:for:)();
}

uint64_t sub_100077C10()
{
  return BlastDoorServer.register<A, B>(unpacker:for:)();
}

uint64_t sub_100077C20()
{
  return type metadata accessor for BlastDoorServer();
}

uint64_t sub_100077C30()
{
  return CommandType.init(rawValue:)();
}

uint64_t sub_100077C40()
{
  return IDSInvitation.init(with:state:expiration:identifier:)();
}

uint64_t sub_100077C50()
{
  return type metadata accessor for IDSInvitation();
}

uint64_t sub_100077C60()
{
  return APSUserPayload.init(with:commandContext:version:payload:bulkedPayload:fanoutPayload:additionalPayload:payloadMetadata:messageId:messageUUID:queueId:deliveryStatus:deliveryContext:certifiedDeliveryVersion:certifiedDeliveryRts:noResponseNeeded:generateDeliveryReceipt:sessionToken:homekitSessionToken:destinationId:userAgent:MMCSOwnerId:MMCSFileSignature:MMCSFileLength:MMCSAuthToken:MMCSAuthUrl:MMCSAuthId:MMCSDownloadAuthList:MMCSDownloadUrlList:MMCSDownloadUrl:MMCSUploadUrl:MMCSExpiryNanos:contentVersion:contentHeaders:contentBody:contentReferenceSignature:attachmentSize:token:senderId:senderOpaqueId:mspId:responseStatus:epochTimeNanos:originalEpochTimeNanos:failReason:failMessageId:failMessageIdString:failDownloadAttachmentSize:failUploadAttachmentSize:failReasonMessage:failTimeElapsed:encryptionType:storageFlags:priority:senderExpectsAck:dstIdTokenList:madridMessageList:storageCheckVersion:dateExpirationSeconds:madridProtocol:internalBuild:loggingProfile:traceProfile:groupMessage:contentType:adhocServiceOverr();
}

uint64_t sub_100077C70()
{
  return type metadata accessor for APSUserPayload();
}

uint64_t sub_100077C80()
{
  return IDSSampleMessage.init(with:clientName:date:version:)();
}

uint64_t sub_100077C90()
{
  return type metadata accessor for IDSSampleMessage();
}

uint64_t sub_100077CA0()
{
  return IDSSessionAccept.init(with:blob:sessionID:participantID:sessionMessageContext:useCloudPairedControlChannel:useStunMessageIntegrity:useSecureQRControlMessage:unauthenticatedPublicKey:remoteUsePhoneContinuityLocalMessage:remoteKeyMaterialData:remoteSSRC:remoteSecStart:)();
}

uint64_t sub_100077CB0()
{
  return type metadata accessor for IDSSessionAccept();
}

uint64_t sub_100077CC0()
{
  return type metadata accessor for IDSSessionCancel.IDSSessionEndedReason();
}

uint64_t sub_100077CD0()
{
  return IDSSessionCancel.init(with:sessionID:participantID:remoteEndReason:sessionMessageContext:)();
}

uint64_t sub_100077CE0()
{
  return type metadata accessor for IDSSessionCancel();
}

uint64_t sub_100077CF0()
{
  return type metadata accessor for ClientMessageType();
}

uint64_t sub_100077D00()
{
  return IDSSessionDecline.init(with:sessionID:participantID:sessionMessageContext:)();
}

uint64_t sub_100077D10()
{
  return type metadata accessor for IDSSessionDecline();
}

uint64_t sub_100077D20()
{
  return dispatch thunk of ContextualUnpacker.unpack(from:with:)();
}

uint64_t sub_100077D30()
{
  return IDSCommandResponse.init(with:messageId:messageUUID:responseStatus:failReason:token:internalBuild:loggingProfile:applicationId:requestType:idsSessionId:sharedSession:protocolVersion:)();
}

uint64_t sub_100077D40()
{
  return type metadata accessor for IDSCommandResponse();
}

uint64_t sub_100077D50()
{
  return IDSHealthInvitation.init(withUntrustedData:)();
}

uint64_t sub_100077D60()
{
  return type metadata accessor for IDSHealthInvitation();
}

uint64_t sub_100077D70()
{
  return IDSSampleInvitation.init(with:date:reason:)();
}

uint64_t sub_100077D80()
{
  return type metadata accessor for IDSSampleInvitation();
}

uint64_t sub_100077D90()
{
  return type metadata accessor for CloudKitSharingToken();
}

uint64_t sub_100077DA0()
{
  return type metadata accessor for IDSClientMessageType();
}

uint64_t sub_100077DB0()
{
  return type metadata accessor for IDSDictionaryContext();
}

uint64_t sub_100077DC0()
{
  return static IDSHomeKitInvitation.decodeCloudKitToken(_:)();
}

uint64_t sub_100077DD0()
{
  return IDSHomeKitInvitation.IDSHomeKitInvitationRequestedCapabilities.init(with:homeSupportedFeatures:)();
}

uint64_t sub_100077DE0()
{
  return type metadata accessor for IDSHomeKitInvitation.IDSHomeKitInvitationRequestedCapabilities();
}

uint64_t sub_100077DF0()
{
  return IDSHomeKitInvitation.init(with:inviteExpiryDate:requestedCapabilities:homeSuppressInviteNotification:inviteePrivilege:doesHomeHaveCameras:inviteeSchedule:homeUUID:controllerPublicKey:controllerPairingName:invitationIdentifier:homeInvitationShareToken:userId:invitationState:presenceAuthorizationStatus:issuerPublicKeyExternalRepresentation:)();
}

uint64_t sub_100077E00()
{
  return type metadata accessor for IDSHomeKitInvitation();
}

uint64_t sub_100077E10()
{
  return IDSInvitationContext.init(with:contextType:context:)();
}

uint64_t sub_100077E20()
{
  return type metadata accessor for IDSInvitationContext();
}

uint64_t sub_100077E30()
{
  return IDSRestrictedMessage.init(with:)();
}

uint64_t sub_100077E40()
{
  return type metadata accessor for IDSSessionInvitation.TransportType();
}

uint64_t sub_100077E50()
{
  return IDSSessionInvitation.init(with:version:connectionCountHint:disableEncryption:singleChannelDirectMode:useStunMessageIntegrity:useSecureQRControlMessage:blob:messageIsRealTime:unauthenticatedPublicKey:assumeRemoteDeviceEncryption:sessionMessageContext:usePhoneContinuityLocalMessage:participantID:declineOnNetworkError:sessionID:needsToWaitForPreConnectionData:useCloudPairedControlChannel:)();
}

uint64_t sub_100077E60()
{
  return type metadata accessor for IDSSessionInvitation();
}

uint64_t sub_100077E70()
{
  return type metadata accessor for IDSSessionReinitiate.IDSSessionReinitiateSubcommand();
}

uint64_t sub_100077E80()
{
  return IDSSessionReinitiate.init(with:sessionID:participantID:sessionReinitiateSubcommand:)();
}

uint64_t sub_100077E90()
{
  return type metadata accessor for IDSSessionReinitiate();
}

uint64_t sub_100077EA0()
{
  return SafetyMonitorMessage.SMMessageType.init(defaultingRawValue:)();
}

uint64_t sub_100077EB0()
{
  return type metadata accessor for SafetyMonitorMessage.SMMessageType();
}

uint64_t sub_100077EC0()
{
  return SafetyMonitorMessage.SMsessionType.init(defaultingRawValue:)();
}

uint64_t sub_100077ED0()
{
  return SafetyMonitorMessage.SMTriggerCategory.init(defaultingRawValue:)();
}

uint64_t sub_100077EE0()
{
  return SafetyMonitorMessage.SMSessionDestinationType.init(defaultingRawValue:)();
}

uint64_t sub_100077EF0()
{
  return SafetyMonitorMessage.CLClientLocationReferenceFrame.init(defaultingRawValue:)();
}

uint64_t sub_100077F00()
{
  return SafetyMonitorMessage.SMDeviceConfigurationLowPowerModeWarningState.init(defaultingRawValue:)();
}

uint64_t sub_100077F10()
{
  return SafetyMonitorMessage.init(with:interfaceVersion:sendDate:messageID:sessionID:summaryText:receiverHandle:sharingInvitationData:shareURL:participantID:sessionType:estimatedEndTime:coarseEstimatedEndTime:sessionDestinationType:sessionDestinationMapItem:lowPowerModeWarningState:triggerTime:latitude:longitude:hunc:altitude:vunc:timeOfLocation:referenceFrame:speed:triggerType:safetyCacheKey:safetyCacheToken:isSOSTrigger:groupFields:)();
}

uint64_t sub_100077F20()
{
  return type metadata accessor for SafetyMonitorMessage();
}

uint64_t sub_100077F30()
{
  return IDSClientMessageResult.init(result:)();
}

uint64_t sub_100077F40()
{
  return type metadata accessor for IDSClientMessageResult();
}

uint64_t sub_100077F50()
{
  return static IDSKCSharingInvitation.decodeCloudKitToken(tokenData:shareURL:)();
}

uint64_t sub_100077F60()
{
  return IDSKCSharingInvitation.init(with:invitationToken:inviteeHandle:sentTime:displayName:)();
}

uint64_t sub_100077F70()
{
  return type metadata accessor for IDSKCSharingInvitation();
}

uint64_t sub_100077F80()
{
  return IDSClientMessageContext.command.getter();
}

uint64_t sub_100077F90()
{
  return IDSClientMessageContext.service.getter();
}

uint64_t sub_100077FA0()
{
  return type metadata accessor for IDSInvitationContextType();
}

uint64_t sub_100077FB0()
{
  return SafetyMonitorGroupFields.participantID.setter();
}

uint64_t sub_100077FC0()
{
  return SafetyMonitorGroupFields.receiverHandle.setter();
}

uint64_t sub_100077FD0()
{
  return SafetyMonitorGroupFields.sharingInvitationData.setter();
}

uint64_t sub_100077FE0()
{
  return SafetyMonitorGroupFields.init(with:receiverHandle:sharingInvitationData:shareURL:participantID:)();
}

uint64_t sub_100077FF0()
{
  return SafetyMonitorGroupFields.shareURL.setter();
}

uint64_t sub_100078000()
{
  return type metadata accessor for SafetyMonitorGroupFields();
}

uint64_t sub_100078010()
{
  return APSUserPayloadHttpHeaders.init(with:responseIdentifierString:strictTransportSecurity:traceId:splunkHint:asHttpHeader:)();
}

uint64_t sub_100078020()
{
  return type metadata accessor for APSUserPayloadHttpHeaders();
}

uint64_t sub_100078030()
{
  return IDSHomeKitInviteeSchedule.init(with:yearDayRules:)();
}

uint64_t sub_100078040()
{
  return type metadata accessor for IDSHomeKitInviteeSchedule();
}

uint64_t sub_100078050()
{
  return APSQuickRelayPluginRequest.init(with:pluginConfig:pluginStream:pluginDevMode:)();
}

uint64_t sub_100078060()
{
  return type metadata accessor for APSQuickRelayPluginRequest();
}

uint64_t sub_100078070()
{
  return APSQuickRelaySelfAllocToken.init(with:relayIpv6:relayPort:relaySessionKey:relaySessionId:relayAccessToken:relayProvider:)();
}

uint64_t sub_100078080()
{
  return type metadata accessor for APSQuickRelaySelfAllocToken();
}

uint64_t sub_100078090()
{
  return IDSCommandWebTunnelResponse.init(with:messageId:messageUUID:responseStatus:contentType:epochTimeNanos:httpUrl:httpHeaders:httpBody:httpBodyUrl:httpBodyKey:httpResponseStatus:httpErrorMsg:)();
}

uint64_t sub_1000780A0()
{
  return type metadata accessor for IDSCommandWebTunnelResponse();
}

uint64_t sub_1000780B0()
{
  return IDSActivitySharingInvitation.init(item:untrustedData:)();
}

uint64_t sub_1000780C0()
{
  return type metadata accessor for IDSActivitySharingInvitation();
}

uint64_t sub_1000780D0()
{
  return APSQuickRelayAllocationStatus.init(with:allocationStatus:token:destinationId:)();
}

uint64_t sub_1000780E0()
{
  return type metadata accessor for APSQuickRelayAllocationStatus();
}

uint64_t sub_1000780F0()
{
  return APSQuickRelayPluginAllocation.init(with:pluginStream:participantId:relaySessionKey:relayAccessToken:)();
}

uint64_t sub_100078100()
{
  return type metadata accessor for APSQuickRelayPluginAllocation();
}

uint64_t sub_100078110()
{
  return APSUserPayloadDeliveryContext.init(with:)();
}

uint64_t sub_100078120()
{
  return type metadata accessor for APSUserPayloadDeliveryContext();
}

uint64_t sub_100078130()
{
  return >> prefix<A>(_:)();
}

uint64_t sub_100078140()
{
  return IDSHomeKitInviteeScheduleWeekDayRule.init(with:endTime:daysOfTheWeek:)();
}

uint64_t sub_100078150()
{
  return type metadata accessor for IDSHomeKitInviteeScheduleWeekDayRule();
}

uint64_t sub_100078160()
{
  return IDSHomeKitInviteeScheduleYearDayRule.init(with:endDate:)();
}

uint64_t sub_100078170()
{
  return type metadata accessor for IDSHomeKitInviteeScheduleYearDayRule();
}

uint64_t sub_100078180()
{
  return Explosion.init(domain:errorType:keyPath:)();
}

uint64_t sub_100078190()
{
  return type metadata accessor for Explosion();
}

uint64_t sub_1000781A0()
{
  return type metadata accessor for SandboxID();
}

uint64_t sub_1000781B0()
{
  return Character.isNumber.getter();
}

uint64_t sub_1000781C0()
{
  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_1000781D0()
{
  return String.hash(into:)();
}

uint64_t sub_1000781E0()
{
  return String.index(before:)();
}

void sub_1000781F0(Swift::String a1)
{
}

uint64_t sub_100078200()
{
  return String.insert(_:at:)();
}

uint64_t sub_100078210()
{
  return String.UTF8View._foreignIndex(after:)();
}

uint64_t sub_100078220()
{
  return String.UTF8View._foreignIndex(_:offsetBy:)();
}

uint64_t sub_100078240()
{
  return String.UTF8View._foreignSubscript(position:)();
}

uint64_t sub_100078250()
{
  return String.UTF16View.index(_:offsetBy:)();
}

BOOL sub_100078260(Swift::String a1)
{
  return String.hasPrefix(_:)(a1);
}

uint64_t sub_100078270()
{
  return String.subscript.getter();
}

uint64_t sub_100078280()
{
  return String.init<A>(_:)();
}

uint64_t sub_100078290()
{
  return String.subscript.getter();
}

uint64_t sub_1000782A0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1000782B0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1000782C0()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_1000782D0()
{
  return static OS_os_log.blastDoor.getter();
}

uint64_t sub_1000782E0()
{
  return type metadata accessor for Optional();
}

uint64_t sub_1000782F0()
{
  return _HashTable.previousHole(before:)();
}

void sub_100078300(Swift::Int a1)
{
}

uint64_t sub_100078310()
{
  return DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
}

uint64_t sub_100078320()
{
  return type metadata accessor for DecodingError();
}

uint64_t sub_100078330()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t sub_100078340()
{
  return dispatch thunk of _AnySequenceBox._makeIterator()();
}

uint64_t sub_100078350()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t sub_100078360()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t sub_100078370()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t sub_100078380()
{
  return dispatch thunk of _AnyIteratorBoxBase.next()();
}

Swift::Int sub_100078390(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases, string);
}

uint64_t sub_1000783A0()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_1000783B0()
{
  return KeyedDecodingContainer.codingPath.getter();
}

uint64_t sub_1000783C0()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_1000783D0()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_1000783E0()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_1000783F0()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_100078400()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_100078410()
{
  return KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_100078420()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_100078430()
{
  return KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
}

uint64_t sub_100078440()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_100078450()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_100078460()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_100078470()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_100078480()
{
  return KeyedDecodingContainer.decode(_:forKey:)();
}

uint64_t sub_100078490()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_1000784A0()
{
  return KeyedDecodingContainer.allKeys.getter();
}

uint64_t sub_1000784B0()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_1000784C0()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1000784D0()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1000784E0()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t sub_1000784F0()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t sub_100078500()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t sub_100078510()
{
  return KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
}

uint64_t sub_100078520()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t sub_100078530()
{
  return KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
}

uint64_t sub_100078540()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_100078550()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_100078560()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_100078570()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_100078580()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_100078590()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_1000785A0()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_1000785B0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t sub_1000785C0()
{
  return _findStringSwitchCaseWithCache(cases:string:cache:)();
}

uint64_t sub_1000785D0()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_1000785E0()
{
  return Error._getEmbeddedNSError()();
}

uint64_t sub_1000785F0()
{
  return Error._code.getter();
}

uint64_t sub_100078600()
{
  return Error._domain.getter();
}

uint64_t sub_100078610()
{
  return Error._userInfo.getter();
}

uint64_t sub_100078620()
{
  return static Hasher._hash(seed:_:)();
}

uint64_t sub_100078630()
{
  return Hasher.init(_seed:)();
}

void sub_100078640(Swift::UInt a1)
{
}

Swift::Int sub_100078650()
{
  return Hasher._finalize()();
}

uint64_t sub_100078660()
{
  return Mirror.init(reflecting:)();
}

uint64_t sub_100078670()
{
  return Mirror.children.getter();
}

uint64_t sub_100078680()
{
  return type metadata accessor for Mirror();
}

uint64_t sub_100078690()
{
  return dispatch thunk of Decoder.container<A>(keyedBy:)();
}

uint64_t sub_1000786A0()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t _CFPrefsSetDirectModeEnabled()
{
  return __CFPrefsSetDirectModeEnabled();
}

uint64_t _CFPrefsSetReadOnly()
{
  return __CFPrefsSetReadOnly();
}

void bzero(void *a1, size_t a2)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

uint64_t self
{
  return _self;
}

uint64_t register_for_dlsym_callbacks()
{
  return _register_for_dlsym_callbacks();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return _swift_initEnumMetadataMultiPayload();
}

uint64_t swift_initEnumMetadataSingleCase()
{
  return _swift_initEnumMetadataSingleCase();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_initStructMetadata()
{
  return _swift_initStructMetadata();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}